{
	"version": "https://jsonfeed.org/version/1",
	"title": "Adam Keys is Thinking",
	"icon": "https://micro.blog/therealadam/avatar.jpg",
	"home_page_url": "https://therealadam.com/",
	"feed_url": "https://therealadam.com/feed.json",
	"items": [
		
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/28/on-one-hand-theres-the.html",
				
				"content_html": "<p>On one hand, there’s the classical music <a href=\"https://en.wikipedia.org/wiki/Catalogues_of_classical_compositions?wprov=sfti1\">catalog</a> mode of blogging. This is a bookmark, that’s a note, a photo here, a link there, an essay when I’m feeling ambitious. Étude, sonata, variations on a theme. Framing the writing by its scale and shape. A taxonomist’s delight.</p>\n<p>Then there’s the Jack White sort of blogging: <a href=\"https://youtu.be/r_F7aiOvdwE?si=hlL3nO2YtujN5G5O\">here’s a thing, I made it</a>. The edges weren’t worked down too much, the roughness is still there. It preserves the energy and spirit of the idea more than it tries to explore the idea to its logical end. Better to cut ideas too soon than coddle them.</p>\n<p>Both work! <a href=\"https://therealadam.com/2025/05/09/the-web-and-blogs-are.html\">Blogging is a big, weird tent</a>.</p>\n",
				"content_text": "On one hand, there’s the classical music [catalog](https://en.wikipedia.org/wiki/Catalogues_of_classical_compositions?wprov=sfti1) mode of blogging. This is a bookmark, that’s a note, a photo here, a link there, an essay when I’m feeling ambitious. Étude, sonata, variations on a theme. Framing the writing by its scale and shape. A taxonomist’s delight.\n\nThen there’s the Jack White sort of blogging: [here’s a thing, I made it](https://youtu.be/r_F7aiOvdwE?si=hlL3nO2YtujN5G5O). The edges weren’t worked down too much, the roughness is still there. It preserves the energy and spirit of the idea more than it tries to explore the idea to its logical end. Better to cut ideas too soon than coddle them.\n\nBoth work! [Blogging is a big, weird tent](https://therealadam.com/2025/05/09/the-web-and-blogs-are.html).\n\n",
				"date_published": "2025-05-28T11:18:11-07:00",
				"url": "https://therealadam.com/2025/05/28/on-one-hand-theres-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/26/i-miss-writing-do-not.html",
				
				"content_html": "<p>I miss writing “DO NOT ERASE” on whiteboards when a collaborator and I finally succeed at capturing the mental or visual model of a problem or its solution.</p>\n<p>It’s like writing “a good thing happened here today” on the whiteboard.</p>\n<p>Close second place: the act of crossing an item off your to-do list, particularly one on paper.</p>\n",
				"content_text": "I miss writing “DO NOT ERASE” on whiteboards when a collaborator and I finally succeed at capturing the mental or visual model of a problem or its solution.\n\nIt’s like writing “a good thing happened here today” on the whiteboard. \n\nClose second place: the act of crossing an item off your to-do list, particularly one on paper.\n\n",
				"date_published": "2025-05-26T09:41:13-07:00",
				"url": "https://therealadam.com/2025/05/26/i-miss-writing-do-not.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/23/whats-a-highlevel-language-is.html",
				
				"content_html": "<p>What’s a high-level language? Is it Java, Go, and C#? Or is it Ruby, JavaScript, or Python? Where does Swift go?</p>\n<p>It’s all a matter of perspective. To a kernel developer who thinks about bytes on a wire or spinning a disk to read a file, <code>git</code> is incredibly high-level. 🙃 To a Smalltalk developer, files on disk are low-level (I assume).</p>\n<p>Anyone telling you otherwise, including past or future Adams, is making a <a href=\"https://en.wikipedia.org/wiki/No_true_Scotsman\">no true Scotsman</a> argument.</p>\n",
				"content_text": "What’s a high-level language? Is it Java, Go, and C#? Or is it Ruby, JavaScript, or Python? Where does Swift go?\n\nIt’s all a matter of perspective. To a kernel developer who thinks about bytes on a wire or spinning a disk to read a file, `git` is incredibly high-level. 🙃 To a Smalltalk developer, files on disk are low-level (I assume).\n\nAnyone telling you otherwise, including past or future Adams, is making a [no true Scotsman](https://en.wikipedia.org/wiki/No_true_Scotsman) argument.\n\n",
				"date_published": "2025-05-23T09:21:45-07:00",
				"url": "https://therealadam.com/2025/05/23/whats-a-highlevel-language-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/22/currently-watching-the-second-and.html",
				
				"content_html": "<p>📺Currently watching:</p>\n<ul>\n<li>The second (and final) season of <em>Andor</em> was spectacular. The best Star War of the past ten years, IMO.</li>\n<li>S3 and S4 of <em>Slow Horses</em> continue to delight. Capable but slovenly Gary Oldman is a great character.</li>\n<li>I’m surprised how much I look forward to <em>The Studio</em> every week. Highly recommended, even if Seth Rogen isn’t your thing.</li>\n<li>S4 of <em>Hacks</em> plays up tension between the leads more than I’d like. Otherwise, the writing and performances are excellent.</li>\n<li>Reserving judgement on S1 of <em>Murderbot</em>. The first episode did not grab me, but the second was an improvement.</li>\n<li>Upcoming: Not sure how I feel about <em>The Bear</em>. But, my feelings won’t change how award shows go, so maybe I should just go with it. 🤷🏻‍♂️</li>\n</ul>\n",
				"content_text": "📺Currently watching:\n\n- The second (and final) season of _Andor_ was spectacular. The best Star War of the past ten years, IMO.\n- S3 and S4 of _Slow Horses_ continue to delight. Capable but slovenly Gary Oldman is a great character.\n- I’m surprised how much I look forward to _The Studio_ every week. Highly recommended, even if Seth Rogen isn’t your thing.\n- S4 of _Hacks_ plays up tension between the leads more than I’d like. Otherwise, the writing and performances are excellent. \n- Reserving judgement on S1 of _Murderbot_. The first episode did not grab me, but the second was an improvement.\n- Upcoming: Not sure how I feel about _The Bear_. But, my feelings won’t change how award shows go, so maybe I should just go with it. 🤷🏻‍♂️\n\n",
				"date_published": "2025-05-22T08:48:15-07:00",
				"url": "https://therealadam.com/2025/05/22/currently-watching-the-second-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/09/the-web-and-blogs-are.html",
				
				"content_html": "<p>The web (and blogs) are free to be weird! Experiment on structure. Don’t feel constrained or normalized by the forces of engagement, algorithms, or profitability. Do your own thing.</p>\n<blockquote>\n<p>A personal website brings flexibility for presentation. Today, you may create a chronological blog; tomorrow, you can revamp the whole website and turn it into a carefully curated knowledge garden. Today, you can design a static website (like this one); tomorrow, you can evolve it to an interactive experience.</p>\n<p>– Candost Dagdeviren, <a href=\"https://candost.blog/on-owning-a-website/\">On Owning a Website</a></p>\n</blockquote>\n<p>In other words: you can <a href=\"https://aaronfrancis.com/podcast/just-do-stuff-e781fd37\">just do stuff</a>. It’s great.</p>\n",
				"content_text": "The web (and blogs) are free to be weird! Experiment on structure. Don’t feel constrained or normalized by the forces of engagement, algorithms, or profitability. Do your own thing.\n\n> A personal website brings flexibility for presentation. Today, you may create a chronological blog; tomorrow, you can revamp the whole website and turn it into a carefully curated knowledge garden. Today, you can design a static website (like this one); tomorrow, you can evolve it to an interactive experience.\n> \n> – Candost Dagdeviren, [On Owning a Website](https://candost.blog/on-owning-a-website/)\n\nIn other words: you can [just do stuff](https://aaronfrancis.com/podcast/just-do-stuff-e781fd37). It’s great.\n\n",
				"date_published": "2025-05-09T06:56:16-07:00",
				"url": "https://therealadam.com/2025/05/09/the-web-and-blogs-are.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/09/s-alt-culture-was-wild.html",
				
				"content_html": "<p>1990s “alt” culture was wild. You could throw an obscure t-shirt on, watch a lesser-known or (future) cult-classic movie, and that was a whole starter personality.</p>\n<p>“Oh yeah, I’ve met that guy Adam with the <a href=\"https://youtu.be/TbZZYMooLnQ?si=wZfnqMwpqg71xylj\">Citizen Dick</a> shirt who really likes <a href=\"https://youtube.com/watch?v=Tncd84NYJ1Y&amp;si=pSayr7C6yL7hHr83\"><em>My Blue Heaven</em></a> and <a href=\"https://www.youtube.com/watch?v=pFriRcIwqNU\"><em>Army of Darkness</em></a>.” 🙃🤦🏻‍♂️</p>\n",
				"content_text": "1990s “alt” culture was wild. You could throw an obscure t-shirt on, watch a lesser-known or (future) cult-classic movie, and that was a whole starter personality.\n\n“Oh yeah, I’ve met that guy Adam with the [Citizen Dick](https://youtu.be/TbZZYMooLnQ?si=wZfnqMwpqg71xylj) shirt who really likes [_My Blue Heaven_](https://youtube.com/watch?v=Tncd84NYJ1Y&si=pSayr7C6yL7hHr83) and [_Army of Darkness_](https://www.youtube.com/watch?v=pFriRcIwqNU).” 🙃🤦🏻‍♂️\n\n",
				"date_published": "2025-05-09T06:48:31-07:00",
				"url": "https://therealadam.com/2025/05/09/s-alt-culture-was-wild.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/08/whilst-editing-yet-another-newsletter.html",
				
				"content_html": "<p>Whilst editing yet another newsletter on building with AI and Claude gave me this feedback:</p>\n<blockquote>\n<p>Consider replacing &ldquo;slopping out code&rdquo; with a more specific term like &ldquo;generating excessive code&rdquo;</p>\n</blockquote>\n<p>Apparently, Monsieur Model does not like how I refer to its art! That’s a little sensitive for a billion floating-point numbers masquerading as a French man in a trench coat. 😛</p>\n<blockquote>\n<p>…having an LLM chat running in a terminal session (optionally accepting pastes from another LLM or watching for instructions from special comments in your source tree) is a major shift in how we relate to writing code. … Working this way, it’s easy to get down a rabbit hole of machine-generated code and lose track of either the system changes or the feature you’re trying to build up. There’s plenty of room for UX improvement. But, it’s an intriguing preview of how we might build software in the future.</p>\n<p>— <a href=\"https://buttondown.com/therealadam/archive/what-would-you-do-if-i-coded-with-claude/\">What would you do if I coded with Claude?</a></p>\n</blockquote>\n<p>Regardless of how sensitive or <a href=\"https://simonwillison.net/2025/May/2/what-we-missed-with-sycophancy/\">sycophantic</a> models may be, there are practical options, whether you find these things charming or off-putting, to learn how to work (“collaborate”) with models.</p>\n<p><em>Ed. All Beatles/Joe Cocker references in this newsletter and blog are hand-crafted with genuine human intelligence. We take pride in our musical allusions and would never consider outsourcing them to other humans or human-like statistical models. That is our quality promise to you, the reader!</em></p>\n",
				"content_text": "Whilst editing yet another newsletter on building with AI and Claude gave me this feedback:\n\n> Consider replacing \"slopping out code\" with a more specific term like \"generating excessive code\"\n\nApparently, Monsieur Model does not like how I refer to its art! That’s a little sensitive for a billion floating-point numbers masquerading as a French man in a trench coat. 😛\n\n> …having an LLM chat running in a terminal session (optionally accepting pastes from another LLM or watching for instructions from special comments in your source tree) is a major shift in how we relate to writing code. … Working this way, it’s easy to get down a rabbit hole of machine-generated code and lose track of either the system changes or the feature you’re trying to build up. There’s plenty of room for UX improvement. But, it’s an intriguing preview of how we might build software in the future.\n> \n> — [What would you do if I coded with Claude?](https://buttondown.com/therealadam/archive/what-would-you-do-if-i-coded-with-claude/)\n\nRegardless of how sensitive or [sycophantic](https://simonwillison.net/2025/May/2/what-we-missed-with-sycophancy/) models may be, there are practical options, whether you find these things charming or off-putting, to learn how to work (“collaborate”) with models.\n\n_Ed. All Beatles/Joe Cocker references in this newsletter and blog are hand-crafted with genuine human intelligence. We take pride in our musical allusions and would never consider outsourcing them to other humans or human-like statistical models. That is our quality promise to you, the reader!_\n\n",
				"date_published": "2025-05-08T08:49:42-07:00",
				"url": "https://therealadam.com/2025/05/08/whilst-editing-yet-another-newsletter.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/05/01/of-all-the-hype-ive.html",
				
				"content_html": "<p>Of all the hype I’ve read about AI, <em>none</em> of it has suggested that they will make estimating software projects a thing of the past. If they aren’t going to eat software estimates, I guess we’re going to have to strap in.</p>\n<blockquote>\n<p>The good news is:</p>\n<ol>\n<li><strong>Delivering software reduces the demand for estimates</strong>. The faster you can deliver software, the less you will need estimates.</li>\n<li>Estimating software as a list of tasks scored by effort and variance conveys the most important information required for good-faith use of estimates.</li>\n<li>Planning out a project by developing an estimate, rather than just hacking it out, is a way of developing software and enough of a creative effort that you might enjoy it more than sitting in meetings and updating budget spreadsheets.</li>\n</ol>\n<p>— <a href=\"https://buttondown.com/therealadam/archive/make-peace-with-estimates-and-get-good-at-system/\">Make peace with estimates and get good at system design along the way</a></p>\n</blockquote>\n<p>I finished this newsletter and asked myself, “<a href=\"https://youtu.be/3-ZUDtaGf3I?si=kyFvRM_GNXz92FWo\">Do I <em>like</em> estimates now?</a>” I may not like them deeply in my bones, but I definitely changed my mind about them! In particular, looking at estimates as part of the creative process of designing, building, and delivering software is a useful perspective shift.</p>\n<p>Back to the implied hype-question, “Will LLMs eat software estimation?”, I think the answer is <a href=\"https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines\">no</a>. Language models can’t really generate new ideas or information. Even when <a href=\"https://therealadam.com/2025/03/06/vibe-coding-is-generating-code.html\">vibe coding</a>, language models are reassembling existing ideas (e.g., their training data) in somewhat novel ways. They don’t generate new <em>information</em>, particularly in the <a href=\"https://en.wikipedia.org/wiki/Information_theory\">Claude Shannon</a> sense of the term.</p>\n<p>Even if LLMs could generate novel information, estimates are painful when they create schedule risk (i.e., hard deadlines) rather than discover uncertainties and hedge against surprises. Language models can’t slop their way out of social, human problems.</p>\n",
				"content_text": "Of all the hype I’ve read about AI, _none_ of it has suggested that they will make estimating software projects a thing of the past. If they aren’t going to eat software estimates, I guess we’re going to have to strap in.\n\n> The good news is:\n> \n> 1. **Delivering software reduces the demand for estimates**. The faster you can deliver software, the less you will need estimates.\n> 2. Estimating software as a list of tasks scored by effort and variance conveys the most important information required for good-faith use of estimates.\n> 3. Planning out a project by developing an estimate, rather than just hacking it out, is a way of developing software and enough of a creative effort that you might enjoy it more than sitting in meetings and updating budget spreadsheets.\n> \n> — [Make peace with estimates and get good at system design along the way](https://buttondown.com/therealadam/archive/make-peace-with-estimates-and-get-good-at-system/)\n\nI finished this newsletter and asked myself, “[Do I _like_ estimates now?](https://youtu.be/3-ZUDtaGf3I?si=kyFvRM_GNXz92FWo)” I may not like them deeply in my bones, but I definitely changed my mind about them! In particular, looking at estimates as part of the creative process of designing, building, and delivering software is a useful perspective shift.\n\nBack to the implied hype-question, “Will LLMs eat software estimation?”, I think the answer is [no](https://en.wikipedia.org/wiki/Betteridge's_law_of_headlines). Language models can’t really generate new ideas or information. Even when [vibe coding](https://therealadam.com/2025/03/06/vibe-coding-is-generating-code.html), language models are reassembling existing ideas (e.g., their training data) in somewhat novel ways. They don’t generate new _information_, particularly in the [Claude Shannon](https://en.wikipedia.org/wiki/Information_theory) sense of the term.\n\nEven if LLMs could generate novel information, estimates are painful when they create schedule risk (i.e., hard deadlines) rather than discover uncertainties and hedge against surprises. Language models can’t slop their way out of social, human problems.\n\n",
				"date_published": "2025-05-01T09:53:21-07:00",
				"url": "https://therealadam.com/2025/05/01/of-all-the-hype-ive.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/28/ive-noticed-an-uptick-in.html",
				
				"content_html": "<p>I’ve noticed an uptick in writing about human thought processes using the language of machine learning and neural networks. Jargon-y phrases like “improve your mental search space” or “if at first you don’t succeed, improve your gradient descent”. (I only made up one of these sentences!)</p>\n<p>Normally, I’m all about this kind of metaphorical bridge from one domain to another. But in a lot of these cases, I feel like more direct language would benefit both the discourse on language models <em>and</em> using them to approximate human intelligence.</p>\n<blockquote>\n<p>The people who make LLMs have little discernible interest in cognition itself. Some of them may <em>believe</em> that they’re interested in cognition, but what they’re really focused on is <strong>product</strong> — that is, output, what gets spat out in words or images or sounds at the conclusion of an episode of thinking.</p>\n<p>— <a href=\"https://blog.ayjay.org/the-irrelevance-of-thinking/\">the irrelevance of thinking – The Homebound Symphony</a></p>\n</blockquote>\n<p>While it’s spectacular that science has found success in modeling human intelligence with matrix multiplication, I think the humans engaged in science would benefit by avoidance of reducing human thought (intelligence, emotion, art, the whole gamut) down to GPU-friendly arithmetic.</p>\n<blockquote>\n<p>A lot of critics think I’m stupid because my sentences are so simple and my method is so direct: they think these are defects. No. The point is to write as much as you know as quickly as possible.</p>\n<p>— Kurt Vonnegut</p>\n</blockquote>\n",
				"content_text": "I’ve noticed an uptick in writing about human thought processes using the language of machine learning and neural networks. Jargon-y phrases like “improve your mental search space” or “if at first you don’t succeed, improve your gradient descent”. (I only made up one of these sentences!)\n\nNormally, I’m all about this kind of metaphorical bridge from one domain to another. But in a lot of these cases, I feel like more direct language would benefit both the discourse on language models _and_ using them to approximate human intelligence. \n\n> The people who make LLMs have little discernible interest in cognition itself. Some of them may _believe_ that they’re interested in cognition, but what they’re really focused on is **product** — that is, output, what gets spat out in words or images or sounds at the conclusion of an episode of thinking.\n> \n> — [the irrelevance of thinking – The Homebound Symphony](https://blog.ayjay.org/the-irrelevance-of-thinking/)\n\nWhile it’s spectacular that science has found success in modeling human intelligence with matrix multiplication, I think the humans engaged in science would benefit by avoidance of reducing human thought (intelligence, emotion, art, the whole gamut) down to GPU-friendly arithmetic.\n\n> A lot of critics think I’m stupid because my sentences are so simple and my method is so direct: they think these are defects. No. The point is to write as much as you know as quickly as possible.\n> \n> — Kurt Vonnegut\n\n\n",
				"date_published": "2025-04-28T15:05:45-07:00",
				"url": "https://therealadam.com/2025/04/28/ive-noticed-an-uptick-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/22/thorsten-balls-tutorial-on-building.html",
				
				"content_html": "<p>Thorsten Ball’s tutorial on building agents only takes an hour or two to work through. It’s an excellent read for audiences of all technical acumen.</p>\n<blockquote>\n<p>It’s not that hard to build a fully functioning, code-editing agent.</p>\n<p>It seems like it would be. When you look at an agent editing files, running commands, wriggling itself out of errors, retrying different strategies — it seems like there has to be a secret behind it.</p>\n<p>There isn’t. It’s an LLM, a loop, and enough tokens.</p>\n<p>— <a href=\"https://ampcode.com/how-to-build-an-agent\">How to Build an Agent</a></p>\n</blockquote>\n<p>After you’ve dabbled a bit with vibe coding tools, there’s no better way to wrap your head around vibe coding than to build it for yourself. There’s no magic, even if you don’t know Go!</p>\n<p>If you’re handy with Ruby, you can easily compress the ideas therein down to about a hundred lines of code.</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-ruby\" data-lang=\"ruby\">\t  <span style=\"color:#66d9ef\">class</span> <span style=\"color:#a6e22e\">ReadFile</span> <span style=\"color:#f92672\">&lt;</span> <span style=\"color:#66d9ef\">RubyLLM</span><span style=\"color:#f92672\">::</span><span style=\"color:#66d9ef\">Tool</span>\n\t    description <span style=\"color:#f92672\">&lt;&lt;~</span><span style=\"color:#66d9ef\">DESC</span>\n\t      <span style=\"color:#66d9ef\">Read</span> the contents of a given relative file path<span style=\"color:#f92672\">.</span> <span style=\"color:#66d9ef\">Use</span> this <span style=\"color:#66d9ef\">when</span> you want to see what<span style=\"color:#e6db74\">&#39;s inside a file. Do not use this with directory names.\n</span><span style=\"color:#e6db74\">\t    DESC\n</span><span style=\"color:#e6db74\">\t    param :path,\n</span><span style=\"color:#e6db74\">\t          type: :string,\n</span><span style=\"color:#e6db74\">\t          required: true,\n</span><span style=\"color:#e6db74\">\t          desc: &#39;</span><span style=\"color:#66d9ef\">The</span> relative path of a file <span style=\"color:#66d9ef\">in</span> the working directory<span style=\"color:#f92672\">.</span><span style=\"color:#960050;background-color:#1e0010\">&#39;</span>\n\t\n\t    <span style=\"color:#66d9ef\">def</span> <span style=\"color:#a6e22e\">execute</span>(<span style=\"color:#e6db74\">path</span>:)\n\t      <span style=\"color:#66d9ef\">File</span><span style=\"color:#f92672\">.</span>read(path)\n\t    <span style=\"color:#66d9ef\">rescue</span> <span style=\"color:#66d9ef\">StandardError</span> <span style=\"color:#f92672\">=&gt;</span> e\n\t      { <span style=\"color:#e6db74\">error</span>: e<span style=\"color:#f92672\">.</span>message }\n\t    <span style=\"color:#66d9ef\">end</span>\n\t  <span style=\"color:#66d9ef\">end</span>\n</code></pre></div><p><a href=\"https://rubyllm.com\">RubyLLM</a> is a fantastic library. Nearly all the ideas in the tutorial are concise abstractions. Recommended.</p>\n",
				"content_text": "Thorsten Ball’s tutorial on building agents only takes an hour or two to work through. It’s an excellent read for audiences of all technical acumen.\n\n> It’s not that hard to build a fully functioning, code-editing agent.\n> \n> It seems like it would be. When you look at an agent editing files, running commands, wriggling itself out of errors, retrying different strategies — it seems like there has to be a secret behind it.\n> \n> There isn’t. It’s an LLM, a loop, and enough tokens.\n> \n> — [How to Build an Agent](https://ampcode.com/how-to-build-an-agent)\n\nAfter you’ve dabbled a bit with vibe coding tools, there’s no better way to wrap your head around vibe coding than to build it for yourself. There’s no magic, even if you don’t know Go!\n\nIf you’re handy with Ruby, you can easily compress the ideas therein down to about a hundred lines of code.\n\n```ruby\n\t  class ReadFile < RubyLLM::Tool\n\t    description <<~DESC\n\t      Read the contents of a given relative file path. Use this when you want to see what's inside a file. Do not use this with directory names.\n\t    DESC\n\t    param :path,\n\t          type: :string,\n\t          required: true,\n\t          desc: 'The relative path of a file in the working directory.'\n\t\n\t    def execute(path:)\n\t      File.read(path)\n\t    rescue StandardError => e\n\t      { error: e.message }\n\t    end\n\t  end\n```\n\t\n[RubyLLM](https://rubyllm.com) is a fantastic library. Nearly all the ideas in the tutorial are concise abstractions. Recommended.\n\n",
				"date_published": "2025-04-22T13:44:58-07:00",
				"url": "https://therealadam.com/2025/04/22/thorsten-balls-tutorial-on-building.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/21/if-a-team-identifies-a.html",
				
				"content_html": "<p>If a team identifies a process, feature, or subsystem as “slow”, it risks resisting change by mythology alone.</p>\n<blockquote>\n<p>Slowness seems to make a special contribution to this picture in our heads. Time is especially valuable. So as we learn that a task is slow, an especial cost accrues to it. Whenever we think of doing the task again, we see how expensive it is, and bail.</p>\n<p>– James Somers, <a href=\"https://jsomers.net/blog/speed-matters\">Speed Matters: Why Working Quickly Is More Important Than It Seems</a></p>\n</blockquote>\n<p>Today’s “this took longer than I’d hoped” can become tomorrow’s “here be dragons” or “we need to do days and weeks of planning and estimating before we start in this part of the system”.</p>\n<p>I&rsquo;ve found cross-organizational conversations prevent &lsquo;slowness mythologies&rsquo; from forming. Retrospectives and 1:1s let team members identify friction points. From there, I gather holistic feedback and pitch solutions to the team.</p>\n<p>Engineering leadership is fundamentally social!</p>\n",
				"content_text": "If a team identifies a process, feature, or subsystem as “slow”, it risks resisting change by mythology alone.\n\n> Slowness seems to make a special contribution to this picture in our heads. Time is especially valuable. So as we learn that a task is slow, an especial cost accrues to it. Whenever we think of doing the task again, we see how expensive it is, and bail. \n> \n> – James Somers, [Speed Matters: Why Working Quickly Is More Important Than It Seems](https://jsomers.net/blog/speed-matters)\n\nToday’s “this took longer than I’d hoped” can become tomorrow’s “here be dragons” or “we need to do days and weeks of planning and estimating before we start in this part of the system”.\n\nI've found cross-organizational conversations prevent 'slowness mythologies' from forming. Retrospectives and 1:1s let team members identify friction points. From there, I gather holistic feedback and pitch solutions to the team. \n\nEngineering leadership is fundamentally social!\n\n",
				"date_published": "2025-04-21T12:49:43-07:00",
				"url": "https://therealadam.com/2025/04/21/if-a-team-identifies-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/17/for-circa-adam-two-of.html",
				
				"content_html": "<p>For circa 2015 Adam, two of the most stressful words in software development were <a href=\"https://ruby.social/@therealadam/114343347446046560\">deadlines and estimates</a>. To my surprise, deadlines were easier to write about.</p>\n<blockquote>\n<p>Deadlines prevent work from snowballing. They guide us to favor the clarity of the present over the speculative grandeur of the future.</p>\n<p>— <a href=\"https://buttondown.com/therealadam/archive/more-of-a-strongly-worded-date-if-im-being-honest/\">More of a strongly worded date, if I’m being honest</a></p>\n</blockquote>\n<p>I didn’t have a way to work it to the essay above, but I’d be remiss if I didn’t mention one of the greatest deadline hacks of the past half-century:</p>\n<blockquote>\n<p>The show doesn’t go on because it’s ready; it goes on because it’s eleven-thirty.</p>\n<p>— Lorne Michaels</p>\n</blockquote>\n<p><em>Saturday Night Live</em>, what fantastic hack! 😉 If you’re playing along at home, SNL is actually <em>two</em> deadline hacks:</p>\n<ul>\n<li>There’s a Big Consequences deadline at 11:30pm on Saturday; the show goes on whether a prop, sketch, or actor is ready or not.</li>\n<li>Every live show week has a long-established cadence: pitching the host on Monday, writing through the night on Tuesday, table read on Wednesday, rehearsals and iteration Thursday and Friday, dress rehearsal on Saturday, final changes, and <em>then</em> the live show.</li>\n</ul>\n",
				"content_text": "For circa 2015 Adam, two of the most stressful words in software development were [deadlines and estimates](https://ruby.social/@therealadam/114343347446046560). To my surprise, deadlines were easier to write about.\n\n> Deadlines prevent work from snowballing. They guide us to favor the clarity of the present over the speculative grandeur of the future.\n> \n> — [More of a strongly worded date, if I’m being honest](https://buttondown.com/therealadam/archive/more-of-a-strongly-worded-date-if-im-being-honest/)\n\nI didn’t have a way to work it to the essay above, but I’d be remiss if I didn’t mention one of the greatest deadline hacks of the past half-century:\n\n> The show doesn’t go on because it’s ready; it goes on because it’s eleven-thirty.\n> \n> — Lorne Michaels\n\n_Saturday Night Live_, what fantastic hack! 😉 If you’re playing along at home, SNL is actually _two_ deadline hacks:\n\n- There’s a Big Consequences deadline at 11:30pm on Saturday; the show goes on whether a prop, sketch, or actor is ready or not.\n- Every live show week has a long-established cadence: pitching the host on Monday, writing through the night on Tuesday, table read on Wednesday, rehearsals and iteration Thursday and Friday, dress rehearsal on Saturday, final changes, and _then_ the live show.\n\n",
				"date_published": "2025-04-17T07:46:32-07:00",
				"url": "https://therealadam.com/2025/04/17/for-circa-adam-two-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/14/i-should-worry-less-about.html",
				
				"content_html": "<p>I should worry less about missing One Amazing Thing, the feed FOMO. I can’t read the whole internet. Not even the small part I’ve carefully selected and loaded into my feed reader.</p>\n<p><a href=\"https://www.newsblur.com\">Newsblur</a> has an option to expire feed items after some number of days. I’d previously disabled this, erroneously thinking I could at least read the part of the internet I have manually identified as interesting.</p>\n<p>So, with some hesitation, I turned on expiring items, taking me from several thousand unread items to several hundred. This is a nice, but superficial, step forward. As a result, I’m reading feeds more frequently because there’s a less-scary top-line number. (Even when I had the number hidden, it was still scary.)</p>\n<p>The good stuff, even if automatically expired, will <em>probably</em> find its way back to me. I’m likely to return to writers I enjoy and look through the archives anyway. Instead of feed FOMO, I should worry more about reading the bigger, guaranteed good things. There are books, essays, longer articles out there. Not to mention making my own stuff. Do more of that!</p>\n<p>I wonder what other kinds of data would be improved with an expiration date. Not that <em>all</em> <a href=\"https://lucumr.pocoo.org/2024/10/30/make-it-ephemeral/\">data should disappear</a>. Backlog/task-shaped data seems the most likely to benefit from automatically deleting themselves. Unread emails, tasks, project work, read-it-later links, watch-list videos, that one season you never got around to watching on a streaming service you’re <em>still</em> paying for. If those archived themselves, or I archived them every few months, maybe that would make for checking off more of the good stuff!</p>\n",
				"content_text": "I should worry less about missing One Amazing Thing, the feed FOMO. I can’t read the whole internet. Not even the small part I’ve carefully selected and loaded into my feed reader.\n\n[Newsblur](https://www.newsblur.com) has an option to expire feed items after some number of days. I’d previously disabled this, erroneously thinking I could at least read the part of the internet I have manually identified as interesting.\n\nSo, with some hesitation, I turned on expiring items, taking me from several thousand unread items to several hundred. This is a nice, but superficial, step forward. As a result, I’m reading feeds more frequently because there’s a less-scary top-line number. (Even when I had the number hidden, it was still scary.)\n\nThe good stuff, even if automatically expired, will _probably_ find its way back to me. I’m likely to return to writers I enjoy and look through the archives anyway. Instead of feed FOMO, I should worry more about reading the bigger, guaranteed good things. There are books, essays, longer articles out there. Not to mention making my own stuff. Do more of that!\n\nI wonder what other kinds of data would be improved with an expiration date. Not that _all_ [data should disappear](https://lucumr.pocoo.org/2024/10/30/make-it-ephemeral/). Backlog/task-shaped data seems the most likely to benefit from automatically deleting themselves. Unread emails, tasks, project work, read-it-later links, watch-list videos, that one season you never got around to watching on a streaming service you’re _still_ paying for. If those archived themselves, or I archived them every few months, maybe that would make for checking off more of the good stuff!\n\n",
				"date_published": "2025-04-14T09:23:05-07:00",
				"url": "https://therealadam.com/2025/04/14/i-should-worry-less-about.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/12/portland-cars-and-coffee-even.html",
				
				"content_html": "<p>Portland Cars and Coffee. Even on Mustang day, the European and Japanese cars were good.</p>\n<p><img src=\"https://therealadam.com/uploads/2025/img-2908-1-edited.jpg\" alt=\"Vintage BMW wheel and roundel\"></p>\n<p><img src=\"https://therealadam.com/uploads/2025/img-2921-2-edited.jpg\" alt=\"Pininfarina brightwork on a Ferrari\"></p>\n<p><img src=\"https://therealadam.com/uploads/2025/img-2934-3-edited.jpg\" alt=\"Side air scoop on a Porsche 911 Turbo\"></p>\n<p>Not pictured: the most tastefully modified Toyota GR86 I’ve ever seen. 👌🏻</p>\n",
				"content_text": "Portland Cars and Coffee. Even on Mustang day, the European and Japanese cars were good.\n\n![Vintage BMW wheel and roundel](https://therealadam.com/uploads/2025/img-2908-1-edited.jpg)\n\n![Pininfarina brightwork on a Ferrari](https://therealadam.com/uploads/2025/img-2921-2-edited.jpg)\n\n![Side air scoop on a Porsche 911 Turbo](https://therealadam.com/uploads/2025/img-2934-3-edited.jpg)\n\nNot pictured: the most tastefully modified Toyota GR86 I’ve ever seen. 👌🏻\n\n",
				"date_published": "2025-04-12T11:50:05-07:00",
				"url": "https://therealadam.com/2025/04/12/portland-cars-and-coffee-even.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/08/currently-watching-paradise-s-james.html",
				
				"content_html": "<p>📺 Currently watching:</p>\n<ul>\n<li><em>Paradise</em> (S1): James Marsden and Sterling K. Brown make an excellent cast. The show itself is an okay puzzle box/mystery story. Interestingly, not the deepest or best at building a mysterious world, so they may be able to land the second season without falling off.</li>\n<li><em>Drive to Survive</em> (S7): this season was gifted with equal parts on-track competition and behind-the-scenes backstabbing. The 2024 season was surprisingly competitive. Nearly half of the drivers were seeking new seats. This makes for good television! (Reminder: this is a “Real Housewives” style show, not a sports documentary.🤣)</li>\n<li><em>Severance</em> (S2): they still got it. Splendid cast, writing, production.</li>\n<li><em>White Lotus</em> (S3): they also still got it. Another great cast of actors you know, some actors you don’t. Great scenery! Reminder: if you ever see show-creator Mike White on your vacation, probably move away so you don’t end up a character on the next season.</li>\n<li><em>Andor</em> (S1): rewatching this anticipating Season 2. Definitely the best Star Wars of the Disney+ era, even though it’s not strictly the most entertaining one.</li>\n<li><em>Slow Horses</em> (S1 &amp; S2): Gary Oldman as the leader of a band of misfits, outcast MI-5 spies? It works.</li>\n</ul>\n<p>Shows returning later this year that I’m looking forward to: <em>Poker Face</em> S2, <em>Andor</em> S2, <em>Hacks</em> S4.</p>\n",
				"content_text": "📺 Currently watching:\n\n- _Paradise_ (S1): James Marsden and Sterling K. Brown make an excellent cast. The show itself is an okay puzzle box/mystery story. Interestingly, not the deepest or best at building a mysterious world, so they may be able to land the second season without falling off.\n- _Drive to Survive_ (S7): this season was gifted with equal parts on-track competition and behind-the-scenes backstabbing. The 2024 season was surprisingly competitive. Nearly half of the drivers were seeking new seats. This makes for good television! (Reminder: this is a “Real Housewives” style show, not a sports documentary.🤣)\n- _Severance_ (S2): they still got it. Splendid cast, writing, production.\n- _White Lotus_ (S3): they also still got it. Another great cast of actors you know, some actors you don’t. Great scenery! Reminder: if you ever see show-creator Mike White on your vacation, probably move away so you don’t end up a character on the next season.\n- _Andor_ (S1): rewatching this anticipating Season 2. Definitely the best Star Wars of the Disney+ era, even though it’s not strictly the most entertaining one.\n- _Slow Horses_ (S1 & S2): Gary Oldman as the leader of a band of misfits, outcast MI-5 spies? It works.\n\nShows returning later this year that I’m looking forward to: _Poker Face_ S2, _Andor_ S2, _Hacks_ S4.\n\n",
				"date_published": "2025-04-08T12:48:35-07:00",
				"url": "https://therealadam.com/2025/04/08/currently-watching-paradise-s-james.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/07/as-goes-writing-so-goes.html",
				
				"content_html": "<p>As goes writing, so goes software development teams:</p>\n<blockquote>\n<p>&ldquo;Having a method, a process, makes my writing more consistently good. This might sound like a win, but it is a problem. The usefulness and beauty of essays follow a power law, where the outliers create almost all the value—so if I make my essays more consistent, I remove not only the mistakes but also much of the upside. A method can, if used wisely, be a tool that helps you see possibilities. It can’t replace paying close attention to the material and figuring out what it is asking of you.&rdquo;</p>\n<p>— Henrik Karlsson, <a href=\"https://www.henrikkarlsson.xyz/p/how-i-write-essays\">How I Write Essays</a></p>\n</blockquote>\n<p>Growing teams are often nostalgic for the times when they were smaller. Maybe it’s not <a href=\"https://therealadam.com/2024/09/11/on-founder-mode.html\">Founder</a> <a href=\"https://therealadam.com/2025/02/19/a-parable-of-adventures.html\">Mode</a> or yearning for a time when there was more low-hanging fruit. Perhaps they’re remember a time when they could swing for the fences more often at the expense of striking out more often? That is, processes designed for predictability and throughput weren’t constraining the magnitude of their big wins or their focus on all the details that make something excellent.</p>\n",
				"content_text": "As goes writing, so goes software development teams:\n\n> \"Having a method, a process, makes my writing more consistently good. This might sound like a win, but it is a problem. The usefulness and beauty of essays follow a power law, where the outliers create almost all the value—so if I make my essays more consistent, I remove not only the mistakes but also much of the upside. A method can, if used wisely, be a tool that helps you see possibilities. It can’t replace paying close attention to the material and figuring out what it is asking of you.\"\n> \n> — Henrik Karlsson, [How I Write Essays](https://www.henrikkarlsson.xyz/p/how-i-write-essays)\n\nGrowing teams are often nostalgic for the times when they were smaller. Maybe it’s not [Founder](https://therealadam.com/2024/09/11/on-founder-mode.html) [Mode](https://therealadam.com/2025/02/19/a-parable-of-adventures.html) or yearning for a time when there was more low-hanging fruit. Perhaps they’re remember a time when they could swing for the fences more often at the expense of striking out more often? That is, processes designed for predictability and throughput weren’t constraining the magnitude of their big wins or their focus on all the details that make something excellent.\n\n",
				"date_published": "2025-04-07T09:35:13-07:00",
				"url": "https://therealadam.com/2025/04/07/as-goes-writing-so-goes.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/04/james-edward-gray-ii-scrappy.html",
				
				"content_html": "<p>James Edward Gray II, <a href=\"https://programmersstone.blog/posts/scrappy-parsing/\">Scrappy Parsing</a>:</p>\n<blockquote>\n<p>The good news is that Elixir is the best language I have ever worked with for doing serious parsing. Let&rsquo;s prove it. Let&rsquo;s pull the data out of a SQLite database file using vanilla Elixir and some tricks from my Scrappy Programmer Livebook series.</p>\n</blockquote>\n<p>Reader: he proves it. I enjoyed the heck out of reading this. James has still got it. (One should never doubt that he might lose it!)</p>\n<p>James’ code reminded me of the many ways Elixir is really lovely. I’ve annotated his code with my own reflections on what makes Elixir great. <strong>All the code is James’ work</strong>; the comments are my, well, commentary and opinions.</p>\n<pre><code>  # First off, Elixir is lovely and I'm a little sad I've \n  # never had the opportunity to work with it on a daily \n  # basis.\n  parse_page = fn bytes, i -&gt;\n    start = if i == 1, do: 100, else: 0\n\n    # Reading binary data via pattern matching is one of the\n    # the best things about Erlang, so it's also a great thing \n    # about Elixir.\n    &lt;&lt;raw_type::1*8,\n      _first_page_freeblock::2*8,\n      cell_count::2*8,\n      _raw_cell_content_start::2*8,\n      _fragmented_free_bytes::1*8,\n      rest::binary&gt;&gt; = binary_slice(bytes, start, 12)\n\n    # &quot;Plain old pattern matching&quot;, also lovely\n    type =\n      case raw_type do\n        2 -&gt; :interior_index\n        5 -&gt; :interior_table\n        10 -&gt; :leaf_index\n        13 -&gt; :leaf_table\n      end\n\n    right_most_pointer =\n      if type in [:interior_index, :interior_table] do\n        &lt;&lt;right_most_pointer::4*8&gt;&gt; = rest\n        right_most_pointer\n      else\n        nil\n      end\n\n    %{\n      index: i,\n      start: start,\n      type: type,\n      cell_count: cell_count,\n      right_most_pointer: right_most_pointer\n    }\n  end\n\n  # Here we have a function defined for a very specific pattern match, including structural _and_ guard conditions. How many conditionals does this save in function bodies? I don't know how often this helps daily Elixir users, but I sure do love reading it.\n  read_page = fn %{page_count: last_page} = db, i when i &gt; 0 and i &lt;= last_page -&gt;\n    :file.position(db.file, (i - 1) * db.page_size)\n\n    # Despite many attempts, Elixir's syntax design for function \n    # pipelines will probably always eclipse the same design in JavaScript or Ruby.\n    # Spoiler: it's because Elixir doesn't have to rearrange `self` and the threaded parameter. 🤷🏻‍♂️\n    db.file\n    |&gt; IO.binread(db.page_size)\n    |&gt; parse_page.(i)\n  end\n\n  # I've tripped all over myself praising Elixir here, but I'd\n  # like to point out that Elixir has the same ungainly syntax\n  # for calling anonymous functions that Ruby does. 😆\n  open_db.(db_path, fn db -&gt;\n    Enum.map(1..3//1, fn i -&gt;\n      read_page.(db, i)\n    end)\n  end)\n</code></pre>\n<p>(This is not recruiter bait, but I&rsquo;m listening, if you&rsquo;re out there. 😉)</p>\n",
				"content_text": "James Edward Gray II, [Scrappy Parsing](https://programmersstone.blog/posts/scrappy-parsing/):\n\n> The good news is that Elixir is the best language I have ever worked with for doing serious parsing. Let's prove it. Let's pull the data out of a SQLite database file using vanilla Elixir and some tricks from my Scrappy Programmer Livebook series.\n\nReader: he proves it. I enjoyed the heck out of reading this. James has still got it. (One should never doubt that he might lose it!)\n\nJames’ code reminded me of the many ways Elixir is really lovely. I’ve annotated his code with my own reflections on what makes Elixir great. **All the code is James’ work**; the comments are my, well, commentary and opinions.\n\n\t  # First off, Elixir is lovely and I'm a little sad I've \n\t  # never had the opportunity to work with it on a daily \n\t  # basis.\n\t  parse_page = fn bytes, i ->\n\t    start = if i == 1, do: 100, else: 0\n\t\n\t    # Reading binary data via pattern matching is one of the\n\t    # the best things about Erlang, so it's also a great thing \n\t    # about Elixir.\n\t    <<raw_type::1*8,\n\t      _first_page_freeblock::2*8,\n\t      cell_count::2*8,\n\t      _raw_cell_content_start::2*8,\n\t      _fragmented_free_bytes::1*8,\n\t      rest::binary>> = binary_slice(bytes, start, 12)\n\t\n\t    # \"Plain old pattern matching\", also lovely\n\t    type =\n\t      case raw_type do\n\t        2 -> :interior_index\n\t        5 -> :interior_table\n\t        10 -> :leaf_index\n\t        13 -> :leaf_table\n\t      end\n\t\n\t    right_most_pointer =\n\t      if type in [:interior_index, :interior_table] do\n\t        <<right_most_pointer::4*8>> = rest\n\t        right_most_pointer\n\t      else\n\t        nil\n\t      end\n\t\n\t    %{\n\t      index: i,\n\t      start: start,\n\t      type: type,\n\t      cell_count: cell_count,\n\t      right_most_pointer: right_most_pointer\n\t    }\n\t  end\n\t\n\t  # Here we have a function defined for a very specific pattern match, including structural _and_ guard conditions. How many conditionals does this save in function bodies? I don't know how often this helps daily Elixir users, but I sure do love reading it.\n\t  read_page = fn %{page_count: last_page} = db, i when i > 0 and i <= last_page ->\n\t    :file.position(db.file, (i - 1) * db.page_size)\n\t\n\t    # Despite many attempts, Elixir's syntax design for function \n\t    # pipelines will probably always eclipse the same design in JavaScript or Ruby.\n\t    # Spoiler: it's because Elixir doesn't have to rearrange `self` and the threaded parameter. 🤷🏻‍♂️\n\t    db.file\n\t    |> IO.binread(db.page_size)\n\t    |> parse_page.(i)\n\t  end\n\t\n\t  # I've tripped all over myself praising Elixir here, but I'd\n\t  # like to point out that Elixir has the same ungainly syntax\n\t  # for calling anonymous functions that Ruby does. 😆\n\t  open_db.(db_path, fn db ->\n\t    Enum.map(1..3//1, fn i ->\n\t      read_page.(db, i)\n\t    end)\n\t  end)\n\n(This is not recruiter bait, but I'm listening, if you're out there. 😉)\n\n\n",
				"date_published": "2025-04-04T10:31:45-07:00",
				"url": "https://therealadam.com/2025/04/04/james-edward-gray-ii-scrappy.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/03/our-trees-are-putting-on.html",
				
				"content_html": "<p>Our trees are putting on a show lately! I&rsquo;m not sure if we&rsquo;re still in Fake Spring here in Portland, OR. The color and temperature beats Austin though! 😉</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Our trees are putting on a show lately! I'm not sure if we're still in Fake Spring here in Portland, OR. The color and temperature beats Austin though! 😉\n\n<img src=\"uploads/2025/e00e2e6362.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2025-04-03T09:28:53-07:00",
				"url": "https://therealadam.com/2025/04/03/our-trees-are-putting-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/02/observations-on-excellent-teams-by.html",
				
				"content_html": "<p><a href=\"https://buttondown.com/therealadam/archive/at-the-top-of-their-game/\">Observations on excellent teams</a>, from my newsletter:</p>\n<blockquote>\n<p>Teams at the top of their game have a few things going for them. They operate with pace and confidence, reducing the need for time-consuming and detailed planning. They work together with coherence and trust, anticipating each other’s actions and decisions. This lets each individual on the team act with high agency to solve problems and act upon feedback quickly.</p>\n</blockquote>\n",
				"content_text": "[Observations on excellent teams](https://buttondown.com/therealadam/archive/at-the-top-of-their-game/), from my newsletter:\n\n> Teams at the top of their game have a few things going for them. They operate with pace and confidence, reducing the need for time-consuming and detailed planning. They work together with coherence and trust, anticipating each other’s actions and decisions. This lets each individual on the team act with high agency to solve problems and act upon feedback quickly.\n\n\n",
				"date_published": "2025-04-02T15:25:49-07:00",
				"url": "https://therealadam.com/2025/04/02/observations-on-excellent-teams-by.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/04/01/our-calendars-are-often-painful.html",
				
				"content_html": "<p>Our calendars are often painful because they display order (meetings) <em>too</em> well, but don’t display disorder (surprises and interruptions) at all.</p>\n<p>Into every developer’s day (and managers in particular) arrives surprises, interruptions, questions, and side-quests. A bit of chaotic disorder.</p>\n<p>Personally, in signing up for the job of engineering manager, I feel like I <em>also</em> signed up for the job of handling surprises and side-quests. I take them on not to protect my teams’ focus or time, but because surprises and questions are some of the best kind of information I can receive. They represent the friction points between my mental model of the organization or system and the details of the real world.</p>\n<p>I would probably trade more interruptions and side quests for fewer recurring meetings!</p>\n",
				"content_text": "Our calendars are often painful because they display order (meetings) _too_ well, but don’t display disorder (surprises and interruptions) at all. \n\nInto every developer’s day (and managers in particular) arrives surprises, interruptions, questions, and side-quests. A bit of chaotic disorder.\n\nPersonally, in signing up for the job of engineering manager, I feel like I _also_ signed up for the job of handling surprises and side-quests. I take them on not to protect my teams’ focus or time, but because surprises and questions are some of the best kind of information I can receive. They represent the friction points between my mental model of the organization or system and the details of the real world.\n\nI would probably trade more interruptions and side quests for fewer recurring meetings!\n\n\n",
				"date_published": "2025-04-01T09:24:41-07:00",
				"url": "https://therealadam.com/2025/04/01/our-calendars-are-often-painful.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/31/sync-engines-are-the-future.html",
				
				"content_html": "<p><a href=\"https://www.instantdb.com/essays/sync_future\">Sync Engines are the Future</a>:</p>\n<blockquote>\n<p>So, what’s the significance of sync engines? I have a theory that every major technology shift happened when one part of the stack collapsed with another. For example:</p>\n<ul>\n<li>Web apps collapsed cross-platform development. Instead of developing two or three versions of your app, you now develop one, available everywhere!</li>\n<li>Node.js collapsed client and server development. You get one language instead of two! You can share code between them!</li>\n<li>Docker collapsed the distinction between dev and prod.</li>\n<li>React collapsed HTML and JS, Tailwind collapsed JS and CSS.</li>\n</ul>\n<p>So where does that leave sync engines? They collapse the database and the server. If your database is smart enough and capable enough, why would you even need a server? Hosted database saves you from the horrors of hosting and lets your data flow freely to the frontend.</p>\n</blockquote>\n<ol>\n<li>Conceptual compression is a <em>big deal</em>. Even discounting for uneven distribution of technological shifts, like Docker dev environments and collapsing client/server, HTML, and CSS all into JS.</li>\n<li><a href=\"https://github.com/garden-co/jazz\">Sync</a> and <a href=\"https://automerge.org\">local-first</a> <a href=\"https://github.com/aspen-cloud/triplit\">storage</a> <a href=\"https://tinybase.org\">engines</a> seem like they could be a big deal. It’s a tricky problem to solve. And, governments taking a turn for the weird lately, being able to move your data to another locality and point, with certainty at where data rests, is a useful ability!</li>\n</ol>\n",
				"content_text": "[Sync Engines are the Future](https://www.instantdb.com/essays/sync_future):\n\n> So, what’s the significance of sync engines? I have a theory that every major technology shift happened when one part of the stack collapsed with another. For example:\n> \n> - Web apps collapsed cross-platform development. Instead of developing two or three versions of your app, you now develop one, available everywhere!\n> - Node.js collapsed client and server development. You get one language instead of two! You can share code between them!\n> - Docker collapsed the distinction between dev and prod.\n> - React collapsed HTML and JS, Tailwind collapsed JS and CSS.\n> \n> So where does that leave sync engines? They collapse the database and the server. If your database is smart enough and capable enough, why would you even need a server? Hosted database saves you from the horrors of hosting and lets your data flow freely to the frontend.\n\n1. Conceptual compression is a _big deal_. Even discounting for uneven distribution of technological shifts, like Docker dev environments and collapsing client/server, HTML, and CSS all into JS.\n2. [Sync](https://github.com/garden-co/jazz) and [local-first](https://automerge.org) [storage](https://github.com/aspen-cloud/triplit) [engines](https://tinybase.org) seem like they could be a big deal. It’s a tricky problem to solve. And, governments taking a turn for the weird lately, being able to move your data to another locality and point, with certainty at where data rests, is a useful ability!\n\n",
				"date_published": "2025-03-31T10:19:12-07:00",
				"url": "https://therealadam.com/2025/03/31/sync-engines-are-the-future.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/30/tina-turner-covers-very-slowly.html",
				
				"content_html": "<p>Tina Turner covers, very slowly:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=4cro7kZKG2c\">Help!</a> – your move, The Beatles</li>\n<li><a href=\"https://www.youtube.com/watch?v=IPRZkDEnojU\">Whole Lotta Love</a> – maybe this one is just half the notes and not half the tempo?</li>\n<li><a href=\"https://www.youtube.com/watch?v=TTfYnRQgKgY\">Proud Mary</a> – slowly, then very quickly, of course</li>\n<li><a href=\"https://www.youtube.com/watch?v=X9bSL2S4POg\">I Can’t Stand the Rain</a> – maybe not slowed down too much, but the production has so much space in it!</li>\n</ul>\n<p>On the upside: the more I put my love of songs played slowly into the universe, the more it provides! On the downside: I may have to rewrite my laws of slow songs. 🙃</p>\n",
				"content_text": "Tina Turner covers, very slowly:\n\n- [Help!](https://www.youtube.com/watch?v=4cro7kZKG2c) – your move, The Beatles\n- [Whole Lotta Love](https://www.youtube.com/watch?v=IPRZkDEnojU) – maybe this one is just half the notes and not half the tempo?\n- [Proud Mary](https://www.youtube.com/watch?v=TTfYnRQgKgY) – slowly, then very quickly, of course\n- [I Can’t Stand the Rain](https://www.youtube.com/watch?v=X9bSL2S4POg) – maybe not slowed down too much, but the production has so much space in it!\n\nOn the upside: the more I put my love of songs played slowly into the universe, the more it provides! On the downside: I may have to rewrite my laws of slow songs. 🙃\n\n",
				"date_published": "2025-03-30T13:07:16-07:00",
				"url": "https://therealadam.com/2025/03/30/tina-turner-covers-very-slowly.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/27/these-two-traitshigh-mental-capacity.html",
				
				"content_html": "<blockquote>\n<p>These two traits—high mental capacity and clear focus—are essential to solving all but the most trivial computer programming tasks. The ability to maintain a large &ldquo;mental stack&rdquo; and the discipline to move seamlessly up and down that stack without succumbing to distraction are hallmarks of many great programmers.</p>\n<p>— Justin Searls, <a href=\"https://justin.searls.co/posts/programming-is-about-mental-stack-management/\">Programming is about mental stack management</a></p>\n</blockquote>\n<p>I&rsquo;m reminded that one of the most amazing developers I&rsquo;ve worked with was <em>legitimately</em> able to multitask. I think this was due zero-cost push/pop of their context stack. Whether this was possible because of a unique brain or an excellent system of note-taking, I don&rsquo;t know!</p>\n",
				"content_text": "> These two traits—high mental capacity and clear focus—are essential to solving all but the most trivial computer programming tasks. The ability to maintain a large \"mental stack\" and the discipline to move seamlessly up and down that stack without succumbing to distraction are hallmarks of many great programmers.\n> \n> — Justin Searls, [Programming is about mental stack management](https://justin.searls.co/posts/programming-is-about-mental-stack-management/)\n\nI'm reminded that one of the most amazing developers I've worked with was _legitimately_ able to multitask. I think this was due zero-cost push/pop of their context stack. Whether this was possible because of a unique brain or an excellent system of note-taking, I don't know!\n\n",
				"date_published": "2025-03-27T14:18:52-07:00",
				"url": "https://therealadam.com/2025/03/27/these-two-traitshigh-mental-capacity.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/27/text-boxes-were-not-meant.html",
				
				"content_html": "<p>Text boxes were not meant for collaboration.</p>\n<p>How often do you find the majority of the coordination, collaboration, and team work you do happens by typing into (sometimes unsophisticated) text boxes and reading what other people typed into similar text boxes?</p>\n<p>And now we’re increasingly typing in text boxes to interact with simulacra of human intelligence!</p>\n<p>Emoji have helped — teamwork is easier if people opt into leaving hints about how they <em>feel</em> about something. Corollary: do not try to dead-pan in a text-only or high-latency video format. It will only end poorly.</p>\n<p>I’m not entirely sure what to make of the humble text box’s crucial role in our society increasingly built on communication, knowledge, and using the two to generate more of the latter.</p>\n<p>On one hand, before there were text boxes, writers have used various styli, pens, and typewriters to compose basically all of human culture and knowledge. So maybe the tool-in-hand (i.e., a text box) is not the crucial element.</p>\n<p>On the other hand, given slightly more expressive tools, musicians have created the gamut of musical culture in only a few hundred years.</p>\n",
				"content_text": "Text boxes were not meant for collaboration.\n\nHow often do you find the majority of the coordination, collaboration, and team work you do happens by typing into (sometimes unsophisticated) text boxes and reading what other people typed into similar text boxes?\n\nAnd now we’re increasingly typing in text boxes to interact with simulacra of human intelligence!\n\nEmoji have helped — teamwork is easier if people opt into leaving hints about how they _feel_ about something. Corollary: do not try to dead-pan in a text-only or high-latency video format. It will only end poorly.\n\nI’m not entirely sure what to make of the humble text box’s crucial role in our society increasingly built on communication, knowledge, and using the two to generate more of the latter.\n\nOn one hand, before there were text boxes, writers have used various styli, pens, and typewriters to compose basically all of human culture and knowledge. So maybe the tool-in-hand (i.e., a text box) is not the crucial element.\n\nOn the other hand, given slightly more expressive tools, musicians have created the gamut of musical culture in only a few hundred years.\n\n",
				"date_published": "2025-03-27T07:45:19-07:00",
				"url": "https://therealadam.com/2025/03/27/text-boxes-were-not-meant.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/13/every-career-step-is-searching.html",
				
				"content_html": "<p>Every career step is searching for the next set of collaborators. And, even in a buyer’s market like we face today, it’s a bidirectional affair. The employer <em>and</em> the employee have to choose each other. Granted, <a href=\"https://ruby.social/@therealadam/114151957572045039\">I’ve been at this particular job search longer than I’d hoped</a>!</p>\n",
				"content_text": "Every career step is searching for the next set of collaborators. And, even in a buyer’s market like we face today, it’s a bidirectional affair. The employer _and_ the employee have to choose each other. Granted, [I’ve been at this particular job search longer than I’d hoped](https://ruby.social/@therealadam/114151957572045039)!\n\n",
				"date_published": "2025-03-13T09:56:44-07:00",
				"url": "https://therealadam.com/2025/03/13/every-career-step-is-searching.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/07/new-to-me-diner-old.html",
				
				"content_html": "<p>New to me diner. Old school “where people meet in TV shows” vibes. Perfect for a Friday morning.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "New to me diner. Old school “where people meet in TV shows” vibes. Perfect for a Friday morning. \n\n<img src=\"uploads/2025/ba46f1809a.jpg\" width=\"450\" height=\"600\" alt=\"\">\n",
				"date_published": "2025-03-07T11:07:01-07:00",
				"url": "https://therealadam.com/2025/03/07/new-to-me-diner-old.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/06/vibe-coding-is-generating-code.html",
				
				"content_html": "<p><a href=\"https://simonwillison.net/2025/Mar/6/vibe-coding/\">Vibe coding</a> is generating code with an LLM (Claude, ChatGPT, Copilot, etc.) and just going for it. No review, no tests, just prompt/reload/repeat.</p>\n<p>Hopefully, you’re only doing this for prototypes! I’m sure some folks are not. Surely, they don’t read this website.</p>\n<p><a href=\"https://therealadam.com/2025/02/28/harper-reed-my-llm-codegen.html\">When working this way</a>, I’m tempted to accept every suggestion from the robot “product” collaborator. Yeah, my humble little idea could use a two-pane navigation interface, lazy update semantics, insightful logging, robust error handling, and keyboard shortcuts! Sure, go ahead and try to implement that thousand word spec you just generated in one shot. Without automated feedback. I’ll wait.</p>\n<p>This goes about as well a human trying to implement the entire spec in one epic commit. At best, you get a big ball of illegible mud that looks right but doesn’t quite work. At worst, it’s riddled with syntax errors or misused APIs, aka “hallucinations”.</p>\n<p>For better or worse, an LLM can slop out as much code as you are willing to pay for, but the compiler/runtime still has the last laugh.</p>\n",
				"content_text": "[Vibe coding](https://simonwillison.net/2025/Mar/6/vibe-coding/) is generating code with an LLM (Claude, ChatGPT, Copilot, etc.) and just going for it. No review, no tests, just prompt/reload/repeat. \n\nHopefully, you’re only doing this for prototypes! I’m sure some folks are not. Surely, they don’t read this website.\n\n[When working this way](https://therealadam.com/2025/02/28/harper-reed-my-llm-codegen.html), I’m tempted to accept every suggestion from the robot “product” collaborator. Yeah, my humble little idea could use a two-pane navigation interface, lazy update semantics, insightful logging, robust error handling, and keyboard shortcuts! Sure, go ahead and try to implement that thousand word spec you just generated in one shot. Without automated feedback. I’ll wait.\n\nThis goes about as well a human trying to implement the entire spec in one epic commit. At best, you get a big ball of illegible mud that looks right but doesn’t quite work. At worst, it’s riddled with syntax errors or misused APIs, aka “hallucinations”.\n\nFor better or worse, an LLM can slop out as much code as you are willing to pay for, but the compiler/runtime still has the last laugh.\n\n",
				"date_published": "2025-03-06T17:26:52-07:00",
				"url": "https://therealadam.com/2025/03/06/vibe-coding-is-generating-code.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/03/04/a-return-to-handwritten-notes.html",
				
				"content_html": "<p><a href=\"https://research.google/blog/a-return-to-hand-written-notes-by-learning-to-read-write/\">A return to hand-written notes by learning to read &amp; write</a> – Google research on training models to recognize not just <em>text</em> in handwriting, but the actual strokes. So you could color or even edit-in-place the handwritten strokes later on. I hope someone is working on productizing this! A Remarkable/Kindle/Boox/Daylight tablet that recognizes sloppy handwriting <em>and</em> allows tweaking it later would make e-ink displays live up to the name. 🙃</p>\n<p>Adjacent: Ink and Switch is publishing more of their <a href=\"https://www.inkandswitch.com/ink/notes/\">programmable ink</a> work lately.</p>\n<p>If we play our cards right, the next couple years could be exciting for pen-and-paper sorts of thinkers.</p>\n",
				"content_text": "[A return to hand-written notes by learning to read & write](https://research.google/blog/a-return-to-hand-written-notes-by-learning-to-read-write/) – Google research on training models to recognize not just _text_ in handwriting, but the actual strokes. So you could color or even edit-in-place the handwritten strokes later on. I hope someone is working on productizing this! A Remarkable/Kindle/Boox/Daylight tablet that recognizes sloppy handwriting _and_ allows tweaking it later would make e-ink displays live up to the name. 🙃 \n\nAdjacent: Ink and Switch is publishing more of their [programmable ink](https://www.inkandswitch.com/ink/notes/) work lately.\n\nIf we play our cards right, the next couple years could be exciting for pen-and-paper sorts of thinkers.\n\n",
				"date_published": "2025-03-04T11:07:26-07:00",
				"url": "https://therealadam.com/2025/03/04/a-return-to-handwritten-notes.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/28/harper-reed-my-llm-codegen.html",
				
				"content_html": "<p>Harper Reed, <a href=\"https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/\">My LLM codegen workflow atm</a>:</p>\n<blockquote>\n<p>If you have a small or large project that you are procrastinating on, I would recommend giving it a shot. You will be surprised how far you can get in a short amount of time.</p>\n<p>My hack to-do list is empty because I built everything. I keep thinking of new things and knocking them out while watching a movie or something.</p>\n</blockquote>\n<p>The workflow includes: prompts for generating product requirements, technical specifications, project plans. It recommended tools for implementing those ideas into new and existing projects. CLI-friendly throughout, no need to change workflows to an AI-infused flavor-of-the-month. And, there are caveats for skeptics. It’s not a “everything is shiny and free from surprising consequences” sort of piece.</p>\n<p>As if you haven’t heard it enough lately: it is, earnestly, mind blowing that we can go from a few sentences describing an idea to a working prototype in a few hours of supervising an LLM. Inevitably, we’ll learn about shortcomings, scaling problems, and pitfalls in the coming years. As ever! But, the cost function for software is going to change a lot in the coming years and, <em>if</em> we play our cards right, it will be a fun ride.</p>\n",
				"content_text": "Harper Reed, [My LLM codegen workflow atm](https://harper.blog/2025/02/16/my-llm-codegen-workflow-atm/):\n\n> If you have a small or large project that you are procrastinating on, I would recommend giving it a shot. You will be surprised how far you can get in a short amount of time.\n> \n> My hack to-do list is empty because I built everything. I keep thinking of new things and knocking them out while watching a movie or something. \n\nThe workflow includes: prompts for generating product requirements, technical specifications, project plans. It recommended tools for implementing those ideas into new and existing projects. CLI-friendly throughout, no need to change workflows to an AI-infused flavor-of-the-month. And, there are caveats for skeptics. It’s not a “everything is shiny and free from surprising consequences” sort of piece.\n\nAs if you haven’t heard it enough lately: it is, earnestly, mind blowing that we can go from a few sentences describing an idea to a working prototype in a few hours of supervising an LLM. Inevitably, we’ll learn about shortcomings, scaling problems, and pitfalls in the coming years. As ever! But, the cost function for software is going to change a lot in the coming years and, _if_ we play our cards right, it will be a fun ride.\n\n\n",
				"date_published": "2025-02-28T10:30:56-07:00",
				"url": "https://therealadam.com/2025/02/28/harper-reed-my-llm-codegen.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/26/improving-team-morale-is-not.html",
				
				"content_html": "<p><a href=\"https://marcgg.com/blog/2025/02/19/team-morale/\">Improving Team Morale is not an Objective</a>, Marc Gauthier:</p>\n<blockquote>\n<ul>\n<li>Morale is a byproduct of everything going on in the company. While improving it shouldn’t be an objective in itself, there are many reasons to pay attention to it.</li>\n<li>Instead of focusing on mood or morale, gather qualitative feedback on specific topics. This is more actionable and precise, and should help you address actual issues and not the resulting low morale that is just a side effect.</li>\n</ul>\n</blockquote>\n<p>Morale is a second order effect of the fundamentals that managers and leadership work on. If the outcomes, process, technology, teams, and people are aligned and thoughtfully cared for, good morale is <em>possible</em>. If one or more are misaligned, morale and motivation can suffer.</p>\n",
				"content_text": "[Improving Team Morale is not an Objective](https://marcgg.com/blog/2025/02/19/team-morale/), Marc Gauthier:\n\n> - Morale is a byproduct of everything going on in the company. While improving it shouldn’t be an objective in itself, there are many reasons to pay attention to it.\n> - Instead of focusing on mood or morale, gather qualitative feedback on specific topics. This is more actionable and precise, and should help you address actual issues and not the resulting low morale that is just a side effect.\n\n\nMorale is a second order effect of the fundamentals that managers and leadership work on. If the outcomes, process, technology, teams, and people are aligned and thoughtfully cared for, good morale is _possible_. If one or more are misaligned, morale and motivation can suffer.\n\n",
				"date_published": "2025-02-26T08:52:58-07:00",
				"url": "https://therealadam.com/2025/02/26/improving-team-morale-is-not.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/25/mikkel-malmberg-makes-macos-apps.html",
				
				"content_html": "<p><a href=\"https://mikkelmalmberg.com\">Mikkel Malmberg</a> makes macOS apps &ldquo;for the connoisseurs,&rdquo; creates lots of little web things, and has a <a href=\"https://www.youtube.com/@MikkelMalmberg\">pretty delightful YouTube channel</a> where he shares his creation process. While you&rsquo;re there, scroll to the very bottom of his webpage for a surprise.</p>\n",
				"content_text": "[Mikkel Malmberg](https://mikkelmalmberg.com) makes macOS apps \"for the connoisseurs,\" creates lots of little web things, and has a [pretty delightful YouTube channel](https://www.youtube.com/@MikkelMalmberg) where he shares his creation process. While you're there, scroll to the very bottom of his webpage for a surprise.\n\n",
				"date_published": "2025-02-25T08:27:35-07:00",
				"url": "https://therealadam.com/2025/02/25/mikkel-malmberg-makes-macos-apps.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/20/zed-now-predicts-your-next.html",
				
				"content_html": "<p><a href=\"https://zed.dev/blog/edit-prediction\">Zed now predicts your next edit with Zeta, our new open model</a>. I wouldn’t guess that new features in a programmer’s editor require such attention to detail in user experience <em>and</em> development of a specialized language model for code edits. Watching the <a href=\"https://www.youtube.com/watch?v=r1A268kA1uM\">video on how they built it</a> show how deep they went in building this. Seems like it was worthwhile! 👍🏻</p>\n<p>I’m delighted that there’s still plenty of room to explore for programmer’s editors. And, we’re not in a monolith corporations vs. open-source world like we have been in years decades past.</p>\n<p>Zed is a product (and team) with big potential. It’s not yet right for me, but worth keeping an eye on.</p>\n",
				"content_text": "[Zed now predicts your next edit with Zeta, our new open model](https://zed.dev/blog/edit-prediction). I wouldn’t guess that new features in a programmer’s editor require such attention to detail in user experience _and_ development of a specialized language model for code edits. Watching the [video on how they built it](https://www.youtube.com/watch?v=r1A268kA1uM) show how deep they went in building this. Seems like it was worthwhile! 👍🏻\n\nI’m delighted that there’s still plenty of room to explore for programmer’s editors. And, we’re not in a monolith corporations vs. open-source world like we have been in years decades past.\n\nZed is a product (and team) with big potential. It’s not yet right for me, but worth keeping an eye on.\n\n",
				"date_published": "2025-02-20T10:26:21-07:00",
				"url": "https://therealadam.com/2025/02/20/zed-now-predicts-your-next.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/19/a-parable-of-adventures.html",
				"title": "A parable of adventures",
				"content_html": "<p>Consider two adventurers, one setting off alone and another setting off with fellow explorers. Both in search of greater glory through software development. 🙃</p>\n<p>One adventurer closes social media, shifts into <a href=\"https://therealadam.com/2024/09/11/on-founder-mode.html\">Founder mode</a>, and grinds out “wins” to the satisfaction of their benefactors. They move quickly, but sometimes diverge from their fellow explorers. When discarding a day’s work that solves the wrong problem is drama-free, they may have gone further than their fellow explorers.</p>\n<p>Another adventurer has learned how endeavors succeed from experience and observation. The adventurer knows they will create something of intangible greatness by influencing a team of explorers. At times, the journey must pause. The team of explorers gathers to consider the map and decide how to proceed. These moments of collaboration and coordination are essential to the journey. The adventurer who only knows how to proceed alone will fall behind the adventurer who can rally a whole expedition crew. Thus, the adventurer does not directly produce the journey, but is essential nonetheless.</p>\n<p>Thus, the team of explorers, when pulling together, goes much further than scrappy bands of individualistic explorers often pulling at odds with each other.</p>\n",
				"content_text": "Consider two adventurers, one setting off alone and another setting off with fellow explorers. Both in search of greater glory through software development. 🙃\n\nOne adventurer closes social media, shifts into [Founder mode](https://therealadam.com/2024/09/11/on-founder-mode.html), and grinds out “wins” to the satisfaction of their benefactors. They move quickly, but sometimes diverge from their fellow explorers. When discarding a day’s work that solves the wrong problem is drama-free, they may have gone further than their fellow explorers.\n\nAnother adventurer has learned how endeavors succeed from experience and observation. The adventurer knows they will create something of intangible greatness by influencing a team of explorers. At times, the journey must pause. The team of explorers gathers to consider the map and decide how to proceed. These moments of collaboration and coordination are essential to the journey. The adventurer who only knows how to proceed alone will fall behind the adventurer who can rally a whole expedition crew. Thus, the adventurer does not directly produce the journey, but is essential nonetheless.\n\nThus, the team of explorers, when pulling together, goes much further than scrappy bands of individualistic explorers often pulling at odds with each other.\n\n",
				"date_published": "2025-02-19T10:37:53-07:00",
				"url": "https://therealadam.com/2025/02/19/a-parable-of-adventures.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/14/previously-an-iron-rule-of.html",
				
				"content_html": "<p><a href=\"https://therealadam.com/2020/04/12/my-law-of.html\">Previously</a>, an iron rule of Aretha Franklin: she could sing anything slower <em>and</em> better than anyone else.</p>\n<p>Update, a contender has entered the ring: <a href=\"https://www.youtube.com/watch?v=MOyvYnkdEcc\">Carole King performs “You Make Me Feel Like A Natural Woman”</a> pretty dang slowly. Which she wrote!</p>\n<p>So I have to relax the iron rule here. That’s okay, I have another one.</p>\n<p>New iron rule of Aretha Franklin: no one made ‘em sweat like Aretha. In part, because Aretha contractually insisted every room she played have the air conditioning turned off to protect her vocal cords.</p>\n<p>About a <a href=\"https://www.furinsider.com/aretha-franklin-rest-in-soul-divas-we-love-series/\"><em>VH-1 Divas</em> television performance</a>:</p>\n<blockquote>\n<p>As producers laid out the run of show and began rehearsals at the Beacon Theater an electrician called in to work on the air conditioning accidentally flipped a switch and cold air began blowing down on the stage. Now, it was widely known at the time that Ms. Franklin had a clause in her contract that there was to be no AC during her performances and rehearsals as the cold air agitated her vocal chords and prevented her from giving her best performance. It wasn’t a matter of being high-maintenance; it was her professional commitment to giving her audience her best.</p>\n</blockquote>\n<p>Next time you’re watching a live performance, look at how much Aretha, and everyone else in the room, is sweating. It’s not just the stage lights. She’s the queen for a reason!</p>\n",
				"content_text": "[Previously](https://therealadam.com/2020/04/12/my-law-of.html), an iron rule of Aretha Franklin: she could sing anything slower _and_ better than anyone else.\n\nUpdate, a contender has entered the ring: [Carole King performs “You Make Me Feel Like A Natural Woman”](https://www.youtube.com/watch?v=MOyvYnkdEcc) pretty dang slowly. Which she wrote!\n\nSo I have to relax the iron rule here. That’s okay, I have another one.\n\nNew iron rule of Aretha Franklin: no one made ‘em sweat like Aretha. In part, because Aretha contractually insisted every room she played have the air conditioning turned off to protect her vocal cords.\n\nAbout a [_VH-1 Divas_ television performance](https://www.furinsider.com/aretha-franklin-rest-in-soul-divas-we-love-series/):\n\n> As producers laid out the run of show and began rehearsals at the Beacon Theater an electrician called in to work on the air conditioning accidentally flipped a switch and cold air began blowing down on the stage. Now, it was widely known at the time that Ms. Franklin had a clause in her contract that there was to be no AC during her performances and rehearsals as the cold air agitated her vocal chords and prevented her from giving her best performance. It wasn’t a matter of being high-maintenance; it was her professional commitment to giving her audience her best. \n\nNext time you’re watching a live performance, look at how much Aretha, and everyone else in the room, is sweating. It’s not just the stage lights. She’s the queen for a reason!\n\n",
				"date_published": "2025-02-14T09:59:20-07:00",
				"url": "https://therealadam.com/2025/02/14/previously-an-iron-rule-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/13/a-field-guide-to-exploring.html",
				"title": "A field guide to exploring rabbit holes",
				"content_html": "<p>You’re deep in eldritch code, a product problem, or a cross-functional issue that is affecting your team. Hours have passed, and you feel like you’re only starting to get your bearings with the issue. Finding a solution, let alone considering its consequences, seems further hours away.</p>\n<p>You’re down a rabbit hole. You need to explore a very open-ended concern, but you also need to maintain a bias toward action.</p>\n<p>Don’t go without a time box or teammate. Set a time limit. Or, ask a colleague to keep you accountable. You want a constraining mechanism to pull you out of the hole if you get lost.</p>\n<p>“Rubber duck” the issue before you start. Explain it out loud or write a summary in your notes. You may activate a different part of your brain and talk yourself out of the rabbit hole entirely.</p>\n<p>Keep notes. Track every conceptual tunnel you explore. Note the dead-ends and red herrings. Show something for your effort, even if you don’t find what you were looking for.</p>\n<p>Tell teammates what the rabbit hole is and why you think it’s necessary. Ideally, you can explain this in a sentence or two at most. Think about how long you think it’s worthwhile to go down that rabbit hole. Don’t spend more than that in the rabbit hole!</p>\n<p>When you encounter black boxes, rabbit holes in rabbit holes, note them and keep moving. You’re already distracted by this rabbit hole, don’t get distracted from your distraction! Not all rabbit holes are worth exploring – some lead to deeper problems without payoff.</p>\n",
				"content_text": "You’re deep in eldritch code, a product problem, or a cross-functional issue that is affecting your team. Hours have passed, and you feel like you’re only starting to get your bearings with the issue. Finding a solution, let alone considering its consequences, seems further hours away.\n\nYou’re down a rabbit hole. You need to explore a very open-ended concern, but you also need to maintain a bias toward action. \n\nDon’t go without a time box or teammate. Set a time limit. Or, ask a colleague to keep you accountable. You want a constraining mechanism to pull you out of the hole if you get lost.\n\n“Rubber duck” the issue before you start. Explain it out loud or write a summary in your notes. You may activate a different part of your brain and talk yourself out of the rabbit hole entirely.\n\nKeep notes. Track every conceptual tunnel you explore. Note the dead-ends and red herrings. Show something for your effort, even if you don’t find what you were looking for.\n\nTell teammates what the rabbit hole is and why you think it’s necessary. Ideally, you can explain this in a sentence or two at most. Think about how long you think it’s worthwhile to go down that rabbit hole. Don’t spend more than that in the rabbit hole!\n\nWhen you encounter black boxes, rabbit holes in rabbit holes, note them and keep moving. You’re already distracted by this rabbit hole, don’t get distracted from your distraction! Not all rabbit holes are worth exploring – some lead to deeper problems without payoff.\n\n",
				"date_published": "2025-02-13T09:48:45-07:00",
				"url": "https://therealadam.com/2025/02/13/a-field-guide-to-exploring.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/12/you-never-stop-growing-as.html",
				
				"content_html": "<p>You never stop growing as a project leader.</p>\n<p><a href=\"https://therealadam.com/2024/07/30/hurry-up-and.html\">Hurry up and flub your first fifty projects</a>; the sooner you learn from stumbling, the better. Get a <em>taste</em> for all the technical and interpersonal ways a thing can go sideways. Grow past trying to use process to block all the ways projects have punched you in the face. Develop your sense for a project that is drifting off the golden path. Experiment with and develop your moves for bringing the project back.</p>\n<p>Accept that people will always ask for estimates. Find peace in a way to provide them honestly. Help your team use estimates as planning and research without feeling like they’re setting themselves up for failure.</p>\n<p>Most importantly, give your team the freedom to solve meaningful problems instead of grinding through a backlog of tasks and epics.</p>\n",
				"content_text": "You never stop growing as a project leader. \n\n[Hurry up and flub your first fifty projects](https://therealadam.com/2024/07/30/hurry-up-and.html); the sooner you learn from stumbling, the better. Get a _taste_ for all the technical and interpersonal ways a thing can go sideways. Grow past trying to use process to block all the ways projects have punched you in the face. Develop your sense for a project that is drifting off the golden path. Experiment with and develop your moves for bringing the project back. \n\nAccept that people will always ask for estimates. Find peace in a way to provide them honestly. Help your team use estimates as planning and research without feeling like they’re setting themselves up for failure.\n\nMost importantly, give your team the freedom to solve meaningful problems instead of grinding through a backlog of tasks and epics.\n\n",
				"date_published": "2025-02-12T11:58:48-07:00",
				"url": "https://therealadam.com/2025/02/12/you-never-stop-growing-as.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/05/perfection-often-manifests-as-procrastination.html",
				
				"content_html": "<p>Perfection often manifests as procrastination. But, we imagine our work with more perfection and grandeur than we could hope to achieve in reality. By definition!</p>\n<blockquote>\n<p>Something—our limited talents, our limited time, our limited control over events, and over the actions of other people—will always render our creation less than perfect. Dispiriting as this might sound at first, it contains a liberating message: if you’re procrastinating on something because you’re worried you won’t do a good enough job, you can relax—because judged by the flawless standards of your imagination, you definitely won’t do a good enough job. So you might as well make a start.</p>\n<p>— Oliver Burkeman, <em>Four Thousand Weeks</em></p>\n</blockquote>\n<p>Better to get a bit done today, no matter how small or imperfect. Over the days and weeks, what’s done will compound. That compounding effort yields a better idea of how to realize what you imagined, and opportunities to reach for the perfection or grandeur originally imagined. 📈</p>\n",
				"content_text": "Perfection often manifests as procrastination. But, we imagine our work with more perfection and grandeur than we could hope to achieve in reality. By definition!\n\n> Something—our limited talents, our limited time, our limited control over events, and over the actions of other people—will always render our creation less than perfect. Dispiriting as this might sound at first, it contains a liberating message: if you’re procrastinating on something because you’re worried you won’t do a good enough job, you can relax—because judged by the flawless standards of your imagination, you definitely won’t do a good enough job. So you might as well make a start.\n> \n> — Oliver Burkeman, _Four Thousand Weeks_\n\nBetter to get a bit done today, no matter how small or imperfect. Over the days and weeks, what’s done will compound. That compounding effort yields a better idea of how to realize what you imagined, and opportunities to reach for the perfection or grandeur originally imagined. 📈\n\n\n",
				"date_published": "2025-02-05T11:40:04-07:00",
				"url": "https://therealadam.com/2025/02/05/perfection-often-manifests-as-procrastination.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/04/recently-listening-mostly-jazz.html",
				"title": "🔊Recently listening, mostly jazz",
				"content_html": "<p><a href=\"https://music.apple.com/us/album/puzzlin-evidence/124911522?i=124909892\">“Puzzling Evidence”</a>, The Talking Heads. Somehow I’ve just noticed this song. It sounds like if the E-Street Band helped write a Talking Heads song. Which is not a thing I would expect of The Talking Heads.</p>\n<p><a href=\"https://music.apple.com/us/album/get-up-with-it/157447301\"><em>Get Up With It</em></a>, Miles Davis – I missed this in my deep dive. It&rsquo;s real good! Very clanky.</p>\n<p><a href=\"https://music.apple.com/us/album/naked-lunch-the-complete-original-soundtrack-2014/921017245\"><em>Naked Lunch</em> soundtrack</a> – Howard Shore, Ornate Coleman, London Philharmonic Orchestra. Another <strong>fantastic</strong> discovery. Jazz/bop film soundtracks - I did not realize this is a sub-genre!</p>\n<p><a href=\"https://music.apple.com/us/album/the-birthday-concert-live-at-mr-pips-ft-lauderdale-fl-12-1-81/1198627527\"><em>The Birthday Concert</em></a>, Jaco Pastorious – like the opening of SNL was a whole album. Also, a curious preponderance of steel drum solos. This was an extremely formative album for 16-years old Adam, but I recently revisited it and still love it.</p>\n<p><a href=\"https://music.apple.com/us/album/the-great-concerts-amsterdam-copenhagen-carnegie-hall/192667954\"><em>The Great Concerts</em></a>, Dave Brubeck – another favorite of 16-year old Adam. Most notable: in the liner notes, the drummer noted they took every song way too fast. I think this worked out.</p>\n<p><a href=\"https://music.apple.com/us/album/mercy-mercy-mercy-live-at-the-club/723778170\"><em>Mercy, Mercy, Mercy</em></a>, Cannonball Adderley Quintent – &ldquo;the&rdquo; soul jazz album. More traditional Joe Zawinful, great contrast to the Weather Report stuff. Could you pull off the name &ldquo;Cannonball&rdquo;? I could not. The title track is one of the only songs I taught myself on piano, but I can only play one hand at a time. 🤷‍♂️</p>\n",
				"content_text": "[“Puzzling Evidence”](https://music.apple.com/us/album/puzzlin-evidence/124911522?i=124909892), The Talking Heads. Somehow I’ve just noticed this song. It sounds like if the E-Street Band helped write a Talking Heads song. Which is not a thing I would expect of The Talking Heads.\n\n[_Get Up With It_](https://music.apple.com/us/album/get-up-with-it/157447301), Miles Davis – I missed this in my deep dive. It's real good! Very clanky.\n\n[_Naked Lunch_ soundtrack](https://music.apple.com/us/album/naked-lunch-the-complete-original-soundtrack-2014/921017245) – Howard Shore, Ornate Coleman, London Philharmonic Orchestra. Another **fantastic** discovery. Jazz/bop film soundtracks - I did not realize this is a sub-genre!\n\n[_The Birthday Concert_](https://music.apple.com/us/album/the-birthday-concert-live-at-mr-pips-ft-lauderdale-fl-12-1-81/1198627527), Jaco Pastorious – like the opening of SNL was a whole album. Also, a curious preponderance of steel drum solos. This was an extremely formative album for 16-years old Adam, but I recently revisited it and still love it.\n\n[_The Great Concerts_](https://music.apple.com/us/album/the-great-concerts-amsterdam-copenhagen-carnegie-hall/192667954), Dave Brubeck – another favorite of 16-year old Adam. Most notable: in the liner notes, the drummer noted they took every song way too fast. I think this worked out.\n\n[_Mercy, Mercy, Mercy_](https://music.apple.com/us/album/mercy-mercy-mercy-live-at-the-club/723778170), Cannonball Adderley Quintent – \"the\" soul jazz album. More traditional Joe Zawinful, great contrast to the Weather Report stuff. Could you pull off the name \"Cannonball\"? I could not. The title track is one of the only songs I taught myself on piano, but I can only play one hand at a time. 🤷‍♂️\n\n\n",
				"date_published": "2025-02-04T09:16:48-07:00",
				"url": "https://therealadam.com/2025/02/04/recently-listening-mostly-jazz.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/04/a-few-weeks-ago-at.html",
				
				"content_html": "<blockquote>\n<p>A few weeks ago at work we had a talk where senior developers (including me) were invited to spend around five minutes each talking about our personal software development philosophies. The idea was for us to share our years of experience with our more junior developers.</p>\n<p>– qntm, <a href=\"https://qntm.org/devphilo\">Developer Philosophy</a></p>\n</blockquote>\n<p>My favorites: “Aim to be 90% done in 50% of the available time”, “It is insufficient for code to be provably correct; it should be obviously, visibly, trivially correct”, “Write code to be testable”.</p>\n",
				"content_text": "> A few weeks ago at work we had a talk where senior developers (including me) were invited to spend around five minutes each talking about our personal software development philosophies. The idea was for us to share our years of experience with our more junior developers.\n> \n> – qntm, [Developer Philosophy](https://qntm.org/devphilo)\n\nMy favorites: “Aim to be 90% done in 50% of the available time”, “It is insufficient for code to be provably correct; it should be obviously, visibly, trivially correct”, “Write code to be testable”.\n\n",
				"date_published": "2025-02-04T08:42:26-07:00",
				"url": "https://therealadam.com/2025/02/04/a-few-weeks-ago-at.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/02/03/make-great-things-tell-people.html",
				"title": "Make great stuff. Tell people about it.",
				"content_html": "<p>Don’t sweat the network or medium.</p>\n<blockquote>\n<p>It&rsquo;s all tinkering at the margins! Serving at the pleasure of the algorithm! The core concern, the thing that really matters, is doing interesting things. You can literally forget about everything beyond that. Interesting can mean whatever you want!</p>\n<p>— Aaron Francis, <a href=\"https://aaronfrancis.com/2024/reputation-is-portable-b41ee8ac\">Reputation is portable</a></p>\n</blockquote>\n<p>I could clip the whole article! 👏🏻</p>\n<blockquote>\n<p>Networks come and go. Platforms come and go. Followers come and go.</p>\n<p>Your reputation is portable. You take it with you wherever you go.</p>\n</blockquote>\n<p>This works because the particular networks don’t matter (much) in the end. It’s the people! If a network has reached critical mass, and your people or scene are there, then you don’t need to think much about anything else. How you post to a particular network, or how popular you are on any given network, matters less than participating in the network at all.</p>\n<p>What matters is doing and sharing the work. Finding the network with <a href=\"https://austinkleon.com/show-your-work/\">your people or scene</a>. Telling people about your work. Supporting the work of others on the scene.</p>\n<blockquote>\n<p>When you focus on the core, the craft, you&rsquo;re free from the algorithms. Good tweet flopped? No worries, I&rsquo;ve got plenty more. Bad tweet succeeded? Awesome, I&rsquo;ve got plenty more. Keep doing things, keep hitting the publish button. By all means learn from your successes and failures. Adjust your strategy to meet your goals. But remember, you can afford to play the slow game. Building something durable takes a long time.</p>\n</blockquote>\n<p>It’s tough to play the long game lately. In particular, because social networks (and news media) are primed to tell us the short game is everything.</p>\n<blockquote>\n<p>Should my favorite social platform collapse tomorrow, I&rsquo;ll take my reputation with me.</p>\n</blockquote>\n<p>Granted, these networks can boost us in pretty amazing ways. But, we exist largely outside of them. At the end of the day, we are what we’ve done and who we’ve helped along the way. These networks aren’t built to track our value as people, so don’t sweat it.</p>\n",
				"content_text": "Don’t sweat the network or medium.\n\n> It's all tinkering at the margins! Serving at the pleasure of the algorithm! The core concern, the thing that really matters, is doing interesting things. You can literally forget about everything beyond that. Interesting can mean whatever you want!\n> \n> — Aaron Francis, [Reputation is portable](https://aaronfrancis.com/2024/reputation-is-portable-b41ee8ac)\n\nI could clip the whole article! 👏🏻\n\n> Networks come and go. Platforms come and go. Followers come and go.\n> \n> Your reputation is portable. You take it with you wherever you go.\n\nThis works because the particular networks don’t matter (much) in the end. It’s the people! If a network has reached critical mass, and your people or scene are there, then you don’t need to think much about anything else. How you post to a particular network, or how popular you are on any given network, matters less than participating in the network at all.\n\nWhat matters is doing and sharing the work. Finding the network with [your people or scene](https://austinkleon.com/show-your-work/). Telling people about your work. Supporting the work of others on the scene.\n\n> When you focus on the core, the craft, you're free from the algorithms. Good tweet flopped? No worries, I've got plenty more. Bad tweet succeeded? Awesome, I've got plenty more. Keep doing things, keep hitting the publish button. By all means learn from your successes and failures. Adjust your strategy to meet your goals. But remember, you can afford to play the slow game. Building something durable takes a long time.\n\nIt’s tough to play the long game lately. In particular, because social networks (and news media) are primed to tell us the short game is everything.\n\n> Should my favorite social platform collapse tomorrow, I'll take my reputation with me.\n\nGranted, these networks can boost us in pretty amazing ways. But, we exist largely outside of them. At the end of the day, we are what we’ve done and who we’ve helped along the way. These networks aren’t built to track our value as people, so don’t sweat it.\n\n",
				"date_published": "2025-02-03T09:50:24-07:00",
				"url": "https://therealadam.com/2025/02/03/make-great-things-tell-people.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/29/path-dependence-is-one-heck.html",
				
				"content_html": "<p>Path dependence is one heck of a thing. It’s hard for teams and organizations to do something different if nothing seems imminently broken.</p>\n<p>Don’t let “we’ve always done it this way” serve as the entirety of the answer to “why are we doing it this way?”. Even if a wholesale change is unlikely today, reconsidering the forces at play is helpful.</p>\n<p>The first step to course correction is discovering or acknowledging that “we did it this way because…” may rely on assumptions that are no longer true.</p>\n",
				"content_text": "Path dependence is one heck of a thing. It’s hard for teams and organizations to do something different if nothing seems imminently broken.\n\nDon’t let “we’ve always done it this way” serve as the entirety of the answer to “why are we doing it this way?”. Even if a wholesale change is unlikely today, reconsidering the forces at play is helpful. \n\nThe first step to course correction is discovering or acknowledging that “we did it this way because…” may rely on assumptions that are no longer true.\n\n",
				"date_published": "2025-01-29T11:06:11-07:00",
				"url": "https://therealadam.com/2025/01/29/path-dependence-is-one-heck.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/28/the-categorical-flaw-behind-ghost.html",
				
				"content_html": "<p>The categorical flaw behind “ghost engineers” is seeing a house only for its superficial wood, glass, and brick. Anyone who has owned or rented a house for more than a few months knows that specialists who can work on the infrastructure within those walls, especially the timely and reliable ones, are what keeps a house going.</p>\n",
				"content_text": "The categorical flaw behind “ghost engineers” is seeing a house only for its superficial wood, glass, and brick. Anyone who has owned or rented a house for more than a few months knows that specialists who can work on the infrastructure within those walls, especially the timely and reliable ones, are what keeps a house going.\n\n",
				"date_published": "2025-01-28T11:45:59-07:00",
				"url": "https://therealadam.com/2025/01/28/the-categorical-flaw-behind-ghost.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/23/do-the-impactful-things-avoid.html",
				
				"content_html": "<p>🧠Do the Impactful Things. Avoid the temptation that leads to attempting to do All the Things. (And, the guilt of coming up short.)</p>\n<blockquote>\n<p>Once you stop believing that it might somehow be possible to avoid hard choices about time, it gets easier to make better ones. You begin to grasp that when there’s too much to do, and there always will be, the only route to psychological freedom is to let go of the limit-denying fantasy of getting it all done and instead to focus on doing a few things that count.</p>\n<p>— Oliver Burkeman, <em>Four Thousand Weeks</em></p>\n</blockquote>\n<p>Personally, this goes for writing, but also: reading, watching, playing, coding projects. The only thing I find it easy to approach with an abundance mindset is listening to music. (Sorry, musicians getting the squeeze from technology companies.)</p>\n<p>In other words: no productivity system can solve for fear-of-missing-out. Decisions are made, some don’t work out, learning happens, life goes on.</p>\n",
				"content_text": "🧠Do the Impactful Things. Avoid the temptation that leads to attempting to do All the Things. (And, the guilt of coming up short.)\n\n> Once you stop believing that it might somehow be possible to avoid hard choices about time, it gets easier to make better ones. You begin to grasp that when there’s too much to do, and there always will be, the only route to psychological freedom is to let go of the limit-denying fantasy of getting it all done and instead to focus on doing a few things that count.\n> \n> — Oliver Burkeman, _Four Thousand Weeks_\n\nPersonally, this goes for writing, but also: reading, watching, playing, coding projects. The only thing I find it easy to approach with an abundance mindset is listening to music. (Sorry, musicians getting the squeeze from technology companies.)\n\nIn other words: no productivity system can solve for fear-of-missing-out. Decisions are made, some don’t work out, learning happens, life goes on.\n\n",
				"date_published": "2025-01-23T10:19:02-07:00",
				"url": "https://therealadam.com/2025/01/23/do-the-impactful-things-avoid.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/22/tinkering-is-the-productivity-output.html",
				
				"content_html": "<p>Tinkering is the productivity (output) killer.</p>\n<p>2024 was the year I stopped thinking like a super-customizer. I’m not (and maybe wasn’t ever) one who writes scripts and plugins for my own idiomatic note-taking, coding, and website publishing needs.</p>\n<p>2025 is the year I accept the tasteful opinions and defaults of applications I use and <a href=\"https://therealadam.com/2022/12/27/think-your-thoughts.html\">think/write/publish my own dang thoughts</a>. And maybe do a <a href=\"https://therealadam.com/2024/11/20/we-cannot-truly.html\">bit</a> of <a href=\"https://en.wikipedia.org/wiki/Georg_Christoph_Lichtenberg#Scrap_books\">waste book</a> writing.</p>\n",
				"content_text": "Tinkering is the productivity (output) killer. \n\n2024 was the year I stopped thinking like a super-customizer. I’m not (and maybe wasn’t ever) one who writes scripts and plugins for my own idiomatic note-taking, coding, and website publishing needs. \n\n2025 is the year I accept the tasteful opinions and defaults of applications I use and [think/write/publish my own dang thoughts](https://therealadam.com/2022/12/27/think-your-thoughts.html). And maybe do a [bit](https://therealadam.com/2024/11/20/we-cannot-truly.html) of [waste book](https://en.wikipedia.org/wiki/Georg_Christoph_Lichtenberg#Scrap_books) writing.\n\n",
				"date_published": "2025-01-22T10:11:09-07:00",
				"url": "https://therealadam.com/2025/01/22/tinkering-is-the-productivity-output.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/21/how-weird-is-it-that.html",
				
				"content_html": "<p>How weird is it that <a href=\"https://www.youtube.com/watch?v=gP3zuuGav-Y\">Ol’ Dirty Bastard was featured on a song that samples “Islands in the Sun”</a>? (This is why hip-hop and sampling are great.)</p>\n<p>Probably wrong answers only:</p>\n<ul>\n<li>It was the 90s, sampling litigation was a thing, maybe that sample was the best/cheapest option.</li>\n<li>Perhaps the producer had a real respect for Dolly Parton or Kenny Rogers.</li>\n<li>If the hook has the same number of syllables as the sample, it works.</li>\n<li>It was for a movie soundtrack and the studio notes took on a life of their own.</li>\n</ul>\n",
				"content_text": "How weird is it that [Ol’ Dirty Bastard was featured on a song that samples “Islands in the Sun”](https://www.youtube.com/watch?v=gP3zuuGav-Y)? (This is why hip-hop and sampling are great.)\n\nProbably wrong answers only:\n\n* It was the 90s, sampling litigation was a thing, maybe that sample was the best/cheapest option.\n* Perhaps the producer had a real respect for Dolly Parton or Kenny Rogers.\n* If the hook has the same number of syllables as the sample, it works.\n* It was for a movie soundtrack and the studio notes took on a life of their own.\n\n",
				"date_published": "2025-01-21T09:46:34-07:00",
				"url": "https://therealadam.com/2025/01/21/how-weird-is-it-that.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/18/short-of-disconnecting-im-finding.html",
				
				"content_html": "<p>Short of disconnecting, I’m finding that my ideas in <a href=\"https://therealadam.com/2023/08/04/a-vacation-is.html\">A vacation is a tool for disconnecting</a> are plausible for application in my everyday routines. Avoiding algorithmic feeds and limiting social networks with journaling and just existing in the moment doesn’t require travel or liminal states. 🧠</p>\n",
				"content_text": "Short of disconnecting, I’m finding that my ideas in [A vacation is a tool for disconnecting](https://therealadam.com/2023/08/04/a-vacation-is.html) are plausible for application in my everyday routines. Avoiding algorithmic feeds and limiting social networks with journaling and just existing in the moment doesn’t require travel or liminal states. 🧠\n\n",
				"date_published": "2025-01-18T17:29:11-07:00",
				"url": "https://therealadam.com/2025/01/18/short-of-disconnecting-im-finding.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/09/six-easy-pieces-on-shape.html",
				"title": "Six easy pieces on Shape Up",
				"content_html": "<p>In short: like any method of working that is copied from one organization and pasted into another, very different organization, there are <a href=\"https://en.wikipedia.org/wiki/Snakes_and_ladders\">chutes and ladders</a>. Habits and practices that will help you move faster or skip ahead outright. Anti-patterns and missteps that will set you back days and weeks.</p>\n<p><img src=\"https://therealadam.com/uploads/2025/4e7c9d5000.png\" alt=\"The game board for chutes and ladders\"></p>\n<p>Herein, some things I learned whilst using <a href=\"https://basecamp.com/shapeup\">Shape Up</a> over the course of a few years across teams of varied experience and specializations.</p>\n<h2 id=\"how-teams-succeed-at-shape-up\">How teams succeed at Shape Up</h2>\n<p>Three practices that might help your first Shape Up projects:</p>\n<p><strong>The Model-T button</strong>. The first slice of your solution is crucial to success at Shape Up. I found that the more that slice was constrained, the better. I often tried to pitch the first working demo as “just a button that does the thing; you can have any button, as long as it’s black”. No ornamentation, no workflow, no layering, only a button that solves the pitched problem end-to-end without any “magic behind the curtain”. When the team quickly arrives at this milestone, it opens up the rest of their time to iterate on everything else that makes a suitable solution. And, they can do so with confidence that the big question of “can we solve this?” is already answered.</p>\n<p><strong>Coherent jargon leads to the good team-think</strong>. It warms my heart, a big moment of pride, when teams start using language as a tool for thinking about their project at a higher level. Even if the jargon is a little silly or requires explanation to an outsider. When teams wield conceptual compression to make sure they’re aligned on the specifics of the problem and how they’re solving it, I’m pretty sure they’re going to succeed at delivering the pitch. Even if the underlying problem or solution spaces are complicated!</p>\n<p><strong>Save some margin</strong> for finishing, details, socialization, delivering, etc. The most successful projects I saw left time at the end of the iteration to finish. I often called it “pencils down” time. In part, this was a breather and a milestone to let the team know they were done with the development part. It also lets them mentally shift into the mindset required for QA, fixing details, finding bugs, writing documentation, preparing release checklists, sharing changes with colleagues outside the product team, etc.</p>\n<h2 id=\"rakes-ive-stepped-on-whilst-shaping-up\">Rakes I’ve stepped on whilst Shaping Up</h2>\n<p>Three (bad) habits that could stymy your first Shape Up project:</p>\n<p><strong>Aligning work based on individual specialization.</strong> If all your tasks have “front-end” and “back-end” labels, you might end up with something you can’t quickly demo, iterate, and release. Related, if the first slice of your project doesn’t show an end-to-end solution, you don’t actually have your first slice. Lesson: you may need to work together more intensely, and decompose the work differently, than you do with processes that regard the work as simple queues.</p>\n<p><strong>Pitches and product docs so deep, you can’t see the ending from the beginning.</strong> You may need to split it up. Shape Up is, in many ways, about splitting work up more sensibly. But, if your pitch doesn’t work as independent components/solutions, you’ve got a problem! The good news is, splitting up a pitch into tasks is very similar to splitting a pitch into multiple pitches; it’s all about chasing down the dependencies, minimizing them, and thinking about how to build off existing work. Splitting up a too-large pitch is potentially a good way to practice at an essential activity of Shape Up without committing to a particular project just yet.</p>\n<p><strong>Pressing on with a wobbly project.</strong> Path dependence is tough. If you aren’t willing to use the Circuit Breaker on your first few projects, it becomes increasingly difficult to do so later. Without the ability to cut loose from a project that isn’t going to expectations, you’ll have lost the ability to do fixed time <em>and</em> scope. That’s (probably) why you looked into Shape Up in the first place. I find it important to keep in mind that Shape Up is, in part, about working with hypotheticals and options. It’s often better to stop a project that isn’t going well and move on to the next (most likely) equally promising, project.</p>\n<hr>\n<p>I have a lot more to say about Shape Up! But, I like putting shorter, punchier bits out, so here we are. Please let me know what you’d like to hear more about!</p>\n",
				"content_text": "In short: like any method of working that is copied from one organization and pasted into another, very different organization, there are [chutes and ladders](https://en.wikipedia.org/wiki/Snakes_and_ladders). Habits and practices that will help you move faster or skip ahead outright. Anti-patterns and missteps that will set you back days and weeks.\n\n![The game board for chutes and ladders](https://therealadam.com/uploads/2025/4e7c9d5000.png)\n\nHerein, some things I learned whilst using [Shape Up](https://basecamp.com/shapeup) over the course of a few years across teams of varied experience and specializations.\n\n## How teams succeed at Shape Up\nThree practices that might help your first Shape Up projects:\n\n**The Model-T button**. The first slice of your solution is crucial to success at Shape Up. I found that the more that slice was constrained, the better. I often tried to pitch the first working demo as “just a button that does the thing; you can have any button, as long as it’s black”. No ornamentation, no workflow, no layering, only a button that solves the pitched problem end-to-end without any “magic behind the curtain”. When the team quickly arrives at this milestone, it opens up the rest of their time to iterate on everything else that makes a suitable solution. And, they can do so with confidence that the big question of “can we solve this?” is already answered.\n\n**Coherent jargon leads to the good team-think**. It warms my heart, a big moment of pride, when teams start using language as a tool for thinking about their project at a higher level. Even if the jargon is a little silly or requires explanation to an outsider. When teams wield conceptual compression to make sure they’re aligned on the specifics of the problem and how they’re solving it, I’m pretty sure they’re going to succeed at delivering the pitch. Even if the underlying problem or solution spaces are complicated!\n\n**Save some margin** for finishing, details, socialization, delivering, etc. The most successful projects I saw left time at the end of the iteration to finish. I often called it “pencils down” time. In part, this was a breather and a milestone to let the team know they were done with the development part. It also lets them mentally shift into the mindset required for QA, fixing details, finding bugs, writing documentation, preparing release checklists, sharing changes with colleagues outside the product team, etc.\n\n## Rakes I’ve stepped on whilst Shaping Up\nThree (bad) habits that could stymy your first Shape Up project:\n\n**Aligning work based on individual specialization.** If all your tasks have “front-end” and “back-end” labels, you might end up with something you can’t quickly demo, iterate, and release. Related, if the first slice of your project doesn’t show an end-to-end solution, you don’t actually have your first slice. Lesson: you may need to work together more intensely, and decompose the work differently, than you do with processes that regard the work as simple queues.\n\n**Pitches and product docs so deep, you can’t see the ending from the beginning.** You may need to split it up. Shape Up is, in many ways, about splitting work up more sensibly. But, if your pitch doesn’t work as independent components/solutions, you’ve got a problem! The good news is, splitting up a pitch into tasks is very similar to splitting a pitch into multiple pitches; it’s all about chasing down the dependencies, minimizing them, and thinking about how to build off existing work. Splitting up a too-large pitch is potentially a good way to practice at an essential activity of Shape Up without committing to a particular project just yet.\n\n**Pressing on with a wobbly project.** Path dependence is tough. If you aren’t willing to use the Circuit Breaker on your first few projects, it becomes increasingly difficult to do so later. Without the ability to cut loose from a project that isn’t going to expectations, you’ll have lost the ability to do fixed time _and_ scope. That’s (probably) why you looked into Shape Up in the first place. I find it important to keep in mind that Shape Up is, in part, about working with hypotheticals and options. It’s often better to stop a project that isn’t going well and move on to the next (most likely) equally promising, project.\n\n*****\n\nI have a lot more to say about Shape Up! But, I like putting shorter, punchier bits out, so here we are. Please let me know what you’d like to hear more about!\n\n\n",
				"date_published": "2025-01-09T16:07:03-07:00",
				"url": "https://therealadam.com/2025/01/09/six-easy-pieces-on-shape.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/04/recently-on-television.html",
				"title": "📺 Recently on television",
				"content_html": "<p><em>What We Do in the Shadows</em>, final season + finale: they did a fantastic job on the finale. The last season had a few stand-out episodes; it doesn’t feel like the show went one season too long. Favorites: “Sleep Hypnosis”, “The Railroad”, “Lazlo’s Father”.</p>\n<p><em>Sticky</em>: I wanted to like this because Margo Martindale is a delight. And, it was only six (short) episodes, so I thought it was going to be an easy, one-and-done watch. The finale left me thinking they intend to bring more material. But the world is flat and clearly wants to be <em>Fargo</em>, but a bit further north.</p>\n<p>I would have found it “just okay” if they’d managed to get in and out with three hours of material. As it is, it seems like another season is intended, which leaves me feeling meh and not sure if Amazon will even pick this up to close out the narrative. On the upside for the creators and cast, at least Amazon seems most willing to let shows run long than other streaming studios.</p>\n<p><em>Skeleton Crew</em>: the adventure is good, the cast of kids is fun, the surrounding world is great. I wouldn’t have thought <em>Goonies</em> or <em>Pirates of the Caribbean</em>, but Star Wars, would work, but it’s hitting the mark.</p>\n<p><em>For All Mankind</em>: we’re rewatching parts of this ahead of the forthcoming season. I’m reminded that the first season in particular is a real dinger. And half of the dramatic tension in the show is generated by the foolish actions of one particularly space-faring family.</p>\n",
				"content_text": "_What We Do in the Shadows_, final season + finale: they did a fantastic job on the finale. The last season had a few stand-out episodes; it doesn’t feel like the show went one season too long. Favorites: “Sleep Hypnosis”, “The Railroad”, “Lazlo’s Father”.\n\n_Sticky_: I wanted to like this because Margo Martindale is a delight. And, it was only six (short) episodes, so I thought it was going to be an easy, one-and-done watch. The finale left me thinking they intend to bring more material. But the world is flat and clearly wants to be _Fargo_, but a bit further north. \n\nI would have found it “just okay” if they’d managed to get in and out with three hours of material. As it is, it seems like another season is intended, which leaves me feeling meh and not sure if Amazon will even pick this up to close out the narrative. On the upside for the creators and cast, at least Amazon seems most willing to let shows run long than other streaming studios.\n\n_Skeleton Crew_: the adventure is good, the cast of kids is fun, the surrounding world is great. I wouldn’t have thought _Goonies_ or _Pirates of the Caribbean_, but Star Wars, would work, but it’s hitting the mark.\n\n_For All Mankind_: we’re rewatching parts of this ahead of the forthcoming season. I’m reminded that the first season in particular is a real dinger. And half of the dramatic tension in the show is generated by the foolish actions of one particularly space-faring family.\n\n",
				"date_published": "2025-01-04T15:26:05-07:00",
				"url": "https://therealadam.com/2025/01/04/recently-on-television.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2025/01/03/workplace-groundhog-day-loops.html",
				"title": "Workplace Groundhog Day loops",
				"content_html": "<p>There are many ways to feel like you’re living out the same workday over and over. Weekly, if you’re unlucky. Let’s talk about two in particular: failure to write it down, and failure to decide (on how to decide).</p>\n<hr>\n<blockquote>\n<p>Write down the ways you didn&rsquo;t choose, for God&rsquo;s sake. Because otherwise you&rsquo;re gonna run into… every approach has a problem and as soon as somebody runs into the problem they&rsquo;re gonna say &ldquo;oh, why didn&rsquo;t we do it the other way?&rdquo;</p>\n<p>If you write down why you didn&rsquo;t do it the other way they&rsquo;ll look at it and be like &ldquo;oh, right, right. Yeah, it sounded worse the other way&rdquo; and they can move on. Otherwise the same conversation happens again.</p>\n<p>— Kevin Ball and Kristján Pétursson, <a href=\"https://www.humanskills.co/p/human-skills-018-creating-clarity\">Creating Clarity From Ambiguity</a></p>\n</blockquote>\n<p>Besides the general-purpose wisdom of “write it down”, this specific scenario hits home. Having to re-litigate a team’s decision every time a curveball comes along is both exhausting and a morale killer. Been there, would like to avoid that.</p>\n<p>The alternatives-not-taken don’t need detailed write-ups. It works well enough to enumerate them, briefly describe the idea, and highlight the shortcomings or reasons that decision wasn’t taken.</p>\n<hr>\n<p>Storytime: the last team I worked on that used MySQL had the “why didn’t we do it the other way?” problem <em>every time</em> a new developer was onboarded.</p>\n<p>This was in the mid-2010s, when PostgreSQL and MySQL were reaching feature parity as single-host databases. PostgreSQL replication was <em>just</em> good enough to use in production. Further, it was several years into Heroku running PostgreSQL as a default, so <em>many</em> Rails developers had either not used MySQL or were unsure why one would choose MySQL.</p>\n<p>Sometime in their first week, countless developers would ask or suggest some variation on “why don’t we use/why aren’t we moving to PostgreSQL?”. And every time, a bespoke reason was given, usually by a somewhat overworked/cranky person from the ops team. It typically rhymed with “this was the Rails default when we first built the app” or “migrating a database is an enormous effort with many second-order consequences and next-to-zero customer benefit, so here we are”.</p>\n<p>If we had instead taken the time to document this in the onboarding material? Priceless, and one fewer interactions with cranky ops folks!</p>\n<hr>\n<blockquote>\n<p>More talking. More translating. Action items are assigned, which gives everyone the illusion that progress was made. And we all return to our respective regional offices and wait until we have the same meeting again, where we attempt to communicate intelligently with each other. But all we really do is schedule meetings… when what we need to do is figure out who makes decisions.</p>\n<p>— Rands in Repose, <a href=\"https://randsinrepose.com/archives/bits-features-and-truth/\">Bits, Features, and Truth</a></p>\n</blockquote>\n<p>Same story, different tune. If a group (of leaders) can’t decide how to operate, collaboratively think, and make decisions, they’re doomed to repeat the same conversations and action items.</p>\n<p>In my experience in this kind of ongoing and repetitive meeting, the root problem is failing to decide. Deciding how to decide is an important decision to make! If you come into a meeting not knowing how you’re going to get out of the meeting with closure, the meetings will just compound. It’s like interest-only payments at the beginning of your mortgage, slightly demoralizing but absolutely required per the (very) long-term contract you’ve signed.</p>\n<hr>\n<p>My kingdom for software that makes it easier to collaborate, think, and decide than it is to schedule ​<em>one more meeting</em>​. 🙄</p>\n",
				"content_text": "There are many ways to feel like you’re living out the same workday over and over. Weekly, if you’re unlucky. Let’s talk about two in particular: failure to write it down, and failure to decide (on how to decide).\n\n---- \n> Write down the ways you didn't choose, for God's sake. Because otherwise you're gonna run into… every approach has a problem and as soon as somebody runs into the problem they're gonna say \"oh, why didn't we do it the other way?\"\n> \n> If you write down why you didn't do it the other way they'll look at it and be like \"oh, right, right. Yeah, it sounded worse the other way\" and they can move on. Otherwise the same conversation happens again. \n> \n> — Kevin Ball and Kristján Pétursson, [Creating Clarity From Ambiguity](https://www.humanskills.co/p/human-skills-018-creating-clarity)\n\nBesides the general-purpose wisdom of “write it down”, this specific scenario hits home. Having to re-litigate a team’s decision every time a curveball comes along is both exhausting and a morale killer. Been there, would like to avoid that.\n\nThe alternatives-not-taken don’t need detailed write-ups. It works well enough to enumerate them, briefly describe the idea, and highlight the shortcomings or reasons that decision wasn’t taken.\n\n---- \nStorytime: the last team I worked on that used MySQL had the “why didn’t we do it the other way?” problem _every time_ a new developer was onboarded. \n\nThis was in the mid-2010s, when PostgreSQL and MySQL were reaching feature parity as single-host databases. PostgreSQL replication was _just_ good enough to use in production. Further, it was several years into Heroku running PostgreSQL as a default, so _many_ Rails developers had either not used MySQL or were unsure why one would choose MySQL.\n\nSometime in their first week, countless developers would ask or suggest some variation on “why don’t we use/why aren’t we moving to PostgreSQL?”. And every time, a bespoke reason was given, usually by a somewhat overworked/cranky person from the ops team. It typically rhymed with “this was the Rails default when we first built the app” or “migrating a database is an enormous effort with many second-order consequences and next-to-zero customer benefit, so here we are”.\n\nIf we had instead taken the time to document this in the onboarding material? Priceless, and one fewer interactions with cranky ops folks!\n\n---- \n> More talking. More translating. Action items are assigned, which gives everyone the illusion that progress was made. And we all return to our respective regional offices and wait until we have the same meeting again, where we attempt to communicate intelligently with each other. But all we really do is schedule meetings… when what we need to do is figure out who makes decisions. \n> \n> — Rands in Repose, [Bits, Features, and Truth](https://randsinrepose.com/archives/bits-features-and-truth/)\n\nSame story, different tune. If a group (of leaders) can’t decide how to operate, collaboratively think, and make decisions, they’re doomed to repeat the same conversations and action items.\n\nIn my experience in this kind of ongoing and repetitive meeting, the root problem is failing to decide. Deciding how to decide is an important decision to make! If you come into a meeting not knowing how you’re going to get out of the meeting with closure, the meetings will just compound. It’s like interest-only payments at the beginning of your mortgage, slightly demoralizing but absolutely required per the (very) long-term contract you’ve signed.\n\n---- \nMy kingdom for software that makes it easier to collaborate, think, and decide than it is to schedule ​*one more meeting*​. 🙄\n\n",
				"date_published": "2025-01-03T10:39:58-07:00",
				"url": "https://therealadam.com/2025/01/03/workplace-groundhog-day-loops.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/31/reading-well-in-late.html",
				"title": "Reading well in late 2024",
				"content_html": "<p>It was a good year of reading, for me. I read some big books. I got more insight out of the books I read. Furthermore, I read things I don’t normally read, like philosophy and books about octopuses that help some troubled folks find their way in life.</p>\n<p>A few things worked well for me, so here I am sharing them.</p>\n<h2 id=\"bring-a-computer-assistant\">Bring a (computer) assistant</h2>\n<p><a href=\"https://therealadam.com/2024/12/26/reading-with-a-computer-assistant.html\">I used ChatGPT and Claude to ask questions about tricky passages in non-fiction and philosophy books</a>. This kept me “in the text” more. I was less distracted by wondering what some term meant or the context of a historical reference. LLMs are great for asking questions about or summarizing passages, expanding upon interesting ideas, and getting historical context.</p>\n<p>The “world knowledge” trained into these contemporary LLMs is sufficient to answer most questions without the need to provide extra context. I haven’t found the need to fiddle with trying to load the text of books I’m reading into an LLM to get it to answer coherently.</p>\n<p>As ever, trust but verify anything a computer masquerading as a human tells you.</p>\n<h2 id=\"read-actively\">Read actively</h2>\n<p>Laid back on the couch, propped up on a comfy pillow, bathed in natural light (not-too-bright, not-too-gloomy), and just the right temperature. This <em>sounds</em> like the portrait of an ideal reading situation.</p>\n<p>But, I’ve found that reading challenging books, and getting more out of them, requires a more upright and active posture. Holding the book open on at a desk with one hand with a pen or highlighter at the ready in another is the ideal for challenging books. Hands-on, it’s important.</p>\n<p>Highlighting, summarizing, annotating, and commenting on interesting passages keeps my mind in the game for longer. I’m more likely to return to the ideas and get something out of them. I often combine this with my 🤖assistant to summarize dense passages, ask questions about something I think I’m missing, or to expand on words/ideas I don’t already know.</p>\n<h2 id=\"always-be-choosing-good-books\">Always Be Choosing (Good Books)</h2>\n<p>It does no good to read better if I’m reading things that I don’t enjoy or learn from.</p>\n<p>I regularly parallelize my reading across a few genres, at least fiction and non-fiction. At times, comics, philosophy, or technical books. At other times, I’ve tried to cluster a few books in the same topical area and enjoyed it. Fiction is the least parallelizable genre, in my experience. It’s tricky to keep multiple fictional storylines/characters in my head, in the same way that holding the button mappings for multiple games in my head is tricky.</p>\n<p>I have enjoyed doing <a href=\"https://jaredhenderson.substack.com\">Commonplace Philosophy</a> read-alongs. I’m getting a lot of out of the Arendt read-along (a <em>very</em> challenging text, for me), the Aristotle <em>Ethics</em> one was insightful, and I’m really looking forward to the one on <em>The Dispossessed</em>. So, “philosophical sci-fi” will probably figure highly in my 2025 reading choices.</p>\n<p><a href=\"https://marginalrevolution.com/marginalrevolution/2019/08/reading-and-rabbit-holes.html\">Clustering around a topic</a>, another idea I picked up from Tyler Cowen, is fun when I find a few books stacked up around a topic. That said, given I choose to read tome-like non-fiction in particular, having three non-fiction books in progress at one time is not often workable.</p>\n<p>The flip-side of selecting good material is changing my mind. I’m still learning to stop when the material isn’t meeting my expectations. Not only should I <a href=\"https://therealadam.com/2024/10/21/throw-more-books.html\">throw more books</a>, I should consider aggressively skimming/summarizing-via-assistant/copilot when books turn out to be too thin or simply not the right thing.</p>\n<h2 id=\"you-still-cant-beat-a-dumb-old-kindle\">You (still) can’t beat a dumb-old Kindle</h2>\n<p>Reading on a Kindle is more pleasant than an iPad.</p>\n<p>Despite better functionality on iPad for active reading, it’s way easier to read on a Kindle device. It’s partly down to size and partly down to <em>lack</em> of functionality, as ever.</p>\n<p>You can’t underestimate the benefit of reading speed and the difficulty of distracting yourself when reading on a Kindle. 🤷‍♂️</p>\n<p>That said, the Kindle app on tablets does have a few things going for it, and I hope someday these things will come to a reasonably distraction-free Kindle device, someday:</p>\n<ul>\n<li>“Read it to me”, not audiobooks, just plain old text-to-speech voices, makes some kinds of reading easier to sustain because there’s a voice to focus on and keep up with.</li>\n<li>Adding notes and connecting dots to highlights becomes a “secondary session” activity when reading on Kindle alone. Ideally, that kind of entry is easier on a Kindle device. I didn’t realize there was magic in the iOS keyboard implementation until I tried to type quickly on a simplistic Kindle. Whatever Apple has implemented there, Amazon should pick up on it.</li>\n</ul>\n<h2 id=\"a-wishlist-for-2025\">A wishlist for 2025</h2>\n<p>My kingdom for short, dense non-fiction instead of short non-fiction that is merely a longer magazine article restated several times.</p>\n<p>Comic-style “primers” on deep topics like Sartre and chaos theory are my favorite way to start on big ideas. I hope more complicated topics and wicked problems will get this treatment in 2025, and that I’ll discover said primers.</p>\n<p>I’d definitely kick the tires on an interesting, slightly better integrated way to read long-form, i.e., books with an LLM-powered assistant at-hand. The bar is low here; I’m copying and pasting between apps to make this work right now.</p>\n<p>Maybe Amazon, Remarkable, Boox, or even Apple will make the reader/hardware situation more exciting in 2025!</p>\n",
				"content_text": "It was a good year of reading, for me. I read some big books. I got more insight out of the books I read. Furthermore, I read things I don’t normally read, like philosophy and books about octopuses that help some troubled folks find their way in life.\n\nA few things worked well for me, so here I am sharing them.\n\n## Bring a (computer) assistant\n[I used ChatGPT and Claude to ask questions about tricky passages in non-fiction and philosophy books](https://therealadam.com/2024/12/26/reading-with-a-computer-assistant.html). This kept me “in the text” more. I was less distracted by wondering what some term meant or the context of a historical reference. LLMs are great for asking questions about or summarizing passages, expanding upon interesting ideas, and getting historical context.\n\nThe “world knowledge” trained into these contemporary LLMs is sufficient to answer most questions without the need to provide extra context. I haven’t found the need to fiddle with trying to load the text of books I’m reading into an LLM to get it to answer coherently.\n\nAs ever, trust but verify anything a computer masquerading as a human tells you.\n\n## Read actively\nLaid back on the couch, propped up on a comfy pillow, bathed in natural light (not-too-bright, not-too-gloomy), and just the right temperature. This _sounds_ like the portrait of an ideal reading situation.\n\nBut, I’ve found that reading challenging books, and getting more out of them, requires a more upright and active posture. Holding the book open on at a desk with one hand with a pen or highlighter at the ready in another is the ideal for challenging books. Hands-on, it’s important.\n\nHighlighting, summarizing, annotating, and commenting on interesting passages keeps my mind in the game for longer. I’m more likely to return to the ideas and get something out of them. I often combine this with my 🤖assistant to summarize dense passages, ask questions about something I think I’m missing, or to expand on words/ideas I don’t already know.\n\n## Always Be Choosing (Good Books)\nIt does no good to read better if I’m reading things that I don’t enjoy or learn from.\n\nI regularly parallelize my reading across a few genres, at least fiction and non-fiction. At times, comics, philosophy, or technical books. At other times, I’ve tried to cluster a few books in the same topical area and enjoyed it. Fiction is the least parallelizable genre, in my experience. It’s tricky to keep multiple fictional storylines/characters in my head, in the same way that holding the button mappings for multiple games in my head is tricky.\n\nI have enjoyed doing [Commonplace Philosophy](https://jaredhenderson.substack.com) read-alongs. I’m getting a lot of out of the Arendt read-along (a _very_ challenging text, for me), the Aristotle _Ethics_ one was insightful, and I’m really looking forward to the one on _The Dispossessed_. So, “philosophical sci-fi” will probably figure highly in my 2025 reading choices.\n\n[Clustering around a topic](https://marginalrevolution.com/marginalrevolution/2019/08/reading-and-rabbit-holes.html), another idea I picked up from Tyler Cowen, is fun when I find a few books stacked up around a topic. That said, given I choose to read tome-like non-fiction in particular, having three non-fiction books in progress at one time is not often workable.\n\nThe flip-side of selecting good material is changing my mind. I’m still learning to stop when the material isn’t meeting my expectations. Not only should I [throw more books](https://therealadam.com/2024/10/21/throw-more-books.html), I should consider aggressively skimming/summarizing-via-assistant/copilot when books turn out to be too thin or simply not the right thing.\n\n## You (still) can’t beat a dumb-old Kindle\nReading on a Kindle is more pleasant than an iPad.\n\nDespite better functionality on iPad for active reading, it’s way easier to read on a Kindle device. It’s partly down to size and partly down to _lack_ of functionality, as ever.\n\nYou can’t underestimate the benefit of reading speed and the difficulty of distracting yourself when reading on a Kindle. 🤷‍♂️\n\nThat said, the Kindle app on tablets does have a few things going for it, and I hope someday these things will come to a reasonably distraction-free Kindle device, someday:\n\n- “Read it to me”, not audiobooks, just plain old text-to-speech voices, makes some kinds of reading easier to sustain because there’s a voice to focus on and keep up with.\n- Adding notes and connecting dots to highlights becomes a “secondary session” activity when reading on Kindle alone. Ideally, that kind of entry is easier on a Kindle device. I didn’t realize there was magic in the iOS keyboard implementation until I tried to type quickly on a simplistic Kindle. Whatever Apple has implemented there, Amazon should pick up on it.\n\n## A wishlist for 2025\nMy kingdom for short, dense non-fiction instead of short non-fiction that is merely a longer magazine article restated several times.\n\nComic-style “primers” on deep topics like Sartre and chaos theory are my favorite way to start on big ideas. I hope more complicated topics and wicked problems will get this treatment in 2025, and that I’ll discover said primers.\n\nI’d definitely kick the tires on an interesting, slightly better integrated way to read long-form, i.e., books with an LLM-powered assistant at-hand. The bar is low here; I’m copying and pasting between apps to make this work right now.\n\nMaybe Amazon, Remarkable, Boox, or even Apple will make the reader/hardware situation more exciting in 2025!\n\n",
				"date_published": "2024-12-31T10:30:29-07:00",
				"url": "https://therealadam.com/2024/12/31/reading-well-in-late.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/26/reading-with-a-computer-assistant.html",
				
				"content_html": "<p>Reading with a computer assistant (an LLM) to answer questions, summarize dense paragraphs, and expand on ideas has been one of the ways I leveled up at reading over the back half of the year.</p>\n<blockquote>\n<p>You don’t have to upload any book into the system.  The Great Cosmic Mind is smarter than most of the books you could jam into the context window.  Just start asking questions.  The core intuition is simply that you should be asking more questions.  And now you have someone/something to ask!</p>\n<p>— Tyler Cowen, <a href=\"https://marginalrevolution.com/marginalrevolution/2024/12/how-to-read-a-book-using-o1.html\">How to read a book using o1</a></p>\n</blockquote>\n<blockquote>\n<p>Extremely true from @tylercowen. Not just for books, but for almost everything. Music, movies, Netflix documentaries, essays, even Twitter threads, codebases and strategy docs, PRDs, the marginal benefit to asking more questions has increased dramatically even as the cost fell.</p>\n<p>— <a href=\"https://x.com/krishnanrohit/status/1865852696726839561?s=12\">@krishnanrohit</a></p>\n</blockquote>\n<p>As ever, trust but verify you’re not incorporating an AI hallucination into your human brain.</p>\n",
				"content_text": "Reading with a computer assistant (an LLM) to answer questions, summarize dense paragraphs, and expand on ideas has been one of the ways I leveled up at reading over the back half of the year.\n\n> You don’t have to upload any book into the system.  The Great Cosmic Mind is smarter than most of the books you could jam into the context window.  Just start asking questions.  The core intuition is simply that you should be asking more questions.  And now you have someone/something to ask!\n> \n> — Tyler Cowen, [How to read a book using o1](https://marginalrevolution.com/marginalrevolution/2024/12/how-to-read-a-book-using-o1.html)\n\n> Extremely true from @tylercowen. Not just for books, but for almost everything. Music, movies, Netflix documentaries, essays, even Twitter threads, codebases and strategy docs, PRDs, the marginal benefit to asking more questions has increased dramatically even as the cost fell.\n> \n> — [@krishnanrohit](https://x.com/krishnanrohit/status/1865852696726839561?s=12)\n\nAs ever, trust but verify you’re not incorporating an AI hallucination into your human brain.\n\n",
				"date_published": "2024-12-26T15:08:50-07:00",
				"url": "https://therealadam.com/2024/12/26/reading-with-a-computer-assistant.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/20/the-collected-wisdoms.html",
				
				"content_html": "<p>The collected wisdoms of Calvin Fischoder (voiced by Kevin Kline) from <em>Bob’s Burgers</em>:</p>\n<blockquote>\n<p>A bet is a bet, Bob. I once lost thirty thousand dollars on a horse. She just ran off with it.</p>\n<p>– “The Kids Run the Restaurant”</p>\n</blockquote>\n<blockquote>\n<p>I lost the year 1996 to schnapps. I still don&rsquo;t know what the Macarena is. D-Don&rsquo;t tell me. I&rsquo;ll figure it out.</p>\n<p>– “Eggs for Days”</p>\n</blockquote>\n<blockquote>\n<p>It smells weird everywhere, sir. That&rsquo;s how you know you&rsquo;re alive.</p>\n<p>– “The Taking of Funtime One Two Three”</p>\n</blockquote>\n<p>And, in song form: <a href=\"https://www.youtube.com/watch?v=bVLKPNt9Mpg\">Nothing makes me happy</a>, <a href=\"https://youtu.be/Lud3bgEJeTg?si=zr01TWxbSAHXDa2g\">The Spirits of Christmas</a>.</p>\n",
				"content_text": "The collected wisdoms of Calvin Fischoder (voiced by Kevin Kline) from _Bob’s Burgers_:\n\n> A bet is a bet, Bob. I once lost thirty thousand dollars on a horse. She just ran off with it. \n> \n> – “The Kids Run the Restaurant”\n\n> I lost the year 1996 to schnapps. I still don't know what the Macarena is. D-Don't tell me. I'll figure it out.\n> \n> – “Eggs for Days”\n\n> It smells weird everywhere, sir. That's how you know you're alive.\n> \n> – “The Taking of Funtime One Two Three”\n\nAnd, in song form: [Nothing makes me happy](https://www.youtube.com/watch?v=bVLKPNt9Mpg), [The Spirits of Christmas](https://youtu.be/Lud3bgEJeTg?si=zr01TWxbSAHXDa2g).\n\n",
				"date_published": "2024-12-20T10:35:02-07:00",
				"url": "https://therealadam.com/2024/12/20/the-collected-wisdoms.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/16/a-lowroad-llm.html",
				"title": "A low-road LLM prototype, with FastHTML",
				"content_html": "<p>I wanted to tinker with <a href=\"https://llm.datasette.io/en/stable/\"><code>llm</code></a> and “AI engineer” up a humble tool for working with my notes, writings, highlights, etc. Emphasis on humble: if I could tinker with any one of those datasets quickly and iteratively, I would mark it as a win. (Previously, <a href=\"https://therealadam.com/2024/10/31/scaling-down-native.html\">Scaling down native dev</a>.) Medium story short, I exported some of my reading highlights, loaded it into a database, and wrapped a quick UI around it to navigate my highlights via embeddings rather than keyword search. A few short sessions later, maybe a few hours total, I had something interesting working. 💪🏻</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h2 id=\"1-data\">1. Data</h2>\n<p>For several years, I’ve used <a href=\"https://readwise.io\">Readwise</a> to capture highlights and search/review them later. Handily, Readwise has CSV (and tree-of-Markdown files) exports of all one’s highlights. As data formats go, CSV is nearly perfect for this exercise. It’s structured, so parsing is not required to shoehorn it into a low-ceremony data pipeline. That said, Readwise’s export isn’t perfect: notably it lacks URLs the highlights started with. But for experiments, it’s a start.</p>\n<p><img src=\"https://therealadam.com/uploads/2024/cleanshot-2024-12-16-at-10.44.21.png\" alt=\"Readwise highlights in a Numbers spreadsheet\"></p>\n<h2 id=\"2-pipeline\">2. Pipeline</h2>\n<p>Thanks to <code>sqlite-utils</code>, I can generate a SQLite database from the export CSV. This all happens by convention with the <code>sqlite-utils</code> command line.</p>\n<pre><code>db:\n    sqlite-utils insert \\\n      highlights.db \\\n      highlights \\\n      data/readwise-data-2.csv \\\n      --csv \\\n      --pk id\n</code></pre>\n<p>No bespoke (Python) code is required in this whole pipeline process. I ended up <a href=\"https://github.com/therealadam/highlights-embedding-prototype/blob/main/justfile\">encapsulating</a> the steps in a <code>Justfile</code>, but anything that can run shell commands would have done the trick.</p>\n<p>Step two is to generate embeddings. With the right install, this is another one-liner, this time with <code>llm</code>. We query the database generated in the previous step to give us content to pass through to a text embedding model. The generated vectors are stored into the same SQLite database.</p>\n<pre><code>embed:\n    llm embed-multi \\\n      docs \\\n      --database highlights.db \\\n      --store \\\n      --sql 'select id, highlights.&quot;Book Title&quot; as title, highlights.&quot;Highlight&quot; as content from highlights' \\\n      --model mpnet\n</code></pre>\n<p>There is no step three! The data is ready to query for “semantic”, not keyword, similarity search. To prove to myself I had an end-to-end working proof of concept, I used this snippet to query the data:</p>\n<pre><code># $ just query &quot;now is not the time for notes&quot;\nquery q:\n    llm similar \\\n      docs \\\n      --database highlights.db \\\n      --content '{{q}}'\n</code></pre>\n<h2 id=\"3-prototype\">3. Prototype</h2>\n<p>Next, I put it all together in a <a href=\"https://github.com/therealadam/highlights-embedding-prototype/blob/main/app.py\">FastHTML app</a>. This was fun! FastHTML is great for this kind of bespoke, informal hacking. Caveat, some of this may not be idiomatic Python. I’m just coming back to Python after not having written it in seriousness for twenty years.</p>\n<ul>\n<li>Using the <code>dataclass</code> decorator on a class and a method for converting an object to a “FastTag”, love this for low-ceremony <em>but typed</em> data modeling.</li>\n<li>I finally got the grasp of Python’s generator syntax. I want to like <code>itertools</code>, but it’s a pain to use. (🌶️ Ruby’s <code>Enumerable</code> remains undefeated.)</li>\n<li>JSX-like syntax to structure UI in code is great. This approach falls down <em>every time</em> I put a designer in front of an editor, but I’m going to call it: this is the mark-up/UI-construction ergonomics developers crave.</li>\n<li>There’s no need for a layered web-app approach here. There’s a <code>similar</code> function that turns query text into similar highlight “model” objects. That’s a nice affordance for working quickly and loosely.</li>\n</ul>\n<h2 id=\"conclusions\">Conclusions</h2>\n<p>Python’s has pleasant things going on lately. Even a career Ruby developer like myself can find kind things to say. 😉</p>\n<p>The trickiest part to building with LLMs and generative AI is source data. Prompting a model as-is is not much more interesting than using ChatGPT or Claude. Ergo: look to one’s notes, posts, highlights, etc. to find compelling data to build upon.</p>\n<p>Variations on RAG (this is probably a bit short of calling itself RAG, but it’s <em>very</em> close) produce more appealing results than keyword indexing, but not by much. I don’t think it’s the center of a product yet; more of a sidebar or enhancement.</p>\n<p>All of this took less than five hours to build. I’ll probably end up spending a couple of hours total writing it up. This is the kind of “working with the garage door up” kind of thing I want to do. 💯📈</p>\n",
				"content_text": "I wanted to tinker with [`llm`](https://llm.datasette.io/en/stable/) and “AI engineer” up a humble tool for working with my notes, writings, highlights, etc. Emphasis on humble: if I could tinker with any one of those datasets quickly and iteratively, I would mark it as a win. (Previously, [Scaling down native dev](https://therealadam.com/2024/10/31/scaling-down-native.html).) Medium story short, I exported some of my reading highlights, loaded it into a database, and wrapped a quick UI around it to navigate my highlights via embeddings rather than keyword search. A few short sessions later, maybe a few hours total, I had something interesting working. 💪🏻\n\n<video src=\"https://therealadam.com/uploads/2024/highlights-demo.e83fffdeb3c4496eaad1cf510299faf4.mp4\" controls=\"controls\" preload=\"metadata\"></video>\n\n## 1. Data\nFor several years, I’ve used [Readwise](https://readwise.io) to capture highlights and search/review them later. Handily, Readwise has CSV (and tree-of-Markdown files) exports of all one’s highlights. As data formats go, CSV is nearly perfect for this exercise. It’s structured, so parsing is not required to shoehorn it into a low-ceremony data pipeline. That said, Readwise’s export isn’t perfect: notably it lacks URLs the highlights started with. But for experiments, it’s a start.\n\n![Readwise highlights in a Numbers spreadsheet](https://therealadam.com/uploads/2024/cleanshot-2024-12-16-at-10.44.21.png)\n\n## 2. Pipeline\nThanks to `sqlite-utils`, I can generate a SQLite database from the export CSV. This all happens by convention with the `sqlite-utils` command line.\n\n\tdb:\n\t    sqlite-utils insert \\\n\t      highlights.db \\\n\t      highlights \\\n\t      data/readwise-data-2.csv \\\n\t      --csv \\\n\t      --pk id\n\nNo bespoke (Python) code is required in this whole pipeline process. I ended up [encapsulating](https://github.com/therealadam/highlights-embedding-prototype/blob/main/justfile) the steps in a `Justfile`, but anything that can run shell commands would have done the trick.\n\nStep two is to generate embeddings. With the right install, this is another one-liner, this time with `llm`. We query the database generated in the previous step to give us content to pass through to a text embedding model. The generated vectors are stored into the same SQLite database.\n\n\tembed:\n\t    llm embed-multi \\\n\t      docs \\\n\t      --database highlights.db \\\n\t      --store \\\n\t      --sql 'select id, highlights.\"Book Title\" as title, highlights.\"Highlight\" as content from highlights' \\\n\t      --model mpnet\n\nThere is no step three! The data is ready to query for “semantic”, not keyword, similarity search. To prove to myself I had an end-to-end working proof of concept, I used this snippet to query the data:\n\n\t# $ just query \"now is not the time for notes\"\n\tquery q:\n\t    llm similar \\\n\t      docs \\\n\t      --database highlights.db \\\n\t      --content '{{q}}'\n\n## 3. Prototype\nNext, I put it all together in a [FastHTML app](https://github.com/therealadam/highlights-embedding-prototype/blob/main/app.py). This was fun! FastHTML is great for this kind of bespoke, informal hacking. Caveat, some of this may not be idiomatic Python. I’m just coming back to Python after not having written it in seriousness for twenty years.\n\n- Using the `dataclass` decorator on a class and a method for converting an object to a “FastTag”, love this for low-ceremony _but typed_ data modeling.\n- I finally got the grasp of Python’s generator syntax. I want to like `itertools`, but it’s a pain to use. (🌶️ Ruby’s `Enumerable` remains undefeated.)\n- JSX-like syntax to structure UI in code is great. This approach falls down _every time_ I put a designer in front of an editor, but I’m going to call it: this is the mark-up/UI-construction ergonomics developers crave.\n- There’s no need for a layered web-app approach here. There’s a `similar` function that turns query text into similar highlight “model” objects. That’s a nice affordance for working quickly and loosely.\n\n## Conclusions\nPython’s has pleasant things going on lately. Even a career Ruby developer like myself can find kind things to say. 😉\n\nThe trickiest part to building with LLMs and generative AI is source data. Prompting a model as-is is not much more interesting than using ChatGPT or Claude. Ergo: look to one’s notes, posts, highlights, etc. to find compelling data to build upon.\n\nVariations on RAG (this is probably a bit short of calling itself RAG, but it’s _very_ close) produce more appealing results than keyword indexing, but not by much. I don’t think it’s the center of a product yet; more of a sidebar or enhancement.\n\nAll of this took less than five hours to build. I’ll probably end up spending a couple of hours total writing it up. This is the kind of “working with the garage door up” kind of thing I want to do. 💯📈\n\n",
				"date_published": "2024-12-16T11:48:29-07:00",
				"url": "https://therealadam.com/2024/12/16/a-lowroad-llm.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/12/van-pelt-remarkably.html",
				
				"content_html": "<h3 id=\"currently-reading\">Currently reading</h3>\n<ul>\n<li>🐙 Van Pelt, <em>Remarkably Bright Creatures</em>: on an octopus and a widow. A recommendation from my sister. I could go with more octopus narration.</li>\n<li>🕰️ Burkeman, <em>Four Thousand Weeks</em>: the thesis is that no amount of time management gives you infinite time, so you might as well take advantage of the present.</li>\n<li>🧐 Arendt / <em>The Human Condition</em>: reading along with <a href=\"https://jaredhenderson.substack.com\">Commonplace Philosophy</a>.</li>\n<li>⏸️ Holiday/<em>Right Thing, Right Now</em>: on morals, through the lens of many historical tales and Stoicism.</li>\n<li>⏸️ Lichtenberg/<em>The Waste Books</em>: turns out, witty one-liners and reflections on life look about the same in notebooks from the 18th century as they do on modern social media. 😅</li>\n</ul>\n<h3 id=\"ideas-stuck-in-my-head\">Ideas stuck in my head</h3>\n<p><a href=\"https://macwright.com/2024/11/16/web-complexity\" title=\" Is there really a way to push back on the complexity of the web? - macwright.com \"> Is there really a way to push back on the complexity of the web?</a> — Tom MacWright on the plight of modern, full-stack software development.</p>\n<p><a href=\"https://jamesclear.com/3-2-1/november-28-2024\" title=\" 3-2-1: On loving your fate, how to handle pressure, and the value of being proactive yet positive - James Clear \">On loving your fate, how to handle pressure, and the value of being proactive yet positive</a> – James Clear on tackling the challenges of life.</p>\n<p><a href=\"https://lucasfcosta.com/2022/10/02/scrum-versus-kanban.html\">You don’t need Scrum. You just need to do Kanban right.</a> — Lucas F. Costa on how Scrum is a hobbled version of Kanban, if you squint right.</p>\n",
				"content_text": "### Currently reading\n\n- 🐙 Van Pelt, _Remarkably Bright Creatures_: on an octopus and a widow. A recommendation from my sister. I could go with more octopus narration.\n- 🕰️ Burkeman, _Four Thousand Weeks_: the thesis is that no amount of time management gives you infinite time, so you might as well take advantage of the present.\n- 🧐 Arendt / _The Human Condition_: reading along with [Commonplace Philosophy](https://jaredhenderson.substack.com).\n- ⏸️ Holiday/_Right Thing, Right Now_: on morals, through the lens of many historical tales and Stoicism.\n- ⏸️ Lichtenberg/_The Waste Books_: turns out, witty one-liners and reflections on life look about the same in notebooks from the 18th century as they do on modern social media. 😅\n\n### Ideas stuck in my head\n\n[ Is there really a way to push back on the complexity of the web?](https://macwright.com/2024/11/16/web-complexity \" Is there really a way to push back on the complexity of the web? - macwright.com \") — Tom MacWright on the plight of modern, full-stack software development.\n\n[On loving your fate, how to handle pressure, and the value of being proactive yet positive](https://jamesclear.com/3-2-1/november-28-2024 \" 3-2-1: On loving your fate, how to handle pressure, and the value of being proactive yet positive - James Clear \") – James Clear on tackling the challenges of life.\n\n[You don’t need Scrum. You just need to do Kanban right.](https://lucasfcosta.com/2022/10/02/scrum-versus-kanban.html) — Lucas F. Costa on how Scrum is a hobbled version of Kanban, if you squint right.\n\n",
				"date_published": "2024-12-12T10:12:27-07:00",
				"url": "https://therealadam.com/2024/12/12/van-pelt-remarkably.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/12/06/the-trouble-with.html",
				
				"content_html": "<p><a href=\"https://daniel.industries/2024/10/28/the-trouble-with-tools/\">The Trouble with Tools.</a> Daniel Miller on notes, tasks, projects, and the overlapping tension of using software to manage them.</p>\n<p>It remains very true that all <a href=\"https://therealadam.com/2023/11/25/zawinskis-law-updated.html\">software expands to the point that it can host checklists</a>. I try not to worry too much when a task list emerges from a note. If I can keep that task list short-lived, i.e., finish it within a working session, it’s not a problem.</p>\n<p>I continue to wish Things would do their very well-considered thing and make notes a first-class concept in their app. But only if they can solve it with their consistently high quality of thoughtfulness and execution. Until then, I’m thrilled with them not bolting it on at all.</p>\n<p>Lately, I’m choosing my apps for simplicity of general-purpose use. Customization and scriptability are great on paper. But then I fiddle too much instead of getting stuff done.</p>\n<p>That said, I have three different notes-shaped apps in my daily workflow. I’m basically fine with this! Maybe I’m done with all-knowing, open-ended, monolithic apps for Managing All the Work. 🤞</p>\n",
				"content_text": "[The Trouble with Tools.](https://daniel.industries/2024/10/28/the-trouble-with-tools/) Daniel Miller on notes, tasks, projects, and the overlapping tension of using software to manage them.\n\nIt remains very true that all [software expands to the point that it can host checklists](https://therealadam.com/2023/11/25/zawinskis-law-updated.html). I try not to worry too much when a task list emerges from a note. If I can keep that task list short-lived, i.e., finish it within a working session, it’s not a problem.\n\nI continue to wish Things would do their very well-considered thing and make notes a first-class concept in their app. But only if they can solve it with their consistently high quality of thoughtfulness and execution. Until then, I’m thrilled with them not bolting it on at all.\n\nLately, I’m choosing my apps for simplicity of general-purpose use. Customization and scriptability are great on paper. But then I fiddle too much instead of getting stuff done. \n\nThat said, I have three different notes-shaped apps in my daily workflow. I’m basically fine with this! Maybe I’m done with all-knowing, open-ended, monolithic apps for Managing All the Work. 🤞\n\n",
				"date_published": "2024-12-06T10:47:17-07:00",
				"url": "https://therealadam.com/2024/12/06/the-trouble-with.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/28/bruce-springsteens-no.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<p>Bruce Springsteen’s “No Nukes” concert is one of the better early period surveys of his work. But what I’m really after, lately, is a middle-period summary of his discography. A live album highlighting the material from <em>Born in the USA</em> through <em>The Rising</em>. Two very different peaks in his career, with some of this most unique albums in between.</p>\n",
				"content_text": "<iframe allow=\"autoplay *; encrypted-media *;\" frameborder=\"0\" height=\"450\" style=\"width:100%;max-width:660px;overflow:hidden;background:transparent;\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation\" src=\"https://embed.music.apple.com/us/album/the-legendary-1979-no-nukes-concerts/1584258586\"></iframe>\n\nBruce Springsteen’s “No Nukes” concert is one of the better early period surveys of his work. But what I’m really after, lately, is a middle-period summary of his discography. A live album highlighting the material from _Born in the USA_ through _The Rising_. Two very different peaks in his career, with some of this most unique albums in between.\n\n",
				"date_published": "2024-11-28T13:33:22-07:00",
				"url": "https://therealadam.com/2024/11/28/bruce-springsteens-no.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/27/backlogs.html",
				"title": "Backlogs",
				"content_html": "<p><img src=\"https://therealadam.com/uploads/2024/fd5c4dac4d.png\" alt=\"A common backlog: lots of noise, but there’s one good idea hiding in there!\" title=\"A common backlog: lots of noise, but there’s one good idea hiding in there!\"></p>\n<p>Can’t live with ‘em, can’t live without ‘em🤷‍♂️</p>\n<p>A product team (at least the ones that have been working for more than three weeks) has a backlog of work they’d love to tackle, but now’s not the right time. Maybe it’s not the most important, a practical solution isn’t in-hand, the technology isn’t ready yet, or a dependency hasn’t started work yet. Either way: a growing, somewhat discouraging list of things they <em>want</em> to do but can’t <em>yet</em>.</p>\n<p>Over time, a backlog evolves to many forms. None of them are ideal. We have to look at backlogs for what they are: an artifact of <a href=\"https://therealadam.com/2024/11/27/im-reading-four.html\">time’s finite-ness and our finite ability to do work</a> in the present.</p>\n<p>A “big pile of sadness backlog” doesn’t acknowledge limitations in time and capacity. It imagines a future where we can do <em>everything</em> we’ve ever wanted. The backlog actually gets shorter. All those problems we once wanted to solve, we can. We are also a bit taller, more attractive, and feel a bit younger while we’re at it.</p>\n<p>But that day never comes, and we’re left with a sad backlog of things. <em>Almost</em> (and this is the nefarious part) all of them less important than what we’re currently doing, but still, we think, important. So it stares at us from the shadows, a bit sad and discouraging us that we are failing at our job by having this large backlog of ideas and promising projects. At least we think they’re promising! More likely, in my experience, attempting to triage the pile of sadness backlog yield two more meta-projects around organizing the sadness to highlight the truly sad from the merely unfortunate. 😮‍💨</p>\n<p>It’s more helpful to look at a backlog as numerous maybe-good ideas sent to our future-selves. By definition, a backlog is speculation. We <em>thought</em> executing on these projects and tasks would improve things, but we won’t <em>know</em> until we do. Schrödinger&rsquo;s cat and all that. Storing all that speculation away in a pile is healthy. If it turns out one of these ideas is the right starting point for the next most important problem we face, we’ll pull it out of the backlog and give it a think. Otherwise, it stays there, putting no current work at risk.</p>\n<p>The contents of a backlog are frozen in time. The tasks, projects, docs, designs, screenshots, diagrams, etc. all reflect a point in time. Some call this rot, implying “hey, we should have been better about keeping this campsite clean and used our (infinite 😜) time to tend it”. IMO that’s not the best approach; better to regard aging tasks as issues and solutions from a point of time. They may no longer reflect the circumstances the product and team currently face. Items in a backlog necessarily need updating by a PM or developer to figure out if they still make sense, would solve the problem, or are a direct solution to that problem.</p>\n<p>I have quite the extended personal backlog of items to read and project ideas. When I regard them as missed opportunities, as evidence that I could have been at least a little more diligent in managing my time, it’s stressful and discouraging. When I instead regard it as a pile of ideas in reserve for mornings I wake up and none of my current hobby projects are enticing or what I’m reading isn’t doing it for me, then those backlogs are useful. Granted, said lists aren’t getting much shorter.</p>\n<p>Perhaps, a backlog is a defense mechanism. They are, at times, a way to deliver a soft no, to ourselves or collaborators. “Not a bad idea, but not something we can get to right away. It’s in the backlog. Maybe someday we’ll come upon it.”</p>\n<p>Or, you may have an impeccable backlog! All killer, no filler; like a “no-skips” album, but in product backlog form. If you’re out there, please let us know how you got here and how much effort it takes. 😆 (Really, if you’re out there, I’m intrigued!)</p>\n<p>The flip side is no backlog at all. The project work is a river and if something interesting floats past, you seize upon it. Otherwise, you let it float downstream and don’t worry about it too much. Or, there’s no team backlog, but the team members keep a list of ideas/task/projects that might be interesting in the future and bring them up at opportune moments. That works too!</p>\n",
				"content_text": "![A common backlog: lots of noise, but there’s one good idea hiding in there!](https://therealadam.com/uploads/2024/fd5c4dac4d.png \"A common backlog: lots of noise, but there’s one good idea hiding in there!\")\n\nCan’t live with ‘em, can’t live without ‘em🤷‍♂️\n\nA product team (at least the ones that have been working for more than three weeks) has a backlog of work they’d love to tackle, but now’s not the right time. Maybe it’s not the most important, a practical solution isn’t in-hand, the technology isn’t ready yet, or a dependency hasn’t started work yet. Either way: a growing, somewhat discouraging list of things they _want_ to do but can’t _yet_.\n\nOver time, a backlog evolves to many forms. None of them are ideal. We have to look at backlogs for what they are: an artifact of [time’s finite-ness and our finite ability to do work](https://therealadam.com/2024/11/27/im-reading-four.html) in the present.\n\nA “big pile of sadness backlog” doesn’t acknowledge limitations in time and capacity. It imagines a future where we can do _everything_ we’ve ever wanted. The backlog actually gets shorter. All those problems we once wanted to solve, we can. We are also a bit taller, more attractive, and feel a bit younger while we’re at it. \n\nBut that day never comes, and we’re left with a sad backlog of things. _Almost_ (and this is the nefarious part) all of them less important than what we’re currently doing, but still, we think, important. So it stares at us from the shadows, a bit sad and discouraging us that we are failing at our job by having this large backlog of ideas and promising projects. At least we think they’re promising! More likely, in my experience, attempting to triage the pile of sadness backlog yield two more meta-projects around organizing the sadness to highlight the truly sad from the merely unfortunate. 😮‍💨\n\nIt’s more helpful to look at a backlog as numerous maybe-good ideas sent to our future-selves. By definition, a backlog is speculation. We _thought_ executing on these projects and tasks would improve things, but we won’t _know_ until we do. Schrödinger's cat and all that. Storing all that speculation away in a pile is healthy. If it turns out one of these ideas is the right starting point for the next most important problem we face, we’ll pull it out of the backlog and give it a think. Otherwise, it stays there, putting no current work at risk.\n\nThe contents of a backlog are frozen in time. The tasks, projects, docs, designs, screenshots, diagrams, etc. all reflect a point in time. Some call this rot, implying “hey, we should have been better about keeping this campsite clean and used our (infinite 😜) time to tend it”. IMO that’s not the best approach; better to regard aging tasks as issues and solutions from a point of time. They may no longer reflect the circumstances the product and team currently face. Items in a backlog necessarily need updating by a PM or developer to figure out if they still make sense, would solve the problem, or are a direct solution to that problem.\n\nI have quite the extended personal backlog of items to read and project ideas. When I regard them as missed opportunities, as evidence that I could have been at least a little more diligent in managing my time, it’s stressful and discouraging. When I instead regard it as a pile of ideas in reserve for mornings I wake up and none of my current hobby projects are enticing or what I’m reading isn’t doing it for me, then those backlogs are useful. Granted, said lists aren’t getting much shorter.\n\nPerhaps, a backlog is a defense mechanism. They are, at times, a way to deliver a soft no, to ourselves or collaborators. “Not a bad idea, but not something we can get to right away. It’s in the backlog. Maybe someday we’ll come upon it.”\n\nOr, you may have an impeccable backlog! All killer, no filler; like a “no-skips” album, but in product backlog form. If you’re out there, please let us know how you got here and how much effort it takes. 😆 (Really, if you’re out there, I’m intrigued!)\n\nThe flip side is no backlog at all. The project work is a river and if something interesting floats past, you seize upon it. Otherwise, you let it float downstream and don’t worry about it too much. Or, there’s no team backlog, but the team members keep a list of ideas/task/projects that might be interesting in the future and bring them up at opportune moments. That works too!\n\n\n",
				"date_published": "2024-11-27T10:42:31-07:00",
				"url": "https://therealadam.com/2024/11/27/backlogs.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/27/im-reading-four.html",
				
				"content_html": "<p>I’m reading <!-- raw HTML omitted --><em>Four Thousand Weeks</em><!-- raw HTML omitted -->. Thus, my mind is often on finitude, “the state of having limits or bounds”.</p>\n<p>Bear with me as I consider tactics for time scarcity that aren’t “try harder and use this method to organize tasks in this way that worked for one person a while back” 🙃</p>\n",
				"content_text": "I’m reading <a href=\"https://www.oliverburkeman.com/fourthousandweeks\">_Four Thousand Weeks_</a>. Thus, my mind is often on finitude, “the state of having limits or bounds”. \n\nBear with me as I consider tactics for time scarcity that aren’t “try harder and use this method to organize tasks in this way that worked for one person a while back” 🙃\n",
				"date_published": "2024-11-27T10:05:40-07:00",
				"url": "https://therealadam.com/2024/11/27/im-reading-four.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/25/managers-and-coding.html",
				"title": "Managers and coding: “it depends”, but go for it anyway",
				"content_html": "<p>🌶️ Hot-take: if you’re a manager and find you<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup> miss building…then build<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>!</p>\n<ul>\n<li>On your time: mornings, weekends, national holidays.</li>\n<li>Whatever you want: tools for yourself, something frivolous, something practical.</li>\n<li>However you want: in an esoteric technology, in a boring technology, in a domain you’ve always wanted to explore, with LLM copilots, building every piece from scratch, without using conditionals, whatever!</li>\n</ul>\n<p>Avoid:</p>\n<ul>\n<li>Swooping into your team’s current projects<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>.</li>\n<li>Imposing your discoveries/ideas on unrelated code reviews.</li>\n<li>Inventing projects and putting yourself on the critical path.</li>\n<li>Building and handing off a proof-of-concept to an unsuspecting teammate to finish.</li>\n<li>Thinking the grass is greener on the hands-on/IC side.</li>\n</ul>\n<p>Don’t react to the bad parts of your previous role. It’s increasingly tricky to ride the pendulum between IC and leadership roles. You may only get to pull that lever once. Maybe building something for yourself will temper the temptation to go back to an IC role.</p>\n<p>Instead, see if you can scratch whatever hands-on building/coding/designing itch you have in your time. You’ll necessarily have to scale it down. Honestly, that’s a great constraint! If you tried to build something big, you’d have to lead and manage it and, if you recall, that’s what we’re taking time away from in the first place here.</p>\n<p>Follow your curiosity. The very best part about building on your time as a manager is you don’t have to make great decisions. Whatever is of interest, go with it.</p>\n<p>Want to build a compiler, but you work in web apps? Go for it. Want to build a game, but you work in compilers? Go for it. Want to build an asset tracking web app in a really particular way, but you work in games? Go for it. Want to write in Haskell, but you work in Ruby? Go for it.<sup id=\"fnref:4\"><a href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\">4</a></sup></p>\n<p><strong>Go for it.</strong></p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>As always, when I say “you”, I mean “you, the reader”, which is often “my previous or future self”. 🙃&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>Previously: <a href=\"https://therealadam.com/2022/05/16/managers-can-code.html\"> Managers can code on whatever keeps them off the critical path </a>.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>Don’t get yourself <em>back</em> on the critical path of projects. Your time and energy operate within different constraints now, and they’re largely incompatible with being <em>deep</em> and <em>hands-on</em> with the code.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:4\" role=\"doc-endnote\">\n<p>Caveat: you are about to have a <em>lot</em> of arguments with a new nemesis, the compiler.&#160;<a href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "🌶️ Hot-take: if you’re a manager and find you[^1] miss building…then build[^2]!\n\n- On your time: mornings, weekends, national holidays.\n- Whatever you want: tools for yourself, something frivolous, something practical.\n- However you want: in an esoteric technology, in a boring technology, in a domain you’ve always wanted to explore, with LLM copilots, building every piece from scratch, without using conditionals, whatever!\n\nAvoid:\n\n- Swooping into your team’s current projects[^3].\n- Imposing your discoveries/ideas on unrelated code reviews.\n- Inventing projects and putting yourself on the critical path.\n- Building and handing off a proof-of-concept to an unsuspecting teammate to finish.\n- Thinking the grass is greener on the hands-on/IC side.\n\nDon’t react to the bad parts of your previous role. It’s increasingly tricky to ride the pendulum between IC and leadership roles. You may only get to pull that lever once. Maybe building something for yourself will temper the temptation to go back to an IC role.\n\nInstead, see if you can scratch whatever hands-on building/coding/designing itch you have in your time. You’ll necessarily have to scale it down. Honestly, that’s a great constraint! If you tried to build something big, you’d have to lead and manage it and, if you recall, that’s what we’re taking time away from in the first place here.\n\nFollow your curiosity. The very best part about building on your time as a manager is you don’t have to make great decisions. Whatever is of interest, go with it. \n\nWant to build a compiler, but you work in web apps? Go for it. Want to build a game, but you work in compilers? Go for it. Want to build an asset tracking web app in a really particular way, but you work in games? Go for it. Want to write in Haskell, but you work in Ruby? Go for it.[^4]\n\n**Go for it.**\n\n\n[^1]:\tAs always, when I say “you”, I mean “you, the reader”, which is often “my previous or future self”. 🙃\n\n[^2]:\tPreviously: [ Managers can code on whatever keeps them off the critical path ](https://therealadam.com/2022/05/16/managers-can-code.html).\n\n[^3]:\tDon’t get yourself _back_ on the critical path of projects. Your time and energy operate within different constraints now, and they’re largely incompatible with being _deep_ and _hands-on_ with the code.\n\n[^4]:\tCaveat: you are about to have a _lot_ of arguments with a new nemesis, the compiler.\n",
				"date_published": "2024-11-25T09:27:43-07:00",
				"url": "https://therealadam.com/2024/11/25/managers-and-coding.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/20/we-cannot-truly.html",
				
				"content_html": "<blockquote>\n<p>We cannot truly know whether we are not at this moment sitting in a madhouse. (Georg Christoph Lichtenberg, <em>The Waste Books</em>)</p>\n</blockquote>\n<p>An astounding percentage of Lichtenberg’s quotables are just as relevant today as they were in 1789 when they were written. What’s more 2024 than this particular one?! 🫠</p>\n",
				"content_text": "> We cannot truly know whether we are not at this moment sitting in a madhouse. (Georg Christoph Lichtenberg, _The Waste Books_)\n\nAn astounding percentage of Lichtenberg’s quotables are just as relevant today as they were in 1789 when they were written. What’s more 2024 than this particular one?! 🫠\n",
				"date_published": "2024-11-20T16:21:29-07:00",
				"url": "https://therealadam.com/2024/11/20/we-cannot-truly.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/20/granted-house-atreides.html",
				"title": "Granted, House Atreides did miss some milestones",
				"content_html": "<p>A couple of lessons on leadership in ​Herbert’s <em>Dune</em>​:</p>\n<blockquote>\n<p>“Give as few orders as possible,” his father had told him…once…long ago. “Once you’ve given orders on a subject, you must always give orders on that subject.”</p>\n</blockquote>\n<p>Avoid, whenever possible, making decisions <em>for</em> people and teams. It may end up discouraging or preventing them from making <em>any</em> decisions for themselves in the future.</p>\n<p>Frequent top-down decisions are the autonomy-killer, they might say. 🤓</p>\n<blockquote>\n<p>Hawat arose, glancing around the room as though seeking support. He turned away, led the procession out of the room. The others moved hurriedly, scraping their chairs on the floor, balling up in little knots of confusion. It ended up in confusion, Paul thought, staring at the backs of the last men to leave. Always before, Staff had ended on an incisive air. This meeting had just seemed to trickle out, worn down by its own inadequacies, and with an argument to top it off.</p>\n</blockquote>\n<p>This is what bad meetings feel like; they deflate like a balloon. Worse than indecision, they bring confusion about how to proceed, where efforts really stand, or if the current approach is the right approach. Not necessarily because of debate or disagreement. But, the lack of consensus or direction certainly doesn’t help.</p>\n",
				"content_text": "A couple of lessons on leadership in ​Herbert’s *Dune*​:\n\n> “Give as few orders as possible,” his father had told him…once…long ago. “Once you’ve given orders on a subject, you must always give orders on that subject.”\n\nAvoid, whenever possible, making decisions _for_ people and teams. It may end up discouraging or preventing them from making *any* decisions for themselves in the future.\n\nFrequent top-down decisions are the autonomy-killer, they might say. 🤓\n\n> Hawat arose, glancing around the room as though seeking support. He turned away, led the procession out of the room. The others moved hurriedly, scraping their chairs on the floor, balling up in little knots of confusion. It ended up in confusion, Paul thought, staring at the backs of the last men to leave. Always before, Staff had ended on an incisive air. This meeting had just seemed to trickle out, worn down by its own inadequacies, and with an argument to top it off.\n\nThis is what bad meetings feel like; they deflate like a balloon. Worse than indecision, they bring confusion about how to proceed, where efforts really stand, or if the current approach is the right approach. Not necessarily because of debate or disagreement. But, the lack of consensus or direction certainly doesn’t help.\n\n",
				"date_published": "2024-11-20T09:36:17-07:00",
				"url": "https://therealadam.com/2024/11/20/granted-house-atreides.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/19/lists-for-the.html",
				"title": "Lists for the past, lists for the future",
				"content_html": "<p>Reader, I want to (<a href=\"https://therealadam.com/2021/01/10/the-unreasonable-effectiveness.html\">once again</a>) talk to you about the life-changing power of making a list and putting it in order.</p>\n<blockquote>\n<p>Ambiguity of like, &ldquo;what are we gonna build?&rdquo; or &ldquo;how are we supposed to build this?&rdquo; Or was it supposed to be A or B or why did we make this decision? So having the checklist of &ldquo;this is the thing,&rdquo; it is a very, very cheap way to eliminate most of the ambiguity.</p>\n<p>– Kristján Pétursson, <a href=\"https://www.humanskills.co/p/human-skills-018-creating-clarity\">Human Skills 018 — Creating Clarity From Ambiguity</a></p>\n</blockquote>\n<p>Tasks lists are great for capturing and organizing what you want/need to do. They are sometimes good for thinking through how to execute on those tasks and projects.</p>\n<hr>\n<p>Ordinarily, I’m too focused on all those incomplete items The empty check boxes, the lines that aren’t crossed through. So much potential. It’s exciting <em>and</em> overwhelming!</p>\n<p>I rarely use my task list to reflect upon what I’ve <em>done</em>. To retrospect on how much I accomplished any given day or capture a post-hoc note or two on follow-ups, what worked, or to merely pat myself on the back for a day of honest work.</p>\n<p>So I’m trying this right now! But, applications could stand to add more affordances for looking <em>back</em> in time too. This goes for applications like Things as much as it goes for Jira, etc. It’s probably our work and hustle culture. 🤷‍♂️ Always looking forward and rarely slowing down to say “hey, I did this, let’s get excited about that!”</p>\n<p>One of the nice things about Kanban boards is you eventually end up with a giant pile of things that were done, and that’s a nice way to feel the momentum building that a bunch of stuff got done. Let’s get more of that.</p>\n",
				"content_text": "Reader, I want to ([once again](https://therealadam.com/2021/01/10/the-unreasonable-effectiveness.html)) talk to you about the life-changing power of making a list and putting it in order.\n\n> Ambiguity of like, \"what are we gonna build?\" or \"how are we supposed to build this?\" Or was it supposed to be A or B or why did we make this decision? So having the checklist of \"this is the thing,\" it is a very, very cheap way to eliminate most of the ambiguity.\n> \n> – Kristján Pétursson, [Human Skills 018 — Creating Clarity From Ambiguity](https://www.humanskills.co/p/human-skills-018-creating-clarity)\n\nTasks lists are great for capturing and organizing what you want/need to do. They are sometimes good for thinking through how to execute on those tasks and projects.\n\n---- \nOrdinarily, I’m too focused on all those incomplete items The empty check boxes, the lines that aren’t crossed through. So much potential. It’s exciting _and_ overwhelming!\n\nI rarely use my task list to reflect upon what I’ve _done_. To retrospect on how much I accomplished any given day or capture a post-hoc note or two on follow-ups, what worked, or to merely pat myself on the back for a day of honest work.\n\nSo I’m trying this right now! But, applications could stand to add more affordances for looking _back_ in time too. This goes for applications like Things as much as it goes for Jira, etc. It’s probably our work and hustle culture. 🤷‍♂️ Always looking forward and rarely slowing down to say “hey, I did this, let’s get excited about that!”\n\nOne of the nice things about Kanban boards is you eventually end up with a giant pile of things that were done, and that’s a nice way to feel the momentum building that a bunch of stuff got done. Let’s get more of that.\n\n",
				"date_published": "2024-11-19T10:05:07-07:00",
				"url": "https://therealadam.com/2024/11/19/lists-for-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/18/thinking-a-bit.html",
				
				"content_html": "<p>Thinking a bit about essays because <a href=\"https://austinkleon.substack.com/p/room-to-think\">Room to think</a> and <a href=\"https://www.henrikkarlsson.xyz/p/essays-the-size-of-cathedrals\">Essays the size of cathedrals</a>.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Thinking a bit about essays because [Room to think](https://austinkleon.substack.com/p/room-to-think) and [Essays the size of cathedrals](https://www.henrikkarlsson.xyz/p/essays-the-size-of-cathedrals).\n\n\n<img src=\"uploads/2024/muse.museboard-2024-11-18-17.06.08.png\" alt=\"A Muse board collecting research on essays and writing\" width=\"600\" height=\"461\" />\n",
				"date_published": "2024-11-18T18:10:08-07:00",
				"url": "https://therealadam.com/2024/11/18/thinking-a-bit.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/12/team-sizes-breakpoints.html",
				"title": "Team sizes \u0026 breakpoints",
				"content_html": "<p>“<a href=\"https://en.wikipedia.org/wiki/Dunbar%27s_number\">Dunbar’s number</a> is a suggested cognitive limit to the number of people with whom one can maintain stable social relationships—relationships in which an individual knows who each person is and how each person relates to every other person”.</p>\n<p>Corollary: any group size approaching 150 people (Dunbar’s number) includes at least one person who knows about Dunbar’s number.</p>\n<p>To paraphrase a classic joke, “How do you know if someone knows about Dunbar’s number? They’ll tell you!” I’m telling you, right now, I know about Dunbar’s number. 🙃</p>\n<p>Practically, I think this implies:</p>\n<ul>\n<li>If you’re designing an organization <em>close to</em> but not <em>exceeding</em> Dunbar’s number, you can hand-wave the details of when it grows to exceed Dunbar’s number. Someone will enthusiastically let you know that the organization has exceeded Dunbar’s number and might need reconsideration. 🥸</li>\n<li>For organizations as small as 10% of Dunbar’s number (15), there’s a pretty dang good chance that someone knows about Dunbar’s number. For organizations any multiple of that size, you don’t need to go around telling everyone about Dunbar’s number. Chance are, someone is telling everyone about Dunbar’s number. 😆</li>\n</ul>\n<p>My experience in (software) teams is there are breakpoints far smaller than Dunbar’s number that matter even more.</p>\n<!-- raw HTML omitted -->\n<p>FWIW, these are all folk rules. I haven’t seen rigorous work that backs any of this up!</p>\n",
				"content_text": "“[Dunbar’s number](https://en.wikipedia.org/wiki/Dunbar%27s_number) is a suggested cognitive limit to the number of people with whom one can maintain stable social relationships—relationships in which an individual knows who each person is and how each person relates to every other person”.\n\nCorollary: any group size approaching 150 people (Dunbar’s number) includes at least one person who knows about Dunbar’s number.\n\nTo paraphrase a classic joke, “How do you know if someone knows about Dunbar’s number? They’ll tell you!” I’m telling you, right now, I know about Dunbar’s number. 🙃\n\nPractically, I think this implies: \n\n- If you’re designing an organization _close to_ but not _exceeding_ Dunbar’s number, you can hand-wave the details of when it grows to exceed Dunbar’s number. Someone will enthusiastically let you know that the organization has exceeded Dunbar’s number and might need reconsideration. 🥸\n- For organizations as small as 10% of Dunbar’s number (15), there’s a pretty dang good chance that someone knows about Dunbar’s number. For organizations any multiple of that size, you don’t need to go around telling everyone about Dunbar’s number. Chance are, someone is telling everyone about Dunbar’s number. 😆\n\nMy experience in (software) teams is there are breakpoints far smaller than Dunbar’s number that matter even more. \n\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>\n\t\t\t\tTeam/org size\n\t\t\t</th>\n\t\t\t<th>\n\t\t\t\tWhat changes?\n\t\t\t</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t3 people\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tWorking consensus/quorum is now a thing.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t6\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tSuper-linearity of personal lines of communication becomes noticeable.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t10\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tSplitting into teams and managing communications along those lines makes sense. Congrats, you have invented hierarchy and management!\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t25\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tYou may not talk to everyone in any given week. Organizing get-togethers takes more than a person-week of effort.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t50\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tThere are a few people who, despite best intentions, you don’t know they exist or what they do.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t100\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tAn old guard/new guard dynamic may form.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t150\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tDunbar’s number\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t500\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tYou have one weekly ceremony/routine that is necessitated by the organization reaching some kind of IT scale/process. You daydream about the times when you didn’t have to do this every single week.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t1500\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tAll-hands company get-togethers resemble full-blown conferences.\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t15000\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\tThere are so many possible “left doesn’t know what the right hand” is doing scenarios that it makes my head hurt.\n\t\t\t</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\nFWIW, these are all folk rules. I haven’t seen rigorous work that backs any of this up!\n\n",
				"date_published": "2024-11-12T10:25:51-07:00",
				"url": "https://therealadam.com/2024/11/12/team-sizes-breakpoints.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/09/kinda-comedy.html",
				"title": "Kinda comedy",
				"content_html": "<p>Permit me to throw shade at the Emmy Awards for a moment.</p>\n<!-- raw HTML omitted -->\n<p><em>Reservation Dogs</em> is a better kinda-comedy than <em>The Bear</em>. <em>Dogs</em> is consistently funny <em>and</em> finds ways to explore the lives, relationships, and histories of the characters in rewarding ways.</p>\n<p><em>The Bear</em> is equal parts endearing and yelling. Once or twice a season, it speaks to craft and intensity. Those are my favorite episodes. The Fak family is the only undeniably comedic element of <em>The Bear</em>. Give us a spin-off of <em>that</em> and let it legitimately win all comedy awards.</p>\n<p><em>The Bear</em> belongs in the drama category, but isn’t the length of a drama because no one could sustain watching an episode of that show for that long. 🙃</p>\n<p>By kinda-comedy, I mean “22-minute shows that are eligible for comedy awards at the Emmy’s”. The real solution here is for the Emmy’s to fix their categories in two ways:</p>\n<ul>\n<li>Don’t call “dramatic” shows that are shorter than 44 minutes comedies. This is absurd and an easy fix.</li>\n<li>Unrelated to <em>The Bear</em>, currently: create separate categories for “returning shows” and “ending shows”. Emmy voters have a tendency to award shows in their last season disproportionate to their competition.</li>\n</ul>\n<p>In short: <em>Reservation Dogs</em> was the <strong>comedy</strong> that Emmy voters think <em>The Bear</em> is. 🌶️</p>\n",
				"content_text": "Permit me to throw shade at the Emmy Awards for a moment.\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://therealadam.com/uploads/2024/kindacomedy.png\" alt=\"It&#39;s not a comedy because cringe or 22 minute runtime\" title=\"KindaComedy.png\" border=\"0\" width=\"378\" height=\"89\" />\n\n_Reservation Dogs_ is a better kinda-comedy than _The Bear_. _Dogs_ is consistently funny _and_ finds ways to explore the lives, relationships, and histories of the characters in rewarding ways. \n\n_The Bear_ is equal parts endearing and yelling. Once or twice a season, it speaks to craft and intensity. Those are my favorite episodes. The Fak family is the only undeniably comedic element of _The Bear_. Give us a spin-off of _that_ and let it legitimately win all comedy awards.\n\n_The Bear_ belongs in the drama category, but isn’t the length of a drama because no one could sustain watching an episode of that show for that long. 🙃\n\nBy kinda-comedy, I mean “22-minute shows that are eligible for comedy awards at the Emmy’s”. The real solution here is for the Emmy’s to fix their categories in two ways:\n\n- Don’t call “dramatic” shows that are shorter than 44 minutes comedies. This is absurd and an easy fix.\n- Unrelated to _The Bear_, currently: create separate categories for “returning shows” and “ending shows”. Emmy voters have a tendency to award shows in their last season disproportionate to their competition.\n\nIn short: _Reservation Dogs_ was the **comedy** that Emmy voters think _The Bear_ is. 🌶️\n\n",
				"date_published": "2024-11-09T13:04:13-07:00",
				"url": "https://therealadam.com/2024/11/09/kinda-comedy.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/09/the-emotion-key.html",
				"title": "The emotion key",
				"content_html": "<p>The function key, on iOS and possibly Mac keyboards, is bound<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup> to show the emoji picker.</p>\n<!-- raw HTML omitted -->\n<p>Apple has chosen to bind a whole key, no modifiers or anything, to “convey an emotion”. A (cartoonish) picture is worth a thousand words.</p>\n<p>🧠 Smart!</p>\n<p>(I could go on for at least five minutes about Apple’s recent design advantage is in introducing big features without making them shout-y <em>in the UI</em>. Granted, the marketing is very shout-y.)</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>By default, if I recall correctly.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "The function key, on iOS and possibly Mac keyboards, is bound[^1] to show the emoji picker.\n\n<img src=\"uploads/2024/emotion-key.png\" alt=\"Tap fn for emotions\" border=\"0\" width=\"598\" height=\"149\" />\n\nApple has chosen to bind a whole key, no modifiers or anything, to “convey an emotion”. A (cartoonish) picture is worth a thousand words. \n\n🧠 Smart!\n\n(I could go on for at least five minutes about Apple’s recent design advantage is in introducing big features without making them shout-y _in the UI_. Granted, the marketing is very shout-y.)\n\n[^1]:\tBy default, if I recall correctly.\n",
				"date_published": "2024-11-09T12:41:37-07:00",
				"url": "https://therealadam.com/2024/11/09/the-emotion-key.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/06/warm-up-your.html",
				"title": "Warm up your network before things get spooky",
				"content_html": "<p>As I write this, it’s late-2024 and the job market is <em>tough</em> for jobseekers. If one finds a job within three months, they’re considered lucky. Some folks go 2–3 times longer in-between jobs. If you’re on this boat, break a leg!🫠</p>\n<p>If you’re not actively seeking a job, here’s a thing that helped me go from “well this market sucks” to “welp, job seeking is my full-time job now, the only way out is through”:</p>\n<p>I started warming up my professional network when things got spooky at my current job.</p>\n<p>Caveat, I could have done even more than I did<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. Despite not taking more steps, the simple act of thinking through “what would I do if the worst happened and my job disappeared?” put me one step ahead, <em>and</em> I was a little more calm after my job <em>did</em> disappear.</p>\n<h2 id=\"1-the-network-is-the-work2\">1. The network is the work<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup></h2>\n<p>A strong, active professional network is the most important tool in this scenario. This is true whether the job market favors job-seekers or employers.</p>\n<p>Especially when seeking a job without one in-hand, people are happy to respond and help out<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>. Fifteen minutes of writing and responding to messages could kick-start the process for your next job.</p>\n<p>Some helpful questions I asked myself in contemplating how to warm my network back up:</p>\n<ul>\n<li>Who would I work with (again)? If former colleagues were especially easy, awesome, or delightful to work with one, a second outing is worth pursuing.</li>\n<li>What <em>kinds</em> of places would I like to work at? I find myself particularly interested in finance-adjacent endeavors.<sup id=\"fnref:4\"><a href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\">4</a></sup> Tooling is also of interest, anything that makes people’s work lives better resonates with me.</li>\n<li>Why not aim for the bleachers in my next role?<sup id=\"fnref:5\"><a href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\">5</a></sup> If I could work anywhere or hold any kind of role, where would it be? Perhaps there’s a role out there with all the upsides I’m looking for and very few trade-offs on the downside. Who could connect me to those roles?</li>\n</ul>\n<h2 id=\"2-take-a-stroll-down-accomplishments-lane\">2. Take a stroll down accomplishments lane</h2>\n<p>Another easy thing to do<sup id=\"fnref:6\"><a href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\">6</a></sup> is get (back) in the resumé writing mindset. That is, the self-promotion mindset where you’re talking about all the things you’ve done, how great they were, putting numbers to how much they improved customer outcomes, and generally putting maximum shine on your work.</p>\n<p>This is the point where I wish I had kept a good <a href=\"https://jvns.ca/blog/brag-documents/\">brag doc</a>.</p>\n<p>In lieu of a record kept in the moment, I took out some stickies and wrote out what I’d done in each of the last 6+ years at work. The goal here was to shake the dust from my brain and remember all the cool projects we shipped, excellent people I’d worked with, and improvements I’d made across the board. Keep in mind, no feat is too small and the sequence of projects doesn’t matter much! I’m only getting in the groove here. The two-ish page limit on practical resumés is forces compressing this list later.</p>\n<p>Don’t feel bad about taking time to do this. At any high-functioning organization with a performance management cycle, what you’re doing here looks exactly like what you’d do for your regular performance review ceremony.<sup id=\"fnref:7\"><a href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\">7</a></sup> Two birds, one stone!</p>\n<h2 id=\"2a-there-must-be-50-ways-to-write-your-resumé\">2a. There must be 50 ways to write your resumé</h2>\n<p>An updated resumé is a pre-requisite. I’m not (yet!) so internet-famous that I can get by without one. I didn’t start rewriting my resumé right off the bat. Instead, I dusted it off and considered how I’d change it when the time came that I needed it.</p>\n<p>Writing about oneself is challenging. It feels awkward, like something one is supposed to avoid. A few insights helped me here:</p>\n<ul>\n<li>My resumé is the marketing/advertising that will yield the job I hold for several years of my life. Multiplied out by annual pay, this document is a tool I’m using to generate the next several hundred thousand dollars that fund my life. Basically, any time I spend on it is worthwhile.</li>\n<li>Ergo, it’s worth spending <em>days</em>, all day, iterating, improving, and trying new things. It was this iteration that helped me get over the cringe of writing about myself.</li>\n<li>Cover letters seem to have fallen entirely out of fashion.<sup id=\"fnref:8\"><a href=\"#fn:8\" class=\"footnote-ref\" role=\"doc-noteref\">8</a></sup> Your resumé now has to do even more work. All the more reason to keep at iterating and customizing it.</li>\n<li>If it helps, write your resumé like you’ve already landed the hiring manager interview.<sup id=\"fnref:9\"><a href=\"#fn:9\" class=\"footnote-ref\" role=\"doc-noteref\">9</a></sup> Convince the reader that <em>they were right</em> to pull your resumé out of the stack. Tell them about <em>all</em> the great stuff you’ve done. This is where you want to refer to all your accomplishments, emphasizing the most recent and those most relevant to the kind of role you’re seeking.</li>\n</ul>\n<h2 id=\"3-one-job-is-plenty\">3. One job is plenty</h2>\n<p>Looking for a new job is an exhausting endeavor. Iterating on resumés, tweaking LinkedIn profiles, and updating online presence consumes a lot of time <em>and</em> emotional energy. That’s not to mention actually finding promising jobs, customizing your resumé to suit the job descriptions, filling in application tracking system forms, responding to leads, and scheduling of interviews. Phew!</p>\n<p>If you can avoid it, don’t seek a new job whilst trying to hold down another one. Especially one that has “gone spooky”. Granted, there’s a lot of luck and privilege wrapped up in that advice!</p>\n<p>If your luck affords it, make the search for one’s next full-time job a full-time job. That is, give yourself a few month sabbatical to recharge and focus on the job search. Granted, don’t take this route in a market that heavily favors employers and make sure your savings are topped off in case of surprises.</p>\n<hr>\n<p>All this said, preparing for seeking a job is not the same as seeking a job. It took me longer than I’d have liked to realize this. Actively seeking a job, for me, looks more like marketing and sales than building or leading. It’s playing a “numbers game”: the more people you network with and the more jobs you apply for, the better. Thinking through <em>how</em> I would execute that helped!</p>\n<p>But there was a hump I had to get over, entirely in my head, about actively/explicitly putting myself out there. Some social barriers I had to let go of, like not “reaching out” to folks via email or LinkedIn. Doing sales-y things, it’s a big growth area for me. 🙃</p>\n<p>Finally, a thing I’m learning about this most-difficult job search of my career: every step on the job search is one step closer to finding that job.<sup id=\"fnref:10\"><a href=\"#fn:10\" class=\"footnote-ref\" role=\"doc-noteref\">10</a></sup></p>\n<p>If you find yourself actively seeking a job, or merely feeling the spider-sense tingle about your current role, good luck! I hope this helped.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>I almost wrote this with “job-seeking is a steady state” as the thesis. I wish I had taken that idea more seriously before and hopefully I won’t let my guard all-the-way-down after I get through my current job search.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>Sun Microsystems is no longer a thing. Ergo, no apologies for paraphrasing their “the network is the computer” tagline.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>Basically everyone in my network whom I’ve reached out to was happy to help me through this challenging liminal state. This is a really nice thing to experience, particularly in our often-dismal times.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:4\" role=\"doc-endnote\">\n<p>I’m not certain if I would actually <em>like</em> working in finance. Maybe I’m mostly interested in learning more about that industry works, visibly and invisibly, in our lives and the world.&#160;<a href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:5\" role=\"doc-endnote\">\n<p>I’m unlikely to chance my way into Disney Imagineering, but maybe there’s something a lot <em>like</em> Imagineering within reach (of my network).🤞🏻&#160;<a href=\"#fnref:5\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:6\" role=\"doc-endnote\">\n<p>I didn’t do this before the shoe(s) dropped, but I wish I had.&#160;<a href=\"#fnref:6\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:7\" role=\"doc-endnote\">\n<p>No more than quarterly, no less than annually, I hope!&#160;<a href=\"#fnref:7\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:8\" role=\"doc-endnote\">\n<p>I’m honestly not sure why. As a hiring manager, I find the cover letter crucial information in seeing if the candidate is capable of clear, concise, easy-to-read communication.</p>\n<p>I’m going to blame applicant tracking systems and the reality that most job descriptions receive hundreds and thousands of applications. 🤷🏻‍♂️&#160;<a href=\"#fnref:8\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:9\" role=\"doc-endnote\">\n<p>Advice I heard for addressing an audience with confidence when I took improv classes: walk out there and address them like you’ve already won them over. Bring the charisma and energy of someone who has <em>already</em> sealed the deal.&#160;<a href=\"#fnref:9\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:10\" role=\"doc-endnote\">\n<p>I was not taken by this bit of wisdom at first. But, it’s truth enough in that taking <em>no steps</em> to seek a job gets you nowhere. In context, that’s true enough to keep in mind.&#160;<a href=\"#fnref:10\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "As I write this, it’s late-2024 and the job market is _tough_ for jobseekers. If one finds a job within three months, they’re considered lucky. Some folks go 2–3 times longer in-between jobs. If you’re on this boat, break a leg!🫠\n\nIf you’re not actively seeking a job, here’s a thing that helped me go from “well this market sucks” to “welp, job seeking is my full-time job now, the only way out is through”:\n\nI started warming up my professional network when things got spooky at my current job.\n\nCaveat, I could have done even more than I did[^1]. Despite not taking more steps, the simple act of thinking through “what would I do if the worst happened and my job disappeared?” put me one step ahead, _and_ I was a little more calm after my job _did_ disappear.\n\n## 1. The network is the work[^2]\nA strong, active professional network is the most important tool in this scenario. This is true whether the job market favors job-seekers or employers. \n\nEspecially when seeking a job without one in-hand, people are happy to respond and help out[^3]. Fifteen minutes of writing and responding to messages could kick-start the process for your next job.\n\nSome helpful questions I asked myself in contemplating how to warm my network back up:\n\n- Who would I work with (again)? If former colleagues were especially easy, awesome, or delightful to work with one, a second outing is worth pursuing.\n- What _kinds_ of places would I like to work at? I find myself particularly interested in finance-adjacent endeavors.[^4] Tooling is also of interest, anything that makes people’s work lives better resonates with me.\n- Why not aim for the bleachers in my next role?[^5] If I could work anywhere or hold any kind of role, where would it be? Perhaps there’s a role out there with all the upsides I’m looking for and very few trade-offs on the downside. Who could connect me to those roles?\n\n## 2. Take a stroll down accomplishments lane\nAnother easy thing to do[^6] is get (back) in the resumé writing mindset. That is, the self-promotion mindset where you’re talking about all the things you’ve done, how great they were, putting numbers to how much they improved customer outcomes, and generally putting maximum shine on your work.\n\nThis is the point where I wish I had kept a good [brag doc](https://jvns.ca/blog/brag-documents/).\n\nIn lieu of a record kept in the moment, I took out some stickies and wrote out what I’d done in each of the last 6+ years at work. The goal here was to shake the dust from my brain and remember all the cool projects we shipped, excellent people I’d worked with, and improvements I’d made across the board. Keep in mind, no feat is too small and the sequence of projects doesn’t matter much! I’m only getting in the groove here. The two-ish page limit on practical resumés is forces compressing this list later.\n\nDon’t feel bad about taking time to do this. At any high-functioning organization with a performance management cycle, what you’re doing here looks exactly like what you’d do for your regular performance review ceremony.[^7] Two birds, one stone!\n\n## 2a. There must be 50 ways to write your resumé\nAn updated resumé is a pre-requisite. I’m not (yet!) so internet-famous that I can get by without one. I didn’t start rewriting my resumé right off the bat. Instead, I dusted it off and considered how I’d change it when the time came that I needed it.\n\nWriting about oneself is challenging. It feels awkward, like something one is supposed to avoid. A few insights helped me here:\n\n- My resumé is the marketing/advertising that will yield the job I hold for several years of my life. Multiplied out by annual pay, this document is a tool I’m using to generate the next several hundred thousand dollars that fund my life. Basically, any time I spend on it is worthwhile.\n- Ergo, it’s worth spending _days_, all day, iterating, improving, and trying new things. It was this iteration that helped me get over the cringe of writing about myself.\n- Cover letters seem to have fallen entirely out of fashion.[^8] Your resumé now has to do even more work. All the more reason to keep at iterating and customizing it.\n- If it helps, write your resumé like you’ve already landed the hiring manager interview.[^9] Convince the reader that _they were right_ to pull your resumé out of the stack. Tell them about _all_ the great stuff you’ve done. This is where you want to refer to all your accomplishments, emphasizing the most recent and those most relevant to the kind of role you’re seeking.\n\n## 3. One job is plenty\nLooking for a new job is an exhausting endeavor. Iterating on resumés, tweaking LinkedIn profiles, and updating online presence consumes a lot of time _and_ emotional energy. That’s not to mention actually finding promising jobs, customizing your resumé to suit the job descriptions, filling in application tracking system forms, responding to leads, and scheduling of interviews. Phew!\n\nIf you can avoid it, don’t seek a new job whilst trying to hold down another one. Especially one that has “gone spooky”. Granted, there’s a lot of luck and privilege wrapped up in that advice! \n\nIf your luck affords it, make the search for one’s next full-time job a full-time job. That is, give yourself a few month sabbatical to recharge and focus on the job search. Granted, don’t take this route in a market that heavily favors employers and make sure your savings are topped off in case of surprises.\n\n---- \nAll this said, preparing for seeking a job is not the same as seeking a job. It took me longer than I’d have liked to realize this. Actively seeking a job, for me, looks more like marketing and sales than building or leading. It’s playing a “numbers game”: the more people you network with and the more jobs you apply for, the better. Thinking through _how_ I would execute that helped! \n\nBut there was a hump I had to get over, entirely in my head, about actively/explicitly putting myself out there. Some social barriers I had to let go of, like not “reaching out” to folks via email or LinkedIn. Doing sales-y things, it’s a big growth area for me. 🙃\n\nFinally, a thing I’m learning about this most-difficult job search of my career: every step on the job search is one step closer to finding that job.[^10]\n\nIf you find yourself actively seeking a job, or merely feeling the spider-sense tingle about your current role, good luck! I hope this helped.\n\n[^1]:\tI almost wrote this with “job-seeking is a steady state” as the thesis. I wish I had taken that idea more seriously before and hopefully I won’t let my guard all-the-way-down after I get through my current job search.\n\n[^2]:\tSun Microsystems is no longer a thing. Ergo, no apologies for paraphrasing their “the network is the computer” tagline.\n\n[^3]:\tBasically everyone in my network whom I’ve reached out to was happy to help me through this challenging liminal state. This is a really nice thing to experience, particularly in our often-dismal times.\n\n[^4]:\tI’m not certain if I would actually _like_ working in finance. Maybe I’m mostly interested in learning more about that industry works, visibly and invisibly, in our lives and the world.\n\n[^5]:\tI’m unlikely to chance my way into Disney Imagineering, but maybe there’s something a lot _like_ Imagineering within reach (of my network).🤞🏻\n\n[^6]:\tI didn’t do this before the shoe(s) dropped, but I wish I had.\n\n[^7]:\tNo more than quarterly, no less than annually, I hope!\n\n[^8]:\tI’m honestly not sure why. As a hiring manager, I find the cover letter crucial information in seeing if the candidate is capable of clear, concise, easy-to-read communication.  \n      \n    I’m going to blame applicant tracking systems and the reality that most job descriptions receive hundreds and thousands of applications. 🤷🏻‍♂️\n\n[^9]:\tAdvice I heard for addressing an audience with confidence when I took improv classes: walk out there and address them like you’ve already won them over. Bring the charisma and energy of someone who has _already_ sealed the deal.\n\n[^10]:\tI was not taken by this bit of wisdom at first. But, it’s truth enough in that taking _no steps_ to seek a job gets you nowhere. In context, that’s true enough to keep in mind.\n",
				"date_published": "2024-11-06T14:18:00-07:00",
				"url": "https://therealadam.com/2024/11/06/warm-up-your.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/04/bias-towards-hitting.html",
				"title": "Bias towards hitting publish",
				"content_html": "<p>Jeff Triplett, <a href=\"https://micro.webology.dev/2024/11/02/please-publish-and.html\">Please publish and share more</a>:</p>\n<blockquote>\n<p>You don’t have to change the world with every post. You might publish a quick thought or two that helps encourage someone else to try something new, listen to a new song, or binge-watch a new series.</p>\n<p>…</p>\n<p>Our posts are done when you say they are. You do not have to fret about sticking to landing and having a perfect conclusion. Your posts, like this post, are done after we stop writing.</p>\n</blockquote>\n<hr>\n<p>I have found it’s not enough to journal, capture notes, save bookmarks, write in a notebook, post to a blog, participate in a cozy group chat, or engage in public discussion on social media.</p>\n<p>Revisit what I wrote. Resurface old ideas. Try to put old ideas together with new ideas. Remixing ideas with new thoughts. Repackage into a new medium. That’s how the compounding of writing and thinking hits the road, per se. At least, for me.</p>\n<p>Set activation energy low and steer into repetitiveness. I never know which combination of words is going to hit someone’s mental jackpot.</p>\n",
				"content_text": "Jeff Triplett, [Please publish and share more](https://micro.webology.dev/2024/11/02/please-publish-and.html):\n\n> You don’t have to change the world with every post. You might publish a quick thought or two that helps encourage someone else to try something new, listen to a new song, or binge-watch a new series.\n> \n> …\n> \n> Our posts are done when you say they are. You do not have to fret about sticking to landing and having a perfect conclusion. Your posts, like this post, are done after we stop writing.\n\n---- \nI have found it’s not enough to journal, capture notes, save bookmarks, write in a notebook, post to a blog, participate in a cozy group chat, or engage in public discussion on social media.\n\nRevisit what I wrote. Resurface old ideas. Try to put old ideas together with new ideas. Remixing ideas with new thoughts. Repackage into a new medium. That’s how the compounding of writing and thinking hits the road, per se. At least, for me.\n\nSet activation energy low and steer into repetitiveness. I never know which combination of words is going to hit someone’s mental jackpot.\n\n",
				"date_published": "2024-11-04T09:40:28-07:00",
				"url": "https://therealadam.com/2024/11/04/bias-towards-hitting.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/11/02/iteration-take.html",
				"title": "Iteration (take 7)",
				"content_html": "<p><img src=\"https://therealadam.com/uploads/2024/704293123b.png\" alt=\"A Miles Davis outtakes special edition album\"></p>\n<p>Kent beck, <a href=\"https://tidyfirst.substack.com/p/coupling-and-cohesion\">Coupling and Cohesion</a>:</p>\n<blockquote>\n<p>The only way to be able to describe something well is to describe it badly 100 times.</p>\n</blockquote>\n<p>I’m forever feeling this one. Many times, I’ve felt the idea or plan is so clear in the document or the whiteboard. And yet, when other folks try to read the idea or execute the plan in their heads, the connection isn’t made. Back to the drawing board. 🙃</p>\n<p>FWIW, “describe something well” is directly related to building software. A good domain model or intuitive UX interaction is as tricky to describe as a great movie or poem.</p>\n<p>All problems are shallow under iteration; the real limitation is producing iterations and collecting feedback.</p>\n<blockquote>\n<p>Hurry up and lose your first 50 games.</p>\n<p>— Go proverb</p>\n</blockquote>\n<p>Case in point: I’ve probably written some variation on this blog post nearly a dozen times. Perhaps some day, I’ll get it <em>just</em> right.</p>\n",
				"content_text": "![A Miles Davis outtakes special edition album](https://therealadam.com/uploads/2024/704293123b.png)\n\nKent beck, [Coupling and Cohesion](https://tidyfirst.substack.com/p/coupling-and-cohesion):\n\n> The only way to be able to describe something well is to describe it badly 100 times.\n\nI’m forever feeling this one. Many times, I’ve felt the idea or plan is so clear in the document or the whiteboard. And yet, when other folks try to read the idea or execute the plan in their heads, the connection isn’t made. Back to the drawing board. 🙃 \n\nFWIW, “describe something well” is directly related to building software. A good domain model or intuitive UX interaction is as tricky to describe as a great movie or poem.\n\nAll problems are shallow under iteration; the real limitation is producing iterations and collecting feedback.\n\n> Hurry up and lose your first 50 games.\n> \n> — Go proverb\n\nCase in point: I’ve probably written some variation on this blog post nearly a dozen times. Perhaps some day, I’ll get it _just_ right.\n\n",
				"date_published": "2024-11-02T17:29:34-07:00",
				"url": "https://therealadam.com/2024/11/02/iteration-take.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/31/scaling-down-native.html",
				"title": "Scaling down native dev",
				"content_html": "<p>In short: I want to build <a href=\"https://youtu.be/09pekAKuXjc?si=Z9QkAkB4Z0vC6zJD\">low-road</a> applications for myself. They will have a very narrow function. I may use them for as little as a week or so, finish the task at hand, and move on to the next thing. Think about it like Simon Willison’s work using Claude to generate tools.</p>\n<p>This feels like it demands something besides my usual full-stack web app (i.e., Rails) approach<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>:</p>\n<ul>\n<li>I would like to launch these apps instantly <em>and</em> operate on local data.</li>\n<li>In particular, files and folders; not database rows.</li>\n<li>I would rather not dig up a folder or terminal to run these applications; they should launch like I’d run anything else (i.e., via Raycast).</li>\n</ul>\n<p>Tauri seems like it fits the bill here. It wraps a <em>native</em> web view in a small platform-specific host application. The “host” application is a Rust program that wraps a platform-specific web view, e.g., Safari on macOS. You can write native code in Rust, web/front-end code in HTML/CSS/JS, and easily call functions between them. In other words, a better Electron.</p>\n<hr>\n<p>Strengths become weaknesses. In theory, “JavaScript everywhere” is a lovely concept. One language across the web, backend services, command-line scripts, embedded systems, even desktop applications. In practice: it’s a thousand cuts, especially if you’re trying to avoid accepting the whole JS build system/framework ecosystem into your life. Which I was, in this case.</p>\n<p>It’d be <em>extremely</em> great to have Deno save the day here. Write backend/host-native <em>or</em> front-end code in JS and very little need to drop to Rust. In practice, it doesn’t seem like anyone is doing that. 🤷🏻‍♂️</p>\n<hr>\n<p>What I want to build for myself is a gizmo for re-categorizing my old blog posts. These are all hosted on Micro.blog as of this year. Because of idiosyncrasies in the Micro.blog API, interacting with <em>all</em> posts seems to require using <a href=\"https://help.micro.blog/t/overview-of-xml-rpc-api/107\">XML-RPC</a>. The REST+JSON APIs don’t provide access to more than one page of posts, so they’re unsuited to working with one’s entire blog archive<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>.</p>\n<p>Doing this from JavaScript, running in the web view, is where I ran into troubles. All the libraries I found assumed the code is hosted in Node, which maybe would have been fine. Node isn’t <em>drastically</em> different from browsers in this regard, if I understand correctly. <em>Except</em> that loading the actual library used the Node <code>require</code> mechanism instead of the browser-based <code>import</code> mechanism. And, it’s been a minute since I cared about the details of code loading in JS (did I ever really care?). It wasn’t really the problem I wanted to solve, so I “just tried things”, despite this being one of my pet peeves about how intermediate-level developers work.</p>\n<p>Reader: I was not feeling like a badass user at this point.</p>\n<hr>\n<p>I wanted to write some tests with Jest. But, Jest <em>deeply</em> assumes you’re using some kind of code transformation (webpack, Babel, etc.) scheme. Which I was trying pretty hard to avoid. I did get a very basic test working, but I didn’t feel good about it.</p>\n<p>I might consider using QUnit and live with in-browser tests if I choose “no build step” as a tent pole principle on a real project.</p>\n<p>Long story short, I did manage to get an XML-RPC call working from a test in Jest. I never tried integrating it into the web-view code. I fought the module system enough for the week. Maybe if I revisit this approach, I’ll get my story straight here. 🤷🏻‍♂️</p>\n<hr>\n<p>My next foray was attempting to write the networking calls to Micro.blog in Rust. I’ve previously struggled with Rust in the form of extended arguments with the compiler. I like the idea of the language, type system, and lifetime/borrowing scheme. But taken together, I haven’t yet reached a place of confidence working with it. My last serious attempt at using Rust, several years ago, was stymied by a combination of generics, number towers, and getting lifetimes right.</p>\n<p>I did not run into those particular challenges this time around. Armed with an LLM, it feels better than several years ago! I didn’t spend the whole time arguing with the compiler. With Claude 3.5 Sonnet (IIRC), I was able to get a rudimentary XML-RPC call working.</p>\n<p>I&rsquo;m in favor of writing the backend/host-executed stuff in Rust. The jury’s still out on whether this is a plausible approach. I’ve never argued with the Haskell compiler about, e.g., JSON and walked away with a successful compilation.</p>\n<hr>\n<p><code>pico.css</code> is perfect for my needs. I included it with a link tag and mostly used classless HTML tags. That’s about it. No scheme of semantic, functional, or utility class names to learn. No build step. It’s good enough that looks aren’t the weakest link or distracting. That’s a good tool.</p>\n<p>Similarly, I tried using Alpine to layer some interaction logic into the UI. I got hung up on declaring a data structure and then using it from any old element. I think this was a load order issue or misunderstanding on my part. Instead, I should have tried starting with basic interactions and <em>then</em> gone for the fancy stuff.</p>\n<hr>\n<p>The verdict, after a few hours of hacking:</p>\n<ul>\n<li>Tauri has a lot of promise for problems shaped like “I want to build a quasi-native desktop app, but I would rather not get caught up in native ecosystems”.</li>\n<li>Rust, in combination with LLM copilots, is easier to navigate than it was without them and I spent less time arguing with the compiler than I’d feared I would.</li>\n<li>Small, low-customization CSS libraries: they’re good for me!</li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Previously: <a href=\"https://therealadam.com/2024/09/13/wherein-the-old.html\">I learn new tricks</a>.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>I’ve explored this a few times and come up with the same answer. I’d love to be wrong about this!&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "In short: I want to build [low-road](https://youtu.be/09pekAKuXjc?si=Z9QkAkB4Z0vC6zJD) applications for myself. They will have a very narrow function. I may use them for as little as a week or so, finish the task at hand, and move on to the next thing. Think about it like Simon Willison’s work using Claude to generate tools. \n\nThis feels like it demands something besides my usual full-stack web app (i.e., Rails) approach[^1]:\n\n- I would like to launch these apps instantly _and_ operate on local data.\n- In particular, files and folders; not database rows.\n- I would rather not dig up a folder or terminal to run these applications; they should launch like I’d run anything else (i.e., via Raycast).\n\nTauri seems like it fits the bill here. It wraps a _native_ web view in a small platform-specific host application. The “host” application is a Rust program that wraps a platform-specific web view, e.g., Safari on macOS. You can write native code in Rust, web/front-end code in HTML/CSS/JS, and easily call functions between them. In other words, a better Electron.\n\n---- \nStrengths become weaknesses. In theory, “JavaScript everywhere” is a lovely concept. One language across the web, backend services, command-line scripts, embedded systems, even desktop applications. In practice: it’s a thousand cuts, especially if you’re trying to avoid accepting the whole JS build system/framework ecosystem into your life. Which I was, in this case.\n\nIt’d be _extremely_ great to have Deno save the day here. Write backend/host-native _or_ front-end code in JS and very little need to drop to Rust. In practice, it doesn’t seem like anyone is doing that. 🤷🏻‍♂️\n\n---- \nWhat I want to build for myself is a gizmo for re-categorizing my old blog posts. These are all hosted on Micro.blog as of this year. Because of idiosyncrasies in the Micro.blog API, interacting with _all_ posts seems to require using [XML-RPC](https://help.micro.blog/t/overview-of-xml-rpc-api/107). The REST+JSON APIs don’t provide access to more than one page of posts, so they’re unsuited to working with one’s entire blog archive[^2].\n\nDoing this from JavaScript, running in the web view, is where I ran into troubles. All the libraries I found assumed the code is hosted in Node, which maybe would have been fine. Node isn’t _drastically_ different from browsers in this regard, if I understand correctly. _Except_ that loading the actual library used the Node `require` mechanism instead of the browser-based `import` mechanism. And, it’s been a minute since I cared about the details of code loading in JS (did I ever really care?). It wasn’t really the problem I wanted to solve, so I “just tried things”, despite this being one of my pet peeves about how intermediate-level developers work.\n\nReader: I was not feeling like a badass user at this point.\n\n---- \nI wanted to write some tests with Jest. But, Jest _deeply_ assumes you’re using some kind of code transformation (webpack, Babel, etc.) scheme. Which I was trying pretty hard to avoid. I did get a very basic test working, but I didn’t feel good about it.\n\nI might consider using QUnit and live with in-browser tests if I choose “no build step” as a tent pole principle on a real project.\n\nLong story short, I did manage to get an XML-RPC call working from a test in Jest. I never tried integrating it into the web-view code. I fought the module system enough for the week. Maybe if I revisit this approach, I’ll get my story straight here. 🤷🏻‍♂️\n\n---- \nMy next foray was attempting to write the networking calls to Micro.blog in Rust. I’ve previously struggled with Rust in the form of extended arguments with the compiler. I like the idea of the language, type system, and lifetime/borrowing scheme. But taken together, I haven’t yet reached a place of confidence working with it. My last serious attempt at using Rust, several years ago, was stymied by a combination of generics, number towers, and getting lifetimes right.\n\nI did not run into those particular challenges this time around. Armed with an LLM, it feels better than several years ago! I didn’t spend the whole time arguing with the compiler. With Claude 3.5 Sonnet (IIRC), I was able to get a rudimentary XML-RPC call working.\n\nI'm in favor of writing the backend/host-executed stuff in Rust. The jury’s still out on whether this is a plausible approach. I’ve never argued with the Haskell compiler about, e.g., JSON and walked away with a successful compilation.\n\n---- \n`pico.css` is perfect for my needs. I included it with a link tag and mostly used classless HTML tags. That’s about it. No scheme of semantic, functional, or utility class names to learn. No build step. It’s good enough that looks aren’t the weakest link or distracting. That’s a good tool.\n\nSimilarly, I tried using Alpine to layer some interaction logic into the UI. I got hung up on declaring a data structure and then using it from any old element. I think this was a load order issue or misunderstanding on my part. Instead, I should have tried starting with basic interactions and _then_ gone for the fancy stuff.\n\n---- \nThe verdict, after a few hours of hacking:\n\n- Tauri has a lot of promise for problems shaped like “I want to build a quasi-native desktop app, but I would rather not get caught up in native ecosystems”.\n- Rust, in combination with LLM copilots, is easier to navigate than it was without them and I spent less time arguing with the compiler than I’d feared I would.\n- Small, low-customization CSS libraries: they’re good for me!\n\n[^1]:\tPreviously: [I learn new tricks](https://therealadam.com/2024/09/13/wherein-the-old.html).\n\n[^2]:\tI’ve explored this a few times and come up with the same answer. I’d love to be wrong about this!\n",
				"date_published": "2024-10-31T17:23:26-07:00",
				"url": "https://therealadam.com/2024/10/31/scaling-down-native.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/30/a-bag-of.html",
				"title": "A bag of vignettes",
				"content_html": "<blockquote>\n<p>From that point on, well, there&rsquo;s only one, maybe two great nail salons in Amsterdam.</p>\n</blockquote>\n<p>I was rewatching <em>Ocean’s Twelve</em>, because empty calories and fantastic faces. Having watched it a dozen times, I was struck by how it doesn’t fit together like a Major Motion Picture.</p>\n<p>Many of the scenes are vignettes. They’re structured around one as little as one laugh or minor plot beat, like I’d expect from an unscripted show. Especially in the back half of the movie, many of the scenes watch like they’re built around a single punchline, often with background action advancing or distracting from the heist-puzzle.</p>\n<p>I know this isn’t High Art or Cinema™️, but I love it.</p>\n",
				"content_text": "> From that point on, well, there's only one, maybe two great nail salons in Amsterdam.\n\nI was rewatching _Ocean’s Twelve_, because empty calories and fantastic faces. Having watched it a dozen times, I was struck by how it doesn’t fit together like a Major Motion Picture.\n\nMany of the scenes are vignettes. They’re structured around one as little as one laugh or minor plot beat, like I’d expect from an unscripted show. Especially in the back half of the movie, many of the scenes watch like they’re built around a single punchline, often with background action advancing or distracting from the heist-puzzle.\n\nI know this isn’t High Art or Cinema™️, but I love it.\n\n",
				"date_published": "2024-10-30T17:07:26-07:00",
				"url": "https://therealadam.com/2024/10/30/a-bag-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/21/throw-more-books.html",
				"title": "Throw more books",
				"content_html": "<p>Simon Sarris, <a href=\"https://map.simonsarris.com/p/reading-well\">Reading Well</a>:</p>\n<blockquote>\n<p>You should start many books and complete few. You should never feel beholden to completing them, there are simply too many worthwhile works to read.</p>\n</blockquote>\n<p>I’m a completionist. I don’t like leaving books, let alone series of books, unfinished. But, endorsements from Sarris (and Austin Kleon) on leaving books unfinished, possibly by throwing them across the room, is a strong-enough signal. 🙃</p>\n<p>🔥I wish I’d heard this advice when I was reading <em>The Black Swan</em>.</p>\n",
				"content_text": "Simon Sarris, [Reading Well](https://map.simonsarris.com/p/reading-well):\n\n> You should start many books and complete few. You should never feel beholden to completing them, there are simply too many worthwhile works to read.\n\nI’m a completionist. I don’t like leaving books, let alone series of books, unfinished. But, endorsements from Sarris (and Austin Kleon) on leaving books unfinished, possibly by throwing them across the room, is a strong-enough signal. 🙃\n\n🔥I wish I’d heard this advice when I was reading _The Black Swan_.\n\n",
				"date_published": "2024-10-21T12:45:56-07:00",
				"url": "https://therealadam.com/2024/10/21/throw-more-books.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/07/hottakes-on-web.html",
				"title": "Hot-takes on web browsers",
				"content_html": "<ol>\n<li><strong>Safari is (on macOS) the only good <em>application</em> and web browser</strong>. Chrome is a remarkable feat of engineering but a mediocre application.</li>\n<li><strong><a href=\"https://thebrowser.company\">Arc</a> is <em>extremely</em> promising</strong>. Reimagining the shape, function, and purpose of a web browser for our current computational surplus is a worthwhile endeavor. On the flip-side, I hope that grassroots efforts like the <a href=\"https://ladybird.org\">Ladybird browser</a> and <a href=\"https://github.com/BrowserJam/browserjam\">browser jams</a> will produce more diversity in how browser engines operate and what it means to construct a browser engine in the first place.</li>\n<li><strong>Web browsers, as application platforms <em>and</em> as document viewers, are an incredible technological accomplishment</strong>. Trillions of renders per day, things <em>mostly</em> work, and the security/sandboxing model works without embarrassing flaws. Viewed over years and decades, progress in web browsers has been remarkable.</li>\n</ol>\n<p>To paraphrase <a href=\"https://winstonchurchill.org/resources/quotes/the-worst-form-of-government/\">Winston Churchill</a>, web browsers are the worst cross-platform application framework except for all the other ones that have been tried.</p>\n",
				"content_text": "1. **Safari is (on macOS) the only good _application_ and web browser**. Chrome is a remarkable feat of engineering but a mediocre application. \n2. **[Arc](https://thebrowser.company) is _extremely_ promising**. Reimagining the shape, function, and purpose of a web browser for our current computational surplus is a worthwhile endeavor. On the flip-side, I hope that grassroots efforts like the [Ladybird browser](https://ladybird.org) and [browser jams](https://github.com/BrowserJam/browserjam) will produce more diversity in how browser engines operate and what it means to construct a browser engine in the first place.\n3. **Web browsers, as application platforms _and_ as document viewers, are an incredible technological accomplishment**. Trillions of renders per day, things _mostly_ work, and the security/sandboxing model works without embarrassing flaws. Viewed over years and decades, progress in web browsers has been remarkable.\n\nTo paraphrase [Winston Churchill](https://winstonchurchill.org/resources/quotes/the-worst-form-of-government/), web browsers are the worst cross-platform application framework except for all the other ones that have been tried.\n\n",
				"date_published": "2024-10-07T10:19:27-07:00",
				"url": "https://therealadam.com/2024/10/07/hottakes-on-web.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/04/six-oneliners-on.html",
				"title": "Six one-liners on meetings",
				"content_html": "<ol>\n<li>Make a better meeting when you can, and the best of a meeting when you can’t.</li>\n<li>The choice to avoid holding a meeting may snowball into problems that require <em>even more meetings</em>.</li>\n<li>Ensure every meeting worth the person-time, assuming organizational dynamics allow for it.</li>\n<li>Recurring meetings have to <em>earn</em> their continued existence.</li>\n<li>Steer meetings away from sidebars, confusions, digressions, and distractions.</li>\n<li>Meeting are an opportunity to go deeper than documents and chats allow.</li>\n</ol>\n<p>Bonus: <a href=\"https://medium.com/@ElizAyer/meetings-are-the-work-9e429dde6aa3\">meetings are the work</a>.</p>\n",
				"content_text": "1. Make a better meeting when you can, and the best of a meeting when you can’t.\n2. The choice to avoid holding a meeting may snowball into problems that require _even more meetings_.\n3. Ensure every meeting worth the person-time, assuming organizational dynamics allow for it.\n4. Recurring meetings have to _earn_ their continued existence.\n5. Steer meetings away from sidebars, confusions, digressions, and distractions.\n6. Meeting are an opportunity to go deeper than documents and chats allow.\n\nBonus: [meetings are the work](https://medium.com/@ElizAyer/meetings-are-the-work-9e429dde6aa3).\n\n",
				"date_published": "2024-10-04T16:24:23-07:00",
				"url": "https://therealadam.com/2024/10/04/six-oneliners-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/10/03/pen-paper-and.html",
				"title": "Pen, paper, and a problem",
				"content_html": "<p>Ben Brooks, <a href=\"https://brooksreview.net/2024/09/thinking-analog/\">Thinking Analog</a>:</p>\n<blockquote>\n<p>The way this works is simple: use a notebook and a pen when you need to work through a problem of any kind.</p>\n<p>Not a tablet with a stylus. Not a notetaking app. Not a pencil. Paper and pen.</p>\n<p>…</p>\n<p>I typically juice the cycle by writing a heading, a date, or any one liner associated with what I want to think about to get things moving. From there the mess happens, scribbles and words. They are disjointed but reconfigured with arrows. In all of that, my thinking solidifies, and the idea takes hold.</p>\n</blockquote>\n<p>(via <a href=\"https://www.patrickrhone.net\">Patrick Rhone</a>)</p>\n<p>Endorsed! Apps, “tools for thought”, etc. are great – don’t get me wrong. But, we all contain multitudes.</p>\n<p>Some issues are well-defined and suited to computer-thinking. Other problems are wily and demand a hands-on approach. These thrive on “offline” thinking, gesturing to ourselves, thinking aloud, feeling the texture of paper, and engaged limited interaction modes (🤓).</p>\n<p>Previously, <a href=\"https://therealadam.com/2019/12/24/taking-notes-on.html\">taking notes on paper vs. glass</a>:</p>\n<blockquote>\n<p>The sensation &amp; constraint of paper still beats glass. There is something about the resistance, the scratch, of a good pen across a finite sheet of paper. It’s easier for me to write “well” (opinions on my penmanship vary) on paper than on glass; something about the permanence of the ink or that my eyes are considerably higher resolution than glass displays. Filling notebook after notebook over the years and decades is vastly fulfilling in a way digital notes and writing aren’t.</p>\n</blockquote>\n",
				"content_text": "Ben Brooks, [Thinking Analog](https://brooksreview.net/2024/09/thinking-analog/):\n\n> The way this works is simple: use a notebook and a pen when you need to work through a problem of any kind.\n> \n> Not a tablet with a stylus. Not a notetaking app. Not a pencil. Paper and pen.\n> \n> …\n> \n> I typically juice the cycle by writing a heading, a date, or any one liner associated with what I want to think about to get things moving. From there the mess happens, scribbles and words. They are disjointed but reconfigured with arrows. In all of that, my thinking solidifies, and the idea takes hold.\n\n(via [Patrick Rhone](https://www.patrickrhone.net))\n\nEndorsed! Apps, “tools for thought”, etc. are great – don’t get me wrong. But, we all contain multitudes.\n\nSome issues are well-defined and suited to computer-thinking. Other problems are wily and demand a hands-on approach. These thrive on “offline” thinking, gesturing to ourselves, thinking aloud, feeling the texture of paper, and engaged limited interaction modes (🤓).\n\nPreviously, [taking notes on paper vs. glass](https://therealadam.com/2019/12/24/taking-notes-on.html):\n\n> The sensation & constraint of paper still beats glass. There is something about the resistance, the scratch, of a good pen across a finite sheet of paper. It’s easier for me to write “well” (opinions on my penmanship vary) on paper than on glass; something about the permanence of the ink or that my eyes are considerably higher resolution than glass displays. Filling notebook after notebook over the years and decades is vastly fulfilling in a way digital notes and writing aren’t.\n\n",
				"date_published": "2024-10-03T09:04:16-07:00",
				"url": "https://therealadam.com/2024/10/03/pen-paper-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/30/every-day-edits.html",
				"title": "Every day counts (even edits)",
				"content_html": "<p>George Saunders, <em>A Swim in a Pond in the Rain</em>:</p>\n<blockquote>\n<p>&ldquo;What does an artist do, mostly? She tweaks that which she’s already done. There are those moments when we sit before a blank page, but mostly we’re adjusting what’s already there. The writer revises, the painter touches up, the director edits, the musician overdubs.&rdquo;</p>\n</blockquote>\n<p>I’m filing this one away for future reference when I’m feeling less-productive. Even if the day’s toil was tweaks, edits, rewrites, or failed rewrites, it <a href=\"https://jamesclear.com/stop-procrastinating-seinfeld-strategy\">checks the box</a>.</p>\n<p>Austin Kleon, <a href=\"https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/\">A Few Notes on Daily Blogging</a>:</p>\n<blockquote>\n<p>&ldquo;With blogging, I’m not so sure it’s about quantity as much as it’s about ​<em><strong>frequency</strong></em>​: for me, there’s something kind of magical about posting once a day. Good things happen. <a href=\"https://austinkleon.com/2013/12/29/something-small-every-day/\">Something small every day</a> leads to something big.&rdquo;</p>\n</blockquote>\n<p><em>But</em> also this! Frequency generates as much quality as does quantity. <a href=\"https://therealadam.com/2024/04/27/show-up-everydang.html\">Show up, every day</a>!</p>\n",
				"content_text": "George Saunders, _A Swim in a Pond in the Rain_:\n\n> \"What does an artist do, mostly? She tweaks that which she’s already done. There are those moments when we sit before a blank page, but mostly we’re adjusting what’s already there. The writer revises, the painter touches up, the director edits, the musician overdubs.\" \n\nI’m filing this one away for future reference when I’m feeling less-productive. Even if the day’s toil was tweaks, edits, rewrites, or failed rewrites, it [checks the box](https://jamesclear.com/stop-procrastinating-seinfeld-strategy).\n\nAustin Kleon, [A Few Notes on Daily Blogging](https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/):\n\n> \"With blogging, I’m not so sure it’s about quantity as much as it’s about ​***frequency***​: for me, there’s something kind of magical about posting once a day. Good things happen. [Something small every day](https://austinkleon.com/2013/12/29/something-small-every-day/) leads to something big.\" \n\n_But_ also this! Frequency generates as much quality as does quantity. [Show up, every day](https://therealadam.com/2024/04/27/show-up-everydang.html)!\n\n",
				"date_published": "2024-09-30T09:14:42-07:00",
				"url": "https://therealadam.com/2024/09/30/every-day-edits.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/23/jam-session.html",
				"title": "Jam session",
				"content_html": "<p><img src=\"https://therealadam.com/uploads/2024/cf76f50d23.png\" alt=\"\"></p>\n<p>At its best, social media is like jazz — there’s an improvisational, multi-player quality to it. Following threads, riffing, and quipping creates a collaborative rhythm all its own. I love that!</p>\n<p>Then, add in the “threaded style” of social media writing and thinking. There’s a give-and-take, a call-and-response. Ideas build on each other, it’s even more like jazz.</p>\n<p>Sometimes, riffs are refined via “collaborating with the network” to the point they become coherent, standalone ideas. And, like an <a href=\"https://en.wikipedia.org/wiki/A_Love_Supreme\">improvisation becoming a composition</a> <a href=\"https://en.wikipedia.org/wiki/Sketches_of_Spain\">unto itself</a>, they become standalone essays. Fantastic.</p>\n<p>Related: I miss <a href=\"https://vimeo.com/18640700\">Layer Tennis</a>.</p>\n<p>Related: <a href=\"https://therealadam.com/2024/09/18/jazz-as-cinematic.html\">jazz as cinematic universe</a>.</p>\n",
				"content_text": "![](https://therealadam.com/uploads/2024/cf76f50d23.png)\n\nAt its best, social media is like jazz — there’s an improvisational, multi-player quality to it. Following threads, riffing, and quipping creates a collaborative rhythm all its own. I love that!\n\nThen, add in the “threaded style” of social media writing and thinking. There’s a give-and-take, a call-and-response. Ideas build on each other, it’s even more like jazz.\n\nSometimes, riffs are refined via “collaborating with the network” to the point they become coherent, standalone ideas. And, like an [improvisation becoming a composition](https://en.wikipedia.org/wiki/A_Love_Supreme) [unto itself](https://en.wikipedia.org/wiki/Sketches_of_Spain), they become standalone essays. Fantastic.\n\nRelated: I miss [Layer Tennis](https://vimeo.com/18640700).\n\nRelated: [jazz as cinematic universe](https://therealadam.com/2024/09/18/jazz-as-cinematic.html).\n\n\n",
				"date_published": "2024-09-23T09:41:16-07:00",
				"url": "https://therealadam.com/2024/09/23/jam-session.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/22/all-roads-lead.html",
				"title": "All roads lead me to maximalism",
				"content_html": "<p>Within me are two musical opinions, constantly at tension.</p>\n<p><img src=\"https://therealadam.com/uploads/2024/maximalism-vs-minimalism.png\" alt=\"Maximalism grows to fill the space. Minimalism uses the same space, but directs all the attention at one element of the form.\"></p>\n<p>😇 “You can make pretty dang good music with only a few, excellent musicians. Sometimes, even pretty dang good <em>and</em> loud music.”</p>\n<p>🤵🏻‍♂️ “Look, if you want to make dang good <em>and</em> loud music, you’re gonna need a twenty-person band or a Mahler-sized orchestra, at least. Amplifiers and drum kits are crutches. The true path to volume of sound is volume of performers.”</p>\n",
				"content_text": "Within me are two musical opinions, constantly at tension.\n\n![Maximalism grows to fill the space. Minimalism uses the same space, but directs all the attention at one element of the form.](https://therealadam.com/uploads/2024/maximalism-vs-minimalism.png)\n\n😇 “You can make pretty dang good music with only a few, excellent musicians. Sometimes, even pretty dang good _and_ loud music.”\n\n🤵🏻‍♂️ “Look, if you want to make dang good _and_ loud music, you’re gonna need a twenty-person band or a Mahler-sized orchestra, at least. Amplifiers and drum kits are crutches. The true path to volume of sound is volume of performers.”\n\n",
				"date_published": "2024-09-22T11:20:00-07:00",
				"url": "https://therealadam.com/2024/09/22/all-roads-lead.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/21/lukewarm-water-on.html",
				"title": "Lukewarm water on a hot day",
				"content_html": "<p><img src=\"https://therealadam.com/uploads/2024/grandcalifornian-water.png\" alt=\"Would you believe I have a photo of a Disneyland pool taken in July of year-past?\"></p>\n<p>Henrik Karlsson, <a href=\"https://www.henrikkarlsson.xyz/p/swimming\">Swimming in July</a>:</p>\n<blockquote>\n<p>There is something so frivolous about water. It makes you float like you are in outer space! And no matter what you do—whatever shape you make of yourself—it will instantly fit itself around you!</p>\n<p>Water didn’t have to be this good.</p>\n<p>You forgot it for years while you lived in the city. But here it is: that one day in July when it storms but the water is lukewarm and you tumble inside the waves. You lose yourself in the sensation of being a body submerged in another body. Your back against the concrete pillar under the pier; the waves cresting, crashing over you—you can do this for hours.</p>\n</blockquote>\n<p>Nothing beats a soak, in a pool or otherwise, in the heat of July (and August).</p>\n<blockquote>\n<p>“Try jumping from the cliff over there,” the guard would say. “And then you shape yourself like a cannonball before you hit the surface.”</p>\n</blockquote>\n",
				"content_text": "![Would you believe I have a photo of a Disneyland pool taken in July of year-past?](https://therealadam.com/uploads/2024/grandcalifornian-water.png)\n\nHenrik Karlsson, [Swimming in July](https://www.henrikkarlsson.xyz/p/swimming):\n\n> There is something so frivolous about water. It makes you float like you are in outer space! And no matter what you do—whatever shape you make of yourself—it will instantly fit itself around you!\n> \n> Water didn’t have to be this good.\n> \n> You forgot it for years while you lived in the city. But here it is: that one day in July when it storms but the water is lukewarm and you tumble inside the waves. You lose yourself in the sensation of being a body submerged in another body. Your back against the concrete pillar under the pier; the waves cresting, crashing over you—you can do this for hours.\n\nNothing beats a soak, in a pool or otherwise, in the heat of July (and August).\n\n> “Try jumping from the cliff over there,” the guard would say. “And then you shape yourself like a cannonball before you hit the surface.”\n\n",
				"date_published": "2024-09-21T11:27:57-07:00",
				"url": "https://therealadam.com/2024/09/21/lukewarm-water-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/20/mind-the-attention.html",
				"title": "Mind the attention traps",
				"content_html": "<p>Alan Jacobs, <a href=\"https://blog.ayjay.org/the-homebound-symphony/\">The Homebound Symphony</a>:</p>\n<blockquote>\n<p>Station Eleven had the Traveling Symphony: I’m trying to be the Homebound Symphony. Just one person sitting in my study with a computer on my lap, reading and listening and viewing, and recording and sifting and transmitting – sharing the good, the true, and the beautiful, with added commentary. The initial purpose of this work is to repair, not the whole culture, but just my own attention. On a daily basis I retrain my mind to attend to what is worthy. It is the task of a lifetime, especially in an environment which strives constantly to commandeer my attention, to remove it from my control, to make me a passive consumer of what others wish me to look at or listen to.</p>\n</blockquote>\n<p>Take care to monitor your attention, especially regarding social media. It’s easy to get lost in nostalgia and repetitive feedback loops. Make sure that at least some of your influences – be they people, feeds, or algorithms — encourage a forward-looking, forward-thinking mindset. Otherwise, you risk stagnation, cycling through the same thoughts and experiences.</p>\n",
				"content_text": "Alan Jacobs, [The Homebound Symphony](https://blog.ayjay.org/the-homebound-symphony/):\n\n> Station Eleven had the Traveling Symphony: I’m trying to be the Homebound Symphony. Just one person sitting in my study with a computer on my lap, reading and listening and viewing, and recording and sifting and transmitting – sharing the good, the true, and the beautiful, with added commentary. The initial purpose of this work is to repair, not the whole culture, but just my own attention. On a daily basis I retrain my mind to attend to what is worthy. It is the task of a lifetime, especially in an environment which strives constantly to commandeer my attention, to remove it from my control, to make me a passive consumer of what others wish me to look at or listen to.\n\nTake care to monitor your attention, especially regarding social media. It’s easy to get lost in nostalgia and repetitive feedback loops. Make sure that at least some of your influences – be they people, feeds, or algorithms — encourage a forward-looking, forward-thinking mindset. Otherwise, you risk stagnation, cycling through the same thoughts and experiences.\n",
				"date_published": "2024-09-20T08:59:52-07:00",
				"url": "https://therealadam.com/2024/09/20/mind-the-attention.html",
				"tags": ["Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/18/jazz-as-cinematic.html",
				"title": "Jazz as cinematic universe",
				"content_html": "<p>I love when jazz album covers list all the players. Herbie Hancock! Your favorite drummer. A couple of sax players you think are pretty good. A bassist you&rsquo;ve never heard of!</p>\n<p><a href=\"https://music.apple.com/us/album/my-point-of-view-expanded-edition/724744263\"><img src=\"https://therealadam.com/uploads/2024/r-382497-1605398198-8737.jpeg-400633693.jpg\" alt=\"Album cover for &ldquo;My Point of View&rdquo; by Herbie Hancock. The design features a minimalist black and white background with a large black shape resembling a piano. A small figure of a man wearing glasses and holding his hand to his face is partially visible. The album title and artist&rsquo;s name are prominently displayed in colorful text, along with the names of other musicians.\"></a></p>\n<p>It&rsquo;s a bit like Marvel comic book covers: “Iron Man, okay I&rsquo;m interested. With Thor? Okay that works. Wolverine? And introducing an ‘Ant Man’? Okay what&rsquo;s going on here – I gotta know!”</p>\n<p>Jazz and comic books are more alike than you&rsquo;d expect. Both revolve around a densely connected cast of characters, epic story arcs, a few cash grabs, and some amazing cross-over events.</p>\n",
				"content_text": "I love when jazz album covers list all the players. Herbie Hancock! Your favorite drummer. A couple of sax players you think are pretty good. A bassist you've never heard of!\n\n[![Album cover for \"My Point of View\" by Herbie Hancock. The design features a minimalist black and white background with a large black shape resembling a piano. A small figure of a man wearing glasses and holding his hand to his face is partially visible. The album title and artist's name are prominently displayed in colorful text, along with the names of other musicians.](https://therealadam.com/uploads/2024/r-382497-1605398198-8737.jpeg-400633693.jpg)](https://music.apple.com/us/album/my-point-of-view-expanded-edition/724744263)\n\nIt's a bit like Marvel comic book covers: “Iron Man, okay I'm interested. With Thor? Okay that works. Wolverine? And introducing an ‘Ant Man’? Okay what's going on here – I gotta know!”\n\nJazz and comic books are more alike than you'd expect. Both revolve around a densely connected cast of characters, epic story arcs, a few cash grabs, and some amazing cross-over events.\n\n",
				"date_published": "2024-09-18T09:17:29-07:00",
				"url": "https://therealadam.com/2024/09/18/jazz-as-cinematic.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/13/wherein-the-old.html",
				"title": "Wherein this old dog learns new tricks",
				"content_html": "<p>I’m dabbling in building, again. I felt the energy of XOXO for nostalgia of a web of the past, making one’s own thing, and indulging in (socially good) weird whilst doing it.</p>\n<p>It’s been a while since I built a Rails app from scratch, and I don’t have a big, ambitious business plan to go with. So a blog seems like a fine place to start. 🙃🤷🏻‍♂️</p>\n<p>Vibes and observations follow.</p>\n<h2 id=\"document-style-editing-in-browsers-is-a-reality\">Document-style editing in browsers is a reality</h2>\n<p>I’m tinkering with <a href=\"https://prosemirror.net/\">ProseMirror</a> as an editor. I’m curious what setting a Very High-Quality bar looks like for an individual developer in late 2024. In short, it seems like document-style editing in web browsers (i.e., not Markdown or hobbled “click-to-style” editors) are close to table stakes for high-quality applications. There are many options out there, it’s probably time to get good (at one of them).</p>\n<p>The default for new Rails app is to use <a href=\"https://github.com/rails/importmap-rails\">import maps</a> for managing JavaScript dependencies. However, ProseMirror’s docs assume you’re using a bundler like <code>esbuild</code>. In particular, ProseMirror wants to import stylesheets into scope via JS <code>imports</code> and not CSS <code>@import</code>. AFAICT, importmap doesn’t gracefully bridge this gap. I’d love to be wrong about this!</p>\n<p>I considered using <a href=\"https://tiptap.dev\">TipTap</a> as a wrapper around ProseMirror. A few things put me off:</p>\n<ul>\n<li>I’m generally wary of open source and component systems with a pricing page. I want to build, not decipher plan structures. I’m not opposed to the phenomenon entirely, but I would rather not join the vanguard of using it either.</li>\n<li>I like the idea of going back to less build tooling for JS. But most of these component libraries, TipTap included, are React-centric. I’m not sure how to win here.</li>\n<li><em>Some</em> component libraries support React <em>and</em> Vue. My understanding is the latter doesn’t <em>always</em> require a build step. Again, I don’t know how to win here.</li>\n</ul>\n<h2 id=\"data-narratives\">Data narratives</h2>\n<p>I like the idea behind <a href=\"https://github.com/kaspth/oaken\">Oaken</a> as an object mother/fixtures replacement. In particular:</p>\n<ul>\n<li>Telling <em>stories</em> instead of describing isolated data is a winning pitch.</li>\n<li>Building upon Rails’ idea of seeds and using it for development <em>and</em> testing is worth trying!</li>\n<li>I don’t have any beefs with <a href=\"https://github.com/thoughtbot/factory_bot\">FactoryBot</a>, but Oaken imposes less syntax and only a slightly different mental model, which seems like progress.</li>\n</ul>\n<p><a href=\"https://ruby.social/@kaspth\">Kasper</a> is building a track record as a Rails developer with a <a href=\"https://therealadam.com/2024/08/27/associated-objects-are.html\">good sense of taste</a>!</p>\n<h2 id=\"i-like-class-less-css-frameworks\">I like class-less CSS frameworks</h2>\n<p>My CSS skills are “barely good enough”. I’d like to master Tailwind or CSS, in an ideal world. I like that idea better than carefully coding up a UI via Swift, in theory. In practice, I’m the ideal audience/user for <a href=\"https://andybrewer.github.io/mvp/\">mvp.css</a>. Write HTML that mostly makes sense, get on with the building. 🤷🏻‍♂️</p>\n<h2 id=\"markup\">Markup</h2>\n<p>I have forgotten so much about using ERB, Rails form helpers, and HTML together. 🤷🏻‍♂️</p>\n<hr>\n<p>That’s it, for now.</p>\n",
				"content_text": "I’m dabbling in building, again. I felt the energy of XOXO for nostalgia of a web of the past, making one’s own thing, and indulging in (socially good) weird whilst doing it.\n\nIt’s been a while since I built a Rails app from scratch, and I don’t have a big, ambitious business plan to go with. So a blog seems like a fine place to start. 🙃🤷🏻‍♂️\n\nVibes and observations follow.\n\n## Document-style editing in browsers is a reality\nI’m tinkering with [ProseMirror](https://prosemirror.net/) as an editor. I’m curious what setting a Very High-Quality bar looks like for an individual developer in late 2024. In short, it seems like document-style editing in web browsers (i.e., not Markdown or hobbled “click-to-style” editors) are close to table stakes for high-quality applications. There are many options out there, it’s probably time to get good (at one of them).\n\nThe default for new Rails app is to use [import maps](https://github.com/rails/importmap-rails) for managing JavaScript dependencies. However, ProseMirror’s docs assume you’re using a bundler like `esbuild`. In particular, ProseMirror wants to import stylesheets into scope via JS `imports` and not CSS `@import`. AFAICT, importmap doesn’t gracefully bridge this gap. I’d love to be wrong about this!\n\nI considered using [TipTap](https://tiptap.dev) as a wrapper around ProseMirror. A few things put me off:\n\n- I’m generally wary of open source and component systems with a pricing page. I want to build, not decipher plan structures. I’m not opposed to the phenomenon entirely, but I would rather not join the vanguard of using it either. \n- I like the idea of going back to less build tooling for JS. But most of these component libraries, TipTap included, are React-centric. I’m not sure how to win here.\n- _Some_ component libraries support React _and_ Vue. My understanding is the latter doesn’t _always_ require a build step. Again, I don’t know how to win here.\n\n## Data narratives\nI like the idea behind [Oaken](https://github.com/kaspth/oaken) as an object mother/fixtures replacement. In particular:\n\n- Telling _stories_ instead of describing isolated data is a winning pitch.\n- Building upon Rails’ idea of seeds and using it for development _and_ testing is worth trying!\n- I don’t have any beefs with [FactoryBot](https://github.com/thoughtbot/factory_bot), but Oaken imposes less syntax and only a slightly different mental model, which seems like progress.\n\n[Kasper](https://ruby.social/@kaspth) is building a track record as a Rails developer with a [good sense of taste](https://therealadam.com/2024/08/27/associated-objects-are.html)!\n\n## I like class-less CSS frameworks\nMy CSS skills are “barely good enough”. I’d like to master Tailwind or CSS, in an ideal world. I like that idea better than carefully coding up a UI via Swift, in theory. In practice, I’m the ideal audience/user for [mvp.css](https://andybrewer.github.io/mvp/). Write HTML that mostly makes sense, get on with the building. 🤷🏻‍♂️\n\n## Markup\nI have forgotten so much about using ERB, Rails form helpers, and HTML together. 🤷🏻‍♂️\n\n---- \nThat’s it, for now.\n\n",
				"date_published": "2024-09-13T08:20:36-07:00",
				"url": "https://therealadam.com/2024/09/13/wherein-the-old.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/11/on-founder-mode.html",
				"title": "On Founder Mode",
				"content_html": "<p><a href=\"https://paulgraham.com/foundermode.html\">Founder Mode</a>. The discourse (algorithm) demands we discuss it.</p>\n<p>My hot-take: the original article is, honestly, not PG’s best work and is best viewed as a jargon land-grab. That said, pointing to a blank space (fancy word: lacuna) and saying “there’s something missing here, and I have a name for whatever it is” is slightly productive. 🤷🏻‍♂️</p>\n<p>I’m a relieved that, so far, the discussion is about <em>execution</em> and thinking. It’s not about power dynamics and executive victimhood (🙄). Excessive org flattening, overloading managers with dozens of reports, and “efficiency” aren’t central to the discussion. Hopefully, those are forgotten trends of late 2022. 🤞🏻</p>\n<hr>\n<p><a href=\"https://tidyfirst.substack.com/p/the-founder-mode-tradeoff\">Kent Beck</a> points out that all leadership interventions on work-in-progress, from higher-status individuals in particular, yield a new mindset in which the team/startup operates. Neglect this <em>tradeoff</em> at your own peril. 👍🏻</p>\n<p><a href=\"https://randsinrepose.com/archives/words-on-founder-mode/\">Rands in Repose</a> focuses on the philosophy that leadership comes from <em>everywhere</em> in a startup. <em>Everyone</em> is accountable for improving the product and company__. The org chart and hierarchy are, to some extent, guidelines and not rules. 💪🏻</p>\n",
				"content_text": "[Founder Mode](https://paulgraham.com/foundermode.html). The discourse (algorithm) demands we discuss it. \n\nMy hot-take: the original article is, honestly, not PG’s best work and is best viewed as a jargon land-grab. That said, pointing to a blank space (fancy word: lacuna) and saying “there’s something missing here, and I have a name for whatever it is” is slightly productive. 🤷🏻‍♂️\n\nI’m a relieved that, so far, the discussion is about _execution_ and thinking. It’s not about power dynamics and executive victimhood (🙄). Excessive org flattening, overloading managers with dozens of reports, and “efficiency” aren’t central to the discussion. Hopefully, those are forgotten trends of late 2022. 🤞🏻\n\n---- \n\n[Kent Beck](https://tidyfirst.substack.com/p/the-founder-mode-tradeoff) points out that all leadership interventions on work-in-progress, from higher-status individuals in particular, yield a new mindset in which the team/startup operates. Neglect this _tradeoff_ at your own peril. 👍🏻\n\n[Rands in Repose](https://randsinrepose.com/archives/words-on-founder-mode/) focuses on the philosophy that leadership comes from _everywhere_ in a startup. _Everyone_ is accountable for improving the product and company__. The org chart and hierarchy are, to some extent, guidelines and not rules. 💪🏻\n\n",
				"date_published": "2024-09-11T09:10:12-07:00",
				"url": "https://therealadam.com/2024/09/11/on-founder-mode.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/09/how-i-write.html",
				"title": "How I write on the web, in 2024",
				"content_html": "<p>My approach to writing on the web in 2024:</p>\n<ul>\n<li>Write (to think, riff, share, or publish) every day.</li>\n<li>Post anything over about one hundred words to my blog. Don’t worry about scheduling, publish when it’s done.</li>\n<li>Every couple weeks, schedule up a bunch of social posts. Some of these are links to the blog posts from the past couple weeks. Many are ideas I haven’t figured out how to turn into longer posts <em>yet</em>.</li>\n<li>Every month or so, roll up all the stuff that went out to socials and blogs in a newsletter.</li>\n</ul>\n<hr>\n<p>Robin Sloan, <a href=\"https://snarkmarket.com/2010/4890/\">Stock and Flow</a>:</p>\n<blockquote>\n<p>You can tell that I want you to stop and think about stock here. I feel like we all got really good at flow, really fast. But flow is ephemeral, while stock sticks around. Stock is capital. Stock is protein.</p>\n<p>And the real magic trick is to put them both together. To keep the ball bouncing with your flow—to maintain that open channel of communication—while you work on some kick-ass stock in the background. Sacrifice neither. The hybrid strategy.</p>\n</blockquote>\n<p>Jim Nielsen, <a href=\"https://blog.jim-nielsen.com/2024/blog-vs-social-posts/\">Blog Posts vs. Social Posts</a>:</p>\n<blockquote>\n<p>Generally speaking, the attention you get with a good post on social media is like a firework: it can light up fast and burn bright, but just as fast it disappears.</p>\n<p>On the other hand, the attention you get from a good blog posts can be like a forest fire: it starts small but when it catches fire it rages for some time, burning longer and more intense than any firework.</p>\n</blockquote>\n<p>Matt Webb, <a href=\"https://interconnected.org/home/2020/09/10/streak\">15 rules for blogging</a>:</p>\n<blockquote>\n<p>Give up on trying to be popular. I try not to filter myself based on what I believe will be popular. Some of my favourite posts get ignored. Some posts get popular and I have no idea why. Besides, terrible posts get buried fast if I’m posting three times a week. So post with abandon.</p>\n<p>Give up on trying to be interesting. Readers will come to my site for what’s interesting to me, or not, it’s fine, just say what I think about whatever I’m thinking about.</p>\n</blockquote>\n",
				"content_text": "My approach to writing on the web in 2024:\n\n- Write (to think, riff, share, or publish) every day.\n- Post anything over about one hundred words to my blog. Don’t worry about scheduling, publish when it’s done.\n- Every couple weeks, schedule up a bunch of social posts. Some of these are links to the blog posts from the past couple weeks. Many are ideas I haven’t figured out how to turn into longer posts _yet_.\n- Every month or so, roll up all the stuff that went out to socials and blogs in a newsletter.\n\n---- \nRobin Sloan, [Stock and Flow](https://snarkmarket.com/2010/4890/):\n\n> You can tell that I want you to stop and think about stock here. I feel like we all got really good at flow, really fast. But flow is ephemeral, while stock sticks around. Stock is capital. Stock is protein.\n> \n> And the real magic trick is to put them both together. To keep the ball bouncing with your flow—to maintain that open channel of communication—while you work on some kick-ass stock in the background. Sacrifice neither. The hybrid strategy.\n\nJim Nielsen, [Blog Posts vs. Social Posts](https://blog.jim-nielsen.com/2024/blog-vs-social-posts/):\n\n> Generally speaking, the attention you get with a good post on social media is like a firework: it can light up fast and burn bright, but just as fast it disappears.\n> \n> On the other hand, the attention you get from a good blog posts can be like a forest fire: it starts small but when it catches fire it rages for some time, burning longer and more intense than any firework.\n\nMatt Webb, [15 rules for blogging](https://interconnected.org/home/2020/09/10/streak):\n\n> Give up on trying to be popular. I try not to filter myself based on what I believe will be popular. Some of my favourite posts get ignored. Some posts get popular and I have no idea why. Besides, terrible posts get buried fast if I’m posting three times a week. So post with abandon.\n> \n> Give up on trying to be interesting. Readers will come to my site for what’s interesting to me, or not, it’s fine, just say what I think about whatever I’m thinking about.\n\n",
				"date_published": "2024-09-09T08:26:08-07:00",
				"url": "https://therealadam.com/2024/09/09/how-i-write.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/04/less-waste-equal.html",
				"title": "Less waste, equal haste",
				"content_html": "<p>If you waste less time, you’ll make more stuff without increasing time outlays.</p>\n<ul>\n<li>Find more leverage, you&rsquo;ll make more stuff in the same amount of time</li>\n<li>Get better &amp; faster at a task, it will cost less, you can do more of it (see below)</li>\n<li>Figure out where anxiety, dawdling, etc. happen and how to bypass it; less wasted time, more fruitful time</li>\n</ul>\n<hr>\n<p>But don&rsquo;t eliminate waste. Or, deity forbid, margin.</p>\n<p>This isn’t about optimization and efficiency. There’s plenty of time to recapture from outright mis-use of time and space.</p>\n<p>Nor is it about reducing waste to zero. It’s difficult to tell the difference between waste, play, and escaping local maximums in the moment.</p>\n<hr>\n<p>Note to self: next time I’m tempted to get up just a little earlier or stick with work just a little later, ask myself what I did that was obviously a foolish use of resources.</p>\n<p>Squeeze shortcomings before squeezing schedules.</p>\n<hr>\n<p>James Somer, <a href=\"http://jsomers.net/blog/speed-matters\">Speed Matters: Why Working Quickly Is More Important Than It Seems</a></p>\n<blockquote>\n<p>“The obvious benefit to working quickly is that you’ll finish more stuff per unit time. But there’s more to it than that. If you work quickly, the cost of doing something new will seem lower in your mind. So you’ll be inclined to do more.&quot; (James Somers, Speed Matters: Why Working Quickly Is More Important Than It Seems)</p>\n</blockquote>\n<p>Dan Luu, <a href=\"https://danluu.com/productivity-velocity/\">Some reasons to work on productivity and velocity</a>:</p>\n<blockquote>\n<p>It&rsquo;s true that the gains from picking the right problem can be greater than the gains from having better tactical execution because the gains from picking the right problem can be unbounded, but it&rsquo;s also much easier to improve tactical execution and doing so also helps with picking the right problem because having faster execution lets you experiment more quickly, which helps you find the right problem.</p>\n</blockquote>\n<hr>\n<p>Author’s commentary track: this post started because the title was too great of a rhyme to go to waste. I would say that I did not write this with haste. Probably several weeks passed from writing down the turn of phrase to trying to make this a short post suitable for social media to deciding it was really a blog post and wrapping it up.</p>\n",
				"content_text": "If you waste less time, you’ll make more stuff without increasing time outlays.\n\n- Find more leverage, you'll make more stuff in the same amount of time\n- Get better & faster at a task, it will cost less, you can do more of it (see below)\n- Figure out where anxiety, dawdling, etc. happen and how to bypass it; less wasted time, more fruitful time \n\n---- \nBut don't eliminate waste. Or, deity forbid, margin.\n\nThis isn’t about optimization and efficiency. There’s plenty of time to recapture from outright mis-use of time and space.\n\nNor is it about reducing waste to zero. It’s difficult to tell the difference between waste, play, and escaping local maximums in the moment.\n\n---- \nNote to self: next time I’m tempted to get up just a little earlier or stick with work just a little later, ask myself what I did that was obviously a foolish use of resources.\n\nSqueeze shortcomings before squeezing schedules.\n\n---- \nJames Somer, [Speed Matters: Why Working Quickly Is More Important Than It Seems](http://jsomers.net/blog/speed-matters)\n\n> “The obvious benefit to working quickly is that you’ll finish more stuff per unit time. But there’s more to it than that. If you work quickly, the cost of doing something new will seem lower in your mind. So you’ll be inclined to do more.\" (James Somers, Speed Matters: Why Working Quickly Is More Important Than It Seems)\n\nDan Luu, [Some reasons to work on productivity and velocity](https://danluu.com/productivity-velocity/):\n\n> It's true that the gains from picking the right problem can be greater than the gains from having better tactical execution because the gains from picking the right problem can be unbounded, but it's also much easier to improve tactical execution and doing so also helps with picking the right problem because having faster execution lets you experiment more quickly, which helps you find the right problem.\n\n---- \nAuthor’s commentary track: this post started because the title was too great of a rhyme to go to waste. I would say that I did not write this with haste. Probably several weeks passed from writing down the turn of phrase to trying to make this a short post suitable for social media to deciding it was really a blog post and wrapping it up.\n\n",
				"date_published": "2024-09-04T11:26:06-07:00",
				"url": "https://therealadam.com/2024/09/04/less-waste-equal.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/09/03/letterbird-lovely.html",
				"title": "Letterbird, lovely",
				"content_html": "<p>Recently, I found myself in need of a contact form for my website. Luckily, I didn’t let myself fall to the temptation of rolling my own! 🙃</p>\n<p>My good enough pals at <a href=\"https://goodenough.us\">Good Enough</a> have built a modest little app just for this occasion, <a href=\"https://letterbird.co\">Letterbird</a>. It was super easy to sign up, set up my form, and <a href=\"https://therealadam.com/about/\">embed it</a> on my website. It does the one thing nicely and is delightful to use.</p>\n<p>I can’t emphasize this enough: it does the <em>one thing</em> and <em>is delightful</em>. It didn’t immediately encourage me to onboard my team, click through a guided tour, or immediately ask me to consider the generous discount of signing up for twelve months instead of one month.</p>\n<p>I just used the thing, solved my problem, and kept going. Recommended!</p>\n<p>Unrelated: I had to work really hard to write this so it doesn’t sound <em>entirely</em> like a podcast ad read. 🙃</p>\n",
				"content_text": "Recently, I found myself in need of a contact form for my website. Luckily, I didn’t let myself fall to the temptation of rolling my own! 🙃\n\nMy good enough pals at [Good Enough](https://goodenough.us) have built a modest little app just for this occasion, [Letterbird](https://letterbird.co). It was super easy to sign up, set up my form, and [embed it](https://therealadam.com/about/) on my website. It does the one thing nicely and is delightful to use.\n\nI can’t emphasize this enough: it does the _one thing_ and _is delightful_. It didn’t immediately encourage me to onboard my team, click through a guided tour, or immediately ask me to consider the generous discount of signing up for twelve months instead of one month.\n\nI just used the thing, solved my problem, and kept going. Recommended!\n\nUnrelated: I had to work really hard to write this so it doesn’t sound _entirely_ like a podcast ad read. 🙃\n\n\n",
				"date_published": "2024-09-03T18:34:26-07:00",
				"url": "https://therealadam.com/2024/09/03/letterbird-lovely.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/29/decision-and-context.html",
				"title": "Decision and context flows",
				"content_html": "<p>Commonly shared/held wisdom: leadership is flowing decisions down and information up. What if this is (slightly) untrue? Or at least, in need of contextualizing.</p>\n<p>Strategy, direction, and context are set by leadership teams based on intuitions, abstractions, and trailing and leading numbers.</p>\n<p>The bottom of the org chart has a far better idea of <em>how</em> to get things done than the top. And possibly, <em>what</em> to get done such that customers can succeed. This information _should_be passed up, but it’s not <em>not</em> decision-making.</p>\n<p>Seems to me there’s a disconnect and opportunity here for tactics to meet strategy. When things are going well, decisions are guided and informed, but rarely does the middle layer take decisions on its own, instead delegating to the team or below or leadership above. When ambiguity is ascendent and clarity or confidence wane, decisions <em>could</em> flow down.</p>\n<hr>\n<p>Contrary: information up, context down is the central conceptual model of middle management. <a href=\"https://jacobian.org/2021/apr/19/the-fundamental-purpose-of-middle-management/\">The Fundamental Purpose of Middle Management: Context Down, Information Up</a>:</p>\n<blockquote>\n<p>This brings us back to the fundamental job of middle management: <strong>push context down, and information up</strong>. The job of a middle manager is to gather as much information from your reports as possible, synthesize it, and pass it up to their manager. At the same time, they should be collecting as much context from their management chain and peers, and passing that important context back down the chain. If you’re a middle manager this should be your guiding principle.</p>\n</blockquote>\n<p>Context-down should provide a coherent backdrop for whatever steering of execution a manager does.</p>\n",
				"content_text": "Commonly shared/held wisdom: leadership is flowing decisions down and information up. What if this is (slightly) untrue? Or at least, in need of contextualizing.\n\nStrategy, direction, and context are set by leadership teams based on intuitions, abstractions, and trailing and leading numbers.\n\nThe bottom of the org chart has a far better idea of _how_ to get things done than the top. And possibly, _what_ to get done such that customers can succeed. This information _should_be passed up, but it’s not _not_ decision-making.\n\nSeems to me there’s a disconnect and opportunity here for tactics to meet strategy. When things are going well, decisions are guided and informed, but rarely does the middle layer take decisions on its own, instead delegating to the team or below or leadership above. When ambiguity is ascendent and clarity or confidence wane, decisions _could_ flow down.\n\n---- \nContrary: information up, context down is the central conceptual model of middle management. [The Fundamental Purpose of Middle Management: Context Down, Information Up](https://jacobian.org/2021/apr/19/the-fundamental-purpose-of-middle-management/):\n\n> This brings us back to the fundamental job of middle management: **push context down, and information up**. The job of a middle manager is to gather as much information from your reports as possible, synthesize it, and pass it up to their manager. At the same time, they should be collecting as much context from their management chain and peers, and passing that important context back down the chain. If you’re a middle manager this should be your guiding principle.\n\nContext-down should provide a coherent backdrop for whatever steering of execution a manager does.\n\n",
				"date_published": "2024-08-29T07:31:55-07:00",
				"url": "https://therealadam.com/2024/08/29/decision-and-context.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/27/associated-objects-are.html",
				"title": "Associated objects are promising",
				"content_html": "<p>Garrett Dimon, <a href=\"https://garrettdimon.com/journal/posts/organizing-rails-code-with-activerecord-associated-objects\">Organizing Rails Code with ActiveRecord Associated Objects</a>:</p>\n<blockquote>\n<p>At the simplest level, associated objects come in handy mostly by helping organize and compartmentalize related logic so we can better avoid the junk drawer or God object “patterns.” But that’s an over-simplification because the benefits can be almost invisible–it just disappears into the background and does its job.</p>\n</blockquote>\n<p><a href=\"https://github.com/kaspth/active_record-associated_object/tree/main\">Associated objects</a> have an excellent effort-to-benefit ratio. The implementation is less than a few hundred lines of code. The docs, which fit entirely in the readme, may outweigh the actual code! From that, you get a multipurpose and surprisingly deep tool for designing and modeling your system.</p>\n<p>I’m excited to tinker more with this one.</p>\n",
				"content_text": "Garrett Dimon, [Organizing Rails Code with ActiveRecord Associated Objects](https://garrettdimon.com/journal/posts/organizing-rails-code-with-activerecord-associated-objects):\n\n> At the simplest level, associated objects come in handy mostly by helping organize and compartmentalize related logic so we can better avoid the junk drawer or God object “patterns.” But that’s an over-simplification because the benefits can be almost invisible–it just disappears into the background and does its job.\n\n[Associated objects](https://github.com/kaspth/active_record-associated_object/tree/main) have an excellent effort-to-benefit ratio. The implementation is less than a few hundred lines of code. The docs, which fit entirely in the readme, may outweigh the actual code! From that, you get a multipurpose and surprisingly deep tool for designing and modeling your system.\n\nI’m excited to tinker more with this one.\n\n",
				"date_published": "2024-08-27T09:02:57-07:00",
				"url": "https://therealadam.com/2024/08/27/associated-objects-are.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/19/write-a-lot.html",
				"title": "Write a lot",
				"content_html": "<p>Nat Bennett, <a href=\"https://www.simplermachines.com/how-to-write/\">How to write</a>:</p>\n<blockquote>\n<ul>\n<li>Write a lot</li>\n<li>Just Write</li>\n<li>Read a lot</li>\n<li>Write every day</li>\n<li>Walk</li>\n<li>Have a time and a place for writing</li>\n<li>Take it less seriously</li>\n<li>Have an audience</li>\n</ul>\n</blockquote>\n<p>At least as good as any advice I’ve ever given!</p>\n<blockquote>\n<p>There’s lots of reasons that this works but I personally believe that writing is a mechanical skill as much as it is a mental one. Sometimes you just need to run a bunch of words through your writing engine — practice the whole process, from forming a sentence in your brain down to driving the motion of your fingers — to reduce the friction to a point where you can do “real” writing.</p>\n</blockquote>\n<p>As above for writing, so goes for any iterative, world-building creative activity. p.s. coding is an iterative activity wherein a world of thought-stuff is created (and sometimes checked against a computer by executing it and seeing if it all blows up.)</p>\n",
				"content_text": "Nat Bennett, [How to write](https://www.simplermachines.com/how-to-write/):\n\n> - Write a lot\n> - Just Write\n> - Read a lot\n> - Write every day\n> - Walk\n> - Have a time and a place for writing\n> - Take it less seriously\n> - Have an audience\n\n\nAt least as good as any advice I’ve ever given!\n\n> There’s lots of reasons that this works but I personally believe that writing is a mechanical skill as much as it is a mental one. Sometimes you just need to run a bunch of words through your writing engine — practice the whole process, from forming a sentence in your brain down to driving the motion of your fingers — to reduce the friction to a point where you can do “real” writing.\n\nAs above for writing, so goes for any iterative, world-building creative activity. p.s. coding is an iterative activity wherein a world of thought-stuff is created (and sometimes checked against a computer by executing it and seeing if it all blows up.)\n\n",
				"date_published": "2024-08-19T17:19:00-07:00",
				"url": "https://therealadam.com/2024/08/19/write-a-lot.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/17/this-is-not.html",
				"title": "This is not my beautiful role",
				"content_html": "<p>Ben Kuhn, <a href=\"https://www.benkuhn.net/leadcats/\">Categories of leadership on technical teams</a>:</p>\n<blockquote>\n<p>More importantly, though, we often want to somehow split these responsibilities between people. Team leadership covers a huge array of things—as you can see from how long this post is—and trying to find someone who can be great at all of them is often a unicorn hunt. Even if you do find someone good-enough at all of them, they usually spike in 1-2 areas, and it might be higher-leverage for them to fully focus on those.</p>\n</blockquote>\n<p>If you find yourself in a wholly new team, this might help you find your way to traction. If you find yourself confused by the (rapidly) changing nature of work and need to zoom out on the team/role you find yourself leading, this will help!</p>\n<p>Even if you’ve been in your job/team/organization for a while, to paraphrase <a href=\"https://www.youtube.com/watch?v=AINJTvRUk1w\">David Byrne</a>, “You may tell yourself, this is not the job I signed up for! / My god, have I have I done?”, in which case this mental model is <em>also</em> helpful. (And, good luck!)</p>\n",
				"content_text": "Ben Kuhn, [Categories of leadership on technical teams](https://www.benkuhn.net/leadcats/):\n\n> More importantly, though, we often want to somehow split these responsibilities between people. Team leadership covers a huge array of things—as you can see from how long this post is—and trying to find someone who can be great at all of them is often a unicorn hunt. Even if you do find someone good-enough at all of them, they usually spike in 1-2 areas, and it might be higher-leverage for them to fully focus on those.\n\nIf you find yourself in a wholly new team, this might help you find your way to traction. If you find yourself confused by the (rapidly) changing nature of work and need to zoom out on the team/role you find yourself leading, this will help!\n\nEven if you’ve been in your job/team/organization for a while, to paraphrase [David Byrne](https://www.youtube.com/watch?v=AINJTvRUk1w), “You may tell yourself, this is not the job I signed up for! / My god, have I have I done?”, in which case this mental model is _also_ helpful. (And, good luck!)\n\n",
				"date_published": "2024-08-17T16:18:33-07:00",
				"url": "https://therealadam.com/2024/08/17/this-is-not.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/11/methods-of-production.html",
				"title": "Methods of production",
				"content_html": "<p>Herein, a napkin sketch on producing creative work, ideas on finding the spark(s) that consistently lead us to assemble new things, and the hand-wavy stuff in-between.</p>\n<h2 id=\"production-is-connecting-the-dots\">Production is connecting the dots</h2>\n<p><img src=\"https://therealadam.com/uploads/2024/draggedimage.png\" alt=\"This essay, in early form. A little messy. Scribbles and marginalia were required to get the ideas together.\"></p>\n<p>Extensively, manically, collect ideas (i.e., dots). Collect ideas, put ‘em in order. This is the tricky-but-fun part!</p>\n<p>Boom, that’s something new! Like this essay. Collect, connect, write, post, again and again.</p>\n<p>Austin Kleon, <a href=\"https://austinkleon.com/2019/06/06/its-not-inside-you-trying-to-get-out-its-outside-you-trying-to-get-in/\">It’s not inside you trying to get out, it’s outside you trying to get in</a>:</p>\n<blockquote>\n<p>I never feel like I have a book in me. I always feel like there’s a book around me. It’s like I’m a planet and there’s all this space junk orbiting me, and all the junk starts smashing together and forming book chapters. My job is to grab that stuff around me and shape it into something.</p>\n</blockquote>\n<h2 id=\"production-is-making-_social_-connections\">Production is making <em>social</em> connections</h2>\n<p>So you’ve got a <a href=\"https://therealadam.com/2024/07/13/journal-highlight-revisit.html\">routine of journals and notes and active reading and such</a>. You’re turning those into blog posts and thinking <em>with</em> the network, right?</p>\n<p>In particular, using networked writing (hypertext, social media) as an attractor for ideas and likeminded folks. Repeatedly engaging with those folks until a <em>new</em>, boring status quo/local maximum is reached. Iterate and seek ever higher peaks.</p>\n<p>Tom Critchlow, <a href=\"https://tomcritchlow.com/2018/02/23/small-b-blogging/\">Small b blogging</a>:</p>\n<blockquote>\n<p>Small b blogging is learning to write and think with the network. Small b blogging is writing content designed for small deliberate audiences and showing it to them. Small b blogging is deliberately chasing interesting ideas over pageviews and scale. An attempt at genuine connection vs the gloss and polish and mass market of most “content marketing”.</p>\n</blockquote>\n<p>Henrik Karlsson, <a href=\"https://www.henrikkarlsson.xyz/p/search-query\">A blog post is a very long and complex search query to find fascinating people and make them route interesting stuff to your inbox</a>:</p>\n<blockquote>\n<p>The reason I’m spelling out this dynamic is twofold. First, you can get out of this mess if you want to. You do that by writing online (or publishing cool pieces of software, or videos, or whatever makes you tickle—as long as you work in public). Second, if you want to get out of the mess the key lies exactly in understanding that you are not the only person who has no one to talk to about the things you get obsessed by.</p>\n</blockquote>\n<h2 id=\"production-is-a-second-order-outcome-from-consumingreading\">Production is a second-order outcome from consuming/reading</h2>\n<p>Consider two sorts of people: “Really Into Notes” or simply “An Enjoyer of Reading”. Either way, making things and ideas comes from connecting an idea from what you read, enthusiasm for making, and the discipline to turn that enthusiasm into action. <em>How</em> and <em>what</em> you turn that action into is left as an exercise or implementation detail up to the reader.</p>\n<p>Andreas Fragner, <a href=\"https://www.andreasfragner.com/writing/writing-summaries\">Writing Summaries Is More Important Than Reading More Books</a>, if you’re a third kind, “Extremely Okay With Marking Up Your Objects”:</p>\n<blockquote>\n<p>One thing I’ve learned over time is to read fewer books but to take the time to write summaries for the good ones. The ROI of spending 2h writing a synopsis is much higher than spending those 2h powering through the next book on your list. Reading is not about page count or speed [1]. What matters is how it changes your thinking and what you take away from it. Optimize for comprehension, not volume.&quot;</p>\n</blockquote>\n<h2 id=\"production-is-doing-the-thing-you-cant-_not_-do-a-vocation\">Production is doing the thing you can’t <em>not</em> do, a vocation</h2>\n<p>Maybe it’s writing, but it’s cool if it’s not. Putting all these ideas together yields something <em>new</em> in the world, literal creativity. That calling, no matter the ambition or profitability or fruitfulness, is different for all of us. But we can all work the skills that support that creation.</p>\n<p>Jared Henderson, <a href=\"https://jaredhenderson.substack.com/p/ai-wont-replace-you-unless-you-let\">AI won&rsquo;t replace you, unless you let it</a>:</p>\n<blockquote>\n<p>Similarly, there are men and women for whom being an artist if their vocation. It is what they most suited to do. I believe that determining and pursuing your vocation – even if your vocation is not your job – is crucial for a good human life, because it puts work in its proper place. Work ceases to be toil when you are pursuing your vocation.</p>\n</blockquote>\n<hr>\n<p>Tools for thought are nothing without producing ideas and publishing them.</p>\n",
				"content_text": "Herein, a napkin sketch on producing creative work, ideas on finding the spark(s) that consistently lead us to assemble new things, and the hand-wavy stuff in-between.\n\n## Production is connecting the dots\n![This essay, in early form. A little messy. Scribbles and marginalia were required to get the ideas together.](https://therealadam.com/uploads/2024/draggedimage.png)\n\nExtensively, manically, collect ideas (i.e., dots). Collect ideas, put ‘em in order. This is the tricky-but-fun part! \n\nBoom, that’s something new! Like this essay. Collect, connect, write, post, again and again.\n\nAustin Kleon, [It’s not inside you trying to get out, it’s outside you trying to get in](https://austinkleon.com/2019/06/06/its-not-inside-you-trying-to-get-out-its-outside-you-trying-to-get-in/):\n\n> I never feel like I have a book in me. I always feel like there’s a book around me. It’s like I’m a planet and there’s all this space junk orbiting me, and all the junk starts smashing together and forming book chapters. My job is to grab that stuff around me and shape it into something.\n\n## Production is making _social_ connections\nSo you’ve got a [routine of journals and notes and active reading and such](https://therealadam.com/2024/07/13/journal-highlight-revisit.html). You’re turning those into blog posts and thinking _with_ the network, right?\n\nIn particular, using networked writing (hypertext, social media) as an attractor for ideas and likeminded folks. Repeatedly engaging with those folks until a _new_, boring status quo/local maximum is reached. Iterate and seek ever higher peaks.\n\nTom Critchlow, [Small b blogging](https://tomcritchlow.com/2018/02/23/small-b-blogging/): \n\n> Small b blogging is learning to write and think with the network. Small b blogging is writing content designed for small deliberate audiences and showing it to them. Small b blogging is deliberately chasing interesting ideas over pageviews and scale. An attempt at genuine connection vs the gloss and polish and mass market of most “content marketing”.\n\nHenrik Karlsson, [A blog post is a very long and complex search query to find fascinating people and make them route interesting stuff to your inbox](https://www.henrikkarlsson.xyz/p/search-query):\n\n> The reason I’m spelling out this dynamic is twofold. First, you can get out of this mess if you want to. You do that by writing online (or publishing cool pieces of software, or videos, or whatever makes you tickle—as long as you work in public). Second, if you want to get out of the mess the key lies exactly in understanding that you are not the only person who has no one to talk to about the things you get obsessed by.\n\n## Production is a second-order outcome from consuming/reading\nConsider two sorts of people: “Really Into Notes” or simply “An Enjoyer of Reading”. Either way, making things and ideas comes from connecting an idea from what you read, enthusiasm for making, and the discipline to turn that enthusiasm into action. _How_ and _what_ you turn that action into is left as an exercise or implementation detail up to the reader.\n\nAndreas Fragner, [Writing Summaries Is More Important Than Reading More Books](https://www.andreasfragner.com/writing/writing-summaries), if you’re a third kind, “Extremely Okay With Marking Up Your Objects”:\n\n> One thing I’ve learned over time is to read fewer books but to take the time to write summaries for the good ones. The ROI of spending 2h writing a synopsis is much higher than spending those 2h powering through the next book on your list. Reading is not about page count or speed [1]. What matters is how it changes your thinking and what you take away from it. Optimize for comprehension, not volume.\"\n\n## Production is doing the thing you can’t _not_ do, a vocation\nMaybe it’s writing, but it’s cool if it’s not. Putting all these ideas together yields something _new_ in the world, literal creativity. That calling, no matter the ambition or profitability or fruitfulness, is different for all of us. But we can all work the skills that support that creation.\n\nJared Henderson, [AI won't replace you, unless you let it](https://jaredhenderson.substack.com/p/ai-wont-replace-you-unless-you-let):\n\n> Similarly, there are men and women for whom being an artist if their vocation. It is what they most suited to do. I believe that determining and pursuing your vocation – even if your vocation is not your job – is crucial for a good human life, because it puts work in its proper place. Work ceases to be toil when you are pursuing your vocation.\n\n---- \nTools for thought are nothing without producing ideas and publishing them.\n\n",
				"date_published": "2024-08-11T16:15:38-07:00",
				"url": "https://therealadam.com/2024/08/11/methods-of-production.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/08/05/top-of-mind.html",
				"title": "Top of Mind No. 7",
				"content_html": "<p>It’s been so long since we spoke, <code>/now</code>-page aficionados.</p>\n<p>I’ve been moving to Portland, buying a house therein, and selling a house in a bizarre hyperlocal real estate situation. Some of these I have a lot of control over, some I am frustratingly very much in the passenger seat on.</p>\n<p>I’m still leading engineering teams holistically, acting true to “we can go further together than we can alone”, and writing about it (more for myself than others than I’d like).</p>\n<p>Some days, I’m just trying to ignore the recursive news screwball that is 2024.</p>\n<p>Actually, baseball is a fair metaphor here. It’s curveballs all the way down. I’m fouling off most of them, though. 🤷🏻‍♂️</p>\n",
				"content_text": "It’s been so long since we spoke, `/now`-page aficionados.\n\nI’ve been moving to Portland, buying a house therein, and selling a house in a bizarre hyperlocal real estate situation. Some of these I have a lot of control over, some I am frustratingly very much in the passenger seat on.\n\nI’m still leading engineering teams holistically, acting true to “we can go further together than we can alone”, and writing about it (more for myself than others than I’d like).\n\nSome days, I’m just trying to ignore the recursive news screwball that is 2024. \n\nActually, baseball is a fair metaphor here. It’s curveballs all the way down. I’m fouling off most of them, though. 🤷🏻‍♂️\n\n",
				"date_published": "2024-08-05T17:25:37-07:00",
				"url": "https://therealadam.com/2024/08/05/top-of-mind.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/30/hurry-up-and.html",
				"title": "Hurry up and whiff it",
				"content_html": "<p>There are things you can only learn by negative experience. In these cases, you just gotta go out there and suffer:</p>\n<ul>\n<li>Lose your first 50 games as soon as possible (Go proverb)</li>\n<li>Struggle through your first 50 interviews (hiring or seeking)</li>\n<li>Awkwardly run your first 50 meetings</li>\n<li>Flail at leading your first 50 projects</li>\n<li>Bomb your first 50 jokes</li>\n</ul>\n<p>I won’t keep you waiting or give you false confidence with a snappy conclusion. Get out there and make some mistakes!</p>\n",
				"content_text": "There are things you can only learn by negative experience. In these cases, you just gotta go out there and suffer:\n\n- Lose your first 50 games as soon as possible (Go proverb)\n- Struggle through your first 50 interviews (hiring or seeking)\n- Awkwardly run your first 50 meetings\n- Flail at leading your first 50 projects\n- Bomb your first 50 jokes\n\nI won’t keep you waiting or give you false confidence with a snappy conclusion. Get out there and make some mistakes!\n\n",
				"date_published": "2024-07-30T06:17:41-07:00",
				"url": "https://therealadam.com/2024/07/30/hurry-up-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/29/the-leadership-discipline.html",
				"title": "The (Leadership) Discipline",
				"content_html": "<p>Robert Fripp via Austin Kleon, <a href=\"https://austinkleon.substack.com/p/the-meaning-of-discipline\">The Meaning of Discipline</a>:</p>\n<blockquote>\n<p>The musician has three instruments: the hands, the head, and the heart, and each has its own discipline.</p>\n<p>So, the musician has three disciplines: the disciplines of the hands, the head and the heart.</p>\n<p>Ultimately, these are one discipline: discipline.</p>\n</blockquote>\n<p>Bear with me as I try to apply this lively metaphor of emotion and musical creativity to dry-and-boring engineering leadership<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>.</p>\n<p>The leader’s hands gesticulate, often for the aid of the speaker more than the listener. Sometimes, the hands conduct the thoughts to written words through the keyboard. Not too dissimilar from a musician’s hands through which, crucial for (most) musicians to make their sound, but equally a bit of flair.</p>\n<p>The head thinks, and overthinks. Sees patterns and connects the dots. Listens to what people say and answers their questions directly and honestly. Is convinced it sees patterns in randomness, or that folks are hearing and understanding a message that they find confusing but don’t know how to address the issue.</p>\n<p>The heart, for the leader, is there to mediate the head. There are other <em>people</em> on the other side of the decisions and decrees leaders make. A process or strategy is only good if it does right by those carrying it out.</p>\n<blockquote>\n<p>Discipline is our capacity to make a commitment in time.</p>\n</blockquote>\n<p>Discipline, in leadership, is to make a decision and then support the people executing that decision. All the while, seeking new information by which you might update, revise, or set the decision aside, if necessary.</p>\n<blockquote>\n<p>To have sitzfleisch means the ability to sit still for the long periods of time required to be truly productive; it means the stamina to work through a difficult situation and see a project through to the end.</p>\n</blockquote>\n<p>✋🏻 management by walking around</p>\n<p>👉🏻 leadership by sitting down<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup> and engaging with the people doing the work</p>\n<p>Even better: leadership by sustaining long period of assimilating what the team and meetings are telling you into a slightly better way of working. And sometimes, memos and slides, etc to send out and socialize ideas for you.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>The best leadership fades into the background of a larger creative act. The worst leadership throws off drama like sparks off a racecar.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p><a href=\"https://ruby.social/@therealadam/112321601232650591\">Butts-in-chairs</a> of management: it matters!&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Robert Fripp via Austin Kleon, [The Meaning of Discipline](https://austinkleon.substack.com/p/the-meaning-of-discipline):\n\n> The musician has three instruments: the hands, the head, and the heart, and each has its own discipline.\n> \n> So, the musician has three disciplines: the disciplines of the hands, the head and the heart.\n> \n> Ultimately, these are one discipline: discipline.\n\nBear with me as I try to apply this lively metaphor of emotion and musical creativity to dry-and-boring engineering leadership[^1].\n\nThe leader’s hands gesticulate, often for the aid of the speaker more than the listener. Sometimes, the hands conduct the thoughts to written words through the keyboard. Not too dissimilar from a musician’s hands through which, crucial for (most) musicians to make their sound, but equally a bit of flair.\n\nThe head thinks, and overthinks. Sees patterns and connects the dots. Listens to what people say and answers their questions directly and honestly. Is convinced it sees patterns in randomness, or that folks are hearing and understanding a message that they find confusing but don’t know how to address the issue.\n\nThe heart, for the leader, is there to mediate the head. There are other _people_ on the other side of the decisions and decrees leaders make. A process or strategy is only good if it does right by those carrying it out.\n\n> Discipline is our capacity to make a commitment in time.\n\nDiscipline, in leadership, is to make a decision and then support the people executing that decision. All the while, seeking new information by which you might update, revise, or set the decision aside, if necessary.\n\n> To have sitzfleisch means the ability to sit still for the long periods of time required to be truly productive; it means the stamina to work through a difficult situation and see a project through to the end.\n\n✋🏻 management by walking around\n\n👉🏻 leadership by sitting down[^2] and engaging with the people doing the work\n\nEven better: leadership by sustaining long period of assimilating what the team and meetings are telling you into a slightly better way of working. And sometimes, memos and slides, etc to send out and socialize ideas for you. \n\n[^1]:\tThe best leadership fades into the background of a larger creative act. The worst leadership throws off drama like sparks off a racecar.\n\n[^2]:\t[Butts-in-chairs](https://ruby.social/@therealadam/112321601232650591) of management: it matters!\n",
				"date_published": "2024-07-29T19:25:11-07:00",
				"url": "https://therealadam.com/2024/07/29/the-leadership-discipline.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/14/diff-a-top.html",
				"title": "diff, a top-5 software tool",
				"content_html": "<p>Mike Hoye, <a href=\"https://exple.tive.org/blarg/2024/06/14/fifty-years-of-diff-and-merge/\">Fifty Years of Diff</a>:</p>\n<blockquote>\n<p>My friend Greg Wilson has argued, and I absolutely believe, that you can divide the entire computational universe into who has diff and patch, and who doesn’t. It’s the seed crystal of all workable open collaboration, and people living without it don’t even have the language to recognize how bad they’ve got it.</p>\n<p>Re:re:RE:DRAFT-draft-V7-FINAL-FINAL2.doc is just no way to live, and if you live in word processors, spreadsheets, slides, art, anything without diff and patch you’re definitely feeling this pain, even if you don’t have a term for it.</p>\n</blockquote>\n<p>Yep. <code>diff</code>, along with its trusty companion <code>patch</code> is a developer superpower. (Even though <code>patch</code> came 10 years later, apparently, TIL.)</p>\n<p><code>diff</code> made source control possible, so I have to think it’s in the top 5 accelerants to software development of all time<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. Let alone using <code>diff</code> or <code>patch</code> under the hood in systems to move changes around.</p>\n<p>Even the concept of diff is a big deal!</p>\n<p>Part of the superpower of being a developer is the idea that you can analyze two pieces of data with a common lineage, extract the changes, and work with/reason about the <em>changes</em> as first-class data. Were it only that more non-developer tools had this capability!</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>I have no idea how to quantify this 🤷🏻‍♂️&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Mike Hoye, [Fifty Years of Diff](https://exple.tive.org/blarg/2024/06/14/fifty-years-of-diff-and-merge/):\n\n> My friend Greg Wilson has argued, and I absolutely believe, that you can divide the entire computational universe into who has diff and patch, and who doesn’t. It’s the seed crystal of all workable open collaboration, and people living without it don’t even have the language to recognize how bad they’ve got it.\n> \n> Re:re:RE:DRAFT-draft-V7-FINAL-FINAL2.doc is just no way to live, and if you live in word processors, spreadsheets, slides, art, anything without diff and patch you’re definitely feeling this pain, even if you don’t have a term for it.\n\nYep. `diff`, along with its trusty companion `patch` is a developer superpower. (Even though `patch` came 10 years later, apparently, TIL.)\n\n`diff` made source control possible, so I have to think it’s in the top 5 accelerants to software development of all time[^1]. Let alone using `diff` or `patch` under the hood in systems to move changes around.\n\nEven the concept of diff is a big deal!\n\nPart of the superpower of being a developer is the idea that you can analyze two pieces of data with a common lineage, extract the changes, and work with/reason about the _changes_ as first-class data. Were it only that more non-developer tools had this capability!\n\n[^1]:\tI have no idea how to quantify this 🤷🏻‍♂️\n",
				"date_published": "2024-07-14T13:10:31-07:00",
				"url": "https://therealadam.com/2024/07/14/diff-a-top.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/13/journal-highlight-revisit.html",
				"title": "Journal, highlight, revisit, blog",
				"content_html": "<p>Writing from notes is a bootstrapping problem. Anything you can do to get started, overcome static friction, and “defeat” the first blank canvas is the best thing you can do.</p>\n<p>I started with journaling. Don’t worry about the quality or quantity — yet. Just write. Start with recollections of your day(s) and branch out from there.</p>\n<p>There is a trough of despair, at some point. It may feel like you’re just writing into a void. Don’t reach for a “crushing your notes” course on YouTube. You’re writing now, it’s not unusual for it to take a moment (days, even weeks) to click.</p>\n<hr>\n<p>Next, I started reading <em>actively</em> and <em>taking highlights</em>. Tools don’t matter here. The outcomes you’re looking for are 1) getting more out of the reading than if you didn’t mark the passages that grab you, 2) coming back to the good stuff later. It’s nice that highlighting, even on mouse-and-keyboard computers, gets your hands moving and involved in the reading process.</p>\n<p>Once I crested about a hundred notes/journals/highlights/etc., the next level was resurfacing past notes and revisiting/rewriting/reworking. I use random resurfacing of notes<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>, “on-this-day” resurfacing of journals<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>, and spaced repetition of highlights via Readwise. These generate insight, nostalgia, and (sometimes) the spark to connect the dots of enough ideas that a new draft comes into existence. That’s a big win! Honestly, even writing up a new note connecting some older notes or highlights feels like the system is working _for _me.</p>\n<p>On a great day, the combination of resurfacing mechanisms and a bit of luck leads “a perfect post”. That is, one that connects old insights to new ideas, a quote that backs up the new insight, and a recently generated idea that ties it all together delightfully<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>.</p>\n<hr>\n<p>Now I had a compounding loop of making new stuff (journals) and revisiting old stuff (highlights). Time to look for connections between them, and notice how the quality of the more recent stuff is improving over the older stuff. The temptation, particularly in a world of influencer media on note-taking<sup id=\"fnref:4\"><a href=\"#fn:4\" class=\"footnote-ref\" role=\"doc-noteref\">4</a></sup>, is to get a Big System to Lead You Right To The Big Connections in Your Thoughts. You don’t need that, you’ve got one sizzling away in your noggin, right now.</p>\n<p>The revisiting and revising and rewriting is how you end up making the connections. The last generic tool I’ll recommend here is a good-old blog. For me, the insights and connections first came to me in short form, link posts and asides<sup id=\"fnref:5\"><a href=\"#fn:5\" class=\"footnote-ref\" role=\"doc-noteref\">5</a></sup> if you will. Over time, my insights grew into a ton of notes, journals, and some short-to-medium length<sup id=\"fnref:6\"><a href=\"#fn:6\" class=\"footnote-ref\" role=\"doc-noteref\">6</a></sup> writing on this blog.</p>\n<p>In other words, what you require is not just a blog, but a blogging habit. Not just a journal, but a journaling habit. Not just the desire to connect the dots, see your ideas compound, and point proudly at a volume of work, but the habit to make all those things happen.</p>\n<hr>\n<p>Possible next levels in my process, use the blog:</p>\n<ul>\n<li>as an iterative series of first drafts (see <a href=\"https://interconnected.org/home/2020/09/10/streak\">15 rules for blogging</a>) <em>and</em></li>\n<li>as a way to figure out _what I think_by writing my way through it.</li>\n<li>worrying less about writing down what I already know<sup id=\"fnref:7\"><a href=\"#fn:7\" class=\"footnote-ref\" role=\"doc-noteref\">7</a></sup></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Via an Obsidian plugin&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>This is surprisingly unique to DayOne and the reason I have several thousand entries over multiple decades&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>In case you hadn’t noticed, this format is basically my blogging “show bible”.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:4\" role=\"doc-endnote\">\n<p>What an improbable sentence to write in 2024. In 2004 it would have been appropriate to question the meaning of every word in this utterance.&#160;<a href=\"#fnref:4\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:5\" role=\"doc-endnote\">\n<p>The idea of different <em>kinds</em> of posts, that not everything had to be an essay or story or article, was one of my favorite ideas, possibly still the best one, from the original Tumblr.&#160;<a href=\"#fnref:5\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:6\" role=\"doc-endnote\">\n<p>I wish I was a long-form, novel-length writer. Up to this point, I am not.&#160;<a href=\"#fnref:6\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:7\" role=\"doc-endnote\">\n<p>rhymes with content marketing, oddly enough&#160;<a href=\"#fnref:7\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Writing from notes is a bootstrapping problem. Anything you can do to get started, overcome static friction, and “defeat” the first blank canvas is the best thing you can do.\n\nI started with journaling. Don’t worry about the quality or quantity — yet. Just write. Start with recollections of your day(s) and branch out from there.\n\nThere is a trough of despair, at some point. It may feel like you’re just writing into a void. Don’t reach for a “crushing your notes” course on YouTube. You’re writing now, it’s not unusual for it to take a moment (days, even weeks) to click.\n\n---- \nNext, I started reading _actively_ and _taking highlights_. Tools don’t matter here. The outcomes you’re looking for are 1) getting more out of the reading than if you didn’t mark the passages that grab you, 2) coming back to the good stuff later. It’s nice that highlighting, even on mouse-and-keyboard computers, gets your hands moving and involved in the reading process.\n\nOnce I crested about a hundred notes/journals/highlights/etc., the next level was resurfacing past notes and revisiting/rewriting/reworking. I use random resurfacing of notes[^1], “on-this-day” resurfacing of journals[^2], and spaced repetition of highlights via Readwise. These generate insight, nostalgia, and (sometimes) the spark to connect the dots of enough ideas that a new draft comes into existence. That’s a big win! Honestly, even writing up a new note connecting some older notes or highlights feels like the system is working _for _me.\n\nOn a great day, the combination of resurfacing mechanisms and a bit of luck leads “a perfect post”. That is, one that connects old insights to new ideas, a quote that backs up the new insight, and a recently generated idea that ties it all together delightfully[^3].\n\n---- \nNow I had a compounding loop of making new stuff (journals) and revisiting old stuff (highlights). Time to look for connections between them, and notice how the quality of the more recent stuff is improving over the older stuff. The temptation, particularly in a world of influencer media on note-taking[^4], is to get a Big System to Lead You Right To The Big Connections in Your Thoughts. You don’t need that, you’ve got one sizzling away in your noggin, right now.\n\nThe revisiting and revising and rewriting is how you end up making the connections. The last generic tool I’ll recommend here is a good-old blog. For me, the insights and connections first came to me in short form, link posts and asides[^5] if you will. Over time, my insights grew into a ton of notes, journals, and some short-to-medium length[^6] writing on this blog. \n\nIn other words, what you require is not just a blog, but a blogging habit. Not just a journal, but a journaling habit. Not just the desire to connect the dots, see your ideas compound, and point proudly at a volume of work, but the habit to make all those things happen.\n\n---- \nPossible next levels in my process, use the blog:\n\n- as an iterative series of first drafts (see [15 rules for blogging](https://interconnected.org/home/2020/09/10/streak)) _and_\n- as a way to figure out _what I think_by writing my way through it.\n- worrying less about writing down what I already know[^7]\n\n[^1]:\tVia an Obsidian plugin\n\n[^2]:\tThis is surprisingly unique to DayOne and the reason I have several thousand entries over multiple decades\n\n[^3]:\tIn case you hadn’t noticed, this format is basically my blogging “show bible”.\n\n[^4]:\tWhat an improbable sentence to write in 2024. In 2004 it would have been appropriate to question the meaning of every word in this utterance.\n\n[^5]:\tThe idea of different _kinds_ of posts, that not everything had to be an essay or story or article, was one of my favorite ideas, possibly still the best one, from the original Tumblr.\n\n[^6]:\tI wish I was a long-form, novel-length writer. Up to this point, I am not.\n\n[^7]:\trhymes with content marketing, oddly enough\n",
				"date_published": "2024-07-13T15:02:47-07:00",
				"url": "https://therealadam.com/2024/07/13/journal-highlight-revisit.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/08/slash-pages-microfeatures.html",
				"title": "Slash pages \u0026 micro-features",
				"content_html": "<p><a href=\"https://slashpages.net\">Slash pages</a>:</p>\n<blockquote>\n<p>…are common pages you can add to your website, usually with a standard, root-level slug like /now, /about, or /uses. They tend to describe the individual behind the site and are distinguishing characteristics of the IndieWeb.</p>\n</blockquote>\n<p>This sort of thing is what makes personal/humane-scale websites the greatest. So many adventures to choose from!</p>\n<p>My favorites, already in place here:</p>\n<ul>\n<li><a href=\"https://therealadam.com/about/\">/about</a> – “a page all about you”</li>\n<li><a href=\"https://therealadam.com/blogroll/\">/blogroll</a> – “a list of other sites that you read, are a follower of, or recommend”</li>\n</ul>\n<p>And the ones I need to get off my butt and implement:</p>\n<ul>\n<li>/uses – “details of the things you use on a daily basis”</li>\n<li>/colophon – “a page that describes how the site is made, with what tools, supporting what technologies”</li>\n<li>/hello – “a single page listing the ways that you prefer to keep in touch”</li>\n<li>/now – “a page that tells you what this person is focused on at this point in their life”</li>\n</ul>\n<p>Adjacent: <a href=\"https://danilafe.com/blog/blog_microfeatures/\">Microfeatures I Love in Blogs and Personal Websites</a>.</p>\n",
				"content_text": "[Slash pages](https://slashpages.net):\n\n> …are common pages you can add to your website, usually with a standard, root-level slug like /now, /about, or /uses. They tend to describe the individual behind the site and are distinguishing characteristics of the IndieWeb.\n\nThis sort of thing is what makes personal/humane-scale websites the greatest. So many adventures to choose from! \n\nMy favorites, already in place here:\n\n- [/about](https://therealadam.com/about/) – “a page all about you”\n- [/blogroll](https://therealadam.com/blogroll/) – “a list of other sites that you read, are a follower of, or recommend”\n\nAnd the ones I need to get off my butt and implement:\n\n- /uses – “details of the things you use on a daily basis”\n- /colophon – “a page that describes how the site is made, with what tools, supporting what technologies”\n- /hello – “a single page listing the ways that you prefer to keep in touch”\n- /now – “a page that tells you what this person is focused on at this point in their life”\n\nAdjacent: [Microfeatures I Love in Blogs and Personal Websites](https://danilafe.com/blog/blog_microfeatures/).\n\n\n",
				"date_published": "2024-07-08T17:25:34-07:00",
				"url": "https://therealadam.com/2024/07/08/slash-pages-microfeatures.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/06/constraints-generate-style.html",
				"title": "Constraints generate style",
				"content_html": "<p>Steph Ango, <a href=\"https://stephango.com/style\">Style is consistent constraint</a>:</p>\n<blockquote>\n<p>&ldquo;Collect constraints you enjoy. Unusual constraints make things more fun. You can always change them later. This is <em>your</em> style, after all. It’s not a life commitment, it’s just the way you do things. For now.</p>\n</blockquote>\n<p><em>Your</em> constraints generate <em>your</em> style. 🧠</p>\n",
				"content_text": "Steph Ango, [Style is consistent constraint](https://stephango.com/style):\n\n> \"Collect constraints you enjoy. Unusual constraints make things more fun. You can always change them later. This is *your* style, after all. It’s not a life commitment, it’s just the way you do things. For now.\n\n_Your_ constraints generate _your_ style. 🧠\n\n",
				"date_published": "2024-07-06T12:24:51-07:00",
				"url": "https://therealadam.com/2024/07/06/constraints-generate-style.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/06/i-switched-notes.html",
				"title": "I switched notes apps (and back) (again) (and here’s what I learned)",
				"content_html": "<p>Yet again, the grass was not greener. I did learn a little more of simplicity-by-reduction. I asked myself, what Obsidian plugins or idioms am I using because someone else seemed to benefit a lot from it? Then I stopped using the ones that weren’t actually doing much <em>for me</em>. 💪🏻</p>\n<p>I don’t need daily notes. That’s for the journal, which happens elsewhere. Daily notes might actually make my note-writing worse because I’m not above a perfunctory streak-preserving note.</p>\n<p>It might even be the case that Muse is the right connecting-the-dots notes tool for me and Obsidian is more like a long-term <em>development</em> tool for preserving, archiving, and evolving ideas. 🧠</p>\n<p>One of Obsidian’s advantages is the data is not opaque, its files in folders. I should use Finder more! It’s very good for dragging files around and considering organizational hierarchies. 🤷🏻‍♂️</p>\n<p>I thought just buying Bear (it’s not expensive!) would cut the envy knot. It sorta did, so that was nice for about a day. Then, almost immediately afterward, I caught word that Obsidian’s previously-vague “mobile improvements roadmap” turned out to be “improved load-time” which is half of what I wanted. Timing is everything, folks! That said, native macOS/iOS apps are just <em>excellent</em> and I hope the Obsidian developers can close that gap.</p>\n<p>As far as how to use Obsidian without getting nerd sniped: <a href=\"https://macwright.com/2024/06/16/how-i-use-obsidian.html\">Tom MacWright</a> and <a href=\"https://mattstein.com/thoughts/how-i-use-obsidian/\">Matt Stein</a> have the right idea. At least, not <em>too</em> nerd sniped. 🤦🏻‍♂️</p>\n",
				"content_text": "Yet again, the grass was not greener. I did learn a little more of simplicity-by-reduction. I asked myself, what Obsidian plugins or idioms am I using because someone else seemed to benefit a lot from it? Then I stopped using the ones that weren’t actually doing much _for me_. 💪🏻\n\nI don’t need daily notes. That’s for the journal, which happens elsewhere. Daily notes might actually make my note-writing worse because I’m not above a perfunctory streak-preserving note. \n\nIt might even be the case that Muse is the right connecting-the-dots notes tool for me and Obsidian is more like a long-term _development_ tool for preserving, archiving, and evolving ideas. 🧠\n\nOne of Obsidian’s advantages is the data is not opaque, its files in folders. I should use Finder more! It’s very good for dragging files around and considering organizational hierarchies. 🤷🏻‍♂️\n\nI thought just buying Bear (it’s not expensive!) would cut the envy knot. It sorta did, so that was nice for about a day. Then, almost immediately afterward, I caught word that Obsidian’s previously-vague “mobile improvements roadmap” turned out to be “improved load-time” which is half of what I wanted. Timing is everything, folks! That said, native macOS/iOS apps are just _excellent_ and I hope the Obsidian developers can close that gap.\n\nAs far as how to use Obsidian without getting nerd sniped: [Tom MacWright](https://macwright.com/2024/06/16/how-i-use-obsidian.html) and [Matt Stein](https://mattstein.com/thoughts/how-i-use-obsidian/) have the right idea. At least, not _too_ nerd sniped. 🤦🏻‍♂️\n\n",
				"date_published": "2024-07-06T11:23:50-07:00",
				"url": "https://therealadam.com/2024/07/06/i-switched-notes.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/07/04/corporate-stories.html",
				"title": "Corporate stories",
				"content_html": "<p>Should internal narratives, and the philosophies they generate, be among the guarded proprietary info within a company<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>? The stories the company tells <em>the outside world</em> are more about marketing and serving a purpose. Not those stories.</p>\n<p>In particular, the stories the company tells <em>itself</em> to generate the culture and conditions for its success (or not). How it <em>really</em> happened, and what does that mean for where the company is now? They’re not exactly running to the press to tell the story<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>.</p>\n<p>Te scar tissue, what caused it, how that&rsquo;s reflected in the process today? That’s guarded info, not eagerly shared in blog posts and conference talks. At least, not the <em>entire</em> truth.</p>\n<hr>\n<p>Granted, many stories are used for building an image and marketing. To investors, competitors, potential hires, professional communities, etc. Or even to help teams internalize the purpose and goal of what they’re building <em>today</em>.</p>\n<p>There&rsquo;s a term for the people who&rsquo;ve been around to witness these events and craft these stories — the old guard. They&rsquo;re <em>almost</em> literally guarding the stories or narrative, but also guarding the way of working that made those stories a success.</p>\n<p>These stories are often divorced from the reality of how the much bigger company now operates!</p>\n<hr>\n<p>Narrative is powerful. Makes sense to guard it<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>. Both for alignment, but also for preserving myths that hold that purpose up. Myths that come from true stories. Myths that were constructed/embellished for marketing or aiming throughout the company&rsquo;s existence.</p>\n<p>Tall tales and fables by the campfire: now for corporations, too!</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Depending on the company, losing this information is a crisis, possibly existentially:</p>\n<ol>\n<li>\n<p>Data, esp. customer lists</p>\n</li>\n<li>\n<p>Source code</p>\n</li>\n<li>\n<p>How it really happened/what that means</p>\n</li>\n</ol>\n<p>Surprisingly, not all of this has the best access control. Most companies choose productivity over secrecy. Theories of friction, agency, and <a href=\"https://www.economist.com/schools-brief/2017/07/28/coases-theory-of-the-firm\">firms</a> being what they are, etc.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>e.g. Musk would very much like everyone to forget he didn&rsquo;t start Tesla.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>Hence, how far venture capitalists and cryptocurrency/AI/hype-cycle founders will go to nudge narratives to suit their needs and away from what the technology actually does, cannot do, or is intended to do.&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Should internal narratives, and the philosophies they generate, be among the guarded proprietary info within a company[^1]? The stories the company tells _the outside world_ are more about marketing and serving a purpose. Not those stories. \n\nIn particular, the stories the company tells _itself_ to generate the culture and conditions for its success (or not). How it _really_ happened, and what does that mean for where the company is now? They’re not exactly running to the press to tell the story[^2].\n\nTe scar tissue, what caused it, how that's reflected in the process today? That’s guarded info, not eagerly shared in blog posts and conference talks. At least, not the _entire_ truth.\n\n---- \nGranted, many stories are used for building an image and marketing. To investors, competitors, potential hires, professional communities, etc. Or even to help teams internalize the purpose and goal of what they’re building _today_.\n\nThere's a term for the people who've been around to witness these events and craft these stories — the old guard. They're _almost_ literally guarding the stories or narrative, but also guarding the way of working that made those stories a success.\n\nThese stories are often divorced from the reality of how the much bigger company now operates!\n\n---- \nNarrative is powerful. Makes sense to guard it[^3]. Both for alignment, but also for preserving myths that hold that purpose up. Myths that come from true stories. Myths that were constructed/embellished for marketing or aiming throughout the company's existence.\n\nTall tales and fables by the campfire: now for corporations, too!\n\n[^1]:\tDepending on the company, losing this information is a crisis, possibly existentially:\n\n    1. Data, esp. customer lists\n\n    2. Source code\n\n    3. How it really happened/what that means\n\n    Surprisingly, not all of this has the best access control. Most companies choose productivity over secrecy. Theories of friction, agency, and [firms](https://www.economist.com/schools-brief/2017/07/28/coases-theory-of-the-firm) being what they are, etc.\n\n[^2]:\te.g. Musk would very much like everyone to forget he didn't start Tesla.\n\n[^3]:\tHence, how far venture capitalists and cryptocurrency/AI/hype-cycle founders will go to nudge narratives to suit their needs and away from what the technology actually does, cannot do, or is intended to do.\n",
				"date_published": "2024-07-04T11:36:59-07:00",
				"url": "https://therealadam.com/2024/07/04/corporate-stories.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/06/27/be-findable.html",
				"title": "Be findable",
				"content_html": "<p>Thorsten Ball with a great reference to <em>Comedians in Cars Getting Coffee</em>. <a href=\"https://registerspill.thorstenball.com/p/be-findable\">Be findable</a>:</p>\n<blockquote>\n<p>You’re in your apartment watching TV, and they knock on the door, like “Jerry, I’m Dave Addison from the Show Business Commission. We understand you got enormous talent and tremendous potential and you don’t know what to do with it, and there’s really no bridge or no other conduit which will carry you over to the next level, which is why we’re here. We’re the Show Business Commission. We’re here to sort of collect you up.”</p>\n</blockquote>\n<p>No one is going to discover your work spontaneously. Making your work discoverable is <em>part of the work</em>. It’s not bragging or obnoxious. Unless you’re <em>habitually</em> obnoxious, in which case a little self-promotion is the least of your problems!</p>\n",
				"content_text": "Thorsten Ball with a great reference to _Comedians in Cars Getting Coffee_. [Be findable](https://registerspill.thorstenball.com/p/be-findable):\n\n> You’re in your apartment watching TV, and they knock on the door, like “Jerry, I’m Dave Addison from the Show Business Commission. We understand you got enormous talent and tremendous potential and you don’t know what to do with it, and there’s really no bridge or no other conduit which will carry you over to the next level, which is why we’re here. We’re the Show Business Commission. We’re here to sort of collect you up.”\n\nNo one is going to discover your work spontaneously. Making your work discoverable is _part of the work_. It’s not bragging or obnoxious. Unless you’re _habitually_ obnoxious, in which case a little self-promotion is the least of your problems!\n\n\n",
				"date_published": "2024-06-27T17:30:10-07:00",
				"url": "https://therealadam.com/2024/06/27/be-findable.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/06/16/seek-the-good.html",
				"title": "Seek the good (enough) things",
				"content_html": "<p><a href=\"https://www.lesswrong.com/posts/7hFeMWC6Y5eaSixbD/100-tips-for-a-better-life#Joy\">100 Tips for a Better Life</a>:</p>\n<blockquote>\n<ol start=\"95\">\n<li>Some types of sophistication won’t make you enjoy the object more, they’ll make you enjoy it less. For example, wine snobs don’t enjoy wine twice as much as you, they’re more keenly aware of how most wine isn’t good enough. Avoid sophistication that diminishes your enjoyment.</li>\n</ol>\n</blockquote>\n<p>Teaching someone the depth to something like cars or pens or literature is a gift and a curse. On one hand, you’re showing them a new, deeper world that they might really enjoy and find fulfillment in. On the other, they might realize something like “a <em>true</em> classic Porsche 911” is out of reach or that the pen they like is kinda middle-ground or that their favorite sci-fi author is kinda schlocky.</p>\n<p>Maybe the gift is “this is amazing, but it’s a bit of a forbidden-knowledge hazard to know you could have this thing.”</p>\n<p>The classic knowledge hazard for me, is <a href=\"https://www.youtube.com/watch?v=gC5-MoDUuRg\">One car to do it all</a>. If that video hadn’t re-awoken my excitement for Porsches I would have a much more boring car, a lot more time back in my life, and mid-five figures of money spent otherwise. But maybe I’d have missed out on a fun hobby. 🤷🏻‍♂️</p>\n<hr>\n<p>Riffing on this idea:</p>\n<p>“If you want to upset a person for a day, tell them their car sucks. If you want to upset them for life, show them how to appreciate the automotive experience in a way that they will plumb the depths of for the rest of their days.”</p>\n<p>“If you want to upset a person for a day, tell them their taste in music sucks. If you want to upset them for life, show them the first step in the journey to seek out and appreciate the depths of really great music despite the knowledge that the most popular music is an <em>entertainment business</em> and will never reach the levels which you aspire to.”</p>\n<hr>\n<p>Enjoy things, seek out the finer details of what makes them nice. Not too much. Mostly things that don’t cost more than your monthly mortgage/rent.</p>\n",
				"content_text": "[100 Tips for a Better Life](https://www.lesswrong.com/posts/7hFeMWC6Y5eaSixbD/100-tips-for-a-better-life#Joy):\n\n> 95. Some types of sophistication won’t make you enjoy the object more, they’ll make you enjoy it less. For example, wine snobs don’t enjoy wine twice as much as you, they’re more keenly aware of how most wine isn’t good enough. Avoid sophistication that diminishes your enjoyment.\n\n\nTeaching someone the depth to something like cars or pens or literature is a gift and a curse. On one hand, you’re showing them a new, deeper world that they might really enjoy and find fulfillment in. On the other, they might realize something like “a _true_ classic Porsche 911” is out of reach or that the pen they like is kinda middle-ground or that their favorite sci-fi author is kinda schlocky.\n\nMaybe the gift is “this is amazing, but it’s a bit of a forbidden-knowledge hazard to know you could have this thing.”\n\nThe classic knowledge hazard for me, is [One car to do it all](https://www.youtube.com/watch?v=gC5-MoDUuRg). If that video hadn’t re-awoken my excitement for Porsches I would have a much more boring car, a lot more time back in my life, and mid-five figures of money spent otherwise. But maybe I’d have missed out on a fun hobby. 🤷🏻‍♂️\n\n---- \nRiffing on this idea:\n\n“If you want to upset a person for a day, tell them their car sucks. If you want to upset them for life, show them how to appreciate the automotive experience in a way that they will plumb the depths of for the rest of their days.”\n\n“If you want to upset a person for a day, tell them their taste in music sucks. If you want to upset them for life, show them the first step in the journey to seek out and appreciate the depths of really great music despite the knowledge that the most popular music is an _entertainment business_ and will never reach the levels which you aspire to.”\n\n---- \nEnjoy things, seek out the finer details of what makes them nice. Not too much. Mostly things that don’t cost more than your monthly mortgage/rent.\n\n",
				"date_published": "2024-06-16T11:23:22-07:00",
				"url": "https://therealadam.com/2024/06/16/seek-the-good.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/06/14/finishing-is-the.html",
				"title": "Finishing is the skill",
				"content_html": "<p><a href=\"https://ruby.social/@therealadam/110072680899591393\">Previously</a>:</p>\n<blockquote>\n<p>The only way to finish writing, planning, coding, designing, etc. is to do the thing.</p>\n<p>Rarely will new tools, larger scope, a different approach, another section, more tidy, or any other number of not doing the thing finish the job.</p>\n<p>Finishing is the skill. Finishing is The Way.</p>\n</blockquote>\n<hr>\n<p>Conjecture: the last 90% of a project is 90% of the effort because we rarely develop the skill of finishing.</p>\n<p>It&rsquo;s easy to think “this project was doomed from the start, let&rsquo;s start a new project to right our mistakes”, and boom you&rsquo;re starting instead of finishing.</p>\n<p>Finishing may incur damage to pride, reputation, etc. OTOH building a reputation for finishing is a tremendous asset in teams and careers.</p>\n<hr>\n<p>You probably haven’t heard of many people who didn&rsquo;t finish their thing.</p>\n<p>Schubert had to write nine symphonies so he could write <a href=\"https://en.wikipedia.org/wiki/Unfinished_symphony\">&ldquo;The Unfinished&rdquo;</a> Symphony and have it live on hundreds of years later. Is there a writer who is only known for one unfinished novel or screenplay?</p>\n<hr>\n<p>Starting a new thing is more fun than finishing an existing thing. This is always the temptation! The interesting things in a project usually happen when you’re starting and when you’re getting feedback from people interacting with it. The finishing phase is often the “canyon of disillusionment” where all the mundane or tedious tasks end up.</p>\n<hr>\n<p>Updating <a href=\"https://ruby.social/@therealadam/112168718670726417\">another earlier thought</a>:</p>\n<blockquote>\n<p>✋ We’re not here to work on things.</p>\n<p>👉 We’re here to finish things.</p>\n<p>Corollary: we’re not here to push JIRA issues/Trello cards/etc. around. We’re here to make something and share it with the world.</p>\n</blockquote>\n<p>Don’t neglect those issues/card<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. Finishing is important, but communicating that progress counts for a lot too! There’s no sense in finishing if no one else knows.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Me from several years ago would not believe I’m writing this. 😆</p>\n<p>New conjecture: communicating via cards/issues is as important as communicating via pull requests. The interaction of the former is stakeholder to engineer, the latter interaction is engineer to engineer.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "[Previously](https://ruby.social/@therealadam/110072680899591393):\n\n> The only way to finish writing, planning, coding, designing, etc. is to do the thing.\n> \n> Rarely will new tools, larger scope, a different approach, another section, more tidy, or any other number of not doing the thing finish the job.\n> \n> Finishing is the skill. Finishing is The Way.\n\n---- \nConjecture: the last 90% of a project is 90% of the effort because we rarely develop the skill of finishing.\n\nIt's easy to think “this project was doomed from the start, let's start a new project to right our mistakes”, and boom you're starting instead of finishing.\n\nFinishing may incur damage to pride, reputation, etc. OTOH building a reputation for finishing is a tremendous asset in teams and careers.\n\n---- \nYou probably haven’t heard of many people who didn't finish their thing.\n\nSchubert had to write nine symphonies so he could write [\"The Unfinished\"](https://en.wikipedia.org/wiki/Unfinished_symphony) Symphony and have it live on hundreds of years later. Is there a writer who is only known for one unfinished novel or screenplay?\n\n---- \nStarting a new thing is more fun than finishing an existing thing. This is always the temptation! The interesting things in a project usually happen when you’re starting and when you’re getting feedback from people interacting with it. The finishing phase is often the “canyon of disillusionment” where all the mundane or tedious tasks end up.\n\n---- \nUpdating [another earlier thought](https://ruby.social/@therealadam/112168718670726417):\n\n> ✋ We’re not here to work on things. \n> \n> 👉 We’re here to finish things.\n> \n> Corollary: we’re not here to push JIRA issues/Trello cards/etc. around. We’re here to make something and share it with the world.\n\nDon’t neglect those issues/card[^1]. Finishing is important, but communicating that progress counts for a lot too! There’s no sense in finishing if no one else knows.\n\n[^1]:\tMe from several years ago would not believe I’m writing this. 😆\n\n    New conjecture: communicating via cards/issues is as important as communicating via pull requests. The interaction of the former is stakeholder to engineer, the latter interaction is engineer to engineer.\n",
				"date_published": "2024-06-14T17:58:11-07:00",
				"url": "https://therealadam.com/2024/06/14/finishing-is-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/06/10/frequency-instead-of.html",
				"title": "Frequency instead of quantity",
				"content_html": "<p>Austin Kleon, <a href=\"https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/\">A few notes on daily blogging</a>:</p>\n<blockquote>\n<p>With blogging, I’m not so sure it’s about quantity as much as it’s about <em><strong>frequency</strong></em>: for me, there’s something kind of magical about posting once a day. Good things happen. <a href=\"https://austinkleon.com/2013/12/29/something-small-every-day/\">Something small every day</a> leads to something big.</p>\n</blockquote>\n<p>Maybe it&rsquo;s not so much <em>quantity</em> that builds the quality, but <em>frequency</em> and <em>consistency</em>.</p>\n",
				"content_text": "Austin Kleon, [A few notes on daily blogging](https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/):\n\n> With blogging, I’m not so sure it’s about quantity as much as it’s about ***frequency***: for me, there’s something kind of magical about posting once a day. Good things happen. [Something small every day](https://austinkleon.com/2013/12/29/something-small-every-day/) leads to something big.\n\nMaybe it's not so much _quantity_ that builds the quality, but _frequency_ and _consistency_.\n\n",
				"date_published": "2024-06-10T17:39:28-07:00",
				"url": "https://therealadam.com/2024/06/10/frequency-instead-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/27/everyone-wins-document.html",
				"title": "Everyone wins: document whatever resists simplification",
				"content_html": "<p>The traditional prescription for keeping software easy to work with and amenable to change is “refactoring”. As we’re fixing bugs, adding features, and making new possibilities, we investigate how to change the <em>structure</em> of code so that correcting, changing, or adding <em>behavior</em> is easier. In reverse order — we should make the <em>change easy,</em> then make the <em>easy change</em> to achieve the desired results<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>.</p>\n<p>I may not surprise you in suggesting that’s often not how things actually work out.</p>\n<p>Some code, processes, or data are inherently complex or crystalized in path dependence. After our first urge to simplify is stymied, move on to the second possibility: live with and <em>document the complexity</em>, then keep moving<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>. Everyone wins.</p>\n<p>Documenting code is a great forcing function for simplifying it. When I look at code with the intent of writing down how to use or understand it, my perspective shifts, and I’m more aware of the missing affordances. A clarifying parameter name or perhaps a simpler calling sequence. So I make that change (aka refactoring) as part of the process of documenting the code. Everyone wins.</p>\n<p>The same goes for processes and data. Writing down how to fix an unprocessed payment or restore data after an accidental deletion flips my perspective enough that I’m not seeing it in the weeds. I can see opportunities for automation, so I take them. Or I can see how to improve a data structure such that errors are obvious to humans or detectable by computers. I make that change, everyone wins.</p>\n<hr>\n<p>It’s not always possible to find these little wins. Occasionally, we don’t win!</p>\n<p>Some systems, especially the older and critical ones, resist change. The volume of data may be the resistance to change, the process may touch too many people to casually change, the risk of updating code may be too great. If you’ve worked on a billing system, I bet you’re hallucinating memories of it at the mere mention of data, process, people, and code resisting even the smallest change in course.</p>\n<p>In that case, the next best way to improve the situation is to improve everyone’s knowledge of the system by writing it down. Document how it works. Even better, elaborate on how it’s <em>supposed</em> to work and how it <em>actually</em> works in some important but problematic circumstances.</p>\n<hr>\n<p>Go from tricky code to refactoring. If you’re stymied by refactoring, switch to documenting it instead. Everyone wins.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Thanks, <a href=\"https://tidyfirst.substack.com/p/mastering-programming\">Kent Beck</a>, for that whopper.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>It may end up making the change easier!&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "The traditional prescription for keeping software easy to work with and amenable to change is “refactoring”. As we’re fixing bugs, adding features, and making new possibilities, we investigate how to change the _structure_ of code so that correcting, changing, or adding _behavior_ is easier. In reverse order — we should make the _change easy,_ then make the _easy change_ to achieve the desired results[^1].\n\nI may not surprise you in suggesting that’s often not how things actually work out.\n\nSome code, processes, or data are inherently complex or crystalized in path dependence. After our first urge to simplify is stymied, move on to the second possibility: live with and _document the complexity_, then keep moving[^2]. Everyone wins.\n\nDocumenting code is a great forcing function for simplifying it. When I look at code with the intent of writing down how to use or understand it, my perspective shifts, and I’m more aware of the missing affordances. A clarifying parameter name or perhaps a simpler calling sequence. So I make that change (aka refactoring) as part of the process of documenting the code. Everyone wins.\n\nThe same goes for processes and data. Writing down how to fix an unprocessed payment or restore data after an accidental deletion flips my perspective enough that I’m not seeing it in the weeds. I can see opportunities for automation, so I take them. Or I can see how to improve a data structure such that errors are obvious to humans or detectable by computers. I make that change, everyone wins.\n\n---- \nIt’s not always possible to find these little wins. Occasionally, we don’t win!\n\nSome systems, especially the older and critical ones, resist change. The volume of data may be the resistance to change, the process may touch too many people to casually change, the risk of updating code may be too great. If you’ve worked on a billing system, I bet you’re hallucinating memories of it at the mere mention of data, process, people, and code resisting even the smallest change in course.\n\nIn that case, the next best way to improve the situation is to improve everyone’s knowledge of the system by writing it down. Document how it works. Even better, elaborate on how it’s _supposed_ to work and how it _actually_ works in some important but problematic circumstances.\n\n---- \nGo from tricky code to refactoring. If you’re stymied by refactoring, switch to documenting it instead. Everyone wins.\n\n[^1]:\tThanks, [Kent Beck](https://tidyfirst.substack.com/p/mastering-programming), for that whopper.\n\n[^2]:\tIt may end up making the change easier!\n",
				"date_published": "2024-05-27T07:54:57-07:00",
				"url": "https://therealadam.com/2024/05/27/everyone-wins-document.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/26/a-pastoral-and.html",
				"title": "Pastoral and modern approaches to attention",
				"content_html": "<p>Alan Jacobs, <a href=\"https://blog.ayjay.org/the-attention-cottage/\">the attention cottage</a> (Via <a href=\"https://austinkleon.com\">Austin Kleon</a>). I was not expecting to quote an attention metaphor involving the cardiovascular system and cottages, and yet:</p>\n<blockquote>\n<p>To care only for things temporal is to lose the things eternal; but to attend rightly to things eternal is the royal road to constructive thought and action in the temporal realm. The great artists and thinkers cultivate a systolic/diastolic rhythm, tension and release, an increase and then decrease of pressure. In the latter phase they withdraw, by whatever means available to them, to their attentional cottage for refreshment and clarification — and then they can return to the pressures of the moment more effectively, and in ways non-destructive to them and to others.</p>\n<p>But most of us, I think, get the rhythm wrong: we spend the great majority of our time in systolic mode — contracted, tensed — and only rarely enter the relaxed diastolic phase. Or, to change the metaphor: We think we should be living in the chaotic, cacophanous megalopolis and retreat to our cottage only in desperate circumstances. But the reverse is true: our attention cottage should be our home, our secure base, the place from which we set out on our adventures in contemporaneity and to which we always make our <em>nostos</em>.</p>\n<p>I often think how much easier, how much more naturally healthy, life was even just a couple of decades ago, when the internet was in one room of the house, when the whole family had one computer connected to a modem that was connected to a landline, and movies arrived in the mailbox in red envelopes.</p>\n</blockquote>\n<p>I love a cottage/workshop/<a href=\"https://therealadam.com/2024/04/26/personal-websites-are.html\">garage</a> metaphor. Doubly so when they recall a time when distraction had yet to pervade our homes and lives.</p>\n<p>The past is gone, we’re not going back to Netflix DVD mailers. So how do we carry the idea of inhale/exhale and space forward? I’m trying a few things currently <sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>:</p>\n<p><strong>Minimize apps with an adversarial agenda</strong>. Currently: YouTube is only on my iPad, but the intent is I mostly watch via AppleTV. Twitter, Ivory, and Instagram are only on my phone. Reading apps (Books, Kindle, Reader, Reeder) are on all my devices. In other words, the apps aligned with my goals (read more of what I choose, think bigger thoughts) are everywhere and the ones that want to direct my attention to advertisements (mostly) are only present where my attention is (probably) already scattered.</p>\n<p><strong>Hold devices to a purpose.</strong> The intent here is that I’m holding my iPad largely for reading, focus, and writing. My laptop is largely for writing, publishing, and collaboration. The Kindle is, obviously focused on reading alone, despite the predations of Amazon into all possible revenue streams elsewhere.</p>\n<p><strong>Treat the transition to focus with reverence, if not physical space.</strong> When I’m reading or writing, I try to keep my phone out-of-reach. If not in another room. My laptop sits in a (part of the) room where I’m only focused on writing, ideas, publishing, or keeping those things operating smoothly. Whether I’m in my home office or making do on a roadtrip, this is the attention cottage Jacobs mentions above.</p>\n<p>It’s not quite as quaint as an <em>actual</em> cottage. But, it does an okay job balancing the pastoral with the modern.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Caveat, “currently” is on a long road-trip. <a href=\"https://buttondown.email/therealadam/archive/prelude-my-contribution-to-the-pantheon-of-pop-up/\">Read about it</a>!&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Alan Jacobs, [the attention cottage](https://blog.ayjay.org/the-attention-cottage/) (Via [Austin Kleon](https://austinkleon.com)). I was not expecting to quote an attention metaphor involving the cardiovascular system and cottages, and yet:\n\n> To care only for things temporal is to lose the things eternal; but to attend rightly to things eternal is the royal road to constructive thought and action in the temporal realm. The great artists and thinkers cultivate a systolic/diastolic rhythm, tension and release, an increase and then decrease of pressure. In the latter phase they withdraw, by whatever means available to them, to their attentional cottage for refreshment and clarification — and then they can return to the pressures of the moment more effectively, and in ways non-destructive to them and to others.\n> \n> But most of us, I think, get the rhythm wrong: we spend the great majority of our time in systolic mode — contracted, tensed — and only rarely enter the relaxed diastolic phase. Or, to change the metaphor: We think we should be living in the chaotic, cacophanous megalopolis and retreat to our cottage only in desperate circumstances. But the reverse is true: our attention cottage should be our home, our secure base, the place from which we set out on our adventures in contemporaneity and to which we always make our _nostos_.\n> \n> I often think how much easier, how much more naturally healthy, life was even just a couple of decades ago, when the internet was in one room of the house, when the whole family had one computer connected to a modem that was connected to a landline, and movies arrived in the mailbox in red envelopes.\n\nI love a cottage/workshop/[garage](https://therealadam.com/2024/04/26/personal-websites-are.html) metaphor. Doubly so when they recall a time when distraction had yet to pervade our homes and lives.\n\nThe past is gone, we’re not going back to Netflix DVD mailers. So how do we carry the idea of inhale/exhale and space forward? I’m trying a few things currently [^1]:\n\n**Minimize apps with an adversarial agenda**. Currently: YouTube is only on my iPad, but the intent is I mostly watch via AppleTV. Twitter, Ivory, and Instagram are only on my phone. Reading apps (Books, Kindle, Reader, Reeder) are on all my devices. In other words, the apps aligned with my goals (read more of what I choose, think bigger thoughts) are everywhere and the ones that want to direct my attention to advertisements (mostly) are only present where my attention is (probably) already scattered.\n\n**Hold devices to a purpose.** The intent here is that I’m holding my iPad largely for reading, focus, and writing. My laptop is largely for writing, publishing, and collaboration. The Kindle is, obviously focused on reading alone, despite the predations of Amazon into all possible revenue streams elsewhere.\n\n**Treat the transition to focus with reverence, if not physical space.** When I’m reading or writing, I try to keep my phone out-of-reach. If not in another room. My laptop sits in a (part of the) room where I’m only focused on writing, ideas, publishing, or keeping those things operating smoothly. Whether I’m in my home office or making do on a roadtrip, this is the attention cottage Jacobs mentions above.\n\nIt’s not quite as quaint as an _actual_ cottage. But, it does an okay job balancing the pastoral with the modern.\n\n[^1]:\tCaveat, “currently” is on a long road-trip. [Read about it](https://buttondown.email/therealadam/archive/prelude-my-contribution-to-the-pantheon-of-pop-up/)!\n",
				"date_published": "2024-05-26T13:59:56-07:00",
				"url": "https://therealadam.com/2024/05/26/a-pastoral-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/13/delegate-dont-dictate.html",
				"title": "Delegate, don’t dictate",
				"content_html": "<p>It’s the only way to survive as an engineering leader.</p>\n<ol>\n<li>Hand off tasks/work to the team</li>\n<li>Give guidelines, execution tactics, or constraints to keep things on track</li>\n<li>Set an expectation of what to deliver and when</li>\n<li>Get out of the way</li>\n</ol>\n<p>Delegate not only the main/critical path work, but also “the toys” and interesting/exciting work. <a href=\"https://jacobian.org/2021/jul/19/give-away-your-toys/\">Give away your toys</a>.</p>\n<p>Even more difficult: don’t tell someone <em>how</em> to do it. Give context (“why”) and constraints. A few style guides perhaps (i.e., codified influence!). But, work with the team to develop the style guide, raise the standard, and enforce the standard. Provide constraints that keep them on track and/or reduce the problem space.</p>\n<p>Leadership is about executing through other people. To some extent, that means influencing your team to do the right work efficiently and effectively. That’s delegation in a nutshell.</p>\n",
				"content_text": "It’s the only way to survive as an engineering leader.\n\n1. Hand off tasks/work to the team\n2. Give guidelines, execution tactics, or constraints to keep things on track\n3. Set an expectation of what to deliver and when\n4. Get out of the way\n\nDelegate not only the main/critical path work, but also “the toys” and interesting/exciting work. [Give away your toys](https://jacobian.org/2021/jul/19/give-away-your-toys/).\n\nEven more difficult: don’t tell someone _how_ to do it. Give context (“why”) and constraints. A few style guides perhaps (i.e., codified influence!). But, work with the team to develop the style guide, raise the standard, and enforce the standard. Provide constraints that keep them on track and/or reduce the problem space.\n\nLeadership is about executing through other people. To some extent, that means influencing your team to do the right work efficiently and effectively. That’s delegation in a nutshell.\n\n",
				"date_published": "2024-05-13T18:24:57-07:00",
				"url": "https://therealadam.com/2024/05/13/delegate-dont-dictate.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/11/beginners-helping-experts.html",
				"title": "Beginners helping experts",
				"content_html": "<blockquote>\n<p>“In the beginner’s mind, there are many possibilities. In the expert’s mind, there are few.”</p>\n<p>— Shunryo Suzuki</p>\n</blockquote>\n<p>The trick being, how can an expert help a beginner, given they know all the false paths. And how can the expert encourage the beginner to help them find new ideas, knowing all the paths they’ve followed <em>in the past</em>?</p>\n<hr>\n<p>The distinguishing quality of beginner-ness is that <strong>every rock turned over has something surprising or interesting under it</strong>. It’s all rabbit holes to fall down or rakes to step on.</p>\n<p>When there are no time constraints present, it’s fine to explore these ideas, some of which may not be fruitful. Or, to figure out exactly why the result was surprising and not intended.</p>\n<p>When time is of the essence, being a beginner is sometimes pretty dang stressful. Doubly so when the path to productivity is littered with novelty.</p>\n<p>Ergo, <a href=\"https://jacobian.org/2021/jul/20/make-failure-safe/\">Make Failure A (Safe) Option</a>.</p>\n<hr>\n<p>I feel lucky that I was able to learn a lot about software development in high school and college. Mostly, self-directed; I used Linux during college, spent a lot of time compiling <a href=\"https://enlightenment.org\">Enlightenment</a> and tinkering with up-and-coming languages you may have heard of, namely Python and Ruby (and to some extent, Lisp and ML).</p>\n<p>Beginners today are thrown straight into narrowly guided tutorials and online courses. Then they’re dropped into the wilds of innumerable Unix minutiae, source control, relational databases, multi-paradigm programming languages, styling in browsers, and agile methods. I realized I was firmly in the “expert developer” camp when I could spot all the rabbit holes and rakes-in-leaves three moves ahead. I deftly maneuvered in the dark, knowing by feel where the potential problems were and how to avoid them.</p>\n<p>It’s difficult to impart that knowledge to beginners. It’s not principles, it’s compounded experience. Worse, beginners find themselves amidst a hustle culture of “ship a side project alongside your day job and somehow do that whilst traveling the world”. Or, become a &ldquo;content creator&rdquo;. Most importantly, I knew a side-hustle and creator<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup> lifestyle were not for me.</p>\n<hr>\n<p>I’m certain beginners can help <em>me</em> find new and interesting angles. But it’s difficult to thread the needle between listening for insight and skipping ahead to what I know will work. It’s tempting to say, “I see where you’re going, but there are hazards ahead and here’s all the ways your approach could stymy us.” For one, failing is a pretty dang effective way to learn! For another, “don’t do that, I’ll tell you why later” is a pretty lousy way to acquire knowledge.</p>\n<p>One lesson I’ve learned from beginners is that probably we should design systems without reliance on understanding the full depth and breadth of the computing world. Folks don’t have the time or energy to get Very Good at <code>./configure; make; make install</code><sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup> like I did in college.</p>\n<p>Beginners are pretty good at <a href=\"https://therealadam.com/2024/04/11/juniorsseniors-and-incrementalvision.html\">working incrementally</a>. They have to, lest they get lost in all the stepping on rakes and learning of minute! Many experienced developers have forgotten how to build incrementally. They glimpse the glass castles in the sky and plow ahead to realizing them, only to find themselves stepping on <em>different kinds</em> of rakes hidden in the leaves.</p>\n<hr>\n<p>Expert mistake number one: try to skip past all the beginner’s insights. That is, the beginner’s mind.</p>\n<p>Teammates new to software development and new teammates on the team, accidentally or intentionally, can both reveal useful information about your team, process, and software. Information that is otherwise difficult to come by. There are things everyone is accustomed, and thus blind, to that a beginner can tell you straight away.</p>\n<p>I have to remind myself that this is a critical moment. Don’t skip straight to “onboarding them onto the team’s culture” by explaining the history and the why-or-why-not. I should listen to the insight, evaluate the idea, and bias to act on it if I can.</p>\n<hr>\n<p>A group of experts can make great things. But a group of experts with a beginner alongside can assimilate new ideas and make great <em>and</em> interesting things.</p>\n<hr>\n<p>See also:</p>\n<ul>\n<li>Austin Kleon, <a href=\"https://austinkleon.com/show-your-work/\">Show Your Work</a></li>\n<li>James Clear, <a href=\"https://jamesclear.com/shoshin\">This Zen Concept Will Help You Stop Being a Slave to Old Beliefs </a></li>\n</ul>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Spoiler: creators weren’t even a thing! There was barely developer marketing, even.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>This is how you installed most Linux software back in the day. In the snow, uphill both ways, etc.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "> “In the beginner’s mind, there are many possibilities. In the expert’s mind, there are few.”\n> \n> — Shunryo Suzuki\n\nThe trick being, how can an expert help a beginner, given they know all the false paths. And how can the expert encourage the beginner to help them find new ideas, knowing all the paths they’ve followed _in the past_?\n\n---- \nThe distinguishing quality of beginner-ness is that **every rock turned over has something surprising or interesting under it**. It’s all rabbit holes to fall down or rakes to step on. \n\nWhen there are no time constraints present, it’s fine to explore these ideas, some of which may not be fruitful. Or, to figure out exactly why the result was surprising and not intended.\n\nWhen time is of the essence, being a beginner is sometimes pretty dang stressful. Doubly so when the path to productivity is littered with novelty.\n\nErgo, [Make Failure A (Safe) Option](https://jacobian.org/2021/jul/20/make-failure-safe/).\n\n---- \nI feel lucky that I was able to learn a lot about software development in high school and college. Mostly, self-directed; I used Linux during college, spent a lot of time compiling [Enlightenment](https://enlightenment.org) and tinkering with up-and-coming languages you may have heard of, namely Python and Ruby (and to some extent, Lisp and ML). \n\nBeginners today are thrown straight into narrowly guided tutorials and online courses. Then they’re dropped into the wilds of innumerable Unix minutiae, source control, relational databases, multi-paradigm programming languages, styling in browsers, and agile methods. I realized I was firmly in the “expert developer” camp when I could spot all the rabbit holes and rakes-in-leaves three moves ahead. I deftly maneuvered in the dark, knowing by feel where the potential problems were and how to avoid them. \n\nIt’s difficult to impart that knowledge to beginners. It’s not principles, it’s compounded experience. Worse, beginners find themselves amidst a hustle culture of “ship a side project alongside your day job and somehow do that whilst traveling the world”. Or, become a \"content creator\". Most importantly, I knew a side-hustle and creator[^1] lifestyle were not for me.\n\n---- \nI’m certain beginners can help _me_ find new and interesting angles. But it’s difficult to thread the needle between listening for insight and skipping ahead to what I know will work. It’s tempting to say, “I see where you’re going, but there are hazards ahead and here’s all the ways your approach could stymy us.” For one, failing is a pretty dang effective way to learn! For another, “don’t do that, I’ll tell you why later” is a pretty lousy way to acquire knowledge.\n\nOne lesson I’ve learned from beginners is that probably we should design systems without reliance on understanding the full depth and breadth of the computing world. Folks don’t have the time or energy to get Very Good at `./configure; make; make install`[^2] like I did in college.\n\nBeginners are pretty good at [working incrementally](https://therealadam.com/2024/04/11/juniorsseniors-and-incrementalvision.html). They have to, lest they get lost in all the stepping on rakes and learning of minute! Many experienced developers have forgotten how to build incrementally. They glimpse the glass castles in the sky and plow ahead to realizing them, only to find themselves stepping on _different kinds_ of rakes hidden in the leaves.\n\n---- \nExpert mistake number one: try to skip past all the beginner’s insights. That is, the beginner’s mind. \n\nTeammates new to software development and new teammates on the team, accidentally or intentionally, can both reveal useful information about your team, process, and software. Information that is otherwise difficult to come by. There are things everyone is accustomed, and thus blind, to that a beginner can tell you straight away.\n\nI have to remind myself that this is a critical moment. Don’t skip straight to “onboarding them onto the team’s culture” by explaining the history and the why-or-why-not. I should listen to the insight, evaluate the idea, and bias to act on it if I can.\n\n---- \nA group of experts can make great things. But a group of experts with a beginner alongside can assimilate new ideas and make great _and_ interesting things.\n\n---- \nSee also:\n\n- Austin Kleon, [Show Your Work](https://austinkleon.com/show-your-work/)\n- James Clear, [This Zen Concept Will Help You Stop Being a Slave to Old Beliefs ](https://jamesclear.com/shoshin)\n\n[^1]:\tSpoiler: creators weren’t even a thing! There was barely developer marketing, even.\n\n[^2]:\tThis is how you installed most Linux software back in the day. In the snow, uphill both ways, etc.\n",
				"date_published": "2024-05-11T09:48:37-07:00",
				"url": "https://therealadam.com/2024/05/11/beginners-helping-experts.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/05/humble-writing.html",
				"title": "Humble writing",
				"content_html": "<p>I’m trying to change up my blogging style: write without telling people what to do. Show, don’t tell. It’s a stronger writing position to take. It’s the difference between writing social media “content” and writing from a place of earnestness/honesty.</p>\n<ul>\n<li>Advocate by telling a compelling story.</li>\n<li>Motivate by strength of logic alone.</li>\n<li>Change minds by revealing an obvious truth that was once obscured.</li>\n<li>No shortcuts.</li>\n</ul>\n<p>The way I read him, Kurt Vonnegut (might) want it that way. Who knows, he can’t tell us now!</p>\n",
				"content_text": "I’m trying to change up my blogging style: write without telling people what to do. Show, don’t tell. It’s a stronger writing position to take. It’s the difference between writing social media “content” and writing from a place of earnestness/honesty.\n\n- Advocate by telling a compelling story. \n- Motivate by strength of logic alone. \n- Change minds by revealing an obvious truth that was once obscured.\n- No shortcuts.\n\nThe way I read him, Kurt Vonnegut (might) want it that way. Who knows, he can’t tell us now!\n\n",
				"date_published": "2024-05-05T09:59:54-07:00",
				"url": "https://therealadam.com/2024/05/05/humble-writing.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/05/01/try-smarter-not.html",
				"title": "Try smarter, not harder",
				"content_html": "<p>“Try harder” is the worst kind of plan. It’s basically not a plan, a small resistance to planning. An anti-plan that signals virtue but instead reflects shallow thinking.</p>\n<p>Don’t say “try harder”.</p>\n<p>“Try harder” implies that folks haven’t been working hard enough. It leaves the door open to come up short again, for all the same reasons, with little to show for it.</p>\n<p>It assumes folks can throw themselves at a project/problem/task even harder without consequences, like exhaustion, burnout, diminished performance, letting important part of their lives suffer, etc. Not only that, but it’s a terminating thought, the kind of thing you can say, and few people will say “well no, we can do better than that” and end up not solving any underlying issues.</p>\n<p>“Try harder” is trying to avoid a tough question: why did I/we come up short last time? “Try harder” is resignation to learning nothing and plowing head-down anyway.</p>\n<p>Try harder is literally working harder, not smarter. I highly recommend the latter.</p>\n",
				"content_text": "“Try harder” is the worst kind of plan. It’s basically not a plan, a small resistance to planning. An anti-plan that signals virtue but instead reflects shallow thinking.\n\nDon’t say “try harder”.\n\n“Try harder” implies that folks haven’t been working hard enough. It leaves the door open to come up short again, for all the same reasons, with little to show for it.\n\nIt assumes folks can throw themselves at a project/problem/task even harder without consequences, like exhaustion, burnout, diminished performance, letting important part of their lives suffer, etc. Not only that, but it’s a terminating thought, the kind of thing you can say, and few people will say “well no, we can do better than that” and end up not solving any underlying issues.\n\n“Try harder” is trying to avoid a tough question: why did I/we come up short last time? “Try harder” is resignation to learning nothing and plowing head-down anyway.\n\nTry harder is literally working harder, not smarter. I highly recommend the latter.\n\n",
				"date_published": "2024-05-01T05:09:27-07:00",
				"url": "https://therealadam.com/2024/05/01/try-smarter-not.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/29/the-leisuredisconnectioncreation-circuit.html",
				"title": "The leisure/disconnection/creation circuit",
				"content_html": "<p>Two prolific, internet-known travelers:</p>\n<ul>\n<li><a href=\"https://craigmod.com\">Craig Mod</a>: writer, walker, photographer, software-adjacent</li>\n<li><a href=\"https://www.996roadtrip.com\">Brock Keen</a>: photographer, car camper, road-tripper, Porsche-enthusiast</li>\n</ul>\n<p>These gentlemen are particularly good at two things that I am not: getting outside and unplugged, and photography. (Also: walking and camping.) From the outside, their projected life/identity seems like a vacation<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. In particular, they take quite different sort of vacations than I do: not <a href=\"https://short.therealadam.com/2023/08/02/many-parts-of.html\">Disneyland</a> nor <a href=\"https://short.therealadam.com/2023/08/11/this-is-where.html\">dog agility-adjacent</a>.</p>\n<p>They go out into the world, force a little disconnection. Setting aside this is <em>part of their thing</em>, they are separate from whatever knowledge work they might do.</p>\n<p>I often want to better disconnect from my knowledge work, even for a couple of hours each night. And, it occurs to me that I can achieve that on any particular kind of vacation. <a href=\"https://short.therealadam.com/2023/08/04/a-vacation-is.html\">A trip to a Disney resort is a fine opportunity to shift my mind to the present</a> and to my intellectual/reading/writing interests<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>.</p>\n<h3 id=\"disengagement-en-route-to-thinking\">Disengagement en route to thinking</h3>\n<p>Mod and Keen generate a desire to think by converting walking/driving mileage into boredom and then, alchemy!, better thoughts.</p>\n<p>Maybe our generally less-stimulated existences, before pervasive computing and social media, correlate with thinking better thoughts. i.e., does it require some kind of disengagement to be a Great Thinker in the age of pervasive networking and computing?</p>\n<p>Keen is not specifically about thinking, <a href=\"https://craigmod.com/ridgeline/116/\" title=\"“A Walk is a Platform for Creative Work”\">whereas Mod is thinking adjacent</a>. Possibly, more about disengagement. Yet, something about it makes me think I could do better thoughts in something <em>like</em> that existence.</p>\n<h3 id=\"disengagement-as-precondition-to-creativity\">Disengagement as precondition to creativity</h3>\n<p>What if some degree of <a href=\"https://www.henrikkarlsson.xyz/p/good-ideas?utm_source=publication-search\">disengagement is already table stakes</a>? Not disengagement like <a href=\"https://studio.ribbonfarm.com/p/against-waldenponding\">Waldenponding</a>. More like returning to a clear mind and <a href=\"https://therealadam.com/2022/12/27/think-your-thoughts.html\">thinking one’s own thoughts</a>. Like, you have to say no to all the distractions that you said yes to in the first place (whether accidentally over optimistically) to do a great thing/thought. <a href=\"https://medium.com/@the_jennitaur/how-to-do-nothing-57e100f59bbb\">Jenny O’Dell has written the book on this</a>, recommended.</p>\n<h3 id=\"vacation-is-a-tool-for-disconnection-and-disengagement-adjacency\">Vacation is a tool for disconnection and disengagement adjacency</h3>\n<p>I wrote <a href=\"https://short.therealadam.com/2023/08/04/a-vacation-is.html\">A Vacation is a Tool For Disconnecting</a> amidst a few weeks wherein we vacationed in Disneyland and stayed in a friend’s RV at a public park while Courtney did dog agility. Despite this not being the most disconnected (I was, in fact, very connected) or disengaged (Disneyland is <em>quite</em> stimulating), my mind reached a good place.</p>\n<p>I wasn’t dwelling on things. I could stop thinking about work once as soon as it snuck into my thoughts. I enjoyed quiet moments and didn’t rush to fill them with distractions. I photographed and journaled and jotted down ideas on the spot and posted photos to blogs. It was pretty dang good.</p>\n<p>But I still found myself sitting there, half-writing and half-journaling, sort of feeling like I’m not prolific enough, even on vacation/disconnection. So maybe disconnection/disengagement isn’t the central thing. Or, ambition and aspiration are orthogonal to personal/work life splits and balances and how they manifest as some degree of “going offline”.</p>\n<p>Possibly, if I were on a road trip or walking or in nature or disengaged or whatever, I would find this feeling/vibe anyway. Is that the disengagement or disconnection talking?</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Of course, it is not. It’s a lot of work to put that many photos and words on the internet.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>Assuming Disney parks don’t <em>become</em> my work. 🤞🏻&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "Two prolific, internet-known travelers:\n- [Craig Mod](https://craigmod.com): writer, walker, photographer, software-adjacent\n- [Brock Keen](https://www.996roadtrip.com): photographer, car camper, road-tripper, Porsche-enthusiast\n\nThese gentlemen are particularly good at two things that I am not: getting outside and unplugged, and photography. (Also: walking and camping.) From the outside, their projected life/identity seems like a vacation[^1]. In particular, they take quite different sort of vacations than I do: not [Disneyland](https://short.therealadam.com/2023/08/02/many-parts-of.html) nor [dog agility-adjacent](https://short.therealadam.com/2023/08/11/this-is-where.html). \n\nThey go out into the world, force a little disconnection. Setting aside this is _part of their thing_, they are separate from whatever knowledge work they might do.\n\nI often want to better disconnect from my knowledge work, even for a couple of hours each night. And, it occurs to me that I can achieve that on any particular kind of vacation. [A trip to a Disney resort is a fine opportunity to shift my mind to the present](https://short.therealadam.com/2023/08/04/a-vacation-is.html) and to my intellectual/reading/writing interests[^2].\n\n### Disengagement en route to thinking\n\nMod and Keen generate a desire to think by converting walking/driving mileage into boredom and then, alchemy!, better thoughts.\n\nMaybe our generally less-stimulated existences, before pervasive computing and social media, correlate with thinking better thoughts. i.e., does it require some kind of disengagement to be a Great Thinker in the age of pervasive networking and computing?\n\nKeen is not specifically about thinking, [whereas Mod is thinking adjacent](https://craigmod.com/ridgeline/116/ \"“A Walk is a Platform for Creative Work”\"). Possibly, more about disengagement. Yet, something about it makes me think I could do better thoughts in something _like_ that existence.\n\n### Disengagement as precondition to creativity\n\nWhat if some degree of [disengagement is already table stakes](https://www.henrikkarlsson.xyz/p/good-ideas?utm_source=publication-search)? Not disengagement like [Waldenponding](https://studio.ribbonfarm.com/p/against-waldenponding). More like returning to a clear mind and [thinking one’s own thoughts](https://therealadam.com/2022/12/27/think-your-thoughts.html). Like, you have to say no to all the distractions that you said yes to in the first place (whether accidentally over optimistically) to do a great thing/thought. [Jenny O’Dell has written the book on this](https://medium.com/@the_jennitaur/how-to-do-nothing-57e100f59bbb), recommended. \n\n### Vacation is a tool for disconnection and disengagement adjacency\n\nI wrote [A Vacation is a Tool For Disconnecting](https://short.therealadam.com/2023/08/04/a-vacation-is.html) amidst a few weeks wherein we vacationed in Disneyland and stayed in a friend’s RV at a public park while Courtney did dog agility. Despite this not being the most disconnected (I was, in fact, very connected) or disengaged (Disneyland is _quite_ stimulating), my mind reached a good place.\n\nI wasn’t dwelling on things. I could stop thinking about work once as soon as it snuck into my thoughts. I enjoyed quiet moments and didn’t rush to fill them with distractions. I photographed and journaled and jotted down ideas on the spot and posted photos to blogs. It was pretty dang good.\n\nBut I still found myself sitting there, half-writing and half-journaling, sort of feeling like I’m not prolific enough, even on vacation/disconnection. So maybe disconnection/disengagement isn’t the central thing. Or, ambition and aspiration are orthogonal to personal/work life splits and balances and how they manifest as some degree of “going offline”.\n\nPossibly, if I were on a road trip or walking or in nature or disengaged or whatever, I would find this feeling/vibe anyway. Is that the disengagement or disconnection talking?\n\n[^1]:\tOf course, it is not. It’s a lot of work to put that many photos and words on the internet.\n\n[^2]:\tAssuming Disney parks don’t _become_ my work. 🤞🏻\n",
				"date_published": "2024-04-29T05:09:23-07:00",
				"url": "https://therealadam.com/2024/04/29/the-leisuredisconnectioncreation-circuit.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/27/show-up-everydang.html",
				"title": "Show up every-dang day",
				"content_html": "<p>Anne-Laure Le Cunff, <a href=\"https://nesslabs.com/mental-gym\">4 science-backed ways to build your own mental gym</a>:</p>\n<blockquote>\n<p>Building mental strength is not too different from building physical strength. It’s all about consistency. The same way you would take a few minutes to do a few push ups, you can incorporate mental pushups in your daily routine.</p>\n</blockquote>\n<p>Be curious:</p>\n<blockquote>\n<p>The last one is extremely powerful. Multiple <a href=\"https://www.sciencedirect.com/science/article/pii/S0361476X13000209\">research</a> <a href=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/acp.3410\">studies</a> show the positive impact teaching someone else has on the comprehension and recall of any material.</p>\n</blockquote>\n<p>Get creative:</p>\n<blockquote>\n<p>There is <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/17623380\">evidence</a> that practicing activities such as music, drawing, arts and crafts stimulate our brain in a way that enhances our health and well-being. These activities also have a positive impact on our <a href=\"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4077746/\">emotional resilience</a>.</p>\n</blockquote>\n<p>Be mindful:</p>\n<blockquote>\n<p>Choose a topic. It should be personal, emotional, and important to you.\nWrite for yourself. Do not imagine your writing being read by other people.\nLet go. Don’t worry about style, spelling, punctuation, or grammar.</p>\n</blockquote>\n<p>Get some rest:</p>\n<blockquote>\n<p>A great way to combine short breaks and sleep are, of course… Naps! If you’re fortunate enough to work in an environment where taking a nap during the day is possible, do take that opportunity.</p>\n</blockquote>\n<p>I can’t overstate how good naps are. Second only to easy access to comfort from a dog, naps are the best of work-from-home benefits.</p>\n",
				"content_text": "Anne-Laure Le Cunff, [4 science-backed ways to build your own mental gym](https://nesslabs.com/mental-gym):\n> Building mental strength is not too different from building physical strength. It’s all about consistency. The same way you would take a few minutes to do a few push ups, you can incorporate mental pushups in your daily routine.\n\nBe curious:\n> The last one is extremely powerful. Multiple [research](https://www.sciencedirect.com/science/article/pii/S0361476X13000209) [studies](https://onlinelibrary.wiley.com/doi/abs/10.1002/acp.3410) show the positive impact teaching someone else has on the comprehension and recall of any material.\n\nGet creative:\n> There is [evidence](https://www.ncbi.nlm.nih.gov/pubmed/17623380) that practicing activities such as music, drawing, arts and crafts stimulate our brain in a way that enhances our health and well-being. These activities also have a positive impact on our [emotional resilience](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4077746/).\n\nBe mindful:\n> Choose a topic. It should be personal, emotional, and important to you.\n> Write for yourself. Do not imagine your writing being read by other people.\n> Let go. Don’t worry about style, spelling, punctuation, or grammar.\n\nGet some rest:\n> A great way to combine short breaks and sleep are, of course… Naps! If you’re fortunate enough to work in an environment where taking a nap during the day is possible, do take that opportunity.\n\nI can’t overstate how good naps are. Second only to easy access to comfort from a dog, naps are the best of work-from-home benefits.\n",
				"date_published": "2024-04-27T09:36:46-07:00",
				"url": "https://therealadam.com/2024/04/27/show-up-everydang.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/26/personal-websites-are.html",
				"title": "Personal websites are corner stores and neighborhood garages",
				"content_html": "<p>Is a personal blog or general-purpose more like a small shop or your local garage?</p>\n<hr>\n<p>They’re a bit of a <a href=\"https://justinjackson.ca/calm-company\">calm business</a>.</p>\n<p>A corner store with a friendly owner/operator. Never grows beyond its means. Operates at relatively-human scale. Greet every customer, have a nice conversation, send them away with something interesting. Aims for an <a href=\"https://en.wikipedia.org/wiki/Finite_and_Infinite_Games\">infinite game</a>, not limitless growth. It may not ever turn a profit, but that’s okay; neither do most restaurants or start-ups.</p>\n<p>A good neighborhood store might make me think, “I wonder if Sam has anything interest in stock this week?” A good blog should make me hope Sam has new posts, with confidence that they’re probably pretty good.</p>\n<hr>\n<p>But, a personal web space is a bit of a <a href=\"https://www.youtube.com/watch?v=gC5-MoDUuRg\">sports car in a workshop</a> too.</p>\n<p>It’s meant to enjoy, for driving. But also for nostalgia, for looking and remembering. Showing it off is important! It&rsquo;s not quite as good as what you could go out and buy new, but that&rsquo;s most of the charm. Working on it is part of the fun, but often a source of frustration and expense.</p>\n<p>An interesting garage might make me think, “Hey I wonder what car Hank is working on this week?” A good blog makes me think, Hank’s site is so fascinating, I should go talk to him about it or make my own.</p>\n<hr>\n<p>A lovely thing, personal websites are!</p>\n",
				"content_text": "Is a personal blog or general-purpose more like a small shop or your local garage?\n\n---- \n\nThey’re a bit of a [calm business](https://justinjackson.ca/calm-company). \n\nA corner store with a friendly owner/operator. Never grows beyond its means. Operates at relatively-human scale. Greet every customer, have a nice conversation, send them away with something interesting. Aims for an [infinite game](https://en.wikipedia.org/wiki/Finite_and_Infinite_Games), not limitless growth. It may not ever turn a profit, but that’s okay; neither do most restaurants or start-ups.\n\nA good neighborhood store might make me think, “I wonder if Sam has anything interest in stock this week?” A good blog should make me hope Sam has new posts, with confidence that they’re probably pretty good.\n\n---- \n\nBut, a personal web space is a bit of a [sports car in a workshop](https://www.youtube.com/watch?v=gC5-MoDUuRg) too.\n\nIt’s meant to enjoy, for driving. But also for nostalgia, for looking and remembering. Showing it off is important! It's not quite as good as what you could go out and buy new, but that's most of the charm. Working on it is part of the fun, but often a source of frustration and expense.\n\nAn interesting garage might make me think, “Hey I wonder what car Hank is working on this week?” A good blog makes me think, Hank’s site is so fascinating, I should go talk to him about it or make my own.\n\n---- \n\nA lovely thing, personal websites are!\n",
				"date_published": "2024-04-26T05:35:19-07:00",
				"url": "https://therealadam.com/2024/04/26/personal-websites-are.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/20/a-big-bucket.html",
				"title": "A big bucket of text",
				"content_html": "<p>Matt Stein, <a href=\"https://mattstein.com/thoughts/how-i-use-obsidian/\">How I Use Obsidian</a>:</p>\n<blockquote>\n<p>It’s also just a heap of Markdown I’ve carried around and put Obsidian in charge of sometime late in 2021. Those plain text files are mine and they don’t need Obsidian to be useful; I can open the same folder with iA Writer or Sublime Text and get right to work.</p>\n</blockquote>\n<p>This is The Way to think about notes apps. Not a principle or lifestyle, but a layer of leverage over a big bucket of text.</p>\n<p>Don’t fret if it starts off as an unimpressive pile of ideas or an overwhelming and unorganized collection of disconnected ideas. Use tools to organize and resurface the ideas, but don’t let that be the end goal. The end goal is to think better thoughts!</p>\n",
				"content_text": "Matt Stein, [How I Use Obsidian](https://mattstein.com/thoughts/how-i-use-obsidian/):\n\n> It’s also just a heap of Markdown I’ve carried around and put Obsidian in charge of sometime late in 2021. Those plain text files are mine and they don’t need Obsidian to be useful; I can open the same folder with iA Writer or Sublime Text and get right to work.\n\nThis is The Way to think about notes apps. Not a principle or lifestyle, but a layer of leverage over a big bucket of text. \n\nDon’t fret if it starts off as an unimpressive pile of ideas or an overwhelming and unorganized collection of disconnected ideas. Use tools to organize and resurface the ideas, but don’t let that be the end goal. The end goal is to think better thoughts!\n",
				"date_published": "2024-04-20T10:03:12-07:00",
				"url": "https://therealadam.com/2024/04/20/a-big-bucket.html",
				"tags": ["Notes"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/11/recently-in-pair.html",
				"title": "Recently in pair programming with AI",
				"content_html": "<p>My recent experience with GitHub Copilot Chat (non-autocomplete assistance) and Raycast’s ChatGPT-3.5 integrations lead me to think that prompting will be a crucial skill for most knowledge workers. (I’m hardly the first person to this observation!) Not quite so obtusely as using a Unix shell and command-line programs is for programmers. But, still a thing one will want to know how to get the most out of.</p>\n<p>A few examples:</p>\n<ul>\n<li>Talking/prompting a model into doing permutations and set math. This one is still blowing my mind a little. How does a word predictor do symbolic math? Not so much a stochastic parrot in this case!</li>\n<li>Coaching a model to write like me, provide useful feedback, and not use the boring/hype-y voice of Twitter or whatever a model was trained on. Hitting “regenerate” a few times to get options on different prose to include. Using the model as an always-available writing partner. In particular for “help me keep going/writing here…”.</li>\n<li>Building up programs from scratch with the assistance of a Copilot. Incrementally improving. Asking it for references on how to understand the library in question. Asking it for ideas on how to troubleshoot the program. I’ve used this to generate the boilerplate to get started with <a href=\"https://codemirror.net\">CodeMirror</a>, with <em>some</em> success.</li>\n</ul>\n<h2 id=\"elsewhere\">Elsewhere</h2>\n<p>Simon Willison, <a href=\"https://simonwillison.net/2024/Mar/23/building-c-extensions-for-sqlite-with-chatgpt-code-interpreter/\">Building and testing C extensions for SQLite with ChatGPT Code Interpreter</a>:</p>\n<blockquote>\n<p>One of the infuriating things about working with ChatGPT Code Interpreter is that it often denies abilities that you know it has.</p>\n</blockquote>\n<p>A non-trivial share of the prompting here is to remind ChatGPT “this is C and <code>gcc</code>, you know this”. I am not sure whether to eye-roll or laugh. Maybe part of the system prompt is “occasionally, you’ll require a little extra encouragement, just like a less-experienced human.” Simon <em>did</em> manage to give ChatGPT enough courage to build the extension, though!</p>\n<p>Despite needing to encourage the thing, this bit is promising:</p>\n<blockquote>\n<p>Here’s the thing I enjoy most about using Code Interpreter for these kinds of prototypes: since the prompts are short, and there’s usually a delay of 30s+ between each prompt while it does its thing, I can do the whole thing on my phone while doing other things.</p>\n<p>In this particular case I started out in bed, then got up, fed the dog, made coffee and pottered around the house for a bit—occasionally glancing back at my screen and poking it in a new direction with another prompt.</p>\n<p>This almost doesn’t count as a project at all. It began as mild curiosity, and I only started taking it seriously when it became apparent that it was likely to produce a working result.</p>\n<p>I only switched to my laptop right at the end, to try out the macOS compilation steps.</p>\n</blockquote>\n<p>Ilia Choly, <a href=\"https://choly.ca/post/semgrep-autofix-llm/\">Semgrep: AutoFixes using LLMs</a>:</p>\n<blockquote>\n<p>Although the built-in autofix feature is powerful, it’s limited to simple AST transforms. I’m currently exploring the idea of fixing semgrep matches using a Large Language Model (LLM). More specifically, each match is individually fed into the LLM and replaced with the response. To make this possible, I’ve created a tool called semgrepx, which can be thought of as xargs for semgrep. I then use semgrepx to rewrite the matches using the fantastic llm tool.</p>\n</blockquote>\n<p>I’ve yet to land a big automated refactoring generated solely by abstract syntax tree-powered refactoring tools. By extension, I definitely haven’t tried marrying AST-based mass refactoring with an LLM. But it sounds neat!</p>\n",
				"content_text": "My recent experience with GitHub Copilot Chat (non-autocomplete assistance) and Raycast’s ChatGPT-3.5 integrations lead me to think that prompting will be a crucial skill for most knowledge workers. (I’m hardly the first person to this observation!) Not quite so obtusely as using a Unix shell and command-line programs is for programmers. But, still a thing one will want to know how to get the most out of.\n\nA few examples:\n\n- Talking/prompting a model into doing permutations and set math. This one is still blowing my mind a little. How does a word predictor do symbolic math? Not so much a stochastic parrot in this case!\n- Coaching a model to write like me, provide useful feedback, and not use the boring/hype-y voice of Twitter or whatever a model was trained on. Hitting “regenerate” a few times to get options on different prose to include. Using the model as an always-available writing partner. In particular for “help me keep going/writing here…”.\n- Building up programs from scratch with the assistance of a Copilot. Incrementally improving. Asking it for references on how to understand the library in question. Asking it for ideas on how to troubleshoot the program. I’ve used this to generate the boilerplate to get started with [CodeMirror](https://codemirror.net), with _some_ success.\n\n## Elsewhere\nSimon Willison, [Building and testing C extensions for SQLite with ChatGPT Code Interpreter](https://simonwillison.net/2024/Mar/23/building-c-extensions-for-sqlite-with-chatgpt-code-interpreter/):\n\n> One of the infuriating things about working with ChatGPT Code Interpreter is that it often denies abilities that you know it has.\n\nA non-trivial share of the prompting here is to remind ChatGPT “this is C and `gcc`, you know this”. I am not sure whether to eye-roll or laugh. Maybe part of the system prompt is “occasionally, you’ll require a little extra encouragement, just like a less-experienced human.” Simon _did_ manage to give ChatGPT enough courage to build the extension, though!\n\nDespite needing to encourage the thing, this bit is promising:\n\n> Here’s the thing I enjoy most about using Code Interpreter for these kinds of prototypes: since the prompts are short, and there’s usually a delay of 30s+ between each prompt while it does its thing, I can do the whole thing on my phone while doing other things.\n> \n> In this particular case I started out in bed, then got up, fed the dog, made coffee and pottered around the house for a bit—occasionally glancing back at my screen and poking it in a new direction with another prompt.\n> \n> This almost doesn’t count as a project at all. It began as mild curiosity, and I only started taking it seriously when it became apparent that it was likely to produce a working result.\n> \n> I only switched to my laptop right at the end, to try out the macOS compilation steps.\n\nIlia Choly, [Semgrep: AutoFixes using LLMs](https://choly.ca/post/semgrep-autofix-llm/):\n\n> Although the built-in autofix feature is powerful, it’s limited to simple AST transforms. I’m currently exploring the idea of fixing semgrep matches using a Large Language Model (LLM). More specifically, each match is individually fed into the LLM and replaced with the response. To make this possible, I’ve created a tool called semgrepx, which can be thought of as xargs for semgrep. I then use semgrepx to rewrite the matches using the fantastic llm tool.\n\nI’ve yet to land a big automated refactoring generated solely by abstract syntax tree-powered refactoring tools. By extension, I definitely haven’t tried marrying AST-based mass refactoring with an LLM. But it sounds neat!\n",
				"date_published": "2024-04-11T08:34:27-07:00",
				"url": "https://therealadam.com/2024/04/11/recently-in-pair.html",
				"tags": ["ai","simon-willison"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/11/juniorsseniors-and-incrementalvision.html",
				"title": "Juniors/seniors and incremental/vision development",
				"content_html": "<p>The ability to focus on one concern at a time is the mark of a senior developer. It takes experience to ignore other factors as noise. It takes time to learn how to avoid tripping on distractions and side-quests.</p>\n<p>Ben Nadel, <a href=\"https://www.bennadel.com/blog/4352-only-so\">Only Solve One Problem at a Time</a>:</p>\n<blockquote>\n<p>This lesson hits me hard in the feels because when I reflect on my own work history, some of the biggest mistakes that I&rsquo;ve made in my career revolve around trying to solve multiple problems at the same time. Perhaps one of the most embarrassing examples of this is when I was attempting to learn OOP (Object Oriented Programming) on a new project. This was two problems: I had to build a new application; and, I tried to do it in a new programming paradigm.</p>\n<p>Needless to say, the project ended up coming in months late and was a horrible mess of hard-to-maintain code. Trying to solve two problems at the same time ended in disaster.</p>\n</blockquote>\n<p>Nearly universal advice for developers of all experience levels!</p>\n<p>The trick for juniors is, they’re always learning more than one thing at a time, often on accident. They want to build a feature, but it requires a new library, and it requires learning the library. They went to start up a development server, but then something weird happens with Unix. It’s the essential challenge of being a junior – they’re just getting started, so they’re always learning a couple of things at a time.</p>\n<p>Perversely, a senior who can see the whole feature/change in their head is sometimes tempted to push the whole thing through in one (large) change. They’re tempted to make the entire thing happen in one outburst of crisp thinking.</p>\n<p>Developers who have learned to avoid pitfalls and gotchas sometimes have to relearn how to work incrementally. Juniors (frequently) don&rsquo;t have this problem. If they don&rsquo;t work incrementally, they won&rsquo;t make progress at all! (Caution: juniors that try to work like the seniors they see around them <em>will</em> fall into this trap.)</p>\n<p>That said, juniors <em>and</em> seniors both tend to struggle with:</p>\n<ul>\n<li>deciding when to focus vs. when to jump out of a rabbit hole</li>\n<li>building their own feedback loops with tests/compilers, jigs/scaffolding</li>\n<li>imagining and applying constraints</li>\n<li>using first-principle thinking to reduce the overwhelming possibility space of programming</li>\n</ul>\n<p>These skills don’t come with simple experience. One has to <em>decide</em> to apply them and <em>then</em> build up experience using them to keep development on-track, focused, and effective.</p>\n",
				"content_text": "The ability to focus on one concern at a time is the mark of a senior developer. It takes experience to ignore other factors as noise. It takes time to learn how to avoid tripping on distractions and side-quests.\n\nBen Nadel, [Only Solve One Problem at a Time](https://www.bennadel.com/blog/4352-only-so):\n> This lesson hits me hard in the feels because when I reflect on my own work history, some of the biggest mistakes that I've made in my career revolve around trying to solve multiple problems at the same time. Perhaps one of the most embarrassing examples of this is when I was attempting to learn OOP (Object Oriented Programming) on a new project. This was two problems: I had to build a new application; and, I tried to do it in a new programming paradigm.\n> \n> Needless to say, the project ended up coming in months late and was a horrible mess of hard-to-maintain code. Trying to solve two problems at the same time ended in disaster. \n\nNearly universal advice for developers of all experience levels!\n\nThe trick for juniors is, they’re always learning more than one thing at a time, often on accident. They want to build a feature, but it requires a new library, and it requires learning the library. They went to start up a development server, but then something weird happens with Unix. It’s the essential challenge of being a junior – they’re just getting started, so they’re always learning a couple of things at a time.\n\nPerversely, a senior who can see the whole feature/change in their head is sometimes tempted to push the whole thing through in one (large) change. They’re tempted to make the entire thing happen in one outburst of crisp thinking. \n\nDevelopers who have learned to avoid pitfalls and gotchas sometimes have to relearn how to work incrementally. Juniors (frequently) don't have this problem. If they don't work incrementally, they won't make progress at all! (Caution: juniors that try to work like the seniors they see around them _will_ fall into this trap.)\n\nThat said, juniors _and_ seniors both tend to struggle with:\n\n- deciding when to focus vs. when to jump out of a rabbit hole\n- building their own feedback loops with tests/compilers, jigs/scaffolding\n- imagining and applying constraints\n- using first-principle thinking to reduce the overwhelming possibility space of programming\n\nThese skills don’t come with simple experience. One has to _decide_ to apply them and _then_ build up experience using them to keep development on-track, focused, and effective.\n",
				"date_published": "2024-04-11T07:51:59-07:00",
				"url": "https://therealadam.com/2024/04/11/juniorsseniors-and-incrementalvision.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/08/trim-the-attention.html",
				"title": "Trim the attention sails",
				"content_html": "<p>In America, the 2024 election cycle is unlikely to amuse <em>anyone</em>. Maybe this is a rallying point for “unifying” the country: a near-universal loathing of our politicians, how they get themselves elected, and the outcomes they deliver to us. Let alone the new media that reports on them.</p>\n<p>Ahead of the inevitable hell-cycle, I’ve trimmed my attention sails a bit. The general idea is to remove feeds and notifications from my daily routine which are monetized primarily by writing doom-y, grab-y headlines. I’m looking at you in particular, <em>New York Times</em>. But it applies to just about everything with headlines. I’ve disabled all notifications from <em>The Economist</em> and Apple News. I read them once a week. That’s plenty.</p>\n<p>Unrelated to the election, I deleted the Twitter and Instagram apps. The web app is mostly equivalent in Twitter’s case, no loss there. Instagram’s mobile web app is surprisingly mediocre. The point, in both cases, is to put a few more steps, a bit more friction, between me and randomly scrolling an algorithmic, attention-hungry feed. I’ve since found that the friction of loading these two as web apps is <em>great</em>. I do indeed look at them far, far less. On the other hand, their web apps are intentionally just-okay. It seems to me that any organization that can put together an excellent iOS app should be able to do the same on mobile web. Reader, let me tell you, they don’t.</p>\n<p>I found the settings in Lyft and DoorDash that prevent them from sending advertisements-as-push-notifications. They do exist! Highly recommended.</p>\n<p>Mute lists, they’re also fantastic. All the names and teams and keywords that tend to mean “here’s a post about the political horse-race” are scrubbed from my timeline. Even better, I can see when they’re scrubbed and dip in to see if things are as unproductive as I remember. (Thanks for that little detail, <a href=\"https://tapbots.com/ivory/\">Ivory</a>.)</p>\n<p>Previously: <a href=\"https://therealadam.com/2022/12/27/think-your-thoughts.html\">Think Your Thoughts</a>.</p>\n",
				"content_text": "In America, the 2024 election cycle is unlikely to amuse _anyone_. Maybe this is a rallying point for “unifying” the country: a near-universal loathing of our politicians, how they get themselves elected, and the outcomes they deliver to us. Let alone the new media that reports on them.\n\nAhead of the inevitable hell-cycle, I’ve trimmed my attention sails a bit. The general idea is to remove feeds and notifications from my daily routine which are monetized primarily by writing doom-y, grab-y headlines. I’m looking at you in particular, _New York Times_. But it applies to just about everything with headlines. I’ve disabled all notifications from _The Economist_ and Apple News. I read them once a week. That’s plenty.\n\nUnrelated to the election, I deleted the Twitter and Instagram apps. The web app is mostly equivalent in Twitter’s case, no loss there. Instagram’s mobile web app is surprisingly mediocre. The point, in both cases, is to put a few more steps, a bit more friction, between me and randomly scrolling an algorithmic, attention-hungry feed. I’ve since found that the friction of loading these two as web apps is _great_. I do indeed look at them far, far less. On the other hand, their web apps are intentionally just-okay. It seems to me that any organization that can put together an excellent iOS app should be able to do the same on mobile web. Reader, let me tell you, they don’t.\n\nI found the settings in Lyft and DoorDash that prevent them from sending advertisements-as-push-notifications. They do exist! Highly recommended.\n\nMute lists, they’re also fantastic. All the names and teams and keywords that tend to mean “here’s a post about the political horse-race” are scrubbed from my timeline. Even better, I can see when they’re scrubbed and dip in to see if things are as unproductive as I remember. (Thanks for that little detail, [Ivory](https://tapbots.com/ivory/).)\n\nPreviously: [Think Your Thoughts](https://therealadam.com/2022/12/27/think-your-thoughts.html).\n",
				"date_published": "2024-04-08T09:04:58-07:00",
				"url": "https://therealadam.com/2024/04/08/trim-the-attention.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/04/06/detroits-airport-dtw.html",
				
				"content_html": "<p>Detroit’s airport (DTW) is…kinda decent? It’s got a monorail and a light show set to songs of Motown. At the very least, it’s not a bad coffee shop? 🙃</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Detroit’s airport (DTW) is…kinda decent? It’s got a monorail and a light show set to songs of Motown. At the very least, it’s not a bad coffee shop? 🙃\n\n<img src=\"uploads/2024/951643276e.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2024-04-06T07:59:24-07:00",
				"url": "https://therealadam.com/2024/04/06/detroits-airport-dtw.html",
				"tags": ["travel"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/03/31/blogs-wereare-a.html",
				"title": "Blogs were/are a fun moment",
				"content_html": "<p>Manuel Moreale, <a href=\"https://manuelmoreale.com/@/page/EMdQMyHxCynwUzZ2\">Why I write</a>:</p>\n<blockquote>\n<p>But the reason why I started is long gone at this point. I started the blog as some sort of public accountability tool and it’s now everything but that. I don’t write to be accountable. I probably should.</p>\n</blockquote>\n<p>Manuel asks a <a href=\"https://manuelmoreale.com/pb-manton-reece\">lot</a> <a href=\"https://manuelmoreale.com/pb-chris-coyer\">of</a> <a href=\"https://manuelmoreale.com/pb-taylor-troesh\">folks</a> <a href=\"https://manuelmoreale.com/pb-toby-shorin\">about</a> <a href=\"https://manuelmoreale.com/pb-cassidy-williams\">why</a> <a href=\"https://manuelmoreale.com/pb-jim-nielsen\">they</a> <a href=\"https://manuelmoreale.com/pb-tom-macwright\">started</a> <a href=\"https://manuelmoreale.com/pb-derek-sivers\">writing</a> their blogs. It’s a great question! Some folks want to get weird, others can’t not write and putting it online as good as anything, still others want to connect with a community.</p>\n<p>That last one, connecting with a community, is closest to my answer. I started because there was so much excitement, energy, and connection in the early 2000s blogs. It was a real scene. And, plenty of invention! Before there was centralized social media and web 2.0 there was decentralized blogging. An earnest attempt to take the technology of peer-to-peer file sharing and build something besides music sharing on it. It was a fun moment.</p>\n",
				"content_text": "Manuel Moreale, [Why I write](https://manuelmoreale.com/@/page/EMdQMyHxCynwUzZ2):\n\n> But the reason why I started is long gone at this point. I started the blog as some sort of public accountability tool and it’s now everything but that. I don’t write to be accountable. I probably should.\n\nManuel asks a [lot](https://manuelmoreale.com/pb-manton-reece) [of](https://manuelmoreale.com/pb-chris-coyer) [folks](https://manuelmoreale.com/pb-taylor-troesh) [about](https://manuelmoreale.com/pb-toby-shorin) [why](https://manuelmoreale.com/pb-cassidy-williams) [they](https://manuelmoreale.com/pb-jim-nielsen) [started](https://manuelmoreale.com/pb-tom-macwright) [writing](https://manuelmoreale.com/pb-derek-sivers) their blogs. It’s a great question! Some folks want to get weird, others can’t not write and putting it online as good as anything, still others want to connect with a community.\n\nThat last one, connecting with a community, is closest to my answer. I started because there was so much excitement, energy, and connection in the early 2000s blogs. It was a real scene. And, plenty of invention! Before there was centralized social media and web 2.0 there was decentralized blogging. An earnest attempt to take the technology of peer-to-peer file sharing and build something besides music sharing on it. It was a fun moment.\n",
				"date_published": "2024-03-31T09:42:27-07:00",
				"url": "https://therealadam.com/2024/03/31/blogs-wereare-a.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/03/28/avoid-the-ternary.html",
				"title": "Avoid the ternary operator, I’m begging you",
				"content_html": "<p>Allow me a bit of a soapbox-rant. A spicy take, as we might say these days.</p>\n<p><strong>You’re using the ternary operator wrong in Ruby, JavaScript, and almost everything else. It’s for expressions, not control flow.</strong></p>\n<hr>\n<p>My personal ternary journey of discovery, delight, and distaste:</p>\n<ul>\n<li>In the old C days: what is this noise? What does a colon even mean in this language? Is this even syntactically valid?</li>\n<li>Later, in verbose languages like Java: oh I get it, let me show off by using it. I like that I can compress five simple lines of conditional down to one.</li>\n<li>Currently, seeing how it’s used in shell and React code: actually this is awful let&rsquo;s never use this. Delineating the arms of a conditional with one character is awful for scanning and discovery code.</li>\n<li>Even when it’s appropriate, I feel a little bad.</li>\n</ul>\n<p>The nuanced take: a one-condition ternary with no more than 4 tokens is maybe okay. If I can’t fit my ternary expression in 80 characters, switch to an if/else conditional. (It’s not that bad!)</p>\n<pre><code>// fine, I guess\nfoo = bar ? baz : quux\n\n// stop this, I'm begging you\nmsg = bar ? ...dozens of lines of code\n          : ...dozens more lines of code\n</code></pre>\n<hr>\n<p>Why I try to avoid it:</p>\n<ul>\n<li>in the year 2024, your editor can write conditionals for you\n<ul>\n<li>some folks can&rsquo;t even keep your ternaries at 10 tokens, let alone 5</li>\n<li>and it’s literally showing</li>\n<li>hence, I’m here writing about it</li>\n</ul>\n</li>\n<li>the ternary operator is not for control flow, stop that\n<ul>\n<li>the ternary operator is really only suitable for assigning values based on other values\n<ul>\n<li>for example, in the expression <code>val = foo ? bar : baz</code></li>\n<li><code>val</code> depends on <code>foo</code></li>\n<li>the ternary operator is a good way to represent dependency/correlation!</li>\n</ul>\n</li>\n<li>I don&rsquo;t care what React&rsquo;s conventions are anymore\n<ul>\n<li>they’re not good in this regard</li>\n<li>use conditionals for control flow</li>\n<li>use variables to assign meaningful names to big chunks of markup</li>\n<li>please, stop with the boolean and ternary logic</li>\n</ul>\n</li>\n<li>I&rsquo;m literally writing this before the sun rises, asking you to stop</li>\n</ul>\n</li>\n<li>ternaries don&rsquo;t airlift/refactor well\n<ul>\n<li>you can&rsquo;t pluck one bit of code out of a ternary and drop it somewhere else</li>\n<li>I feel this one in my bones but can’t think of a short example</li>\n<li>(citation needed)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>Bonus track: stop adding conditional clauses!</p>\n<pre><code>// fine\nif safe-to-release\n  launch-the-missiles\nelse\n  reset-to-ready\nend\n\n// bad, you got some refactoring to do\nif safe-to-release &amp;&amp; target-acquired &amp;&amp; something-that-seemed-right-once &amp;&amp; tuesday || national-holiday\n...\nend\n</code></pre>\n<p>I&rsquo;m guilty of this temptation to add “just one more conditional!” I regret it.</p>\n<p>It makes code difficult to reason about. It’s basically impossible to tell people <em>when</em> the thing will happen in the “bad” example.</p>\n<p>If you manage to get something right in multiple conditions today, you&rsquo;re probably only making it harder for yourself (or someone else) tomorrow.</p>\n<p>I will support you 90% of the time if you want to take 30 extra minutes to turn a multi-clause condition into a simpler structure. Your teammates will hail you as a hero later when they need to read or modify said simpler structure!</p>\n<hr>\n<p>A disproportionate percentage of bugs hide in conditionals. If they’re easier to read and change, hopefully we’ll write fewer bugs!</p>\n",
				"content_text": "Allow me a bit of a soapbox-rant. A spicy take, as we might say these days.\n\n**You’re using the ternary operator wrong in Ruby, JavaScript, and almost everything else. It’s for expressions, not control flow.**\n\n---- \nMy personal ternary journey of discovery, delight, and distaste:\n\n- In the old C days: what is this noise? What does a colon even mean in this language? Is this even syntactically valid?\n- Later, in verbose languages like Java: oh I get it, let me show off by using it. I like that I can compress five simple lines of conditional down to one.\n- Currently, seeing how it’s used in shell and React code: actually this is awful let's never use this. Delineating the arms of a conditional with one character is awful for scanning and discovery code.\n- Even when it’s appropriate, I feel a little bad.\n\nThe nuanced take: a one-condition ternary with no more than 4 tokens is maybe okay. If I can’t fit my ternary expression in 80 characters, switch to an if/else conditional. (It’s not that bad!)\n\n\t// fine, I guess\n\tfoo = bar ? baz : quux\n\t\n\t// stop this, I'm begging you\n\tmsg = bar ? ...dozens of lines of code\n\t          : ...dozens more lines of code\n\n---- \nWhy I try to avoid it:\n\n- in the year 2024, your editor can write conditionals for you\n\t- some folks can't even keep your ternaries at 10 tokens, let alone 5\n\t- and it’s literally showing\n\t- hence, I’m here writing about it\n- the ternary operator is not for control flow, stop that\n\t- the ternary operator is really only suitable for assigning values based on other values\n\t\t- for example, in the expression `val = foo ? bar : baz`\n\t\t-  `val` depends on `foo`\n\t\t- the ternary operator is a good way to represent dependency/correlation!\n\t- I don't care what React's conventions are anymore\n\t\t- they’re not good in this regard\n\t\t- use conditionals for control flow\n\t\t- use variables to assign meaningful names to big chunks of markup\n\t\t- please, stop with the boolean and ternary logic\n\t- I'm literally writing this before the sun rises, asking you to stop\n- ternaries don't airlift/refactor well\n\t- you can't pluck one bit of code out of a ternary and drop it somewhere else \n\t- I feel this one in my bones but can’t think of a short example\n\t- (citation needed)\n\n---- \nBonus track: stop adding conditional clauses!\n\n\t// fine\n\tif safe-to-release\n\t  launch-the-missiles\n\telse\n\t  reset-to-ready\n\tend\n\t\n\t// bad, you got some refactoring to do\n\tif safe-to-release && target-acquired && something-that-seemed-right-once && tuesday || national-holiday\n\t...\n\tend\n\nI'm guilty of this temptation to add “just one more conditional!” I regret it.\n\nIt makes code difficult to reason about. It’s basically impossible to tell people _when_ the thing will happen in the “bad” example. \n\nIf you manage to get something right in multiple conditions today, you're probably only making it harder for yourself (or someone else) tomorrow.\n\nI will support you 90% of the time if you want to take 30 extra minutes to turn a multi-clause condition into a simpler structure. Your teammates will hail you as a hero later when they need to read or modify said simpler structure!\n\n---- \nA disproportionate percentage of bugs hide in conditionals. If they’re easier to read and change, hopefully we’ll write fewer bugs!\n\n",
				"date_published": "2024-03-28T05:35:24-07:00",
				"url": "https://therealadam.com/2024/03/28/avoid-the-ternary.html",
				"tags": ["Code"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/03/26/psuedoprose.html",
				"title": "Psuedoprose",
				"content_html": "<p>Taylor Troesh’s <a href=\"https://taylor.town/pseudoprose\">pseudoprose</a> is a notation for writing/note-taking/thinking:</p>\n<blockquote>\n<p><strong>How to</strong></p>\n<ul>\n<li>Write in English, Spanish, whatever.</li>\n<li>Grammar is optional.</li>\n<li>Markdown is encouraged.</li>\n<li>Embed in any document with [[&hellip;]] brackets.</li>\n<li>Use {&hellip;} for comments.</li>\n<li>Use &lt;&lt;&hellip;&gt;&gt; for LLM instructions.</li>\n<li>“tk” means “todo”.</li>\n</ul>\n<p><strong>Why</strong></p>\n<ul>\n<li>Jot down notes/ideas quickly.</li>\n<li>Focus on semantics over syntax.</li>\n<li>Less text to edit.</li>\n<li>Offload grunt work to LLMS.</li>\n</ul>\n</blockquote>\n<p>Notably, also a notation for annotating LLM/AI/Copilot interactions directly into your text. For the wonks, a GPT-4 prompt is included to convert psuedoprose to well-formed Markdown without any code. What a world.</p>\n<p>Other folks’ ways of writing and taking notes are endlessly fascinating.</p>\n",
				"content_text": "Taylor Troesh’s [pseudoprose](https://taylor.town/pseudoprose) is a notation for writing/note-taking/thinking:\n\n> **How to**\n> \n> - Write in English, Spanish, whatever. \n> - Grammar is optional. \n> - Markdown is encouraged. \n> - Embed in any document with [[...]] brackets. \n> - Use {...} for comments. \n> - Use \\<\\<...\\>\\> for LLM instructions. \n> - “tk” means “todo”. \n> \n> **Why**\n> \n> - Jot down notes/ideas quickly. \n> - Focus on semantics over syntax. \n> - Less text to edit. \n> - Offload grunt work to LLMS.\n\n\nNotably, also a notation for annotating LLM/AI/Copilot interactions directly into your text. For the wonks, a GPT-4 prompt is included to convert psuedoprose to well-formed Markdown without any code. What a world.\n\nOther folks’ ways of writing and taking notes are endlessly fascinating.\n",
				"date_published": "2024-03-26T05:17:54-07:00",
				"url": "https://therealadam.com/2024/03/26/psuedoprose.html",
				"tags": ["notation","taylor-troesh"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/03/20/rails-generators-are.html",
				"title": "Rails generators are underrated",
				"content_html": "<p>Every experienced Rails developer should pick up Garrett Dimon’s <a href=\"https://garrettdimon.com/products/frictionless-generators\"><em>Frictionless Generators</em></a>. Generators are an often overlooked piece of the Rails puzzle. The book shines a light on getting the most out of generators in your Rails projects. It’s an amazing-looking digital object too, the illustrations are great.</p>\n<p>(Before I go further, it’s worth noting that Garrett Dimon sent me a review copy, acted on my feedback, and is generally a pal.)</p>\n<h2 id=\"you-should-customize-generators-and-write-your-own\">You should customize generators and write your own</h2>\n<p>Conventions, in the form of assumptions that are woven into the framework’s code but also exist as a contract of sorts, are essential to Rails. Following those conventions would not work well if creating a new model, resource, etc. wasn’t made easy <em>and consistent</em> without our friends <code>rails generate resource/model/etc</code>. These generators have been present in Rails since the beginning. I’ve used them hundreds of times and thought nothing of it.</p>\n<p>A few years ago, I realized that generators had become a public API in Rails and that re-use was encouraged. The <a href=\"https://guides.rubyonrails.org/generators.html\">guide is a good start</a>. I was able to knock out a simple generator for a novel, but conventional, part of our application. In the process, I realized a couple of things.</p>\n<p><strong>No one likes boilerplate and tedium</strong>. Generators automate the tedium of boilerplate. This is particularly helpful to less experienced developers, who are likely a bit overwhelmed with trying to comprehend decades of Rails evolution and legacy code (from their perspective) quickly.</p>\n<p><strong>Rails developers are under-utilizing this leverage</strong>. Every system that makes it past a few thousand lines of code (or several months in use) develops bespoke conventions. These are easier to follow if you can reduce the mental burden to “when you add a new thingy, run <code>rails g thingy</code>”. Added bonus: starting new conceptual pieces in your app from generators encourages consistency, itself an under-appreciated sustaining element in long-lived Rails applications.</p>\n<p>Luckily, someone was thinking the same thing I was…</p>\n<h2 id=\"garrett-knows-more-about-generators-than-anyone-i-know\">Garrett knows more about generators than anyone I know</h2>\n<p>The Rails guides for generators are okay. They whet the curiosity and appetite. But, they aren’t particularly deep. When I first tinkered with generators, I mostly learned by reading the code for <code>rails generate model/resource/etc</code>.</p>\n<p><em>Frictionless Generators</em> does not require one to jump right into reading code. It opens with ideas on the possibilities of developing with custom generators. Then, it moves onto the practicalities of writing one’s own generator and crafting a good developer experience. From there, it’s down the rabbit hole: learning about the APIs for defining generators, implementing the file-creation logic therein, writing help and documentation for them, generating files from templates, and customizing the built-in Rails generators.</p>\n<p>Garrett goes into as much depth on generators as any other technical author I know, on any topic. Did you know you can make HTTP requests and use their responses in generators? I did not, but Garrett does! Did you know that generators apply the same kind of “oh, yeah, that’s common sense” convention for copying files from generators into applications? I did not, but Garrett does! I don’t think I’d use all these ideas on every generator, but I like the idea that I can return to <em>Frictionless Generators</em> should I have an idea and wonder how the existing, low-friction APIs can help me.</p>\n<p>Further, Garrett offers frequent insights into the <em>developer experience</em> and <em>leverage</em> of building generators. On building generators for “fingertip feeling” so developers can easily (and frequently!) use them:</p>\n<blockquote>\n<p>I like to aim for no more than one value argument and one collection argument to keep generators easier to use. Everything else becomes an option.</p>\n</blockquote>\n<p>On approaching generators as high-leverage side-quests:</p>\n<blockquote>\n<p>Remember that the ease of use is generally inversely proportional to the length of your documentation. Assistance first. Brevity second. Content third. Or, be helpful first, concise second, and thorough third. That said, there are a few other categories of information that can be helpful.</p>\n</blockquote>\n<hr>\n<p>For me, a good technical book balances presentation of technical information, the right amount of detail, and wisdom on how to apply the two in practical ways. Garrett succeeds at striking that balance while keeping things moving and easy to follow.</p>\n<p>In short, recommended! Rails generators are underrated, whether you’re aware of their existence or not. Smart teams are customizing generators and writing their own bespoke generators. <a href=\"https://garrettdimon.com/products/frictionless-generators\">There’s a book on this now</a>, which you should check out if any of this resonated.</p>\n",
				"content_text": "Every experienced Rails developer should pick up Garrett Dimon’s [_Frictionless Generators_](https://garrettdimon.com/products/frictionless-generators). Generators are an often overlooked piece of the Rails puzzle. The book shines a light on getting the most out of generators in your Rails projects. It’s an amazing-looking digital object too, the illustrations are great.\n\n(Before I go further, it’s worth noting that Garrett Dimon sent me a review copy, acted on my feedback, and is generally a pal.)\n\n## You should customize generators and write your own\nConventions, in the form of assumptions that are woven into the framework’s code but also exist as a contract of sorts, are essential to Rails. Following those conventions would not work well if creating a new model, resource, etc. wasn’t made easy _and consistent_ without our friends `rails generate resource/model/etc`. These generators have been present in Rails since the beginning. I’ve used them hundreds of times and thought nothing of it.\n\nA few years ago, I realized that generators had become a public API in Rails and that re-use was encouraged. The [guide is a good start](https://guides.rubyonrails.org/generators.html). I was able to knock out a simple generator for a novel, but conventional, part of our application. In the process, I realized a couple of things.\n\n**No one likes boilerplate and tedium**. Generators automate the tedium of boilerplate. This is particularly helpful to less experienced developers, who are likely a bit overwhelmed with trying to comprehend decades of Rails evolution and legacy code (from their perspective) quickly.\n\n**Rails developers are under-utilizing this leverage**. Every system that makes it past a few thousand lines of code (or several months in use) develops bespoke conventions. These are easier to follow if you can reduce the mental burden to “when you add a new thingy, run `rails g thingy`”. Added bonus: starting new conceptual pieces in your app from generators encourages consistency, itself an under-appreciated sustaining element in long-lived Rails applications.\n\nLuckily, someone was thinking the same thing I was…\n\n## Garrett knows more about generators than anyone I know\nThe Rails guides for generators are okay. They whet the curiosity and appetite. But, they aren’t particularly deep. When I first tinkered with generators, I mostly learned by reading the code for `rails generate model/resource/etc`.\n\n_Frictionless Generators_ does not require one to jump right into reading code. It opens with ideas on the possibilities of developing with custom generators. Then, it moves onto the practicalities of writing one’s own generator and crafting a good developer experience. From there, it’s down the rabbit hole: learning about the APIs for defining generators, implementing the file-creation logic therein, writing help and documentation for them, generating files from templates, and customizing the built-in Rails generators.\n\nGarrett goes into as much depth on generators as any other technical author I know, on any topic. Did you know you can make HTTP requests and use their responses in generators? I did not, but Garrett does! Did you know that generators apply the same kind of “oh, yeah, that’s common sense” convention for copying files from generators into applications? I did not, but Garrett does! I don’t think I’d use all these ideas on every generator, but I like the idea that I can return to _Frictionless Generators_ should I have an idea and wonder how the existing, low-friction APIs can help me.\n\nFurther, Garrett offers frequent insights into the _developer experience_ and _leverage_ of building generators. On building generators for “fingertip feeling” so developers can easily (and frequently!) use them:\n\n> I like to aim for no more than one value argument and one collection argument to keep generators easier to use. Everything else becomes an option.\n\nOn approaching generators as high-leverage side-quests:\n\n> Remember that the ease of use is generally inversely proportional to the length of your documentation. Assistance first. Brevity second. Content third. Or, be helpful first, concise second, and thorough third. That said, there are a few other categories of information that can be helpful.\n\n---- \nFor me, a good technical book balances presentation of technical information, the right amount of detail, and wisdom on how to apply the two in practical ways. Garrett succeeds at striking that balance while keeping things moving and easy to follow.\n\nIn short, recommended! Rails generators are underrated, whether you’re aware of their existence or not. Smart teams are customizing generators and writing their own bespoke generators. [There’s a book on this now](https://garrettdimon.com/products/frictionless-generators), which you should check out if any of this resonated.\n\n",
				"date_published": "2024-03-20T15:55:56-07:00",
				"url": "https://therealadam.com/2024/03/20/rails-generators-are.html",
				"tags": ["rails","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/03/13/collective-flow.html",
				"title": "Collective flow",
				"content_html": "<p>Dave Rupert, <a href=\"https://daverupert.com/2024/01/play-at-work/\">Play at work</a>:</p>\n<blockquote>\n<p>I’ve talked about this before in the context of prototyping and play and how we worked at Paravel. It’s a lot like playing baseball; each member of the team showing up to practice, volleying work (in screenshots, short videos, or demos), pushing changes, communicating thoughts and challenges in the moment outside the confines of slotted meeting times. Me and my coworkers, having a catch.</p>\n</blockquote>\n<p>Several years ago, when I was doing improv, I was rehearsing for a musical, of all things. At the same time we were getting started with table reads and gel’ing as a cast, two other shows were rehearsing in the same theater. One show was about to open, very much having their thing dialed in. Another cast was somewhere in the middle, having figured out what they were about but still trying to get the execution just right. Everywhere in the theatre, there was creation and exploration energy and it was one of the most awesome things I’ve done. This despite not liking musical theater much!</p>\n<hr>\n<p>I don’t like the idea of “return to office” and I don’t think you could make it work anyway. The social momentum that kept a critical mass of people in one office has been broken, you can’t put that toothpaste back in the tube.</p>\n<p>That said, I have yet to feel that same energy in remote work that I did in a local theatre on rehearsal night while various groups were <em>making</em> something <em>together</em>, in the <em>moment</em>, and iterating on it as quickly as they could share a glance or read through a scene.</p>\n<p>I bet <em>some</em> teams have figured out how to feel this way in remote/async setups. But, it feels like most are still running the old in-person playbook that we learned, and sometimes thrived with, over the past years and decades of our careers.</p>\n",
				"content_text": "Dave Rupert, [Play at work](https://daverupert.com/2024/01/play-at-work/):\n\n> I’ve talked about this before in the context of prototyping and play and how we worked at Paravel. It’s a lot like playing baseball; each member of the team showing up to practice, volleying work (in screenshots, short videos, or demos), pushing changes, communicating thoughts and challenges in the moment outside the confines of slotted meeting times. Me and my coworkers, having a catch.\n\nSeveral years ago, when I was doing improv, I was rehearsing for a musical, of all things. At the same time we were getting started with table reads and gel’ing as a cast, two other shows were rehearsing in the same theater. One show was about to open, very much having their thing dialed in. Another cast was somewhere in the middle, having figured out what they were about but still trying to get the execution just right. Everywhere in the theatre, there was creation and exploration energy and it was one of the most awesome things I’ve done. This despite not liking musical theater much!\n\n---- \nI don’t like the idea of “return to office” and I don’t think you could make it work anyway. The social momentum that kept a critical mass of people in one office has been broken, you can’t put that toothpaste back in the tube.\n\nThat said, I have yet to feel that same energy in remote work that I did in a local theatre on rehearsal night while various groups were _making_ something _together_, in the _moment_, and iterating on it as quickly as they could share a glance or read through a scene.\n\nI bet _some_ teams have figured out how to feel this way in remote/async setups. But, it feels like most are still running the old in-person playbook that we learned, and sometimes thrived with, over the past years and decades of our careers.\n",
				"date_published": "2024-03-13T05:42:53-07:00",
				"url": "https://therealadam.com/2024/03/13/collective-flow.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/29/yes-and-despite.html",
				"title": "“Yes, and” despite pessimistic engineering intuitions",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>As engineers, we often face the consequences of shallow ideas embraced exuberantly. Despite those experiences, we should try to solve future problems instead of re-litigating problems-past.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Engineers put too much value on their ability to spot flaws in ideas. It’s only worth something in certain situations.</p><p>— Thorsten Ball, <a href=\"https://registerspill.thorstenball.com/p/63-unpopular-opinions\">63 Unpopular Opinions</a></p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Don’t be edge-case Eddie, wont-scale Walter, legacy code Lonnie, or reasons Reggie. At least <em>try</em> to think around those issues and <em>solve the problem.</em></p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>This is very much a note to my previous self(s).</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Pay attention to intuitive negative emotion…If you’ve been asked for quick estimates a bunch, you might have noticed that sometimes the request triggers negative emotions: fear, anxiety, confusion, etc. You get that sinking feeling in the pit of your stomach. “Oh crap”, you think, “this is not going to be easy.” For me (and most experienced software engineers), there are certain kinds of projects that trigger this feeling. We’re still pattern matching, but now we’re noticing a certain kind of project that resists estimation, or a kind of project that is likely to go poorly.</p><p>– Jacob Kaplan-Moss, <a href=\"https://jacobian.org/2021/jun/2/swag-estimates/#how-to-swag\">The art of the SWAG</a></p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Jacob recommends noting how intuition and emotion are natural and not entirely negative influences on the process of evaluating ideas. The trick, he says, is to pause and switch to <em>deeply thinking</em> through the idea (or estimate) you’re presented with.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>This, again, is very much a note to my previous self(s).</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Now, if you’ll excuse me, I need to get back to brainstorming and estimating this time machine, so I can deliver this advice to my former self.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-02-29T10:37:00-07:00",
				"url": "https://therealadam.com/2024/02/29/yes-and-despite.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/28/you-learn-faster.html",
				"title": "You learn faster by falling down",
				"content_html": "<p>Julia Galef, <a href=\"https://en.wikipedia.org/wiki/The_Scout_Mindset\"><em>The Scout Mindset</em></a>:</p>\n<blockquote>\n<p>The “self-belief” model of motivation assumes that if you acknowledge the possibility of failure, then you’ll be too demoralized or afraid to take risks. In that model, people who believe that failure is unthinkable are the ones who try the hardest to succeed. Yet in practice, things often seem to work the other way around—accepting the possibility of failure in advance is liberating. It makes you bold, not timid. It’s what gives you the courage to take the risks required to achieve something big.</p>\n</blockquote>\n<p>One of the most impactful ways I’ve adapted my thinking over the years, if only modestly successfully, has been to fear failure less and accept small downsides more easily. There’s way more world out there for those willing to trip or even fall now and then.</p>\n",
				"content_text": "Julia Galef, [_The Scout Mindset_](https://en.wikipedia.org/wiki/The_Scout_Mindset):\n\n> The “self-belief” model of motivation assumes that if you acknowledge the possibility of failure, then you’ll be too demoralized or afraid to take risks. In that model, people who believe that failure is unthinkable are the ones who try the hardest to succeed. Yet in practice, things often seem to work the other way around—accepting the possibility of failure in advance is liberating. It makes you bold, not timid. It’s what gives you the courage to take the risks required to achieve something big.\n\nOne of the most impactful ways I’ve adapted my thinking over the years, if only modestly successfully, has been to fear failure less and accept small downsides more easily. There’s way more world out there for those willing to trip or even fall now and then.\n",
				"date_published": "2024-02-28T10:30:00-07:00",
				"url": "https://therealadam.com/2024/02/28/you-learn-faster.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/27/building-software-is.html",
				"title": "Building software is great",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>…even if some days working in corporations or under unwanted pressure makes it considerably less fun. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>I also just don’t especially want to stop thinking about code. I don’t want to stop writing sentences in my own voice. I get a lot of joy from craft. It’s not a universal attitude toward work – from what I can tell, Gen Z is much more anti-work and ready to automate away their jobs – but I’ve always been thankful that programming is a craft that pays a good living wage. I’d be a luthier, photographer, or, who knows, if those jobs were as viable and available. But programming lets you write and think all day. Writing, both code and prose, for me, is both an end product and an end in itself. I don’t want to automate away the things that give me joy.</p>\n<!-- /wp:paragraph --><cite>– Tom MacWright, <a href=\"https://macwright.com/2023/04/15/ai.html\">The One About AI</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>What a great distillation of what makes working on software great! It’s an opportunity to think all day, earning a good wage doing so. Sometimes, to make something of value. Even more rarely, to make something of lasting value. Most of all, to be challenged every day. On the good days, it’s the future we were promised!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>Other days, it’s a bit much. Corporations and all their baggage will get ya down. Deadlines, communication, coordination are how one makes big things, but they have their drawbacks. They (can) drain all the energy and excitement of <em>making</em> something.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There <em>are</em>  jobs that sound exciting from the outside or on paper. Driving race cars and being around motorsport, sounds exciting! But it’s probably a lot of toil, intense competition, and very little invention. Imagineering at Disney is likely immensely rewarding when an idea makes it all the way to the real world or a theme park, every several years. Between those years, it’s likely equal amounts of frustration and the friction of working at a giant company.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So, for me, building software it is. Even on the days when deadlines and coordination have got me down. Thinking them through to put a bit of the magic of software into the world, it balances out.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-02-27T11:28:00-07:00",
				"url": "https://therealadam.com/2024/02/27/building-software-is.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/24/use-fewer-algorithmic.html",
				"title": "Use fewer algorithmic feeds, mostly search-based",
				"content_html": "<p>Rob Walker via Austin Kleon, <a href=\"https://austinkleon.com/2019/04/04/more-search-less-feed/\">More search, less feed</a>:</p>\n<blockquote>\n<p>I’ve been thinking a lot about the search box versus the feed,” he said. “Let’s take Twitter. When I open it, everybody wants me to think about something.</p>\n</blockquote>\n<p>A Ponzi ecosystem of hustle, reality distortion and projection, outright misinformation and propaganda. Plus, folks who just want to tell you the world is miserable. On the other hand, some funny takes and the occasional wholesome content. As goes social media, so goes humanity.</p>\n<p>That bit of (attempted) gallows humor aside, the linked article has a good angle: search for more information and do <em>actual research</em> rather than letting algorithmic-people filter it towards you. Caveat: this may have been more useful when that post was written in 2019 than it is in the reality of junky internet search that is 2024.</p>\n<p>Reminder: <a href=\"https://therealadam.com/2022/12/27/think-your-thoughts/\">think your own thoughts</a>.</p>\n",
				"content_text": "Rob Walker via Austin Kleon, [More search, less feed](https://austinkleon.com/2019/04/04/more-search-less-feed/):\n\n> I’ve been thinking a lot about the search box versus the feed,” he said. “Let’s take Twitter. When I open it, everybody wants me to think about something.\n\nA Ponzi ecosystem of hustle, reality distortion and projection, outright misinformation and propaganda. Plus, folks who just want to tell you the world is miserable. On the other hand, some funny takes and the occasional wholesome content. As goes social media, so goes humanity.\n\nThat bit of (attempted) gallows humor aside, the linked article has a good angle: search for more information and do _actual research_ rather than letting algorithmic-people filter it towards you. Caveat: this may have been more useful when that post was written in 2019 than it is in the reality of junky internet search that is 2024.\n\nReminder: [think your own thoughts](https://therealadam.com/2022/12/27/think-your-thoughts/).\n",
				"date_published": "2024-02-24T11:50:51-07:00",
				"url": "https://therealadam.com/2024/02/24/use-fewer-algorithmic.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/19/shell-history-is.html",
				"title": "Shell history is more valuable than shell customization",
				"content_html": "<p>Thorsten Ball, <a href=\"https://registerspill.thorstenball.com/p/which-command-did-you-run-1731-days\">Which command did you run 1731 days ago?</a>:</p>\n<blockquote>\n<p>Recipe for living a good life in the shell:</p>\n<ol>\n<li>Make sure it’s fast.</li>\n<li>Make sure its history can grow nearly infinitely and you can fuzzy-search through it.</li>\n</ol>\n</blockquote>\n<p>A sage developer once told me he didn’t maintain dotfiles at all. He worked across so many machines and servers that keeping a shell configuration working across many systems was folly. Instead, the most important thing for him was making sure his shell <em>history</em> was synced across all those computers.</p>\n<p>At first, I thought this was merely amusing. But the more I thought about it, the more I realized how deeply wise it is. Dotfiles, in the form of functions and aliases, abstract <em>and</em> ossify, the commands you <em>think</em> you’ll run frequently. But reverse searching through your total shell history provides you with access to commands you <em>have</em> run and lets you quickly edit/adapt them in-situ.</p>\n<p>This makes the history file for your shell (possibly) the most significant file on your computer. Not just because it’s useful, but as a working memory and a reflection of your <em>journey</em>.</p>\n",
				"content_text": "Thorsten Ball, [Which command did you run 1731 days ago?](https://registerspill.thorstenball.com/p/which-command-did-you-run-1731-days):\n\n> Recipe for living a good life in the shell:\n> \n> 1. Make sure it’s fast.\n> 2. Make sure its history can grow nearly infinitely and you can fuzzy-search through it.\n\n\nA sage developer once told me he didn’t maintain dotfiles at all. He worked across so many machines and servers that keeping a shell configuration working across many systems was folly. Instead, the most important thing for him was making sure his shell _history_ was synced across all those computers. \n\nAt first, I thought this was merely amusing. But the more I thought about it, the more I realized how deeply wise it is. Dotfiles, in the form of functions and aliases, abstract _and_ ossify, the commands you _think_ you’ll run frequently. But reverse searching through your total shell history provides you with access to commands you _have_ run and lets you quickly edit/adapt them in-situ.\n\nThis makes the history file for your shell (possibly) the most significant file on your computer. Not just because it’s useful, but as a working memory and a reflection of your _journey_.\n",
				"date_published": "2024-02-19T13:02:51-07:00",
				"url": "https://therealadam.com/2024/02/19/shell-history-is.html",
				"tags": ["unix","thorsten-ball"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/14/masters-of-the.html",
				"title": "Masters of the space between notes",
				"content_html": "<p>Virtuosity and speed are nice, in music and life. But you leave some space between the notes or slow things <em>way</em> down? Make some space in between the music for the <em>music</em> to happen? Now you’re cooking something good. For example:</p>\n<ul>\n<li>Aretha Franklin, the greatest of all time at making the most of the space between notes. As I’m fond of saying: there is no song Aretha Franklin could not perform slower <em>and</em> better than anyone else. Compare the tempo of <a href=\"https://www.youtube.com/watch?v=7BDw-H_hUzw\">Otis Redding’s <em>Respect</em></a> to <a href=\"https://www.youtube.com/watch?v=s3Itb17PXvw\">Aretha’s version</a>, both recorded in the same year.</li>\n<li>AC/DC, “Back In Black” or “Highway To Hell”. This is where I’d start rock and roll songwriting 101.</li>\n<li>D’Angelo, “Untitled (How Does It Feel?)”. Most of his work is an exemplar, he’s a master of making songs feel <em>spacious</em>.</li>\n<li>Joe Cocker, “With A Little Help From My Friends”. Take a jaunty, mid-tier Beatles song and draw it <em>way</em> out. This makes room for the huge, stacked vocals chorus. Suddenly, it’s right in the feels.</li>\n</ul>\n<p>Related: <a href=\"https://short.therealadam.com/2024/01/23/the-funk-is.html\">the funk is the notes you don’t play</a>.</p>\n",
				"content_text": "Virtuosity and speed are nice, in music and life. But you leave some space between the notes or slow things _way_ down? Make some space in between the music for the _music_ to happen? Now you’re cooking something good. For example:\n\n- Aretha Franklin, the greatest of all time at making the most of the space between notes. As I’m fond of saying: there is no song Aretha Franklin could not perform slower _and_ better than anyone else. Compare the tempo of [Otis Redding’s _Respect_](https://www.youtube.com/watch?v=7BDw-H_hUzw) to [Aretha’s version](https://www.youtube.com/watch?v=s3Itb17PXvw), both recorded in the same year.\n- AC/DC, “Back In Black” or “Highway To Hell”. This is where I’d start rock and roll songwriting 101.\n- D’Angelo, “Untitled (How Does It Feel?)”. Most of his work is an exemplar, he’s a master of making songs feel _spacious_.\n- Joe Cocker, “With A Little Help From My Friends”. Take a jaunty, mid-tier Beatles song and draw it _way_ out. This makes room for the huge, stacked vocals chorus. Suddenly, it’s right in the feels.\n\nRelated: [the funk is the notes you don’t play](https://short.therealadam.com/2024/01/23/the-funk-is.html).\n",
				"date_published": "2024-02-14T10:00:00-07:00",
				"url": "https://therealadam.com/2024/02/14/masters-of-the.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/13/careers-are-nonlinear.html",
				"title": "Careers are non-linear",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>David Hoang, <a href=\"https://davidhoang.com/blog/should-managers-be-technical/\">Should managers be technical?</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Career development looks more like unlocking attributes for a different subclass in a role-playing game, than picking a distinct class that can never change. It’s not a path. It’s a collection of skills and attributes focused on certain outcomes. Applying foundational skills is heavily contingent on your role and responsibility.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>👍🏻 Careers, management or not, aren’t straight lines. The skills you need for your career aren’t a tree with one root. You can skip between various skill trees, if you like! You can go deep, but wide is an option too. The more you know, the more you can delegate!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You should check out <a href=\"https://www.proofofconcept.pub\">David’s newsletter</a> too.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A wise person from a Destiny 2 Slack:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>I guess when you’re done with the main quest, you go back and do side quests </p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Careers (and lives) are non-linear. Occasionally their trajectories don’t make sense. They may even outright disappoint, in the moment. The silver lining is, they give us unique skills and experience that <em>someone</em> in the world wants if only we can find them. 📈</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-02-13T10:00:00-07:00",
				"url": "https://therealadam.com/2024/02/13/careers-are-nonlinear.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/09/a-tinker-for.html",
				"title": "A tinker for your tinkers",
				"content_html": "<p>David Crawshaw, <a href=\"https://crawshaw.io/blog/jsonfile\">jsonfile: a quick hack for tinkering</a>. 114 lines, including comments. Nothing revolutionary here. Just a nicely written and well-thought-out “classic hack” for storing data in toy programs and prototypes.</p>\n",
				"content_text": "David Crawshaw, [jsonfile: a quick hack for tinkering](https://crawshaw.io/blog/jsonfile). 114 lines, including comments. Nothing revolutionary here. Just a nicely written and well-thought-out “classic hack” for storing data in toy programs and prototypes.\n",
				"date_published": "2024-02-09T07:04:06-07:00",
				"url": "https://therealadam.com/2024/02/09/a-tinker-for.html",
				"tags": ["go","people:david-crawshaw"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/02/02/i-love-a.html",
				"title": "I love a good shower-thought",
				"content_html": "<p>Regarding <a href=\"https://en.wikipedia.org/wiki/Leo_Szilard\">Leó Szilárd</a>, a theoretical physicist who first conceived of the possibilities of nuclear chain reactions, nuclear power, and nuclear weapons:</p>\n<blockquote>\n<p>The bath was down the hall. “I remember that I went into my bath…around nine o’clock in the morning. There is no place as good to think as a bathtub. I would just soak there and think, and around twelve o’clock the maid would knock and say, ‘Are you all right, sir?’ Then I usually got out and made a few notes, dictated a few memoranda.”</p>\n<p>— Richard Rhodes, Making of the Atomic Bomb</p>\n</blockquote>\n<p>Shower thoughts, bath thoughts, lawn mowing thoughts. Great minds think alike, i.e., in similar repose.</p>\n",
				"content_text": "Regarding [Leó Szilárd](https://en.wikipedia.org/wiki/Leo_Szilard), a theoretical physicist who first conceived of the possibilities of nuclear chain reactions, nuclear power, and nuclear weapons:\n\n> The bath was down the hall. “I remember that I went into my bath…around nine o’clock in the morning. There is no place as good to think as a bathtub. I would just soak there and think, and around twelve o’clock the maid would knock and say, ‘Are you all right, sir?’ Then I usually got out and made a few notes, dictated a few memoranda.”\n> \n> — Richard Rhodes, Making of the Atomic Bomb\n\nShower thoughts, bath thoughts, lawn mowing thoughts. Great minds think alike, i.e., in similar repose.\n",
				"date_published": "2024-02-02T09:30:00-07:00",
				"url": "https://therealadam.com/2024/02/02/i-love-a.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/31/sneakerneting-urls-to.html",
				"title": "Sneaker-net’ing URLs to personal devices in the year 2024",
				"content_html": "<p>Suppose you’re on a computer provisioned by a corporate IT department. They’ve restricted the software you can install. On principle, you’ve decided that even signing in to websites on a personal account is nice to avoid, where possible.</p>\n<p>Given those constraints, how do you transfer interesting web stuff you’ve come across from the sphere of corporate IT into your sphere of IT? Normal tools like bookmarking sites or iCloud sharing are out. Emailing it to yourself is also out, too many steps and too janky.</p>\n<p>What I came up with is:</p>\n<ol>\n<li>Find a bookmarklet that will convert the current location’s URL to a QR code. <a href=\"https://codepen.io/jaronbarends/pen/nMpOZp\">This Codepen worked for me</a>, but I bet there are others!</li>\n<li>Hold my personal phone up to the monitor like a weird person and scan said code</li>\n<li>Now the location is on my phone and I can do as I like</li>\n</ol>\n",
				"content_text": "Suppose you’re on a computer provisioned by a corporate IT department. They’ve restricted the software you can install. On principle, you’ve decided that even signing in to websites on a personal account is nice to avoid, where possible.\n\nGiven those constraints, how do you transfer interesting web stuff you’ve come across from the sphere of corporate IT into your sphere of IT? Normal tools like bookmarking sites or iCloud sharing are out. Emailing it to yourself is also out, too many steps and too janky.\n\nWhat I came up with is:\n\n1. Find a bookmarklet that will convert the current location’s URL to a QR code. [This Codepen worked for me](https://codepen.io/jaronbarends/pen/nMpOZp), but I bet there are others!\n2. Hold my personal phone up to the monitor like a weird person and scan said code\n3. Now the location is on my phone and I can do as I like\n",
				"date_published": "2024-01-31T06:49:48-07:00",
				"url": "https://therealadam.com/2024/01/31/sneakerneting-urls-to.html",
				"tags": ["sneakernet"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/27/squeezing-ideas.html",
				"title": "Squeezing ideas",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Turning a big idea into a more manageable one has second-order consequences:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Remember, the more complex the issue, the more prone communication is to being lost.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>– Andrew S. Grove, <em>High Output Management</em></p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Communicating complexity is compression. Compressing ideas is loss-y. Can’t get around that. There’s ​<strong>no way to convey a complex idea and maintain fidelity</strong>​. To work with an idea amongst abstractions is to ​<strong>accept that rabbit holes will develop</strong>​. And, that sometimes <strong>problems will hide in the depths</strong> and mazes of those rabbit holes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>When you compress air, it heats up. The molecules are <em>literally</em> squeezed  together, they collide more, and the air gets hotter. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In combustion engines, compressing air coming into the engine to a higher pressure means you can add more fuel to it and get more power without increasing engine size. But, doing so requires extra machinery, turbochargers or superchargers, and requires an intercooler to cool the air down before it reaches the combustion chamber so it doesn’t explode prematurely. Second-order consequences!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I haven’t (yet) thought of a snappy analog to compressing ideas — yet. A way to integrate this with a mental model continues to elude me.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Abstraction, in the every-day software development sense, is compression. All the <a href=\"https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/\">cautions</a> and <a href=\"https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">mythology</a> programmers tell themselves about <a href=\"http://worrydream.com/LadderOfAbstraction/\">abstraction</a> distill down to “compression is great if you can accept the trade-offs”.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-01-27T12:30:00-07:00",
				"url": "https://therealadam.com/2024/01/27/squeezing-ideas.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/25/rails-generators-reminders.html",
				"title": "Rails generators reminders",
				"content_html": "<p>First: use them! Most frameworks have a project boilerplate and that’s it. Rails’ ability to quickly lay down a conventional resource, model, or anything else is a productivity booster. Use it!</p>\n<p>Second: experiment with the commands before you run them. Try Harrison Broadbent’s, <a href=\"https://railsg.xyz\">RAILSG · Ruby on Rails Generator Reference and Command Builder</a>:</p>\n<blockquote>\n<p>RAILSG is a collection of Ruby on Rails generator command references, and command builders.</p>\n</blockquote>\n<p>Third, write your own. When your app gets traction, you’ll probably invent a couple of conventions of your own. Use generators to quickly write new code consistently. Garrett Dimon has become the expert on this, <a href=\"https://garrettdimon.com/journal/posts/creating-custom-rails-generators\">Creating Custom Rails Generators</a>:</p>\n<blockquote>\n<p>Rails generators can help remove significant friction from the process of spinning up new ideas, but you don&rsquo;t have to limit yourself to the included generators. You can also create custom generators as long as you&rsquo;re familiar with the available APIs and know where the speed bumps are.</p>\n</blockquote>\n<p>And check out his forthcoming book on the same topic!</p>\n",
				"content_text": "First: use them! Most frameworks have a project boilerplate and that’s it. Rails’ ability to quickly lay down a conventional resource, model, or anything else is a productivity booster. Use it!\n\nSecond: experiment with the commands before you run them. Try Harrison Broadbent’s, [RAILSG · Ruby on Rails Generator Reference and Command Builder](https://railsg.xyz):\n\n> RAILSG is a collection of Ruby on Rails generator command references, and command builders.\n\nThird, write your own. When your app gets traction, you’ll probably invent a couple of conventions of your own. Use generators to quickly write new code consistently. Garrett Dimon has become the expert on this, [Creating Custom Rails Generators](https://garrettdimon.com/journal/posts/creating-custom-rails-generators):\n\n> Rails generators can help remove significant friction from the process of spinning up new ideas, but you don't have to limit yourself to the included generators. You can also create custom generators as long as you're familiar with the available APIs and know where the speed bumps are.\n\nAnd check out his forthcoming book on the same topic!\n",
				"date_published": "2024-01-25T06:29:52-07:00",
				"url": "https://therealadam.com/2024/01/25/rails-generators-reminders.html",
				"tags": ["rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/24/notes-on-focus.html",
				"title": "Notes on focus and attention",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Focus and attention are inputs to producing excellent things. All the talent in the world won't get me far if I’m not focused or attention isn't working in my favor. Beyond my skills at whatever I’m making (software, teams, products, essays, etc.), I need attention and focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more {\"customText\":\"Keep reading\"} -->\n<!--more Keep reading-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>In other words: I want to make what’s important to me: teams, writing, and software. I need focus to decide what to write/build with excellence. I require attention to sustain that focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Henrik Karlsson on <a href=\"https://www.henrikkarlsson.xyz/p/multi-armed-bandit\">multi-armed bandits and focus</a>. First, explore to find what I <em>might</em> want to focus on:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The trick is to collide your mental model with the outside world as often as possible. This is what exploring does. You think you know the distribution of payoffs of the slot machines, but you try something new. You discover that you were wrong. You update your model.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>This is a life design thing. Get out in reality, seek novelty, try plenty of things, “touch grass” with the world outside my mental model, the more the better. Experience a bunch of things, surround myself with intriguing, intense, or impactful people. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Surely things could have gone differently for me if I’d done more exploring when I was twenty-something. But, much less of the world was available to me then. More important that I figure out the world needs exploring now and then and that I can explore even with the responsibilities of my forty-something years.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After the exploration, “exploit” what I’ve found. Choose a few things and go deep on them. Things which resonate with me and make me think “this is a thing that I can do or invest my time and effort in”. I start doing it and that is focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But, <em>really</em> choose those “pillars” of focus. If I pick seven things, I haven’t really chosen. Pick a few of these things, leave several on the cutting floor. Don't construct some wild productivity system where I can spread my energy out over the seven days of the week, over seven areas of alleged focus and get nothing done (except possibly create a wobbly ideology and maybe a video course selling it 🌶️).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>May I recommend the rule of three? It’s great.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Focus-and-exploit lets the brain work the problem even when offline, away from keyboards and tools. Pro-tip: mundane chores are an excellent tool here. e.g. take a shower, mow the lawn, go for a walk. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Why would focus compound? Part of it is time. If you care about less, you spend more time doing what you care about most. Also, you are always nonconsciously processing the thing you focus on. So cutting priorities means you work even when it looks like you’re not working. These days, I’ll spend the afternoon playing with the kids, doing the dishes, repairing the houses—being busy in a mind-clearing way. Then, when I sit down to write the next morning, I can type 700 words without thinking. The ideas have been churning in my head, just below the surface of conscious thought, and come fully formed.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>If you're really focused, your brain is always working on those three pillars.  It's thinking about whatever it is you're doing, turning over problems, processing that information, compiling it, organizing it while you sleep, and while you do mundane things. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://austinkleon.com\">Austin Kleon</a> suggested a similar approach. When he runs out of writing/creative energy, he cleans his pool. Basically, he takes his thinking mind out of the loop. Lets his physical body do something routine and mundane to invite the creative mind to return. (Sorry, I can’t remember which Austin Kleon thing I saw this as a comment on. 🤦🏻‍♂️)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>If you like this explore and exploit stuff, you’re going to really dig <a href=\"https://medium.com/@kentbeck_7670/fast-slow-in-3x-explore-expand-extract-6d4c94a7539\">Kent Beck’s ideas about explore, expand, exploit</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>On the other hand, allowing ideas into my sphere of thought from social feeds designed to put me in a bad mood or get me to buy stuff breaks the focus. I need attention.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Craig Mod, <a href=\"https://craigmod.com/essays/how_i_got_my_attention_back/\">How I Got My Attention Back</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>If I tell people I went offline for a month, it’s like telling them I set up camp on Mars. It hints of apostasy, paganism. Tribes seem to find pleasure in knowing all members suffer equally. But, really, is the situation so dire that we can’t wrangle a little more control? We’ve opted into this baffling baseline of infinite information suck, always-availability. Nobody held a gun to our head. We put our own mouths on the spigot every single day.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But it’s so delicious. That spigot goo — buoyed by pull-to-refreshes and pings and wily dots. Giving up attention, so seductive.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I can’t focus if my attention has me thinking of “5 amazing one-takes by Scorsese” or “INSANE Porsche 911 builds”. 🧠🫠 Too much social media feed is an inescapable gravity well of wandering thoughts. Modern, programmed attention makes it difficult to <a href=\"https://therealadam.com/2022/12/27/think-your-thoughts/\">think our thoughts</a> or sustain them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>However, disconnection is a luxury, and a bit ascetic. The real tactic requires figuring out how to thread the needle, striking a balance between connectedness and <a href=\"https://studio.ribbonfarm.com/p/against-waldenponding\">Waldenponding</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I need guidelines, even when discipline wanes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The internet goes off before bed. The internet doesn’t return until after lunch. That’s it. Reasonable rules. I’m too weak to handle the unreasonable.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>What works for me:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Remove the glaring offenders in my “attention” life. Mute, unfollow, etc.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Set coarse rules that protect my time to focus. e.g., I take the first hour of my day for a writing routine, while my energy is high and the world is mostly asleep instead of eager to distract me.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Remove decision-making. I listen to the same album on repeat during my writing session (currently, <em>A Love Supreme</em>). I work through the same five-item to-do list every time to get my energy going.<br></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Attention and energy are finite. Don’t worry when one or both dwindle. At the end of the day, after numerous meetings, the weekend after a long week. That’s when it’s basically okay to allow a little temptation into your day. Don’t succumb to hustle culture! I encourage you to take a break from crushing it now and then.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Excellence</strong>. This bit started with trying to figure out how focus and attention generate excellent work. In particular, I need more than acumen and experience to make exceptional things, teams, organizations. I need to choose the right thing to focus on. But, tying up excellence with identity can cause misery or generate path dependence. I require honesty with myself when I’m doing great work and when I’m going through the motions to keep the work going. Focus and attention are preconditions for making excellence.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>I Swear, I Really Wanted to Make a 'Rap' Album but This Is Literally the Way the Wind Blew Me This Time – Andre 3000</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>It’s all <a href=\"https://therealadam.com/2024/01/12/work-in-progress/\">works in progress</a>. Many posts are rough drafts I put out there to keep myself going. I have no idea which ones will stick and which ones will bounce. Plenty of drafts and following the way the wind blows me.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>I know that if I let my attention wander, I will put less out there. Ergo attention. And I know that if I try to make several kinds of things, I will put less out there. Ergo focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Teams and organizations have focus and attention, too. Builders — developers, designers, etc. — focus on their slice of a problem. Teams focus on the problem as a whole. Organizations focus on solving problems that generate an impact on the metrics or goals they’re chasing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Priorities are the attention of a team or organization. The negative space in those priorities reflects problems and impacts the group will say “no, thanks” to. That suggests a tidy way to think of personal and group attention; we should say “no, thanks” to attention-sinks which aren’t aligned with our personal goals and priorities. “No, thanks” to algorithmic feeds when our goal is to write, for example.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>(Time to land this thing.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Focus is a capacity to get stuff done. To choose a problem and put many hours and days into it. A sense of purpose, if that’s your thing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Attention is deciding what the mind is thinking about. Attention can complement focus, or derail it. It’s how minutes turn to hours, in good ways (or bad).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Shallow focus and attention see us bouncing from one idea to another. Often, without our intention to intervene (i.e., dopamine hits). The good focus and attention turns minutes into hours of engagement and days of interesting work into the weeks and months of a notable career or legacy of work.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-01-24T06:34:10-07:00",
				"url": "https://therealadam.com/2024/01/24/notes-on-focus.html",
				"tags": ["The Work","people:craig-mod","people:henrik-karlsson"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/23/the-funk-is.html",
				"title": "The funk is in the notes you don’t play",
				"content_html": "<p>Funk is unique amongst musical genres, in my perspective, due to the importance of the notes <em>you don’t play</em>. The <em>space</em> between notes, and not “shredding” every possible moment, is important in all genres. But I find that the funkiest stuff gets that way from missing expected notes and shifting expected notes to moments where they shouldn’t be.</p>\n<blockquote>\n<p>Funk was a rhythmic system of tension and release over time, but also simultaneous tension between some players exercising maximum restraint and others exhibiting maximum expressiveness. Most of all, funk was a science of subverted expectations, syncopation taken to its ultimate destination. With funk, things weren’t always where you thought they’d be.</p>\n<p>– Dan Charnas, Dilla Time</p>\n</blockquote>\n<p>Digital Underground, <a href=\"https://www.youtube.com/watch?v=44Hlqmdfee0\">Rhymin’ on the funk</a>. Recommended.</p>\n<blockquote>\n<p>Funk not only moves, it can re-move, you dig?</p>\n<p>– George Clinton, <a href=\"https://www.youtube.com/watch?v=ZyJzylk8d_M\">P-Funk (Wants to Get Funked Up)</a></p>\n</blockquote>\n",
				"content_text": "Funk is unique amongst musical genres, in my perspective, due to the importance of the notes _you don’t play_. The _space_ between notes, and not “shredding” every possible moment, is important in all genres. But I find that the funkiest stuff gets that way from missing expected notes and shifting expected notes to moments where they shouldn’t be.\n\n> Funk was a rhythmic system of tension and release over time, but also simultaneous tension between some players exercising maximum restraint and others exhibiting maximum expressiveness. Most of all, funk was a science of subverted expectations, syncopation taken to its ultimate destination. With funk, things weren’t always where you thought they’d be.\n> \n> – Dan Charnas, Dilla Time\n\nDigital Underground, [Rhymin’ on the funk](https://www.youtube.com/watch?v=44Hlqmdfee0). Recommended.\n\n> Funk not only moves, it can re-move, you dig?\n> \n> – George Clinton, [P-Funk (Wants to Get Funked Up)](https://www.youtube.com/watch?v=ZyJzylk8d_M)\n",
				"date_published": "2024-01-23T06:14:27-07:00",
				"url": "https://therealadam.com/2024/01/23/the-funk-is.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/21/the-lfg-called.html",
				"title": "The LFG called life",
				"content_html": "<p>LFG: looking for game. An ad-hoc scheme, often forum-esque, where strangers looking to play an online game that lacks matchmaking find each other and coordinate starting a game.</p>\n<blockquote>\n<p>No matter how famous they get, the forward-thinking artists of today aren’t just looking for fans or passive consumers of their work, they’re looking for potential collaborators, or co-conspirators. These artists acknowledge that good work isn’t created in a vacuum, and that the experience of art is always a two-way street, incomplete without feedback. These artists hang out online and answer questions. They ask for reading recommendations. They chat with fans about the stuff they love.</p>\n<p>– Austin Kleon, <em>Show Your Work!</em></p>\n</blockquote>\n<p>This is how I found so many of my online pals and past/future collaborators. The wonder of blogs, “web 2.0”, and then Twitter. We were out there posting, finding tribes, and, occasionally teammates.</p>\n",
				"content_text": "LFG: looking for game. An ad-hoc scheme, often forum-esque, where strangers looking to play an online game that lacks matchmaking find each other and coordinate starting a game.\n\n> No matter how famous they get, the forward-thinking artists of today aren’t just looking for fans or passive consumers of their work, they’re looking for potential collaborators, or co-conspirators. These artists acknowledge that good work isn’t created in a vacuum, and that the experience of art is always a two-way street, incomplete without feedback. These artists hang out online and answer questions. They ask for reading recommendations. They chat with fans about the stuff they love.\n> \n> – Austin Kleon, *Show Your Work!*\n\nThis is how I found so many of my online pals and past/future collaborators. The wonder of blogs, “web 2.0”, and then Twitter. We were out there posting, finding tribes, and, occasionally teammates.\n",
				"date_published": "2024-01-21T10:04:39-07:00",
				"url": "https://therealadam.com/2024/01/21/the-lfg-called.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/18/you-have-more.html",
				"title": "You have more writing material than you think",
				"content_html": "<p>Jim Nielsen, <a href=\"https://blog.jim-nielsen.com/2023/blogging-and-compositing/\">Blogging and Composting</a>:</p>\n<blockquote>\n<p>But as a byproduct of whatever you’re building you undoubtedly learned, observed, or cursed at something along the way.</p>\n<p>And if you blog, you can make good use of that experience!</p>\n</blockquote>\n<p>Show up (almost) every day, <a href=\"https://therealadam.com/2024/01/12/work-in-progress/\">stack some drafts</a>. Write down what you learned or what surprised you or what amazed you. Sooner than you know it, you’ve got a thing going. Maybe even a thesis or long-running schtick. Works for any kind of writing, not just blogs. 📈</p>\n",
				"content_text": "Jim Nielsen, [Blogging and Composting](https://blog.jim-nielsen.com/2023/blogging-and-compositing/):\n\n> But as a byproduct of whatever you’re building you undoubtedly learned, observed, or cursed at something along the way.\n> \n> And if you blog, you can make good use of that experience!\n\nShow up (almost) every day, [stack some drafts](https://therealadam.com/2024/01/12/work-in-progress/). Write down what you learned or what surprised you or what amazed you. Sooner than you know it, you’ve got a thing going. Maybe even a thesis or long-running schtick. Works for any kind of writing, not just blogs. 📈\n",
				"date_published": "2024-01-18T08:32:11-07:00",
				"url": "https://therealadam.com/2024/01/18/you-have-more.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/13/weekend-in-portland.html",
				"title": "Weekend in Portland",
				"content_html": "<p>Day two: breakfast, books, public transit! Tina Fey and Amy Poehler (surprise guest: Maya Rudolph!) put on an excellent show. (Not pictured: very, very cold.)</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/3804638b-22c6-473f-ac35-eecbf17549cc-1-105-c.jpeg\" alt=\"\"></p>\n<p>Grits ’n Gravy. Enjoyed.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/604b1da7-9d86-42de-9836-6967943cd608-1-105-c.jpeg\" alt=\"\"><img src=\"https://short.therealadam.com/uploads/2024/a8b8801f-9ef9-43b9-bb5f-93ef6e645991-1-105-c.jpeg\" alt=\"\"></p>\n<p>Powell’s Books. Enjoyed, transacted.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/3cc86777-77cf-4678-8127-57601d576375-1-105-c.jpeg\" alt=\"\"><img src=\"https://short.therealadam.com/uploads/2024/083805ea-b50d-481f-8d0c-9489d36f2d7e-1-105-c.jpeg\" alt=\"\"></p>\n<p>The light rail line back to our Airbnb. It’s nice to get around sans car now and then!</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/cb50c1d8-96fa-43df-9514-1147d3286676-1-201-a.jpg\" alt=\"\"></p>\n<p>Dinner plates say what we meant to say at Bottle and Kitchen.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/903a7fbb-81cb-46a9-8c92-18f9e8d1d70e-1-105-c.jpeg\" alt=\"\"><img src=\"https://short.therealadam.com/uploads/2024/b3d39df2-8430-434d-803a-73facf84b722-1-105-c.jpeg\" alt=\"\"></p>\n<p>Seeing lady comics at a concert hall, not a bad way to spend a night out of town.</p>\n",
				"content_text": "Day two: breakfast, books, public transit! Tina Fey and Amy Poehler (surprise guest: Maya Rudolph!) put on an excellent show. (Not pictured: very, very cold.)\n\n![](https://short.therealadam.com/uploads/2024/3804638b-22c6-473f-ac35-eecbf17549cc-1-105-c.jpeg)\n\nGrits ’n Gravy. Enjoyed.\n\n![](https://short.therealadam.com/uploads/2024/604b1da7-9d86-42de-9836-6967943cd608-1-105-c.jpeg)![](https://short.therealadam.com/uploads/2024/a8b8801f-9ef9-43b9-bb5f-93ef6e645991-1-105-c.jpeg)\n\nPowell’s Books. Enjoyed, transacted.\n\n![](https://short.therealadam.com/uploads/2024/3cc86777-77cf-4678-8127-57601d576375-1-105-c.jpeg)![](https://short.therealadam.com/uploads/2024/083805ea-b50d-481f-8d0c-9489d36f2d7e-1-105-c.jpeg)\n\nThe light rail line back to our Airbnb. It’s nice to get around sans car now and then!\n\n![](https://short.therealadam.com/uploads/2024/cb50c1d8-96fa-43df-9514-1147d3286676-1-201-a.jpg)\n\nDinner plates say what we meant to say at Bottle and Kitchen. \n\n![](https://short.therealadam.com/uploads/2024/903a7fbb-81cb-46a9-8c92-18f9e8d1d70e-1-105-c.jpeg)![](https://short.therealadam.com/uploads/2024/b3d39df2-8430-434d-803a-73facf84b722-1-105-c.jpeg)\n\nSeeing lady comics at a concert hall, not a bad way to spend a night out of town.\n",
				"date_published": "2024-01-13T16:34:51-07:00",
				"url": "https://therealadam.com/2024/01/13/weekend-in-portland.html",
				"tags": ["travel"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/12/work-in-progress.html",
				"title": "Work in progress",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I’ve had this sitting prominently in my Muse workspace for a while. Seems like a good time to deploy it now.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:image {\"id\":9067,\"align\":\"center\",\"linkDestination\":\"none\"} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"uploads/2024/b12f272aba.jpg\" alt=\"What if it’s all work in progress? Just sharing/publishing the process as we go along?\" class=\"wp-image-9067\" /><figcaption>What if it’s all work in progress? Just sharing/publishing the process as we go along?</figcaption></figure></div>\n<!-- /wp:image -->\n<!-- wp:paragraph -->\n<p>Barry Hess, <a href=\"https://pika.bjhess.com/posts/you-re-a-blogger-not-an-essayist\">You’re a Blogger, Not an Essayist</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>I’m not going to look down on you for micro-posting on your blog, either. Heck, I might do it myself. I don’t prefer it, though. A blog isn’t Twitter. Just like I don’t think of a blog as something containing 2,000-word, heavily researched posts.</p><p>You don’t have to be an essayist. (Though you can be one if you want!) Don’t let those essayists discourage you from blogging.</p><p>Just write. Just blog.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Cosign.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-01-12T17:25:04-07:00",
				"url": "https://therealadam.com/2024/01/12/work-in-progress.html",
				"tags": ["writing","The Work"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/12/weekend-in-portland.html",
				"title": "Weekend in Portland",
				"content_html": "<p>Day one, travel day. Air travel is fine. Green carpets are green. It’s cold and dreary, as expected. There may be snow. We persevere.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/4c3c1a10-b3e6-497b-8040-8780a14b627c.jpg\" alt=\"A Boeing 737 with the good doors.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/2b31848e-b6f5-4c4c-be6b-7ba03d4d2e85.jpg\" alt=\"That canyon is grand.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/b0c6d432-11d9-4de0-8835-f7f079544b69.jpg\" alt=\"The SWA livery looks particularly nice against this sunset.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2024/531111de-b938-4c25-8ad9-fd088871f1ae-1-105-c.jpeg\" alt=\"Gotta get the PDX green carpet on the social media.\"></p>\n",
				"content_text": "Day one, travel day. Air travel is fine. Green carpets are green. It’s cold and dreary, as expected. There may be snow. We persevere.\n\n![A Boeing 737 with the good doors.](https://short.therealadam.com/uploads/2024/4c3c1a10-b3e6-497b-8040-8780a14b627c.jpg)\n\n![That canyon _is_ grand.](https://short.therealadam.com/uploads/2024/2b31848e-b6f5-4c4c-be6b-7ba03d4d2e85.jpg)\n\n![The SWA livery looks particularly nice against this sunset.](https://short.therealadam.com/uploads/2024/b0c6d432-11d9-4de0-8835-f7f079544b69.jpg)\n\n![Gotta get the PDX green carpet on the social media.](https://short.therealadam.com/uploads/2024/531111de-b938-4c25-8ad9-fd088871f1ae-1-105-c.jpeg)\n",
				"date_published": "2024-01-12T15:29:10-07:00",
				"url": "https://therealadam.com/2024/01/12/weekend-in-portland.html",
				"tags": ["travel"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/10/obsidian-llms.html",
				"title": "Obsidian + LLMs",
				"content_html": "<p>My experiments (with <a href=\"https://github.com/logancyang/obsidian-copilot\">obsidian-copilot</a>) have yet to yield a satisfying intersection between LLMs and Obsidian. I generally find OpenAI’s models write too much like breathless clickbait instead of an interesting human. I don’t want a summary or rewrite of my notes generated in that style. For querying/searching/discovery, OpenAI’s notebook-esque web interface is fine.</p>\n<p>I’m still hoping to come across something that uses indexing and embedding to help me organize and connect notes I wrote, by my hand, in intriguing and novel ways. 🤞🏻</p>\n<p>That said, if you’re already running an LLM locally via <a href=\"https://ollama.ai\">llama</a>, <a href=\"https://github.com/hinterdupfinger/obsidian-ollama/tree/main\">obsidian-ollama</a> looks like an excellent way to integrate it into your note-writing/knowledge management scheme. The code of this plugin is easy to follow and nicely structured, making it a good one to look at when the temptation to write Obsidian plugins comes. (Which, for me, arrives as a potential distraction more often than I’d like!) Disclaimer: I haven’t tried this one yet!</p>\n",
				"content_text": "My experiments (with [obsidian-copilot](https://github.com/logancyang/obsidian-copilot)) have yet to yield a satisfying intersection between LLMs and Obsidian. I generally find OpenAI’s models write too much like breathless clickbait instead of an interesting human. I don’t want a summary or rewrite of my notes generated in that style. For querying/searching/discovery, OpenAI’s notebook-esque web interface is fine. \n\nI’m still hoping to come across something that uses indexing and embedding to help me organize and connect notes I wrote, by my hand, in intriguing and novel ways. 🤞🏻\n\nThat said, if you’re already running an LLM locally via [llama](https://ollama.ai), [obsidian-ollama](https://github.com/hinterdupfinger/obsidian-ollama/tree/main) looks like an excellent way to integrate it into your note-writing/knowledge management scheme. The code of this plugin is easy to follow and nicely structured, making it a good one to look at when the temptation to write Obsidian plugins comes. (Which, for me, arrives as a potential distraction more often than I’d like!) Disclaimer: I haven’t tried this one yet!\n",
				"date_published": "2024-01-10T07:03:38-07:00",
				"url": "https://therealadam.com/2024/01/10/obsidian-llms.html",
				"tags": ["ai","llm","obsidian"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/07/journal-for-worklifeeverything.html",
				"title": "Journal for work/life/everything",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Ray Grasso, <a href=\"https://www.grizzlebit.com/posts/2023/05-21-long-live-the-work-journal/\">Long Live the Work Journal</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Keep a journal for work, champions.</p><p>It’s pretty easy to get started—just create a text file.</p><p>Throw in a new heading each day and write down whatever you did—a single line for each task is usually enough. I put the newer dates at the top so it’s less scrolling to get to the most recent content. Over time you end up with your own little private reverse-chronological blog-in-a-file.</p><p>Each day, dump in commands you’ve run; links to documents you’ve created, reviewed, or read; tasks you want to get done; or goals you want to achieve.</p><p>You’re building a little outboard brain where your work history is just a short grep away.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Endorsed. Journals are the best PKM impact-to-effort ratio out there. I like <a href=\"https://dayoneapp.com\">DayOne</a>, been using it for more than ten years and thousands of entries. But, anything works! Your notes app, a text file, a document in your preferred word processor. Anything you can search later and access anywhere is good!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The most important thing is to turn what’s in your head into “words on paper”. That’s when the magic happens!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2024-01-07T10:37:53-07:00",
				"url": "https://therealadam.com/2024/01/07/journal-for-worklifeeverything.html",
				"tags": ["The Work","journals"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/07/the-status-quo.html",
				"title": "The status quo",
				"content_html": "<blockquote>\n<p>Most fascinating game there is, keeping things from staying the way they are.\n– Kurt Vonnegut, Player Piano</p>\n</blockquote>\n<p>The status quo is a hell of a thing. Path dependence makes this a challenging game.</p>\n<p>The biggest challenge you could take on in life: change it for even the slightest better. A virtuous challenge too, in an <a href=\"https://plato.stanford.edu/entries/aristotle-ethics/\">Aristotelian virtues</a> sense?</p>\n",
				"content_text": "> Most fascinating game there is, keeping things from staying the way they are.\n> – Kurt Vonnegut, Player Piano\n\nThe status quo is a hell of a thing. Path dependence makes this a challenging game.\n\nThe biggest challenge you could take on in life: change it for even the slightest better. A virtuous challenge too, in an [Aristotelian virtues](https://plato.stanford.edu/entries/aristotle-ethics/) sense?\n",
				"date_published": "2024-01-07T09:55:59-07:00",
				"url": "https://therealadam.com/2024/01/07/the-status-quo.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/03/lowkey-css-libraries.html",
				"title": "Low-key CSS libraries",
				"content_html": "<p>I like the idea and execution of Tailwind. That said, there’s something nice about dropping a CSS library reference into a new HTML file and getting styled content without adding any classes or other legwork.</p>\n<p>The nice thing about these libraries is they imagine, to some extent, a world where the stylesheets browsers use as defaults didn’t look so bland.</p>\n<ul>\n<li><a href=\"https://newcss.net/\">new.css</a> – if browser defaults looked real nice</li>\n<li><a href=\"https://andybrewer.github.io/mvp/\">mvp.css</a> – if browser defaults looked like Bootstrap or the Tailwind examples</li>\n<li><a href=\"https://nostalgic-css.github.io/NES.css/\">nes.css</a> – if browser defaults said “heck, we’re going with it” and emulated the look of classic Nintendo game menus</li>\n<li><a href=\"https://edwardtufte.github.io/tufte-css/\">tufte.css</a> – if Edward Tufte had been put in charge of default browser stylesheets</li>\n</ul>\n",
				"content_text": "I like the idea and execution of Tailwind. That said, there’s something nice about dropping a CSS library reference into a new HTML file and getting styled content without adding any classes or other legwork.\n\nThe nice thing about these libraries is they imagine, to some extent, a world where the stylesheets browsers use as defaults didn’t look so bland.\n\n- [new.css](https://newcss.net/) – if browser defaults looked real nice\n- [mvp.css](https://andybrewer.github.io/mvp/) – if browser defaults looked like Bootstrap or the Tailwind examples\n- [nes.css](https://nostalgic-css.github.io/NES.css/) – if browser defaults said “heck, we’re going with it” and emulated the look of classic Nintendo game menus\n- [tufte.css](https://edwardtufte.github.io/tufte-css/) – if Edward Tufte had been put in charge of default browser stylesheets\n",
				"date_published": "2024-01-03T07:16:00-07:00",
				"url": "https://therealadam.com/2024/01/03/lowkey-css-libraries.html",
				"tags": ["Design","css"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/02/software-makes-you.html",
				"title": "Software makes you more productive, otherwise it’s (weird) art",
				"content_html": "<p>Rands in Repose, <a href=\"https://randsinrepose.com/archives/seven-steps-to-fixing-stalled-to-do-tasks/\">Seven Steps to Fixing Stalled To-Do Tasks</a>:</p>\n<blockquote>\n<p>The never-ending question you must ask regarding whatever productivity system you’ve built is, “Does this system make you more productive?”</p>\n</blockquote>\n<p>The purpose of all this software is to get stuff done (make things), not to fiddle and shuffle tasks around! (This goes for individuals <em>and</em> teams, FWIW)</p>\n",
				"content_text": "Rands in Repose, [Seven Steps to Fixing Stalled To-Do Tasks](https://randsinrepose.com/archives/seven-steps-to-fixing-stalled-to-do-tasks/):\n\n> The never-ending question you must ask regarding whatever productivity system you’ve built is, “Does this system make you more productive?”\n\nThe purpose of all this software is to get stuff done (make things), not to fiddle and shuffle tasks around! (This goes for individuals _and_ teams, FWIW)\n",
				"date_published": "2024-01-02T15:00:00-07:00",
				"url": "https://therealadam.com/2024/01/02/software-makes-you.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2024/01/01/by-the-bullets.html",
				"title": "2023 by the bullets",
				"content_html": "<ul>\n<li>Places visited\n<ul>\n<li>Marfa, Texas</li>\n<li>Las Cruces, New Mexico</li>\n<li>Tucson, Arizona</li>\n<li>Disney World (Orlando, Florida)</li>\n<li>Disneyland (Anaheim, California)</li>\n<li>Prunedale, California</li>\n<li>Salinas, California</li>\n<li>Monterey, California</li>\n<li>Dallas, Texas</li>\n</ul>\n</li>\n<li>Writers enjoyed\n<ul>\n<li><a href=\"https://craigmod.com\">Craig Mod</a></li>\n<li><a href=\"https://www.henrikkarlsson.xyz\">Henrik Karlsson</a></li>\n</ul>\n</li>\n<li>Music re-discovered\n<ul>\n<li>John Coltrane <em>A Love Supreme</em></li>\n<li>Return to Forever <em>The Mothership Returns</em></li>\n</ul>\n</li>\n<li>Concerts attended\n<ul>\n<li>Bruce Springsteen and the E-Street Band,</li>\n<li>Lyle Lovett and his Large Band</li>\n<li>Thundercat</li>\n</ul>\n</li>\n<li>My best writing\n<ul>\n<li><a href=\"https://therealadam.wordpress.com/2023/11/09/my-summer-at-100-hertz/\">My summer at 100hz</a></li>\n<li><a href=\"https://therealadam.wordpress.com/2023/08/23/i-got-better-at-estimating-projects-with-intentional-practice/\">I got better at estimating projects</a></li>\n<li><a href=\"https://therealadam.wordpress.com/2023/04/14/err-the-blog-revisited/\">Err the Blog, revisited</a></li>\n<li><a href=\"https://therealadam.wordpress.com/2023/01/21/turn-the-pages-read-the-code-hear-the-words/\">Turn the pages, read the code, hear the words</a></li>\n<li><a href=\"https://short.therealadam.com/2023/02/13/natasha-lyonne-is.html\">Natasha Lyonne is my generation’s Joe Pesci</a></li>\n<li><a href=\"https://short.therealadam.com/2023/08/04/a-vacation-is.html\">A vacation is a tool for disconnecting</a></li>\n</ul>\n</li>\n<li>Previously revisited\n<ul>\n<li><a href=\"https://short.therealadam.com/2022/12/29/best-of.html\">2022</a></li>\n<li><a href=\"https://short.therealadam.com/2021/12/31/my-favorites-of.html%0A\">2021</a></li>\n</ul>\n</li>\n</ul>\n",
				"content_text": "- Places visited\n\t- Marfa, Texas\n\t- Las Cruces, New Mexico\n\t- Tucson, Arizona\n\t- Disney World (Orlando, Florida)\n\t- Disneyland (Anaheim, California)\n\t- Prunedale, California\n\t- Salinas, California\n\t- Monterey, California\n\t- Dallas, Texas\n- Writers enjoyed\n\t- [Craig Mod](https://craigmod.com)\n\t- [Henrik Karlsson](https://www.henrikkarlsson.xyz)\n- Music re-discovered\n\t- John Coltrane _A Love Supreme_\n\t- Return to Forever _The Mothership Returns_\n- Concerts attended\n\t- Bruce Springsteen and the E-Street Band, \n\t- Lyle Lovett and his Large Band\n\t- Thundercat\n- My best writing\n\t- [My summer at 100hz](https://therealadam.wordpress.com/2023/11/09/my-summer-at-100-hertz/)\n\t- [I got better at estimating projects](https://therealadam.wordpress.com/2023/08/23/i-got-better-at-estimating-projects-with-intentional-practice/)\n\t- [Err the Blog, revisited](https://therealadam.wordpress.com/2023/04/14/err-the-blog-revisited/)\n\t- [Turn the pages, read the code, hear the words](https://therealadam.wordpress.com/2023/01/21/turn-the-pages-read-the-code-hear-the-words/)\n\t- [Natasha Lyonne is my generation’s Joe Pesci](https://short.therealadam.com/2023/02/13/natasha-lyonne-is.html)\n\t- [A vacation is a tool for disconnecting](https://short.therealadam.com/2023/08/04/a-vacation-is.html)\n- Previously revisited\n\t- [2022](https://short.therealadam.com/2022/12/29/best-of.html)\n\t- [2021](https://short.therealadam.com/2021/12/31/my-favorites-of.html%0A)\n",
				"date_published": "2024-01-01T11:06:04-07:00",
				"url": "https://therealadam.com/2024/01/01/by-the-bullets.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/28/lowkey-toolsforthought.html",
				"title": "Low-key tools-for-thought",
				"content_html": "<p>I have an elaborate, perhaps baroque, setup of journals, notes, tasks, highlights, read-it-laters, feeds, and canvases-for-thinking. I consider it a crucial, and very idiosyncratic, piece of “knowledge worker infrastructure”. Furthermore, I don’t think I could handle a lot of the work and projects that I do, to the extent that I do, without it.</p>\n<p>But, I hope that constructing such a scheme, and doing all the time intensive background research and tinkering, is not something <em>everyone</em> would have to expend effort on to think better and more clearly.</p>\n<p>My hunch here is that the software bundled with iOS/iPadOS/macOS is <em>very close</em> to allowing folks who just want to remember and brainstorm get started <em>immediately</em>. Currently, a couple of elements are missing. This means you have to hit the third-party ecosystem escape hatch and consider a <em>daunting</em> variety of applications, workflows, and identity/quasi-religions.</p>\n<p>Herein, a wishlist of system-level capabilities that would make macOS an even better “bicycle for the mind”.</p>\n<hr>\n<p>In any old macOS app, I want to highlight text (mostly) with any pointer (mouse, stylus, finger) on any device (laptop, tablet, phone) and capture/promote text. I may want to add my commentary or notes too. Afterward, I should be able to search for this in Spotlight, at the least. Even better if the whole document/page/file/etc. the text came from is indexed, so I can find highlights despite imperfect memory.</p>\n<p>macOS already extracts contacts and events from plain text. Faces are identified in photos. Why not make text excerpts/highlights/passages a first-class thing in the system’s information architecture?</p>\n<hr>\n<p>I want to identify key ideas, concepts, people, and other nouns, so I can hyperlink between them <em>and</em> navigate them in <em>something</em> like the Finder.</p>\n<p>This verbs-and-nouns concept was key to AppleScript. I’ve read that it was part of the conceptual bedrock of NeXTStep, but I haven’t found more than a few passing sentences on that.</p>\n<p>Why not carry that idea forward or rediscover it on macOS? Some folks want to do more than scroll, post, and transact.</p>\n<hr>\n<p>Notes and Journal, along with Finder and Spotlight, seem <em>very close</em> to checking all the boxes here. 🤷🏻‍♂️I don’t use those apps, so I’m wildly speculating here. Out over my skis, as they say. That said, this is <em>so close</em> to the core of what you really need to do next-level, thinking-augmented-by-computers.</p>\n<p>Even though I use very particular apps, I feel like Apple has the right foundations here. A journal app for capturing ideas, reflections, and life as it happens. A notes app for putting structure and organization around the ideas that emerge from those moments. Tie it together with search to resurface and rediscover those journals and notes.</p>\n<p>A fellow can dream, right?</p>\n",
				"content_text": "I have an elaborate, perhaps baroque, setup of journals, notes, tasks, highlights, read-it-laters, feeds, and canvases-for-thinking. I consider it a crucial, and very idiosyncratic, piece of “knowledge worker infrastructure”. Furthermore, I don’t think I could handle a lot of the work and projects that I do, to the extent that I do, without it.\n\nBut, I hope that constructing such a scheme, and doing all the time intensive background research and tinkering, is not something _everyone_ would have to expend effort on to think better and more clearly.\n\nMy hunch here is that the software bundled with iOS/iPadOS/macOS is _very close_ to allowing folks who just want to remember and brainstorm get started _immediately_. Currently, a couple of elements are missing. This means you have to hit the third-party ecosystem escape hatch and consider a _daunting_ variety of applications, workflows, and identity/quasi-religions.\n\nHerein, a wishlist of system-level capabilities that would make macOS an even better “bicycle for the mind”.\n\n---- \nIn any old macOS app, I want to highlight text (mostly) with any pointer (mouse, stylus, finger) on any device (laptop, tablet, phone) and capture/promote text. I may want to add my commentary or notes too. Afterward, I should be able to search for this in Spotlight, at the least. Even better if the whole document/page/file/etc. the text came from is indexed, so I can find highlights despite imperfect memory.\n\nmacOS already extracts contacts and events from plain text. Faces are identified in photos. Why not make text excerpts/highlights/passages a first-class thing in the system’s information architecture?\n\n---- \nI want to identify key ideas, concepts, people, and other nouns, so I can hyperlink between them _and_ navigate them in _something_ like the Finder.\n\nThis verbs-and-nouns concept was key to AppleScript. I’ve read that it was part of the conceptual bedrock of NeXTStep, but I haven’t found more than a few passing sentences on that.\n\nWhy not carry that idea forward or rediscover it on macOS? Some folks want to do more than scroll, post, and transact.\n\n---- \nNotes and Journal, along with Finder and Spotlight, seem _very close_ to checking all the boxes here. 🤷🏻‍♂️I don’t use those apps, so I’m wildly speculating here. Out over my skis, as they say. That said, this is _so close_ to the core of what you really need to do next-level, thinking-augmented-by-computers.\n\nEven though I use very particular apps, I feel like Apple has the right foundations here. A journal app for capturing ideas, reflections, and life as it happens. A notes app for putting structure and organization around the ideas that emerge from those moments. Tie it together with search to resurface and rediscover those journals and notes.\n\nA fellow can dream, right?\n",
				"date_published": "2023-12-28T09:27:37-07:00",
				"url": "https://therealadam.com/2023/12/28/lowkey-toolsforthought.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/18/ia-writer-and.html",
				"title": "iA Writer and AI",
				"content_html": "<p><a href=\"https://ia.net/topics/writing-with-ai\">Writing with AI</a>:</p>\n<blockquote>\n<p>Writing is not about getting letters on a page. It’s not about getting done with text. It’s finding a clear and simple expression for what we feel, mean, and want to express. Writing is thinking with letters. Usually we do this alone. With AI, you write in dialogue. It comes with a chat-interface, after all. So, don’t just write commands, talk to it.</p>\n</blockquote>\n<p><a href=\"https://ia.net/topics/ia-writer-7\">iA Writer</a>’s integration is the first use of LLMs I’ve seen that I’d consider original. They didn’t slap on a chat interface where one wasn’t needed. It’s not autocomplete-but-smarter.</p>\n<p>Instead, they show authorship/origin of text as either human or machine-generated. As you edit out the AI machine’s writing, the text visually and literally becomes more your own creation. You engage in dialog with the machine and use that to <em>improve</em> your thinking. The machine doesn’t think for you. Bravo!</p>\n",
				"content_text": "[Writing with AI](https://ia.net/topics/writing-with-ai):\n\n> Writing is not about getting letters on a page. It’s not about getting done with text. It’s finding a clear and simple expression for what we feel, mean, and want to express. Writing is thinking with letters. Usually we do this alone. With AI, you write in dialogue. It comes with a chat-interface, after all. So, don’t just write commands, talk to it.\n\n[iA Writer](https://ia.net/topics/ia-writer-7)’s integration is the first use of LLMs I’ve seen that I’d consider original. They didn’t slap on a chat interface where one wasn’t needed. It’s not autocomplete-but-smarter. \n\nInstead, they show authorship/origin of text as either human or machine-generated. As you edit out the AI machine’s writing, the text visually and literally becomes more your own creation. You engage in dialog with the machine and use that to _improve_ your thinking. The machine doesn’t think for you. Bravo!\n",
				"date_published": "2023-12-18T11:30:00-07:00",
				"url": "https://therealadam.com/2023/12/18/ia-writer-and.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/17/celebrate-the-van.html",
				"title": "Celebrate the van Beethoven guy",
				"content_html": "<p>It’s Ludwig van Beethoven’s birthday. Here are a few ways to celebrate the old <a href=\"https://en.wikipedia.org/wiki/Bone_conduction\">piano-biter</a>:</p>\n<ul>\n<li>small: try his <em>other</em> famous piano sonata, <a href=\"https://www.youtube.com/watch?v=SrcOcKYQX3c&amp;t=53s\">No. 8 “Pathetique”</a></li>\n<li>medium: try the third movement of <a href=\"https://youtu.be/3TiYGxOQDYw?si=WJ42kOZS5l65TMfX&amp;t=1658\">Piano Concerto No. 5 “Emperor”</a>, wherein the transition from the slow/middle movement into the final/fast movement is a brilliant sneak attack</li>\n<li>large: the pretty good (but mid-tier for Beethoven, IMO) Symphony <a href=\"https://www.youtube.com/watch?v=RkP33esCi5g\">No. 3 “Eroica”</a> aka the one where he wrote a piece for Napoleon but got mad and renamed it at the last minute</li>\n<li>extra-large: the symphony that changed the game, <a href=\"https://youtu.be/rOjHhS5MtvA?si=hejnghb61LT23WLM&amp;t=57\">Symphony No. 9</a> (the Ode to Joy one)</li>\n</ul>\n<p>Previously: <a href=\"https://short.therealadam.com/2021/11/28/great-albums-beethoven.html\">Beethoven’s Symphonies No. 7 and 8</a> are top-tier, <a href=\"https://short.therealadam.com/2022/01/26/beethovens-symphonies-visualized.html\">Beethoven’s symphonies visualized</a>.</p>\n",
				"content_text": "It’s Ludwig van Beethoven’s birthday. Here are a few ways to celebrate the old [piano-biter](https://en.wikipedia.org/wiki/Bone_conduction):\n\n- small: try his _other_ famous piano sonata, [No. 8 “Pathetique”](https://www.youtube.com/watch?v=SrcOcKYQX3c&t=53s)\n- medium: try the third movement of [Piano Concerto No. 5 “Emperor”](https://youtu.be/3TiYGxOQDYw?si=WJ42kOZS5l65TMfX&t=1658), wherein the transition from the slow/middle movement into the final/fast movement is a brilliant sneak attack\n- large: the pretty good (but mid-tier for Beethoven, IMO) Symphony [No. 3 “Eroica”](https://www.youtube.com/watch?v=RkP33esCi5g) aka the one where he wrote a piece for Napoleon but got mad and renamed it at the last minute\n- extra-large: the symphony that changed the game, [Symphony No. 9](https://youtu.be/rOjHhS5MtvA?si=hejnghb61LT23WLM&t=57) (the Ode to Joy one)\n\nPreviously: [Beethoven’s Symphonies No. 7 and 8](https://short.therealadam.com/2021/11/28/great-albums-beethoven.html) are top-tier, [Beethoven’s symphonies visualized](https://short.therealadam.com/2022/01/26/beethovens-symphonies-visualized.html).\n",
				"date_published": "2023-12-17T14:00:00-07:00",
				"url": "https://therealadam.com/2023/12/17/celebrate-the-van.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/15/uiland.html",
				"title": "ui.land",
				"content_html": "<p><a href=\"https://ui.land/\">ui.land</a> is an interview site at the crossroads of design and engineering.</p>\n<p><a href=\"https://ui.land/interviews/rauno-freiberg\">Rauno Freiberg</a>:</p>\n<blockquote>\n<p>Trying to create software with tiny details that feel exciting to build, experience, and remix. Ever discovered a website that you can’t stop playing with and obsessing over? You can just sense the thoughtfulness and quality.</p>\n</blockquote>\n<p><a href=\"https://ui.land/interviews/paco-coursey\">Paco Coursey</a>:</p>\n<blockquote>\n<ul>\n<li>What we call a delightful user experience is just delivering a faster path to user goals.</li>\n</ul>\n</blockquote>\n<ul>\n<li>You’ll never understand the challenges, tricks, and edge-cases of a note-taking app until you build a note-taking app.</li>\n</ul>\n<p><a href=\"https://ui.land/interviews/sam-selikoff\">Sam Selikoff</a>:</p>\n<blockquote>\n<p>The best interface is one that’s not there because the desired outcome has already been anticipated.</p>\n</blockquote>\n",
				"content_text": "[ui.land](https://ui.land/) is an interview site at the crossroads of design and engineering.\n\n[Rauno Freiberg](https://ui.land/interviews/rauno-freiberg):\n\n> Trying to create software with tiny details that feel exciting to build, experience, and remix. Ever discovered a website that you can’t stop playing with and obsessing over? You can just sense the thoughtfulness and quality.\n\n[Paco Coursey](https://ui.land/interviews/paco-coursey):\n\n> - What we call a delightful user experience is just delivering a faster path to user goals.\n- You’ll never understand the challenges, tricks, and edge-cases of a note-taking app until you build a note-taking app.\n\n\n[Sam Selikoff](https://ui.land/interviews/sam-selikoff):\n\n> The best interface is one that’s not there because the desired outcome has already been anticipated.\n",
				"date_published": "2023-12-15T06:33:56-07:00",
				"url": "https://therealadam.com/2023/12/15/uiland.html",
				"tags": ["Design","rauno-freiberg","interviews","paco-coursey","sam-selikoff"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/06/notes-on-strategy.html",
				"title": "Notes on strategy and execution",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Will Larson, <a href=\"https://firstround.com/review/how-to-size-and-assess-teams-from-an-eng-lead-at-stripe-uber-and-digg/\">How to Size and Assess Teams From an Eng Lead at Stripe, Uber and Digg</a>. This pull-quote lead me through some juicy lines of thinking: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>Inflection points are just sustained implementation of a very reasonable thing. Often, the role of the great leader is not to come up with a brilliant strategy, but to convince people to stay the course with a very basic strategy.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Leaders <em>lead</em> folks in exercising a plan or series of plans (i.e. strategy). Basic strategies are almost certain to outperform complex strategies. Complex strategies tend to leak energy and effort at the seams between the basic/legible parts and all the edge cases and exceptions that generate complexity.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>“Sustained implementation” implies both quality of execution and compounding returns on effort. Sustaining any strategy is more likely to compound effort than frequently changing strategies. But, bear in mind that high probabilities don’t guarantee that an event will happen.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the team level, strategy is “why is this project/idea/work important enough to ignore all the other things we could be doing?”. The strategy generates the alignment which makes execution decisions easier. The alignment gives you a principle or goal to return to when things don’t go to plan. The strategy and alignment are guidelines helping teams pull together in the same direction, instead of zeroing out their effort by all pulling in different directions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No strategy is worse than no strategy. A lack of strategy is the worst thing, probably worse than having no plan. Any given present/actual strategy is likely to outperform no strategy. So definitely have a strategy, even if it is simple or your first try at having a strategy.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-12-06T07:57:12-07:00",
				"url": "https://therealadam.com/2023/12/06/notes-on-strategy.html",
				"tags": ["Leadership","people:will-larson"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/04/organize-for-discovery.html",
				"title": "Organize for Discovery",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>S-tier programming skill: organize code and behavior such that others can discover and understand it out later <em>without</em> your presence/consultation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>S-tier writing skill: organize a story or idea within a story such that the reader understands or builds upon it, makes it theirs.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A-tier relationship skill: organize or set stuff down such that your partner can find it later, <em>without needing to ask you where it is</em>. (Riffing off <a href=\"http://wisdom.limo/\">Merlin Mann</a> here, I think.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ergo: organizing, and <em>empathizing</em>, are skills worth developing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>It’s a bit of an affordance. Put the idea, code object, etc. where you’d <em>expect</em> to find it or <em>naturally</em> reach for it. Even better, put it where you think <em>someone else</em> would look for it first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Tiago Forte, <a href=\"https://fortelabs.com/blog/how-to-take-smart-notes/\">How to Take Smart Notes: 10 Principles to Revolutionize Your Note-Taking and Writing</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>\nIn other words, instead of filing things away according to where they came from, you file them according to where they’re going. This is the essential difference between organizing like a librarian and organizing like a writer.\n</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>All those productivity hacks <em>might</em> pay off, some day!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-12-04T06:40:50-07:00",
				"url": "https://therealadam.com/2023/12/04/organize-for-discovery.html",
				"tags": ["The Work","people:merlin-mann","people:tiago-forte"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/02/sidestep-process-by.html",
				"title": "Sidestep process by sharing tangible progress",
				"content_html": "<p><!-- raw HTML omitted -->Nat Bennett<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>My single most effective software dev habit is to start with a walking skeleton &ndash; a &ldquo;real&rdquo; if very stubbed out program that can be deployed on its real infrastructure, receive real calls, visited for real etc. &ndash; because of what this does for non-programming stakeholders.</p>\n<p>When they see a real working thing and then they see that thing get meaningful improvements they tend to chill <em>way</em> out and get much easier to work with.</p>\n<p>You can save a week of effort on process with a couple hours of sharing tangible progress.</p>\n<!-- raw HTML omitted -->\n<p>Related: you can save a week of planning with a couple hours of programming. You can save a week of programming with a couple hours of planning.</p>\n",
				"content_text": "<a href=\"https://ruby.social/@nat/111348115101014452\">Nat Bennett</a>:\n\n<blockquote>\nCannot overstate the value of regularly delivering working software.\n\nMy single most effective software dev habit is to start with a walking skeleton -- a \"real\" if very stubbed out program that can be deployed on its real infrastructure, receive real calls, visited for real etc. -- because of what this does for non-programming stakeholders.\n\nWhen they see a real working thing and then they see that thing get meaningful improvements they tend to chill *way* out and get much easier to work with.\n\nYou can save a week of effort on process with a couple hours of sharing tangible progress.\n</blockquote>\n\nRelated: you can save a week of planning with a couple hours of programming. You can save a week of programming with a couple hours of planning.\n",
				"date_published": "2023-12-02T12:55:26-07:00",
				"url": "https://therealadam.com/2023/12/02/sidestep-process-by.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/12/01/notes-on-focus.html",
				"title": "Notes on focus",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>I’ve tried a bunch of things, over the years, to find time and discipline to focus on working the tasks and projects that are meaningful to me. Mostly it boils down to actually doing the work and choosing the right kind of work. 🤷🏻‍♂️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">There are two voices</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>“Focus on doing the most important thing so that you can get it done. Then, you can do the next most important thing, and so on”, says one. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>“Follow your interests. Turn your energy into some kind of progress. Even if it’s not aligned to the absolute most important thing, all the time”, says the other. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>They’re not-wrong!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The Important Thing</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If there’s anything more useful than <a href=\"https://therealadam.com/2021/06/01/one-priority-is-like-wind-in-the-sails/\">one clear priority</a>, it’s One Important Thing. Maybe they’re two sides of the same coin. Either way, if you know that Thing #1 is more significant than Things #2-10, you have an advantage.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Priority makes focus. Purpose makes focus. Aligning purpose with priority. That’s a winner.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The big tent of principles</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>That said, it’s possible to pursue smaller things and stay in alignment with priority and purpose. The big-rock/one-important-thing isn’t an identity. They don’t have to represent your life goal. I recommend <em>against</em> trying to stay aligned with a big life goal, lest one miss all the lovely moments and achievements along the way. In other words, stop to say <a href=\"https://www.youtube.com/watch?v=sn6ru7FaQns\">”well if this isn’t nice, I don’t know what is”</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The big tent of principles means you can connect the dots from working on something for a short period of time, say a day or month, to what you’re trying to do with the months and years of your life or career.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Side note: your big principle needs a bit of an open-ended definition. If the principle you’re basing the years of your career is “make a push-button UI that is 5% better”, it’s difficult to fit side-quests into that tent. “Improve the low-hanging fruit in human-computer interface and swing for the fences a few times on drastically improving the state of the art” is a better big tent principle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Focus begat finish</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Focus is a means, not an end. The end is finishing. Not almost-done, basically done, or waiting on one little thing before it’s done. Finished means it’s out there, people are reading it or using it or thinking about it or benefitting from it in some way.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Focus makes the room in your life (and inside your head) to make the thing or polish it or package it or tell the people about it. But focus alone won’t finish it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finishing is dozens of little details that need doing, aren’t doing themselves, and may indeed look dissimilar to monk-like focus. It’s probably an entirely different topic. For the purposes of these notes, remember that it’s easier to finish if you have developed the discipline to focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">No</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://short.therealadam.com/2023/11/01/saying-no-is.html\">Saying “no” is the first step</a>. Apps and trinkets and minimalism and meditation are not the key to generating focus.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To paraphrase Prince: “Nothing Compares 2 No”. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Saying “no”:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Reduces your inbound volume of work</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Decreases coordination and collaboration multipliers that generate drag</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Aligns more of the tasks on your list with the thing I said “yes” to<br></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>OTOH, many people feel bad vibes when they hear or say “no”. Say the literal word with care.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Don’t get so wrapped up in focusing and how other people do it and your ideal schedule and preparing to do the work that you never get around to doing the work.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-12-01T07:46:18-07:00",
				"url": "https://therealadam.com/2023/12/01/notes-on-focus.html",
				"tags": ["The Work"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/26/everythings-a-draft.html",
				"title": "Everything’s a draft",
				"content_html": "<blockquote>\n<p>Publish pretty much everything you write because you can’t predict what is going to be popular. There is a lower bar for quality, but barring dishonesty and literally unreadable prose, everything else should go out somewhere. Incompleteness is no excuse. Publish the first part now and the other parts later.</p>\n<p>– Kent Beck, <a href=\"https://tidyfirst.substack.com/p/publish-everything-pretty-much\">Publish Everything</a></p>\n</blockquote>\n<p>Get the idea out there, especially if it feels like there’s depth to explore but you can’t full traverse it in the moment. And, reduce friction to sharing the promising drafts!</p>\n",
				"content_text": "> Publish pretty much everything you write because you can’t predict what is going to be popular. There is a lower bar for quality, but barring dishonesty and literally unreadable prose, everything else should go out somewhere. Incompleteness is no excuse. Publish the first part now and the other parts later. \n> \n> – Kent Beck, [Publish Everything](https://tidyfirst.substack.com/p/publish-everything-pretty-much)\n\nGet the idea out there, especially if it feels like there’s depth to explore but you can’t full traverse it in the moment. And, reduce friction to sharing the promising drafts!\n",
				"date_published": "2023-11-26T11:01:14-07:00",
				"url": "https://therealadam.com/2023/11/26/everythings-a-draft.html",
				"tags": ["Commonplace","Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/25/zawinskis-law-updated.html",
				"title": "Zawinski's law, updated",
				"content_html": "<p>Every program attempts to expand until it can</p>\n<ul>\n<li>read email (the original)</li>\n<li>invite a friend</li>\n<li>check off tasks in a list</li>\n<li>record consent to receiving cookies or storing data in the United States (GDPR)</li>\n<li>store an audit trail (SOC2)</li>\n</ul>\n",
				"content_text": "Every program attempts to expand until it can\n- read email (the original)\n- invite a friend\n- check off tasks in a list\n- record consent to receiving cookies or storing data in the United States (GDPR)\n- store an audit trail (SOC2)\n",
				"date_published": "2023-11-25T09:32:04-07:00",
				"url": "https://therealadam.com/2023/11/25/zawinskis-law-updated.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/23/listening-november.html",
				"title": "Listening, November 2023",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Andre 3000, <em>New Blue Sun</em> – come for the over-the-top song titles, stay for what sounds to me like an ambient and (astral?) jazz album.</p>\n<p>Earth, Wind, and Fire, “Serpentine Fire” – this is the Certified Jam of the Month™ in our household. It is literally made of slap (bass).</p>\n<p>Return to Forever – been listening to a lot of jazz-fusion lately. If Weather Report isn’t your thing, give <em>The Mothership Returns</em> a try.</p>\n",
				"date_published": "2023-11-23T11:38:11-07:00",
				"url": "https://therealadam.com/2023/11/23/listening-november.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/17/you-cant-read.html",
				"title": "You can’t read the whole internet, so put your energy into something that matters to you",
				"content_html": "<p>Oliver Burkeman, <a href=\"https://www.oliverburkeman.com/river\">Treat your to-read pile like a river</a>:</p>\n<blockquote>\n<p>To return to information overload: this means treating your &ldquo;to read&rdquo; pile like a river (a stream that flows past you, and from which you pluck a few choice items, here and there) instead of a bucket (which demands that you empty it). After all, you presumably don&rsquo;t feel overwhelmed by all the unread books in the British Library – and not because there aren&rsquo;t an overwhelming number of them, but because it never occurred to you that it might be your job to get through them all.</p>\n<p>I like to think of it as the productivity technique to beat all productivity techniques: finally internalizing the implications of the fact that what&rsquo;s genuinely impossible – the clue is in the name! – cannot actually be done.</p>\n</blockquote>\n<p>You cannot actually read, process, and comment upon the whole internet, or even your little corner of interesting discourse. But, you can click “Mark All As Read” and move on. River-of-news style timelines automate marking items unread instead of automating bringing you the good stuff. <a href=\"https://reederapp.com\">Reeder</a> and <a href=\"https://www.newsblur.com/\">NewsBlur</a> have options for it. I bet others do too. <a href=\"https://austinkleon.com/2021/09/28/rewinding-your-attention/\">Reclaim your attention</a>!</p>\n<blockquote>\n<p>Unfortunately, most advice on productivity and time management takes the needle-in-a-haystack approach instead. It&rsquo;s about becoming more efficient and organised, or better at prioritising, with the implied promise that you might thereby eliminate or disregard enough of life&rsquo;s unimportant nonsense to make time for the meaningful stuff. To stretch a metaphor: it&rsquo;s about reducing the size of the haystack, to make it easier to focus on the needle.</p>\n<p>There&rsquo;s definitely a role for such techniques; but in the end, the only way to deal with a too-many-needles problem is to confront the fact that it&rsquo;s insoluble – that you definitely won&rsquo;t be fitting everything in.</p>\n<p>It&rsquo;s not a question of rearranging your to-do list so as to make space for all your &ldquo;big rocks&rdquo;, but of accepting that there are simply too many rocks to fit in the jar. You have to take a stab at deciding what matters most, among your various creative passions/life goals/responsibilities – and then do that, while acknowledging that you&rsquo;ll inevitably be neglecting many other things that matter too.</p>\n</blockquote>\n<p>I’m guilty here! All the best in task management, getting things done, note-taking, journal writing, and even <a href=\"https://short.therealadam.com/2023/11/01/saying-no-is.html\">saying no</a> won’t get the work done. I have to take the gift of clarity and focus generated by all these routines, and <em>do that “big rock” important thing</em>. I have to find peace with the trade-off of doing one thing instead of all the other exciting things.</p>\n<p>Or, maybe <a href=\"https://short.therealadam.com/2023/11/16/smaller-barriers-to.html\">generative AIs</a> will provide Walt Disney-like agency to direct and sustain diverse projects outside my expertise with Imagineering-quality output. Wouldn’t it be nice!</p>\n",
				"content_text": "Oliver Burkeman, [Treat your to-read pile like a river](https://www.oliverburkeman.com/river):\n\n> To return to information overload: this means treating your \"to read\" pile like a river (a stream that flows past you, and from which you pluck a few choice items, here and there) instead of a bucket (which demands that you empty it). After all, you presumably don't feel overwhelmed by all the unread books in the British Library – and not because there aren't an overwhelming number of them, but because it never occurred to you that it might be your job to get through them all.\n> \n> I like to think of it as the productivity technique to beat all productivity techniques: finally internalizing the implications of the fact that what's genuinely impossible – the clue is in the name! – cannot actually be done.\n\nYou cannot actually read, process, and comment upon the whole internet, or even your little corner of interesting discourse. But, you can click “Mark All As Read” and move on. River-of-news style timelines automate marking items unread instead of automating bringing you the good stuff. [Reeder](https://reederapp.com) and [NewsBlur](https://www.newsblur.com/) have options for it. I bet others do too. [Reclaim your attention](https://austinkleon.com/2021/09/28/rewinding-your-attention/)!\n\n> Unfortunately, most advice on productivity and time management takes the needle-in-a-haystack approach instead. It's about becoming more efficient and organised, or better at prioritising, with the implied promise that you might thereby eliminate or disregard enough of life's unimportant nonsense to make time for the meaningful stuff. To stretch a metaphor: it's about reducing the size of the haystack, to make it easier to focus on the needle.\n> \n> There's definitely a role for such techniques; but in the end, the only way to deal with a too-many-needles problem is to confront the fact that it's insoluble – that you definitely won't be fitting everything in.\n> \n> It's not a question of rearranging your to-do list so as to make space for all your \"big rocks\", but of accepting that there are simply too many rocks to fit in the jar. You have to take a stab at deciding what matters most, among your various creative passions/life goals/responsibilities – and then do that, while acknowledging that you'll inevitably be neglecting many other things that matter too.\n\nI’m guilty here! All the best in task management, getting things done, note-taking, journal writing, and even [saying no](https://short.therealadam.com/2023/11/01/saying-no-is.html) won’t get the work done. I have to take the gift of clarity and focus generated by all these routines, and _do that “big rock” important thing_. I have to find peace with the trade-off of doing one thing instead of all the other exciting things.\n\nOr, maybe [generative AIs](https://short.therealadam.com/2023/11/16/smaller-barriers-to.html) will provide Walt Disney-like agency to direct and sustain diverse projects outside my expertise with Imagineering-quality output. Wouldn’t it be nice!\n",
				"date_published": "2023-11-17T11:52:03-07:00",
				"url": "https://therealadam.com/2023/11/17/you-cant-read.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/16/smaller-barriers-to.html",
				"title": "Smaller barriers to entry, bigger possibilities",
				"content_html": "<p>James Somer, <a href=\"https://www.newyorker.com/magazine/2023/11/20/a-coder-considers-the-waning-days-of-the-craft\">A Coder Considers the Waning Days of the Craft | The New Yorker</a>:</p>\n<blockquote>\n<p>In chess, which for decades now has been dominated by A.I., a player’s only hope is pairing up with a bot. Such half-human, half-A.I. teams, known as centaurs, might still be able to beat the best humans and the best A.I. engines working alone. Programming has not yet gone the way of chess. But the centaurs have arrived. GPT-4 on its own is, for the moment, a worse programmer than I am. Ben is much worse. But Ben plus GPT-4 is a dangerous thing.</p>\n</blockquote>\n<p><a href=\"https://simonwillison.net/2023/Nov/14/a-coder-considers-the-waning-days-of-the-craft/\">Simon Willison on the same</a>:</p>\n<blockquote>\n<p>I think AI assisted programming is going to shave a lot of the frustration off learning to code, which I hope brings many more people into the fold</p>\n</blockquote>\n<p>We’ve entered the age of AI-powered coding, writing, speaking, and painting centaurs.</p>\n<p>If we play our cards right, we will lower barriers to entry <em>and</em> raise the ceiling of possibility to new levels. If more people can <em>create</em> in mediums that are considered specializations now, that <em>might</em> open allow experts to go deeper in their specialization or branch out into areas that were inaccessible without compromising their specialization.</p>\n<p>The idea of a dilettante, a person who cultivates an area of interest, such as the arts, without real commitment or knowledge, might become acute or obsolete. We might end up with a new level of “yuck that looks some amateurish and <em>generated</em>”. Or we might end up with reviews like “the artist deftly combines generated and hand-drawn sketches with procedurally generated music modeled on their own previous album <em>I Play Pianos, By Hand, Like Duke Did</em>”.</p>\n<p>Of course, we’ve heard this story before and famed economist <a href=\"https://en.wikipedia.org/wiki/John_Maynard_Keynes\">Keynes</a> is (infamous?) for predicting mechanical automation would all have us exploring our favorite hobbies at this point. So, we gotta play our cards right.</p>\n",
				"content_text": "James Somer, [A Coder Considers the Waning Days of the Craft | The New Yorker](https://www.newyorker.com/magazine/2023/11/20/a-coder-considers-the-waning-days-of-the-craft):\n\n> In chess, which for decades now has been dominated by A.I., a player’s only hope is pairing up with a bot. Such half-human, half-A.I. teams, known as centaurs, might still be able to beat the best humans and the best A.I. engines working alone. Programming has not yet gone the way of chess. But the centaurs have arrived. GPT-4 on its own is, for the moment, a worse programmer than I am. Ben is much worse. But Ben plus GPT-4 is a dangerous thing.\n\n[Simon Willison on the same](https://simonwillison.net/2023/Nov/14/a-coder-considers-the-waning-days-of-the-craft/):\n\n>  I think AI assisted programming is going to shave a lot of the frustration off learning to code, which I hope brings many more people into the fold\n\nWe’ve entered the age of AI-powered coding, writing, speaking, and painting centaurs. \n\nIf we play our cards right, we will lower barriers to entry _and_ raise the ceiling of possibility to new levels. If more people can _create_ in mediums that are considered specializations now, that _might_ open allow experts to go deeper in their specialization or branch out into areas that were inaccessible without compromising their specialization.\n\nThe idea of a dilettante, a person who cultivates an area of interest, such as the arts, without real commitment or knowledge, might become acute or obsolete. We might end up with a new level of “yuck that looks some amateurish and _generated_”. Or we might end up with reviews like “the artist deftly combines generated and hand-drawn sketches with procedurally generated music modeled on their own previous album _I Play Pianos, By Hand, Like Duke Did_”.\n\nOf course, we’ve heard this story before and famed economist [Keynes](https://en.wikipedia.org/wiki/John_Maynard_Keynes) is (infamous?) for predicting mechanical automation would all have us exploring our favorite hobbies at this point. So, we gotta play our cards right.\n",
				"date_published": "2023-11-16T08:40:04-07:00",
				"url": "https://therealadam.com/2023/11/16/smaller-barriers-to.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/09/my-summer-at.html",
				"title": "My summer at 100 hertz",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Is there <a href=\"https://ruby.social/@therealadam/110967664496416049\">a lost art to writing code without a text editor</a>, or even a (passable) computer? It sounds romantic, I’ve done it before, I tried it again, and…it was not that great. 🤷🏻‍♂️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">0. An archaic summer, even by the standards of the late 1990s</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The summer of 2002 was my last semester interning at Texas Instruments. I was tasked with writing tests verifying the next iteration of the flagship DSP for the company, the ‘C6414<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>. This particular chip did not yet exist; I was doing pre-silicon verification. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":8586,\"sizeSlug\":\"medium\",\"linkDestination\":\"none\",\"align\":\"center\"} -->\n<figure class=\"wp-block-image aligncenter size-medium\"><img src=\"uploads/2024/3983cb4e79.jpg\" alt=\"“A baroque painting of a monk programming an old computer surrounded by stacks of paper, broken punch cards, and many discarded cups of coffee” via DALL-E\" class=\"wp-image-8586\" /><figcaption class=\"wp-element-caption\">“A baroque painting of a monk programming an old computer surrounded by stacks of paper, broken punch cards, and many discarded cups of coffee” via DALL-E</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>At the time, that meant I used the compiler toolchain for its ‘C64xx predecessors to build C programs and verify them on a development board (again, with one of the chip’s predecessors) for correctness. Then, I shipped the same compiled code off to a cluster of Sun machines<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>and ran the program on a gate-level <em>simulation</em> of the new chip based on the hardware definition language (VHDL, I think) of the as-yet physically existent chip<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The output of this execution was a rather large output file (hundreds of megabytes, IIRC) that captured the voltage levels through many<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup> of the wires on the chip<sup><a id=\"ffn5\" href=\"#fn5\" class=\"footnote\">5</a></sup>. Armed with digital analyzer software (read: it could show me if a wire were high or low voltage i.e., if its value was 0 or 1 in binary), and someone telling me how to group together the wires that represented the main registers on the chip, I could step through the state of my program by examining the register values one cycle at a time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Beyond the toolchain and workflow, which is now considered archaic and generally received by younger colleagues as an “in the snow, uphill, both ways” kind of story, I faced another complication. As you can imagine if you work out what “running a gate-level simulation of a late-90’s era computer chip on late-90’s era Sun computers” implies, from first principles, you’ll realize that at a useful level of fidelity this kind of computation is phenomenally expensive.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In fact, I had plenty of time to contemplate this and one day in fact did so. Programs that took about a minute to compile, load into a development board, and execute ran over the course of an <em>hour</em> on the simulator. Handily, the simulator output included wall-clock runtime <em>and</em> number of cycles to execute. And so I divided one by the other and came to a rough estimate that the simulator ran programs at less than 100hz; the final silicon’s clock speed was expected to hit 6-700MHz if I recall correctly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was not very productive that summer<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup>! But it does return me to the point of this essay: the time when it was better to think through a program than write it and see what the computer thought of it was not <em>that</em> great.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">1. Coding “offline” sounds romantic, was not that great</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I like to imagine software development in mythological halls like Bell Labs and Xerox PARC worked like this: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>You wrote memos on a typewriter, scribbled models and data structures in notebooks, or worked out an idea on a chalkboard. </li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Once you worked out that your idea was good, with colleagues over coffee or in your head, you started writing it out in what we’d call, today, a low-level language like C or assembly or <em>gasp</em> machine code.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>If you go far back enough, you turn a <em>literally handwritten</em> program into a typed-in program on a very low-capacity disk or a stack of punch cards.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>By means that had disappeared way earlier than I started programming, you convey that disk or stack of cards to an operator, who mediated access to an <em>actual computer</em> and eventually gave you back the results of running your program.<br></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The further you go back in computing history, the more this is how the ideas must have happened. Even in the boring places and non-hallowed halls.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I missed the transition point by about a decade,<sup><a id=\"ffn7\" href=\"#fn7\" class=\"footnote\">7</a></sup> as I was starting to write software in the late nineties. Computers were fast enough to edit, compile, and run programs such that you could think about programming <em>nearly</em> interactively. The computational surplus reached the point that you could interact with a REPL, shell, or compiler fast enough to keep context in one’s head without distraction from “compiler’s running, time for coffee”<sup><a id=\"ffn8\" href=\"#fn8\" class=\"footnote\">8</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2a. <a href=\"https://en.wikipedia.org/wiki/Snowclone\">Snow-cloning</a> the idea to modern times</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In an era of video meetings and team chats and real-time docs, this older way of working sounds somewhat relaxing. 🤷🏻‍♂️ Probably I’m a little romantic about an era I didn’t live through, and it was a bit miserable. Shuffled or damaged punch cards, failed batch jobs, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I like starting projects away from a computer, in a notebook or whiteboard. Draw all the ideas out, sketch some pseudocode. Expand on ideas, draw connections, scratch things out, make annotations, draw pictures. So much of that is nigh impossible in a text editor. Linear text areas and  rectangular canvases, no matter how infinite, don’t allow for it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>But, there’s something about using only your wits <em>and hands</em> to wrestle with a problem. A different kind of scrutiny you get from <em>writing</em> down a solution, examining it. Scratching a mistake out, scribbling a corner case to the side. Noticing something I’ve glazed over, physically adjusting your body to center it in your field-of-vision, and thinking more deeply about. I end up wondering if I should do more <em>offline</em> coding.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">2b. Ways of programming “offline” that weren’t that great in 2023</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Sketching out programs/diagrams on an iPad was not as good as I’d hoped. Applications that hint at the hardware’s paper- and whiteboard-like promise exist. But it’s still a potential future, not a current reality. The screen is too small, drawing lag exists (in software, at least), and the tactility isn’t quite right.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Writing out programs, long-hand, on paper or on a tablet is not great. I tried writing out Ruby to a high-level of fidelity<sup><a id=\"ffn9\" href=\"#fn9\" class=\"footnote\">9</a></sup>. Despite Ruby’s potential for concision, it was still like drinking a milkshake through a tiny straw. It felt my brain could think faster than I could jot code down and it made me a little dizzy to boot.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Writing pseudocode was a little more promising. Again, stylus and tablet isn’t the best, but it’s fine in a pinch. By hand on paper/notebooks/index cards is okay if you don’t mind scratching things out and generally making a mess<sup><a id=\"ffn10\" href=\"#fn10\" class=\"footnote\">10</a></sup>. Writing out pseudocode in digital notes, e.g. in fenced code blocks within a Markdown document, is an okay to get a short code out and stay in a “thinking” mindset rather than “programming”.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">3. Avoid the computer until it’s time to compute some things</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>To an absurd reduction, we use programming to turn billions of arithmetic operations into a semblance of thinking in the form of designs, documents, source files, presentations, diagrams, etc. But, rarely is the computer the best way of arriving at that thinking. More often, it’s better to step <em>away</em> from the computer and scribble or draw or brainstorm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(Aside: the pop culture of workspaces and workflows and YouTube personalities and personal knowledge management and “I will turn you into a productivity machine!” courses widely misses on the mark on <em>actually generating good ideas</em> and how poorly it fits into a highly engaged social media post, image, or video.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Find a reason to step away from the computer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Next time you’re getting started on a project, try grabbing a blank whiteboard/stack of index cards/sheet of paper. Write out the problem and start scribbling out ideas, factors to consider, ways you may have solved it before.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even better: next time you find yourself stuck, do the same.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Better still: next time you find a gnarly problem <em>inside a problem you previously thought you were on your way to solving</em>, grab that blank canvas, step away from the computer, and dump your mental state onto it. Then, start investigating how to reduce the gnarly problem to a manageable one.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>The <a href=\"https://en.wikipedia.org/wiki/Texas_Instruments_TMS320#C6000_series\">TMS320C64x</a> chips were unique in that they resembled a GPU more than a CPU. They had multiple instruction pipelines which the compiler or application developer had to try to get the most out of. It didn’t work out in terms of popularity, but it was great fun to think about. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>…in a vaguely-named and ambiguously-located datacenter somewhere. Cloud computing! <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Are we having fun yet? In retrospect, yes. <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>I don’t think it was all of the wires in the chip, as even at the time that would have been hundreds of millions of datapoints per cycle. <a href=\"#ffn4\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Again, simulated and not yet extant 🤯 <a href=\"#ffn5\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Excruciatingly so, by my current standards. <a href=\"#ffn6\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Modulo writing programs to run in gate-level simulations. <a href=\"#ffn7\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>At least, for smaller programs in some languages. <a href=\"#ffn8\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>i.e. few omitted syntactic idioms <a href=\"#ffn9\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Arguably, the point of working in physical forms is to make a mess, IMO. <a href=\"#ffn10\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-11-09T06:32:23-07:00",
				"url": "https://therealadam.com/2023/11/09/my-summer-at.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/04/tooling-has-improved.html",
				"title": "Tooling has improved for ambitious software developers",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Tools for working on software in the large<sup><a class=\"footnote\" href=\"#fn1\" id=\"ffn1\">1</a></sup> <em>have</em> improved a lot over since <a href=\"//therealadam.com/2013/06/28/tools-for-software-in-the-large/\">I last considered them ten years ago</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:image {\"lightbox\":{\"enabled\":true},\"id\":8563,\"sizeSlug\":\"medium\",\"linkDestination\":\"none\",\"align\":\"right\"} -->\n<figure class=\"wp-block-image alignright size-medium\"><img src=\"uploads/2024/bbdb1cbc48.jpg\" alt=\"A sloth cutting an impossible Gordian Knot\" class=\"wp-image-8563\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.jetbrains.com\">IDEs</a> are better, faster, and have excellent navigation/search features. Full-text search is now somewhat syntax aware and able to index and quickly query large codebases. Tools like <a href=\"https://sourcegraph.com/search\">Sourcegraph</a> exist on the high end and <a href=\"https://github.com/BurntSushi/ripgrep\">ripgrep</a> on the low end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://copilot.github.com\">AI assistants</a>/<a href=\"https://sourcegraph.com/cody/chat\">copilots</a> can wear the hat of “better autocomplete” today and may wear the “help me understand this code” or “help me write a good PR/commit message” hat later. I’m skeptical about the wisdom of handing off the latter to a program, but we’ll see how it goes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Applications have made <a href=\"https://www.elastic.co/kibana\"><code>tail -f</code></a> a better and more legible experience. Somehow, exception trackers and performance monitoring tools don’t seem to have evolved much over the past ten years. This is perhaps a result of market/product consolidation more than an indicator that the category is tapped out.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s hard for me to say how much language is creating leverage for working on software in the large. Ruby and JavaScript were prominent in my daily work ten years ago and are still prominent today. Both have evolved gradual type systems that <em>might</em> make it easier to hold a large program in an individual’s head productively. Both gradual type systems are going through the “trough of disillusionment” phase of the technology hype cycle. I’m cautiously optimistic that <em>some</em> kind of static analysis, whether it’s linters or type checkers, will make writing Ruby and JavaScript less haphazard.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Notably, deploying software doesn’t seem to have improved much at all for the individual developer. Heroku, in its prime, is still the golden standard. Perversely, Heroku sometimes fails to meet this mark. The options free of lock-in for such a service are limited-to-nascent<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In short, tooling <em>has</em> made it easier for fewer people to maintain and enhance larger software. With luck, the options for doing so without paying a monthly tithe to dozens of vendors will improve over the next decade!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>We would say “at scale”, now, shamelessly. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Notably, I have not used Kubernetes but the anecdotal data does not lead me to think I’m missing out on much. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img alt=\"\" /></figure>\n<!-- /wp:image -->\n",
				"date_published": "2023-11-04T10:37:57-07:00",
				"url": "https://therealadam.com/2023/11/04/tooling-has-improved.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/11/01/saying-no-is.html",
				"title": "Saying No is the first step",
				"content_html": "<p>Ryan Holiday, <a href=\"https://ryanholiday.net/36-lessons-on-the-way-to-36-years-old/\">35 and 34, 36 Lessons on the Way to 36 Years Old</a>:</p>\n<blockquote>\n<p>As part of that, I made the difficult decision to call my publisher to push my next book a year or so. This was a massive clearance on my schedule—several hours a day did not have to be spent researching and writing on a project. Yet it was remarkable how little my life changed. Because tasks expand to fill the space, because it is so easy to say yes to other things. <em>Less</em> demands vigilance and discipline, perhaps even more effort than actually doing stuff.</p>\n</blockquote>\n<p>The reward for saying no feels like saying yes to a more important thing. But you still need decision discipline after that first “no”.</p>\n<p>Whenever I&rsquo;ve heard things like &ldquo;the key to serene focus and productivity is saying no more often&rdquo;, it often seems like saying &ldquo;no, thanks&rdquo; on projects and potential work is the top of the hill. Like it&rsquo;s all downhill to doing great work from there. Say no, they say, puts you on easy street to writing the great American novel/album/YouTube channel/large language model.</p>\n<p>Alas, saying no is not one weird trick for exercising all of your decision-making and discipline in one crucial moment. Making great stuff requires many small moments of saying no. Say no to looking up that frivolous fact. Say no to the pull of social media. Say no to taking a day off your habit of making great stuff. Say no to that Oreo cookie. ☹️</p>\n",
				"content_text": "Ryan Holiday, [35 and 34, 36 Lessons on the Way to 36 Years Old](https://ryanholiday.net/36-lessons-on-the-way-to-36-years-old/):\n\n> As part of that, I made the difficult decision to call my publisher to push my next book a year or so. This was a massive clearance on my schedule—several hours a day did not have to be spent researching and writing on a project. Yet it was remarkable how little my life changed. Because tasks expand to fill the space, because it is so easy to say yes to other things. *Less* demands vigilance and discipline, perhaps even more effort than actually doing stuff.\n\nThe reward for saying no feels like saying yes to a more important thing. But you still need decision discipline after that first “no”.\n\nWhenever I've heard things like \"the key to serene focus and productivity is saying no more often\", it often seems like saying \"no, thanks\" on projects and potential work is the top of the hill. Like it's all downhill to doing great work from there. Say no, they say, puts you on easy street to writing the great American novel/album/YouTube channel/large language model.\n\nAlas, saying no is not one weird trick for exercising all of your decision-making and discipline in one crucial moment. Making great stuff requires many small moments of saying no. Say no to looking up that frivolous fact. Say no to the pull of social media. Say no to taking a day off your habit of making great stuff. Say no to that Oreo cookie. ☹️\n",
				"date_published": "2023-11-01T05:49:09-07:00",
				"url": "https://therealadam.com/2023/11/01/saying-no-is.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/29/have-principles-will.html",
				"title": "Have principles, will travel",
				"content_html": "<p>Pirijan, <a href=\"http://pketh.org/design-principles.html\">Kinopio&rsquo;s Design Principles</a>:</p>\n<blockquote>\n<p>The more unique and definitive your values are, the more useful they’ll be as a decision making tool later on.</p>\n<p>These are some of the principles that I use to design (and redesign) Kinopio:</p>\n<ol>\n<li>Embrace smallness</li>\n<li>Build for fidget-ability</li>\n<li>Embrace plain text</li>\n<li>A single interface for mobile and desktop</li>\n<li>Refine by pruning</li>\n</ol>\n</blockquote>\n<p>A+ examples throughout.</p>\n",
				"content_text": "Pirijan, [Kinopio's Design Principles](http://pketh.org/design-principles.html):\n\n> The more unique and definitive your values are, the more useful they’ll be as a decision making tool later on.\n> \n> These are some of the principles that I use to design (and redesign) Kinopio:\n> \n>  1. Embrace smallness\n> 2. Build for fidget-ability\n> 3. Embrace plain text\n> 4. A single interface for mobile and desktop\n> 5. Refine by pruning\n\n\nA+ examples throughout.\n",
				"date_published": "2023-10-29T12:00:27-07:00",
				"url": "https://therealadam.com/2023/10/29/have-principles-will.html",
				"tags": ["pketh","principles"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/26/top-of-mind.html",
				"title": "Top of Mind No. 6",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I’ve been thinking a lot about setting expectations and goals. I have an idea about setting expectations on how we practice software development in teams and four pillars thereof. They are, broadly: alignment/consensus, accountability/responsibility, transparency/visibility, execution. These seem like four useful touch-points for coaching individuals. More concretely: help teammates drive scope (down, mostly) by setting time expectations and iterating from there.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The other angle on my mind is using subjective measurements to evaluate changes to human systems. That is, don’t ask a person or team to change how they work and immediately hit a numeric benchmark. Instead, ask them how the change is going and rate it from 1-5, worst to best. If the desired outcome is “know what the team is up to on most days”, ask them to write a status report, but<em> don’t specify a number to hit</em>. Instead, use 1:1s to reflect on how the change is impacting their work, look for advantages or shortcomings to the change in process, and decide how to correct course from there.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Updates: <a href=\"https://therealadam.com/2023/04/26/top-of-mind-no-5/\">LLMs</a> are still promising, but not as much for leadership work. <a href=\"https://therealadam.com/2023/01/08/top-of-mind-no-3/\">Working incrementally</a>, still underrated.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-10-26T16:50:50-07:00",
				"url": "https://therealadam.com/2023/10/26/top-of-mind.html",
				"tags": ["Now","Leadership"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/24/the-point-of.html",
				
				"content_html": "<p>The point of a commonplace notebook is not to generate immediate enlightenment. Writing a quote or idea now is the tip of the iceberg. The real insight comes when reviewing commonplace notes later and the dots start to connect themselves. That’s when the galaxy brain kicks in and the magic happens.</p>\n",
				"content_text": "The point of a commonplace notebook is not to generate immediate enlightenment. Writing a quote or idea now is the tip of the iceberg. The real insight comes when reviewing commonplace notes later and the dots start to connect themselves. That’s when the galaxy brain kicks in and the magic happens.\n",
				"date_published": "2023-10-24T08:28:08-07:00",
				"url": "https://therealadam.com/2023/10/24/the-point-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/24/my-promise-to.html",
				
				"content_html": "<p>My promise to you, and the world: I will never call anything a “rig”. No matter how much people want to read about it, or how many hours I invest in it. Even if it is a car or musical equipment or an RV or something that is literally “a rig”. No matter how rigged up it is, I will find a way to dance around the word. Do unto others as they would do unto you, as they say.</p>\n",
				"content_text": "My promise to you, and the world: I will never call anything a “rig”. No matter how much people want to read about it, or how many hours I invest in it. Even if it is a car or musical equipment or an RV or something that is literally “a rig”. No matter how rigged up it is, I will find a way to dance around the word. Do unto others as they would do unto you, as they say.\n",
				"date_published": "2023-10-24T05:19:14-07:00",
				"url": "https://therealadam.com/2023/10/24/my-promise-to.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/23/build-for-the.html",
				"title": "Build for the excitement of building",
				"content_html": "<p>Nice Tietz-Sokolskaya, <a href=\"https://ntietz.com/blog/write-more-useless-software/\">Write more &ldquo;useless&rdquo; software</a>:</p>\n<blockquote>\n<p>When you spend all day working on useful things, doing the work, it&rsquo;s easy for that spark of joy to go out. … Everything you do is coupled with obligations and is associated with work itself.</p>\n<p>You lose the aspect of play that is so important.</p>\n<p>Writing useless software is a great way to free yourself from those obligations. If you write something just to play, you define what it is you want out of the project. You can stop any time, and do no more or less than you&rsquo;re interested in. Don&rsquo;t want to write tests? Skip them. Don&rsquo;t want to use an issue tracker? Ditch it. Finished learning what you wanted to? Stop the project if it&rsquo;s not fun anymore!</p>\n</blockquote>\n<p>Build for self-learning, to tell a joke, to get your mind off something, as methodical practice, or so you can write about it.</p>\n<p>You don’t always have to build for lofty open-source principles, entrepreneurial hustle, or because someone told you to!</p>\n<p>Related: <a href=\"http://wicswac.org/whyday.html\">Whyday</a> is August 19, plenty of time to plan your next frivolous hack.</p>\n",
				"content_text": "Nice Tietz-Sokolskaya, [Write more \"useless\" software](https://ntietz.com/blog/write-more-useless-software/):\n\n> When you spend all day working on useful things, doing the work, it's easy for that spark of joy to go out. … Everything you do is coupled with obligations and is associated with work itself.\n> \n> You lose the aspect of play that is so important.\n> \n> Writing useless software is a great way to free yourself from those obligations. If you write something just to play, you define what it is you want out of the project. You can stop any time, and do no more or less than you're interested in. Don't want to write tests? Skip them. Don't want to use an issue tracker? Ditch it. Finished learning what you wanted to? Stop the project if it's not fun anymore!\n\nBuild for self-learning, to tell a joke, to get your mind off something, as methodical practice, or so you can write about it.\n\nYou don’t always have to build for lofty open-source principles, entrepreneurial hustle, or because someone told you to!\n\nRelated: [Whyday](http://wicswac.org/whyday.html) is August 19, plenty of time to plan your next frivolous hack.\n",
				"date_published": "2023-10-23T05:32:05-07:00",
				"url": "https://therealadam.com/2023/10/23/build-for-the.html",
				"tags": ["ntietz"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/13/the-pace-youre.html",
				"title": "The pace you’re reading is the right pace for you to read",
				"content_html": "<p>Ted Gioia, <a href=\"https://www.honest-broker.com/p/my-lifetime-reading-plan\">My Lifetime Reading Plan</a>:</p>\n<blockquote>\n<p><strong>IT’S OKAY TO READ SLOWLY</strong></p>\n<p>I tell myself that, because I am not a fast reader.</p>\n</blockquote>\n<p>By his accounts, Gioia is a prolific and thorough reader. And yet, a self-proclaimed non-speed-reader.</p>\n<p>You don’t have to read super-fast if you’re always reading whatever is right for you at the moment. Doubly so if you’re deeply/actively reading, searching for understanding or assimilating ideas into your own mental arena.</p>\n<p>Once more for the slow readers, like myself, in the back: it’s fine, just keep reading!</p>\n",
				"content_text": "Ted Gioia, [My Lifetime Reading Plan](https://www.honest-broker.com/p/my-lifetime-reading-plan):\n\n> **IT’S OKAY TO READ SLOWLY**\n> \n> I tell myself that, because I am not a fast reader.\n\nBy his accounts, Gioia is a prolific and thorough reader. And yet, a self-proclaimed non-speed-reader. \n\nYou don’t have to read super-fast if you’re always reading whatever is right for you at the moment. Doubly so if you’re deeply/actively reading, searching for understanding or assimilating ideas into your own mental arena.\n\nOnce more for the slow readers, like myself, in the back: it’s fine, just keep reading!\n",
				"date_published": "2023-10-13T08:12:02-07:00",
				"url": "https://therealadam.com/2023/10/13/the-pace-youre.html",
				"tags": ["reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/03/inside-you-there.html",
				"title": "Inside you, there are two or more brains",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>David Hoang, <a href=\"https://www.proofofconcept.pub/p/galaxy-brain-gravity-brain-and-ecosystem\">Galaxy Brain, Gravity Brain, and Ecosystem Brain</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>The Galaxy Brain thinkers are in 3023 while we're in 2023. They relentlessly pursue the questions, “What if?” Imagination and wonder fuel the possibilities of what the world could be.</p><p>…</p><p>I believe every strong team requires skeptics and realists. Introducing, the Gravity Brain. Don't get it twisted in thinking this is negative—it's a huge positive. If you say \"jump,\" to a Gravity Brain person, they won't say, \"how high?\" Instead, they say, \"Why are we jumping? Have we considered climbing a ladder? Based on the average vertical jump of humans on Earth, this isn't worth our time.\" Ambition and vision don’t matter if you don’t make progress towards them.</p><p>…</p><p>Ecosystem Brains think a lot of forces of nature and behaviors. They are usually architects and world builders. When they join a new company, they do an archeological dig to understand the history of society, language, and other rituals.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>I’m a natural gravity brain and occasional ecosystem brain. I aspire to galaxy brain, but often get there by of proposing a joke/bad idea to clear my mind and get to the good ideas.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Which one are you?</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-10-03T05:36:07-07:00",
				"url": "https://therealadam.com/2023/10/03/inside-you-there.html",
				"tags": ["Leadership","people:david-hoang"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/10/02/aristotles-ethical-means.html",
				
				"content_html": "<p><a href=\"https://austinkleon.com/2023/05/16/virtue-is-in-between-vices/\">Aristotle&rsquo;s ethical means of virtue and vice</a> but for creative work:</p>\n<ul>\n<li>Winning is the mean between moving the goal-lines to finish and not finishing due to non-constructive goal-lines</li>\n<li>Quality is the mean between piles of incomplete junk and one or two overwrought ideas</li>\n<li>Taste is the mean between copying and invention in a vacuum of influences</li>\n<li>Flow is the mean between distraction and idleness</li>\n<li>Iteration is the mean between doing it once because you nailed it and doing it once because you gave up</li>\n</ul>\n",
				"content_text": "[Aristotle's ethical means of virtue and vice](https://austinkleon.com/2023/05/16/virtue-is-in-between-vices/) but for creative work:\n\n- Winning is the mean between moving the goal-lines to finish and not finishing due to non-constructive goal-lines\n- Quality is the mean between piles of incomplete junk and one or two overwrought ideas\n- Taste is the mean between copying and invention in a vacuum of influences\n- Flow is the mean between distraction and idleness\n- Iteration is the mean between doing it once because you nailed it and doing it once because you gave up\n",
				"date_published": "2023-10-02T05:34:42-07:00",
				"url": "https://therealadam.com/2023/10/02/aristotles-ethical-means.html",
				"tags": ["Creativity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/29/im-not-your.html",
				"title": "I’m not your cool uncle",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I find that playing the “I’m the leader, this is the decision, go forth and do it” card is not fun and almost always wrought with unintended consequences. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>A notable exception is teams that fall back to working in their own specialized lanes<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> and throwing things over the wall. Really, the issue is throwing things over the wall, working in your lane isn’t inherently harmful<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. Playing the leader card and insisting folks work across specialization in their lane or closely with a teammate whose skills complement their own has fixed more things than it complicated. More specifically, the complications were the kind of difficulties a high-functioning team would face anyway, i.e., “high-quality problems”.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Now I wonder what other scenarios justify playing the power dynamic or “I’m not your cool uncle” card to escape an unproductive local maximum.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">e.g. back-end, front-end, mobile, etc. <a href=\"#ffn1\">&#8617;</a></li>\n\t<li id=\"fn2\">Assuming you’re adept at communicating progress and avoiding rabbit holes <a href=\"#ffn2\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2023-09-29T08:00:00-07:00",
				"url": "https://therealadam.com/2023/09/29/im-not-your.html",
				"tags": ["Leading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/28/the-textual-framework.html",
				"title": "The Textual framework",
				"content_html": "<blockquote>\n<p><a href=\"https://textual.textualize.io\">Textual</a> is a <em>Rapid Application Development</em> framework for Python, built by <a href=\"https://www.textualize.io/\">Textualize.io</a>.</p>\n<p>Build sophisticated user interfaces with a simple Python API. Run your apps in the terminal and (<em>coming soon</em>) a web browser.</p>\n</blockquote>\n<p>Works across operating systems and platforms: terminal, GUI, and web (apparently). Uses CSS for styling internally. A wild implementation choice, but probably practical for adoption!</p>\n<p>May many more, modern/practical Visual Basic 6/Delphi-like tools bloom. 🤞</p>\n",
				"content_text": "> [Textual](https://textual.textualize.io) is a _Rapid Application Development_ framework for Python, built by [Textualize.io](https://www.textualize.io/).\n> \n> Build sophisticated user interfaces with a simple Python API. Run your apps in the terminal and (_coming soon_) a web browser.\n\nWorks across operating systems and platforms: terminal, GUI, and web (apparently). Uses CSS for styling internally. A wild implementation choice, but probably practical for adoption!\n\nMay many more, modern/practical Visual Basic 6/Delphi-like tools bloom. 🤞\n",
				"date_published": "2023-09-28T05:07:36-07:00",
				"url": "https://therealadam.com/2023/09/28/the-textual-framework.html",
				"tags": ["python"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/23/stop-writing.html",
				"title": "Stop writing",
				"content_html": "<p>George Saunders on <a href=\"https://georgesaunders.substack.com/p/office-hours-8e8\">getting past self-critical/low-energy writing spirals</a> (aka one of the many forms of writer’s block):</p>\n<blockquote>\n<p>Another thing I sometimes suggest is this: stop writing. That is, stop doing your “real” writing. Yank yourself out of your usual daily routine. Instead, today, off the top of your head, write one sentence. Don’t think about what it should be about, or any of that. Just slap some crazy stuff down on the page. (Or it can be sane stuff. The “slapping down” is the key.) Print it out. Then, go do something else and, over the next 24 hours, do your best not to give that sentence a single thought.</p>\n</blockquote>\n<p>The complete method, in my own words:</p>\n<ul>\n<li>Start with a sentence, nothing in particular. Just start.</li>\n<li>Return to that sentence daily, making additions or changes that feel right.</li>\n<li>As the thing grows from a sentence to a paragraph and so on, spend more time with it. But don&rsquo;t sweat the magnitude of the output. A trivial punctuation change is &ldquo;a good day&rsquo;s work&rdquo;.</li>\n<li>Get bolder in the changes. Do what you prefer and don&rsquo;t worry about why it is you gravitate towards that particular change.</li>\n<li>Resist the urge to switch from working on an exercise to working your routine/process. Keep growing it instinctively.</li>\n<li>Eventually you have a whole story/essay/whatever written this way and you&rsquo;re happy to do something with it.</li>\n<li>Now you are un-stuck.</li>\n</ul>\n<p>(Am I using this post to get past a lull in publishing? Yes.)</p>\n",
				"content_text": "George Saunders on [getting past self-critical/low-energy writing spirals](https://georgesaunders.substack.com/p/office-hours-8e8) (aka one of the many forms of writer’s block):\n\n> Another thing I sometimes suggest is this: stop writing. That is, stop doing your “real” writing. Yank yourself out of your usual daily routine. Instead, today, off the top of your head, write one sentence. Don’t think about what it should be about, or any of that. Just slap some crazy stuff down on the page. (Or it can be sane stuff. The “slapping down” is the key.) Print it out. Then, go do something else and, over the next 24 hours, do your best not to give that sentence a single thought. \n\nThe complete method, in my own words:\n\n- Start with a sentence, nothing in particular. Just start.\n- Return to that sentence daily, making additions or changes that feel right.\n- As the thing grows from a sentence to a paragraph and so on, spend more time with it. But don't sweat the magnitude of the output. A trivial punctuation change is \"a good day's work\".\n- Get bolder in the changes. Do what you prefer and don't worry about why it is you gravitate towards that particular change.\n- Resist the urge to switch from working on an exercise to working your routine/process. Keep growing it instinctively.\n- Eventually you have a whole story/essay/whatever written this way and you're happy to do something with it.\n- Now you are un-stuck.\n\n(Am I using this post to get past a lull in publishing? Yes.)\n",
				"date_published": "2023-09-23T13:30:08-07:00",
				"url": "https://therealadam.com/2023/09/23/stop-writing.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/06/build-with-language.html",
				"title": "Build with language models via llm",
				"content_html": "<p><a href=\"https://llm.datasette.io/en/stable/index.html\"><code>llm</code></a> (<a href=\"https://til.therealadam.com/2023/08/27/llm-is-a.html\">previously</a>) is a tool Simon Willison is working on for interacting with large language models, running via API <em>or</em> locally.</p>\n<p>I set out to use <code>llm</code> as the glue for prototyping tools to generate embeddings from one of my journals so that I could experiment with search and clustering on my writings. Approximately, what I’m building is an ETL workflow: extract/export data from my journals, transform/index as searchable vectors, load/query for “what docs are similar to or match this query”.</p>\n<h2 id=\"extract-and-transform-approximately\">Extract and transform, approximately</h2>\n<p>Given a JSON export from DayOne, this turned out to be a matter of shell pipelines. After some iterations with prompting (via Raycast’s GPT3.5 integration), I came up with a simple script for extracting entries and loading them into a SQLite database containing embedding vectors:</p>\n<pre><code>#!/bin/sh\n# extract-entries.sh\n# $ ./extract-entries Journals.json\n\nfile=$1\ncat $file |\n  jq '[.entries[] | {id: .uuid, content: .text}]' |\n  llm embed-multi journals - \\ # [1]\n    --format json \\\n    --model sentence-transformers/all-MiniLM-L6-v2 \\ # [2]\n    --database journals.db \\\n    --store\n</code></pre>\n<p>A couple things to note here:</p>\n<ol>\n<li>The placement of the <code>-</code> parameter matters here. I’m used to placing it at the end of the parameter list, but that didn’t work. The <a href=\"https://llm.datasette.io/en/stable/embeddings/cli.html#llm-embed-multi\"><code>llm embed-multi</code></a> docs suggest that <code>--input</code> is equivalent, but I think that’s a docs bug (the parameter doesn’t seem to exist in the released code).</li>\n<li>I’m using locally-run model to generate the embeddings. This is very cool!</li>\n</ol>\n<p>In particular, <code>llm embed-multi</code> takes one JSON doc per line, expecting <code>id/content</code> keys, and “indexes” those into a database of document/embedding rows. (If you’re thinking “hey, it’s SQLite, that has full search, why not both: yes, me too, that’s what I’m hoping to accomplish next!)</p>\n<p>I probably could have just built this by iterating on shell commands, but I like editing with a full-blown editor and don’t particularly want to practice at using the zsh builtin editor. 🤷🏻‍♂️</p>\n<h2 id=\"load-of-a-sort\">Load, of a sort</h2>\n<p>Once that script finishes (it takes a few moments to generate all the embeddings), querying for documents similar to a query text is also straightforward:</p>\n<pre><code># Query the embeddings and pretty display the results\n# query.sh\n# ./query.sh &quot;What is good in life?&quot;\nquery=$1\n\nllm similar journals \\\n  --number 3 \\\n  --content &quot;$query&quot; |\n  jq -r -c '.content' | # [1]\n  mdcat # [2]\n</code></pre>\n<p>Of note, two things that probably should have been more obvious to me:</p>\n<ol>\n<li>I don’t need to write a for-loop in shell to handle the output of <code>llm similar</code>; <code>jq</code> basically has an option for that</li>\n<li>Pretty-printing Markdown to a terminal is trivial after <code>brew install mdcat</code></li>\n</ol>\n<p>I didn’t go too far into clustering, which also boils down to one command: <code>llm cluster journals 10</code>. I hit a hiccup wherein I couldn’t run a model like LLaMa2 or an even smaller one because of issues with my installation.</p>\n<h2 id=\"things-i-learned\">Things I learned!</h2>\n<ul>\n<li><code>jq</code> is very good on its own!\n<ul>\n<li>and has been for years, probably!</li>\n<li>using a copilot to help me take the first step with syntax using <em>my own</em> data is the epiphany here</li>\n</ul>\n</li>\n<li><code>llm</code> is quite good, doubly so with its growing ecosystem of plugins\n<ul>\n<li>if I were happier with using shells, I could have done all of this in a couple relatively simple commands</li>\n<li>it provides an adapter layer that makes it <em>possible</em> to start experimenting/developing against usage-priced APIs and switch to running models/APIs locally when you get serious</li>\n</ul>\n</li>\n<li>it’s feasible to do some kinds of LLM work on your own computer\n<ul>\n<li>in particular, if you don’t mind trading your own time getting your installation right to gain independence from API vendors and usage-based pricing</li>\n</ul>\n</li>\n</ul>\n<p>Mission complete: I have a queryable index of document vectors I can experiment with for searching, clustering, and building applications on top of my journals.</p>\n",
				"content_text": "[`llm`](https://llm.datasette.io/en/stable/index.html) ([previously](https://til.therealadam.com/2023/08/27/llm-is-a.html)) is a tool Simon Willison is working on for interacting with large language models, running via API _or_ locally.\n\nI set out to use `llm` as the glue for prototyping tools to generate embeddings from one of my journals so that I could experiment with search and clustering on my writings. Approximately, what I’m building is an ETL workflow: extract/export data from my journals, transform/index as searchable vectors, load/query for “what docs are similar to or match this query”.\n\n## Extract and transform, approximately\nGiven a JSON export from DayOne, this turned out to be a matter of shell pipelines. After some iterations with prompting (via Raycast’s GPT3.5 integration), I came up with a simple script for extracting entries and loading them into a SQLite database containing embedding vectors:\n\n\t#!/bin/sh\n\t# extract-entries.sh\n\t# $ ./extract-entries Journals.json\n\t\n\tfile=$1\n\tcat $file |\n\t  jq '[.entries[] | {id: .uuid, content: .text}]' |\n\t  llm embed-multi journals - \\ # [1]\n\t    --format json \\\n\t    --model sentence-transformers/all-MiniLM-L6-v2 \\ # [2]\n\t    --database journals.db \\\n\t    --store\n\nA couple things to note here:\n\n1. The placement of the `-` parameter matters here. I’m used to placing it at the end of the parameter list, but that didn’t work. The [`llm embed-multi`](https://llm.datasette.io/en/stable/embeddings/cli.html#llm-embed-multi) docs suggest that `--input` is equivalent, but I think that’s a docs bug (the parameter doesn’t seem to exist in the released code).\n2. I’m using locally-run model to generate the embeddings. This is very cool!\n\nIn particular, `llm embed-multi` takes one JSON doc per line, expecting `id/content` keys, and “indexes” those into a database of document/embedding rows. (If you’re thinking “hey, it’s SQLite, that has full search, why not both: yes, me too, that’s what I’m hoping to accomplish next!)\n\nI probably could have just built this by iterating on shell commands, but I like editing with a full-blown editor and don’t particularly want to practice at using the zsh builtin editor. 🤷🏻‍♂️\n\n## Load, of a sort\nOnce that script finishes (it takes a few moments to generate all the embeddings), querying for documents similar to a query text is also straightforward:\n\n\t# Query the embeddings and pretty display the results\n\t# query.sh\n\t# ./query.sh \"What is good in life?\"\n\tquery=$1\n\t\n\tllm similar journals \\\n\t  --number 3 \\\n\t  --content \"$query\" |\n\t  jq -r -c '.content' | # [1]\n\t  mdcat # [2]\n\nOf note, two things that probably should have been more obvious to me:\n\n1. I don’t need to write a for-loop in shell to handle the output of `llm similar`; `jq` basically has an option for that\n2. Pretty-printing Markdown to a terminal is trivial after `brew install mdcat`\n\nI didn’t go too far into clustering, which also boils down to one command: `llm cluster journals 10`. I hit a hiccup wherein I couldn’t run a model like LLaMa2 or an even smaller one because of issues with my installation.\n\n## Things I learned!\n- `jq` is very good on its own!\n\t- and has been for years, probably!\n\t- using a copilot to help me take the first step with syntax using _my own_ data is the epiphany here\n- `llm` is quite good, doubly so with its growing ecosystem of plugins\n\t- if I were happier with using shells, I could have done all of this in a couple relatively simple commands\n\t- it provides an adapter layer that makes it _possible_ to start experimenting/developing against usage-priced APIs and switch to running models/APIs locally when you get serious\n- it’s feasible to do some kinds of LLM work on your own computer\n\t- in particular, if you don’t mind trading your own time getting your installation right to gain independence from API vendors and usage-based pricing\n\nMission complete: I have a queryable index of document vectors I can experiment with for searching, clustering, and building applications on top of my journals.\n",
				"date_published": "2023-09-06T13:14:38-07:00",
				"url": "https://therealadam.com/2023/09/06/build-with-language.html",
				"tags": ["cli","simon-willison","llm"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/04/read-papers-work.html",
				"title": "Read papers, work tutorials, the learning will happen",
				"content_html": "<p>(Previously: <a href=\"https://til.therealadam.com/2023/09/03/building-a-language.html\">Building a language model from scratch, from a tutorial</a>)</p>\n<p>I started to get a little impatient in transcribing linear algebra code <a href=\"https://blog.briankitano.com/llama-from-scratch/\">from the tutorial</a> into my version. In part, it’s tedious typing. More interesting, GitHub Copilot trying to autocomplete the code was sometimes right and sometimes the wrong idiom and actively deciding which was which compounded the tedium. This is a big lesson for our “humans-in-the-loop supervise generative LLMs” near-future. 😬</p>\n<p>OTOH, when I got to the part where an attention head was implemented, it made <em>way</em> more sense having read <a href=\"https://arxiv.org/abs/1706.03762\">Attention is All You Need</a> previously. That feels like a big level-up: reading papers <em>and</em> working through implementations thereof brings it all together in a big learning moment. Success! 📈</p>\n",
				"content_text": "(Previously: [Building a language model from scratch, from a tutorial](https://til.therealadam.com/2023/09/03/building-a-language.html))\n\nI started to get a little impatient in transcribing linear algebra code [from the tutorial](https://blog.briankitano.com/llama-from-scratch/) into my version. In part, it’s tedious typing. More interesting, GitHub Copilot trying to autocomplete the code was sometimes right and sometimes the wrong idiom and actively deciding which was which compounded the tedium. This is a big lesson for our “humans-in-the-loop supervise generative LLMs” near-future. 😬\n\nOTOH, when I got to the part where an attention head was implemented, it made _way_ more sense having read [Attention is All You Need](https://arxiv.org/abs/1706.03762) previously. That feels like a big level-up: reading papers _and_ working through implementations thereof brings it all together in a big learning moment. Success! 📈\n",
				"date_published": "2023-09-04T11:25:57-07:00",
				"url": "https://therealadam.com/2023/09/04/read-papers-work.html",
				"tags": ["ai","people:brian-kitano","llm"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/09/03/building-a-language.html",
				"title": "Building a language model from scratch, from a tutorial",
				"content_html": "<p>I’m working from <a href=\"https://blog.briankitano.com/llama-from-scratch/\">Brian Kitano’s Llama from scratch (or how to implement a paper without crying)</a>. It’s very deep, so I probably won’t make it <em>all</em> the way through the long-weekend I’ve allocated for it.</p>\n<p>I’ve skimmed the paper, but didn’t pay extremely close attention to the implementation details. But the tutorial provides breadcrumbs into the deeply math-y bits. No problems here.</p>\n<p>I noticed that there are <a href=\"https://ankane.org/ruby-ml-for-python-coders\">Ruby bindings for most of these ML libraries</a> and was <em>tempted</em> to try implementing it in the language I love. But I would rather not get mired in looking up docs or translating across languages/APIs. And, I want to get more familiar with Python (after almost twenty years of not using it).</p>\n<p>I started off trying to implement this like a Linux veteran would, as a basic CLI program. Nonetheless I switched over to Jupyter as it looks like part of building models is analyzing plots and that’s not going to go well on a CLI. And, so I’m not swimming upstream so much.</p>\n<p>Per an idea from <a href=\"https://simonwillison.net/2023/Aug/27/wordcamp-llms/\">Making Large Language Models work for you</a>, I’m frequently using ChatGPT to quickly understand the PyTorch neural network APIs in context. Normally, I’d go on a time-consuming side-quest getting up to speed on an unfamiliar ecosystem. ChatGPT is reducing that from hours and possibly a blocker to a few minutes. Highly recommend reading those slides and trying a few of the ideas in your daily work.</p>\n",
				"content_text": "I’m working from [Brian Kitano’s Llama from scratch (or how to implement a paper without crying)](https://blog.briankitano.com/llama-from-scratch/). It’s very deep, so I probably won’t make it _all_ the way through the long-weekend I’ve allocated for it.\n\nI’ve skimmed the paper, but didn’t pay extremely close attention to the implementation details. But the tutorial provides breadcrumbs into the deeply math-y bits. No problems here.\n\nI noticed that there are [Ruby bindings for most of these ML libraries](https://ankane.org/ruby-ml-for-python-coders) and was _tempted_ to try implementing it in the language I love. But I would rather not get mired in looking up docs or translating across languages/APIs. And, I want to get more familiar with Python (after almost twenty years of not using it).\n\nI started off trying to implement this like a Linux veteran would, as a basic CLI program. Nonetheless I switched over to Jupyter as it looks like part of building models is analyzing plots and that’s not going to go well on a CLI. And, so I’m not swimming upstream so much.\n\nPer an idea from [Making Large Language Models work for you](https://simonwillison.net/2023/Aug/27/wordcamp-llms/), I’m frequently using ChatGPT to quickly understand the PyTorch neural network APIs in context. Normally, I’d go on a time-consuming side-quest getting up to speed on an unfamiliar ecosystem. ChatGPT is reducing that from hours and possibly a blocker to a few minutes. Highly recommend reading those slides and trying a few of the ideas in your daily work.\n",
				"date_published": "2023-09-03T12:22:26-07:00",
				"url": "https://therealadam.com/2023/09/03/building-a-language.html",
				"tags": ["ai","python","simon-willison","people:brian-kitano"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/27/i-wonder-how.html",
				
				"content_html": "<p>I wonder how Vonnegut might have coped with the <em>acceleration of change</em> we cope with in our modern dilemma.</p>\n<blockquote>\n<p>It’s just a hell of a time to be alive, is all—just this goddamn messy business of people having to get used to new ideas. And people just don’t, that’s all. I wish this were a hundred years from now, with everybody used to the change.</p>\n<p>– Kurt Vonnegut, <em>Player Piano</em></p>\n</blockquote>\n<p>He wrote so much about time, traversing it and getting unstuck in it, that I think he might have shrugged and stuck to an earlier motif: So it goes.</p>\n",
				"content_text": "I wonder how Vonnegut might have coped with the _acceleration of change_ we cope with in our modern dilemma.\n\n> It’s just a hell of a time to be alive, is all—just this goddamn messy business of people having to get used to new ideas. And people just don’t, that’s all. I wish this were a hundred years from now, with everybody used to the change.\n> \n>  – Kurt Vonnegut, _Player Piano_\n\nHe wrote so much about time, traversing it and getting unstuck in it, that I think he might have shrugged and stuck to an earlier motif: So it goes.\n",
				"date_published": "2023-08-27T15:00:10-07:00",
				"url": "https://therealadam.com/2023/08/27/i-wonder-how.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/27/link-directly-to.html",
				"title": "Link directly to stations in Apple Music",
				"content_html": "<p><a href=\"https://tools.applemediaservices.com/apple-music\">Generate Apple Music URLs</a> via Apple Music Marketing Tools. Query by song, album, basically anything you can search in the Music.app sidebar.</p>\n<p>e.g. WEFUNK radio, long URL: <code>https://tools.applemediaservices.com/station/ra.1461224745?country=us</code></p>\n<p>Purple Current, short URL: <code>https://apple.co/3sCvX8o</code></p>\n<p>Marfa Public radio, 98.9 KMKB: <code>https://apple.co/3sw6LRd</code></p>\n<p>Handy for building <a href=\"https://til.therealadam.com/categories/shortcuts/\">Shortcuts</a> to specific stations! Apple still doesn’t provide direct navigation to streams, in the year 2023 🤦‍♂️.</p>\n",
				"content_text": "[Generate Apple Music URLs](https://tools.applemediaservices.com/apple-music) via Apple Music Marketing Tools. Query by song, album, basically anything you can search in the Music.app sidebar.\n\ne.g. WEFUNK radio, long URL: `https://tools.applemediaservices.com/station/ra.1461224745?country=us`\n\nPurple Current, short URL: `https://apple.co/3sCvX8o`\n\nMarfa Public radio, 98.9 KMKB: `https://apple.co/3sw6LRd`\n\nHandy for building [Shortcuts](https://til.therealadam.com/categories/shortcuts/) to specific stations! Apple still doesn’t provide direct navigation to streams, in the year 2023 🤦‍♂️.\n",
				"date_published": "2023-08-27T14:52:39-07:00",
				"url": "https://therealadam.com/2023/08/27/link-directly-to.html",
				"tags": ["shortcuts"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/27/llm-is-a.html",
				
				"content_html": "<p><a href=\"https://simonwillison.net/2023/Jul/12/llm/\"><code>llm</code></a> is a wrapper for interacting with locally run (or remote, via API) generative AIs from Simon Willison. Tastes great with <a href=\"https://gpt4all.io/index.html\">gpt4all</a>, which assists in downloading and running models locally.</p>\n",
				"content_text": "[`llm`](https://simonwillison.net/2023/Jul/12/llm/) is a wrapper for interacting with locally run (or remote, via API) generative AIs from Simon Willison. Tastes great with [gpt4all](https://gpt4all.io/index.html), which assists in downloading and running models locally.\n",
				"date_published": "2023-08-27T13:58:19-07:00",
				"url": "https://therealadam.com/2023/08/27/llm-is-a.html",
				"tags": ["cli","ai"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/23/i-got-better.html",
				"title": "I got better at estimating projects with intentional practice",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>I like the idea of practicing<sup><a class=\"footnote\" href=\"#fn1\" id=\"ffn1\">1</a></sup>, in the musical or athletic sense, at professional skills to rapidly improve my performance and reduce my error rate. When I was a music major<sup><a class=\"footnote\" href=\"#fn2\" id=\"ffn2\">2</a></sup>, I spent hours practicing ahead of rehearsals, lessons, and performance. Until recently, I was unable to conceive of how I might do the same for leadership.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>Estimating the time and effort of a software project is error-prone, even when one considers how error-prone the activity is<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup>. Reasoning about a clearly defined functional scope is a classic \"unreasonably difficult even when accounting for how difficult it is\" problem. Everyone wants to know how many days a project will take, but few try to understand the myriad, interconnected ways the number of days can grow surprisingly large. (More on that later.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I figured out was, practicing at estimates is as “repeatable and atomic” (see below) as scales are for music. The material one needs as <em>input</em> to <em>practice</em> at estimating is available on the marketing websites of the numerous startups, technology, and software product companies out in the world. Any number of feature or pricing pages are sufficiently interesting to ask myself, \"how would I start building the functionality or feature advertised here?” Then, do a 15-60 minute exercise of breaking it down, thinking about scenarios, discovering risks and dependencies, laying out a plan, and even thinking out the high-level technical design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is even easier if I start from products I already know well from daily use. Most developers know GitHub's features pretty well. Starting from their <a href=\"https://github.com/features/code-review\">Pull Requests</a> marketing page is a familiar starting point. This lets one work on the mechanics of thinking holistically about the functional scope. Then, I can get down to details about how to build a (hypothetical) wholly new capability or feature into a (hypothetical) product.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This insight allowed me to move past a \"I guess estimating is a struggle bus that could limit my growth\" mindset. Now I feel like \"I can get as good as I want at this by doing the reps\", much like practicing at music or free throws<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">The recipe for practicing at estimating</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Think up some kind of project I might do in the future <em>or</em></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Find a software product page on the web and use that as an imaginary requirements document<sup><a class=\"footnote\" href=\"#fn5\" id=\"ffn5\">5</a></sup></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Spend 20 minutes going through the motions of how I like to estimate projects (break down scopes, think through happy/edge cases)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Spend 10 minutes breaking down the work, identifying the risks, etc. – use an outline, sticky notes, a whiteboard, whatever works</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Reflect on what I came up with, how I’d tackle it differently next time</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Rinse and repeat. Take a different approach to the same project. Estimate a different project. Try the exercise with a few of my favorite colleagues/collaborators and see how it comes out differently.<br></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The most important thing to keep in mind: formality is not required when practicing. It’s about low-stakes and fast iteration.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Practice makes estimating less imperfect</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Practice can make software estimates more useful. Not more prescient, necessarily. But definitely, I can produce better outcomes by practicing <em>around</em> the process of planning and estimating software.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Practice works because it is <em>atomic</em> and <em>repeatable</em>. I’m using database terminology a little oddly here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Atomic, in the sense of database transactions, means I can \"return to square one\" at my discretion without imposing on anyone else. To carry the metaphor, practice sessions are more atomic than rehearsals or performances. I can throw away the results of my estimation practice session without ruining anyone’s project/roadmap/schedule.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Repeatable means I can estimate similar projects over and over again until I’m satisfied I’ve reached the level of skill mastery necessary. To carry the metaphor, I practice a passage or shoot free throws until I’m confident I can perform it correctly the vast majority of the time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The great thing about practicing at estimating <em>fake</em> projects is it <em>will</em> make me better at estimating <em>real</em> projects. Like they say: practice makes perfect.<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Equally great, I’m not accountable for fake projects. I don’t have to worry about breaking things down incoherently or overlooking a key bit of functionality. Hopefully, I find it upon review and reach a state of coherent, complete estimates. But the risk of one individual practice estimate ruining someone’s working week is non-existent.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The web is rife with practice material. Grab a short product description, pitch, etc. Marketing and feature pages on a favorite app’s website work great. Previous projects or imagined software work too. Maybe jot down prior assumptions, e.g., I’ve already built authentication or a mobile app or payments. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With a “practice” functional scope and some constraints in mind, it’s time to start practicing. Ask where the seams are, how to split things up, what are the risks, could this part be omitted, do we have prior art for this, etc. Make a list or board or mind-map or whatever. Organize it by concept or how I would tackle the project. Look for gaps in how I would explain the plan or pitch it to my team. These all work well for me, but you may estimate differently. That’s fine, and the point! Try different approaches and see what is effective, efficient, and generative.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I can practice at taking the <em>idea</em> for a software project, feature, enhancement, etc. and turning it into a <em>plan</em> for how to build it. When I practice at this, I improve at finding risks, breaking down problems, writing down ideas, coming up with novel approaches, considering how to apply technology to solve problems, deciding which parts of the problem to focus on, etc. All of this yields better plans for building the project, which leads to better execution. Somewhere in the middle of those plans come estimation, which I’m getting more reps at, so hopefully I’m getting better at it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Planning and estimating software forces me to turn over stones I may otherwise overlook. It gives me an opportunity to tackle kinds of software I may not otherwise build, or even learn how to build software I may not otherwise build at a high level. For example, I have no idea how to build a game, but practicing estimating a game project sends me down a discovery process that will certainly teach me something<sup><a id=\"ffn7\" href=\"#fn7\" class=\"footnote\">7</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Rinse and repeat. Do this over and over until you are as good as you want to be at estimating software. Maybe do this with your team. It’s a little harder, but teaching everyone to do it will raise all ships.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A crucial element of practice is immediate feedback; “how’d I do?”. Practicing at estimation gives me one kind of immediate feedback in the form of revealing more of the puzzle as I go. On the other hand, I (still) don’t get the crucial feedback that makes software estimation so difficult in the first place — measurement of accuracy and precision. Software estimation is hard because a lot of the factors that go into how long building software takes are invisible and unpredictable.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Reflections on practicing at estimating software projects</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>So, I found it possible to quickly gain experience at the “guessing at numbers” part of estimation. This bit is amenable to iteration – I can work through a stack of software project ideas, call upon my experience, and guess at what the tasks are and how long they might take. I did several of these over the course of a couple of weeks. I found it effective enough, I no longer felt like I was “working from behind” when called upon to estimate how the effort and time for a project at work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lately, I’m using <a href=\"https://jacobian.org/2021/may/25/my-estimation-technique/\">Jacob Kaplan-Moss’ approach to estimation</a>. List out the tasks, score them by effort and risk/variance. Add up the numbers and get a sum. Decide that number is fine, or investigate the critical tasks (large effort or high variance) to get a better idea how to break them into less risky tasks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://therealadam.com/2023/05/07/improving-when-you-cant-rinse-and-repeat/\">Practice makes challenging activities something you can rinse and repeat.</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Key caution: this kind of iterative improvement is not the same kind of activity as Platonic practice activities like shooting free throws or methodically learning a piece of music. To use a coarse analogy, practicing at estimating software is like practicing free throws, but I can’t see or hear the ball after I release it. There’s no feedback loop, I can’t know if the shot went in, bounced off the backboard, or missed entirely<sup><a id=\"ffn8\" href=\"#fn8\" class=\"footnote\">8</a></sup>. In other words, everything that happens after the initial estimate is the wicked problem that defies both practice and systemic, industry-wide improvement.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the other hand, this form of the activity <em>does</em> look like basketball or musical practice because it’s in a safe bubble. My practice at estimating doesn’t put real projects with real people working them at risk. If I try something unusual, no one has to put up with it later. This affords trying multiple approaches to the same problem and experimentation. I find this is the key insight – for <em>some</em> non-coding leadership/management activities, it’s possible to practice at some <em>part</em> of the activity and gain confidence in running that part. Possibly, not the whole thing, but at least a slice of the process is improvable without relying on live people and live work for non-methodical iteration and experimentation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">In short…</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Estimating software projects is a relatively easy, learnable planning/brainstorming creative task coupled with wicked expectations of the ability to predict the future in terms of outcomes, unknowns, risks, and things that just don’t go my way. I can practice at the first part.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No software estimate is perfect. The world is full of surprises<sup><a id=\"ffn9\" href=\"#fn9\" class=\"footnote\">9</a></sup>. Focus on the easy part, decomposition and discovery. Tackle all the execution stuff downstream separately.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>This thinking was inspired by an Andy Matuschak Patreon post on <a href=\"https://www.patreon.com/posts/implicit-sight-64561750\">practicing at sight reading on piano</a> <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Double bass performance, orchestral, first year. I switched because it was far easier for me to spend six hours in front of a computer than in a practice room. Caveat raptor. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Even multiplying estimates by two is considered a pretty-okay practice, but is often insufficient for a good, let alone reasonable, answer. <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Which I have done very little practice at and, accordingly, am not very good at. <a href=\"#ffn4\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Whether a marketing page is a better product spec than what you receive for normal projects in your org is a matter of variance. <a href=\"#ffn5\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Caveat: this isn’t intense concert pianist/pro athlete level practice. If you do end up producing &gt;99% <em>perfect</em> estimates, please all of us know your secret! <a href=\"#ffn6\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It may prove that what I learn is how little I know about actually building game software! <a href=\"#ffn7\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>It’s perhaps not <em>that</em> bad. Perhaps it’s more like the difference between shooting free throws and scoring field goals in a basketball game. I have no hope at the latter if I can’t perform the former at a high level. <a href=\"#ffn8\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Sorry ‘bout that! <a href=\"#ffn9\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-08-23T08:19:00-07:00",
				"url": "https://therealadam.com/2023/08/23/i-got-better.html",
				"tags": ["Leading","leadership:projects"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/13/i-dropped-in.html",
				
				"content_html": "<p>I dropped in on historic races (the newest cars were 30 years old) at Laguna Seca. It’s great to see the track at scale, not as video-game or television camera angle. I watched practice sessions from the grand stand, heard the and watched the cars rip by at competitive speeds.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am.png\" alt=\"A very green Porsche 911 race car and a 70s era Porsche prototype racecar\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am-1.png\" alt=\"A BMW Alpina CSL race car in a very striking orange and green Jäegermeister livery\"></p>\n<p>I walked the paddock and infield. So many good cars to see. Felt the energy of mechanics getting cars, sometimes older than me, ready to go fast on track. I smelled a lot of gasoline and oil.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am-2.png\" alt=\"One of the Ferrari F1 cars Niki Lauda raced and a Ford GT40 in a dark blue and orange non-traditional Gulf livery\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-8-13-23-8-41-am.png\" alt=\"A slant-nose 911 race car and a striking Spyder LeMans race car in Porsche-Martini livery\"></p>\n<p>It was a good day.</p>\n",
				"content_text": "I dropped in on historic races (the newest cars were 30 years old) at Laguna Seca. It’s great to see the track at scale, not as video-game or television camera angle. I watched practice sessions from the grand stand, heard the and watched the cars rip by at competitive speeds.\n\n![A very green Porsche 911 race car and a 70s era Porsche prototype racecar](https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am.png)\n\n![A BMW Alpina CSL race car in a very striking orange and green Jäegermeister livery](https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am-1.png)\n\nI walked the paddock and infield. So many good cars to see. Felt the energy of mechanics getting cars, sometimes older than me, ready to go fast on track. I smelled a lot of gasoline and oil.\n\n![One of the Ferrari F1 cars Niki Lauda raced and a Ford GT40 in a dark blue and orange non-traditional Gulf livery](https://short.therealadam.com/uploads/2023/image-8-13-23-8-35-am-2.png)\n\n![A slant-nose 911 race car and a striking Spyder LeMans race car in Porsche-Martini livery](https://short.therealadam.com/uploads/2023/image-8-13-23-8-41-am.png)\n\nIt was a good day.\n",
				"date_published": "2023-08-13T08:45:21-07:00",
				"url": "https://therealadam.com/2023/08/13/i-dropped-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/11/this-is-where.html",
				
				"content_html": "<p>This is where we live, for a few days. I’m hoping “little adventures” like this are a nice compliment to <a href=\"https://short.therealadam.com/2023/08/04/a-vacation-is.html\">vacations</a>. Perhaps the former creates new mental connections and the latter are about disconnecting to consider and build upon existing connections.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/d02c705a0f.jpeg\" alt=\"An older RV parked in Northern California.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/8fe88e100c.jpeg\" alt=\"A row of RVs at a dog agility event.\"></p>\n",
				"content_text": "This is where we live, for a few days. I’m hoping “little adventures” like this are a nice compliment to [vacations](https://short.therealadam.com/2023/08/04/a-vacation-is.html). Perhaps the former creates new mental connections and the latter are about disconnecting to consider and build upon existing connections.\n\n![An older RV parked in Northern California.](https://short.therealadam.com/uploads/2023/d02c705a0f.jpeg)\n\n![A row of RVs at a dog agility event.](https://short.therealadam.com/uploads/2023/8fe88e100c.jpeg)\n",
				"date_published": "2023-08-11T07:11:18-07:00",
				"url": "https://therealadam.com/2023/08/11/this-is-where.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/05/now-a-truth.html",
				
				"content_html": "<blockquote>\n<p>“Now a truth,” said the judge. “The main business of humanity is to do a good job of being human beings,” said Paul, “not to serve as appendages to machines, institutions, and systems.”</p>\n<p>– Kurt Vonnegut, <em>Player Piano</em></p>\n</blockquote>\n<p>We’re here to do human things: create for each other, love our friends and family, support our communities, experience and protect our world.</p>\n<p>A life serving only algorithms wrought by corporations<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>, engaged with organizations that care more about themselves than their people, or partaking in eco-cultural regimes that disregard our humanity are not worth pursuing.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>IOW, don’t throw your whole existence into being a content creator, folks.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "> “Now a truth,” said the judge. “The main business of humanity is to do a good job of being human beings,” said Paul, “not to serve as appendages to machines, institutions, and systems.”\n> \n> – Kurt Vonnegut, *Player Piano*\n\nWe’re here to do human things: create for each other, love our friends and family, support our communities, experience and protect our world.\n\nA life serving only algorithms wrought by corporations[^1], engaged with organizations that care more about themselves than their people, or partaking in eco-cultural regimes that disregard our humanity are not worth pursuing.\n\n\n[^1]:\tIOW, don’t throw your whole existence into being a content creator, folks.\n",
				"date_published": "2023-08-05T14:03:11-07:00",
				"url": "https://therealadam.com/2023/08/05/now-a-truth.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/04/a-vacation-is.html",
				"title": "A vacation is a tool for disconnecting",
				"content_html": "<p>I’m reflecting<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup> on travelogue’ing my <a href=\"https://short.therealadam.com/2023/07/30/rule-is-you.html\">recent</a> <a href=\"https://short.therealadam.com/2023/07/31/rule-is-you.html\">trip</a> <a href=\"https://short.therealadam.com/2023/08/01/wherein-favorite-franchises.html\">to</a> <a href=\"https://short.therealadam.com/2023/08/02/many-parts-of.html\">Disneyland</a>. In particular, that it was effective at taking my mind off work while maintaining creative writing and publishing habits.</p>\n<p>Lately, I find myself dwelling on work too much or noodling through various puzzles I’m trying to solve. I would rather not bring that with me on vacation. What I removed and what I replaced those thoughts with went pretty well! For my own memory, and perhaps dear reader’s benefit:</p>\n<p><strong>Allow plenty of moments to just exist</strong>. Listen, enjoy where you are. Engage with the folks you’re vacationing with, presuming they’re not in a phone-bubble. Try to put the phone away after you mindlessly open it out of boredom. Cultivate the moments of boredom, if you can.</p>\n<p><strong>Don’t look at feeds</strong> like Slack, Discord, socials, etc. I took the extra step of removing Slack from my phone entirely. It’s easier to remove it entirely and re-add each Slack later than to try to ignore particular instances whenever I find myself mindlessly opening the app. Read a lot, ideally longer form things chosen beforehand. Again: ignore the feeds of people hustling or trying to get their ideas into my attention. Think your own thoughts!</p>\n<p><strong>Replace all those feeds and work-think with written and photographic journaling.</strong> Look for photography opportunities, even if you’re not particularly good at it (yet). Write in a journal, daily, even if you’re not good at it (yet). Write about what you’ve photographed, about whatever you’re thinking while disconnected, about that conversation you just had or the novel thing you just saw/did.</p>\n<p><strong>If you want to share via social networks, do it once a day.</strong> I posted (via micro.blog and <a href=\"https://ulysses.app\">Ulysses</a>) a short reflection on each day. For texture, I included a quad of photos, and wrote a few sentences to reflect on my photography or day so far. Once the post is made, put the computer away and get back to reveling in disconnection.</p>\n<p>YMMV, but I hope you try it!</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>With apologies to Craig Mod for standing on the shoulders of <a href=\"https://craigmod.com/ridgeline/116/\">A Walk is a Platform for Creative Work</a>.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "I’m reflecting[^1] on travelogue’ing my [recent](https://short.therealadam.com/2023/07/30/rule-is-you.html) [trip](https://short.therealadam.com/2023/07/31/rule-is-you.html) [to](https://short.therealadam.com/2023/08/01/wherein-favorite-franchises.html) [Disneyland](https://short.therealadam.com/2023/08/02/many-parts-of.html). In particular, that it was effective at taking my mind off work while maintaining creative writing and publishing habits.\n\nLately, I find myself dwelling on work too much or noodling through various puzzles I’m trying to solve. I would rather not bring that with me on vacation. What I removed and what I replaced those thoughts with went pretty well! For my own memory, and perhaps dear reader’s benefit:\n\n**Allow plenty of moments to just exist**. Listen, enjoy where you are. Engage with the folks you’re vacationing with, presuming they’re not in a phone-bubble. Try to put the phone away after you mindlessly open it out of boredom. Cultivate the moments of boredom, if you can.\n\n**Don’t look at feeds** like Slack, Discord, socials, etc. I took the extra step of removing Slack from my phone entirely. It’s easier to remove it entirely and re-add each Slack later than to try to ignore particular instances whenever I find myself mindlessly opening the app. Read a lot, ideally longer form things chosen beforehand. Again: ignore the feeds of people hustling or trying to get their ideas into my attention. Think your own thoughts!\n\n**Replace all those feeds and work-think with written and photographic journaling.** Look for photography opportunities, even if you’re not particularly good at it (yet). Write in a journal, daily, even if you’re not good at it (yet). Write about what you’ve photographed, about whatever you’re thinking while disconnected, about that conversation you just had or the novel thing you just saw/did.\n\n**If you want to share via social networks, do it once a day.** I posted (via micro.blog and [Ulysses](https://ulysses.app)) a short reflection on each day. For texture, I included a quad of photos, and wrote a few sentences to reflect on my photography or day so far. Once the post is made, put the computer away and get back to reveling in disconnection.\n\nYMMV, but I hope you try it!\n\n[^1]:\tWith apologies to Craig Mod for standing on the shoulders of [A Walk is a Platform for Creative Work](https://craigmod.com/ridgeline/116/).\n",
				"date_published": "2023-08-04T09:54:43-07:00",
				"url": "https://therealadam.com/2023/08/04/a-vacation-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/03/a-pretty-ideal.html",
				
				"content_html": "<p>A pretty ideal travel day: start at the pool, wait in the breeze and shade, depart from the open tarmacs of tiny Long Beach Airport.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/15ec6988-ae71-4a7d-ae05-e76d43a44d3b.jpeg\" alt=\"Chillin by the hot tub\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/3e829f2206.jpeg\" alt=\"Luggage and comfy couches in the Disneyland Hotel breezeway \"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/14dbad8e42.jpeg\" alt=\"Looking up a Southwest Boeing 737 from the gate at LGB\"></p>\n<p>Not pictured: returning to the searing heat of central Texas. 😬🙃🫠</p>\n",
				"content_text": "A pretty ideal travel day: start at the pool, wait in the breeze and shade, depart from the open tarmacs of tiny Long Beach Airport.\n\n![Chillin by the hot tub](https://short.therealadam.com/uploads/2023/15ec6988-ae71-4a7d-ae05-e76d43a44d3b.jpeg)\n\n![Luggage and comfy couches in the Disneyland Hotel breezeway ](https://short.therealadam.com/uploads/2023/3e829f2206.jpeg)\n\n![Looking up a Southwest Boeing 737 from the gate at LGB](https://short.therealadam.com/uploads/2023/14dbad8e42.jpeg)\n\nNot pictured: returning to the searing heat of central Texas. 😬🙃🫠\n",
				"date_published": "2023-08-03T17:50:35-07:00",
				"url": "https://therealadam.com/2023/08/03/a-pretty-ideal.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/02/many-parts-of.html",
				
				"content_html": "<p>Many parts of Disneyland are ridiculously easy to photograph.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/draggedimage.jpeg\" alt=\"Pixar Pier in the golden hour. The Incredicoaster and Fun Wheel reflect on the pool in the foreground.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/draggedimage-1.jpeg\" alt=\"Radiator Springs at night. The Cozy Cone Motel and Flo’s V8 cafe neon glow against the night sky.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/draggedimage-2.jpeg\" alt=\"Radiator Springs lit up at night. Luigi’s Rollickin’ Roadsters on the left.\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/draggedimage-3.jpeg\" alt=\"Fantasyland overlooking Storybook and the Matterhorn in the early morning.\"></p>\n<p>Particularly at dusk and night, and for folks (like me) with very rudimentary photography skills. I’m pretty convinced this is one of the myriad details the Imagineers wrangle as they design these parks.</p>\n",
				"content_text": "Many parts of Disneyland are ridiculously easy to photograph.\n\n![Pixar Pier in the golden hour. The Incredicoaster and Fun Wheel reflect on the pool in the foreground.](https://short.therealadam.com/uploads/2023/draggedimage.jpeg)\n\n![Radiator Springs at night. The Cozy Cone Motel and Flo’s V8 cafe neon glow against the night sky.](https://short.therealadam.com/uploads/2023/draggedimage-1.jpeg)\n\n![Radiator Springs lit up at night. Luigi’s Rollickin’ Roadsters on the left.](https://short.therealadam.com/uploads/2023/draggedimage-2.jpeg)\n\n![Fantasyland overlooking Storybook and the Matterhorn in the early morning.](https://short.therealadam.com/uploads/2023/draggedimage-3.jpeg)\n\nParticularly at dusk and night, and for folks (like me) with very rudimentary photography skills. I’m pretty convinced this is one of the myriad details the Imagineers wrangle as they design these parks.\n",
				"date_published": "2023-08-02T17:31:58-07:00",
				"url": "https://therealadam.com/2023/08/02/many-parts-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/08/01/wherein-favorite-franchises.html",
				
				"content_html": "<p>Wherein favorite franchises are done</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/55ef768e-78b1-4b87-a686-0770494ba10f.jpeg\" alt=\"A topiary of a Formula One car\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/1aa4f1c5-a1c5-4992-8294-71d5c3985f38.jpeg\" alt=\"Pre-ride with Rey and BB-8\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/154dfb00-7267-4b3a-882a-0ffe322a2a75.jpeg\" alt=\"A relatively quiet moment at Oga’s cantina\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/d870bea0-e5a0-4472-a6d3-895dc48ad88e.jpeg\" alt=\"Movie poster for the speculative “The Chipmunk Trap” in a ride queue\"></p>\n",
				"content_text": "Wherein favorite franchises are done\n\n![A topiary of a Formula One car](https://short.therealadam.com/uploads/2023/55ef768e-78b1-4b87-a686-0770494ba10f.jpeg)\n\n![Pre-ride with Rey and BB-8](https://short.therealadam.com/uploads/2023/1aa4f1c5-a1c5-4992-8294-71d5c3985f38.jpeg)\n\n![A relatively quiet moment at Oga’s cantina](https://short.therealadam.com/uploads/2023/154dfb00-7267-4b3a-882a-0ffe322a2a75.jpeg)\n\n![Movie poster for the speculative “The Chipmunk Trap” in a ride queue](https://short.therealadam.com/uploads/2023/d870bea0-e5a0-4472-a6d3-895dc48ad88e.jpeg)\n",
				"date_published": "2023-08-01T14:56:51-07:00",
				"url": "https://therealadam.com/2023/08/01/wherein-favorite-franchises.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/31/rule-is-you.html",
				
				"content_html": "<p>Rule #1 is you a) get up early, b) ride stuff early and c) take a break in the middle of the day while (many) folks are at the parks.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-7-31-23-6-15-pm.png\" alt=\"Screenshot of iPhone lock screen clock at 6:42am\"></p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/image-7-31-23-6-15-pm-1.png\" alt=\"The Disneyland Hotel resort, including Trader Sam’s, very early in the morning.\"></p>\n<p>Roz is the unsung hero of the Monsters, Inc. franchise. Impeccable delivery, no notes.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/cded7b6d-2db0-4d6a-8236-edd79797b73c.jpeg\" alt=\"Roz from Monsters Inc., at the end of the Disney California Adventure ride for the same franchise.\"></p>\n<p>One of our favorites is the Animation Academy. It’s a short entertainment, wherein a cast member teaches you to draw a Disney/Pixar character in ten minutes or so. I’m not at all good at sketching, so I think it speaks volumes to the quality of the cast members that you can, maybe, tell that I’m drawing Mickey Mouse here.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2023/1ffa7dcf-be91-4e42-9487-f4d6df734f31.jpeg\" alt=\"A pencil sketch of Mickey Mouse\"></p>\n",
				"content_text": "Rule #1 is you a) get up early, b) ride stuff early and c) take a break in the middle of the day while (many) folks are at the parks.\n\n![Screenshot of iPhone lock screen clock at 6:42am](https://short.therealadam.com/uploads/2023/image-7-31-23-6-15-pm.png)\n\n![The Disneyland Hotel resort, including Trader Sam’s, very early in the morning.](https://short.therealadam.com/uploads/2023/image-7-31-23-6-15-pm-1.png)\n\nRoz is the unsung hero of the Monsters, Inc. franchise. Impeccable delivery, no notes.\n\n![Roz from Monsters Inc., at the end of the Disney California Adventure ride for the same franchise.](https://short.therealadam.com/uploads/2023/cded7b6d-2db0-4d6a-8236-edd79797b73c.jpeg)\n\nOne of our favorites is the Animation Academy. It’s a short entertainment, wherein a cast member teaches you to draw a Disney/Pixar character in ten minutes or so. I’m not at all good at sketching, so I think it speaks volumes to the quality of the cast members that you can, maybe, tell that I’m drawing Mickey Mouse here.\n\n![A pencil sketch of Mickey Mouse](https://short.therealadam.com/uploads/2023/1ffa7dcf-be91-4e42-9487-f4d6df734f31.jpeg)\n",
				"date_published": "2023-07-31T19:17:53-07:00",
				"url": "https://therealadam.com/2023/07/31/rule-is-you.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/30/rule-is-you.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<img src=\"uploads/2024/37a1d0c0ef.jpg\" width=\"450\" height=\"600\" alt=\"\">\n1. Rule #2 is you gotta take a picture of this signage, every time.\n\n<img src=\"uploads/2024/b483601429.jpg\" width=\"600\" height=\"450\" alt=\"\">\n2. Matterhorn looks better from almost every angle than it feels to ride it (if you’re over forty). \n\n<img src=\"uploads/2024/1e9822d99a.jpg\" width=\"600\" height=\"450\" alt=\"\">\n3. It’s a lovely day for retro future and wishing they’d put a people mover in at Disneyland. \n\n<img src=\"uploads/2024/4e0c58637b.jpg\" width=\"600\" height=\"450\" alt=\"\">\n4. Spoiler alert.\n",
				"date_published": "2023-07-30T14:14:10-07:00",
				"url": "https://therealadam.com/2023/07/30/rule-is-you.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/22/rauno-freiburg-is.html",
				"title": "Rauno Freiburg is building attention to design details",
				"content_html": "<blockquote>\n<p>Sitting down and just thinking hard does not magically produce valuable discoveries either. The essence of the word &ldquo;interaction&rdquo; implies a relationship between a human and an environment. In my experience, great revelations surface from making something — filling your headspace with a problem — and then going for a synthesising daydreaming walk to stir the pot.</p>\n<p>– <a href=\"https://rauno.me/craft/interaction-design\">Invisible Details of Interaction Design</a></p>\n</blockquote>\n<p>👍🏻 This is the excellence in interactions and attention to detail. Moreover, a restatement of the <a href=\"https://www.youtube.com/watch?v=f84n5oFoZBc\">Hickey</a>/<a href=\"https://www.fabriziomusacchio.com/blog/2022-10-08-feynman_algorithm/\">Feynman</a> methods for problem-solving. (Is there a restatement of said methods that <em>doesn’t</em> sound lovely?)</p>\n",
				"content_text": "> Sitting down and just thinking hard does not magically produce valuable discoveries either. The essence of the word \"interaction\" implies a relationship between a human and an environment. In my experience, great revelations surface from making something — filling your headspace with a problem — and then going for a synthesising daydreaming walk to stir the pot.\n> \n> – [Invisible Details of Interaction Design](https://rauno.me/craft/interaction-design)\n\n 👍🏻 This is the excellence in interactions and attention to detail. Moreover, a restatement of the [Hickey](https://www.youtube.com/watch?v=f84n5oFoZBc)/[Feynman](https://www.fabriziomusacchio.com/blog/2022-10-08-feynman_algorithm/) methods for problem-solving. (Is there a restatement of said methods that *doesn’t* sound lovely?)\n",
				"date_published": "2023-07-22T12:37:39-07:00",
				"url": "https://therealadam.com/2023/07/22/rauno-freiburg-is.html",
				"tags": ["people","rauno-freiberg"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/22/work-sidebyside-the.html",
				"title": "Work side-by-side; the more you can see, the more you can think",
				"content_html": "<p>Wisen Tanasa, <a href=\"https://read.ceilfors.com/p/stop-flipping-around-put-them-side\">Stop flipping around, put them side-by-side</a>:</p>\n<blockquote>\n<p>This constant flipping is a self-inflicted cognitive load that reduces our productivity. Pay attention to what’s happening in your mind when you flip things around. What was the CSS property I was trying to modify? Flip… flip… What was that JSON structure look like again? Flip… flip… Is it similar to Figma now? Flip… flip… When you catch yourself doing this, stop. Put them side-by-side.</p>\n<p><img src=\"https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F175f3fba-5339-46b4-8136-d1c27e90d7bc_2000x1213.png\" alt=\"Full-height windows showing Stripe documentation and VScode writing Stripe implementation code\"></p>\n<p>Many of the tasks we have as software engineer is crunching information from one medium to another. What I’d like you to try instead is to pause and make all the information you need to execute your task visible on your screen.</p>\n</blockquote>\n<p>Using splits in my editor (vim, then <a href=\"https://www.jetbrains.com/ruby/\">RubyMine</a>), notes app (<a href=\"https://obsidian.md\">Obsidian</a>), and even window manager (<a href=\"https://rectangleapp.com/pro\">Rectangle Pro</a>) are crucial to how I work. Single window, uni-tasking, “focus modes” were coolr in their day. But, most work lends itself to some manner of multi-window, conceptual layout. As Wisen points out, that could be test and production code, designs and code, code and browser/simulator, designs and documentation, or a document and video chat.</p>\n<p>I wish I could get even <em>more</em> conceptual layout. I usually do fine with 2-3 vertical splits (i.e. three full-height windows) when I’m coding. But, I look with envy upon designers in Figma/Sketch/etc. when they consider several iterations upon one screen or lay designs out on their canvas to match the spatial/workflow relationships in the actual product. Concepts like <a href=\"https://natto.dev\">Natto</a>, <a href=\"https://en.wikipedia.org/wiki/Pure_Data\">PureData</a>, and <a href=\"https://obsidian.md/canvas\">Obsidian’s canvas</a> leave me optimistic that in the future I’ll find myself organizing modules and functions however I want, regardless of linear text in source code files on disk.</p>\n",
				"content_text": "Wisen Tanasa, [Stop flipping around, put them side-by-side](https://read.ceilfors.com/p/stop-flipping-around-put-them-side):\n\n> This constant flipping is a self-inflicted cognitive load that reduces our productivity. Pay attention to what’s happening in your mind when you flip things around. What was the CSS property I was trying to modify? Flip… flip… What was that JSON structure look like again? Flip… flip… Is it similar to Figma now? Flip… flip… When you catch yourself doing this, stop. Put them side-by-side.\n> \n> ![Full-height windows showing Stripe documentation and VScode writing Stripe implementation code](https://substackcdn.com/image/fetch/f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F175f3fba-5339-46b4-8136-d1c27e90d7bc_2000x1213.png)\n> \n> Many of the tasks we have as software engineer is crunching information from one medium to another. What I’d like you to try instead is to pause and make all the information you need to execute your task visible on your screen.\n\nUsing splits in my editor (vim, then [RubyMine](https://www.jetbrains.com/ruby/)), notes app ([Obsidian](https://obsidian.md)), and even window manager ([Rectangle Pro](https://rectangleapp.com/pro)) are crucial to how I work. Single window, uni-tasking, “focus modes” were coolr in their day. But, most work lends itself to some manner of multi-window, conceptual layout. As Wisen points out, that could be test and production code, designs and code, code and browser/simulator, designs and documentation, or a document and video chat.\n\nI wish I could get even _more_ conceptual layout. I usually do fine with 2-3 vertical splits (i.e. three full-height windows) when I’m coding. But, I look with envy upon designers in Figma/Sketch/etc. when they consider several iterations upon one screen or lay designs out on their canvas to match the spatial/workflow relationships in the actual product. Concepts like [Natto](https://natto.dev), [PureData](https://en.wikipedia.org/wiki/Pure_Data), and [Obsidian’s canvas](https://obsidian.md/canvas) leave me optimistic that in the future I’ll find myself organizing modules and functions however I want, regardless of linear text in source code files on disk.\n",
				"date_published": "2023-07-22T08:51:58-07:00",
				"url": "https://therealadam.com/2023/07/22/work-sidebyside-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/20/magic-ai-is.html",
				"title": "Magic (AI) is what we don’t (yet) understand",
				"content_html": "<blockquote>\n<p>It reflects a sound understanding of the nature of AI — as an uncredited and formless <em>modifier</em> of other technologies. One whose presence is marked by familiar behaviors having slightly magical effects.</p>\n<p>– Venkatesh Rao, <a href=\"https://studio.ribbonfarm.com/p/magic-mundanity-and-deep-protocolization\">Magic, Mundanity and Deep Protocolization</a></p>\n</blockquote>\n<p>The whole magic &amp; AI thing. The most 2023 of vibes!</p>\n<p>Yet, it remains to be seen to what extent AI will yield entirely new media, modalities, and consumption levels or if it will merely modify technology we’re already familiar with.</p>\n<p>Is generative AI the iPhone (entirely new media/modality/consumption), the iPhone camera (displaces <em>and exceeds</em> existing categories), or the ability to scan QR codes with your camera to reduce transactional friction (a game changer for some that quickly fades into the background)?</p>\n",
				"content_text": "> It reflects a sound understanding of the nature of AI — as an uncredited and formless *modifier* of other technologies. One whose presence is marked by familiar behaviors having slightly magical effects.\n> \n> – Venkatesh Rao, [Magic, Mundanity and Deep Protocolization](https://studio.ribbonfarm.com/p/magic-mundanity-and-deep-protocolization)\n\nThe whole magic & AI thing. The most 2023 of vibes!\n\nYet, it remains to be seen to what extent AI will yield entirely new media, modalities, and consumption levels or if it will merely modify technology we’re already familiar with. \n\nIs generative AI the iPhone (entirely new media/modality/consumption), the iPhone camera (displaces _and exceeds_ existing categories), or the ability to scan QR codes with your camera to reduce transactional friction (a game changer for some that quickly fades into the background)?\n",
				"date_published": "2023-07-20T07:25:41-07:00",
				"url": "https://therealadam.com/2023/07/20/magic-ai-is.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/15/evenings-at-the.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://music.apple.com/us/album/evenings-at-the-village-gate-john-coltrane-with/1687727133\">Evenings at the Village Gate: John Coltrane (with Eric Dolphy)</a>. Five tracks, all excellent. Great bass playing by Reggie Workman and Art Davis. Favorite tracks: &#8220;Greensleeves&#8221;, &#8220;Africa&#8221;.</p>\n",
				"date_published": "2023-07-15T15:54:29-07:00",
				"url": "https://therealadam.com/2023/07/15/evenings-at-the.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/15/less-but-better.html",
				"title": "Less but better",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.hodinkee.com/articles/designers-designers-watch-braun-classics\">The Designer&#8217;s Designer&#8217;s Watch – A Look Back At Braun And The Rebirth Of A Few Classics</a></p>\n\n<blockquote>\n<p>The Braun watches AW 10 and AW 50 embody simplicity. Just as do the clocks and electrical appliances made by Braun, they truly follow the &#8220;less is more&#8221; dogma that (arguably) stems from the Bauhaus school. Or, as Braun likes to put it: Less but better. Design has been at the core of the brand for seven decades, and its watches and clocks were designed by a team headed by two men: Dieter Rams and Dietrich Lubs.</p>\n</blockquote>\n\n<p>✋🏻 &#8220;Less is more&#8221;: easy to say, hard to apply. </p>\n\n<p>👍🏻 &#8220;Less but better&#8221;: easy to say, easy to tell when you&#8217;ve done the first part but missed on the second.</p>\n",
				"date_published": "2023-07-15T12:40:58-07:00",
				"url": "https://therealadam.com/2023/07/15/less-but-better.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/15/this-is-nice.html",
				
				"content_html": "<p>This is nice. Once Over’s back patio annex is excellent.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "This is nice. Once Over’s back patio annex is excellent. \n\n<img src=\"uploads/2024/7754c0e829.jpg\" width=\"600\" height=\"450\" alt=\"\">\n",
				"date_published": "2023-07-15T08:18:42-07:00",
				"url": "https://therealadam.com/2023/07/15/this-is-nice.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/08/when-finished-isnt.html",
				"title": "When finished isn’t done",
				"content_html": "<p>The work is done, the post is published, the code has shipped, the boxes are all checked.</p>\n<p>And yet, it remains in my head. The bit of code I’d like to revisit, an edge I couldn’t round off, a paragraph that doesn’t fit like I want it to, a workflow we didn’t improve upon, a conversation about trade-offs that went sideways…</p>\n<p>The work is more than the work, more than an end. It’s emotions and memories. A new way of thinking, experience and wisdom newly integrated with what I’ve done before. The start of something new, with this finished work as the prologue that sets the stage for the next story.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Often, things are only getting started when I check that box.</p>\n<p>We call it perfectionism when we hold the work back to make one last tweak, another small improvement. Perfectionism is pouring myself into one checkbox for weeks or months at the expense of all the other things I want to do. It’s not so much seeking perfect, but an inability to let go and get started in earnest.</p>\n<p>To the contrary, every day I’m more convinced that perfect emerges from checking that first box. Putting the work out there, starting the next checkbox (of several dozen), accumulating and shaping something more perfect.</p>\n<!-- raw HTML omitted -->\n<p>Everything finished is the start of something else.</p>\n",
				"content_text": "The work is done, the post is published, the code has shipped, the boxes are all checked.\n\nAnd yet, it remains in my head. The bit of code I’d like to revisit, an edge I couldn’t round off, a paragraph that doesn’t fit like I want it to, a workflow we didn’t improve upon, a conversation about trade-offs that went sideways…\n\nThe work is more than the work, more than an end. It’s emotions and memories. A new way of thinking, experience and wisdom newly integrated with what I’ve done before. The start of something new, with this finished work as the prologue that sets the stage for the next story.\n\n<hr />\n\n<blockquote>\nPrevious tasks continue to consume attention even after switching. This is especially true for anything that causes strong emotions. I find it hard to concentrate if I&#8217;m opening (Slack) every 15 minutes and every time seeing that thread where someone is arguing with me and they&#8217;re totally wrong and how can they even believe what they&#8217;re saying and what was I doing again?\n— Jamie Brandon, <a href=\"https://www.scattered-thoughts.net/writing/moving-faster/\">Moving Faster</a>\n</blockquote>\n\n<ol>\n<li>Acknowledging and managing emotions is a productivity/go-fast hack</li>\n<li>Really, don’t dwell on people being wrong. You can’t control it. Just keep going.</li>\n<li>Absent people and emotions, completing a task doesn’t mean it’s out of our heads. Account for that in planning the day or projects.</li>\n</ol>\n\n<hr />\n\nOften, things are only getting started when I check that box.\n\nWe call it perfectionism when we hold the work back to make one last tweak, another small improvement. Perfectionism is pouring myself into one checkbox for weeks or months at the expense of all the other things I want to do. It’s not so much seeking perfect, but an inability to let go and get started in earnest.\n\nTo the contrary, every day I’m more convinced that perfect emerges from checking that first box. Putting the work out there, starting the next checkbox (of several dozen), accumulating and shaping something more perfect.\n\n<hr />\n\nEverything finished is the start of something else.\n",
				"date_published": "2023-07-08T12:01:54-07:00",
				"url": "https://therealadam.com/2023/07/08/when-finished-isnt.html",
				"tags": ["writing","The Work"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/08/charles-chamberlain.html",
				"title": "Charles Chamberlain",
				"content_html": "<p>An &ldquo;independent researcher &amp; developer focused on making new interfaces to create with&rdquo;. He&rsquo;s developing some neat <!-- raw HTML omitted -->low road<!-- raw HTML omitted --> (in the <!-- raw HTML omitted -->How Buildings Learn<!-- raw HTML omitted --> sense) ideas at the intersection of dynamic languages and web media.</p>\n<p><!-- raw HTML omitted -->red pear and walnut<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->apricot: a structure editor for ui<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Birch<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Watch the demos!</p>\n",
				"content_text": "An \"independent researcher & developer focused on making new interfaces to create with\". He's developing some neat <a href=\"https://www.youtube.com/watch?v=09pekAKuXjc\">low road</a> (in the <em>How Buildings Learn</em> sense) ideas at the intersection of dynamic languages and web media.\n\n<a href=\"https://inclouds.space/blog/redpear/\">red pear and walnut</a>:\n<blockquote>\n<p>I made a new cloud programming environment called red pear! (redpear.dev) Its goal is to help you build small web apps very quickly. In particular, it helps you build 2012-era, backend-first web apps with the use of ruby and sinatra.\n</p>\n<p>Much like birch, red pear has instant deploys: the code you write is hosted on a dev instance immediately and on a prod instance with the push of a button.\n</p>\n<p>I made a new interface to persistent data for use in red pear: walnut. Its goal is to be easier than something like sql or graphql, especially in the context of smaller apps.\n</p></blockquote>\n\n<a href=\"https://inclouds.space/blog/apricot/\">apricot: a structure editor for ui</a>:\n<blockquote>\n<p>It's a structure editor that makes it surprisingly easy to \"type\" out a user interface.\n</p>\n<p>I originally thought of Apricot as a prototyping tool — a place to quickly get some dynamic behaviour wired up to a UI, without worrying too much about pixel-perfect fidelity. Weirdly, a lot of prototyping tools nowadays go the other way — focusing on pictoral representation while mostly leaving out semantic behaviour.\n</p>\n</blockquote>\n\n<a href=\"https://birch.ink\">Birch</a>:\n\n<blockquote>\nA cozy development environment making prototyping and scripting as easy as possible. \n</blockquote>\n\nWatch the demos!\n",
				"date_published": "2023-07-08T10:24:55-07:00",
				"url": "https://therealadam.com/2023/07/08/charles-chamberlain.html",
				"tags": ["people"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/08/think-through-making.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote>\n<p>Think through making.\n– Matt Webb (by way of Matt Ward) <a href=\"https://interconnected.org/home/2023/05/19/protocols\">Protocol Fiction, Desire, and Belief</a></p>\n</blockquote>\n\n<p>Ideas in your head are shallow next to ideas worked out with craft, material, and context.</p>\n",
				"date_published": "2023-07-08T09:59:42-07:00",
				"url": "https://therealadam.com/2023/07/08/think-through-making.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/07/the-bear.html",
				"title": "The Bear",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I watched seasons 1 and 2 over the course of a few weeks. Fantastic show, no notes. </p>\n\n<p>I can&#8217;t start to describe it. It&#8217;s not crime-y, not a comedy. It&#8217;s not exactly feel good, but it possibly takes the spot in my brain formerly held by <em>Ted Lasso</em>. </p>\n\n<p>There&#8217;s often a <em>lot</em> of yelling. But it made me start using &#8220;heard&#8221; as a single-word sentence conveying &#8220;I have heard what you said, don&#8217;t disagree, but haven&#8217;t entirely processed it.&#8221;</p>\n\n<p>It&#8217;s about cooking, craft, and running a restaurant. Maybe it&#8217;s <em>Ratatouille</em>&#8217;s darker cousin?</p>\n\n<p>Recommended.</p>\n",
				"date_published": "2023-07-07T05:53:21-07:00",
				"url": "https://therealadam.com/2023/07/07/the-bear.html",
				"tags": ["Watching"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/04/shortcuts-for-scripting.html",
				"title": "Shortcuts for scripting API integration",
				"content_html": "<p>If you want to do straight-forward API scripting, Shortcuts + <a href=\"https://apps.apple.com/us/app/actions/id1586435171\">Actions</a> might do the trick.</p>\n<!-- raw HTML omitted -->\n<p>Patterns in play:</p>\n<ul>\n<li>Fetch URL (Shortcuts built-in)</li>\n<li>Parse document as feed/JSON/XML\n<ul>\n<li>(not sure if this is built into Shortcuts or you need <!-- raw HTML omitted -->Actions<!-- raw HTML omitted --> to cover all three)</li>\n</ul>\n</li>\n<li>Pull out &ldquo;the stuff&rdquo; element/attribute (e.g. <code>items</code>, <code>articles</code>, <code>results</code>, etc.) (Shortcuts built-in)</li>\n<li>Do something on each item.\n<ul>\n<li>YMMV depending on support in whatever app you&rsquo;re integrating with.</li>\n</ul>\n</li>\n</ul>\n<p>See also: <!-- raw HTML omitted -->How I Sync Readwise Highlights to Bear<!-- raw HTML omitted -->.</p>\n",
				"content_text": "If you want to do straight-forward API scripting, Shortcuts + [Actions](https://apps.apple.com/us/app/actions/id1586435171) might do the trick.\n\n<img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://til.therealadam.com/uploads/2023/fetchjsonfeedshortcut.png\" alt=\"Shortcuts workflow to fetch and parse a JSON feed\" title=\"FetchJsonFeedShortcut.png\" border=\"0\" width=\"299\" height=\"225\" />\n\nPatterns in play:\n\n- Fetch URL (Shortcuts built-in)\n- Parse document as feed/JSON/XML \n\t- (not sure if this is built into Shortcuts or you need <a href=\"https://github.com/sindresorhus/Actions\">Actions</a> to cover all three)\n- Pull out \"the stuff\" element/attribute (e.g. `items`, `articles`, `results`, etc.) (Shortcuts built-in)\n- Do something on each item. \n    - YMMV depending on support in whatever app you're integrating with.\n\nSee also: <a href=\"https://benbailey.me/2023/06/03/how-i-sync.html\">How I Sync Readwise Highlights to Bear</a>.\n",
				"date_published": "2023-07-04T11:45:38-07:00",
				"url": "https://therealadam.com/2023/07/04/shortcuts-for-scripting.html",
				"tags": ["shortcuts"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/04/use-swift-playgrounds.html",
				"title": "Use Swift Playgrounds to sketch ideas",
				"content_html": "<p>Before spinning up a whole Swift project, use Swift Playgrounds to sketch out ideas.</p>\n<p>In Xcode (macOS):</p>\n<ul>\n<li><code>File -&gt; New -&gt; Playground</code></li>\n<li>Choose &ldquo;Single View&rdquo; (I&rsquo;m not sure what impact picking macOS or iOS has)</li>\n<li>Choose a name and location to save your playground</li>\n</ul>\n<p>UIKit is the iOS default for a single-view playground. Storybooks are the default for macOS. To replace those with a SwiftUI component:</p>\n<div class=\"highlight\"><pre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"><code class=\"language-swift\" data-lang=\"swift\"><span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">SwiftUI</span>\n<span style=\"color:#66d9ef\">import</span> <span style=\"color:#a6e22e\">PlaygroundSupport</span>\n\n<span style=\"color:#66d9ef\">struct</span> <span style=\"color:#a6e22e\">ContentView</span>: View {\n  <span style=\"color:#66d9ef\">var</span> body: some View {\n    VStack {\n      Button(<span style=\"color:#e6db74\">&#34;Tap me!&#34;</span>) {\n      }\n    }\n  }\n}\n\n<span style=\"color:#66d9ef\">let</span> contentView = ContentView()\nPlaygroundPage.current.setLiveView(contentView)\n</code></pre></div><p>🤔 I haven&rsquo;t yet come upon a good heuristic for:</p>\n<ul>\n<li>when to spin up a project for tinkering vs. a playground</li>\n<li>to what extent one could use TDD in playgrounds</li>\n<li>how to import files from a playground inside a project and use project resources</li>\n</ul>\n",
				"content_text": "Before spinning up a whole Swift project, use Swift Playgrounds to sketch out ideas.\n\nIn Xcode (macOS):\n\n- `File -> New -> Playground`\n- Choose \"Single View\" (I'm not sure what impact picking macOS or iOS has)\n- Choose a name and location to save your playground\n\nUIKit is the iOS default for a single-view playground. Storybooks are the default for macOS. To replace those with a SwiftUI component:\n\n```swift\nimport SwiftUI\nimport PlaygroundSupport\n\nstruct ContentView: View {\n  var body: some View {\n    VStack {\n      Button(\"Tap me!\") {\n      }\n    }\n  }\n}\n\nlet contentView = ContentView()\nPlaygroundPage.current.setLiveView(contentView)\n```\n\n🤔 I haven't yet come upon a good heuristic for:\n- when to spin up a project for tinkering vs. a playground\n- to what extent one could use TDD in playgrounds\n- how to import files from a playground inside a project and use project resources\n",
				"date_published": "2023-07-04T11:44:52-07:00",
				"url": "https://therealadam.com/2023/07/04/use-swift-playgrounds.html",
				"tags": ["swiftui"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/07/04/in-the-meantime.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<p>– Austin Kleon, <!-- raw HTML omitted -->Steal Like an Artist<!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote>\n<p>In the meantime, if you’re not into the world you live in, you can build your own world around you. (Now would be a good time to put on your headphones and cue up the Beach Boys song “In My Room.”) Surround yourself with books and objects that you love. Tape things up on the wall. Create your own world.\n\n\n– Austin Kleon, <em>Steal Like an Artist</em></p>\n</blockquote>\n\n<p>Put up the walls you want in the world. Look past the walls you dislike. (<em>Ed. </em>As a metaphor, this works for sure. Literally, in the case of oppressive regimes, not sure how to carry this idea forward.)</p>\n",
				"date_published": "2023-07-04T11:42:57-07:00",
				"url": "https://therealadam.com/2023/07/04/in-the-meantime.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/20/in-the-moment.html",
				"title": "In the moment",
				"content_html": "<p>Is pessimism about the past, present, or future? If it says, “we can’t get there from here, based on where we’ve been”, it neglects the present and maybe the future.</p>\n<p>Does optimism favor the future over the past or present? A smart optimist might use the past as a trend-line to the future, and seek to make the most of the present.</p>\n",
				"content_text": "Is pessimism about the past, present, or future? If it says, “we can’t get there from here, based on where we’ve been”, it neglects the present and maybe the future.\n\nDoes optimism favor the future over the past or present? A smart optimist might use the past as a trend-line to the future, and seek to make the most of the present.\n",
				"date_published": "2023-06-20T07:16:36-07:00",
				"url": "https://therealadam.com/2023/06/20/in-the-moment.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/18/fruitless-activities-and.html",
				"title": "Fruitless activities and hobbies are important!",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote>\n<p>Anything you do that doesn’t make you money or help others better be something for your own damned amusement.\n– <a href=\"https://twitter.com/austinkleon/status/1670067739673743360?s=12\">Austin Kleon</a></p>\n</blockquote>\n",
				"date_published": "2023-06-18T09:01:43-07:00",
				"url": "https://therealadam.com/2023/06/18/fruitless-activities-and.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/12/if-this-isnt.html",
				"title": "\"If this isn’t nice, I don’t know what is\"",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.goodreads.com/quotes/3172-and-i-urge-you-to-please-notice-when-you-are\">Kurt Vonnegut</a>:</p>\n\n<blockquote>\n<p>And I urge you to please notice when you are happy, and exclaim or murmur or think at some point, &#8216;If this isn&#8217;t nice, I don&#8217;t know what is.&#8217;</p>\n</blockquote>\n\n<p>It’s a kind of way to go about life. Find more activities, people, places that lead to this kind of thought. Find more reasons to say it in regular life. Spend more time doing all those things.</p>\n",
				"date_published": "2023-06-12T05:21:20-07:00",
				"url": "https://therealadam.com/2023/06/12/if-this-isnt.html",
				"tags": ["reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/11/monk-and-robot.html",
				"title": "Monk and Robot: very enjoyable chill-future vibes",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.goodreads.com/book/show/40864002-a-psalm-for-the-wild-built\">Monk and Robot, A Psalm for the Wild-Built</a>, Becky Chambers. An optimistic, non-space/techno sci-fi short novel. For me, it&#8217;s a welcome departure from the Very Serious Ideas of Stephenson, Asimov, Gibson, etc. No big bad, just a nice world and great interactions between a person and a robot.</p>\n\n<p>Highly recommended for a vacation/beach read.</p>\n",
				"date_published": "2023-06-11T10:08:32-07:00",
				"url": "https://therealadam.com/2023/06/11/monk-and-robot.html",
				"tags": ["reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/09/notes-on-narrative.html",
				"title": "Notes on narrative for engineering leaders",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Alex Reeve, <a href=\"https://www.reeve.blog/articles/product-management-principles\">22 Principles for Great Product Managers</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>You have to own the narrative. When there’s a narrative vacuum, people will “creatively” fill in the blanks themselves—and you might not like it. Losing control of the narrative can be incredibly disruptive to your team’s ability to deliver. </p><p>– (Alex Reeve, 22 Principles for Great Product Managers)</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Same goes for plans &amp; projects. If you don’t have a plan, someone else will. You may not like their plan.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Telling the story of a goal/project/initiative isn’t manipulation<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>, it’s setting the vision.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>All narratives compress out important details and trade-offs as an expense of clarity and noteworthiness (i.e. an un-memorable narrative is not a particularly good narrative).</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Narrative is is a fantastic skill to have as an engineering leader. The more you can convey your ideas, goals, projects, and initiatives as a narrative, the more you can get people on the same page. It’s also a <em>fun</em> skill to acquire. It’s all around us in culture. It’s one of the few things where you can improve in your profession by paying attention to how movies, television, or fiction are structured. (Highly recommended: <a href=\"https://www.youtube.com/user/everyframeapainting\">Every Frame a Painting</a>)</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">Bad-faith narrative construction exists, please don’t act in bad faith. <a href=\"#ffn1\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2023-06-09T07:34:37-07:00",
				"url": "https://therealadam.com/2023/06/09/notes-on-narrative.html",
				"tags": ["Surprisingly Effective","leadership:communicating"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/06/07/it-sounded-like.html",
				"title": "\"It sounded like the kick drum was played by a drunk 3-year old, and I was like ‘Are you allowed to do that?’”",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://pudding.cool/2023/06/groove/\">WONKY</a> – pudding.cool analyzes what makes J Dilla special. Particularly good if <a href=\"https://dillati.me/\">Dilla Time</a> (<a href=\"https://short.therealadam.com/2022/11/13/dilla-time.html\">previously</a>) is still in your to-read list.</p>\n",
				"date_published": "2023-06-07T09:09:55-07:00",
				"url": "https://therealadam.com/2023/06/07/it-sounded-like.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/05/28/albums-is-a.html",
				
				"content_html": "<p><a href=\"https://www.albumstheapp.com/?ref=bb.place\">Albums</a> is a great app and <a href=\"https://bb.place/the-best-app-for-albums/\">The Best App for Albums</a> is a great review of what makes it good for music enthusiasts and/or organizational hobbyists. I don’t want to jinx it, but Albums checks a lot of boxes for me that Rdio did, back in the day.</p>\n",
				"content_text": "[Albums](https://www.albumstheapp.com/?ref=bb.place) is a great app and [The Best App for Albums](https://bb.place/the-best-app-for-albums/) is a great review of what makes it good for music enthusiasts and/or organizational hobbyists. I don’t want to jinx it, but Albums checks a lot of boxes for me that Rdio did, back in the day.\n",
				"date_published": "2023-05-28T08:34:05-07:00",
				"url": "https://therealadam.com/2023/05/28/albums-is-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/05/26/til-jenny-lewis.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>TIL Jenny Lewis covered the Traveling Wilburys&#8217; <a href=\"https://music.apple.com/us/album/handle-with-care/1043297885?i=1043298766\">&#8220;Handle With Care&#8221;</a>. 👍🏻</p>\n",
				"date_published": "2023-05-26T07:55:30-07:00",
				"url": "https://therealadam.com/2023/05/26/til-jenny-lewis.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/05/12/dont-zero-out.html",
				"title": "Don’t zero out the margins",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://fs.blog/slack/\">Efficiency is the enemy</a>, Farnam Street:</p>\n\n<blockquote>\n<p>It’s possible to make an organization more efficient without making it better. That’s what happens when you drive out slack. It’s also possible to make an organization a little less efficient and improve it enormously. In order to do that, you need to reintroduce enough slack to allow the organization to breathe, reinvent itself, and make necessary change.</p>\n</blockquote>\n\n<p>The good stuff happens in the margins. The scribbles in books, the breath between notes, the five minutes before meetings start when folks are real. Driving a car for the <em>sensation</em> of driving fast, rather than driving fast to achieve the best possible time.</p>\n\n<p>It’s the difference between enjoying a hobby and making a profession out of a hobby. Efficiency is the adversary of fun.</p>\n",
				"date_published": "2023-05-12T14:12:34-07:00",
				"url": "https://therealadam.com/2023/05/12/dont-zero-out.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/05/10/three-meditations-on.html",
				"title": "Three meditations on wins",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Leaders (and managers) are successful to the extent that their teams and peers notch wins. Former Intel CEO Andy Grove calls this the “output” of a manager, and wrote the book on it<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Easier said than done! What <em>is</em> it for a lead to create wins (aka output)?</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>1. Choose games that are winnable</h2>\n<!-- /wp:heading -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Only play games you can win.</p><ul>\n\t<li>Warren Buffett or the Beastie Boys (probably)</li>\n</ul>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Our time is highly constrained. Saying “no” is an underrated and under-discussed leadership skill. Saying no on behalf of my team, peers, or organization, I’ve <em>created focus</em> on a (potentially) winning effort.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Some great reasons not to play a game<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li>The opportunity, as presented, is not yet small enough in scope to notch a win in the time available to work the opportunity. Find a smaller win in the presented opportunity that will give you a hint as to the real potential of the bigger project.</li>\n\t<li>The calendar time necessary to run the project or ongoing effort to completion (notch the win) is dominated by process, coordination, and bureaucracy. That is, try again when there is a way to realize the impact with less overhead/organizational drag.</li>\n\t<li>There’s a gap between the desired/supposed outcome and the project(s) that could realize that outcome. The immediate win is to research/brainstorm/write your way to connecting outcome with action(s).<br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Pro-tip: provide feedback on not-yet-winnable games in the form of “I don’t <em>yet</em> know <em>how</em> to win that game, let’s start by fixing that”. No one likes pessimism, cynicism, or shutting down all the project ideas. That said, it’s fair to provide constructive feedback that will improve the idea or bring it closer to action/win-ability.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>2. What counts as a win?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Once something is out in the world, it’s a win. Publishing an article, releasing a feature to your customers – those are definitely wins.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Getting something out of your team or head, that’s a sort of win. Rolling out a new process or tool is some kind of win. Worth sharing! But it doesn’t directly improve what customers are paying for, so focusing entirely on this kind of win doesn’t count.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Wins have to change your company’s world in some tangible way.</strong> The change need not be objective or quantitative; a subjective/qualitative survey is enough!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>If what you’re recognizing as little wins doesn’t yield bigger wins, then it’s time to reflect on what you’re encouraging.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>3. Avoid short-term thinking, build momentum with little wins, build big wins</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>A culture of thoughtfulness about outcomes, potential, impact, and trade-offs makes 1 and 2 happen.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Loud voices may try to convince you that un-winnable games have lots of promise. Urgent voices might tell you counting something as a win and moving on is the right move.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Moving the goal-line closer, so you can recognize a win, is expedient and productive, occasionally. Other times, moving the goal-line is self-defeating.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>It is often difficult to stick with long-term projects. There is so much other stuff to work on, all of it intriguing. Other folks in the organization will want to know how much of “all of it” we could produce in the current and next quarters.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The challenge is to stay the course, believe in the purpose, and stack all those little wins, every week, until the big win takes shape. Tell your colleagues about the big win’s emergence…</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>In short</h2>\n<!-- /wp:heading -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li>Choosing what to work on (or not) is of crucial importance. </li>\n\t<li>Recognizing the right kinds of progress makes it easier to stack little wins on the way to big wins.</li>\n\t<li>Exercising the discipline to stack meaningful progress (wins) is the engine for generating big outcomes.</li>\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\"><a href=\"https://www.amazon.com/High-Output-Management-Andrew-Grove/dp/0679762884\">High Output Management</a>. See also, <a href=\"https://about.gitlab.com/handbook/leadership/high-output-management/\">GitLab’s notes on the same</a>. <a href=\"#ffn1\">&#8617;</a></li>\n\t<li id=\"fn2\">Would a whole post on indicators of losing/un-winnable games come off as <em>too</em> cynical? <a href=\"#ffn2\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2023-05-10T06:18:07-07:00",
				"url": "https://therealadam.com/2023/05/10/three-meditations-on.html",
				"tags": ["Leading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/05/07/improving-when-you.html",
				"title": "Improving when you can’t rinse and repeat",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>You can’t practice at some things. Putting the cat back in the bag or the toothpaste back in the tube. The undoable, the things that you can’t unsay. The measure twice cut once stuff. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In those cases, a little preparation and reflection go a long way. I think about what's important to say or verify before I say/do the undoable. Afterward, I reflect on how things went, if I learned anything surprising, and how I can improve the process next time. Ideally, I write all this down, so I don't lose any wisdom for the next time I'm faced with a similar challenge.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I'd normally say rinse and repeat here. But the point here is there is no rinse! There is only setting myself up for success when I find myself facing a one-way door.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-05-07T11:38:46-07:00",
				"url": "https://therealadam.com/2023/05/07/improving-when-you.html",
				"tags": ["Leading","leadership:practice"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/04/26/top-of-mind.html",
				"title": "Top of Mind No. 5",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Like everyone (it seems), I’m exploring how large language model copilots/assistants might change how I work. A few of the things that have stuck with me:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li><a href=\"https://simonwillison.net/2023/Mar/27/ai-enhanced-development/\">Use LLMs to reduce the cost of doing things, there by increasing ambition.</a> That is, reducing cost increases demand.</li>\n\t<li><a href=\"https://martinfowler.com/articles/2023-chatgpt-xu-hao.html\">Using LLM prompting to think through/design a new bit of program functionality</a>. If one can manage to write a generic prompt, without proprietary information, you have given many programmers a much wiser pair than they might normally have.</li>\n\t<li><a href=\"https://buttondown.email/hillelwayne/archive/gpt4-should-be-part-of-your-toolkit/\">Use LLM flexible tool for thinking through problems or solving them outright</a>. GPT4 is like rolling a REPL, a junior developer, and a conversational partner into one very flexible toolkit.<br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>My take right now: GitHub Copilot is the real deal and helpful, today. On the low-end, it’s the most useful autocomplete I’ve used. On the high-end, it’s like having a pair who has memorized countless APIs (with a somewhat fallible memory) but can also type in boilerplate bits of code quickly, so I can edit, verify, and correct them.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I don’t expect the next few products I try to hit that mark. But, I suspect I will have a few LLM-based tools in my weekly rotation by the end of the year.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-04-26T06:32:29-07:00",
				"url": "https://therealadam.com/2023/04/26/top-of-mind.html",
				"tags": ["people:simon-willison","Build","Now","people:hillel-wayne","people:martin-fowler","technology:llm"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/04/14/err-the-blog.html",
				"title": "Err the Blog, revisited",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Before there was GitHub, there was <a href=\"http://errtheblog.com/\">Err the Blog</a>. Chris Wanstrath and PJ Hyett wrote one of the essential Rails blogs of early Rails era. Therein, many of the idioms and ideas we use to build Rails apps today were documented or born.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’d figured this site was offline, as are most things from the mid-2000s. ‘Lo and behold, it’s still online in its pink-and-black glory. Lots of nostalgia on my part here.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>There was a Big Moment here, in my career and Ruby/Rails, where an abnormal density of smart people were together in a moment (if not a community) and the basis of my career took shape. It was good times, even if we didn’t yet have smartphones or doom-scrolling.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Allow me to reflect on what I found as I went through the archives.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How we built things back then</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Rails circa 2.x was a quite unfamiliar game to the modern developer. REST conventions for CRUD controllers had <em>just</em> taken hold, and were not yet the canonical way to structure Rails code. There was a lot of experimentation and many of the solutions we take for granted today (namely, dependencies) were extremely unsolved back then.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/8-dry-your-controllers\">DRY Your Controllers — err.the_blog</a> – ideas about CRUD controllers before CRUD controllers were <em>the</em> thing in Rails (2.0 I think?). That said, if you were to write this now… I'd have issues with that. 😆</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/33-my-rails-toolbox\">My Rails Toolbox — err.the_blog</a> – this probably represented the state of the art for building Rails in its time… 17 years ago. 👴</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/50-vendor-everything\">Vendor Everything — err.the_blog</a> – I followed this approach on my first Rails app. It was a pretty good way to keep things going for one, enthusiastic developer at the time. But RubyGems, Bundler, etc. are <em>far better</em> than vendor’ing these days. And, one of the crucial leverage points for working in the Rails space.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How we built things back now</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Some things stay the same. For example, the need to fill in the gaps between Rails’ conventions for organizing your app, enhancing Ruby via ActiveSupport, and the lack of a suitable approach to view templates that satisfies writing code, testing code, and building front-ends.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/3-organize-your-models\">Organize Your Models — err.the_blog</a> – early memories of <em>attempting</em> to organize files in a <em>Rails 1.2</em> app despite numerous headwinds presented by Rails itself. (IMO, organizing a Rails app by folder+namespace has really only started to work after Rails 6.0).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/42-rails-rubyisms-advent\">Rails Rubyisms Advent — err.the_blog</a> – a love letter to ActiveSupport's extensions to the Ruby language. Many of these are in the Ruby language now, thankfully! ActiveSupport (still) rubs some folks the wrong way, but it remains one of my favorite things about Rails.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/66-view-testing-20\">View Testing 2.0 — err.the_blog</a> – amazingly, there's <em>still</em> no good story here. It's all shell games; write e2e tests instead of unit tests, use object-like intermediaries instead of ERB templates, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How we stopped building things that way</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Rails has always had flawed ideas that need re-shaping or removing over time. Mostly in making ActiveRecord as good of an ecosystem participant as it is a query-generation API.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/39-withscope-with-scope\">with_scope with scope — err.the_blog</a> – ActiveRecord scopes are way better now! I think <code>with_scope</code> remains, at least in spirit, in the Rails router API.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/7-activerecord-variance\">ActiveRecord Variance — err.the_blog</a> – wherein our heroes discover inconsistencies in AR's <code>find*</code> APIs and patch their way to more predictable operation thereof.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">How I was even more excited about Ruby</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Err the Blog was not first on the Rails hype wave of the mid-2000’s. But, it was consistently one of the best. Every time a new post was published, I knew it was worthwhile to make time to read the latest post. I learned a lot about my favorite things about Ruby from Err: writing little languages and <code>Enumerable</code>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/37-pennin-a-dsl\">Pennin' a DSL — err.the_blog</a> – I could not read enough posts on building DSLs in my early Ruby days. It was <em>the feature</em> I was excited about in Ruby. Thankfully, it's a lot easier to do 'macro magic' in Ruby these days. And, hooking into the idiomatic ways to write Rails-style declarative bits is <em>much better</em> now.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://errtheblog.com/posts/44-select-a-reject\">Select a Reject — err.the_blog</a>, <a href=\"http://errtheblog.com/posts/45-allow-me-to-inject\">Allow Me to Inject — err.the_blog</a> – love letters to Enumerable, my <em>favorite</em> thing about Ruby. And <a href=\"http://errtheblog.com/posts/63-full-of-ambition\">Full of Ambition — err.the_blog</a> – fan fiction about Enumerable and ActiveRecord finally uniting in a loving relationship.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">We have to go back</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>If you liked this, you may also enjoy revisiting:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li><a href=\"http://blog.hasmanythrough.com\">has_many :through</a> – Josh Susser’s blog was one of the first to explain how Rails works and how to leverage it</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://hobix.com\">Red Handed</a> – _why the lucky stiff’s blog</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://blog.envylabs.com/tagged/rails\">Envy Labs</a> – a Rails blog from the Rails Envy folks, Gregg Pollack and Jason Seifer</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li><a href=\"https://web.archive.org/web/20080209140932/http://blog.caboo.se/\">Caboose</a> – part community, part collective, an early nexus of Rails talent<br></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And so, I come to the end of my nostalgia. Now, I must go forward.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-04-14T05:45:54-07:00",
				"url": "https://therealadam.com/2023/04/14/err-the-blog.html",
				"tags": ["Uncategorized","ruby","rails","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/04/01/writing-is-a.html",
				"title": "Writing is a \"do it, somehow, every day\" game",
				"content_html": "<p>Whenever I find myself wishing I was posting more toots/articles/etc., I remind myself that the first step is to get words out of my head and onto the page. The hack is that &ldquo;the page&rdquo; is often a personal journal (I use <a href=\"https://dayoneapp.com\">Day One</a>), a paper notebook (<a href=\"https://baronfig.com/products/confidant-hardcover-notebook\">Baron Fig</a>, currently) , or even a task with a note of a few sentences in <a href=\"https://culturedcode.com/things/\">Things</a>. It all counts.</p>\n<p><a href=\"https://www.youtube.com/watch?v=iO5jub2q8us\" title=\"Still my favorite Nike ad, 11 years later\"><img src=\"https://short.therealadam.com/uploads/2023/5c8ec79c2b.png\" alt=\"Just sitting around like The Big Liebowski does not count as writing\"></a></p>\n<p>More importantly, it generates momentum. Possibly, this writer’s most crucial but immeasurable input commodity.</p>\n<p>Related: <a href=\"https://ruby.social/@therealadam/110072680899591393\">finishing is the skill</a> and <a href=\"https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/\">Austin Kleon’s notes on daily blogging, and stock/flow</a>.</p>\n",
				"content_text": "Whenever I find myself wishing I was posting more toots/articles/etc., I remind myself that the first step is to get words out of my head and onto the page. The hack is that \"the page\" is often a personal journal (I use [Day One](https://dayoneapp.com)), a paper notebook ([Baron Fig](https://baronfig.com/products/confidant-hardcover-notebook), currently) , or even a task with a note of a few sentences in [Things](https://culturedcode.com/things/). It all counts.\n\n[![Just sitting around like The Big Liebowski does not count as writing](https://short.therealadam.com/uploads/2023/5c8ec79c2b.png)](https://www.youtube.com/watch?v=iO5jub2q8us \"Still my favorite Nike ad, 11 years later\")\n\nMore importantly, it generates momentum. Possibly, this writer’s most crucial but immeasurable input commodity.\n\nRelated: [finishing is the skill](https://ruby.social/@therealadam/110072680899591393) and [Austin Kleon’s notes on daily blogging, and stock/flow](https://austinkleon.com/2017/11/20/a-few-notes-on-daily-blogging/).\n",
				"date_published": "2023-04-01T09:36:19-07:00",
				"url": "https://therealadam.com/2023/04/01/writing-is-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/03/25/dock-jackpot-in.html",
				
				"content_html": "<h1 id=\"dock-jackpot\">Dock jackpot</h1>\n<p>In twenty years of using Mac OS X/macOS, rarely has my dock <em>not</em> been all blue icons or a bunch of faces staring at each other. Today is one of those days, bless.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "# Dock jackpot\n\nIn twenty years of using Mac OS X/macOS, rarely has my dock _not_ been all blue icons or a bunch of faces staring at each other. Today is one of those days, bless.\n\n<img src=\"https://short.therealadam.com/uploads/2023/05691d963d.png\" width=\"600\" height=\"67\" alt=\"\">\n",
				"date_published": "2023-03-25T11:05:54-07:00",
				"url": "https://therealadam.com/2023/03/25/dock-jackpot-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/03/24/focus-in-a.html",
				"title": "Focus in a time of distraction",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>That is, some notes on helping junior developers focus on execution when they are surrounded by the twin distractions of novelty and outright broken things. With apologies to <em>Love in the Time of Cholera<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Faced with a junior developer who finds themselves stuck, what questions could you ask them to help them get back on the happy path without <a href=\"https://therealadam.com/2022/11/21/one-thing-at-a-time-incrementally/\">all the distractions that junior developers</a> face:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The trick for juniors, is they’re always learning more than one thing at a time, often on accident. They want to build a feature, but it requires a new library, and it requires learning the library. They went to start up my development server, but then something weird happens with Unix. It’s the essential challenge of being a junior – they’re just getting started, so they’re always learning a couple of things at a time2.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Is this a side quest?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Compared to senior developers, juniors often find themselves down <em>the wrong</em> rabbit hole. Senior developers have a better sense of when they are chasing the right lead. Over the course of months and years, they develop a sense of when we’re looking at a red herring. More so, they learn to recognize issues caused by development environment rot, bad data, unrelated bugs, and other sorts of non-essential annoyances.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In those situations, it’s helpful to ask junior developers if they’re pursuing the essential problem or if they’re on a side-quest. If it’s a side-quest, write it down and get back to the essential issue. If it’s the essential problem, then…</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">What do you need to know to focus or make progress?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>At all experience levels, software developers face the frustration of “it <em>just</em> doesn’t work”. Occasionally, this is down to outright broken software. Often it’s not knowing about or misunderstanding a crucial detail of how the sub-systems work together.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s <em>extremely</em> tempting to skip ahead, tell a junior developer what they need to know, and move along. That’s how it works on the internet<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. It’s time efficient. The ability to swoop in with an answer feels wizardly, and that’s pretty fun.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Unfortunately, that’s the “give a man a fish, you feed them for a day” approach. Junior devs are a source of endless questions, sometimes excellent and sometimes not. Answering one question, no matter how decisively, is unlikely to change the shape of the ‘questions per hour’ graph.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Better questions, better information</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Better to teach junior developers to generate <a href=\"https://jvns.ca/blog/good-questions/\"><em>better</em> questions</a>. Nudge them to lead with what they <em>know</em> about the non-working situation. Encourage them to steer clear of trying magical solutions<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup> and whack-a-mole troubleshooting<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This teaches a junior developer two things: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>They probably know more than they think. </li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>They’re more likely to find their answer by <em>answering questions</em> than by <em>fixating on what doesn’t work</em><br></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Which questions can you answer right now?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now that our junior developer is armed with <em>better</em> questions, it’s time to answer them. Given all the questions that might help them make progress, they should start from the ones we know how to answer right now. Sometimes luck strikes and the problem is solved. Other times, the issue <em>and</em> the tricky questions remain.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This is the scenario where senior developers<sup><a id=\"ffn5\" href=\"#fn5\" class=\"footnote\">5</a></sup> can help a junior developer the most and teach them to fish, so to speak. Senior developers are often more adept at using REPLs, debuggers, automated tests, documentation, static code reading, inspecting data, or observing runtime behavior to turn good questions into answers. In one session, a mentor can show an apprentice how to use an unfamiliar tool, think about problem-solving, <em>and</em> solve the original question. The mentor will probably learn something too!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2 class=\"wp-block-heading\">Luck happens</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There is a bit of chance in solving problems. Recall what you already know. Pattern match on the (correct) factors that likely won’t bring you closer to a solution. Ask <em>answerable</em> questions that narrow the issue space. If you make a mis-step at any of these, you could end up confusing yourself even more!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Stick with it. Maybe step away if you’re already drained, or it’s getting late in the day. But stick with it. Persistence beats luck and chance, most of the time<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Thanks to Wade Winningham and Henrik Nyh for sharing ideas on <a href=\"https://ruby.social/@therealadam/109813587776869003\">this topic via ruby.social</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Which I have <em>not</em> read but <em>is</em> a pretty snappy title. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>e.g. Stack Overflow and its ilk <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>e.g. restart the computer, reinstall something <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Trying random changes, repeating one test in hopes of seeing a different result, blindly applying suggestions from similar problems posted on the internet. <a href=\"#ffn4\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Senior developers <em>appear</em> to have the superpower of seeing circumstances and going <em>directly</em> to the root cause. That usually happens by quickly enumerating <em>what they know about the problem</em> and pattern matching on the circumstances to reduce the problem space to a few possibilities worth eliminating or verifying.<br>This happens via answering enough questions that the problem or behavior of the system becomes obvious. It’s a bit of crafting a theory until you trip over the actual situation. <a href=\"#ffn5\">↩</a>\n\t</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Casinos and rigged games are notable exceptions. <a href=\"#ffn6\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-03-24T06:02:30-07:00",
				"url": "https://therealadam.com/2023/03/24/focus-in-a.html",
				"tags": ["leadership:coaching","Leading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/02/23/reading-february.html",
				"title": "Reading, February 2023",
				"content_html": "<p>I’m <a href=\"https://short.therealadam.com/2022/11/09/currently-digging.html\">still</a> reading about the Manhattan Project. The going is slow. Big books, big timelines. At least, for the speed at which I read.</p>\n<p>Rhodes, <em>Making of the Atomic Bomb</em> – I’m 500+ pages in and only up to the early 1940s. That’s a hefty history meatball. That said, it’s a deep dive into the history of science in context with chemistry and quantum/nuclear physics. If you like a hefty but complete book, this one is your jam.</p>\n<p>Wellerstein, <em>Restricted Data</em> – I have very much enjoyed the author’s <a href=\"https://blog.nuclearsecrecy.com\">blog of the same name</a> over the years. The author goes deep on the newly created apparatus for keeping the Manhattan Project secret from very nearly the whole world during the war. The pace for this one is a little off, to my preference, so I’ve put this one down for the moment.</p>\n<p>Gleick, <em>Genius</em> – Big Richard Feynman fan here. This book does not disappoint as a biography. Gleick is a great writer, writing with detail but without losing pace or going so deep that the thread is easily lost.</p>\n<p>Reading in <a href=\"https://www.driverlesscrocodile.com/books-and-recommendations/more-from-tyler-cowen-and-russ-roberts-on-reading/\">topical clusters</a> has worked really well for me. The books <a href=\"https://austinkleon.com/2020/02/13/on-reading-more-than-one-book-at-a-time/\">talk to each</a> other. It’s a bit like a Manhattan Project Cinematic Universe when personalities come together in Los Alamos and then disperse as each book follows a different thread of history. Physicists assemble, I suppose!</p>\n",
				"content_text": "I’m [still](https://short.therealadam.com/2022/11/09/currently-digging.html) reading about the Manhattan Project. The going is slow. Big books, big timelines. At least, for the speed at which I read. \n\nRhodes, _Making of the Atomic Bomb_ – I’m 500+ pages in and only up to the early 1940s. That’s a hefty history meatball. That said, it’s a deep dive into the history of science in context with chemistry and quantum/nuclear physics. If you like a hefty but complete book, this one is your jam.\n\nWellerstein, _Restricted Data_ – I have very much enjoyed the author’s [blog of the same name](https://blog.nuclearsecrecy.com) over the years. The author goes deep on the newly created apparatus for keeping the Manhattan Project secret from very nearly the whole world during the war. The pace for this one is a little off, to my preference, so I’ve put this one down for the moment.\n\nGleick, _Genius_ – Big Richard Feynman fan here. This book does not disappoint as a biography. Gleick is a great writer, writing with detail but without losing pace or going so deep that the thread is easily lost.\n\nReading in [topical clusters](https://www.driverlesscrocodile.com/books-and-recommendations/more-from-tyler-cowen-and-russ-roberts-on-reading/) has worked really well for me. The books [talk to each](https://austinkleon.com/2020/02/13/on-reading-more-than-one-book-at-a-time/) other. It’s a bit like a Manhattan Project Cinematic Universe when personalities come together in Los Alamos and then disperse as each book follows a different thread of history. Physicists assemble, I suppose!\n",
				"date_published": "2023-02-23T06:49:50-07:00",
				"url": "https://therealadam.com/2023/02/23/reading-february.html",
				"tags": ["reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/02/22/write-linked-notes.html",
				"title": "Write linked notes so you don’t have to remember",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Writing linked notes helps engineering makers and managers alike develop the super-powers of augmented memory and the <em>appearance</em> of effective multitasking.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’m revisiting <a href=\"https://therealadam.com/tag/peoplesimon-willison/\">Simon Willison</a>’s essay and conference talk <a href=\"https://simonwillison.net/2022/Nov/26/productivity/\">Massively increase your productivity on personal projects with comprehensive documentation and automated tests</a>. I’ve started thinking about it<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> as “the surprisingly effective power of writing linked notes”. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In particular, those last three words:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>Writing: most thinking is improved and clarified by writing.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Linked: writing is even better when the writer or interested colleagues can return to it later. Linking facilitates discovery via browsing and searching.</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Notes: mostly static text, but <em>sometimes</em> executable tests/documentation, too!<br></li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Over time, writing linked notes gives you what <em>looks</em> like the myth of multitasking. Really, it’s reducing the cost of context-switching and <em>remembering</em>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>This is how it relates back to maintaining 185 projects at the same time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With issue driven development you don’t have to remember anything about any of these projects at all.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve had issues where I did a bunch of design work in issue comments, then dropped it, then came back 12 months later and implemented that design—without having to rethink it.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Occasionally, I get a feeling, whilst working on a tricky problem, that I am starting to lose the thread. Keeping all the variables, ideas, and context is difficult as the interconnections grow. That’s the moment when <em>writing it down</em> to get it <em>out of my head</em> allows me the space to remember less, concentrate more, and push through to make progress again.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Highly recommended.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>And, sharing it with anyone who will listen. Present company included. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-02-22T06:54:40-07:00",
				"url": "https://therealadam.com/2023/02/22/write-linked-notes.html",
				"tags": ["people:simon-willison","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/02/14/top-of-mind.html",
				"title": "Top of Mind No. 4",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>The practice of building software/technology is going through a phase shift. We’ve worked from abundance the past few years. Now we have to figure out which developments are worth keeping and make a dividend of that exploration. It’s not clear what job roles, kinds of software, practices, and benefits<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> will persevere.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We’re going to have to ask <a href=\"https://youtu.be/U0tpjs8zflQ\">“what would you say it is you do around here?”</a> of software development assumptions from the past few years. It’s unsettling<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>, but <em>some</em> good corrections will come of it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’m betting that using writing as a lever will remain under-rated and under-used. Both for asynchronous/remote work <em>and</em> improving all kinds of thinking about building software.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Furthermore, <a href=\"https://short.therealadam.com/2023/02/13/natasha-lyonne-is.html\"><em>Poker Face</em> is excellent.</a></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>Sorry, nap pods and ping-pong tables. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>And, often executed cynically. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-02-14T18:19:02-07:00",
				"url": "https://therealadam.com/2023/02/14/top-of-mind.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/02/13/natasha-lyonne-is.html",
				"title": "Natasha Lyonne is my generation’s Joe Pesci",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><em>Poker Face</em> is a gem. Do yourself a favor and start watching it<a href=\"#fn:1\" id=\"fnref:1\" title=\"see footnote\" class=\"footnote\">[1]</a>. I didn’t realize I needed a weekly murder mystery kind of show. But I did, in this specific form.</p>\n\n<figure>\n<img src=\"uploads/2024/bb61fe6a60.jpg\" alt=\"Poster image of Natasha Lynne wearing sunglasses in the American Southwest\" />\n<figcaption>Poster image of Natasha Lynne wearing sunglasses in the American Southwest</figcaption>\n</figure>\n\n<p>Like murder mysteries of yore, <em>Poker Face</em> has a recognizable and soon-familiar cadence. We see a murder happen in the first few scenes, rewind to a few days previous when Natasha Lyonne arrives on said scene, we see her discover and solve the murder. The format works, even if you aren’t a viewer of crime shows and procedurals.</p>\n\n<p>This being a show about a journey<a href=\"#fn:2\" id=\"fnref:2\" title=\"see footnote\" class=\"footnote\">[2]</a>, each episode brings a few interesting actors in for a cozy, crisp murder mystery. These guest stars are as excellent as you might guess given the show is produced by Lyonne, Maya Rudolph, and Rian Johnson.</p>\n\n<p>The bottom line, in this case, is the star is the show. The show is built around Natasha Lyonne, who is perfect in this role. Lots of little wise-guy energy. The way she uses her arms and voice to fill scenes, it’s great. I can’t stop telling people she is my generation’s Joe Pesci. They’re even the same height!</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn:1\">\n<p>If you have the means, get yourself an NBC Peacock and watch yourself a great show. <a href=\"#fnref:1\" title=\"return to article\" class=\"reversefootnote\">&#160;&#8617;</a></p>\n</li>\n\n<li id=\"fn:2\">\n<p>This will make more sense after you watch the first episode. <a href=\"#fnref:2\" title=\"return to article\" class=\"reversefootnote\">&#160;&#8617;</a></p>\n</li>\n\n</ol>\n</div>\n",
				"date_published": "2023-02-13T06:34:02-07:00",
				"url": "https://therealadam.com/2023/02/13/natasha-lyonne-is.html",
				"tags": ["Watching"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/31/make-code-better.html",
				"title": "Make code better by writing about it",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Writing improves thoughts and ideas. Doubly so for thoughts and ideas about code.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Writing, about software or otherwise, is a process wherein:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li>thoughts and ideas are clarified</li>\n\t<li>ideas are transferred to colleagues</li>\n\t<li>culture (of a sort) is created by highlighting what’s essential and omitting what’s transient<br></li>\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Documenting code, as a form of writing, is a process wherein:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li>the concepts and mechanics in the code are clarified</li>\n\t<li>what’s in our head <em>today</em> is made available to our teams (and ourselves) in the future</li>\n\t<li>culture happens by highlighting what’s intended and what’s “off the beaten path” when working with this codebase<br></li>\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>I suspect that open source is (often) of higher quality than bespoke, proprietary software because it has to go through the crucible of documentation. Essentially, there’s a whole other design activity you have to go through when publishing a library or framework that internal/bespoke software does not.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I can’t objectively verify this. Subjectively, when I have made the time to write words about a bit of code I wrote, it has resulted in improving the design of the code along the way. Or, I better understand how I might design the code in the future.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Writing is a great tool for designing code. Use it more often!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2023-01-31T07:05:05-07:00",
				"url": "https://therealadam.com/2023/01/31/make-code-better.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/23/corporate-personhood-and.html",
				"title": "Corporate personhood and ants",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://interconnected.org/home/2023/01/17/filtered\">Filtered for ants and laws</a>, Matt Webb:</p>\n\n<blockquote>\n<p>Let’s say we could chat with ants. Could we trade with them? What would we want from them?</p>\n\n<p>…</p>\n\n<p>In short: people treat almost everything as people, at least a bit, including companies.</p>\n</blockquote>\n\n<ol>\n<li>We could try to communicate with ants and then include them in capitalism. Would this raise all boats for humans (who currently do low-paying/low-prestige work) <em>and</em> the ants (what is good pay/prestige/standard of living for an ant, I don&#8217;t know!)?</li>\n<li>We attribute person-like qualities to corporations. Infamously, in the case of <em>Citizens United</em> and more innocuously like attributing creativity to Apple, potential then hucksterism with Tesla, or declining design aesthetic with BMW.</li>\n<li>If we bring ants into corporatism and personify them, there&#8217;s an opportunity for some futurist/dystopian sci-fi where a mysterious cadre of house cleaners/chore-doers conceal themselves via surveillance technology and financial engineering of shell corporations. Turns out, it&#8217;s just a mega-colony of ants.</li>\n</ol>\n",
				"date_published": "2023-01-23T11:42:15-07:00",
				"url": "https://therealadam.com/2023/01/23/corporate-personhood-and.html",
				"tags": ["Commonplace"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/21/turn-the-pages.html",
				"title": "Turn the pages. Read the code. Hear the words.",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>“Turn every page. Never assume anything. Turn every goddamned page.” — Robert Caro, <em>Working</em></p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>So goes the wisdom super-biographer Robert Caro received from a mentor when he was an investigative reporter in New York. Caro went on to apply this energy and depth to write a sprawling biography on real estate developer Robert Moses and four volumes on the life of LBJ.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I like the energy, determination, and purpose of Caro’s advice. In his writing, Caro takes a maximalist<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> perspective<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. He looks to <em>understand</em> the system. Caro read every original document in every archive he could find (“turning the pages”) to ensure he fully grasped the context of historical events <em>and</em> didn't miss any details that might change the interpretation of events. Caro tries to load the whole state of his subject into his head and notes. Only then does he start writing his expansive biographies.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>1. Read the code</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Building software benefits from the same energy and determination displayed by Caro. As I’m working on a project, I flip between code I’m writing, code I’m using, and adjacent systems. Once I’ve read enough to have the problem and system in my head, I can move through the system and answer questions about it with that <em>everything is at my fingertips</em> feeling<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup>. Fantastic.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Recommended</strong>: read third-party libraries, frameworks, standard/core/prelude libraries. Read demo code. Find inspiration, learn something new, and build the muscle for reading code with confidence.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>2. Hear the words</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When I’m really listening, avoiding the urge to think through what I’ll say next, I’m doing my best work as a coach or mentor. When I really <em>hear</em> and <em>understand</em> what a colleague is trying to accomplish or solve, it’s a bigger win for everyone.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Subsequently, I can switch to brainstorm or solution mode. Not before.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Recommended:</strong> <em>literally</em> listen to what they’re saying. Especially for the leaders and managers out there. Get the context needed to understand what they’re thinking. Ask clarifying questions until you’re sure <em>they</em> understand what they’re thinking. Don’t start responding until you’re sure you understand the context <em>and</em> the kind of response<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup> expected of you.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>3. Build a model</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Reading (words and code) and listening are great ways to <a href=\"https://blog.ceejbot.com/posts/programming-as-theory-building/\">build a mental model of how an organization, system, team, or project <em>works</em></a>. That said, a model is mostly <em>predictions</em>, not rules or hard-won truths. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>To verify your model, you have to get hands-on at some point. A model is likely invalid unless it’s been applied hands-on to the system in question. Make a change, propose an updated process. See what happens, what breaks, who pushes back. Building (with code, with words) upon the model will evolve your understanding and predictions in ways that further reading or listening will not.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Recommended:</strong> turn reading words, reading code, and listening into a model of how your code-base, team, or organization <em>work together</em>. Apply that model to a problem you’re facing and use the results to improve your predictions on what actions will produce welcome outcomes. Rinse and repeat.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>4. Go forth and deeply understand a system</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>With due credit to Robert Caro, I suggest doing more than “turning the pages”:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>“Read the code. Read every damn function or module you’re curious about.” — me, a few months ago</p><p>\"Listen to what they're saying. Hear every damn word until they're done talking.\" — me, several weeks ago</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Next time you think “I need more context here” or “that seems like magical code/thinking”, go deeper. Take 15 minutes to read the code, or listen 15 seconds longer to your conversation-mate.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Turn the pages. Read the code. Hear the words.</strong></p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">Aside from his biography quote above, all of his books are doorstoppers. <a href=\"#ffn1\">&#8617;</a></li>\n\t<li id=\"fn2\">Extensively aided, it should be noted, by further research and organization by his wife. <a href=\"#ffn2\">&#8617;</a></li>\n\t<li id=\"fn3\">Aka <a href=\"https://en.wikipedia.org/wiki/Fingerspitzengef%C3%BChl\">Fingerspitzengefühl</a> <a href=\"#ffn3\">&#8617;</a></li>\n\t<li id=\"fn4\">e.g. commiserating, brainstorming, un-blocking, taking action, etc. <a href=\"#ffn4\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2023-01-21T15:54:03-07:00",
				"url": "https://therealadam.com/2023/01/21/turn-the-pages.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/12/remote-work-skills.html",
				"title": "Remote work skills today look like being online in my youth",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Checking my emails frequently. Responding to a few group/direct-message chats at a time. Managing to write code, do math, or put together a slideshow/essay at the same time. Always in front of a computer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That’s what productivity in my college years<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> looked like. There was lots of multitasking and goofing around online. A smidge of collaboration via nascent networks<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There is little coincidence that’s close to how I work today. Slack is a better IRC<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup>, messaging apps work a lot like AIM<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup> and ICQ<sup><a id=\"ffn5\" href=\"#fn5\" class=\"footnote\">5</a></sup> did back in the day. I try to focus more and multitask less, to the extent that circumstances and discipline allow.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What strikes me is, when my career started<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup>, that’s <em>not</em> how we worked.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the early 2000s, if I needed to talk to more-experienced developers or managers, I wrote an email or walked over to their office/cubicle<sup><a id=\"ffn7\" href=\"#fn7\" class=\"footnote\">7</a></sup> to try and catch them for a quick chat. If I needed to talk to a more junior developer who was just out of college (like me), I sent them an instant message. I probably had Slashdot, IRC, or several blogs open in a minimized window somewhere.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, I’m the experienced developer/manager-type person, and the style of work matches a lot of my college habits. A lot of that is leadership determinism (i.e., I have the agency to set and model the structure of our work). Maybe <em>some</em> is down to measurable productivity improvements that, e.g., Slack bring. Most of it feels like it is down to the opportunity seized of remote work – you can’t work remotely without all the tools folks in my cohort started using as we were pivoting from students to professionals.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Today, “Extremely online” is a whole other thing that is unrelated to how I work professionally. But as a new generation becomes the largest in the workforce, probably that will change and things will look a little weird to me. So it goes!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>1998-2003. Most of those spent on a dual-everything Linux PC. I bought my first laptop/Mac in December 2002. <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Mostly, folks were Very Offline. Especially outside my generation, but even in my peer group. Now, we’re all Pretty Dang Online. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>For all but the neck-beard-est measurable axes. <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>AOL Instant Messenger, the definitive software of my youth. <a href=\"#ffn4\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Which required knowing your user ID to get people to add you as a friend. Thusly, I can <em>still</em> tell you my ID to this day: 11772935. <a href=\"#ffn5\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Roughly 2000 is when I did my first <em>productive</em> programming for money. <a href=\"#ffn6\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Thinking back, cubicles were not great or cool, but they <em>did</em> beat desks in an open layout on most axes. Larger pair cubicles with someone you like to collaborate with were pretty good, all things considered. <a href=\"#ffn7\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2023-01-12T11:00:00-07:00",
				"url": "https://therealadam.com/2023/01/12/remote-work-skills.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/10/songs-you-must.html",
				"title": "Songs You Must Listen To At Maximum Safest Volume",
				"content_html": "<ul>\n<li>&ldquo;Uptight&rdquo;, Steve Wonder</li>\n<li>&ldquo;Summertime Blues&rdquo;, The Who</li>\n<li>&ldquo;Wouldn&rsquo;t It Be Nice&rdquo;, The Beach Boys</li>\n<li>&ldquo;Good Vibrations&rdquo;, The Beach Boys</li>\n<li>&ldquo;Jungleland&rdquo;, Bruce Springsteen</li>\n<li>&ldquo;Once In a Lifetime&rdquo;, The Talking Heads</li>\n<li>&ldquo;Flashlight&rdquo;, Parliament</li>\n<li>“Rhythm Nation”, Janet Jackson</li>\n</ul>\n",
				"content_text": "* \"Uptight\", Steve Wonder\n* \"Summertime Blues\", The Who\n* \"Wouldn't It Be Nice\", The Beach Boys\n* \"Good Vibrations\", The Beach Boys\n* \"Jungleland\", Bruce Springsteen\n* \"Once In a Lifetime\", The Talking Heads\n* \"Flashlight\", Parliament\n* “Rhythm Nation”, Janet Jackson\n",
				"date_published": "2023-01-10T12:00:00-07:00",
				"url": "https://therealadam.com/2023/01/10/songs-you-must.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/08/top-of-mind.html",
				"title": "Top of Mind No. 3",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Working in small increments towards medium-to-large projects or outcomes is tricky. I too frequently find myself down a much deeper rabbit hole than I’d intended. And I’ve spent a lot of time thinking about it and practicing at it! Recommended reading: <a href=\"https://simonwillison.net/2022/Nov/26/productivity/\">Simon Willison on productivity</a>.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Read-only and write-only modes of accessing social media – there’s something good here. E.g., blogs and feed readers are distinct from most<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> posting software. Currently, I’m reading Twitter once a day, as a digest, without the ability to scroll an infinite timeline. If I want to post, I open up an entirely different app that nudges me towards <em>writing</em> instead of dashing off hot-takes. Interestingly, <a href=\"https://typefully.com/\">Typefully</a> and <a href=\"https://mailbrew.com\">Mailbrew</a> are what I’m using for this and are made by the same team. I wonder if that was intentional or a happy accident?</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Billing/subscriptions/payment projects are absolutely crucial, “undifferentiated heavy lifting”, and difficult to pull off. I have a ton of unstructured ideas about this. The latest kernel of an idea: billing projects are very likely to involve weird interactions between business goals, customer psychology, and anecdata.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><a href=\"https://short.therealadam.com/2023/01/07/the-nap-hierarchy.html\">The nap hierarchy</a> – naps are probably in my top 5 list of work-from-home benefits.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">Early versions of NetNewsWire and Userland Radio notwithstanding. <a href=\"#ffn1\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2023-01-08T13:00:00-07:00",
				"url": "https://therealadam.com/2023/01/08/top-of-mind.html",
				"tags": ["Uncategorized","people:simon-willison","Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/08/albums-you-should.html",
				"title": "Albums You Should Listen To From Start To Finish",
				"content_html": "<ul>\n<li><em>Born to Run</em>, Bruce Springsteen</li>\n<li><em>Blood Sugar Sex Magik</em>, Red Hot Chili Peppers</li>\n<li><em>Pet Sounds</em>, The Beach Boys</li>\n<li><em>The Blueprint</em>, Jay-Z</li>\n<li><em>Songs in the Key of Life</em>, Stevie Wonder</li>\n<li><em>Sign ‘O The Times</em>, Prince</li>\n<li><em>Symphony No. 9</em>, Beethoven</li>\n<li><em>The Rite of Spring</em>, Stravinsky</li>\n</ul>\n",
				"content_text": "*  _Born to Run_, Bruce Springsteen\n*  _Blood Sugar Sex Magik_, Red Hot Chili Peppers\n*  _Pet Sounds_, The Beach Boys\n*  _The Blueprint_, Jay-Z\n* _Songs in the Key of Life_, Stevie Wonder\n* _Sign ‘O The Times_, Prince\n* _Symphony No. 9_, Beethoven\n* _The Rite of Spring_, Stravinsky\n",
				"date_published": "2023-01-08T12:00:00-07:00",
				"url": "https://therealadam.com/2023/01/08/albums-you-should.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/07/the-nap-hierarchy.html",
				"title": "The nap hierarchy",
				"content_html": "<p>Doing a short snooze in the middle of the day? I highly recommend it if you have the means. Ideally, one of these places (in order by quality of rest):</p>\n<ol>\n<li>Couch nap</li>\n<li>Chair nap (recliner/lounge chair, ideally)</li>\n<li>Bed nap</li>\n<li>Sky nap (airplane)</li>\n<li>Train nap</li>\n<li>Car nap</li>\n</ol>\n<p>Places I have napped, for better or worse, and would not recommend:</p>\n<ul>\n<li>A rock concert (The Who, Bruce Springsteen)</li>\n<li>A college lecture</li>\n<li>A piano recital</li>\n<li>Voyage of the Little Mermaid (Walt Disney World, Hollywood Studios)</li>\n<li>Great Moments with Mr. Lincoln (Disneyland)</li>\n<li>American Adventure (Walt Disney World, EPCOT)</li>\n</ul>\n",
				"content_text": "Doing a short snooze in the middle of the day? I highly recommend it if you have the means. Ideally, one of these places (in order by quality of rest):\n\n1. Couch nap\n2. Chair nap (recliner/lounge chair, ideally)\n3. Bed nap\n4. Sky nap (airplane)\n5. Train nap\n6. Car nap\n\nPlaces I have napped, for better or worse, and would not recommend:\n\n- A rock concert (The Who, Bruce Springsteen)\n- A college lecture\n- A piano recital\n- Voyage of the Little Mermaid (Walt Disney World, Hollywood Studios)\n- Great Moments with Mr. Lincoln (Disneyland)\n- American Adventure (Walt Disney World, EPCOT)\n",
				"date_published": "2023-01-07T11:44:08-07:00",
				"url": "https://therealadam.com/2023/01/07/the-nap-hierarchy.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/06/bruce-springsteen-epochs.html",
				"title": "Bruce Springsteen Epochs",
				"content_html": "<ul>\n<li>Motown Bohemian, curly hair, <em>The Wild, The Innocent, and the E-Street Shuffle</em></li>\n<li>Denim, muscles, <em>Born in the USA</em></li>\n<li>The introspective wanderer, bolo tie, <em>Human Touch</em></li>\n<li>Revival, the flavor-saver goatee, <em>The Rising</em></li>\n<li>The rock &lsquo;n roll stateman, dark vest and necktie, <em>High Hopes</em></li>\n</ul>\n",
				"content_text": "*  Motown Bohemian, curly hair, _The Wild, The Innocent, and the E-Street Shuffle_\n*  Denim, muscles, _Born in the USA_\n*  The introspective wanderer, bolo tie, _Human Touch_\n*  Revival, the flavor-saver goatee, _The Rising_\n*  The rock 'n roll stateman, dark vest and necktie, _High Hopes_\n",
				"date_published": "2023-01-06T11:00:00-07:00",
				"url": "https://therealadam.com/2023/01/06/bruce-springsteen-epochs.html",
				"tags": ["Music","misc:bruce-springsteen"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/04/what-a-guitar.html",
				"title": "What A Guitar Is Supposed To Sound Like",
				"content_html": "<ul>\n<li>&ldquo;Summertime Blues&rdquo;, The Who, Pete Townsend</li>\n<li>&ldquo;Estranged&rdquo;, Guns &lsquo;n Roses, Slash</li>\n<li>&ldquo;Glory Days&rdquo;, Bruce Springsteen and the E-Street Band</li>\n<li>&ldquo;Highway to Hell&rdquo;, AC/DC, Angus Young</li>\n</ul>\n",
				"content_text": "*  \"Summertime Blues\", The Who, Pete Townsend\n*  \"Estranged\", Guns 'n Roses, Slash\n*  \"Glory Days\", Bruce Springsteen and the E-Street Band\n*  \"Highway to Hell\", AC/DC, Angus Young\n",
				"date_published": "2023-01-04T11:00:00-07:00",
				"url": "https://therealadam.com/2023/01/04/what-a-guitar.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2023/01/02/music-i-wish.html",
				"title": "Music I Wish I Had Written",
				"content_html": "<ul>\n<li><em>The Rite of Spring</em>, Igor Stravinsky</li>\n<li><em>The Planets</em>, Gustav Holst</li>\n<li>&ldquo;Good Vibrations&rdquo;, Brian Wilson</li>\n<li>&ldquo;Losing My Edge&rdquo;, James Murphy</li>\n<li>&ldquo;I Feel the Earth Move&rdquo;, Carole King</li>\n</ul>\n",
				"content_text": "*  _The Rite of Spring_, Igor Stravinsky\n*  _The Planets_, Gustav Holst\n*  \"Good Vibrations\", Brian Wilson\n*  \"Losing My Edge\", James Murphy\n*  \"I Feel the Earth Move\", Carole King\n",
				"date_published": "2023-01-02T11:00:00-07:00",
				"url": "https://therealadam.com/2023/01/02/music-i-wish.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/31/best-david-lee.html",
				"title": "Best David Lee Roth Mid-Song Banter",
				"content_html": "<ul>\n<li>&ldquo;Unchained&rdquo;</li>\n<li>&ldquo;Everybody Wants Some&rdquo;</li>\n<li>&ldquo;Hot for Teacher&rdquo;</li>\n</ul>\n",
				"content_text": "*  \"Unchained\"\n*  \"Everybody Wants Some\"\n*  \"Hot for Teacher\"\n",
				"date_published": "2022-12-31T11:00:00-07:00",
				"url": "https://therealadam.com/2022/12/31/best-david-lee.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/29/best-of.html",
				"title": "Best of 2022",
				"content_html": "<p>Television: <em>Severance</em> (Apple TV), <em>Andor</em> (Disney+)</p>\n<p>Movie: <em>Everything Everywhere All At Once</em></p>\n<p>Music: deep dives into Carly Simon, Nina Simone, J Dilla</p>\n<p>Book: <em>Player Piano</em> by Kurt Vonnegut</p>\n<p>Blog: <a href=\"https://seantcollins.com/category/roadhouse/page/1\">Pain Don&rsquo;t Hurt</a> (a 365 day series of short essays on <em>Roadhouse</em>)</p>\n<p>By my calculations, I managed to write about fifty pages between my blogs this year. That’s about double what I wrote in 2021, so I’m pretty happy with where I ended up here! 💪</p>\n<p>My best writing this year, in my opinion:</p>\n<ul>\n<li><a href=\"https://short.therealadam.com/2022/12/01/an-ideal-weekend.html\">An ideal weekend</a></li>\n<li><a href=\"https://therealadam.com/2022/05/15/the-paradox-of-producing-process/\">The paradox of process</a></li>\n<li><a href=\"https://therealadam.com/2022/07/11/leadership-keywords/\">Leadership keywords</a></li>\n<li><a href=\"https://therealadam.com/2022/07/18/perspective-you-want-it/\">Perspective, you want it</a></li>\n<li><a href=\"https://therealadam.com/2022/12/27/think-your-thoughts/\">Think your thoughts</a></li>\n</ul>\n",
				"content_text": "Television: *Severance* (Apple TV), *Andor* (Disney+)\n\nMovie: *Everything Everywhere All At Once*\n\nMusic: deep dives into Carly Simon, Nina Simone, J Dilla\n\nBook: *Player Piano* by Kurt Vonnegut\n\nBlog: [Pain Don't Hurt](https://seantcollins.com/category/roadhouse/page/1) (a 365 day series of short essays on _Roadhouse_)\n\nBy my calculations, I managed to write about fifty pages between my blogs this year. That’s about double what I wrote in 2021, so I’m pretty happy with where I ended up here! 💪 \n\nMy best writing this year, in my opinion:\n\n- [An ideal weekend](https://short.therealadam.com/2022/12/01/an-ideal-weekend.html)\n- [The paradox of process](https://therealadam.com/2022/05/15/the-paradox-of-producing-process/)\n- [Leadership keywords](https://therealadam.com/2022/07/11/leadership-keywords/)\n- [Perspective, you want it](https://therealadam.com/2022/07/18/perspective-you-want-it/)\n- [Think your thoughts](https://therealadam.com/2022/12/27/think-your-thoughts/)\n",
				"date_published": "2022-12-29T10:48:48-07:00",
				"url": "https://therealadam.com/2022/12/29/best-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/27/classical-music-that.html",
				"title": "Classical music that is terribly edited in commercials",
				"content_html": "<ul>\n<li>&ldquo;Also Sprach Zarathustra&rdquo;, Richard Strauss, the opening</li>\n<li>&ldquo;Symphony No. 6&rdquo;, Beethoven</li>\n<li>the rest of the Western classical music canon</li>\n</ul>\n",
				"content_text": "*  \"Also Sprach Zarathustra\", Richard Strauss, the opening\n*  \"Symphony No. 6\", Beethoven\n*  the rest of the Western classical music canon\n",
				"date_published": "2022-12-27T12:00:00-07:00",
				"url": "https://therealadam.com/2022/12/27/classical-music-that.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/27/think-your-thoughts.html",
				"title": "Think your thoughts",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>We live in the most amazing time for ideas. They’re all over the place. It’s never been easier to share them, and indeed they are shared at a phenomenal pace<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>It’s so easy to find ideas that it’s a little difficult to squeeze our ideas into the noise. Plenty of folks will tell you how to “build an audience”, but I want to make it personal. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><em>Build an audience with yourself!</em> </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Make room for <em>your</em> thoughts to exist in <em>your</em> head despite all the noise that exists in our modern world.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>1. Clear mornings</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I’m a morning person. I do my best work early in the day. Look at my calendar, you’ll see this. One giant, defensive block to focus in the morning and get stuff done. Please — do not schedule me in the morning<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>However, I’ve come to think there’s more to a good morning than a <strong>clear schedule</strong>. Having a <strong>clear mind</strong>, with stillness and lack of lingering stressors, helps a lot! If I wake up with something bouncing around in my head, seize it or solve it. Write it down to think it through or solve tension<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup> my brain has dwelled on overnight.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Going deeper into a <strong>clear mind</strong> reveals <strong>the absence of others</strong>. A truly spectacular morning of creativity correlates to (almost) exclusively thinking my thoughts. My ideas in my head<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup> — great! Someone else’s idea, via social media, television, books; promising, but likely not as good.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>2. Attention machines</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Among books, television, podcast, radio, etc., ideas via social media are particularly hard to avoid. I have to put a lot of discipline/energy into “don’t open socials, chats, emails, news, etc.” before 11:30am lest another idea trample over <em>my</em> idea. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Modern social media has evolved, in form and function, to bypass the smart part of our brains and go straight for the emotional and often irrational part. It’s the upsetting and frustrating ideas that stick with me when I use social media. Rarely do I open my laptop, read social media for a few minutes until a good idea comes up, and then close the laptop to go think about it. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The doom-scroll demands more scroll.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The upside is, we may <em>also</em> live in a moment where the abundance of ideas surfaced by attention machines comes into balance as alternatives to hyper-scaled social networks come into play. I’m hopeful that to a smaller extent, Robin Sloan’s words on <a href=\"https://www.robinsloan.com/lab/lost-thread/\">de-leveraging from Twitter</a> will start to ring true as Twitter, in particular, fades from prominence:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>The speed with which Twitter recedes in your mind will shock you. Like a demon from a folktale, the kind that only gains power when you invite it into your home, the platform melts like mist when that invitation is&nbsp;rescinded.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":2} -->\n<h2>3. No retreat</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The previous is not to imply that attention machines aren’t useful! I don’t want to <a href=\"https://studio.ribbonfarm.com/p/against-waldenponding\">Waldenpond</a> or go <a href=\"https://www.nytimes.com/2022/12/15/style/teens-social-media.html\">full digital luddite</a>.  When I squint at it with optimism, some forms of social media look like a networked/distributed system attempting to reach a consensus<sup><a id=\"ffn5\" href=\"#fn5\" class=\"footnote\">5</a></sup>. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>There are less intense attention machines that aren’t built around hyper-tuned engagement loops. Basically anything where I have a list of things to watch/read/enjoy is an attention machine: a Netflix watch list, YouTube subscriptions, Substack subscriptions, and the humble/old RSS reader. These don’t demand that I stay in a loop, thinking other people’s thoughts and consuming the surrounding ads. Which is useful because I <em>want</em> to get other people’s thoughts, but only on my terms.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I find that my thoughts are more interesting if I prime them with idea from <em>specific</em> authors via various primary sources, social networks and otherwise. It’s thrilling to discover new scenes, folks self-organizing into web-rings and networks and chats to think about or share the commonality and challenge of their work or hobby. Having <em>that</em> kind of energy bouncing around in my head tends to improve my ideas rather than dilute them like hyper-scaled social networks might.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Bottom line: keep using the web to find fascinating people and scenes, participate in a few of them.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>4. Seize your thoughts</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I return to <a href=\"https://randsinrepose.com/archives/a-precious-hour/\">A Precious Hour</a> from Rands in Repose, a lot:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Each day I blocked off a precious hour to build something.</p><p>Every day. One hour. No matter what.</p><p>Every day? Yup. Including weekends.</p><p>An hour? Yup, 60 full minutes. More if I can afford it.</p><p>Doing what? The definition of “building a thing” is loose. All I know is that I get rid of my to-do list, I tuck the iPhone safely away, and if there is a door, I close it. Whether it’s an hour of <em>Choose your</em>own<em>adventure</em> Wikipedia research, an intense writing session, or endlessly tinkering with the typography on the site, it’s an hour well spent.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Make the most of the mornings (afternoons, evenings, whenever it is for you). Work the thoughts I find compelling, not merely upsetting or prevalent. Share it with interesting people. <em>That’s</em> how an exciting life of thinking my own ideas happens<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">For better or worse! 😬🤷 <a href=\"#ffn1\">&#8617;</a></li>\n\t<li id=\"fn2\">This is as much a message to myself as anyone else. Too many times I’ve scheduled an appointment in the morning thinking “surely it will be fine this time” and surely enough current-me regrets the decisions of past-me. <a href=\"#ffn2\">&#8617;</a></li>\n\t<li id=\"fn3\">Usually: think it through by writing it down. <a href=\"#ffn3\">&#8617;</a></li>\n\t<li id=\"fn4\">What a concept! <a href=\"#ffn4\">&#8617;</a></li>\n\t<li id=\"fn5\">See also: <a href=\"https://studio.ribbonfarm.com/p/graph-minds-notebook\">Graph Minds</a>. <a href=\"#ffn5\">&#8617;</a></li>\n\t<li id=\"fn6\">I think! <a href=\"#ffn6\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2022-12-27T10:16:11-07:00",
				"url": "https://therealadam.com/2022/12/27/think-your-thoughts.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/21/driverless-crocodile-nostalgia.html",
				
				"content_html": "<p>Driverless Crocodile, <a href=\"https://www.driverlesscrocodile.com/sustainability-and-change/nostalgia-revisited/\">Nostalgia Revisited</a>:</p>\n<blockquote>\n<p>Nostalgia: a kind of homesickness for the past.</p>\n<p>Another way of putting it: the longing you will have in future for the places and people around you now.</p>\n</blockquote>\n<p>Time&rsquo;s arrow is a hell of a thing.</p>\n",
				"content_text": "Driverless Crocodile, [Nostalgia Revisited](https://www.driverlesscrocodile.com/sustainability-and-change/nostalgia-revisited/):\n\n> Nostalgia: a kind of homesickness for the past.\n> \n> Another way of putting it: the longing you will have in future for the places and people around you now.\n\nTime's arrow is a hell of a thing.\n",
				"date_published": "2022-12-21T07:07:27-07:00",
				"url": "https://therealadam.com/2022/12/21/driverless-crocodile-nostalgia.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/06/top-of-mind.html",
				"title": "Top of Mind No. 2",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><strong>How I work</strong>: what might “pairing” with a <a href=\"https://chat.openai.com/chat\">language model</a>-based assistant (e.g. GPT-3) look like?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How I build</strong>: the tension between the web platform being more capable than ever versus the difficulty of standing up many kinds of “basic” applications. e.g. <a href=\"https://buildui.com\">animation</a> is better/more sophisticated than ever, but <a href=\"https://bullettrain.co\">skipping ahead with building web/database applications</a> requires expertise and a few hours to get something up and running.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>How I collaborate</strong>: encouraging teams to work in <a href=\"https://simonwillison.net/2022/Nov/26/productivity/\">issue threads</a>, thereby improving the quality of thinking (via writing) <em>and</em>  building ambient, asynchronous awareness amongst teammates.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-12-06T10:00:00-07:00",
				"url": "https://therealadam.com/2022/12/06/top-of-mind.html",
				"tags": ["Uncategorized","people:simon-willison","Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/12/01/an-ideal-weekend.html",
				"title": "An ideal weekend",
				"content_html": "<blockquote>\n<p>Nothing, nothing, nothing makеs me happy</p>\n<p>Nothing brings me nothing but joy</p>\n<p>So if you haven&rsquo;t tried nada</p>\n<p>I really think you oughta</p>\n<p>— C. Fischoeder, <em>Bob&rsquo;s Burgers</em></p>\n</blockquote>\n<p>On minor funks, needing a reset, and indeed doing nothing.</p>\n<hr>\n<p><strong>The Reset</strong>. Occasionally, the things I do stop <em>doing</em> it for me. Games, shows, books, magazines, etc. I pick them up and realize I’m bored with all of them. I require a break from my breaks.</p>\n<p>Oddly enough, taking a vacation or extended weekend with too little purpose <em>or</em> purpose too close to routine seems to generate the same response.</p>\n<p><strong>The Reset</strong> almost always involves going offline, to some extent. Not like <a href=\"https://craigmod.com/ridgeline/150/\">Craig Mod hiking</a> <a href=\"https://craigmod.com/ridgeline/116/\">through rural Japan</a><sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. It sometimes involves catching up on chores, tidying up the house, or <em>extremely</em> low-key home improvement<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>.</p>\n<p>Related: YouTube could use a function for this. “All my subscriptions &amp; recommendations aren’t doing it, we need to go weirder/normal-er”.</p>\n<p>Doing <em>absolutely</em> nothing is an option, but ends up feeling a little more hollow than free-ing.</p>\n<p>More often, rebelling against my routines and script-following tendencies works. Binge-watching, grinding a game, ignoring diet, etc. sometimes get me clear.</p>\n<hr>\n<p>The trickiest bit is when I’m in <strong>An Indefinite Funk</strong>. Hobbies seem shallow or meant to impress others or not fulfilling anymore or too much like work or too expensive/intensive to maintain.</p>\n<p>So far, I don’t have a great antidote for that. Last time it happened to me, I reverted two decades to making music, decided it still wasn’t <em>for</em> me, and went back to enjoying and sometimes studying/pontificating on music.</p>\n<p>Going offline is in some ways a luxurious and nice way to reset. We so rarely allow ourselves a moment or location of offline-ness. If you have to book a flight or <a href=\"https://www.996roadtrip.com\">outfit your Porsche 911 for camping</a>, so be it. It’s fine to just put your online devices in another room, too.</p>\n<hr>\n<p><em>Recommended</em>: do yourself an <strong>Ideal Weekend</strong> <sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote-ref\" role=\"doc-noteref\">3</a></sup>:</p>\n<ul>\n<li>Get coffee</li>\n<li>Go for a walk in a nice park</li>\n<li>Take a nap</li>\n<li>Read a book</li>\n<li>Go for a swim</li>\n<li>Stroll through the vibrant part of your town</li>\n</ul>\n<p>Any weekend that includes most of those is likely to give me a reset such that any funk that is imminent or currently occurring goes away.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>But that does sound nice!&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>I’m not a handy person. Replacing light bulbs, fixing toilet levers. Putting a new battery in the godforsaken smoke alarm at 3 AM. That’s about the extent of what I’m capable of.&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n<li id=\"fn:3\" role=\"doc-endnote\">\n<p>Your particular choices of beverage/location may vary&#160;<a href=\"#fnref:3\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "> Nothing, nothing, nothing makеs me happy\n> \n> Nothing brings me nothing but joy\n> \n> So if you haven't tried nada\n> \n> I really think you oughta\n> \n> — C. Fischoeder, _Bob's Burgers_\n\nOn minor funks, needing a reset, and indeed doing nothing.\n\n---- \n**The Reset**. Occasionally, the things I do stop _doing_ it for me. Games, shows, books, magazines, etc. I pick them up and realize I’m bored with all of them. I require a break from my breaks. \n\nOddly enough, taking a vacation or extended weekend with too little purpose _or_ purpose too close to routine seems to generate the same response.\n\n**The Reset** almost always involves going offline, to some extent. Not like [Craig Mod hiking](https://craigmod.com/ridgeline/150/) [through rural Japan](https://craigmod.com/ridgeline/116/)[^1]. It sometimes involves catching up on chores, tidying up the house, or _extremely_ low-key home improvement[^2].\n\nRelated: YouTube could use a function for this. “All my subscriptions & recommendations aren’t doing it, we need to go weirder/normal-er”.\n\nDoing _absolutely_ nothing is an option, but ends up feeling a little more hollow than free-ing.\n\nMore often, rebelling against my routines and script-following tendencies works. Binge-watching, grinding a game, ignoring diet, etc. sometimes get me clear.\n\n---- \nThe trickiest bit is when I’m in **An Indefinite Funk**. Hobbies seem shallow or meant to impress others or not fulfilling anymore or too much like work or too expensive/intensive to maintain.\n\nSo far, I don’t have a great antidote for that. Last time it happened to me, I reverted two decades to making music, decided it still wasn’t _for_ me, and went back to enjoying and sometimes studying/pontificating on music.\n\nGoing offline is in some ways a luxurious and nice way to reset. We so rarely allow ourselves a moment or location of offline-ness. If you have to book a flight or [outfit your Porsche 911 for camping](https://www.996roadtrip.com), so be it. It’s fine to just put your online devices in another room, too.\n\n---- \n_Recommended_: do yourself an **Ideal Weekend** [^3]:\n\n- Get coffee\n- Go for a walk in a nice park\n- Take a nap\n- Read a book\n- Go for a swim\n- Stroll through the vibrant part of your town\n\nAny weekend that includes most of those is likely to give me a reset such that any funk that is imminent or currently occurring goes away.\n\n[^1]:\tBut that does sound nice!\n\n[^2]:\tI’m not a handy person. Replacing light bulbs, fixing toilet levers. Putting a new battery in the godforsaken smoke alarm at 3 AM. That’s about the extent of what I’m capable of.\n\n[^3]:\tYour particular choices of beverage/location may vary\n",
				"date_published": "2022-12-01T11:00:00-07:00",
				"url": "https://therealadam.com/2022/12/01/an-ideal-weekend.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/21/one-thing-at.html",
				"title": "One thing at a time, incrementally",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://www.bennadel.com/blog/4352-only-solve-one-new-problem-at-a-time.htm\">Only Solve One New Problem At A Time</a>, Ben Nadel:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The example he gives in the episode is \"learning Golang\". Understanding how to use Golang was a new problem for the company. As such, in order to start integrating Golang into their work, they applied it in the context of an already-solved problem: sending emails. This way, Golang was the \"one thing\" they were solving—the email-sending logic already existed in Ruby; and, they just had to port it over to a new application server.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Good advice for any developer at any experience level<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The ability to focus on one concern at a time is possibly the mark of a senior developer. It takes experience to ignore other factors as noise. It takes time to learn how to avoid tripping on distractions/side-quests. Distinguishing useful, new information from distraction and noise is the mark of a focused senior developer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The trick for juniors, is they’re always learning more than one thing at a time, often on accident. They want to build a feature, but it requires a new library, <em>and</em> it requires learning the library. They went to start up my development server, but then something weird happens with Unix. It's the essential challenge of being a junior – they’re just getting started, so they’re always learning a couple of things at a time<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>If I could be so bold as to add a corollary to the rule of \"one new problem at a time\", I'd suggest that if it can't be done incrementally, don't do it. Over the last 6-years, feature flags have revolutionized the way that I work. And, a majority-stake in that change is the fact that everything I do is now built and integrated incrementally. Until you've worked this way, it's hard to even articulate why this is so powerful. But, I literally can't imagine building anything of any significance without an incremental path forward.</p>\n<!-- /wp:paragraph --></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Working incrementally: absolutely, more people should do this. Even seniors. Especially myself!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, the tables can turn. I’ve observed juniors who are more adept at working incrementally than seniors. Because they’re tripping over other tasks all the time, the junior <em>has</em> to work in smaller increments to make progress. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perversely, a senior who can see the whole feature/change in their head is sometimes tempted to push the whole thing through in one (large) change. Developers who have learned<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup> to avoid pitfalls and gotchas sometimes have to <em>relearn</em> how to work incrementally.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I speak from experience! Working incrementally is something I consciously have to work towards. Conjuring a masterpiece into existence in a fury of git pushes and one pristine pull request feels good. On net, a big bang of development is a detriment to my team. An early pull request, small tactical commits, and a write-up to describe why and how I got there are more useful to align the team and spread ideas.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Previously: <a href=\"https://therealadam.com/2021/06/01/one-priority-is-like-wind-in-the-sails/\">one priority is like wind in the sails</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>I’m looking a this sentence again, double checking it, and yes this is a global pronouncement about programming and developers and yes I think it carries its weight<a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Or even worse, accidentally learning things that <em>aren’t</em> relevant to what they’re trying to tackle. Sometime, ask me how excited I was about Tcl/Tk in 1998, arguably several years past the apex of that language/toolkit. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Often through the luck/privilege of having lots of time to practice/tinker at programming outside the job! <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2022-11-21T11:00:00-07:00",
				"url": "https://therealadam.com/2022/11/21/one-thing-at.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/15/how-i-would.html",
				"title": "How I would explain music to an alien",
				"content_html": "<p>Were I faced with an intelligence not of this earth, but one that shares our understanding of what music is/for, these are the exemplars I would hold up for them to understand our cultures through my favorites:</p>\n<ul>\n<li>Hip-hop: &ldquo;So whatcha want&rdquo;, The Beastie Boys</li>\n<li>Rock and roll: &ldquo;Highway to Hell&rdquo;, AC/DC</li>\n<li>Symphonies: &ldquo;Symphony No. 7&rdquo;, Beethoven</li>\n<li>Pop: &ldquo;Walkin' on Sunshine&rdquo;, Katrina and the Waves</li>\n<li>Jazz: “Giant Steps”, John Coltrane</li>\n<li>Funk: “Mothership Connection”, Parliament</li>\n</ul>\n",
				"content_text": "Were I faced with an intelligence not of this earth, but one that shares our understanding of what music is/for, these are the exemplars I would hold up for them to understand our cultures through my favorites:\n\n- Hip-hop: \"So whatcha want\", The Beastie Boys\n- Rock and roll: \"Highway to Hell\", AC/DC\n- Symphonies: \"Symphony No. 7\", Beethoven\n- Pop: \"Walkin' on Sunshine\", Katrina and the Waves\n- Jazz: “Giant Steps”, John Coltrane\n- Funk: “Mothership Connection”, Parliament\n",
				"date_published": "2022-11-15T06:19:01-07:00",
				"url": "https://therealadam.com/2022/11/15/how-i-would.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/13/dilla-time.html",
				"title": "Dilla Time",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><em>Dilla Time</em> is a great book for music history enthusiasts. If you’re at all interested in hip-hop, music production, or sample culture, it’s a must-read. The references to lesser-known hip-hop are worth the time investment alone.</p>\n\n<p>I saw a critique of the book saying it is a 200-page book hiding in 400 pages<a href=\"#fn:1\" id=\"fnref:1\" title=\"see footnote\" class=\"footnote\">[1]</a>. I think <em>Dilla Time</em> justifies its page count in a pleasingly clever way. The book overlays the biography of James Yancey with the innovations of J Dilla in much the same way. Chapters on Yancey and Dilla alternate, taking turns. A little bit about Yancey’s musical life, a little bit about his nonmusical life. Once I realized Dilla’s music was about overlaying ideas at odds and the book was about overlaying the man and the music, I was a little giddy and a lot jealous that I hadn’t thought of something like that.</p>\n\n<p>The book is basically two story lines: a biography of James Yancey and the story of his musical innovations and influences as J Dilla. The latter is, in a nutshell, a great explanation of how Dilla programmed electronics (drum machines, samplers, etc.) to overlay musical patterns that had not gone together previously.</p>\n\n<p>Let’s assume it’s safe to say that Stravinsky was the master of (riotously) dissonant harmonies. He put notes that should not go together right on top of each other! In the same way, we’d have to say that J Dilla was the master of wielding time in a way that was not previously accepted in musical rhythm. Stravinsky overlaid perfect fifths (good) and tritones (bad!). Dilla overlaid straight (classical) and swung rhythms (jazz) and even moved notes around the beat, to similar effect.</p>\n\n<p>The tricky thing about listening to J Dilla, as a modern listener, is that it doesn’t sound as drastic as it did fifteen years ago. Similarly, Stravinsky doesn’t sound revolutionary to our ears, one hundred years on. They both “just” sound like how music is made these days. <em>Dilla Time</em> does an outstanding job putting his innovations in context and particularly <em>visualizing</em> how his musical constructs stood apart from what came before him.</p>\n\n<p>Obviously, I enjoyed this book a lot. Check it out.</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn:1\">\n<p>To be fair, most books could stand to lose a third or more of their page count. <a href=\"#fnref:1\" title=\"return to article\" class=\"reversefootnote\">&#160;&#8617;</a></p>\n</li>\n\n</ol>\n</div>\n",
				"date_published": "2022-11-13T11:00:00-07:00",
				"url": "https://therealadam.com/2022/11/13/dilla-time.html",
				"tags": ["Music","reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/10/get-professional-value.html",
				"title": "Get professional value out of the next Twitter-like thing",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>The Bird hit another inflection point on Friday. Now, many people, <a href=\"https://short.therealadam.com/2022/11/07/mastodon-me-nd.html\">myself included</a>, are looking at alternatives or actively decamping<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup>. It was <a href=\"https://twitter.com/therealadam/status/1588627017066577922?s=20&amp;t=UgUL8r95zl_m8-SVCF9cNw\">quite a thing to experience</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Several days before, I read a <a href=\"https://twitter.com/patio11/status/1587559091131469824\">post</a> about the value one can <em>potentially</em> get out of Twitter. On one hand, it may not age well<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. Network-effects will cause Twitter to lose “value” faster than it loses daily/weekly/monthly active users. On the other hand, thinking about how I might get tremendous value out of the <em>next</em> network is a useful thought experiment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Herein, allow me to riff on how to get a surprising amount of professional value out of publishing to and participating in Twitter-like<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup> social networks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The value proposition is two-fold: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>the ability to publish into other folks' attention streams (i.e., reputation building)</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>a high-quality stream of information to adjust my own world view/model</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>On the publishing/write side: note that folks like <a href=\"https://twitter.com/patio11\">Patrick</a>, <a href=\"https://twitter.com/simonw\">Simon</a>, and <a href=\"https://twitter.com/rhein_wein/\">Laura</a> are Very Good at Twitter. They’ve been writing there for years, building a reputation. In particular, they form thoughts such that they travel and evolve well on Twitter in particular.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With a lot of practice, I could reach this level of operation. Building the reputation, of course, is about showing up consistently for months and years. A few months of rebuilding my Twitter routine and ‘practice’ and I’m out networking with the best.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In other words, use Twitter as a big professional networking tool<sup><a id=\"ffn4\" href=\"#fn4\" class=\"footnote\">4</a></sup>. Instead, the networking happens at the idea level. Contribute and participate in developing ideas and the network comes to you.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>On the read side: I'm guessing anyone who enjoyed Twitter in 2022 and gets useful signal out of it is equipped with:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>a well-curated list of mute-words<sup><a id=\"ffn5\" href=\"#fn5\" class=\"footnote\">5</a></sup></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>bespoke user lists which focus the valuable discussion and reduce the din of a global social/information network<br></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Throughout its history, Twitter was often adversarial. There’s a “main character” of the day. Many folks come solely to build them up or tear them down. Disagreeing parties come to dunk on each other. Occasionally, they directly engage, but social bubbles/fortifications are the norm.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Anyone who gets professional value out of Twitter ignores that aspect. 🤷🏻‍♂️ In particular, they are using Twitter itself (or well-considered 3rd party applications) to automate filtering out the noise<sup><a id=\"ffn6\" href=\"#fn6\" class=\"footnote\">6</a></sup>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve dabbled in setting up mute-words and curated, high-signal lists. It worked pretty well at various points in Twitter’s history, particularly in combination. Perversely, now that we’re possibly in the waning days of Twitter’s influence, I’ve got a pretty good setup for finding interesting, new-to-me ideas. Sometimes those ideas put my work, or even the world, in a better perspective. That’s valuable!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Bottom line: you get out of Twitter-like networks what you put into it. The better I write, work the network, choose your sources, and manage the flood of information, the more likely interesting/valuable things will come my way.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><!-- wp:list-item -->\n<li>I feel like this happened at least twice before, probably circa 2015 and 2018? <a href=\"#ffn1\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>This started off as a thread that ended with this caveat: “Assuming that Twitter doesn't drastically regress under New Management.” Reader, it did indeed regress. <a href=\"#ffn2\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Tumblr, Mastodon, Micro.blog, Cohost, Fediverse, etc. <a href=\"#ffn3\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Not in the way LinkedIn aims to do that around the resume.  <a href=\"#ffn4\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>I started with this <a href=\"https://robkhenderson.substack.com/p/words-you-can-mute-on-twitter-to\">list</a>, which is unfortunately paywalled now <a href=\"#ffn5\">↩</a></li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>Mastodon in particular has community conventions around content warnings and requiring consent to see upsetting images or even posts about ongoing dramas. By social convention rather than software or regulation, this makes it a much better place for human brains to hang out. <a href=\"#ffn6\">↩</a></li>\n<!-- /wp:list-item --></ol>\n<!-- /wp:list -->\n",
				"date_published": "2022-11-10T11:00:00-07:00",
				"url": "https://therealadam.com/2022/11/10/get-professional-value.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/09/currently-digging.html",
				"title": "Currently digging",
				"content_html": "<p>Listening: <a href=\"https://music.apple.com/us/playlist/afrobeat-essentials/pl.993d2301e6f446f1a64ac47e0a9d094e\">Afrobeat</a>, e.g. Fela Kuti</p>\n<p>Best musical discovery this week: an excellent Apple Music playlist <a href=\"https://music.apple.com/us/playlist/shapeshifting/pl.8994321992214b979d4885e9a4463f11\">Shapeshifting</a>, catalogs jazz fusion with indie, hip-hop, electronic; all the modern genres</p>\n<p>Watching: Jon Hamm easily steps into the title character of an apparent Fletch reboot in <em>Confess, Fletch</em>; sharp humor, well written, way better than I expected!</p>\n<p>Playing: <a href=\"https://www.marvelsnap.com\">Marvel SNAP</a> - every few years, I end up playing a card game for a few months 🤷🏻‍♂️</p>\n<p>Reading: Rhodes/<em>The Making of the Atomic Bomb</em> + Gleick/<em>Genius</em> + Wellerstein/<em>Restricted Data: The History of Nuclear Secrecy in the United States</em> - I’m trying reading in clusters. It’s slow going, but I’ve wanted to go deeper on the Manhattan Project for years. Now’s the time!</p>\n<p>Last Bob&rsquo;s episode watched: “Full bars”</p>\n<blockquote>\n<p>I&rsquo;m rapper slash actor Queen Latifah in her U.N.I.T.Y. phase.</p>\n<p>&ndash; Gene in Halloween costume</p>\n</blockquote>\n",
				"content_text": "Listening: [Afrobeat](https://music.apple.com/us/playlist/afrobeat-essentials/pl.993d2301e6f446f1a64ac47e0a9d094e), e.g. Fela Kuti\n\nBest musical discovery this week: an excellent Apple Music playlist [Shapeshifting](https://music.apple.com/us/playlist/shapeshifting/pl.8994321992214b979d4885e9a4463f11), catalogs jazz fusion with indie, hip-hop, electronic; all the modern genres\n\nWatching: Jon Hamm easily steps into the title character of an apparent Fletch reboot in _Confess, Fletch_; sharp humor, well written, way better than I expected!\n\nPlaying: [Marvel SNAP](https://www.marvelsnap.com) - every few years, I end up playing a card game for a few months 🤷🏻‍♂️\n\nReading: Rhodes/_The Making of the Atomic Bomb_ + Gleick/_Genius_ + Wellerstein/_Restricted Data: The History of Nuclear Secrecy in the United States_ - I’m trying reading in clusters. It’s slow going, but I’ve wanted to go deeper on the Manhattan Project for years. Now’s the time!\n\nLast Bob's episode watched: “Full bars”\n\n> I'm rapper slash actor Queen Latifah in her U.N.I.T.Y. phase. \n> \n> -- Gene in Halloween costume\n",
				"date_published": "2022-11-09T07:00:00-07:00",
				"url": "https://therealadam.com/2022/11/09/currently-digging.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/07/updating-eisenhower-on.html",
				"title": "Updating Eisenhower on planning",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://therealadam.com/2021/05/08/planning-focuses-our-ideas/\">Previously</a>: a long time ago, Dwight Eisenhower <em>probably</em> said something to the effect of: “Plans are useless, but planning is essential”.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Today, software development (and knowledge work writ large) are largely about speed in the service of <em>more</em>. Iterate faster, ask more questions, get more feedback, deliver more often. Success is less likely about having a good or well-formed idea from the outset, and more about how the idea evolves in the hands of people/customers.<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup></p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><a href=\"https://twitter.com/therealadam/status/1588576859972722690?s=61&amp;t=2e9qBQ9UK7wy2xtoG7ddBA\">Let’s update Eisenhower’s insight</a> on planning to harmonize with <em>speed and quantity of iteration</em>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><strong>Static plans are useless, but dynamic plans, developed and iterated as information arrives, are the essence of leadership.</strong></p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>You have to plan. Stopping to think a multi-week project through isn't Waterfall or a slow, bureaucratic process. It's how you get your head into a project.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Lacking a plan isn’t an option<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup>. If you choose not to have a plan, you’ll likely end up part of <em>someone else’s plan</em>. Their plan may not have the same outcomes or parameters in mind as you do. Better to have a plan.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Planning with your team is how you get everyone aligned and pulling in the same direction. The worst cases for a plan, that it’s tragically incomplete or wholly invalid, have a silver lining wherein the team that plans together pulls together. In the best case, you’ve front-loaded a bunch of coordination and collaboration, allowing teammates can work autonomously and efficiently.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The initial plan you or your team come up with is very much a rough draft. Surely risks will make themselves known and areas of unknown complexity/scope will present themselves. Don't worry about rigorously adhering to the plan once you're a few weeks into the project. Iterate and add to the plan until you’ve done all the useful work, and it's time to start planning the next project.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li id=\"fn1\">There is something to say about slowing down, seeking quality at every turn, and delivering a great, monolithic thing. Usually that involves some combination of internal iteration, auteur mindset, a strong creative scene, or harnessing lightning in a bottle. Everyone <em>wants</em> to fall in this category but <em>counting</em> on that is an unhedged risk. <a href=\"#ffn1\">&#8617;</a></li>\n\t<li id=\"fn2\">With apologies to Rush: “If you choose not to decide, you still have made a choice”. <a href=\"#ffn2\">&#8617;</a></li>\n</ol><!-- /wp:list -->\n",
				"date_published": "2022-11-07T11:10:00-07:00",
				"url": "https://therealadam.com/2022/11/07/updating-eisenhower-on.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/07/mastodon-me-nd.html",
				"title": "Mastodon \u0026 Me, 2nd Edition",
				"content_html": "<p>A few years ago, I set up a Mastodon account on a now-defunct instance. It didn’t scare me away, is kinda neat in some ways, the Bird has gone chaotic, and so I’m at it again. Like many folks the past few days, I’m setting up a Mastodon presence mostly from scratch.</p>\n<p>If you’re on the fence about Mastodon, here’s how to speed-run it:</p>\n<ul>\n<li>skim <a href=\"https://simonwillison.net/2022/Nov/5/mastodon/\">Simon Willison’s post</a> and follow as many links as you like</li>\n<li>find an instance (i.e. a community/<a href=\"https://twitter.com/garius/status/1588827788261601280\">home-room</a>) that suits you and join it</li>\n<li>use <a href=\"https://pruvisto.org/debirdify/\">Debirdify</a> to find and follow folks who have advertised a Mastodon presence</li>\n<li>start posting to Mastodon; ideally, get as weird as your web presence was before global social networks were a thing</li>\n</ul>\n<p>This brings my web presence to at least four interesting locales. Which raises the question, “hey Adam, why do you have so many websites”. Herein, I will answer that with the question they’re intended to answer 🧠 👴🏻:</p>\n<ul>\n<li><a href=\"https://therealadam.com\">My original-ish blog</a> (<a href=\"https://therealadam.com/feed/\">RSS</a>), answering “hey Adam, what are you thinking about or building?”</li>\n<li><a href=\"https://short.therealadam.com\">This blog</a> (<a href=\"https://short.therealadam.com/feed.xml\">RSS</a>, <a href=\"https://micro.blog/adam@short.therealadam.com\">@adam@short.therealadam.com</a>), answering “hey Adam, what’s currently intriguing you?”</li>\n<li><a href=\"https://ruby.social/web/@therealadam\">Mastodon</a> (<a href=\"%20https://ruby.social/@therealadam.rss\">RSS</a>, @therealadam@ruby.social), answering “hey Adam, tell me your best one-liners and weirdest hot-takes?”</li>\n<li><a href=\"https://twitter.com/therealadam\">Twitter</a>, answering “hey Adam, what are you thinking about, but in a punchier format?”</li>\n</ul>\n",
				"content_text": "A few years ago, I set up a Mastodon account on a now-defunct instance. It didn’t scare me away, is kinda neat in some ways, the Bird has gone chaotic, and so I’m at it again. Like many folks the past few days, I’m setting up a Mastodon presence mostly from scratch.\n\nIf you’re on the fence about Mastodon, here’s how to speed-run it:\n\n- skim [Simon Willison’s post](https://simonwillison.net/2022/Nov/5/mastodon/) and follow as many links as you like\n- find an instance (i.e. a community/[home-room](https://twitter.com/garius/status/1588827788261601280)) that suits you and join it\n- use [Debirdify](https://pruvisto.org/debirdify/) to find and follow folks who have advertised a Mastodon presence\n- start posting to Mastodon; ideally, get as weird as your web presence was before global social networks were a thing\n\nThis brings my web presence to at least four interesting locales. Which raises the question, “hey Adam, why do you have so many websites”. Herein, I will answer that with the question they’re intended to answer 🧠 👴🏻:\n\n- [My original-ish blog](https://therealadam.com) ([RSS](https://therealadam.com/feed/)), answering “hey Adam, what are you thinking about or building?”\n- [This blog](https://short.therealadam.com) ([RSS](https://short.therealadam.com/feed.xml), [@adam@short.therealadam.com](https://micro.blog/adam@short.therealadam.com)), answering “hey Adam, what’s currently intriguing you?”\n- [Mastodon](https://ruby.social/web/@therealadam) ([RSS](%20https://ruby.social/@therealadam.rss), @therealadam@ruby.social), answering “hey Adam, tell me your best one-liners and weirdest hot-takes?”\n- [Twitter](https://twitter.com/therealadam), answering “hey Adam, what are you thinking about, but in a punchier format?”\n",
				"date_published": "2022-11-07T06:39:03-07:00",
				"url": "https://therealadam.com/2022/11/07/mastodon-me-nd.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/11/06/sketching-yields-quantity.html",
				"title": "Sketching yields quantity yields quality",
				"content_html": "<p><a href=\"https://www.ableton.com/en/blog/the-art-of-sketching-strategies-for-getting-started/\">The Art of Sketching: Strategies for Getting Started</a>:</p>\n<blockquote>\n<p>Edouard Manet, the French modernist painter, once gave a still-life painting lesson to another French impressionist, Eva Gonzales. His directions for capturing the moment could be taken as instruction for sketching in any creative discipline; “Get it down quickly. Don’t worry about the background. Just go for the tonal values. See?”</p>\n</blockquote>\n<p>It’s about making music (ostensibly with Ableton), but applies to any creative endeavor. Coding, writing, whatever!</p>\n<blockquote>\n<p>Sketching with regularity can help you let go of the pressure of perfectionism, and arrive at a place of more casual creativity. Simply start, then sift through your sketches to find the gems later. Raúl Sotomayor has found that aiming for quantity tends to result in quality ideas to build from; “I used to make a beat every morning, spending 10 minutes to an hour, and then go on with my day. That was really helpful, because at the end of a week, I&rsquo;ll have seven beats and most of the time, at least one of them would be useful.”</p>\n</blockquote>\n<p>As a creative principle, “quantity creates quality” has served me well over the past several years. You can’t create quality if you don’t have 1) a starting point and 2) freedom to throw away the lowest quality 90% of the work!</p>\n",
				"content_text": "[The Art of Sketching: Strategies for Getting Started](https://www.ableton.com/en/blog/the-art-of-sketching-strategies-for-getting-started/):\n\n> Edouard Manet, the French modernist painter, once gave a still-life painting lesson to another French impressionist, Eva Gonzales. His directions for capturing the moment could be taken as instruction for sketching in any creative discipline; “Get it down quickly. Don’t worry about the background. Just go for the tonal values. See?” \n\nIt’s about making music (ostensibly with Ableton), but applies to any creative endeavor. Coding, writing, whatever!\n\n> Sketching with regularity can help you let go of the pressure of perfectionism, and arrive at a place of more casual creativity. Simply start, then sift through your sketches to find the gems later. Raúl Sotomayor has found that aiming for quantity tends to result in quality ideas to build from; “I used to make a beat every morning, spending 10 minutes to an hour, and then go on with my day. That was really helpful, because at the end of a week, I'll have seven beats and most of the time, at least one of them would be useful.”\n\nAs a creative principle, “quantity creates quality” has served me well over the past several years. You can’t create quality if you don’t have 1) a starting point and 2) freedom to throw away the lowest quality 90% of the work!\n",
				"date_published": "2022-11-06T12:04:48-07:00",
				"url": "https://therealadam.com/2022/11/06/sketching-yields-quantity.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/30/certified-jams.html",
				"title": "Certified Jams",
				"content_html": "<ul>\n<li>&ldquo;Rhythm Nation&rdquo;, Janet Jackson</li>\n<li>&ldquo;Holding Out For a Hero&rdquo;, Bonnie Tyler</li>\n<li>&ldquo;Footloose&rdquo;, Kenny Loggins</li>\n<li>&ldquo;Partyman&rdquo;, Prince</li>\n</ul>\n",
				"content_text": "* \"Rhythm Nation\", Janet Jackson\n* \"Holding Out For a Hero\", Bonnie Tyler\n* \"Footloose\", Kenny Loggins\n* \"Partyman\", Prince\n",
				"date_published": "2022-10-30T17:26:04-07:00",
				"url": "https://therealadam.com/2022/10/30/certified-jams.html",
				"tags": ["Music"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/30/top-of-mind.html",
				"title": "Top of Mind No. 1",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n\n<p>Delegating: supporting teammates, delivering the right context, setting good outcomes/goals.</p>\n\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n<p>Not delegating: managing/mitigating risk, resolving unknowns. “Delegate downhill work, tackle uphill work.”</p>\n\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n<p>🤔 Compilers are at once magic and the closest thing to mechanical tools in a software developer’s experience.</p>\n\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n\n<p>✍🏻 Reflecting on using Shape Up for the past few years…</p>\n\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-10-30T17:03:45-07:00",
				"url": "https://therealadam.com/2022/10/30/top-of-mind.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/25/programming-excellence-a.html",
				"title": "Programming excellence: a small matter of practice",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><!-- wp:paragraph -->\n<p>The key is deliberative practice: not just doing it again and again, but challenging yourself with a task that is just beyond your current ability, trying it, analyzing your performance while and after doing it, and correcting any mistakes. Then repeat. And repeat again. There appear to be no real shortcuts: even Mozart, who was a musical prodigy at age 4, took 13 more years before he began to produce world-class music.</p>\n<!-- /wp:paragraph --><cite>Peter Norvig, <a href=\"https://norvig.com/21-days.html\">Teach Yourself Programming in Ten Years</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Norvig's recipe, paraphrased:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>get interested and program because it's fun and continues to be fun</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>learn by doing</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>talk with other programmers, read other programs (\"This is more important than any book or training course\")</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>work with other programmers and <em>after</em> other programmers</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>learn several languages with diverse capabilities and philosophies</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>learn the \"computer\" in \"computer science\"</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And here I am, twenty-five years in, wishing I'd practiced more 🤷🏻‍♂️😆</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-10-25T05:49:59-07:00",
				"url": "https://therealadam.com/2022/10/25/programming-excellence-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/12/currently-digging.html",
				"title": "Currently digging",
				"content_html": "<p>Obsession: Ferraris - they’re at a whole other level.</p>\n<p>Listening: Ramsey Lewis, “Japanese ambient”</p>\n<p>Watching: <em>Andor</em>, <em>She-Hulk</em></p>\n<p>Reading: <em>Welcome to the Monkey House</em> - Vonnegut short stories.</p>\n<blockquote>\n<p>I wonder now what Ernest Hemingway’s dictionary looked like, since he got along so well with dinky words that everyone can spell and truly understand.</p>\n</blockquote>\n<p>Last episode of <em>Bob’s Burgers</em> watched (again): “Bad Tina”.</p>\n<blockquote>\n<p>Mommy doesn’t get drunk, she just has fun.</p>\n</blockquote>\n",
				"content_text": "Obsession: Ferraris - they’re at a whole other level.\n\nListening: Ramsey Lewis, “Japanese ambient”\n\nWatching: _Andor_, _She-Hulk_\n\nReading: _Welcome to the Monkey House_ - Vonnegut short stories.\n\n> I wonder now what Ernest Hemingway’s dictionary looked like, since he got along so well with dinky words that everyone can spell and truly understand.\n\nLast episode of _Bob’s Burgers_ watched (again): “Bad Tina”. \n\n> Mommy doesn’t get drunk, she just has fun.\n",
				"date_published": "2022-10-12T06:06:42-07:00",
				"url": "https://therealadam.com/2022/10/12/currently-digging.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/08/write-more-coder.html",
				"title": "Write more, coder inspiration, queryable coding environments",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Simon Willison on <a href=\"https://twitter.com/simonw/status/1578018383127187461?s=12&amp;t=0y35BsMXXNIrW1xubqOwmA\">writing about one's work</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>A tip for writing more: expand your definition of completing a project (any project, no matter how small) to include writing a blog post (or README or similar) that explains that project</p><p>Without this you're skipping a relatively small step that unlocks a huge chunk of the value in the work that you have just completed!</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>This advice goes for internal company work too</p><p>I set up an internal blog at a previous employer using Confluence (because it was already available and has a good-enough blogging feature), but even something as simple as a dedicated Slack channel can work well for this purpose</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>And, writing more by <a href=\"https://twitter.com/simonw/status/1578049710559936512?s=20\">lowering standards</a> 😮</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>And as always: one big secret to writing more is to lower your standards</p><p>Published but \"could have been better\" is massively more valuable than something that eternally sits in your drafts</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>One of the biggest productivity improvements I ever  made to my blogging was when I gave up on my desire to finish everything with a sparkling conclusion that ties together the whole post</p><p>Now I embrace abruptly ending when I've run out of things to say instead</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Spoiler: I’m following this advice right now! 📈</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>---</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Thorsten Ball <a href=\"https://twitter.com/thorstenball/status/1577331211067957250\">collects greatest hits</a> by <a href=\"http://steve-yegge.blogspot.com/\">Steve Yegge</a> (who coincidentally just joined Sourcegraph):</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li><a href=\"http://steve-yegge.blogspot.com/2007/06/rich-programmer-food.html\">Rich Programmer Food</a>, on compilers</li>\n\t<li><a href=\"https://gist.github.com/mrnugget/49ad3ee4043c746e42187e2820ddc2f6\">Notes from the Mystery Machine Bus</a>, on the political philosophy of software engineering</li>\n\t<li>The <a href=\"https://gist.github.com/chitchcock/1281611\">Google Platforms Rant</a></li>\n\t<li><a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Execution in the Kingdom of Nouns</a>, on the ills of typical mid-2000s Java/OO design trends</li>\n\t<li>Bonus: I had no idea <a href=\"https://www.youtube.com/user/SteveYegge\">Steve Yegge has an active YouTube channel</a>.<br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>And, on <a href=\"https://twitter.com/thorstenball/status/1576619567488475137\">books/screencasts/blogs that have influenced him most as a programmer</a>. A few that have influenced me too:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li>Destroy All Software</li>\n\t<li>PeepCode Play by Play</li>\n\t<li>Pragmatic Progammer</li>\n\t<li>Practical Object-Oriented Design in Ruby</li>\n\t<li>Agile Web Dev with Rails</li>\n\t<li>Rands in Repose</li>\n\t<li>Code Complete</li>\n\t<li>37signals' books<br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>---</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p><a href=\"https://petevilter.me/post/datalog-typechecking/\">Codebase as Database: Turning the IDE Inside Out with Datalog</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>I’ve been wondering: what if this codebase model was as queryable as a database is? What new questions would we ask of our codebases, and what new ways would we find to visualize them? Furthermore, what if the language semantics themselves — types, completions, errors, etc — were specified as queries, which were also introspectable?</p><p>I believe that the design of languages and programming environments should not just be the province of a small priesthood of elite developers. Everyone should be able to look under the hood of their IDE, and be free to push its boundaries: embed it in a different context, create a domain-specific language with rich editor support, fork an existing language to play with its semantics, etc.</p><p>The opacity of the IDE’s inner model — and the rules by which that inner model is updated — are barriers to this being a reality. For IDEs to be introspectable and hackable, we must first expose this model and these rules: we must turn the IDE inside out.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Sign me up for queryable, malleable IDEs. I like RubyMine and JetBrains' development products <em>a lot</em>. But, I often pine for the speed and low-ceremony extensibility of Sublime Text (or TextMate, back in the day). So let's through \"as easily queried as a database\" on the pile while we're at it. 😆</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>See also: Sourcegraph, language servers. (Someone in the back is yelling Lisp, the \"Freebird!\" of software development.) Furthermore, I wish <a href=\"https://www.jetbrains.com/mps/\">Jetbrains' MPS</a> was less Java-centric and more tractable.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-10-08T13:13:09-07:00",
				"url": "https://therealadam.com/2022/10/08/write-more-coder.html",
				"tags": ["Uncategorized","people:simon-willison"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/10/02/peak-aerosmith.html",
				"title": "Peak Aerosmith",
				"content_html": "<p><em>Permanent Vacation</em>, <em>Pump</em>, <em>Get a Grip</em>, <em>Nine Lives</em>. That’s an excellent run of albums. It was considered a renaissance at the time. IMO, it’s their best stuff<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>.</p>\n<p>Moreover, the peak of their MTV-generated fame. Source material for the videos that put Alicia Silverstone and Liv Tyler on the map.</p>\n<p>I’m feeling very 90’s kid right now 😆</p>\n<p>Anti-favorite: &ldquo;Jamie&rsquo;s Got a Gun&rdquo; – I&rsquo;ve heard it too many times.</p>\n<p>Favorites: “F.I.N.E”, “Hangman Jury”, “Shut up and Dance”, “Pink”.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Caveat: nostalgia&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "_Permanent Vacation_, _Pump_, _Get a Grip_, _Nine Lives_. That’s an excellent run of albums. It was considered a renaissance at the time. IMO, it’s their best stuff[^1]. \n\nMoreover, the peak of their MTV-generated fame. Source material for the videos that put Alicia Silverstone and Liv Tyler on the map.\n\nI’m feeling very 90’s kid right now 😆\n\nAnti-favorite: \"Jamie's Got a Gun\" – I've heard it too many times.\n\nFavorites: “F.I.N.E”, “Hangman Jury”, “Shut up and Dance”, “Pink”. \n\n[^1]:\tCaveat: nostalgia\n",
				"date_published": "2022-10-02T09:37:12-07:00",
				"url": "https://therealadam.com/2022/10/02/peak-aerosmith.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/09/22/the-flipping-tables.html",
				"title": "The Flipping Table(s)",
				"content_html": "<p>This is a story about a tiny toy table. Well, a couple of them.</p>\n<p>Courtney and I play pub quiz, a lot. We play with a regular group of people at a couple of venues across town. We aim to take a “podium place” home. We come up with a fresh, topical team name every week. We are a bit competitive. It’s a thing.</p>\n<p>One of our team rules is: avoid second-guessing ourselves<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>. The first reasonably confident person to provide the answer to our “quiz scribe” holds sway. Typically, they’re right or confident enough that no further discussion is needed and the answer is scribed to the answer sheet. A terrible way to run a company or government, but an okay way to run a quiz team.</p>\n<p>Occasionally, it happens, during a quiz, that two folks will feel that the answer to a question <em>must</em> or <em>must not</em> be something. For instance, there are very frequently questions on the numerically outstanding planets in our solar system. It’s almost always Jupiter or Saturn, but it’s hard to say which. “It’s Jupiter because it has a ton of moons” or “it <em>can’t</em> be Jupiter because Saturn has even more moons”! Well, given the no-second-guessing rule, now we have a pickle. Two conflicting answers, or a non-answer, and what to do about it?</p>\n<p>Regardless of how we arrive at it, we can only write one answer. This leaves the door open for us to <em>have</em> the right answer, but <em>write down</em> the wrong answer. Little indignations in jest. We are a bit competitive.</p>\n<h2 id=\"enter-the-flipping-table\">Enter the flipping table</h2>\n<p>Possibly, you’ve seen the table-flip “emoji”: (┛◉Д◉)┛彡┻━┻. It’s a shorthand for “this makes me have a big, not-good feeling” in online conversation. If not, here’s the late, great Alan Rickman “performing it”:</p>\n<p><img src=\"https://short.therealadam.com/uploads/2022/2c7201e19d.gif\" alt=\"Alan Rickman turning a table over\"></p>\n<p>That’s how it feels when you suggested the right answer and your quiz team went with the wrong answer anyway. <em>Actually</em> flipping tables would get us kicked out and banned from the venues we frequent, so that’s not an option. However, it happens, tables come in <em>all</em> sizes. Including, very tiny simulacrum of tables.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2022/1d12a90c23.png\" alt=\"This is a toy, not an actual dining set\"></p>\n<p>So one night after quiz, I scoured the internet for tiny tables that we could flip. Once I dialed in the search (there are many ways to search for “toy table” on Amazon that will not yield tables that are toys or tables that are flippable amongst polite company), a table was ordered. A few days later, thanks to the magic of just-in-time supply chain logistics<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote-ref\" role=\"doc-noteref\">2</a></sup>, we had a toy table. So it came that every night, as we were preparing for the quiz, we set out our little (toy) table on top of the (actual) table in case there was a moment of indignation.</p>\n<h2 id=\"our-reputation-precedes-us\">Our reputation precedes us</h2>\n<p>Turns out, flipping a tiny table with your finger is pretty cathartic. The tiny table got a lot of use. We really liked our tiny table.</p>\n<p>Even better, a table of adults with a tiny toy table in the center of them is a curious thing. Other teams and quiz hosts inquired about our table. We explained it, let them flip the table. People liked it.</p>\n<p>Word of our flipping table spread amongst the Austin pub-quiz community. When new hosts would fill in for our normal quiz host, they would introduce themselves and ask to see our flipping table.</p>\n<p>Our reputation for flipping tables preceded us. One could have a worse reputation!</p>\n<h2 id=\"epilogue-for-a-tiny-toy-table\">Epilogue for a tiny toy table</h2>\n<p>As is common of tiny toys delivered by a logistics machine optimized for low cost, the flipping table was not particularly strong. Eventually, we lost or broke it, I don’t remember which.</p>\n<p>In any case, a second, slightly larger and fancier flipping table was provisioned. This one even had place settings. Fast-forward a few months, it too broke. One of our quiz teammates took it upon themselves to <em>repair</em> said table. At this point, we had a very robust flipping table, and <em>some</em> of its place settings remaining.</p>\n<p>Sadly, our regular quizzing was curtailed by the pandemic, shutting down basically all bars wherein one would play pub quiz. I’m not sure where the flipping table ended up; we haven’t used it in the year since we started quizzing again.</p>\n<p>But those months we had a flipping table; glory days!</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Other rules:</p>\n<ul>\n<li>\n<p>rounds with two options for answers should have some symmetry for the first and second choice</p>\n</li>\n<li>\n<p>if the answer is numerical, there’s a good chance it’s the same as the number of the question, e.g. the answer for round 2 question 3 is probably 3</p>\n</li>\n</ul>\n&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></li>\n<li id=\"fn:2\" role=\"doc-endnote\">\n<p>Back when supply chains <em>worked</em>&#160;<a href=\"#fnref:2\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "This is a story about a tiny toy table. Well, a couple of them.\n\nCourtney and I play pub quiz, a lot. We play with a regular group of people at a couple of venues across town. We aim to take a “podium place” home. We come up with a fresh, topical team name every week. We are a bit competitive. It’s a thing.\n\nOne of our team rules is: avoid second-guessing ourselves[^1]. The first reasonably confident person to provide the answer to our “quiz scribe” holds sway. Typically, they’re right or confident enough that no further discussion is needed and the answer is scribed to the answer sheet. A terrible way to run a company or government, but an okay way to run a quiz team.\n\nOccasionally, it happens, during a quiz, that two folks will feel that the answer to a question _must_ or _must not_ be something. For instance, there are very frequently questions on the numerically outstanding planets in our solar system. It’s almost always Jupiter or Saturn, but it’s hard to say which. “It’s Jupiter because it has a ton of moons” or “it _can’t_ be Jupiter because Saturn has even more moons”! Well, given the no-second-guessing rule, now we have a pickle. Two conflicting answers, or a non-answer, and what to do about it? \n\nRegardless of how we arrive at it, we can only write one answer. This leaves the door open for us to _have_ the right answer, but _write down_ the wrong answer. Little indignations in jest. We are a bit competitive.\n\n## Enter the flipping table\nPossibly, you’ve seen the table-flip “emoji”: (┛◉Д◉)┛彡┻━┻. It’s a shorthand for “this makes me have a big, not-good feeling” in online conversation. If not, here’s the late, great Alan Rickman “performing it”:\n\n![Alan Rickman turning a table over](https://short.therealadam.com/uploads/2022/2c7201e19d.gif)\n\nThat’s how it feels when you suggested the right answer and your quiz team went with the wrong answer anyway. _Actually_ flipping tables would get us kicked out and banned from the venues we frequent, so that’s not an option. However, it happens, tables come in _all_ sizes. Including, very tiny simulacrum of tables.\n\n![This is a toy, not an actual dining set](https://short.therealadam.com/uploads/2022/1d12a90c23.png)\n\nSo one night after quiz, I scoured the internet for tiny tables that we could flip. Once I dialed in the search (there are many ways to search for “toy table” on Amazon that will not yield tables that are toys or tables that are flippable amongst polite company), a table was ordered. A few days later, thanks to the magic of just-in-time supply chain logistics[^2], we had a toy table. So it came that every night, as we were preparing for the quiz, we set out our little (toy) table on top of the (actual) table in case there was a moment of indignation.\n\n## Our reputation precedes us\nTurns out, flipping a tiny table with your finger is pretty cathartic. The tiny table got a lot of use. We really liked our tiny table.\n\nEven better, a table of adults with a tiny toy table in the center of them is a curious thing. Other teams and quiz hosts inquired about our table. We explained it, let them flip the table. People liked it.\n\nWord of our flipping table spread amongst the Austin pub-quiz community. When new hosts would fill in for our normal quiz host, they would introduce themselves and ask to see our flipping table.\n\nOur reputation for flipping tables preceded us. One could have a worse reputation!\n\n## Epilogue for a tiny toy table\nAs is common of tiny toys delivered by a logistics machine optimized for low cost, the flipping table was not particularly strong. Eventually, we lost or broke it, I don’t remember which. \n\nIn any case, a second, slightly larger and fancier flipping table was provisioned. This one even had place settings. Fast-forward a few months, it too broke. One of our quiz teammates took it upon themselves to _repair_ said table. At this point, we had a very robust flipping table, and _some_ of its place settings remaining.\n\nSadly, our regular quizzing was curtailed by the pandemic, shutting down basically all bars wherein one would play pub quiz. I’m not sure where the flipping table ended up; we haven’t used it in the year since we started quizzing again.\n\nBut those months we had a flipping table; glory days!\n\n[^1]:\tOther rules:\n\n    - rounds with two options for answers should have some symmetry for the first and second choice\n\n    - if the answer is numerical, there’s a good chance it’s the same as the number of the question, e.g. the answer for round 2 question 3 is probably 3\n\n[^2]:\tBack when supply chains _worked_\n",
				"date_published": "2022-09-22T04:57:54-07:00",
				"url": "https://therealadam.com/2022/09/22/the-flipping-tables.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/09/13/onboarding-when-you.html",
				"title": "Onboarding when you don't have access to the team",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Mitchell Hashimoto, <a href=\"https://mitchellh.com/writing/contributing-to-complex-projects\">Contributing to Complex Projects</a>: </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>The first step to understanding the internals of any project is to become a user of the project. You do not have to become an expert user, but my personal graduation criteria for this step is to try to build something real using the project, even if it is small or simple.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Analog: here's a functional area. Set it up for yourself or on your localhost. Now, make a small, well-contained change.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Learn how to build the project and get a working binary (or equivalent). Don’t bother with understanding the build system, the dependencies, etc. Just cargo cult guides, websites, whatever you need to reliably and repeatedly go from source code to runnable binary on your system.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Analog: get to the point you can run the app, run (focused) tests, and see changes in the app. Then start trying to make functional changes.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>To learn the internals, I like to use an approach I call “trace down, learn up.”</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Analog: for your first several changes, read from the top of the call stack down as far as you can. Don't try to make changes, but do try to note all the landmarks (files) you visit and how they relate to each other. Note “side quests” to investigate later as you go.\t</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Don’t be afraid of complexity. I think too many engineers look at stereotypically complex projects such as programming languages, browsers, databases, etc. as magic or as destined for higher-beings. I like to remember that all projects were started by other humans. If they could do it, I can do it too. And so can you.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>You, too, can gain enough understanding of an eight-year-old system to work on it as though you were around when some of it was written. In fact, your effort will compound: the longer you're around, the more you <em>will</em> find curious code that, it turns out, you added in the first place. 😆</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-09-13T05:22:17-07:00",
				"url": "https://therealadam.com/2022/09/13/onboarding-when-you.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/09/07/great-albums-little.html",
				"title": "Great Albums: Little Rock",
				"content_html": "<p><img src=\"https://images-na.ssl-images-amazon.com/images/I/619S7wxMacS._SX466_.jpg\" alt=\"Album cover for \\_Little Rock\\_\"></p>\n<p>Or: Texas, the Good Parts. (Despite the title!)</p>\n<p>Or: it sounds like Texas, to me. (Again, despite the title.)</p>\n<p>Hayes Carll is my favorite under-the-radar, “this is what country music should sound like” musician. Wit, remorse, nostalgia. Storytelling, quirky characters, relatable characters. Little bit of rock, little bit of western. An ideal Americana mix. It’s all there.</p>\n<p>Plus, at 40 minutes, it’s a perfect road trip selection. Always moving forward, but never long-winded.</p>\n",
				"content_text": "![Album cover for \\_Little Rock\\_](https://images-na.ssl-images-amazon.com/images/I/619S7wxMacS._SX466_.jpg)\n\nOr: Texas, the Good Parts. (Despite the title!)\n\nOr: it sounds like Texas, to me. (Again, despite the title.)\n\nHayes Carll is my favorite under-the-radar, “this is what country music should sound like” musician. Wit, remorse, nostalgia. Storytelling, quirky characters, relatable characters. Little bit of rock, little bit of western. An ideal Americana mix. It’s all there.\n\nPlus, at 40 minutes, it’s a perfect road trip selection. Always moving forward, but never long-winded.\n",
				"date_published": "2022-09-07T05:31:03-07:00",
				"url": "https://therealadam.com/2022/09/07/great-albums-little.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/08/24/an-unconference-appears.html",
				"title": "An un-conference appears",
				"content_html": "<p>I jumped into a short <a href=\"https://twitter.com/andy_matuschak/status/1561504734892023808\">un-conference organized/hosted by Andy Matuschak</a> last weekend. Within this humble Gather, I came across lots of intriguing people and energizing ideas. Some notes and a few follow-up ideas:</p>\n<p><img src=\"https://short.therealadam.com/uploads/2022/e1baddc3b8.png\" alt=\"My notes from the event\"></p>\n<p><a href=\"https://www.napkin.one\">Napkin</a> is <em>space</em> for ideas and not, it seems, about note capture as an end. Rather, it&rsquo;s about throwing ideas or quotes at the (metaphorical) wall and letting the system organize them into clusters or connections. If you like some of those idea, you organize the ideas into a linear outline and export that to whatever you like to write with.</p>\n<p><a href=\"https://ncase.me/nutshell/\">Nutshell</a> is about adding an extra dimension to documents on the web. The creator, <a href=\"https://ncase.me\">Nicky Case</a>, described it as a &ldquo;tool for expandable explanation&rdquo;. Those explanations take the form of popovers that may contain a bit of text (like a footnote/annotation), a scraped reference to another page (transclusion), or a fully interactive gizmo to explore an idea in a more tactile manner.</p>\n<p>Excitement about applying language models (e.g. GPT-3 or DALL-E) to generative creativity came up a few times. Some of the applications demoed were already using language models to augment insight or obviate manual human organization. Using models to &lsquo;read between the lines&rsquo; of captured notes/human input and generate new ideas came up as well.</p>\n<p>Dissatisfaction with some current PKM tools came up a couple times. In particular, seeking note capture or memory recall as a (customer) engagement end rather than as a means to thinking more/better thoughts. I <em>think</em> I heard a couple criticisms that some tool was &ldquo;too IT&rdquo;, but I&rsquo;m not sure I even heard it correctly or what that would even mean! 😆</p>\n<p>Overall: highly recommend seeking folks using computers to augment their ability to create and remember instead of stopping at “finally got my notes app just the way I like it”!</p>\n",
				"content_text": "I jumped into a short [un-conference organized/hosted by Andy Matuschak](https://twitter.com/andy_matuschak/status/1561504734892023808) last weekend. Within this humble Gather, I came across lots of intriguing people and energizing ideas. Some notes and a few follow-up ideas:\n\n![My notes from the event](https://short.therealadam.com/uploads/2022/e1baddc3b8.png)\n\n[Napkin](https://www.napkin.one) is _space_ for ideas and not, it seems, about note capture as an end. Rather, it's about throwing ideas or quotes at the (metaphorical) wall and letting the system organize them into clusters or connections. If you like some of those idea, you organize the ideas into a linear outline and export that to whatever you like to write with.\n\n[Nutshell](https://ncase.me/nutshell/) is about adding an extra dimension to documents on the web. The creator, [Nicky Case](https://ncase.me), described it as a \"tool for expandable explanation\". Those explanations take the form of popovers that may contain a bit of text (like a footnote/annotation), a scraped reference to another page (transclusion), or a fully interactive gizmo to explore an idea in a more tactile manner.\n\nExcitement about applying language models (e.g. GPT-3 or DALL-E) to generative creativity came up a few times. Some of the applications demoed were already using language models to augment insight or obviate manual human organization. Using models to 'read between the lines' of captured notes/human input and generate new ideas came up as well.\n\nDissatisfaction with some current PKM tools came up a couple times. In particular, seeking note capture or memory recall as a (customer) engagement end rather than as a means to thinking more/better thoughts. I _think_ I heard a couple criticisms that some tool was \"too IT\", but I'm not sure I even heard it correctly or what that would even mean! 😆\n\nOverall: highly recommend seeking folks using computers to augment their ability to create and remember instead of stopping at “finally got my notes app just the way I like it”!\n",
				"date_published": "2022-08-24T06:11:39-07:00",
				"url": "https://therealadam.com/2022/08/24/an-unconference-appears.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/08/16/very-handsome-task.html",
				"title": "Very handsome task tracking, offline and online",
				"content_html": "<p>About a year ago, I added a curiously pretentious object to my repertoire of productivity hacks. <a href=\"https://ugmonk.com/pages/analog\">Analog</a> is a) a paper productivity notation not unlike Bullet Journaling b) printed on pleasantly thick index cards and c) a bit of desk furniture to prop up the cards and store the last couple dozen of them.</p>\n<p>The idea is you write your tasks down for today/later/someday. Those tasks sit right in front of you, taunting you. You cross them off as you get stuff done. Now you’ve done a productivity!</p>\n<p>Reductionist jokes aside, it’s a fine system. The cards are printed with “Today”, “Next”, or “Someday” at the top and lines to encourage writing down several, but not too many, tasks. It’s a good way to think about organizing what you need/want to get done. As productivity systems go, it’s clear and non-invasive<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\">1</a></sup>.</p>\n<p><a href=\"https://daverupert.com/2021/02/one-month-on-analog/\">Dave Rupert uses/tried Analog</a> too and has a good take on it.</p>\n<p>Tactility is Analog’s leg up. It’s nice to start the day writing out some tasks, looking over the previous day’s cards, shuffling the cards from previous days. Even <a href=\"https://culturedcode.com/things/\">Things, the best task software</a>, can’t provide the tactile “ahhhh”-moment of crossing an item off your list. Tasteful animation, design, and haptics get close, but touching glass isn’t as good as pen and paper.</p>\n<p>That said, I’m not tempted to discard Things. It’s literally one of the best applications I’ve used, ever. That said, it’s charming to have a redundant, back-up scheme for reminding myself of the most important things to accomplish today. Analog is like having a (very handsome) back-up alarm clock to the alarm clock one <em>intends</em> to wake up to. It’s always pleasant to look at, and every so often it is the difference between an energetic day and a day played catching up.</p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr>\n<ol>\n<li id=\"fn:1\" role=\"doc-endnote\">\n<p>Many productivity schemes feel like they want to take over your life to realize their benefits. IOW, they fantastically fail the “is this sufficiently distinguishable from a cult?” test.&#160;<a href=\"#fnref:1\" class=\"footnote-backref\" role=\"doc-backlink\">&#x21a9;&#xfe0e;</a></p>\n</li>\n</ol>\n</section>\n",
				"content_text": "About a year ago, I added a curiously pretentious object to my repertoire of productivity hacks. [Analog](https://ugmonk.com/pages/analog) is a) a paper productivity notation not unlike Bullet Journaling b) printed on pleasantly thick index cards and c) a bit of desk furniture to prop up the cards and store the last couple dozen of them. \n\nThe idea is you write your tasks down for today/later/someday. Those tasks sit right in front of you, taunting you. You cross them off as you get stuff done. Now you’ve done a productivity!\n\nReductionist jokes aside, it’s a fine system. The cards are printed with “Today”, “Next”, or “Someday” at the top and lines to encourage writing down several, but not too many, tasks. It’s a good way to think about organizing what you need/want to get done. As productivity systems go, it’s clear and non-invasive[^1].\n\n[Dave Rupert uses/tried Analog](https://daverupert.com/2021/02/one-month-on-analog/) too and has a good take on it.\n\nTactility is Analog’s leg up. It’s nice to start the day writing out some tasks, looking over the previous day’s cards, shuffling the cards from previous days. Even [Things, the best task software](https://culturedcode.com/things/), can’t provide the tactile “ahhhh”-moment of crossing an item off your list. Tasteful animation, design, and haptics get close, but touching glass isn’t as good as pen and paper.\n\nThat said, I’m not tempted to discard Things. It’s literally one of the best applications I’ve used, ever. That said, it’s charming to have a redundant, back-up scheme for reminding myself of the most important things to accomplish today. Analog is like having a (very handsome) back-up alarm clock to the alarm clock one _intends_ to wake up to. It’s always pleasant to look at, and every so often it is the difference between an energetic day and a day played catching up.\n\n[^1]:\tMany productivity schemes feel like they want to take over your life to realize their benefits. IOW, they fantastically fail the “is this sufficiently distinguishable from a cult?” test.\n",
				"date_published": "2022-08-16T07:42:48-07:00",
				"url": "https://therealadam.com/2022/08/16/very-handsome-task.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/07/20/dad-rock-is.html",
				"title": "Dad rock is a beautiful tapestry",
				"content_html": "<p>Spooky dad rock - Trent Reznor</p>\n<p>Sad dad rock - the National, LCD Soundsystem</p>\n<p>Quirky dad rock - Cake</p>\n<p>Over-enthusiastic dad rock - Foo Fighters</p>\n",
				"content_text": "Spooky dad rock - Trent Reznor\n\nSad dad rock - the National, LCD Soundsystem\n\nQuirky dad rock - Cake\n\nOver-enthusiastic dad rock - Foo Fighters\n",
				"date_published": "2022-07-20T06:07:47-07:00",
				"url": "https://therealadam.com/2022/07/20/dad-rock-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/07/18/perspective-you-want.html",
				"title": "Perspective, you want it",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Perspective is the lens we view our world, work, relationships, etc. All the luck, resources, or knowledge in the world are wasted without good perspective. If we’re talking about life like it’s a role playing game character sheet, you want to have a good perspective stat/multiplier.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Some clever tricks:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li>keep the mind open and flexible to <em>other</em> perspectives; seek them out</li>\n\t<li>practice at holding many perspectives simultaneously</li>\n\t<li>know the limitations and strengths of a perspective as you navigate the world</li>\n\t<li>know when your <em>default</em> perspective makes a scenario more difficult and how to fall back to a perspective you still <em>believe</em> in</li>\n\t<li>get out of routines periodically and see if it changes how you see things</li>\n\t<li>more so, get out of your bubble; see people of a different background live their lives, reflect on what factors brought them there and how factors are different/similar for your life</li>\n\t<li>even more so, travel outside your city/state/country; axiomatically the people most different from you live in a place far away<br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>It’s often tough to gain perspective. Most of the defaults in life steer us <em>away</em> from insight. School, cliques, work, even typical travel nudge us toward seeing familiar things with similar people who live similar lives. I’m by no means an expert at breaking out of these ruts. I’m pretty enamored with my routines. Unfortunately, I don’t have a clever trick to offer here.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Julian Shapiro, <a href=\"https://www.julian.com/blog/life-planning\">What you should be working on</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>What is admirable is periodically killing your momentum to ask, Should I still be doing this?</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Michael Lopp, <a href=\"https://randsinrepose.com/books/\"><em>The Art of Leadership: Small Things, Done Well</em></a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Let others change your mind. There are more of them than you. The size of your team’s network is collectively larger than yours, so it stands to reason they have more information. Listen to that information and let others change your perspective and your decisions. Augment your obvious and non-obvious weaknesses by building a diverse team. It’s choosing the path of least resistance to build a team full of humans who agree with you. Ideas don’t get better with agreement. Ideas gather their strength with healthy discord, and that means finding and hiring humans who represent the widest possible spread of perspective and experience. Delegate more than is comfortable. The complete delegation of work to someone else on the team is a vote of confidence in their ability, which is one essential way that trust forms within a team. Letting go of doing the work is tricky, but the manager’s job isn’t doing quality work, it’s building a healthy team that does quality work at scale.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://qz.com/1178713/be-like-bill-gates-and-warren-buffett-if-youre-not-spending-5-hours-per-week-learning-youre-being-irresponsible/\">Be like Bill Gates and Warren Buffett: If you’re not spending 5 hours per week learning, you’re being irresponsible</a></p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Former president Obama perfectly explains why he was so committed to reading during his presidency in a recent New York Times interview (paywall): “At a time when events move so quickly and so much information is transmitted,” he said, reading gave him the ability to occasionally “slow down and get perspective” and “the ability to get in somebody else’s shoes.” These two things, he added, “have been invaluable to me. Whether they’ve made me a better president I can’t say. But what I can say is that they have allowed me to sort of maintain my balance during the course of eight years, because this is a place that comes at you hard and fast and doesn’t let up.”</p>\n</blockquote>\n<!-- /wp:quote -->\n",
				"date_published": "2022-07-18T05:30:13-07:00",
				"url": "https://therealadam.com/2022/07/18/perspective-you-want.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/07/13/notes-from-the.html",
				"title": "Notes from the Miles-verse Part 3 and final thoughts",
				"content_html": "<p>This ended up covering late Davis stuff. He’s basically inventing a new genre of jazz every album or two now.</p>\n<ul>\n<li><em>On the Corner</em>: Davis invents funk/soul jazz.</li>\n<li><em>A Tribute to Jack Johnson</em>: Davis invents rock/jazz fusion.</li>\n<li><em>Tutu</em>: Davis invents synth-jazz/the thing that would get distilled and warped down to New Age/Kenny G jazz in the 90s.</li>\n</ul>\n<p>There are numerous live albums! I didn’t go down the rabbit hole on this part. <em>Miles and Quincy Live at Montreux</em> features Quincy Jones and is a pretty great end-of-career retrospective.</p>\n<p>“Willie Nelson” on <em>Directions</em> is surprisingly funky.</p>\n<hr>\n<p>Overall, I could have gone for less <em>Birth of the Cool</em>-esque and more <em>Bitches Brew</em>. 🤷I like bop, but funk and fusion are more legible to my modest jazz-harmony ear.</p>\n<p>Highlights: <em>On the Corner</em>, <em>Jack Johnson</em>, <em>Tutu</em>. The last was originally planned as a Miles Davis/Prince collaboration (❗ ❗ ❗) which fell through. Still pretty good.</p>\n<p>What I’d hoped to get out of this, and indeed did, was hearing the invention of large swaths of the jazz landscape over time, album by album. In this way, Miles Davis was a singular influence on the course of music, a lot like Beethoven was.</p>\n<p>Hopefully, in my lifetime, we’ll realize another musician has come around and broadly invented entire genres of music every few albums. (I’m assuming we’ll still have albums!)</p>\n<p>Previously: <a href=\"https://short.therealadam.com/2022/05/14/notes-from-the.html\">Notes from the Miles-verse Parts 1 and 2</a>, <a href=\"https://short.therealadam.com/2021/09/11/into-the-milesverse.html\">Into the Miles-verse</a>.</p>\n",
				"content_text": "This ended up covering late Davis stuff. He’s basically inventing a new genre of jazz every album or two now.\n\n- _On the Corner_: Davis invents funk/soul jazz.\n- _A Tribute to Jack Johnson_: Davis invents rock/jazz fusion.\n- _Tutu_: Davis invents synth-jazz/the thing that would get distilled and warped down to New Age/Kenny G jazz in the 90s.\n\nThere are numerous live albums! I didn’t go down the rabbit hole on this part. _Miles and Quincy Live at Montreux_ features Quincy Jones and is a pretty great end-of-career retrospective.\n\n“Willie Nelson” on _Directions_ is surprisingly funky.\n\n---- \nOverall, I could have gone for less _Birth of the Cool_-esque and more _Bitches Brew_. 🤷I like bop, but funk and fusion are more legible to my modest jazz-harmony ear.\n\nHighlights: _On the Corner_, _Jack Johnson_, _Tutu_. The last was originally planned as a Miles Davis/Prince collaboration (❗ ❗ ❗) which fell through. Still pretty good.\n\nWhat I’d hoped to get out of this, and indeed did, was hearing the invention of large swaths of the jazz landscape over time, album by album. In this way, Miles Davis was a singular influence on the course of music, a lot like Beethoven was.\n\nHopefully, in my lifetime, we’ll realize another musician has come around and broadly invented entire genres of music every few albums. (I’m assuming we’ll still have albums!)\n\nPreviously: [Notes from the Miles-verse Parts 1 and 2](https://short.therealadam.com/2022/05/14/notes-from-the.html), [Into the Miles-verse](https://short.therealadam.com/2021/09/11/into-the-milesverse.html).\n",
				"date_published": "2022-07-13T05:30:58-07:00",
				"url": "https://therealadam.com/2022/07/13/notes-from-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/07/11/leadership-keywords.html",
				"title": "Leadership keywords",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>My current theory of leading software teams and projects has four keywords:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><strong>Trust</strong>: I assume everyone is working to get the job done. They assume I will help them get the job done. This starts off more like faith and grows into trust as teams coalesce.</li><li><strong>Autonomy</strong>: each person on the team is independently productive for a significant chunk of their day. When they make assumptions to stay unblocked, they are adept at collaborating asynchronously to verify them or correct course.</li><li><strong>Agency</strong>: each person solves the task they’re working on in a way they see fit, within the conventions shared by the team. If an interesting idea comes up outside of the those norms, anyone can pursue it such that they maintain the trust/faith of their colleagues.</li><li><strong>Support</strong>: each person knows that the team, particularly yours truly, is there to help each other. This most often manifests as pairing on troubleshooting, designing, coding, etc. Most importantly, sometimes it is sharing the load when one person is feeling overwhelmed.<br></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Support is a recent addition. I had <em>previously</em> thought that autonomy and agency were the things enabled by trust. But I’m starting to think<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> support is a crucial part of the equation too.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Without support, you’re just throwing people into the pool and telling them they can stay a-float however they like. It omits the “get good enough to swim” part, which is pretty crucial!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This kind of support is most obvious when you’re bringing someone new onto a team. But you need it throughout an individual’s tenure on your team. The people with years of deep experience and history in their head need support of a different variety.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator {\"opacity\":\"css\"} -->\n<hr class=\"wp-block-separator has-css-opacity\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p><em>Teaser:</em> I’m on the fence about adding 2-3 more words to my repertoire. There’s a lot of moving parts to leadership!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li id=\"fn1\">Largely due to onboarding people to a team/system/organization with a long history. This doesn’t happen without a larger-than-normal support effort. Perhaps that effort is amortizable over time (i.e. writing docs), but it’s still a big lift. <a href=\"#ffn1\">↩</a></li></ol>\n<!-- /wp:list -->\n",
				"date_published": "2022-07-11T05:33:10-07:00",
				"url": "https://therealadam.com/2022/07/11/leadership-keywords.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/05/16/managers-can-code.html",
				"title": "Managers can code on whatever keeps them off the critical path",
				"content_html": "<p><!-- raw HTML omitted -->Should engineering managers write code?<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The good news is that you can! The bad news is that you shouldn’t. At least not directly on your team’s codebase and not on any critical path work.<!-- raw HTML omitted --></p>\n<p>Good ideas therein! Let me emphasize one I’m particularly fond of.</p>\n<p>In my first engineering management role, I had the opportunity to go completely hands off. For a while, I found it a little off-putting. I really like solving problems with code! (I later realized leadership and management are solving problems <!-- raw HTML omitted -->with people<!-- raw HTML omitted -->, but that’s for another time.)</p>\n<p>I felt a lot better about engineering management once I figured out it gave me license to code on impractical things. When you’re an EM (the hands-off variety, not the sitting-on-the-fence variety), you have the <!-- raw HTML omitted -->opportunity<!-- raw HTML omitted --> to code on <!-- raw HTML omitted -->whatever draws your interest<!-- raw HTML omitted -->, knowing it won’t block your team.</p>\n<p>That’s a pretty rad opportunity for someone like me who’s a bit of an esoteric tinkerer.</p>\n<p>If you’re less of a tinkerer and more of a shipper or solver, even the highest functioning teams have <!-- raw HTML omitted -->some<!-- raw HTML omitted --> pile of ambitions and ideas they aren’t actively pursuing. An engineering manager can explore the frontiers on these ideas. Maybe a plan is made, research is noted, or its found the idea isn’t all that great after all. Still a win!</p>\n<p>As long as your code doesn’t create challenges or blockers for your organization: dive into it, have fun, explore the space!</p>\n",
				"content_text": "<a href=\"https://leaddev.com/skills-new-managers/should-engineering-managers-write-code\">Should engineering managers write code?</a>:\n\n<blockquote>Spending time in meetings and working through complex team relationship issues leaves you feeling more drained than energized most days. You look longingly at your team and feel a slight tinge of envy. You want to code again.\n\nThe good news is that you can! The bad news is that you shouldn’t. At least not directly on your team’s codebase and not on any critical path work.</blockquote>\n\nGood ideas therein! Let me emphasize one I&#8217;m particularly fond of.\n\nIn my first engineering management role, I had the opportunity to go completely hands off. For a while, I found it a little off-putting. I really like solving problems with code! (I later realized leadership and management are solving problems <em>with people</em>, but that&#8217;s for another time.)\n\nI felt a lot better about engineering management once I figured out it gave me license to code on impractical things. When you&#8217;re an EM (the hands-off variety, not the sitting-on-the-fence variety), you have the <em>opportunity</em> to code on <em>whatever draws your interest</em>, knowing it won&#8217;t block your team.\n\nThat&#8217;s a pretty rad opportunity for someone like me who&#8217;s a bit of an esoteric tinkerer.\n\nIf you&#8217;re less of a tinkerer and more of a shipper or solver, even the highest functioning teams have <em>some</em> pile of ambitions and ideas they aren&#8217;t actively pursuing. An engineering manager can explore the frontiers on these ideas. Maybe a plan is made, research is noted, or its found the idea isn&#8217;t all that great after all. Still a win!\n\nAs long as your code doesn&#8217;t create challenges or blockers for your organization: dive into it, have fun, explore the space!\n",
				"date_published": "2022-05-16T16:29:49-07:00",
				"url": "https://therealadam.com/2022/05/16/managers-can-code.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/05/15/the-paradox-of.html",
				"title": "The paradox of producing process",
				"content_html": "<p>The agency to create the system or process you want to work in (axiomatically?) implies you’ll rarely get to work <!-- raw HTML omitted -->in<!-- raw HTML omitted --> the system because you’re spending a lot of time working <!-- raw HTML omitted -->on<!-- raw HTML omitted --> the system by communicating/iterating/supporting it. 🤷🏻‍♂️</p>\n",
				"content_text": "The agency to create the system or process you want to work in (axiomatically?) implies you’ll rarely get to work <em>in</em> the system because you’re spending a lot of time working <em>on</em> the system by communicating/iterating/supporting it. 🤷🏻‍♂️\n",
				"date_published": "2022-05-15T14:39:15-07:00",
				"url": "https://therealadam.com/2022/05/15/the-paradox-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/05/14/notes-from-the.html",
				"title": "Notes from the Miles-verse Parts 1 and 2",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Wherein I&#8217;m listening to Miles Davis&#8217; studio albums in chronological order. Priors: I have listened to <em>Kind of Blue</em> and <em>Bitches Brew</em> a lot. I&#8217;m mostly familiar with &#8220;earl years&#8221; sort of stuff.</p>\n\n<h2 id=\"basicallybop\">Basically bop</h2>\n\n<ul>\n<li><em>Collector&#8217;s Item</em>: this album starts to sound &#8220;Idiomatically Miles Davis&#8221;. Which I guess means &#8220;rather abstract bop-vibe&#8221;.</li>\n<li><em>Bag&#8217;s Groove</em>: this is very hip.</li>\n<li><em>Cookin&#8217; with the Miles Davis Quintet</em>: I&#8217;ll take basically any version of &#8220;My Funny Valentine&#8221;, same as I will listen to any version of &#8220;Caravan&#8221;.</li>\n</ul>\n\n<p>The albums Davis made with Gil Evans are my early new-favorites. <em>Miles Ahead</em>, <em>Porgy and Bess</em>, and <em>Sketches of Spain</em> all sound more lofty, less improvised than the earlier stuff. Almost composed, classical music, not unlike some of Mingus&#8217; work.</p>\n\n<h2 id=\"verymuchnotbop\">Very much not bop</h2>\n\n<p>Getting into Davis&#8217; fusion era (1968&#8211;1991) is my big discovery. I know <em>Bitches Brew</em> is a thing, but where it fits chronologically is the missing piece. Davis entirely switching gears from bop to <em>an entirely different vibe</em> must have been as jarring as <em>Rite of Spring</em> was to Parisans. Favorites so far: <em>Filles De Kilimanjaro</em>, <em>A Tribute to Jack Johnson</em>, <em>On the Corner</em>. <em>In a Silent Way</em> is entirely different from the albums around it in this era, but I like how it&#8217;s basically a long song.</p>\n\n<p>Currently listening: <em>Circle in the Round</em>.</p>\n\n<p>Previously: <a href=\"https://short.therealadam.com/2021/09/11/into-the-milesverse.html\">Into the Miles-verse</a>.</p>\n",
				"date_published": "2022-05-14T09:10:32-07:00",
				"url": "https://therealadam.com/2022/05/14/notes-from-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/04/21/get-lost-in.html",
				"title": "Get lost in an idea",
				"content_html": "<p><a href=\"https://www.rabbitholeathon.com\">Rabbit-hole-athon</a> - it doesn’t look like an event is scheduled, but I dig the idea:</p>\n<blockquote>\n<p>Tl;dr, we are organizing a weekend long IRL rabbit-hole-athon for technologists: an intimate retreat/hackathon dedicated to reading, thinking deeply about a topic, and sharing your learnings with others.</p>\n</blockquote>\n<p>Like a hackathon or BarCamp, but with the intent to <em>focus</em> an individual&rsquo;s attention on a topic of their choosing instead of <em>diffusing</em> it. (Which is fine, on balance!)</p>\n<blockquote>\n<p>We believe that being a good builder and problem solver is rooted in being a clear thinker. Intentionally dedicating time to exploring, pursuing your curiosity, and understanding things deeply is an important part of exercising this muscle. We believe this is essential in shaping the next generation of technologists, builders, founders, and researchers.</p>\n</blockquote>\n<p>That’s a snappy manifesto! The notion of taking an afternoon/day/weekend to throw tactics to the wind and go deep on a topic is exciting. I’m already thinking about topics I could go down the rabbit hole on. 🧠</p>\n",
				"content_text": "[Rabbit-hole-athon](https://www.rabbitholeathon.com) - it doesn’t look like an event is scheduled, but I dig the idea:\n\n> Tl;dr, we are organizing a weekend long IRL rabbit-hole-athon for technologists: an intimate retreat/hackathon dedicated to reading, thinking deeply about a topic, and sharing your learnings with others.\n\nLike a hackathon or BarCamp, but with the intent to _focus_ an individual's attention on a topic of their choosing instead of _diffusing_ it. (Which is fine, on balance!)\n\n> We believe that being a good builder and problem solver is rooted in being a clear thinker. Intentionally dedicating time to exploring, pursuing your curiosity, and understanding things deeply is an important part of exercising this muscle. We believe this is essential in shaping the next generation of technologists, builders, founders, and researchers.\n\nThat’s a snappy manifesto! The notion of taking an afternoon/day/weekend to throw tactics to the wind and go deep on a topic is exciting. I’m already thinking about topics I could go down the rabbit hole on. 🧠\n",
				"date_published": "2022-04-21T05:38:46-07:00",
				"url": "https://therealadam.com/2022/04/21/get-lost-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/04/12/two-snappy-covers.html",
				"title": "Two snappy covers",
				"content_html": "<p>I saw this local band Adam’s Farm (no relation, promise) a few times when I was 15 or so. In the era of mixing bass guitar <em>out</em> of rock music (no thanks, Metallica), these fellows stood out by being having an EP where I could clearly hear <em>all</em> the instruments. It was almost 25 years later that I’d learn that “Girlfriend” in particular is a Modern Lovers cover.</p>\n<!-- raw HTML omitted -->\n<p>Sidenote: it seemed like this local band was lost to the internet until recently as well. I figured I’d ripped one of the only copies of this CD, but Adam’s Farm music appeared on YouTube recently. Fancy that!</p>\n<p>William Shatner’s cover of “Common People” is less difficult to find, but possibly equally obscure. Back in the late ’90s, Shatner did some voice overs on a Ben Folds pre-solo album <a href=\"https://en.wikipedia.org/wiki/Fear_of_Pop\"><em>Fear of Pop</em></a>. In the mid ‘00s, Folds produced William Shatner’s album of songs with tons of guests doing the singing and Shatner mostly <em>talking</em> about mortality and aging. Again, it was several years before I heard the original of “Common People”.</p>\n<!-- raw HTML omitted -->\n<p>I rather like these two covers better than the originals. So it goes with a notable cover!</p>\n",
				"content_text": "I saw this local band Adam’s Farm (no relation, promise) a few times when I was 15 or so. In the era of mixing bass guitar _out_ of rock music (no thanks, Metallica), these fellows stood out by being having an EP where I could clearly hear _all_ the instruments. It was almost 25 years later that I’d learn that “Girlfriend” in particular is a Modern Lovers cover.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/d9mYEsswDZ8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nSidenote: it seemed like this local band was lost to the internet until recently as well. I figured I’d ripped one of the only copies of this CD, but Adam’s Farm music appeared on YouTube recently. Fancy that!\n\nWilliam Shatner’s cover of “Common People” is less difficult to find, but possibly equally obscure. Back in the late ’90s, Shatner did some voice overs on a Ben Folds pre-solo album [_Fear of Pop_](https://en.wikipedia.org/wiki/Fear_of_Pop). In the mid ‘00s, Folds produced William Shatner’s album of songs with tons of guests doing the singing and Shatner mostly _talking_ about mortality and aging. Again, it was several years before I heard the original of “Common People”.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cMXhWf0vE7c\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n\nI rather like these two covers better than the originals. So it goes with a notable cover!\n",
				"date_published": "2022-04-12T05:41:28-07:00",
				"url": "https://therealadam.com/2022/04/12/two-snappy-covers.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/03/29/like-caveats-try.html",
				"title": "Like caveats? Try writing about leading teams!",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>It's tricky to write about leading software teams. Herein, reflections, not complaints, on pursuing higher software leadership truths. Many of which are riffs on <a href=\"https://kellanem.com/notes/writing-is-hard\">4 Reasons Writing About Software is Hard</a>: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Writing is actually an incredibly relevant skill for engineering leadership (and engineering in general), but it’s still hard. You can have all the insights in the world, and still struggle to convey your message or find the right audience.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>First off, writing is hard so writing about software is hard too. Developing our thoughts beyond “that sounded nice in the shower” is hard but rewarding work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's difficult to translate \"this worked\" out of the system of people, circumstances, and goals. As noted above, at one scale everything works, at another basically nothing works. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>No advice on software development is universal. From the smallest coding details to how we structure our multi-person/week projects, there are no <em>best</em> practices. There’s only “this worked/failed for us when building this particular project”. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Writing about software leadership ends up being a lot of describing the people and scenarios that led to a successful approach. The trick is that getting down to particulars about people and scenarios is either too personal to share on the internet or too specific/proprietary to make sense outside a specific organization. It’s hard to write high-quality leadership ideas without drowning in setup, hedging, or over-generic characters.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s tempting but insufficient to suggest “act as a good person would and most things will work out”. Merely acting as a good person does will not get me out of situations where individual best intentions created bad outcomes. Perhaps specifying what a good person does with enough clarity that another person can apply and/or emulate it is a laudable step. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In practice, it seems better to say “act as a good person 95% of the time but do the minimally jerk-y thing 5% of the time to cut Gordian knots created by good intention”. I’m not happy with that trade-off, but it does seem like a necessary part of leading people. I build context so I can trade accumulated trust for impact when the situation requires it. (Hopefully! I often don’t know if I was spending from a surplus or deficit of trust until much later.)</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2022-03-29T11:00:00-07:00",
				"url": "https://therealadam.com/2022/03/29/like-caveats-try.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/02/07/benchmarking-rails-apps.html",
				"title": "Benchmarking Rails apps in 5 bullets",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:list {\"ordered\":true} -->\n<ol>\n\t<li>When in doubt, measure. Twice!</li>\n\t<li>For ad-hoc/napkin estimates, I use <code>Benchmark.ms { …the code… }</code> to size up the performance of Ruby code.</li>\n\t<li>When I want to do The Science to compare approaches, I use <a href=\"https://github.com/evanphx/benchmark-ips#description\">benchmark-ips</a>. It works a lot like <code>Benchmark</code>, but does all the cold start, iteration, and math for you. It’s great, thanks <a href=\"https://twitter.com/evanphx\">Evan</a>!</li>\n\t<li>When it comes to code that interacts with databases (Postgres, ElasticSearch, HTTP APIs, Redis, etc.) it is almost always the case that one big query is far faster than queries inside a loop (e.g., N+1 queries)</li>\n\t<li>Ruby performance is often limited by creating many objects and the time it takes for the garbage collector to find/free them up afterwards. This is <em>sometimes</em> not the case in recent Ruby versions (see #1).<br></li>\n</ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Bonus useful tools:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li><a href=\"https://github.com/nevir/Bumbler\">bumbler</a> - profile loading gems from your Gemfile at application boot. In most Rails apps, there are several seconds of savings to find in lazy loading rarely loaded libraries.</li>\n\t<li><a href=\"https://github.com/brunofacca/active-record-query-trace\">active-record-query-trace</a>: shows the call-site and last few stack frames for every query in your development log. Super handy for “where is this blasted query coming from?”</li>\n</ul>\n<!-- /wp:list -->\n",
				"date_published": "2022-02-07T11:00:00-07:00",
				"url": "https://therealadam.com/2022/02/07/benchmarking-rails-apps.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/01/31/logistics-is-endless.html",
				"title": "Logistics is endless intrigue",
				"content_html": "<p>The modern marvel that moves commodities, sub-assemblies, finished product, and people across the planet is largely invisible. Except when I’m bumped from an overbooked flight. Or when I can’t buy your favorite kind of candy because the trucks to move the containers from the ships to the stores are in the wrong place. Or when one can’t build a car in Germany because semiconductor fabrication plants aren’t as elastic as some executive thought they were. Then it becomes all too apparent that the default state of transportation is, absent considerable effort and coordination, for the wheels to fly off constantly.</p>\n<p>Hence, <a href=\"https://www.lesswrong.com/posts/PHmYhE4sKnwzYgvkh/a-brief-introduction-to-container-logistics\">A Brief Introduction to Container Logistics</a> is a great primer for understanding the weird state of our world:</p>\n<blockquote>\n<p>The whole shipping process involves dozens of actors, from the exporter, through a long chain of companies who handle the container (incurring costs on behalf of the shipment), all the way to the importer. This creates a trust problem: who is responsible for the problems that arise when one part of this chain goes wrong? Some of these companies are hired by the shipping company, others by the exporter or importer, or even by a logistics company acting as a middle man. This is usually solved by some kind of chain of custody, where any problem with the container must be immediately noted and complained about by the relevant party.</p>\n</blockquote>\n<p>Adjacent: Venkatesh Rao, <a href=\"https://studio.ribbonfarm.com/p/remystifying-supply-chains\">Remystifying Supply Chains</a>:</p>\n<blockquote>\n<p>Supply chains are a new class of engineered-emergent artifact, one that includes a few other globe-spanning things like the internet, the air travel system, and low earth orbit, that exist at a level of Gaian phenomenology, terraforming, and planet-scale husbandry. We only ever catch local glimpses of these things. The wholes are too big to fit in a single human mind, and the physical embodiments are too vast to capture even on a single map, let alone in a single photograph.</p>\n<p>We have to understand these beasts, in all their evolving, learning glory, while living within their bellies. Abstract slicing and dicing of the phenomenology, via aspects like computation, circularity, and situatedness, can only get us so far. To finish the picture, we have to develop a sensitivity to how we inhabit these beasts at a human scale.</p>\n</blockquote>\n",
				"content_text": "The modern marvel that moves commodities, sub-assemblies, finished product, and people across the planet is largely invisible. Except when I’m bumped from an overbooked flight. Or when I can’t buy your favorite kind of candy because the trucks to move the containers from the ships to the stores are in the wrong place. Or when one can’t build a car in Germany because semiconductor fabrication plants aren’t as elastic as some executive thought they were. Then it becomes all too apparent that the default state of transportation is, absent considerable effort and coordination, for the wheels to fly off constantly.\n\nHence, [A Brief Introduction to Container Logistics](https://www.lesswrong.com/posts/PHmYhE4sKnwzYgvkh/a-brief-introduction-to-container-logistics) is a great primer for understanding the weird state of our world:\n\n> The whole shipping process involves dozens of actors, from the exporter, through a long chain of companies who handle the container (incurring costs on behalf of the shipment), all the way to the importer. This creates a trust problem: who is responsible for the problems that arise when one part of this chain goes wrong? Some of these companies are hired by the shipping company, others by the exporter or importer, or even by a logistics company acting as a middle man. This is usually solved by some kind of chain of custody, where any problem with the container must be immediately noted and complained about by the relevant party.\n\nAdjacent: Venkatesh Rao, [Remystifying Supply Chains](https://studio.ribbonfarm.com/p/remystifying-supply-chains):\n\n> Supply chains are a new class of engineered-emergent artifact, one that includes a few other globe-spanning things like the internet, the air travel system, and low earth orbit, that exist at a level of Gaian phenomenology, terraforming, and planet-scale husbandry. We only ever catch local glimpses of these things. The wholes are too big to fit in a single human mind, and the physical embodiments are too vast to capture even on a single map, let alone in a single photograph.\n> \n> We have to understand these beasts, in all their evolving, learning glory, while living within their bellies. Abstract slicing and dicing of the phenomenology, via aspects like computation, circularity, and situatedness, can only get us so far. To finish the picture, we have to develop a sensitivity to how we inhabit these beasts at a human scale.\n",
				"date_published": "2022-01-31T14:00:00-07:00",
				"url": "https://therealadam.com/2022/01/31/logistics-is-endless.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/01/26/beethovens-symphonies-visualized.html",
				"title": "Beethoven’s symphonies, visualized and interpreted",
				"content_html": "<p><img src=\"https://www.kennedy-center.org/globalassets/whats-on/exhibit/qs_sym7-4sh_web_600x900.jpg\" alt=\"Abstract art poster of Beethoven Symphony No. 7\"></p>\n<p>This is extremely my jam. <a href=\"https://www.kennedy-center.org/whats-on/mo-willems-beethoven-exhibit/\">Beethoven Symphonies Abstracted</a>:</p>\n<blockquote>\n<p>To accompany the National Symphony Orchestra’s Beethoven &amp; American Masters concert series, author and illustrator Mo Willems presents Beethoven Symphonies Abstracted, an exhibition of nine large-scale, painted abstractions inspired by the music and genius of Beethoven. Each large-scale work is a response to one of Beethoven’s nine symphonies, divided into panels that visually interpret each symphonic movement.</p>\n</blockquote>\n<p>(Via <a href=\"https://austinkleon.com\">Austin Kleon</a>)</p>\n<p>Previously: <a href=\"https://short.therealadam.com/2021/11/28/great-albums-beethoven.html\">my affection for symphonies seven and eight</a>, John Coltrane’s <a href=\"https://www.youtube.com/watch?v=rh6WTAHKYTc\">“Giant Steps” animated</a>.</p>\n",
				"content_text": "![Abstract art poster of Beethoven Symphony No. 7](https://www.kennedy-center.org/globalassets/whats-on/exhibit/qs_sym7-4sh_web_600x900.jpg)\n\nThis is extremely my jam. [Beethoven Symphonies Abstracted](https://www.kennedy-center.org/whats-on/mo-willems-beethoven-exhibit/):\n\n> To accompany the National Symphony Orchestra’s Beethoven & American Masters concert series, author and illustrator Mo Willems presents Beethoven Symphonies Abstracted, an exhibition of nine large-scale, painted abstractions inspired by the music and genius of Beethoven. Each large-scale work is a response to one of Beethoven’s nine symphonies, divided into panels that visually interpret each symphonic movement.\n\n(Via [Austin Kleon](https://austinkleon.com))\n\nPreviously: [my affection for symphonies seven and eight](https://short.therealadam.com/2021/11/28/great-albums-beethoven.html), John Coltrane’s [“Giant Steps” animated](https://www.youtube.com/watch?v=rh6WTAHKYTc).\n",
				"date_published": "2022-01-26T14:00:00-07:00",
				"url": "https://therealadam.com/2022/01/26/beethovens-symphonies-visualized.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/01/25/cool-things-to.html",
				"title": "Cool things to do with your spaceship besides launching billionaires",
				"content_html": "<p>Fancy some near-term imagination on the opportunities the re-commercialization of space presents us? Yes, have some! <a href=\"https://caseyhandmer.wordpress.com/2021/11/17/science-upside-for-starship/\">Science upside for Starship</a>:</p>\n<blockquote>\n<p>It is, however, a fun exercise to enumerate all the ways in which Starship and related technologies can help execute bold, ambitious missions of scientific discovery.</p>\n</blockquote>\n<p>Giant, poly-lithic space telescopes? Sure.</p>\n<blockquote>\n<p>Probably the coolest telescope concept enabled by Starship, though, is the giant segmented telescope to end all giant segmented telescopes. An unmodified Starship can deliver perhaps a dozen 8 m monolithic hexagonal free-flying segments per launch to a target location such as L2, where they self assemble, calibrate, and then focus incoming light. Over a few dozen Starship flights, a truly enormous spherical mirror section perhaps 1000 m in diameter and with a focal length of 1000 km or so can be assembled behind a free-flying sun shade, pointed in a direction of general interest.</p>\n</blockquote>\n<p>Heating (low-key terraforming) Mars with constellations of mirrors? Okay.</p>\n<blockquote>\n<p>The second is mass producing light sails on Earth, launching them into LEO, then flying them to Mars where they can lurk near Mars-Sun L2 and reflect light back at the planet, reducing heat loss during the Martian night.</p>\n</blockquote>\n<p>“Flood the zone” of our planetary neighbors with exploratory robots? As you wish.</p>\n<blockquote>\n<p>Why shouldn’t we have a dedicated orbiter, lander, rover, helicopter, and submarine on every discrete body in the solar system over, say, 100 km in diameter? Let’s build a fleet of clockwork automatons for Venus and an armada of submarines for Europa, Enceladus, and Titan. Let’s darken the Martian skies with helicopters. Let’s drive rovers across the frozen nitrogen plains of Pluto.</p>\n</blockquote>\n<p>I’m sure it’s a lot more complicated than it sounds from these pull-quotes. I’ll bet that SpaceX’s starship won’t meet some of these expectations. We will have to hold our nose or plug our ears as Musk bloviates. Despite all that, it’s exciting that folks are thinking, writing, and blogging about this and <em>some</em> of it could come to fruition in my lifetime!</p>\n",
				"content_text": "Fancy some near-term imagination on the opportunities the re-commercialization of space presents us? Yes, have some! [Science upside for Starship](https://caseyhandmer.wordpress.com/2021/11/17/science-upside-for-starship/):\n\n> It is, however, a fun exercise to enumerate all the ways in which Starship and related technologies can help execute bold, ambitious missions of scientific discovery.\n\nGiant, poly-lithic space telescopes? Sure.\n\n> Probably the coolest telescope concept enabled by Starship, though, is the giant segmented telescope to end all giant segmented telescopes. An unmodified Starship can deliver perhaps a dozen 8 m monolithic hexagonal free-flying segments per launch to a target location such as L2, where they self assemble, calibrate, and then focus incoming light. Over a few dozen Starship flights, a truly enormous spherical mirror section perhaps 1000 m in diameter and with a focal length of 1000 km or so can be assembled behind a free-flying sun shade, pointed in a direction of general interest.\n\nHeating (low-key terraforming) Mars with constellations of mirrors? Okay.\n\n> The second is mass producing light sails on Earth, launching them into LEO, then flying them to Mars where they can lurk near Mars-Sun L2 and reflect light back at the planet, reducing heat loss during the Martian night.\n\n“Flood the zone” of our planetary neighbors with exploratory robots? As you wish.  \n\n\n> Why shouldn’t we have a dedicated orbiter, lander, rover, helicopter, and submarine on every discrete body in the solar system over, say, 100 km in diameter? Let’s build a fleet of clockwork automatons for Venus and an armada of submarines for Europa, Enceladus, and Titan. Let’s darken the Martian skies with helicopters. Let’s drive rovers across the frozen nitrogen plains of Pluto.\n\nI’m sure it’s a lot more complicated than it sounds from these pull-quotes. I’ll bet that SpaceX’s starship won’t meet some of these expectations. We will have to hold our nose or plug our ears as Musk bloviates. Despite all that, it’s exciting that folks are thinking, writing, and blogging about this and _some_ of it could come to fruition in my lifetime!\n",
				"date_published": "2022-01-25T14:00:00-07:00",
				"url": "https://therealadam.com/2022/01/25/cool-things-to.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2022/01/24/great-albums-blood.html",
				"title": "Great albums: Blood Sugar Sex Magick",
				"content_html": "<p><img src=\"https://static.fanart.tv/fanart/music/8bfac288-ccc5-448d-9573-c33ea2aa5c30/albumcover/blood-sugar-sex-magik-540dda11a6d0e.jpg\" alt=\"Cover art for Blood Sugar Sex Magick\"></p>\n<p>Favorite tracks: “Suck My Kiss”, “Sir Psychosexy”, “Power of Equality”, “The Righteous &amp; the Wicked”.</p>\n<p>The essential (in my opinion) Red Hot Chili Peppers album is, for me, a few things:</p>\n<ul>\n<li>One of the first albums I heard with good bass playing (I ‘grew up’ in the age after Metallica had mixed bass guitar entirely out of their albums and many others followed suit)</li>\n<li>One of the first albums I heard that was <em>great</em> from end to end and where many of the songs flowed into each other as if played live, meant to fit together, or like they weren’t even separate songs</li>\n<li>Extremely teenage and horny, of which I was both when I first heard it</li>\n</ul>\n<p>It’s an album that has aged well for me. It was an excellent album when I first heard it, and is <em>still</em> an excellent album when I listen to it today.</p>\n<p>There are other nice qualities too: Rick Rubin’s production work. When it’s not extremely horny, it has some good lyrics. It’s rooted in the RHCP musical predecessors with intelligent awareness, not than blind copying. They are seeing further by standing on the shoulders of George Clinton, not just sitting on his shoulders for a free ride. It’s just good funk.</p>\n<p>And yes, <a href=\"https://www.youtube.com/watch?v=ZnvpU0d7vyM\">the RHCP joke in <em>The Good Place</em> is superb</a>.</p>\n",
				"content_text": "![Cover art for Blood Sugar Sex Magick](https://static.fanart.tv/fanart/music/8bfac288-ccc5-448d-9573-c33ea2aa5c30/albumcover/blood-sugar-sex-magik-540dda11a6d0e.jpg)\n\nFavorite tracks: “Suck My Kiss”, “Sir Psychosexy”, “Power of Equality”, “The Righteous & the Wicked”.\n\nThe essential (in my opinion) Red Hot Chili Peppers album is, for me, a few things:\n\n- One of the first albums I heard with good bass playing (I ‘grew up’ in the age after Metallica had mixed bass guitar entirely out of their albums and many others followed suit)\n- One of the first albums I heard that was _great_ from end to end and where many of the songs flowed into each other as if played live, meant to fit together, or like they weren’t even separate songs\n- Extremely teenage and horny, of which I was both when I first heard it\n\nIt’s an album that has aged well for me. It was an excellent album when I first heard it, and is _still_ an excellent album when I listen to it today.\n\nThere are other nice qualities too: Rick Rubin’s production work. When it’s not extremely horny, it has some good lyrics. It’s rooted in the RHCP musical predecessors with intelligent awareness, not than blind copying. They are seeing further by standing on the shoulders of George Clinton, not just sitting on his shoulders for a free ride. It’s just good funk.\n\nAnd yes, [the RHCP joke in _The Good Place_ is superb](https://www.youtube.com/watch?v=ZnvpU0d7vyM).\n",
				"date_published": "2022-01-24T12:00:00-07:00",
				"url": "https://therealadam.com/2022/01/24/great-albums-blood.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/12/31/my-favorites-of.html",
				"title": "My favorites of 2021",
				"content_html": "<p>Gotta sneak this one in under the wire, otherwise it’s just a sparkling list of things.</p>\n<h2 id=\"movies\">Movies</h2>\n<p><em>Summer of Soul</em> - Nina Simone, Stevie Wonder, Sly and the Family Stone. Heck yes.</p>\n<p><em>Dune</em> - loved the world building here and I’m willing to look past the decision to split this into two movies.</p>\n<p><em>Somewhere You Feel Free</em> - I didn’t realize <em>Wildflowers</em> was so pivotal for Tom Petty. Made me want to get in my car and listen to the whole thing, which I did and greatly enjoyed.</p>\n<h2 id=\"shows\">Shows</h2>\n<p><em>Only Murders in the Building</em> - is there a greater showbiz duo than Martin Short and Steve Martin?</p>\n<p><em>Hacks</em> - inside baseball on standup comedy plus Jean Smart is 👨‍🍳</p>\n<p><em>What We Do in the Shadows</em> - a mockumentary sitcom expanding its world, taking chances with changing things up, and absolutely nailing the landing.</p>\n<h2 id=\"albums\">Albums</h2>\n<p>Funkadelic, <em>Maggot Brain</em> - hits more emotional points than I’d ever expect from a George Clinton thing.</p>\n<p>Miles Davis, <em>Sketches of Spain</em> - nudging into Very Intellectual, nearly classical, jazz, Davis is at least as good as Mingus was at this.</p>\n<p>Prince, <em>Welcome 2 America</em> - recorded ten years ago, but it absolutely works today.</p>\n<h2 id=\"books\">Books</h2>\n<p>Neal Stephenson, <em>Cryptonomicon</em> - I finished re-reading the whole Baroque Trilogy plus this one and they surpassed my recollection of how good they are.</p>\n<p>Adrian Newey, <em>How To Build a Car</em> - a memoir on designing three decades of winning Formula 1 cars.</p>\n<p>Austin Kleon, <em>Steal Like an Artist</em> - enjoyed the whole trilogy on writing motivation.</p>\n<h2 id=\"my-best-writing\">My best writing</h2>\n<p><a href=\"https://therealadam.com/2021/11/01/dont-be-spooky/\">Don’t be spooky</a></p>\n<p><a href=\"https://therealadam.com/2021/06/12/rationalize-and-solve-doesnt-help-someone-who-is-venting/\">“Rationalize and solve” doesn’t help someone who is venting</a></p>\n<p><a href=\"https://therealadam.com/2021/06/01/one-priority-is-like-wind-in-the-sails/\">One priority is like wind in the sails</a></p>\n<p><a href=\"https://short.therealadam.com/2021/03/27/the-long-game.html\">The long game of notes</a></p>\n<h2 id=\"my-best-tweeting\">My best tweeting</h2>\n<p><a href=\"https://twitter.com/therealadam/status/1362929430054731776%0A\">On emerging from a winter storm </a></p>\n<p><a href=\"https://twitter.com/therealadam/status/1354272305732612099\">On accordions</a></p>\n<p><a href=\"https://twitter.com/therealadam/status/1456349294722789381\">Finishing is the hardest part</a></p>\n<p><a href=\"https://twitter.com/therealadam/status/1383963875679248385\">The Red Hot Chili Peppers vs. no shoes/shirt policies</a></p>\n<p><a href=\"https://twitter.com/therealadam/status/1423345008279707653\">Proof of work is a better idea for sustaining recurring meetings than for software currency</a></p>\n",
				"content_text": "Gotta sneak this one in under the wire, otherwise it’s just a sparkling list of things.\n\n## Movies\n_Summer of Soul_ - Nina Simone, Stevie Wonder, Sly and the Family Stone. Heck yes.\n\n_Dune_ - loved the world building here and I’m willing to look past the decision to split this into two movies.\n\n_Somewhere You Feel Free_ - I didn’t realize _Wildflowers_ was so pivotal for Tom Petty. Made me want to get in my car and listen to the whole thing, which I did and greatly enjoyed.\n\n## Shows\n_Only Murders in the Building_ - is there a greater showbiz duo than Martin Short and Steve Martin?\n\n_Hacks_ - inside baseball on standup comedy plus Jean Smart is 👨‍🍳\n\n_What We Do in the Shadows_ - a mockumentary sitcom expanding its world, taking chances with changing things up, and absolutely nailing the landing.\n\n## Albums\nFunkadelic, _Maggot Brain_ - hits more emotional points than I’d ever expect from a George Clinton thing.\n\nMiles Davis, _Sketches of Spain_ - nudging into Very Intellectual, nearly classical, jazz, Davis is at least as good as Mingus was at this.\n\nPrince, _Welcome 2 America_ - recorded ten years ago, but it absolutely works today.\n\n## Books\nNeal Stephenson, _Cryptonomicon_ - I finished re-reading the whole Baroque Trilogy plus this one and they surpassed my recollection of how good they are.\n\nAdrian Newey, _How To Build a Car_ - a memoir on designing three decades of winning Formula 1 cars.\n\nAustin Kleon, _Steal Like an Artist_ - enjoyed the whole trilogy on writing motivation.\n\n## My best writing\n[Don’t be spooky](https://therealadam.com/2021/11/01/dont-be-spooky/)\n\n[“Rationalize and solve” doesn’t help someone who is venting](https://therealadam.com/2021/06/12/rationalize-and-solve-doesnt-help-someone-who-is-venting/)\n\n[One priority is like wind in the sails](https://therealadam.com/2021/06/01/one-priority-is-like-wind-in-the-sails/)\n\n[The long game of notes](https://short.therealadam.com/2021/03/27/the-long-game.html)\n\n## My best tweeting\n[On emerging from a winter storm ](https://twitter.com/therealadam/status/1362929430054731776%0A)\n\n[On accordions](https://twitter.com/therealadam/status/1354272305732612099)\n\n[Finishing is the hardest part](https://twitter.com/therealadam/status/1456349294722789381)\n\n[The Red Hot Chili Peppers vs. no shoes/shirt policies](https://twitter.com/therealadam/status/1383963875679248385)\n\n[Proof of work is a better idea for sustaining recurring meetings than for software currency](https://twitter.com/therealadam/status/1423345008279707653)\n",
				"date_published": "2021-12-31T13:07:47-07:00",
				"url": "https://therealadam.com/2021/12/31/my-favorites-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/12/29/the-beatles-timeless.html",
				"title": "The Beatles 🤝 Timeless leadership lessons",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><em>The Economist</em>, <a href=\"https://www.economist.com/business/2021/12/18/the-beatles-and-the-art-of-teamwork\">The Beatles and the art of teamwork</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Take the role of Ringo, for example. When he is not actually playing, the band’s drummer spends most of his time either asleep or looking bewildered. When the other three musicians bicker, Ringo smiles beatifically. To a casual observer, he might appear dispensable. But musically, nothing works without him, and as a team member he softens conflict and bridges divides.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>More teams need Ringo(s), those who make it work without soaking up emotional energy.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>Managers who think that building <em>esprit de corps</em> requires a separate activity from work—here-comes-the-fun time, set aside for axe-throwing or gif battles or something equally ghastly—are missing a fundamental point. The highest-performing teams derive the greatest satisfaction not from each other, but from the work they do together.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The Beatles weren’t excellent due to vacationing together in India. They were exceptional because of what they built together, both because of and sometimes despite each other. So it goes with teams.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-12-29T12:00:00-07:00",
				"url": "https://therealadam.com/2021/12/29/the-beatles-timeless.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/12/28/a-more-evocative.html",
				"title": "A more evocative word for mega-corps",
				"content_html": "<p>Kevin Kelly, <a href=\"https://kk.org/thetechnium/the-third-way/\">The Third Way</a>:</p>\n<blockquote>\n<p>Huge monopolistic companies running platforms like Facebook and Amazon are not mere corporations, nor are they governments, even though they have many of the attributes of both government and corporations. They are a new third thing: platforms. We should not expect to regulate platforms like companies, nor expect them to behave like governments. We need a third category of rights and responsibilities for them.</p>\n</blockquote>\n<p>Platform-principalities. Bank-states (which, oddly enough, <a href=\"https://www.youtube.com/watch?v=ggUduBmvQ_4\">includes airlines</a>). Energy-sovereigns (British Petroleum, Exxon). Media-empires (Disney, Universal).</p>\n<p>We require a better term for companies that have grown so extraordinarily. Those like Apple that run international diplomacy programs with China. Those like Amazon or Google, that regard their employees as de-facto citizens. Those like airlines that can print a currency (in the form of loyalty programs).</p>\n<p>And, as Kelly notes, we should look at them in an entirely different way. We shouldn’t treat Amazon the same we treat a local retailer, just like we don’t treat your local HOA the same way we treat the European Union. “Platforms” is a good start, but a word that connects the tremendous influence modern mega-corps have with the power that Standard Oil or The British East India Corporation had at their apex would be even better!</p>\n",
				"content_text": "Kevin Kelly, [The Third Way](https://kk.org/thetechnium/the-third-way/):\n\n> Huge monopolistic companies running platforms like Facebook and Amazon are not mere corporations, nor are they governments, even though they have many of the attributes of both government and corporations. They are a new third thing: platforms. We should not expect to regulate platforms like companies, nor expect them to behave like governments. We need a third category of rights and responsibilities for them.\n\nPlatform-principalities. Bank-states (which, oddly enough, [includes airlines](https://www.youtube.com/watch?v=ggUduBmvQ_4)). Energy-sovereigns (British Petroleum, Exxon). Media-empires (Disney, Universal). \n\nWe require a better term for companies that have grown so extraordinarily. Those like Apple that run international diplomacy programs with China. Those like Amazon or Google, that regard their employees as de-facto citizens. Those like airlines that can print a currency (in the form of loyalty programs).\n\nAnd, as Kelly notes, we should look at them in an entirely different way. We shouldn’t treat Amazon the same we treat a local retailer, just like we don’t treat your local HOA the same way we treat the European Union. “Platforms” is a good start, but a word that connects the tremendous influence modern mega-corps have with the power that Standard Oil or The British East India Corporation had at their apex would be even better!\n",
				"date_published": "2021-12-28T10:57:41-07:00",
				"url": "https://therealadam.com/2021/12/28/a-more-evocative.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/29/great-albums-endtroducing.html",
				"title": "Great albums: Endtroducing",
				"content_html": "<p><img src=\"http://img.wennermedia.com/920-width/rs-138992-djshadow-306x306-1370036314-25baa14d-0f6a-40f0-a4db-4884a008eb69.jpg\" alt=\"Entroducing album cover\"></p>\n<p><em>Endtroducing</em> is my canonical example of a revealing album. I heard “Building Steam With a Grain of Sand” completely accidentally in a college business writing class, of all places. A fellow student used it in their presentation, ironically. Afterwards, I asked “what <em>was</em> that?!”, my mind still blown.</p>\n<p>I downloaded it and was immediately like “wow”. A whole new angle on music became apparent. I was vaguely aware that hip-hop quotes other music, but didn’t really understand sampling. I’m <em>just</em> old enough that hip-hop has always been a thing. But this was so different, like an other-worldly quote-fest. But, in a good way. A great way, even.</p>\n<p>I later learned <em>Endtroducing</em> is notable in that it was made <em>manually</em>. Ableton didn’t exist, so if you wanted to change tempos on samples, you had to pitch correct them yourself. You didn’t have to tape splice anymore, thankfully. But it was still far tricker than making this album would have been today.</p>\n<p>This album would spark many musical explorations. Mash-ups like <em>A Night at the Hip-Hopera</em>. The Roots, J Dilla, Soulquarians, and a myriad of other artists. “Building Steam With a Grain of Sand” sparked amazement, curiosity, and appetite for more music I was previously unaware of.</p>\n",
				"content_text": "![Entroducing album cover](http://img.wennermedia.com/920-width/rs-138992-djshadow-306x306-1370036314-25baa14d-0f6a-40f0-a4db-4884a008eb69.jpg)\n\n_Endtroducing_ is my canonical example of a revealing album. I heard “Building Steam With a Grain of Sand” completely accidentally in a college business writing class, of all places. A fellow student used it in their presentation, ironically. Afterwards, I asked “what _was_ that?!”, my mind still blown.\n\nI downloaded it and was immediately like “wow”. A whole new angle on music became apparent. I was vaguely aware that hip-hop quotes other music, but didn’t really understand sampling. I’m _just_ old enough that hip-hop has always been a thing. But this was so different, like an other-worldly quote-fest. But, in a good way. A great way, even.\n\nI later learned _Endtroducing_ is notable in that it was made _manually_. Ableton didn’t exist, so if you wanted to change tempos on samples, you had to pitch correct them yourself. You didn’t have to tape splice anymore, thankfully. But it was still far tricker than making this album would have been today.\n\nThis album would spark many musical explorations. Mash-ups like _A Night at the Hip-Hopera_. The Roots, J Dilla, Soulquarians, and a myriad of other artists. “Building Steam With a Grain of Sand” sparked amazement, curiosity, and appetite for more music I was previously unaware of.\n",
				"date_published": "2021-11-29T09:00:00-07:00",
				"url": "https://therealadam.com/2021/11/29/great-albums-endtroducing.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/28/great-albums-beethoven.html",
				"title": "Great albums: Beethoven Symphonies No. 7 \u0026 8",
				"content_html": "<p><img src=\"https://cps-static.rovicorp.com/3/JPG_500/MI0001/080/MI0001080790.jpg?partner=allrovi.com\" alt=\"\"></p>\n<p>These are my favorite of Beethoven’s “more approachable” symphonies. Symphony No. 9 is my favorite, but it requires a bit more context to take in. Further, it’s a solid seventy minutes of music, ramping up the difficulty of attention span.</p>\n<p>Symphony No. 7 (hereafter Seven, etc.) is my favorite outside of Nine, which is sort of its own <em>pivotal</em> thing. It’s a definitive no-skip symphony. Every movement is sublime in its own way. The first movement for its vigor and speed. The second for its solemn opening that builds and builds into a big, emotional moment. The third for its frolic. The final movement for feeling several minutes of emphatic, resolving punctuation and resolution.</p>\n<p>Symphony No. 8 has a wonderful opening. The structure and melodic quality is closer to what came <em>before</em> Beethoven’s Symphony No. 1. It sounds like a nod back to Haydn or Mozart, Beethoven’s predecessors. But the harmony and orchestration is distinctly of Beethoven. It’s a great bridge from Beethoven’s Very Good symphonies to his <em>Amazing Symphony Number 9, The One with Ode to Joy</em> (not the official title as recognized by music historians).</p>\n<p>These two symphonies fit together <em>really well</em> on CDs. So, you can find basically any conductor/ensemble you prefer performing it. I listened to the Karajan/Berlin Philharmonic version when I was playing music in high school. I’ve found this piece easy to hear little variations between conductors, so if that’s your thing, queue up a few interpretations and go hunting for little distinctions!</p>\n",
				"content_text": "![](https://cps-static.rovicorp.com/3/JPG_500/MI0001/080/MI0001080790.jpg?partner=allrovi.com)\n\nThese are my favorite of Beethoven’s “more approachable” symphonies. Symphony No. 9 is my favorite, but it requires a bit more context to take in. Further, it’s a solid seventy minutes of music, ramping up the difficulty of attention span. \n\nSymphony No. 7 (hereafter Seven, etc.) is my favorite outside of Nine, which is sort of its own _pivotal_ thing. It’s a definitive no-skip symphony. Every movement is sublime in its own way. The first movement for its vigor and speed. The second for its solemn opening that builds and builds into a big, emotional moment. The third for its frolic. The final movement for feeling several minutes of emphatic, resolving punctuation and resolution.\n\nSymphony No. 8 has a wonderful opening. The structure and melodic quality is closer to what came _before_ Beethoven’s Symphony No. 1. It sounds like a nod back to Haydn or Mozart, Beethoven’s predecessors. But the harmony and orchestration is distinctly of Beethoven. It’s a great bridge from Beethoven’s Very Good symphonies to his _Amazing Symphony Number 9, The One with Ode to Joy_ (not the official title as recognized by music historians).\n\nThese two symphonies fit together _really well_ on CDs. So, you can find basically any conductor/ensemble you prefer performing it. I listened to the Karajan/Berlin Philharmonic version when I was playing music in high school. I’ve found this piece easy to hear little variations between conductors, so if that’s your thing, queue up a few interpretations and go hunting for little distinctions!\n",
				"date_published": "2021-11-28T09:00:00-07:00",
				"url": "https://therealadam.com/2021/11/28/great-albums-beethoven.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/27/what-makes-a.html",
				"title": "What makes a great album",
				"content_html": "<p>There are four-ish kinds of great albums, in my mind:</p>\n<ol>\n<li>Pivotal albums: the artist or genre was distinctly different before and after the album came out. e.g., classical music was distinctly different after Beethoven, particularly <em>Symphony No. 9</em></li>\n<li>Revealing albums: pivotal to my perspective or knowledge of music. e.g., my understanding of hip-hop was distinctly different after I heard DJ Shadow’s <em>Endtroducing</em></li>\n<li>Consistent albums: no track justifies skipping, you can listen to the thing end to end, every time. e.g., Tom Petty’s <em>The Last DJ</em></li>\n<li>Under-rated albums: albums that are outshined by their extraordinary peers or contemporaries. Most folks know that <em>Born to Run</em> is great, and all other Springsteen albums (generally) rank below it. But that shouldn’t let otherwise excellent and out-of-sequence later albums like <em>The Rising</em> or <em>Human Touch</em> go unnoticed.</li>\n</ol>\n",
				"content_text": "There are four-ish kinds of great albums, in my mind:\n\n1. Pivotal albums: the artist or genre was distinctly different before and after the album came out. e.g., classical music was distinctly different after Beethoven, particularly _Symphony No. 9_\n2. Revealing albums: pivotal to my perspective or knowledge of music. e.g., my understanding of hip-hop was distinctly different after I heard DJ Shadow’s _Endtroducing_ \n3. Consistent albums: no track justifies skipping, you can listen to the thing end to end, every time. e.g., Tom Petty’s _The Last DJ_\n4. Under-rated albums: albums that are outshined by their extraordinary peers or contemporaries. Most folks know that _Born to Run_ is great, and all other Springsteen albums (generally) rank below it. But that shouldn’t let otherwise excellent and out-of-sequence later albums like _The Rising_ or _Human Touch_ go unnoticed.\n",
				"date_published": "2021-11-27T08:44:46-07:00",
				"url": "https://therealadam.com/2021/11/27/what-makes-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/09/the-finest-transit.html",
				"title": "The finest transit system you’ll ever find in a swamp",
				"content_html": "<p>Imagine all the busses, boats, monorails, trains, and gondolas in Disney World as (quasi-public) transit system. Then make a transit-style map of said system. It’s fun, but a little dismal once I think about it.</p>\n<p><img src=\"https://short.therealadam.com/uploads/2021/e2778c787f.jpg\" alt=\"Disney World transportation imagined as a transit map\"></p>\n<p><a href=\"https://twitter.com/grescoe/status/1450482255965691912\">Walt Disney World has significantly better transit than most cities in the US.</a></p>\n<blockquote>\n<p>America&rsquo;s fantasy world, it turns out, is a place you can get around without getting into a car.</p>\n</blockquote>\n<p>Definitely a top 10 reason (but probably not top 5) I enjoy and find Walt Disney World so intriguing.</p>\n<p>Adjacent: if the best transit system many middle/upper-class Americans will experience is a rigorously-top-down, <a href=\"https://en.wikipedia.org/wiki/Reedy_Creek_Improvement_District\">corporate quasi-state</a>, well, that’s a pretty sick burn on capitalism.</p>\n<blockquote>\n<p>“A developed country is not a place where the poor have cars. It’s where the rich use public transportation” — Gustavo Petro, Mayor of Bogotá</p>\n</blockquote>\n",
				"content_text": "Imagine all the busses, boats, monorails, trains, and gondolas in Disney World as (quasi-public) transit system. Then make a transit-style map of said system. It’s fun, but a little dismal once I think about it.\n\n![Disney World transportation imagined as a transit map](https://short.therealadam.com/uploads/2021/e2778c787f.jpg)\n\n[Walt Disney World has significantly better transit than most cities in the US.](https://twitter.com/grescoe/status/1450482255965691912)\n\n> America's fantasy world, it turns out, is a place you can get around without getting into a car.\n\nDefinitely a top 10 reason (but probably not top 5) I enjoy and find Walt Disney World so intriguing.\n\nAdjacent: if the best transit system many middle/upper-class Americans will experience is a rigorously-top-down, [corporate quasi-state](https://en.wikipedia.org/wiki/Reedy_Creek_Improvement_District), well, that’s a pretty sick burn on capitalism.\n\n> “A developed country is not a place where the poor have cars. It’s where the rich use public transportation” — Gustavo Petro, Mayor of Bogotá\n",
				"date_published": "2021-11-09T12:00:00-07:00",
				"url": "https://therealadam.com/2021/11/09/the-finest-transit.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/08/better-know-a.html",
				"title": "Better know a standard library",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://twitter.com/garrettdimon/status/1456650843965493254\">Read your current/new language’s standard library</a>. <a href=\"http://patshaughnessy.net/2021/10/23/to-learn-a-new-language-read-its-standard-library\">Highly recommended for developers of all experience levels</a>. You’ll pick up the idioms, you’ll discover something useful. You’ll laugh, you’ll cry, you’ll wonder if they’re making a sequel! </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>My favorites are <a href=\"https://gitlab.haskell.org/ghc/ghc/-/blob/master/libraries/base/Prelude.hs\"><code>prelude.hs</code></a> (which, sadly, does not seem to be the file that Haskell bootstraps itself from any more 🤔) and <a href=\"https://github.com/rubinius/rubinius/blob/master/core/enumerable.rb\">Rubinius’ implementation of <code>Enumerable</code> in Ruby</a>.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>(<a href=\"https://en.wikipedia.org/wiki/Better_Know_a_District\">The reference is from The Colbert Report</a>, which is a fun-but-dated thing to know.)</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-11-08T12:00:00-07:00",
				"url": "https://therealadam.com/2021/11/08/better-know-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/04/very-famous-white.html",
				
				"content_html": "<p>Very famous white guys from history who were not famous for, but known to bite pianos: <a href=\"https://twitter.com/jordandrsn/status/1455553728526827525\">Thomas Edison</a> and <a href=\"https://www.classicfm.com/composers/beethoven/guides/deaf-hearing-loss-composing/\">Ludwig van Beethoven</a>.</p>\n",
				"content_text": "Very famous white guys from history who were not famous for, but known to bite pianos: [Thomas Edison](https://twitter.com/jordandrsn/status/1455553728526827525) and [Ludwig van Beethoven](https://www.classicfm.com/composers/beethoven/guides/deaf-hearing-loss-composing/).\n",
				"date_published": "2021-11-04T05:45:43-07:00",
				"url": "https://therealadam.com/2021/11/04/very-famous-white.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/03/offloading-fast-operations.html",
				"title": "Offloading fast  operations in Ruby by data structure",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://noteflakes.com/articles/2021-10-05-a-compositional-approach-to-ruby-performance\">Noteflakes: A Compositional Approach to Optimizing the Performance of Ruby Apps</a> — the idea is to offload “inner-loop”-type operations from Ruby to C-extensions. The clever twist is this happens via data-structure-as-language. Ruby being Ruby, you can wrap a DSL around the data structure generation to reduce the context switch from Ruby to offloaded operations. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There’s precedent to the approach: if you squint, it’s not unlike offloading the math for computer graphics or machine learning to a GPU. That said, the speed-up is unlikely to be as dramatic. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I hope to hear more of this approach in the future!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Adjacent: <a href=\"https://twitter.com/ftrain/status/1455161248090365960?s=20\">“it’s wild how much of the 2021 programming ecosystem is declarative data structures evaluated by recursive functions.”</a></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-11-03T09:00:00-07:00",
				"url": "https://therealadam.com/2021/11/03/offloading-fast-operations.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/02/before-the-porsche.html",
				
				"content_html": "<p>Before the Porsche 911, there was the 356&hellip;and the 904. It a looker!</p>\n<p><img src=\"https://short.therealadam.com/uploads/2021/88443fc0bc.jpg\" alt=\"Porsche 904 GTS\"></p>\n<p>Back in the &rsquo;60s, <a href=\"https://www.youtube.com/watch?v=utihJ2j0f7k\">you could buy a street-legal version of Porsche&rsquo;s top racing car</a>. And just, ya know, drive it on the road! They are pretty pricey today, but at least <a href=\"https://www.roadandtrack.com/car-culture/classic-cars/news/g5929/1965-porsche-904-photo-gallery/?slide=1\">the auctions have great photos</a>.</p>\n",
				"content_text": "Before the Porsche 911, there was the 356...and the 904. It a looker!\n\n![Porsche 904 GTS](https://short.therealadam.com/uploads/2021/88443fc0bc.jpg)\n\nBack in the '60s, [you could buy a street-legal version of Porsche's top racing car](https://www.youtube.com/watch?v=utihJ2j0f7k). And just, ya know, drive it on the road! They are pretty pricey today, but at least [the auctions have great photos](https://www.roadandtrack.com/car-culture/classic-cars/news/g5929/1965-porsche-904-photo-gallery/?slide=1).\n",
				"date_published": "2021-11-02T15:21:32-07:00",
				"url": "https://therealadam.com/2021/11/02/before-the-porsche.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/11/01/dont-be-spooky.html",
				"title": "Don’t be spooky",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>It’s possibly the best advice for managers I've given so far. When you’re communicating with your team, lead with context and reassurance. Never message someone on your team, \"let's talk when you get a minute\". That's void of information and scary as heck!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have to remind myself of this when I'm rushing. It's faster to ping someone to arrange a synchronous talk than it is to write out what I need to say and cover all the bases. But that doesn’t give me license to skip <em>all</em> the context. Broad strokes are okay. An information vacuum is not okay.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Accidental spookiness invites story-crafting. Minds race. Lacking information or context, we tell stories. They often aren’t happy stories, regardless of how good your relationship with the team. We humans are better at convincing ourselves to fear something (survival instinct) than the other way around.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Avoiding spookiness reduces the chance of people telling themselves negative stories. Context and clarity counteract reading the tea leaves and world building. Even more important, it prevents people from pre-gaming the conversation. That way, they don’t prepare for a conversation that happened in their heads, instead of one that’s about to happen. (Avoiding pre-gaming is important on <em>both</em> sides of the conversation, as it turns out.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A corollary to “don’t be spooky” — <a href=\"https://randsinrepose.com/archives/say-the-hard-thing/\">deliver constructive but critical feedback</a> as close to the “original sin” as possible. Receiving feedback that you did poorly weeks after the fact is disconcerting. It can lead the recipient to wondering what <em>other</em> things they’re doing poorly but won’t hear about until later. Which leads to story-crafting, and the whole negative cycle starts a-new.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Give your team enough context to pre-game conversation based on the real context, not conjecture. And don’t hold on to feedback for “that perfect time”.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-11-01T11:00:00-07:00",
				"url": "https://therealadam.com/2021/11/01/dont-be-spooky.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/09/13/would-you-pay.html",
				"title": "Would you pay more for a noisy computer?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://interconnected.org/home/2021/08/27/data_sense\">Computers should expose their internal workings as a 6th sense</a>, Matt Webb:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>I kinda miss the days when I could hear the hard drive of my computer. If it was taking a while to response (say, when opening a big file), there was a difference between the standard whirr chugga chugga ch-ch-ch chugga seek pattern, and a broken kik kik kik. And you’d have an idea how long loading a file from disk should take, versus the silent “thinking” time afterwards.</p><p>…</p><p>The point is not the sound. You barely noticed the sound.</p><p>The point is that you felt you like were in psychic communion with the workings of the computer.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:heading {\"level\":2} -->\n<h2>1.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Watch and car enthusiast/collectors go wild for these qualities. They go on and on about the shape of the Jaguar E-Type, the roar of an American V-8 engine, the howl of a Formula 1 V-10 engine, the smell of new watch strap leather, the classic looks of an Omega Speedmaster or Rolex Daytona. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>And then there’s the “save the manuals” crowd! Despite knowing that modern transmissions are more effective than any human, they desire the involvement of controlling a major interaction between the car’s engine and the rubber meeting the road.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Another crowd revels in and/or yearns to own one of the “last analog” of some sort. The Last Analog Ferrari/Porsche/BMW/etc. It’s a desire for a sensory experience at the expense of outright speed/efficiency, a True Scotsman argument, and a lot of nostalgia. It’s also nice that “analog” cars can’t become haunted my misbehaving computers or software.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>2. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Computers (and their distant cousins, the electric car and smartwatch) are left only to simulate these qualities. A smartwatch could display the same information as an Omega Speedmaster and replicate its design down to pixel perfection. It will never catch the light like a physical watch will. Porsche’s Taycan electric car makes its own kind of howl (if you pay slightly more for the option), but it pales to any era of their gasoline engines.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>A lot of these watch and car qualities come down to nostalgia. On paper, a CO2 producing, endlessly vibrating machine full of moving parts that are going to break is inferior to the electric car designs of 2021. What we need is a new sort of romance as we transition from moving parts to entirely solid state machines. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Computers could make us <em>feel</em> something. They should tap us once if something works, or tap us a few times when something needs our attention. We should be able to tell they’re working hard, or hardly working, by the sounds of their insides clicking, whirring, or churning. Data and files that have gone untouched for a while should have a faded patina.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>In particular, there’s room for moving from Apple Store austerity/minimalism to color and form-follows-function ornamentation.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>3.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Cultured Code’s Things is my go-to example. They’ve gone to the trouble of re-implementing large swaths of the UI toolkit Apple provides on their platforms. The attention to detail shines through. Every action has the slightest haptic feedback. Swiping and tapping through the UI has a hint of physical heft, as though there’s a  bit of momentum to scrolling around, opening up a task, or flipping over to the navigation “sidebar”. It’s the best use of animation I’ve seen on the platform. It’s still quite austere, but at least there’s a feeling that it’s not a UI floating in Jony Ive’s featureless, zero-gravity void!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I suppose the jury’s out whether patina, “this is my computer, none are like it”, and collectability are out the window too. Maybe this whole crypto-token thing will bear fruit without extending humanity’s use of coal power far beyond its past-due date.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>4.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There’s another angle here. To continue the car metaphor, most people don’t want a sports car or muscle car. They don’t even want an SUV with a muscle-car engine. They want something reliable, convenient, and affordable.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Folks mostly want appliances. Solve this problem for me with a minimum of showmanship or drama. That is, they want a quiet and unassuming car or computer. Normal operation should make no sound at all. Worrisome noises should only happen if things worsened after warning the owner and the machine remained quiet.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Solid state computers and cars are unavoidable, as futures go. There’s no reason to go back to combustion, cooling fans, and extensively spinning disks. Computers as appliance are largely here and largely preferred. Watches are in the midst of that transition. Cars are next on the wave of change.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:heading {\"level\":2} -->\n<h2>5.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Maybe this all comes down to computers-as-invisible-fabric-of-life vs. computers-as-central-tool. Glass walls that show off the mainframe/server/datacenter room (not unlike glass engine covers on McLaren/Ferrari/Lamborghini supercars!) vs. servers sequestered behind anonymous drywall or offsite completely “in the cloud”.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Someday, we’ll get past computers as we know them now. Then we’ll have “computer-punk”. Like steampunk before it, we’ll imagine life if we’d advanced in knowledge and ethics but not technology.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Probably, if I see that future, I’ll have some fleet of computers, mostly invisible, which I use as my “daily driver” for getting stuff done. But if current trends continue, I’ll spend a few hours a week enjoying a “weekend computer” that is clack-y, slightly anachronistic or nostalgic, and gets noticeably huffy when I ask too much of it.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-09-13T12:00:00-07:00",
				"url": "https://therealadam.com/2021/09/13/would-you-pay.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/09/11/into-the-milesverse.html",
				"title": "Into the Miles-verse",
				"content_html": "<p>I’m kicking off a new “listening project” - Miles Davis. Inspired by <a href=\"https://samenright.com/2021/06/06/a-beginners-guide-to-miles-davis/\">A Beginner’s Guide to Miles Davis</a>, I’m going to grind my way through the Miles-verse in chronological order. For posterity, my favorites from before this journey are <em>Sketches of Spain</em> and <em>Bitches Brew</em>.</p>\n<p>(I think <em>Kind of Blue</em> is properly rated but not noteworthy because it’s the jazz album that everyone knows and reveres, whether they like jazz or not. And, rightly so.)</p>\n<p>Previously in listening projects:</p>\n<p>Circa 2008, I got a little bored/annoyed with what I was listening to and decided to play through all the songs in my iTunes library, in order by artist. Discoveries (to me) lurking therein: Bruce Springsteen <em>Born to Run</em>, Talking Heads, <em>Stop Making Sense</em>. Getting through the B-artists was a real endeavor. I have a <em>lot</em> of Ben Folds, Beethoven, Billy Joel, and Brahms albums.</p>\n<p>Circa 2016, I listened to all of the Radiohead albums in chronological order. I’d previously really only known them as “the Creep guys” and “the dudes who released an album of MP3s way before everyone else”. (But probably not before Prince, who also performed <a href=\"https://www.youtube.com/watch?v=hAzzRQe6lms\">“Creep”</a>, eventually.)</p>\n",
				"content_text": "I’m kicking off a new “listening project” - Miles Davis. Inspired by [A Beginner’s Guide to Miles Davis](https://samenright.com/2021/06/06/a-beginners-guide-to-miles-davis/), I’m going to grind my way through the Miles-verse in chronological order. For posterity, my favorites from before this journey are _Sketches of Spain_ and _Bitches Brew_. \n\n(I think _Kind of Blue_ is properly rated but not noteworthy because it’s the jazz album that everyone knows and reveres, whether they like jazz or not. And, rightly so.)\n\nPreviously in listening projects:\n\nCirca 2008, I got a little bored/annoyed with what I was listening to and decided to play through all the songs in my iTunes library, in order by artist. Discoveries (to me) lurking therein: Bruce Springsteen _Born to Run_, Talking Heads, _Stop Making Sense_. Getting through the B-artists was a real endeavor. I have a _lot_ of Ben Folds, Beethoven, Billy Joel, and Brahms albums.\n\nCirca 2016, I listened to all of the Radiohead albums in chronological order. I’d previously really only known them as “the Creep guys” and “the dudes who released an album of MP3s way before everyone else”. (But probably not before Prince, who also performed [“Creep”](https://www.youtube.com/watch?v=hAzzRQe6lms), eventually.)\n",
				"date_published": "2021-09-11T11:11:16-07:00",
				"url": "https://therealadam.com/2021/09/11/into-the-milesverse.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/08/23/an-exercise-in.html",
				"title": "An exercise in CPU design, in the small",
				"content_html": "<p><a href=\"https://github.com/revaldinho/opc\">One Page CPU Project</a>:</p>\n<blockquote>\n<p>Welcome to the OPC series of CPUs, where everything fits on one page - one page each for specification, emulation, HDL. For details see the OPC Project web pages.</p>\n</blockquote>\n<p>Computer architecture, Verilog code to implement the design, simulation and testing of the design, writing an assembler and assembly to test the system. All within my favorite kind of constraint - fitting each component on one page.</p>\n<p>They’re not particularly useful machines, but they do de-mystify the bridge from electrical engineering to software engineering.</p>\n<p>When I was an intern at Texas Instruments, the tools for this were enormously complex, slow, and expensive. Whole clusters of Sun machines set aside for simulating the upcoming designs and verifying they did the right thing in software. Not to mention the tremendous effort of verifying the design that was coded was possible to build in the company’s chip fabrication plants and processes.</p>\n<p>That this depth of tooling is now available to hobbyists would have blown me away in 2002.</p>\n",
				"content_text": "[One Page CPU Project](https://github.com/revaldinho/opc):\n\n> Welcome to the OPC series of CPUs, where everything fits on one page - one page each for specification, emulation, HDL. For details see the OPC Project web pages.\n\nComputer architecture, Verilog code to implement the design, simulation and testing of the design, writing an assembler and assembly to test the system. All within my favorite kind of constraint - fitting each component on one page.\n\nThey’re not particularly useful machines, but they do de-mystify the bridge from electrical engineering to software engineering.\n\nWhen I was an intern at Texas Instruments, the tools for this were enormously complex, slow, and expensive. Whole clusters of Sun machines set aside for simulating the upcoming designs and verifying they did the right thing in software. Not to mention the tremendous effort of verifying the design that was coded was possible to build in the company’s chip fabrication plants and processes.\n\nThat this depth of tooling is now available to hobbyists would have blown me away in 2002.\n",
				"date_published": "2021-08-23T05:46:15-07:00",
				"url": "https://therealadam.com/2021/08/23/an-exercise-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/08/05/mathy-andor-wordy.html",
				"title": "Math-y and/or word-y",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I'm a developer who (formerly) recoiled at math, especially calculus and matrices. </p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Instead, I thought, I loved the language-y parts of software development. Programming languages, little languages, domain-specific languages. Designing the names, concepts, and relationships in APIs. Domain-driven design, jargon, modeling. I thought of myself as more of a writer-y developer than a math-y developer.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I suspect that I’m not alone amongst programmers in favoring liberal arts over sciences. Further, I suspect that over the past two decades the number of programmers with science-y backgrounds has steadily declined.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>But, it turns out I do a lot more math than I thought! SQL is set theory. Layout is math (mostly about centering things 🤷). State machines reduce many kinds of logic problems to simple, but math-y, flowcharts. Almost every bit of programming one does is logic, which is, you guessed it, math.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>And that only covers web apps! Computer graphics is a <em>heck</em> of a lot of trigonometry (and whatever is involved in calculating diffusion of light). Machine learning is lots of statistics plus a little calculus. Type checking in compilers is  category and/or set theory.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>The flip side is also true: developers who think they only enjoy the math-y parts do a lot more language/liberal artsy stuff than they think. They've got opinions about language constructs, whether a method name is good or not, if an API is easy to use correctly or not. All \"soft\" non-math-y constructs!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>When it comes down to it, it's more likely that poor math education let me down than I am fundamentally not a math person. Related: <a href=\"https://fs.blog/2021/07/mathematicians-lament/\">Why Math Class Is Boring—and What to Do About It</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>There are two types of people in the world: those who enjoyed mathematics class in school, and the other 98% of the population.</p>\n</blockquote>\n<!-- /wp:quote -->\n",
				"date_published": "2021-08-05T05:43:22-07:00",
				"url": "https://therealadam.com/2021/08/05/mathy-andor-wordy.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/07/17/following-up-on.html",
				"title": "Following up on recommendations, for the forgetful",
				"content_html": "<p>It&rsquo;s hard to land music, books, etc. recommendations from friends because timing is everything. The best case is a recommendation for a thing I didn&rsquo;t know of and it&rsquo;s <em>precisely</em> what I need to read or watch at the exact moment. Beyond that, it&rsquo;s likely I&rsquo;m reading some 900-page book (humble-brag) or deep into a peak television series (humble-brag) that I&rsquo;m trying to finish before my attention wanders.</p>\n<p>I&rsquo;ve come up with a couple of ways to more immediately act on recommendations, so they aren&rsquo;t for naught:</p>\n<ul>\n<li>Download a Kindle/iBooks sample right away and read the first several pages of whatever they recommended. If I&rsquo;m into it maybe I&rsquo;ll stick with it. At least, it&rsquo;s on my backlog of books until I forgot why it&rsquo;s there and delete it (i.e., 2-3 times a decade).</li>\n<li>Watch the first several minutes of the thing on Netflix or whatever. See if it&rsquo;s any good instead of watching random YouTube videos recommended by the algorithm.</li>\n</ul>\n<p>For everything else, there&rsquo;s always the long, scary list of things I&rsquo;d read/watch/play/listen to if we stopped doing billionaires and gave everyone a living wage. 🤷‍♂️</p>\n",
				"content_text": "It's hard to land music, books, etc. recommendations from friends because timing is everything. The best case is a recommendation for a thing I didn't know of and it's _precisely_ what I need to read or watch at the exact moment. Beyond that, it's likely I'm reading some 900-page book (humble-brag) or deep into a peak television series (humble-brag) that I'm trying to finish before my attention wanders.\n\nI've come up with a couple of ways to more immediately act on recommendations, so they aren't for naught:\n\n- Download a Kindle/iBooks sample right away and read the first several pages of whatever they recommended. If I'm into it maybe I'll stick with it. At least, it's on my backlog of books until I forgot why it's there and delete it (i.e., 2-3 times a decade).\n- Watch the first several minutes of the thing on Netflix or whatever. See if it's any good instead of watching random YouTube videos recommended by the algorithm.\n\nFor everything else, there's always the long, scary list of things I'd read/watch/play/listen to if we stopped doing billionaires and gave everyone a living wage. 🤷‍♂️\n",
				"date_published": "2021-07-17T13:23:00-07:00",
				"url": "https://therealadam.com/2021/07/17/following-up-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/07/08/craig-mods-simple.html",
				"title": "Craig Mod’s simple search",
				"content_html": "<p>Craig Mod, <a href=\"https://gist.github.com/cmod/5410eae147e4318164258742dd053993\">Fast, instant client side search for Hugo static site generator</a>:</p>\n<blockquote>\n<p>I believe <a href=\"https://craigmod.com/essays/fast_software/\">Fast Software is the Best Software</a> and wanted keyboard-based, super fast search for my <a href=\"https://craigmod.com/\">homepage</a> / online collection of essays. This method was highly inspired by Sublime Text&rsquo;s CMD-P/CMD-shift-P method of opening files / using functions.</p>\n</blockquote>\n<p>I love that this is a Gist, an idea floating around. Not to reuse wholesale but to adapt and make your own. More like a recipe, less Professional Software Development 🤵‍♂️. Not packaged software, almost a thought-experiment wrought of relatively-accessible code incantations.</p>\n",
				"content_text": "Craig Mod, [Fast, instant client side search for Hugo static site generator](https://gist.github.com/cmod/5410eae147e4318164258742dd053993):\n\n> I believe [Fast Software is the Best Software](https://craigmod.com/essays/fast_software/) and wanted keyboard-based, super fast search for my [homepage](https://craigmod.com/) / online collection of essays. This method was highly inspired by Sublime Text's CMD-P/CMD-shift-P method of opening files / using functions.\n\nI love that this is a Gist, an idea floating around. Not to reuse wholesale but to adapt and make your own. More like a recipe, less Professional Software Development 🤵‍♂️. Not packaged software, almost a thought-experiment wrought of relatively-accessible code incantations.\n",
				"date_published": "2021-07-08T05:40:52-07:00",
				"url": "https://therealadam.com/2021/07/08/craig-mods-simple.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/06/28/what-makes-an.html",
				"title": "What makes an excellent design doc",
				"content_html": "<p><a href=\"#\">Replicache Detailed Design</a>(<a href=\"https://doc.replicache.dev/design)\">https://doc.replicache.dev/design)</a>:</p>\n<blockquote>\n<p>Replicache runs alongside your existing application infrastructure. You keep your existing server-side stack and client-side frameworks. Replicache doesn&rsquo;t take ownership of data, and is not the source of truth. Its job is to provide bidirectional sync between your clients and your servers. This makes it easy to adopt: you can try it for just a small piece of functionality, or a small slice of users, while leaving the rest of your application the same.</p>\n</blockquote>\n<blockquote>\n<p>Conflicts are a fact of life when syncing, but they don&rsquo;t have to be painful. Replicache rewinds and replays your transactions during sync, sort of like git rebase.</p>\n</blockquote>\n<p>I haven&rsquo;t used Replicache, but this design document makes me think it has the qualities that excite me when I discover infrastructural software:</p>\n<ul>\n<li>it solves a tricky problem (distributed application state)</li>\n<li>by compressing the problem down to essential concepts</li>\n<li>those concepts are solved in a way that I can imagine &ldquo;how would I use this?&rdquo;</li>\n<li>and writing clearly about that solution</li>\n</ul>\n",
				"content_text": "[Replicache Detailed Design](#)(https://doc.replicache.dev/design):\n\n> Replicache runs alongside your existing application infrastructure. You keep your existing server-side stack and client-side frameworks. Replicache doesn't take ownership of data, and is not the source of truth. Its job is to provide bidirectional sync between your clients and your servers. This makes it easy to adopt: you can try it for just a small piece of functionality, or a small slice of users, while leaving the rest of your application the same.\n\n> Conflicts are a fact of life when syncing, but they don't have to be painful. Replicache rewinds and replays your transactions during sync, sort of like git rebase.\n\nI haven't used Replicache, but this design document makes me think it has the qualities that excite me when I discover infrastructural software:\n\n- it solves a tricky problem (distributed application state)\n- by compressing the problem down to essential concepts\n- those concepts are solved in a way that I can imagine \"how would I use this?\"\n- and writing clearly about that solution\n",
				"date_published": "2021-06-28T06:44:27-07:00",
				"url": "https://therealadam.com/2021/06/28/what-makes-an.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/06/12/rationalize-and-solve.html",
				"title": "“Rationalize and solve” doesn’t help someone who is venting",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>If you’re doing the whole servant leadership thing, you’re gonna hear some people venting frustrations. Yihwan Kim, <a href=\"https://nomadfornow.com/blog/when-1:1-turns-into-vent-session/\">When a 1:1 turns into a vent session</a>:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\">\n<p>As an engineering manager, I’m learning that a big part of my job (perhaps my only job) is to help people solve problems. I happen to enjoy solving problems myself. So it’s only natural that when someone starts venting, I want to rationalize the conversation, correct inaccuracies, and discuss actionable next steps.</p><p>I always have to remind myself: don’t.</p>\n</blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Relatable. It’s easy to react to someone venting by rationalizing and solving. As Yihwan points out, that’s not the card to play here. The win condition for these is to 1) hear your colleague out and 2) help improve the cause of the vent <em>if your teammate wants you to</em>.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-06-12T15:08:37-07:00",
				"url": "https://therealadam.com/2021/06/12/rationalize-and-solve.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/06/05/perspectives-on-writing.html",
				"title": "4 perspectives on writing",
				"content_html": "<p>Spoiler alert: it&rsquo;s all about organizing what they wrote in the past, finding it later, and remixing it into something they need in the moment. 🧠</p>\n<p>Austin Kleon, <a href=\"https://austinkleon.com/2021/05/20/indexing-filing-systems-and-the-art-of-finding-what-you-have/\">Indexing, filing systems, and the art of finding what you have</a>: writing is meticulously indexing what you may have jotted down in the past. Come for the bit on classic American authors, stay for Phyllis Diller and Joan River&rsquo;s massive card catalogs of jokes! 🤯</p>\n<p>Cory Doctorow, <a href=\"https://doctorow.medium.com/the-memex-method-238c71f2fb46\">Writing is accumulation</a>: it&rsquo;s easy when you accumulate a pile of text files from blogging over twenty years. He searches and surfs tags to find material for whatever he wants to write about today. An external brain.</p>\n<blockquote>\n<p>That’s how blogging is complimentary to other forms of more serious work: when you’ve done enough of it, you can get entire essays, speeches, stories, novels, spontaneously appearing in a state of near-completeness, ready to be written.</p>\n</blockquote>\n<p>Shawn Wang, <a href=\"https://www.swyx.io/writing-mise-en-place/\">Mise en Place Writing</a>: writing is like cooking. Separate the preparation/creation and the cooking/editing.</p>\n<blockquote>\n<p>By decoupling writing from pre-writing, I can write more, faster, and better.</p>\n</blockquote>\n<p>Nat Eliason, <a href=\"https://www.nateliason.com/blog/better-writer\">Tactics to Help You Become a Better Writer</a>: writing is rules. The better your rules, the better (and more) your output.</p>\n",
				"content_text": "Spoiler alert: it's all about organizing what they wrote in the past, finding it later, and remixing it into something they need in the moment. 🧠\n\nAustin Kleon, [Indexing, filing systems, and the art of finding what you have](https://austinkleon.com/2021/05/20/indexing-filing-systems-and-the-art-of-finding-what-you-have/): writing is meticulously indexing what you may have jotted down in the past. Come for the bit on classic American authors, stay for Phyllis Diller and Joan River's massive card catalogs of jokes! 🤯\n\nCory Doctorow, [Writing is accumulation](https://doctorow.medium.com/the-memex-method-238c71f2fb46): it's easy when you accumulate a pile of text files from blogging over twenty years. He searches and surfs tags to find material for whatever he wants to write about today. An external brain.\n\n> That’s how blogging is complimentary to other forms of more serious work: when you’ve done enough of it, you can get entire essays, speeches, stories, novels, spontaneously appearing in a state of near-completeness, ready to be written.\n\nShawn Wang, [Mise en Place Writing](https://www.swyx.io/writing-mise-en-place/): writing is like cooking. Separate the preparation/creation and the cooking/editing.\n\n> By decoupling writing from pre-writing, I can write more, faster, and better.\n\nNat Eliason, [Tactics to Help You Become a Better Writer](https://www.nateliason.com/blog/better-writer): writing is rules. The better your rules, the better (and more) your output.\n",
				"date_published": "2021-06-05T12:54:49-07:00",
				"url": "https://therealadam.com/2021/06/05/perspectives-on-writing.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/06/01/one-priority-is.html",
				"title": "One priority is like wind in the sails",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>It’s true that I can scale myself, teams, and organizations to walk and chew gum at the same time, but <em>it is surprisingly effective to focus on one thing at a time</em>. This is the essence of “priority” — put all my energy into one outcome until it’s done. Then the next one, the next one, etc. as my efforts start to compound.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I, like many folk, do much of my best work in <a href=\"https://perell.com/note/open-mode-and-closed-mode/\">coffee mode</a>. When that deep, coffee mode work aligns with my priority, everything is operating smoothly and life is good. If my priority (singular) changes and I need to go deep on something else, that’s not ideal but not so bad either. As long as I can still focus, things are good. When I’m asked to go deep on two things or pulled to work on deep but unaligned tasks, that’s when things get gnarly.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>A useful activity that <em>looks</em> like (and is often <em>called</em>) prioritizing is sorting (“triaging”) a list of potential work by what’s most impactful or important. This is more of a <a href=\"https://therealadam.com/2021/05/08/planning-focuses-our-ideas/\">planning</a> activity than a priority exercise. It acknowledges there’s a lot to do and time is finite. The result sends a clear signal: this thing at the top of the list is more important than all the things below it. In particular, any of the top items are more useful to work on than <em>all</em> the things further down the list.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Get better at <em>finishing</em> projects. That’s working smarter, not harder. Finished projects, axiomatically, don’t need prioritizing against other work.  <a href=\"https://truemped.github.io/posts/mgmt/limiting-wip/\">Limiting work in progress</a> is difficult to pull off in the moment but a crucial tactic to apply when things get intense.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Possibly controversial: multiple priorities is about the same as having no priorities. The trick that priorities pull is freeing us of the energy-sapping process of deciding what’s most important and what trade-offs to make. A single priority is a note from your past, well-considered self saying “this is more important than all the other things; work on it before anything else”.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Systems of “one priority”:</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:list {\"ordered\":false} -->\n<ul>\n\t<li><a href=\"https://www.theloadedpig.com/strategy-time-management-analogy/\">Rocks/pebbles/sand</a></li>\n\t<li><a href=\"https://randsinrepose.com/archives/one-thing/\">One Thing</a></li>\n\t<li><a href=\"https://en.wikipedia.org/wiki/Kanban\">Kanban</a><br></li>\n</ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Multiple priorities make it unclear what expectations are for individuals. Choosing what to work on becomes difficult and a burden. A single priority is a mission, a clarity of work. Get this thing done, declare victory, move on.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-06-01T05:33:48-07:00",
				"url": "https://therealadam.com/2021/06/01/one-priority-is.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/05/31/desktop-vibes.html",
				"title": "Desktop vibes",
				"content_html": "<p>I&rsquo;ve got three &ldquo;virtual&rdquo; desktops going on my Mac right now. The idea each is its own functional workspace. I don&rsquo;t have three separate physical workspaces to do my writing/thinking, coding/building, or communicating/collaborating. So a digital approximation is the second closest thing. 🤷‍♂️</p>\n<p>Leftmost is where I do the thinking. The background is one of the &ldquo;scenic&rdquo; images included in macOS. The idea is, if I had a little writing hut, ala <a href=\"https://pixel.nymag.com/imgs/daily/vulture/2019/11/06/dickinson/dickinson-thoreau.w700.h467.jpg\">Thoreau in <em>Dickinson</em></a> for looking off into the distance and plying some kind of writing craft, this is the kind of thing I would see when I look up.</p>\n<p>Rightmost is where I communicate with the world and my colleagues. The background is also a built-in macOS dynamic desktop of swoopy, abstract colors. Like <a href=\"https://www.thewrap.com/wp-content/uploads/2021/04/oliver-1-1024x576.jpg\">John Oliver comes to our living room from a featureless void</a>, so I think of this desktop. Ideas, questions, and data points come to me from the void of the internet, end up in this imagined space, and I respond to them in turn through this medium and back to the void. Heavy, eh?</p>\n<p>In the middle is where I do the building and coding. The background here is a flat color. I got it by color picking a photo of the <a href=\"http://www.12-gaugegarage.com\">12-Gauge Garage</a>. I noticed later that it&rsquo;s close to &ldquo;<a href=\"https://insidethemagic.net/2021/04/disney-go-away-green-lp1/\">go away green</a>&rdquo; as used in Disney&rsquo;s theme parks to draw the eye away from backstage areas where the magic may be in-progress or under-repair. The idea is I shouldn&rsquo;t really see this background. I should focus on whatever I&rsquo;m coding/testing/making/etc.</p>\n",
				"content_text": "I've got three \"virtual\" desktops going on my Mac right now. The idea each is its own functional workspace. I don't have three separate physical workspaces to do my writing/thinking, coding/building, or communicating/collaborating. So a digital approximation is the second closest thing. 🤷‍♂️\n\nLeftmost is where I do the thinking. The background is one of the \"scenic\" images included in macOS. The idea is, if I had a little writing hut, ala [Thoreau in _Dickinson_](https://pixel.nymag.com/imgs/daily/vulture/2019/11/06/dickinson/dickinson-thoreau.w700.h467.jpg) for looking off into the distance and plying some kind of writing craft, this is the kind of thing I would see when I look up.\n\nRightmost is where I communicate with the world and my colleagues. The background is also a built-in macOS dynamic desktop of swoopy, abstract colors. Like [John Oliver comes to our living room from a featureless void](https://www.thewrap.com/wp-content/uploads/2021/04/oliver-1-1024x576.jpg), so I think of this desktop. Ideas, questions, and data points come to me from the void of the internet, end up in this imagined space, and I respond to them in turn through this medium and back to the void. Heavy, eh?\n\nIn the middle is where I do the building and coding. The background here is a flat color. I got it by color picking a photo of the [12-Gauge Garage](http://www.12-gaugegarage.com). I noticed later that it's close to \"[go away green](https://insidethemagic.net/2021/04/disney-go-away-green-lp1/)\" as used in Disney's theme parks to draw the eye away from backstage areas where the magic may be in-progress or under-repair. The idea is I shouldn't really see this background. I should focus on whatever I'm coding/testing/making/etc.\n",
				"date_published": "2021-05-31T10:27:23-07:00",
				"url": "https://therealadam.com/2021/05/31/desktop-vibes.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/05/08/planning-focuses-our.html",
				"title": "Planning focuses our ideas",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Planning is essential. But, not too much. Mostly in the next 90-day window (with apologies to <a href=\"https://en.wikipedia.org/wiki/Michael_Pollan#In_Defense_of_Food:_An_Eater's_Manifesto\">Michael Pollan</a>).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Humans are, with few exceptions, awful at planning. It’s impossible to see the future. We rely on our previous experience over data too often. Or, not enough. Or, in the wrong combination for this scenario. Beyond a few days, the world we operate in is too complex, people too hard to predict, and all of it is interconnected in surprising ways.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even worse, humans easily deceive themselves with plans. It’s so easy to look at basically any kind of ambition or outcome and say “yeah sure, given 6-18 months this seems totally feasible.” (With apologies to our ambition, it probably is not feasible.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Yet when we account for those hazards, planning is essential (apologies to Dwight Eisenhower). Most things won’t go to plan, but making one forces us to think things through, ahead of time. Outcomes without a plan are worse than outcomes from a plan that has to change when reality punches us in the face (with apologies to Mike Tyson).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I find that periodically looking 90 days into the future to think about what I want to focus on and outcomes I hope to realize is a pretty dang good way of setting myself up for “luck favors the prepared”.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Planning the work is an essential part of <em>doing</em> the work. An ambitious but uncertain 6-month idea becomes an ambitious but <em>plausible</em> plan in steps. Make a 90-day plan by breaking it into chunks. Organize them into a coherent fraction of the 6-month idea. Make trade-offs to decide what’s most important or risky. Start on the first thing. Rinse and repeat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Iteration is part of planning. Unknowns, predicted and unpredicted, rear their head. Risk turns into caution turns into incidence. Nothing goes <em>exactly</em> to plan. So, we take another swing at the plan, armed with new information.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We’re always smarter than we were last week or last month when we made the plan. Sticking to the plan is foolish. Updating or overhauling the plan makes much more sense than trying to argue with it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Planning is like writing. They both focus our thinking. An idea that flops when we take it from our brains to the page probably needs more work, whether it’s writing or planning.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-05-08T17:15:53-07:00",
				"url": "https://therealadam.com/2021/05/08/planning-focuses-our.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/05/03/tumblelogs-a-thousand.html",
				"title": "Tumblelogs, a thousand weird flowers",
				"content_html": "<p>I miss <a href=\"https://kottke.org/05/10/tumblelogs\">tumblelogs</a>. Especially <a href=\"https://web.archive.org/web/20180724075432/http://project.ioni.st/\">projectionist</a>. Twitter and Tumblr fit the mold, functionally. But the vibe is not the same. That time right before centralized social media achieved critical mass was a great moment. Let a thousand weird flowers bloom in their own meadow.</p>\n",
				"content_text": "I miss [tumblelogs](https://kottke.org/05/10/tumblelogs). Especially [projectionist](https://web.archive.org/web/20180724075432/http://project.ioni.st/). Twitter and Tumblr fit the mold, functionally. But the vibe is not the same. That time right before centralized social media achieved critical mass was a great moment. Let a thousand weird flowers bloom in their own meadow.\n",
				"date_published": "2021-05-03T07:46:25-07:00",
				"url": "https://therealadam.com/2021/05/03/tumblelogs-a-thousand.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/05/01/shawn-wangs-principles.html",
				
				"content_html": "<p>Shawn Wang&rsquo;s <a href=\"https://www.swyx.io/35-principles/\">35 Principles for 35 Years</a> are a good read. A few of my favorites:</p>\n<blockquote>\n<ol start=\"8\">\n<li>Seek First To Understand, Then To Be Understood. Don&rsquo;t get defensive about your point of view or perception of reality - understand theirs first. Either you will learn something new or you&rsquo;ll understand how to better get your point across. Hold multiple perspectives in your head and be able to summarize the best arguments of all major parties in a way that THEY agree with.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"15\">\n<li>Don&rsquo;t offer unsolicited help. Make Sure Help Is Wanted Before Offering It. Men - be especially wary about this when women are talking about their problems. Sometimes they just need support, not solutions.</li>\n</ol>\n</blockquote>\n<blockquote>\n<ol start=\"23\">\n<li>Separate Your Identity from Your Work. You can learn a lot on the Internet for the low, low price of $YOUR_EGO.</li>\n</ol>\n</blockquote>\n",
				"content_text": "Shawn Wang's [35 Principles for 35 Years](https://www.swyx.io/35-principles/) are a good read. A few of my favorites:\n\n> 8. Seek First To Understand, Then To Be Understood. Don't get defensive about your point of view or perception of reality - understand theirs first. Either you will learn something new or you'll understand how to better get your point across. Hold multiple perspectives in your head and be able to summarize the best arguments of all major parties in a way that THEY agree with.\n\n> 15. Don't offer unsolicited help. Make Sure Help Is Wanted Before Offering It. Men - be especially wary about this when women are talking about their problems. Sometimes they just need support, not solutions.\n\n> 23. Separate Your Identity from Your Work. You can learn a lot on the Internet for the low, low price of $YOUR\\_EGO.\n",
				"date_published": "2021-05-01T11:19:00-07:00",
				"url": "https://therealadam.com/2021/05/01/shawn-wangs-principles.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/04/29/working-directly-amp.html",
				"title": "Working, directly \u0026amp; small",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://twitter.com/rsnous/status/1385704521389670400\">Omar Rizwan recollects that one of the original selling points of React was that you could consolidate all the HTML, CSS, and JS for a single component in one file</a>. No navigating across large directory trees to find the one line of code that implements the behavior you want. Far less worrying \"if I change this am I unwinding a ball of yarn that I will regret?\"</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>(Side note: one of the most powerful tools programmers have is scope. Most things are easier when you're working in smaller and more local scopes. If your HTML/CSS/JS only applies to the file you’re looking at, many things are easy or possible.)</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I'd forgotten about this selling point and wish things had evolved differently to support it. In the large, many programming techniques don't work and this one is no exception. But in the small, how wonderful would it be to express everything about an idea you're trying to build in just one place?</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>Lately, I'm finding that my prototypes and weekend hacks are most successful when I don't try to get \"too serious\" about them too early. Adding type checkers, linters, even switching contexts to write automated tests are all \"too serious\". If I give myself a little freedom to work messy and concentrate on the idea, not the code, things go better.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>I suspect there's a connection between working messy, generating ideas, and using a framework that doesn't punish/forbid throwing all your code into one file.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-04-29T15:42:24-07:00",
				"url": "https://therealadam.com/2021/04/29/working-directly-amp.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/27/the-long-game.html",
				"title": "The long game of notes",
				"content_html": "<p>You can do a lot of fancy stuff with your notes these days. Backlinks, graphs, embedding, “transclusion”, knowledge databases, and digital gardens are all tempting sirens. But <strong>building up a collection of ideas over time and ease of search is the most important thing.</strong></p>\n<p>Matt Webb, <a href=\"http://interconnected.org/home/2021/02/10/reservoirs\">Memexes, mountain lakes, and the serendipity of old ideas</a>:</p>\n<blockquote>\n<p>I’ve noticed that smart people keep notes, and in particular use their notes in a certain way, and it made me think of something I read recently about viruses.</p>\n<p>…</p>\n<p>And it’s interesting, right, this accretive note-taking and the process of taking core samples through the deep time of your own ideas. I’ve built something similar, not as consistently, but for about two decades too, and I keep all my notes in plain text, and all in the same searchable database. I develop nascent ideas in part by typing in keywords, spelunking my own <a href=\"https://en.wikipedia.org/wiki/Memex\">memex</a> for things I’ve previously spotted, connections I’ve made, turns of phrase… most of which I had forgotten, but there they are. And old ideas come back and get recombined and become fresh again. That database of notes is my greatest asset. It’s how I write here, and it’s also how I pretend to be clever when I’m working.</p>\n</blockquote>\n<p>The endgame of having extensive notes accumulated over a long period of time is not to put them in a grand, unified theory. <strong>The point is to play the long-game to think in them, search them for new insights, and to develop ideas over weeks and months. An antidote to thinking in Slack messages and tweet-storm hot-takes.</strong></p>\n",
				"content_text": "You can do a lot of fancy stuff with your notes these days. Backlinks, graphs, embedding, “transclusion”, knowledge databases, and digital gardens are all tempting sirens. But **building up a collection of ideas over time and ease of search is the most important thing.**\n\nMatt Webb, [Memexes, mountain lakes, and the serendipity of old ideas](http://interconnected.org/home/2021/02/10/reservoirs):\n\n> I’ve noticed that smart people keep notes, and in particular use their notes in a certain way, and it made me think of something I read recently about viruses.\n> \n> …\n> \n> And it’s interesting, right, this accretive note-taking and the process of taking core samples through the deep time of your own ideas. I’ve built something similar, not as consistently, but for about two decades too, and I keep all my notes in plain text, and all in the same searchable database. I develop nascent ideas in part by typing in keywords, spelunking my own [memex](https://en.wikipedia.org/wiki/Memex) for things I’ve previously spotted, connections I’ve made, turns of phrase… most of which I had forgotten, but there they are. And old ideas come back and get recombined and become fresh again. That database of notes is my greatest asset. It’s how I write here, and it’s also how I pretend to be clever when I’m working.\n\nThe endgame of having extensive notes accumulated over a long period of time is not to put them in a grand, unified theory. **The point is to play the long-game to think in them, search them for new insights, and to develop ideas over weeks and months. An antidote to thinking in Slack messages and tweet-storm hot-takes.**\n",
				"date_published": "2021-03-27T15:10:35-07:00",
				"url": "https://therealadam.com/2021/03/27/the-long-game.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/16/i-never-thought.html",
				"title": "I never thought I'd think this much about wallpaper",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://en.wikipedia.org/wiki/Daveed_Diggs\">Daveed Diggs</a> mentioned this awesome wallpaper, <a href=\"https://www.flavorpaper.com/wallpaper/patterns/ez-papes/bay-area-toile\">Bay Area Toile</a>, <a href=\"https://www.architecturaldigest.com/video/watch/open-door-inside-hamilton-star-daveed-diggs-and-emmy-raver-lampmans-la-home\">in a tour of his house</a>. Amongst the Bay Area celebrities whose likenesses it features is <a href=\"https://en.wikipedia.org/wiki/Shock_G\">Humpty Hump aka Shock G</a> of <a href=\"https://en.wikipedia.org/wiki/Digital_Underground\">Digital Underground</a>. <a href=\"https://en.wikipedia.org/wiki/Jorma_Taccone\">Jorma Taccone</a> of the <a href=\"https://en.wikipedia.org/wiki/The_Lonely_Island\">Lonely Island</a> was involved in designing it.</p>\n\n<p>That&#8217;s a hell of a thing right there. And, I never thought I&#8217;d think of wallpaper as awesome.</p>\n",
				"date_published": "2021-03-16T07:56:43-07:00",
				"url": "https://therealadam.com/2021/03/16/i-never-thought.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/10/nina-simone-mississippi.html",
				"title": "Nina Simone, \"Mississippi Goddam\" 🤘",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>&#8220;This is a showtime, but the show hasn&#8217;t been written for it&#8221;</p>\n\n<p><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/LJ25-U3jNWM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></p>\n",
				"date_published": "2021-03-10T15:51:29-07:00",
				"url": "https://therealadam.com/2021/03/10/nina-simone-mississippi.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/03/let-them-go.html",
				"title": "Let them go their own way",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>A mistake many newly minted (and some experienced) engineering managers (EMs) make is listening to their team (good!), discussing potential solutions and tradeoffs (good!), and then telling them how to solve the problem. Whoops! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>Now the team relies on their EM to make decisions and hierarchy is enforced. Folks may walk away feeling good that a debate was had or voices were heard. But at the end of the day, the EM isn’t creating leverage for the team and the team isn’t getting the autonomy to make their successes (and learn from their mistakes).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even worse: when <em>some</em> direct reports have the trust and faith of the EM to make their own decisions and pursue autonomy. But other members are not there yet and so the EM is “in the decision loop” for them. Double whoops!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead, the EM should help their team work autonomously, build trust, and solve problems on their own. The EM acts as a sort of bumper-bowling oracle. They listen and discuss with reports or the team as a whole. Then, instead of deciding, the EM specifies outcomes or tradeoffs to navigate by. Based on their research, intuition, and the desired outcomes, the team makes their own decision and implements it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This applies to junior and senior developers. The feedback loop for junior developers may need to be shorter to make sure they don’t go down the wrong rabbit hole, but EMs and senior developers shouldn’t hover over them every minute telling them which ideas to pursue and which to discard.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-03-03T08:53:31-07:00",
				"url": "https://therealadam.com/2021/03/03/let-them-go.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/03/a-ripping-yarn.html",
				"title": "A ripping yarn of hunting bugs in Destiny 2",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.bungie.net/en/Explore/Detail/News/50140\">The Case of the Missing Rewards</a> - Luckily, in my many hours playing Destiny 2 I haven&#8217;t been bitten by this bug. Seeing behind the curtains of something I interact with so often is pretty neat though!</p>\n\n<p>It&#8217;s fascinating to read the tale of a gnarly bug from a domain I have no practical experience working in. In this case, large-scale, long-term game development. The volume and detail of data they work with to find a strange little bug that only manifests in certain kinds of game activities and involves weird decisions made in sizing networking subsystem buffers is amazing.</p>\n\n<p>See also, <a href=\"https://nee.lv/2021/02/28/How-I-cut-GTA-Online-loading-times-by-70/\">How I cut GTA Online loading times by 70%</a></p>\n",
				"date_published": "2021-03-03T06:44:27-07:00",
				"url": "https://therealadam.com/2021/03/03/a-ripping-yarn.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/03/01/a-good-newsletter.html",
				"title": "A good newsletter is an interesting conversation, not a monologue",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A good email newsletter is like the conversation you may have had over coffee with an interesting pal. A surprising topic, a novel theory, perhaps an amusing tangent or two.</p>\n\n<p>I&#8217;m feeling the trough of newsletter overload, like many folks. I&#8217;ve put my own on hiatus because it seems more useful to write broadly on the web than narrowly via email.</p>\n\n<p>I suspect that email newsletters have evolved from interesting conversations to (mostly) yet another medium to build eyeballs to sell to someday. Or, newsletters were the mold that blogging reinvented itself from.</p>\n\n<p>But, I still think good newsletters could still exist. But, they have to feel more like a conversation and less like a monologue.</p>\n",
				"date_published": "2021-03-01T09:06:27-07:00",
				"url": "https://therealadam.com/2021/03/01/a-good-newsletter.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/02/21/walking-through-the.html",
				"title": "Walking through the current customer acquisition hypothesis",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Paul Ford, <a href=\"https://www.wired.com/story/the-secret-essential-geography-of-the-office/\">The Secret, Essential Geography of the Office</a>:</p>\n\n<blockquote>\n<p>Offices have their own mental maps. “Oh,” they say, “she’s moving to the 17th floor.” And everyone says: the 17th floor! And you know, being a social primate, exactly where you are in the organization relative to that floor. Offices all have their formal and informal maps, whether inside a bank, statehouse, cathedral, museum, school, or open-plan tech firm. I say “West Wing” and you know what I’m talking about. </p>\n</blockquote>\n\n<p>I once worked at a company where the hypothesis behind customer acquisition was currently in flux. A couple times a quarter, a new concept would come along. With a new concept almost always came a change in the sequencing of handoffs between teams. This month, outside sales hands off to the onboarding team hands off to customer support. The next month, marketing hands off to outside sales hands off to onboarding.</p>\n\n<p>It so happens this company had a large, somewhat raucous open office layout. All of sales, support, and marketing were in one big room. (With three different Sonos systems playing three different songs at any given time. Madness.)</p>\n\n<p>It also so happened that this was a high-energy sales culture. (Are there kinds of sales culture? Someone tell me there are monk-ish sales people, making one call per day, speaking only a few quiet words, ringing a small bell, and going home for the day. 😆)</p>\n\n<p>Thus, when the current concept of how customers were handed off from the top of the funnel downward, a few people would move the desks around so hand-offs happened across aisles of the office and not from one corner of the office to a remote corner sixty feet away.</p>\n\n<p>The upside of all this apparent chaos was that on any given day, you could walk into the office and see the current hypothesis of customer acquisition. As long as you knew who was in sales, marketing, support, etc. or their typical posture (walking around talking on a headset, answering emails as quickly as possible, looking at marketing campaign mockups), you could tell what&#8217;s going on. One could literally walk through the funnel, from marketing to sales to onboarding (assuming that was the hypothesis of the day).</p>\n\n<p>Besides the madness of open offices with multiple songs within speaking distance of each other, I think this is not the worst way to arrange a physical workspace.</p>\n",
				"date_published": "2021-02-21T13:25:05-07:00",
				"url": "https://therealadam.com/2021/02/21/walking-through-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/02/21/chonkr.html",
				"title": "CHONKR",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I saw this BMW at <a href=\"https://www.radwood.com\">Radwood</a> in Austin last year. </p>\n\n<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://short.therealadam.com/uploads/2021/a5d3e8b009.jpg\" alt=\"IMG 1152\" title=\"IMG_1152.jpeg\" border=\"0\" width=\"1035\" height=\"1035\" /></p>\n\n<p>In hindsight, I would kinda like to know the whole story behind this car <em>and</em> the custom plate.</p>\n",
				"date_published": "2021-02-21T13:25:02-07:00",
				"url": "https://therealadam.com/2021/02/21/chonkr.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/02/20/notes-on-the.html",
				"title": "Notes on the invention of networked video gaming",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://fabiensanglard.net/quakeSource/johnc-log.aug.htm\">QuakeWorld by John Carmack</a> - the .plan notes (basically a Unix-local blog) written during the development of internet networking (not just LAN-local) for Quake. It&#8217;s amazing to read the notes of a super-sharp person inventing the foundations of the multi-billion dollar gaming industry as we know it today.</p>\n\n<p>Of course there&#8217;s great technical details, like this bit that should be familiar to anyone who has mysteriously died in an online gaming match:</p>\n\n<blockquote>\n<p>I am reining in the client side prediction to a fairly minimal amount.\nIt has too many negative effects in different circumstances. The problem\nof running away from or in front of your missiles was so bad that I\nconsidered simulating the missiles on the client side, but that is the\nsecond step on a slippery slope. If just the missiles were simulated,\nthen a missile would fire through an enemy until the server informed\nyou it exploded on them. Then you consider simulating interactions,\nbut then you have to guess at other player inputs (which is hopeless)&#8230;</p>\n</blockquote>\n\n<p>And complaining about Ferrari ownership, which is always a rich-people tragicomedy:</p>\n\n<blockquote>\n<p>My testarossa snapped another input shaft (the third time).<br/>\ndamn dman damn.</p>\n</blockquote>\n\n<p><a href=\"https://fabiensanglard.net\">Fabien Sanglard&#8217;s website</a> is full of this stuff, if that&#8217;s your jam.</p>\n",
				"date_published": "2021-02-20T13:35:38-07:00",
				"url": "https://therealadam.com/2021/02/20/notes-on-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/29/darlene-love-re.html",
				"title": "Darlene Love re: Phil Spector 🔥",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.npr.org/2021/01/21/959057719/the-voices-of-black-women-were-essential-to-phil-spectors-wall-of-sound\">The Voices Of Black Women Were Essential To Phil Spector&#8217;s Wall Of Sound</a></p>\n\n<blockquote>\n<p>Darlene Love began her partnership with Spector in 1962, when she came to the attention of Lester Sill, Spector&#8217;s business partner and co-founder of their label Philles Records. In a hurry to record the song &#8220;He&#8217;s a Rebel,&#8221; but unable to cut the song with the vocalists they had under contract, the New York-based group The Crystals, Sill and Spector turned to Love, who lived in Los Angeles. Spector was racing to release his version of the Gene Pitney-penned tune before a version recorded by Vikki Carr could come out and pre-empt his sales. Spector paid Love a flat fee and triple scale to record the song and to allow him to release it under the name The Crystals. The arrangement, made without consulting with The Crystals, was indicative of the power producers had over artists. Describing her experience recording with Spector in her memoir, Love recalled that Spector encouraged what Love calls &#8220;the low, growling side of my voice, the righteous indignation and in-your-face testimony that I usually saved for church.&#8221; Accentuating vocal Blackness in the early 1960s was a daring move in the segregated U.S., but it paid off.</p>\n</blockquote>\n\n<p>I saw Darlene Love perform, oddly enough, at EPCOT Center. I wonder if they offer musicians a big vacation package for that, of it was just a price-is-right situation?</p>\n\n<p>Between songs, she alluded to having worked with Phil Spector. She basically called him out for the shady behavior described in the NPR story. I&#8217;m guessing it was not for the first time. She concluded the retelling of her history by saying &#8220;I don&#8217;t care if he hears about me saying this! He&#8217;s in jail, can&#8217;t do anything about it!&#8221; 😆</p>\n\n<p>Wall of Sound is one of my favorite maximalist musical styles and all, but I hope Darlene Love is updating her sick burns on (convicted murderer) Phil Spector to end with &#8220;don&#8217;t matter because he&#8217;s dead now!&#8221;</p>\n",
				"date_published": "2021-01-29T07:01:52-07:00",
				"url": "https://therealadam.com/2021/01/29/darlene-love-re.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/27/hire-based-on.html",
				"title": "Hire based on outcomes instead of role descriptions",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>The first time I hired someone, I wish I’d known it’s much better to think about the outcomes you’re hiring for. With that in mind, work backwards to the experience and skills required for a person to succeed in this role.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:heading -->\n<h2>I. Not in chronological order</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The first time I went through the process of hiring someone, I thought it through from the first step to the last step. Write a listing for a role. Get resumes, interview people. Hire someone, hand them a laptop. Rinse and repeat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>At the end of the process, I learned that was suboptimal. At no point had I thought about how hiring this actual person (not an abstract role) at this actual company (one with peculiarities and specific needs) would create the outcomes we need to succeed. I wasn’t thinking about how to help this kind-of-person swim instead of sink. That was my mistake! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I should have thought about what it looks like for someone to succeed on our team and solve the problems we’re facing, then shape the hiring milestones around that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>II. Succeed despite yourself</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In my defense, it’s <em>really easy</em> to naively approach hiring in chronological order. We need to fill a $language developer role, so write a job listing for a $language developer. Post it to the job sites, review the resumes and cover letters. Talk to people on the phone about that kind of role, in general. Have them do a code exercise to demonstrate how they perform in that role. Schedule face-to-face interviews to make sure they’re the real deal. Extend an offer and set a start date. Greet them when they walk in the door, make them do paperwork, hand them a laptop. Rinse and repeat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We’ve all been through it, so it seems natural to approach it that way. Yet, the process is so miserable and the outcomes so mediocre. Somehow we stick with it. (There’s more to unpack there, someday.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Spoiler alert: a great candidate found us, it all worked out, and that person was wildly successful. Everyone lived happily.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>The lesson for first time managers is: some of your early successes are because you inherited an excellent team, not because you’re a natural gift to the craft of management.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Luckily, after the offer was out, I put together <a href=\"https://therealadam.com/2020/10/19/onboard-new-teammates-with-a-90-day-plan/\">a 90-day plan</a> for the new hire so they knew what was expected of them, what they would be doing, and how to succeed on this team. Besides being prepared enough to take advantage of our luck, this was my best move.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>III. Work backwards from outcomes</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>What I should have done is thought about the <em>outcomes</em> from the future, backwards. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose it’s three months <em>after</em> a new team member has joined the team and they are wildly successful. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>What are they doing that makes them so effective? </li><li>What goals did I give them for the first day, week, month and quarter that led them down that path? </li><li>What are the outcomes this organization is looking for from this role? </li><li>What are the learning curves they’ll have to climb to make those outcomes happen? <br /></li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>By thinking through and answering questions about what <em>success</em> looks like at <em>this point</em> at <em>this company</em> I’ll know what would make a successful hire and what I should look for in candidates.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-01-27T06:56:44-07:00",
				"url": "https://therealadam.com/2021/01/27/hire-based-on.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/20/when-i-first.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>When I first walked past the TV and saw Biden behind the big-fancy desk in the Oval Office, it sunk in for me: competence is back. Bluster and bullying, for the moment, are on the decline.</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">President Biden begins signing a tall stack of executive orders during his first Oval Office appearance for press. <a href=\"https://t.co/oh1JqG0iJP\">pic.twitter.com/oh1JqG0iJP</a></p>&mdash; Jennifer Epstein (@jeneps) <a href=\"https://twitter.com/jeneps/status/1352016112687439872?ref_src=twsrc%5Etfw\">January 20, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n",
				"date_published": "2021-01-20T16:31:09-07:00",
				"url": "https://therealadam.com/2021/01/20/when-i-first.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/15/on-repeat-which.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>On repeat (which I rarely do, lately): <a href=\"https://en.wikipedia.org/wiki/Empyrean_Isles\"><em>Empyrean Isles</em></a> by Herbie Hancock. Ron Carter, Freddie Hubbard, heck yeah.</p>\n\n<p><iframe allow=\"autoplay *; encrypted-media *; fullscreen *\" frameborder=\"0\" height=\"450\" style=\"width:100%;max-width:660px;overflow:hidden;background:transparent;\" sandbox=\"allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation\" src=\"https://embed.music.apple.com/us/album/empyrean-isles-remastered/724298445\"></iframe></p>\n",
				"date_published": "2021-01-15T07:15:42-07:00",
				"url": "https://therealadam.com/2021/01/15/on-repeat-which.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/10/the-unreasonable-effectiveness.html",
				"title": "The unreasonable effectiveness of checklists",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Checklists are a fantastic tool for thinking. This despite the existence of <a href=\"http://www.43folders.com/2004/09/08/getting-started-with-getting-things-done\">GTD</a>, <a href=\"https://en.wikipedia.org/wiki/Kanban_board\">Kanban</a>, <a href=\"https://fortelabs.co/blog/para/\">PARA</a>, and any number of ways to organize projects and figure out how to finish them. When I’m starting a project or when the going gets weird, checklists are usually how I end up thinking my way through.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>I am certainly not the first person to espouse the greatness of checklists. There are <a href=\"https://www.ted.com/talks/atul_gawande_how_do_we_heal_medicine/up-next\">TED talks</a> and <a href=\"http://atulgawande.com/book/the-checklist-manifesto/\">books</a> that are far better at telling you about that. I can only tell you about how checklists make me <em>feel</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First, <strong>crossing things off checklists feels great</strong>. It’s a rewarding feedback loop that keeps things moving!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Checklists are great because they are the smallest form of planning you can possibly do and get away with it. Checklists are not so dear that if things go weird, I feel bound to them. Change the list based on the new information and keep getting things done.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My experience is that Eisenhower nailed it on the head: “plans are useless, planning is essential.” The essence of planning is thinking through scenarios, outcomes, and how to connect the two. A lack of planning is a lack of thinking. If I can’t be bothered to think it through, why would I even do it?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Checklists are great because they are an easy way to get my brain thinking about the details. They force me to think about all the things that need to happen. They force me to think in time and sequence: this needs to happen before that and this other thing will take a while so that’s probably another checklist. Checklists force me to think about dependencies and who is going to do what part of a project. For example: Bob has access to all the welding tools, so he needs to do all the metalwork which means Alice and Chris are stuck with all the woodwork and painting.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Leading projects over the past couple years, I have found that people appreciate a checklist that tells them exactly what they need to do before they’re done. Production deploys go so much smoother and stress-free when there’s a checklist that <em>thinks for us</em>. I’ll take a well-written feature pitch or requirements doc any day, but a well-considered checklist will do in a pinch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A checklist is like sending my future self, stressed and at less-than-full-thinking-capacity, a note saying “You got this. Do these things one at a time until they’re all done.”</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2021-01-10T14:26:06-07:00",
				"url": "https://therealadam.com/2021/01/10/the-unreasonable-effectiveness.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2021/01/09/perspectives-on-creativity.html",
				"title": "Perspectives on creativity for 2021",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Austin Kleon - <a href=\"https://austinkleon.com/2020/03/11/a-working-from-home-manual-in-disguise/\">A working from home manual in disguise</a>:</p>\n\n<blockquote>\n<ol>\n<li>Make lists.</li>\n<li>You can be woke without waking to the news.</li>\n<li>Airplane mode can be a way of life.</li>\n<li>Naps are a secret weapon.</li>\n</ol>\n</blockquote>\n\n<p>David Perell - <a href=\"https://perell.com/note/open-mode-and-closed-mode/\">Beer Mode and Coffee Mode</a>:</p>\n\n<blockquote>\n<p>Creatives have two ways of working: beer mode and coffee mode. </p>\n\n<p>Beer mode is a state of unfocused play where you discover new ideas. In contrast, coffee mode is a state of focus where you work towards a specific outcome. </p>\n\n<p>The see-saw of beer and coffee mode is like breathing. Your best ideas emerge when you balance the inhale of beer mode with the exhale of coffee mode. Coffee mode rewards action, while beer mode rewards laughter. Coffee mode rewards focus, while beer mode rewards conversation. And while coffee mode rewards clarity, beer mode rewards serendipity.</p>\n</blockquote>\n\n<p>What way of working is thinking big thoughts in the shower?</p>\n",
				"date_published": "2021-01-09T12:34:11-07:00",
				"url": "https://therealadam.com/2021/01/09/perspectives-on-creativity.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/12/26/sunset-or-perlin.html",
				"title": "Sunset or Perlin noise?",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://short.therealadam.com/uploads/2020/acd7e2b0a3.png\" alt=\"IMG 1631\" title=\"IMG_1631.png\" border=\"0\" width=\"600\" height=\"450\" /></p>\n",
				"date_published": "2020-12-26T13:46:39-07:00",
				"url": "https://therealadam.com/2020/12/26/sunset-or-perlin.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/12/14/mike-perham-redis.html",
				"title": "Mike Perham: Redis is a Swiss-army knife",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://twitter.com/getajobmike\">Mike Perham</a>: <a href=\"https://www.mikeperham.com/2020/12/14/grouping-events-for-later-processing/\">Grouping Events for Later Processing</a>:</p>\n\n<blockquote>\n<p>But we see enough traffic that we don’t want to turn every single click into a background job. We want to aggregate the clicks and process them regularly. There’s several ways to do this; I’m going to show you how to implement it using a cron job running every minute.</p>\n</blockquote>\n\n<p>Redis and some creativity scales really well. In other words: you may not need microservices, part 34.</p>\n",
				"date_published": "2020-12-14T16:13:24-07:00",
				"url": "https://therealadam.com/2020/12/14/mike-perham-redis.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/11/11/better-meetings-but.html",
				"title": "Better meetings (but also fewer, mostly)",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Christof Damian, <a href=\"https://christof.damian.net/2020/11/my-thoughts-on-meetings.html\">My thoughts on meetings</a>:</p>\n\n<blockquote>\n<p>I used to really hate meetings. As a developer they seem to just get into the way of doing real work&#8230;But at some point you specialise, teams grow and you need some way to sync up.</p>\n</blockquote>\n\n<p>I&#8217;ve learned in the work-at-home times that it&#8217;s definitely possible to have <em>too few</em> meetings. After passing that threshold, the cart to play is creating <em>better</em> meetings. Lots of good ideas and guidelines in this article.</p>\n",
				"date_published": "2020-11-11T09:21:23-07:00",
				"url": "https://therealadam.com/2020/11/11/better-meetings-but.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/10/29/annabel-scheme-the.html",
				"title": "Annabel Scheme, the New Golden Gate, and the misplaced metropolitan nostalgia",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://www.robinsloan.com/books/annabel-scheme-serial/read/#\">Annabel Scheme and the Adventure of the New Golden Gate</a> - a short story by Robin Sloan. Fantastic world building for a short story. Highly recommended. </p>\n\n<p>Nostalgia and the “this city used to be cooler” sentiment comes up (and is rejected). Funny that the sentiment in the story is about San Francisco, where many Austinites came from and was allegedly cooler when it had fewer former-San Franciscans.</p>\n\n<p>Maybe cities are like <em>Saturday Night Live</em>: there are very few real stinkers, just casts or episodes or locales for which one isn’t nostalgic.</p>\n",
				"date_published": "2020-10-29T08:13:16-07:00",
				"url": "https://therealadam.com/2020/10/29/annabel-scheme-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/10/28/product-hunts-async.html",
				"title": "Product Hunt’s async work: everyone in their own swimlane",
				"content_html": "<p>How Product Hunt does asynchronous work: everyone in their own swimlane, unblocked. I really dig how they haven’t siloed work between front-end/back-end developers.</p>\n<p><a href=\"https://blog.rstankov.com/collaborative-single-player-mode/\">Collaborative Single Player Mode</a>:</p>\n<blockquote>\n<p>A developer should be able to execute a feature from start to finish &ndash; from the database to the backend, API, frontend, and CSS. The goal is never to get blocked.</p>\n<ul>\n<li>If you are missing a design, mock the UI, designers can fill this in later</li>\n<li>If you don&rsquo;t know how to do something technically, hack it or fake it</li>\n<li>If a product decision is missing, try to make this decision yourself - it&rsquo;s better to ask for forgiveness rather than permission</li>\n</ul>\n</blockquote>\n<p>Sounds like they use feature flags so they can move quickly and decisively, but safely. And of course, plenty of testing and code review automation.</p>\n",
				"content_text": "How Product Hunt does asynchronous work: everyone in their own swimlane, unblocked. I really dig how they haven’t siloed work between front-end/back-end developers.\n\n[Collaborative Single Player Mode](https://blog.rstankov.com/collaborative-single-player-mode/):\n\n> A developer should be able to execute a feature from start to finish -- from the database to the backend, API, frontend, and CSS. The goal is never to get blocked.\n> \n> - If you are missing a design, mock the UI, designers can fill this in later\n> - If you don't know how to do something technically, hack it or fake it\n> - If a product decision is missing, try to make this decision yourself - it's better to ask for forgiveness rather than permission\n\nSounds like they use feature flags so they can move quickly and decisively, but safely. And of course, plenty of testing and code review automation.\n",
				"date_published": "2020-10-28T07:57:17-07:00",
				"url": "https://therealadam.com/2020/10/28/product-hunts-async.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/10/19/onboard-new-teammates.html",
				"title": "Onboard new teammates with a 90-day plan",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p><br />My new boss had written up a 90-day plan for me the week before I started. This was perfect timing. I was already starting to put a bow on my current work and my focus was wandering. Now my brain could start working on ideas for the next gig. Plus, I had a much better idea of what I’d start working on and how to make an impact than I did coming out of my interviews. It was one of the better emails I’ve ever received.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>It seems totally obvious that hiring managers should have a plan for new hires. Yet, in more than a decade of work and several jobs, I’d never had a 90-day plan for a new position. In the parlance of our times, a 90-day plan for new team members is one weird trick that is pretty dang easy to pull off.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For all my hires since then, I’ve written up a 90-day plan. I’m convinced that this is one of the best things a hiring manager can do to bring new people onto their team. And it’s relatively easy!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A 90-day plan for onboarding starts off with very specific tasks for the first day and week. Do the paperwork, meet the people, get your digital and/or physical workspace set up. Learn about the team’s process, the rhythm of building and delivering. Meet with a team buddy who will introduce you to folks on the team and explain all the quirks and features of how the team works.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first 3-4 weeks of a 90-day plan, for hands-on engineers, is about working with a buddy to spin up the flywheel. The goal is to come up to speed on learning the systems and contributing to them. Get the system running on your laptop or development sandbox so you can make quick iterations and one-off experiments. Land your first code change, your first review, and your first change to production. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>(My angle here is for folks building SaaS web applications, but it’s the same for any kind of developer: get a few early wins and build from there.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The second 30 days are when new team members start to come into their own. This is when I want to help my new teammates plant the seeds to realize the potential I saw when they interviewed. Important projects start spinning up. Strategy comes into play. Now is when I re-emphasize to them the potential I saw and brainstorm how to put that special skill, innate talent, or superpower to work improving our team or outcomes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The final 30 days should start showing evidence that my new teammate is creating good outcomes. The seed of what makes them special (and what compelled me to hire them) is planted and starting to take root. I should be able to talk to teammates and co-workers and hear about how this new person is making an impact on our work and the company’s trajectory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>After 90 days, my new teammate should feel like a productive part of the team. At every point in those first 90 days, they should see little hints that they belong with this group of individuals making a thing together. After 90 days, they should feel confident that they <em>do</em> in fact belong with these folks and made a great choice when they accepted our offer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Writing a 90-day plan for new hires forces you to think through how to get them started. You won’t just throw them in the pool and say “good luck!” And, it tells your new hire that you’re a smart person who is invested in their success. Every leader should do this.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-10-19T15:58:16-07:00",
				"url": "https://therealadam.com/2020/10/19/onboard-new-teammates.html",
				"tags": ["Uncategorized","Surprisingly Effective"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/10/05/use-a-tag.html",
				"title": "Use a tag line that means something",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>I like that <a href=\"https://emberjs.com\">Ember's</a> tagline is about ambition. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>It's easy to write an empty, temporary tagline. \"Simple and good\". \"Only 4 kilobytes.\" It's harder to write a tagline that generates principles which stand the test of time. \"Simple and fast\" are in opposition. \"Only 4 kilobytes\"  is unlikely to last if the software evolves.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5501,\"sizeSlug\":\"large\",\"className\":\"is-style-rounded\"} -->\n<figure class=\"wp-block-image size-large is-style-rounded\"><img src=\"uploads/2024/bcc55301a6.jpg\" alt=\"Ember logo\" class=\"wp-image-5501\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>\"Ambitious\" as a tagline speaks to a number of qualities, but none of them are in conflict. An ambitious project could choose the boring tactics in favor of rapid delivery. Another ambitious project could aim for longevity. Yet another ambitious project might aim to have a large impact in the world or aim to do something previously considered implausible.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>For a framework the size of Ember, that's an appropriate diversity of goals. But they're all covered by ambition. The tagline unifies and clarifies as much as it inspires.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-10-05T08:51:00-07:00",
				"url": "https://therealadam.com/2020/10/05/use-a-tag.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/10/04/a-slice-of.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://buttondown.email/therealadam/archive/a-slice-of-the-old-way/\">A slice of the old way</a></p>\n",
				"date_published": "2020-10-04T13:40:57-07:00",
				"url": "https://therealadam.com/2020/10/04/a-slice-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/09/17/use-factories-to.html",
				"title": "Use factories to create jumbo object graphs",
				"content_html": "<p>The entire time I’ve been using <!-- raw HTML omitted -->FactoryBot<!-- raw HTML omitted -->, several years at this point, I’ve used it one factory at a time:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Do you see the mistake I <!-- raw HTML omitted -->make all the dang time<!-- raw HTML omitted -->? Spoiler alert, I forgot the company relation on Alice’s user, so she is either orphaned (unfortunate) or created on an entirely unrelated company. That’s gonna make my test fail in weird ways!</p>\n<p>Lately, I’ve been trying something different: create the whole object graph I want to test on in one fell swoop:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>The entire intent of the test scenario is made clear right here. And, the error I so often make is solved structurally rather than by vigilance.</p>\n<p>Granted, that’s pretty chunky and way more lines. I feel like it’s a worthy tradeoff!</p>\n<p>When I need to reference the models created by my jumbo object graph, I use RSpec <!-- raw HTML omitted -->let<!-- raw HTML omitted --> and ActiveRecord finders with a mind towards consistently finding the right thing:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "The entire time I’ve been using <a href=\"https://github.com/thoughtbot/factory_bot\">FactoryBot</a>, several years at this point, I’ve used it one factory at a time:\n\n<pre><code>company = create(:company, name: &quot;Acme, Inc.&quot;)\nalice = create(:user, name: &quot;Alice Smith&quot;)\nposts = create_list(:post, 3, user: alice)\n</code></pre>\n\nDo you see the mistake I <em>make all the dang time</em>? Spoiler alert, I forgot the company relation on Alice’s user, so she is either orphaned (unfortunate) or created on an entirely unrelated company. That’s gonna make my test fail in weird ways!\n\nLately, I’ve been trying something different: create the whole object graph I want to test on in one fell swoop:\n\n<pre><code>company = create(\n  :company,\n  name: &quot;Acme, Inc&quot;,\n  user: build(\n    :user,\n    name: &quot;Alice Smith&quot;,\n    posts: build_list(:post, 3)\n  )\n)\n</code></pre>\n\nThe entire intent of the test scenario is made clear right here. And, the error I so often make is solved structurally rather than by vigilance.\n\nGranted, that’s pretty chunky and way more lines. I feel like it’s a worthy tradeoff!\n\nWhen I need to reference the models created by my jumbo object graph, I use RSpec <code>let</code> and ActiveRecord finders with a mind towards consistently finding the right thing:\n\n<pre><code>let(:company) do\n  create(...) # the whole company bit from above\nend\nlet(:alice) { company.users.find_by(name: &quot;Alice Smith&quot;) }\nlet(:posts) { alice.posts }\n</code></pre>\n",
				"date_published": "2020-09-17T05:44:33-07:00",
				"url": "https://therealadam.com/2020/09/17/use-factories-to.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/09/15/053015.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://short.therealadam.com/uploads/2020/b19971510a.jpg\" alt=\"Sunset\" title=\"Sunset, before the rain\" border=\"0\" width=\"300\" height=\"300\" /></p>\n",
				"date_published": "2020-09-15T05:30:15-07:00",
				"url": "https://therealadam.com/2020/09/15/053015.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/09/13/how-to-succeed.html",
				"title": "How to succeed at blogging by not even trying too hard",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://simonwillison.net/2020/Sep/10/15-rules-blogging-and-my-current-streak/\">&#8220;Perfect is the enemy of shipped&#8221;</a> - Simon Willison</p>\n\n<p><a href=\"http://interconnected.org/home/2020/09/10/streak\">15 rules for blogging</a> - Matt Webb</p>\n\n<p><a href=\"https://duncandavidson.com\">Lists, emoji, and consistency</a> are totally working for Duncan Davidson</p>\n",
				"date_published": "2020-09-13T12:16:09-07:00",
				"url": "https://therealadam.com/2020/09/13/how-to-succeed.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/09/01/austin-kleons-list.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Austin Kleon&#8217;s list of perfect albums: <a href=\"https://austinkleon.com/2020/08/31/perfect31/\">#perfect31</a>. Non-compilation albums, no songs worth skipping. Discovering these albums is one of my favorite things about listening to music. <em>Blood Sugar Sex Magik</em> was the first one I found myself, when I was sixteen. Blew my mind.</p>\n",
				"date_published": "2020-09-01T09:01:11-07:00",
				"url": "https://therealadam.com/2020/09/01/austin-kleons-list.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/30/matt-webb-on.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Matt Webb on <a href=\"http://interconnected.org/home/2020/08/27/foundation\">Asimov’s Foundation, and what’s unique about science fiction</a>:</p>\n\n<blockquote>\n<p>Like any scientific endeavour it starts as a phenomenological exercise: what’s happening? How does this thing behave in various circumstances? Then beginning to probe: what are its limits? How do we break the premise? And finally consequences… what does it mean for this phenomenon to be wielded deliberately; what are the second order effects when others can see the effects …and so on. Dynamical systems are all the same; the reader can readily draw parallels and discover new truths.</p>\n</blockquote>\n\n<p>Writing is thinking. Sci-fi, at its best, is thinking about an idea taken to its end. Most sci-fi is a miss, but every once in a while it describes upcoming realities with absolute clarity, e.g. <em>Neuromancer</em>.</p>\n",
				"date_published": "2020-08-30T10:13:51-07:00",
				"url": "https://therealadam.com/2020/08/30/matt-webb-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/22/let-me-tell.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Let me tell you about my theories on art and fishing. </p>\n\n<p>This Ernest Hemingway story is <em>definitely</em> about <a href=\"https://www.newyorker.com/magazine/2020/06/08/pursuit-as-happiness\">fishing</a>. </p>\n\n<p>On the other hand, I have a theory that most Billy Joel songs are either a) <a href=\"https://www.youtube.com/watch?v=LVlDSzbrH5M\">definitely about a fisherman</a> or b) <em>could</em> exist in <a href=\"https://www.youtube.com/watch?v=hCuMWrfXG4E\">one world where the protagonist is a fishing professional</a>. Kinda the same thing with Bruce Springsteen song; the whole canon is <a href=\"https://www.youtube.com/watch?v=lc6F47Z6PI4\">one working-class world</a>.</p>\n\n<p>Except for songs about cars. Those are a whole <a href=\"https://www.youtube.com/watch?v=SuQrVDDSkH4\">other</a> <a href=\"https://www.youtube.com/watch?v=kmN4CNTni3I\">thing</a>.</p>\n",
				"date_published": "2020-08-22T10:09:41-07:00",
				"url": "https://therealadam.com/2020/08/22/let-me-tell.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/19/failure-entropy-due.html",
				"title": "Failure = entropy due to adding humans",
				"content_html": "<p>Here’s a real dinger of a sentence from Michael Lopp’s latest, <!-- raw HTML omitted --><!-- raw HTML omitted -->The Art of Leadership: Small Things, Done Well<!-- raw HTML omitted --><!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Growing an organization requires rethinking trust, coordination, and collaboration. The breakpoints where things go from working pretty well to an absolute shamble come faster than we think. They don’t even occur at nice, round numbers like base–2 or base–10 orders of magnitude.</p>\n<p>Figuring out how this works for teams, companies, social networks, and whole countries feels like one of the big unsolved problems of the knowledge/attention-era.</p>\n",
				"content_text": "Here&#8217;s a real dinger of a sentence from Michael Lopp&#8217;s latest, <em><a href=\"https://www.amazon.com/Art-Leadership-Small-Things-Done/dp/1492045691/ref=as_li_ss_tl?_encoding=UTF8&amp;psc=1&amp;refRID=MCGEW5A5D11KPYMTC08B&amp;&amp;linkCode=sl1&amp;tag=beigee-20&amp;linkId=723bba5ae7807896dd9c7e0002ed9bb1&amp;language=en_US\">The Art of Leadership: Small Things, Done Well</a></em>:\n\n<blockquote>\nFailure is created by the increasing entropy of a growing number of humans running around the building, good intentions in hand, breaking things.\n</blockquote>\n\nGrowing an organization requires rethinking trust, coordination, and collaboration. The breakpoints where things go from working pretty well to an absolute shamble come faster than we think. They don&#8217;t even occur at nice, round numbers like base&#8211;2 or base&#8211;10 orders of magnitude.\n\nFiguring out how this works for teams, companies, social networks, and whole countries feels like one of the big unsolved problems of the knowledge/attention-era.\n",
				"date_published": "2020-08-19T07:53:02-07:00",
				"url": "https://therealadam.com/2020/08/19/failure-entropy-due.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/17/ios-feature-request.html",
				"title": "iOS feature request: write-only interfaces \u0026 \"smoke-break\"",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Two iOS wishlist items:</p>\n\n<ol>\n<li>Any app that can send &amp; receive messages (emails, direct messages, photos, chats, tweets, etc.) should require a narrow, write-only affordance for sending a one-off message without distracting yourself in all the engagement loops.</li>\n<li>&#8220;Smoke-break&#8221;, an extension of the current screen time affordance. Only allow yourself access to e.g. Facebook, Twitter, TikTok, etc. for seven minutes of the hour. The easy part is integrating this into the operating system. The hard and most impactful part is keeping the Smoke-break name and all its negative connotations.</li>\n</ol>\n\n<p>The best way to achieve these outcomes now is to <strong>delete the app</strong> from your device and only dip into the web interface when you absolutely must. That&#8217;s contrary to Apple&#8217;s goals. It&#8217;s not bad for the web platform, though🤔.</p>\n\n<p>In short: nerf the engagement loops at the operating system level. </p>\n",
				"date_published": "2020-08-17T07:24:35-07:00",
				"url": "https://therealadam.com/2020/08/17/ios-feature-request.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/12/determined-disney-fan.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Determined <a href=\"https://twitter.com/djcarson/status/1292836604663304200?s=12\">Disney fan recreates the original Disneyland version of the Alice In Wonderland</a> ride-through in 3D. Same, but for <a href=\"http://virtual-toad.com\">Mr. Toad</a>, one of my top 3 Disneyland favorites.</p>\n",
				"date_published": "2020-08-12T08:13:58-07:00",
				"url": "https://therealadam.com/2020/08/12/determined-disney-fan.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/12/writing-is-thinking.html",
				"title": "Writing is thinking, so write about code",
				"content_html": "<p>Writing clarifies thinking. Therefore, writing design docs clarifies one&rsquo;s thinking about code. <!-- raw HTML omitted -->Design Docs at Google<!-- raw HTML omitted --> and <!-- raw HTML omitted -->an example/meta design doc<!-- raw HTML omitted --> from the same author are great places to start!</p>\n<p>I found that writing prose until I run out of clarity and then switching to proof-of-concept code is even better. The constraint of making an ambitious design work with a minimal change-set is a nice way to work for a day or so.</p>\n<p>Lots of features or fixes don’t require in-depth thinking to get started. But when they do, sorting out the ideas and tradeoffs in writing helps a lot.</p>\n<p>Write until I run out of ideas, flesh those ideas out, write about the nuances I found. It’s a nice feedback loop!</p>\n",
				"content_text": "Writing clarifies thinking. Therefore, writing design docs clarifies one's thinking about code. <a href=\"https://www.industrialempathy.com/posts/design-docs-at-google/\">Design Docs at Google</a> and <a href=\"https://www.industrialempathy.com/posts/design-doc-a-design-doc/\">an example/meta design doc</a> from the same author are great places to start!\n\nI found that writing prose until I run out of clarity and then switching to proof-of-concept code is even better. The constraint of making an ambitious design work with a minimal change-set is a nice way to work for a day or so.\n\nLots of features or fixes don&#8217;t require in-depth thinking to get started. But when they do, sorting out the ideas and tradeoffs in writing helps a lot.\n\nWrite until I run out of ideas, flesh those ideas out, write about the nuances I found. It&#8217;s a nice feedback loop!\n",
				"date_published": "2020-08-12T05:38:23-07:00",
				"url": "https://therealadam.com/2020/08/12/writing-is-thinking.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/10/bradford-fults-on.html",
				"title": "Bradford Fults on feedback and human bias",
				"content_html": "<p><!-- raw HTML omitted -->A Better Approach to 360° Feedback<!-- raw HTML omitted -->: Bradford Fults shares ways to route around fallible human memory and gather useful information when it comes to review season.</p>\n<!-- raw HTML omitted -->\n<p>Instead, ask questions in the context of how the reviewer works with the reviewed, particularly in the last 90 days or so. Paraphrasing Janet Jackson: <!-- raw HTML omitted -->“What Have You Done For Me Lately?”<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"https://bradfordfults.com/business/a-better-approach-to-360-feedback/\">A Better Approach to 360° Feedback</a>: Bradford Fults shares ways to route around fallible human memory and gather useful information when it comes to review season.\n\n<blockquote>\nHumans also have a recency bias and suffer from long-term memory distortions that change to fit their current opinions of other people. This means that “observations” from months ago often aren’t so much observations as they are current opinions and emotions repackaged as fixed stories about the past. Most people don’t even intend to distort the truth like this: it’s just the way the human brain works.\n</blockquote>\n\nInstead, ask questions in the context of how the reviewer works with the reviewed, particularly in the last 90 days or so. Paraphrasing Janet Jackson: <a href=\"https://www.youtube.com/watch?v=r9uizdKZAGE\">“What Have You Done For Me Lately?”</a>\n",
				"date_published": "2020-08-10T10:17:41-07:00",
				"url": "https://therealadam.com/2020/08/10/bradford-fults-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/10/in-my-toofrequent.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>In my too-frequent skimming of German sports cars for sale near me, I came across a BMW 135i with a black exterior <em>and</em> interior. It&#8217;s a tempting car, but I&#8217;m afraid it says &#8220;I listen to two kinds of music: Kraftwerk on cassette and Kraftwerk on vinyl&#8221;.👴</p>\n",
				"date_published": "2020-08-10T08:06:06-07:00",
				"url": "https://therealadam.com/2020/08/10/in-my-toofrequent.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/08/do-texans-dream.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://buttondown.email/therealadam/archive/do-texans-dream-of-summer-days/\">Do Texans Dream of Summer Days?</a></p>\n",
				"date_published": "2020-08-08T09:21:31-07:00",
				"url": "https://therealadam.com/2020/08/08/do-texans-dream.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/06/lancia-delta-integrale.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://bringatrailer.com/listing/1992-lancia-delta-integrale-martini5/\">1992 Lancia Delta Integrale Martini 5 Evoluzione</a>, Bring a Trailer fodder for the day. I can&#8217;t resist Martini Stripes. Or bright yellow, extremely 80s instruments.</p>\n\n<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://short.therealadam.com/uploads/2020/cc03e86650.png\" alt=\"Martini Stripes\" title=\"UntitledImage.png\" border=\"0\" width=\"598\" height=\"399\" /></p>\n\n<p><img style=\"display:block; margin-left:auto; margin-right:auto;\" src=\"https://short.therealadam.com/uploads/2020/3ca22ef045.png\" alt=\"Lancia Delta instruments\" title=\"UntitledImage.png\" border=\"0\" width=\"598\" height=\"399\" /></p>\n",
				"date_published": "2020-08-06T05:28:05-07:00",
				"url": "https://therealadam.com/2020/08/06/lancia-delta-integrale.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/08/02/watched-jim-gaffigans.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Watched Jim Gaffigan’s <em>The Pale Tourist</em>. I’m surprised one can dedicate an hour-long set to Canada alone, but he makes it work. Gaffigan’s not the edgiest comedian or most insightful orator, but he is delightful. And delightful is mostly what I want out of entertainment right now! Recommended.</p>\n",
				"date_published": "2020-08-02T16:06:48-07:00",
				"url": "https://therealadam.com/2020/08/02/watched-jim-gaffigans.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/29/unlocking-value-with.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://medium.com/ft-product-technology/unlocking-value-with-durable-teams-a70efb435a19\">Unlocking value with durable teams</a>, Anna Shipman:</p>\n\n<blockquote>\n<p>If you build teams around projects, this means that there is a ramp-up period while the team go through the early stages, and if the team is not together for long enough, it’s possible they won’t spend very long (if any time at all) in the performing stage. This happens if new initiatives come in and the team is disbanded to form other, new teams.</p>\n\n<p>It takes a lot of effort to form a team; you need to find the right balance of skills, someone to tech lead, delivery manage and be the product owner; you need to find engineers, customer researchers, product designers and possibly business analysts and you need to make sure that the work they are currently doing can be finished or stopped.</p>\n</blockquote>\n\n<p>Specialization and matrix&#8217;d teams seem inevitable as an organization grows. I suspect that a cross-functional, self-sufficient team that has time together and knows how to work together will almost always outperform teams of specialists spread across multiple projects and priorities.</p>\n\n<p>h/t <a href=\"https://simonwillison.net\">Simon Willison</a></p>\n",
				"date_published": "2020-07-29T06:19:34-07:00",
				"url": "https://therealadam.com/2020/07/29/unlocking-value-with.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/28/id-never-seriously.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I&#8217;d never seriously listened to Mazzy Star before today. Had really only heard &#8220;Fade Into You&#8221;. Now I&#8217;ve listened to all four albums and they&#8217;re a) pretty good! and b) kinda ahead of their time?</p>\n\n<p>I&#8217;m a little surprised that something so straight-forward and sounding very much of the nineties can predate music I associate more with the &#8220;indie sounds&#8221; of the 2000s and 2010s. Maybe I&#8217;ve just got my history wrong!</p>\n",
				"date_published": "2020-07-28T15:02:15-07:00",
				"url": "https://therealadam.com/2020/07/28/id-never-seriously.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/28/marketing-folks-should.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Marketing folks should dispense with &#8220;this is familiar-thing two point oh&#8221;. It&#8217;s always &#8220;Underpants 2.0&#8221; or &#8220;Butter Knife 3.0&#8221; and never &#8220;Non-stick pan 2.3&#8221;. Just call it like a straight-up Hollywood sequel. &#8220;Chair 4: The Sittening&#8221; or &#8220;Ball-point Pen 7 Part 1: The Penultimate&#8221;. 🥁👴</p>\n",
				"date_published": "2020-07-28T14:07:54-07:00",
				"url": "https://therealadam.com/2020/07/28/marketing-folks-should.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/28/bunkerpunk-short-scifi.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://sudowriters.com/anthology/bunkerpunk/\">Bunkerpunk</a>, short sci-fi from sudowriters, &#8220;a speculative fiction writing group&#8221;. My first foray into collected short science fiction. Recommended for modern, addled attention spans, those who are intentionally avoiding mega-tomes/epic fiction worlds, and/or the biographies of Robert Caro.</p>\n",
				"date_published": "2020-07-28T07:45:43-07:00",
				"url": "https://therealadam.com/2020/07/28/bunkerpunk-short-scifi.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/27/i-would-never.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I would never have guessed that &#8220;video memos&#8221; would become a thing in remote working. Rather than sending a wall of text (which people are unlikely to read or even expand in Slack), record a short (~5 minute) video summarizing the ideas in context with metrics, screenshots, etc.</p>\n\n<p>The jury&#8217;s still out on how this compares to a written memo culture. But, a marginal benefit of a video memo is you can watch it at greater than 1x speed and feel like you&#8217;re getting more out of your time! 💪</p>\n",
				"date_published": "2020-07-27T09:47:42-07:00",
				"url": "https://therealadam.com/2020/07/27/i-would-never.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/24/awesome-cold-showers.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://github.com/hwayne/awesome-cold-showers\">Awesome Cold Showers</a> - &#8220;\nIt&#8217;s great when people get excited about things, but sometimes they get a little too excited.&#8221; A collection of papers for when you don&#8217;t believe the hype and need to help others think that way too.</p>\n",
				"date_published": "2020-07-24T12:30:17-07:00",
				"url": "https://therealadam.com/2020/07/24/awesome-cold-showers.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/24/by-some-kind.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>By some kind of coincidence I&#8217;ve read <em>The Difference Engine</em> by Gibson &amp; Sterling followed by <em>Quicksilver</em> by Stephenson (re-read) and both are set partially in a London where covering once&#8217;s face for safety is prevalent. History repeats itself, historic/science fiction doubly so.</p>\n",
				"date_published": "2020-07-24T07:15:44-07:00",
				"url": "https://therealadam.com/2020/07/24/by-some-kind.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/23/alex-danco-the.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Alex Danco: <a href=\"https://danco.substack.com/p/the-freud-moment\">The Freud Moment</a> - You could draw a line from all of America’s divisiveness and much of the culture wars down to ego vs. superego.</p>\n\n<blockquote>\n<p>America’s egotistical bent doesn’t mean we lack a conscience: we carry around a ton of guilt, as part of the cost of letting egos run wild the way we do. The narrative of “the coastal elites want to tell you what to feel guilty about; we won’t let them” is effective for a reason: because we are collectively guilty of so many things, from climate change to police brutality and everything else. The Trump candidacy figured out how to exploit this better than anyone else: in a complex and interdependent world, everyone is basically guilty of everything. And when that’s true, no one can say “you should feel guilt” without sounding hypocritical. It’s a perfect judo move, because not only does it neutralize the superego’s ability to effectively level any criticism, it opens the door for the ego to go be as offensive as possible.</p>\n</blockquote>\n",
				"date_published": "2020-07-23T15:36:37-07:00",
				"url": "https://therealadam.com/2020/07/23/alex-danco-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/22/the-garden-of.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://aaronzlewis.com/blog/2020/07/07/the-garden-of-forking-memes/\">The Garden Of Forking Memes: How Digital Media Distorts Our Sense Of Time</a> - grab a beverage, this one made me think of time in a whole other way and reframed our narrative-heavy, fact-light information situation:</p>\n\n<blockquote>\n<p>The de-centralization of timekeeping brought about by digital media harkens back to a much older style of measuring time. Before the invention of the telegraph, there was no way to instantaneously synchronize timekeeping devices across long distances. No time zones, no universal standard against which clock towers could be evaluated for accuracy. Timekeeping was more an art than a science. Each village emitted its own time zone. Much like the townships of old, every internet community has its own “subjective time zone”.</p>\n\n<p>The disruption of the old timekeeping regime created a void that’s being filled by new online communities, cliques, and cults. Whereas the industrial schedule provided a sense of structure and stability and continuity, D.I.Y. timekeeping often feels aimless and disorienting and uncertain. People are seeking out groups and ideologies that put them “back in time”, and many internet subcultures do exactly that.</p>\n</blockquote>\n",
				"date_published": "2020-07-22T05:23:36-07:00",
				"url": "https://therealadam.com/2020/07/22/the-garden-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/21/tom-armitage-props.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://tomarmitage.com/2020/07/20/weeks-391-393-props-and-prototypes/\">Tom Armitage » Props and Prototypes</a> - props for movies are like prototypes for building technology. A hero’s lightsaber exists as different props for stunts, close-up shots, costuming, plus a digital version for CG shots. Clickable mockups, short video demos, and working code all serve different phases of a project. See also: <a href=\"https://short.therealadam.com/2020/07/18/conceptual-tools-for.html\">tools for thinking</a>.</p>\n",
				"date_published": "2020-07-21T07:58:08-07:00",
				"url": "https://therealadam.com/2020/07/21/tom-armitage-props.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/20/we-had-a.html",
				
				"content_html": "<p>We had a real dinger of a sunset last night</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "We had a real dinger of a sunset last night\n\n<img src=\"https://short.therealadam.com/uploads/2020/82e0640374.jpg\" width=\"600\" height=\"600\" alt=\"\" />\n",
				"date_published": "2020-07-20T16:25:58-07:00",
				"url": "https://therealadam.com/2020/07/20/we-had-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/20/i-finished-the.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>I finished the last season of <a href=\"https://en.wikipedia.org/wiki/Star_Wars:_The_Clone_Wars_(2008_TV_series)\"><em>The Clone Wars</em></a> over the weekend. Recommended for all Star Wars fans. Hot take: the last four episode arc is a better Star War than <em>Rise of Skywalker</em>.</p>\n",
				"date_published": "2020-07-20T08:03:12-07:00",
				"url": "https://therealadam.com/2020/07/20/i-finished-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/18/oddisees-new-ep.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Oddisee&#8217;s new EP <a href=\"https://www.stereogum.com/2091852/stream-oddisees-gorgeous-surprise-new-ep-odd-cure/music/\"><em>Odd Cure</em></a> has skits, but they&#8217;re recorded phone calls keeping up with his family and friends. Kind of a perfect version of the <a href=\"https://short.therealadam.com/2020/07/17/albums-with-acceptable.html\">interstitial skit</a> for this moment in history.</p>\n",
				"date_published": "2020-07-18T10:03:57-07:00",
				"url": "https://therealadam.com/2020/07/18/oddisees-new-ep.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/18/conceptual-tools-for.html",
				"title": "Conceptual tools for thinking",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://untools.co/\">Untools</a> is a collection of mental models for thinking about problems, projects, and ideas. For example, the latest tool, the <a href=\"https://untools.co/cynefin-framework\">Cynefin framework</a> is useful for assessing the kind of problem you face (complex, complicated, chaotic, or obvious) to determine what kind of strategy is appropriate for tackling it. Makes for a handy afternoon research dive.</p>\n\n<p>There&#8217;s something interesting about Untools as website. Under the hood, there&#8217;s not much to it; you could implement it with a static site generator. By that measure, I might describe this as a &#8220;brochure&#8221; site. But the attention to design and organization makes it feel much more like a product. Delightfully, one that doesn&#8217;t seek a commercial transaction. More like flipping someone&#8217;s personal but well-organized notes on conceptual tools. Feels novel, in an obvious way.</p>\n",
				"date_published": "2020-07-18T09:17:30-07:00",
				"url": "https://therealadam.com/2020/07/18/conceptual-tools-for.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/17/albums-with-acceptable.html",
				
				"content_html": "<p>Albums with acceptable skits between tracks:</p>\n<ul>\n<li><em>Three Feet High and Rising</em> by De La Soul</li>\n<li><em>The Listening</em> by Little Brother (TIL!)</li>\n</ul>\n<p>That&rsquo;s it, as far as I know. It&rsquo;s <strong>exceedingly</strong> difficult to pull off skit tracks.</p>\n<p>p.s. there may be an Outkast or Goodie Mob album with <em>nearly</em> acceptable skits?</p>\n",
				"content_text": "Albums with acceptable skits between tracks:\n\n- _Three Feet High and Rising_ by De La Soul\n- _The Listening_ by Little Brother (TIL!)\n\nThat's it, as far as I know. It's **exceedingly** difficult to pull off skit tracks.\n\np.s. there may be an Outkast or Goodie Mob album with _nearly_ acceptable skits?\n",
				"date_published": "2020-07-17T08:19:04-07:00",
				"url": "https://therealadam.com/2020/07/17/albums-with-acceptable.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/17/how-i-got.html",
				
				"content_html": "<p><a href=\"https://craigmod.com/essays/how_i_got_my_attention_back/\">How I Got My Attention Back</a> - doing a residency and totally disconnecting is implausible for most people. But the idea is great and Craig Mod spins a great story every time I read him.</p>\n",
				"content_text": "[How I Got My Attention Back](https://craigmod.com/essays/how_i_got_my_attention_back/) - doing a residency and totally disconnecting is implausible for most people. But the idea is great and Craig Mod spins a great story every time I read him.\n",
				"date_published": "2020-07-17T05:44:13-07:00",
				"url": "https://therealadam.com/2020/07/17/how-i-got.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/16/writing-better-typesafe.html",
				
				"content_html": "<p><a href=\"https://engineering.shopify.com/blogs/engineering/writing-better-type-safe-code-with-sorbet\">Writing Better, Type-safe Code with Sorbet</a>. Hot take: gradual typing of large Rails codebases is going to make developers more productive than microservices, radical decoupling, and splitting out SPAs has. Combined.</p>\n",
				"content_text": "[Writing Better, Type-safe Code with Sorbet](https://engineering.shopify.com/blogs/engineering/writing-better-type-safe-code-with-sorbet). Hot take: gradual typing of large Rails codebases is going to make developers more productive than microservices, radical decoupling, and splitting out SPAs has. Combined.\n",
				"date_published": "2020-07-16T16:10:37-07:00",
				"url": "https://therealadam.com/2020/07/16/writing-better-typesafe.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/16/how-starship-troopers.html",
				
				"content_html": "<p><a href=\"https://www.newyorker.com/culture/culture-desk/how-starship-troopers-aligns-with-our-moment-of-american-defeat\">How “Starship Troopers” Aligns with Our Moment of American Defeat</a></p>\n<blockquote>\n<p>For most of “Starship Troopers,” humanity, in every possible facet, gets its ass kicked. A culture that reveres and communicates exclusively through violence—a culture very much like one that responds to peaceful protests with indiscriminate police brutality, or whose pandemic strategy is to “dominate” an unreasoning virus—keeps running up against its own self-imposed limitations.</p>\n</blockquote>\n<p>Well that hits home.</p>\n",
				"content_text": "[How “Starship Troopers” Aligns with Our Moment of American Defeat](https://www.newyorker.com/culture/culture-desk/how-starship-troopers-aligns-with-our-moment-of-american-defeat)\n\n> For most of “Starship Troopers,” humanity, in every possible facet, gets its ass kicked. A culture that reveres and communicates exclusively through violence—a culture very much like one that responds to peaceful protests with indiscriminate police brutality, or whose pandemic strategy is to “dominate” an unreasoning virus—keeps running up against its own self-imposed limitations.\n\nWell that hits home.\n",
				"date_published": "2020-07-16T05:27:27-07:00",
				"url": "https://therealadam.com/2020/07/16/how-starship-troopers.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/15/terrace-martin-in.html",
				
				"content_html": "<p>Terrace Martin in heavy rotation this week: <a href=\"https://music.apple.com/us/album/808s-sax-breaks-ep/347401498\">808s and Sax Breaks</a> and <a href=\"https://music.apple.com/us/album/dinner-party/1518676061\">Dinner Party</a> 👍👍 Robert Glasper, 9th Wonder, and Kamasi Washington mean you can&rsquo;t lose!</p>\n",
				"content_text": "Terrace Martin in heavy rotation this week: [808s and Sax Breaks](https://music.apple.com/us/album/808s-sax-breaks-ep/347401498) and [Dinner Party](https://music.apple.com/us/album/dinner-party/1518676061) 👍👍 Robert Glasper, 9th Wonder, and Kamasi Washington mean you can't lose!\n",
				"date_published": "2020-07-15T13:25:55-07:00",
				"url": "https://therealadam.com/2020/07/15/terrace-martin-in.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/15/tips-from-hbos.html",
				
				"content_html": "<p><a href=\"https://qz.com/1879381/tips-from-hbos-watchmen-on-building-an-inclusive-workplace/\">Tips from HBO’s Watchmen on building an inclusive workplace</a>:</p>\n<blockquote>\n<p>The most valuable thing a showrunner—or any manager—can do to create an inclusive workplace is to listen carefully and respectfully to what their employees have to say, while checking their own defensiveness.</p>\n</blockquote>\n<p>The overlap between showrunning and managing a team creating software continue to intrigue.</p>\n",
				"content_text": "[Tips from HBO’s Watchmen on building an inclusive workplace](https://qz.com/1879381/tips-from-hbos-watchmen-on-building-an-inclusive-workplace/):\n\n> The most valuable thing a showrunner—or any manager—can do to create an inclusive workplace is to listen carefully and respectfully to what their employees have to say, while checking their own defensiveness.\n\nThe overlap between showrunning and managing a team creating software continue to intrigue.\n",
				"date_published": "2020-07-15T04:48:08-07:00",
				"url": "https://therealadam.com/2020/07/15/tips-from-hbos.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/14/periodic-reminder-that.html",
				
				"content_html": "<p>Periodic reminder that we are worse off for letting folks run Kathy Sierra off the social parts of the internet.</p>\n",
				"content_text": "Periodic reminder that we are worse off for letting folks run Kathy Sierra off the social parts of the internet.\n",
				"date_published": "2020-07-14T08:42:34-07:00",
				"url": "https://therealadam.com/2020/07/14/periodic-reminder-that.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/07/13/peak-texas-weather.html",
				
				"content_html": "<p>Peak Texas weather. The moment I step outside, I’m thoroughly warmed by the sun. A pleasant glow. For 5 seconds. Then it’s time to plan how I’m getting back to climate control. Rinse and repeat until mid-September.</p>\n<p>I probably write this every summer because every summer I love it.</p>\n",
				"content_text": "Peak Texas weather. The moment I step outside, I’m thoroughly warmed by the sun. A pleasant glow. For 5 seconds. Then it’s time to plan how I’m getting back to climate control. Rinse and repeat until mid-September.\n\nI probably write this every summer because every summer I love it.\n",
				"date_published": "2020-07-13T18:10:51-07:00",
				"url": "https://therealadam.com/2020/07/13/peak-texas-weather.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/06/06/the-cool-zone.html",
				
				"content_html": "<p><a href=\"https://kneelingbus.substack.com/p/128-the-cool-zone\">The Cool Zone</a>:</p>\n<blockquote>\n<p>The pandemic that has dominated the past three months strikes a useful contrast with what’s happening now. Unlike coronavirus, racism and police violence are problems caused by humans. There’s a saying, “You aren’t stuck in traffic, you are traffic.” Similarly, the unrest occurring right now isn’t something that is happening to anyone, but a phenomenon that everyone is a part of, even if they haven’t left home or directly participated at all. Like traffic, the reason you’re surrounded by protests is partially because of you, regardless of your perceived level of involvement.</p>\n</blockquote>\n",
				"content_text": "[The Cool Zone](https://kneelingbus.substack.com/p/128-the-cool-zone):\n\n> The pandemic that has dominated the past three months strikes a useful contrast with what’s happening now. Unlike coronavirus, racism and police violence are problems caused by humans. There’s a saying, “You aren’t stuck in traffic, you are traffic.” Similarly, the unrest occurring right now isn’t something that is happening to anyone, but a phenomenon that everyone is a part of, even if they haven’t left home or directly participated at all. Like traffic, the reason you’re surrounded by protests is partially because of you, regardless of your perceived level of involvement.\n",
				"date_published": "2020-06-06T08:22:05-07:00",
				"url": "https://therealadam.com/2020/06/06/the-cool-zone.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/06/01/the-project-management.html",
				"title": "The project management corollary to Hofstadter's Law",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://en.wikipedia.org/wiki/Hofstadter%27s_law\">Hofstadter's Law</a>: It always takes longer than you expect, even when you take into account Hofstadter's Law.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Corollary: It always takes more repetitions to tell people what you're doing, how you're going to do it, why you're doing it, how much progress you've made, that you finished doing it, etc. even when you take into account the corollary to Hofstadter's Law.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-06-01T08:00:29-07:00",
				"url": "https://therealadam.com/2020/06/01/the-project-management.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/31/never-give-up.html",
				
				"content_html": "<p><a href=\"https://buttondown.email/therealadam/archive/never-give-up-on-reading-the-whole-internet/\">Never give up on reading the whole internet\n</a></p>\n",
				"content_text": "[Never give up on reading the whole internet\n](https://buttondown.email/therealadam/archive/never-give-up-on-reading-the-whole-internet/)\n",
				"date_published": "2020-05-31T15:20:46-07:00",
				"url": "https://therealadam.com/2020/05/31/never-give-up.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/30/towards-smaller-javascript.html",
				"title": "Towards smaller JavaScript",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>The JavaScript ecosystem’s gone to a strange place where dense frameworks and complex tooling are the status quo. But, there are data-points suggesting the pendulum could swing back sooner than later:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li><a href=\"https://www.snowpack.dev/posts/2020-05-26-snowpack-2-0-release/\">Snowpack 2.0</a> - download all your deps, import them as modules. Snappy development experience ensues.</li><li><a href=\"https://lit-html.polymer-project.org/\">lit-html</a> - generate DOM without going through React/Vue/etc. intricacies</li><li><a href=\"https://github.com/alpinejs/alpine/\">Alpine.js</a> - attach dynamic interactions to elements with data elements describing DOM manipulations</li><li><a href=\"https://htmx.org/docs\">htmx</a> - attach dynamic networking to elements with data elements describing AJAX/Websocket/SSE events</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Caveat: I haven't tried any of these. But, the trend-line is promising. JavaScript the language, while not perfect, is Pretty Good now. Perhaps the next few years will see the great ideas of the frameworks squeezed into more accessible, less sprawling expressions of those ideas.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-05-30T09:54:32-07:00",
				"url": "https://therealadam.com/2020/05/30/towards-smaller-javascript.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/29/190628.html",
				
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
				"content_text": "<img src=\"https://short.therealadam.com/uploads/2020/9d57ead097.jpg\" width=\"600\" height=\"600\" alt=\"\" /><img src=\"https://short.therealadam.com/uploads/2020/cf45b37564.jpg\" width=\"600\" height=\"600\" alt=\"\" />\n",
				"date_published": "2020-05-29T19:06:28-07:00",
				"url": "https://therealadam.com/2020/05/29/190628.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/29/a-tale-of.html",
				
				"content_html": "<p><a href=\"https://fabiensanglard.net/cpc/index.html\">A tale of Ghosts&rsquo;n Goblins&rsquo;n Crocodiles</a></p>\n<blockquote>\n<p>There is something noble about developing on a dead platform &ndash; it is so completely for the joy of the development, without any commercial motivation.</p>\n<ul>\n<li>John Carmack</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>When does a platform truly &ldquo;dies&rdquo;? A &ldquo;dead language&rdquo; is defined as &ldquo;a language which is no longer in everyday spoken use&rdquo;. By analogy, a dead platform would die not when it ceases to be profitable or when it is obsolete, but when people stop playing it and caring about it.</p>\n</blockquote>\n<blockquote>\n<p>Now the question becomes &ldquo;what draws people to retro-computing?&rdquo;. Is it nostalgia, the diversity, the creativity, the simplicity, or is it inexplicably fun?</p>\n</blockquote>\n<p>Come for the sentiment, stay for the backstory of an old computer you may have never even known existed.</p>\n",
				"content_text": "[A tale of Ghosts'n Goblins'n Crocodiles](https://fabiensanglard.net/cpc/index.html)\n\n\n> There is something noble about developing on a dead platform -- it is so completely for the joy of the development, without any commercial motivation. \n> - John Carmack\n\n> When does a platform truly \"dies\"? A \"dead language\" is defined as \"a language which is no longer in everyday spoken use\". By analogy, a dead platform would die not when it ceases to be profitable or when it is obsolete, but when people stop playing it and caring about it. \n\n> Now the question becomes \"what draws people to retro-computing?\". Is it nostalgia, the diversity, the creativity, the simplicity, or is it inexplicably fun?\n\nCome for the sentiment, stay for the backstory of an old computer you may have never even known existed.\n",
				"date_published": "2020-05-29T16:46:33-07:00",
				"url": "https://therealadam.com/2020/05/29/a-tale-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/29/the-possibility-of.html",
				"title": "The possibility of software through the ages",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>The gestalt of what's new in software and how it's changing our world has evolved over the decades.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the ‘90s, it was “don’t make me think!”. User interfaces went from text-based systems that required memorization and expertise to graphical systems that afforded more casual use of computers. Unix users and their terminals are a notable holdout to this day.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the ‘00s, it was “don’t make me remember!”. The internet let us to stop worrying about access to common knowledge. Search engines, news feeds, e-commerce, and listing sites made it pretty easy to answer many questions without a resident expert. Nascent social platforms made it possible for our “friends” to feed this information back to us. Notable holdouts: it was impossible for me to search for punchlines from SNL skits, and largely still is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In the ‘10s, it was “don’t make me describe the content I want to see!”. The now-giant tech companies figured out that their products were more “engaging” if they pushed content <em>to</em> people instead of people clicking around and typing queries to describe what they want. Thus was born machine learning, recommendation systems, and infinite/algorithmic feed scrolling. Notable holdout: none, the blast radius of ad-tech is wide and far-reaching.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>From this particular moment, it seems like the ‘20s are going to be “don’t make me leave my enclave”. Even if there’s a breakthrough in medicine and this pandemic is a temporary blip, the writing seems like it’s on the wall. Many kinds of service and retail commerce we used to go out into the world to interact with, along with offices, are going to fade away as climate changes and viruses come and go. Notable holdout: the not-so-middle class folks who do the machine's bidding and keep the wheels of commerce rolling.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Over three decades, things are at once noticeably better and yet there's vast room for improvement. If you're wondering where impactful work can be done in technology, it's in making the benefits of the technology we're building for the middle/upper classes today available to the less fortunate tomorrow. If we can make fantastic televisions available to everyone, surely we can improve the outcomes that matter most in everyone's lives.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If we could bend this curve, the '20s could be the decade of \"no pithy quote, just people helping their neighbors.\"</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-05-29T14:40:56-07:00",
				"url": "https://therealadam.com/2020/05/29/the-possibility-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/27/yin-and-yang.html",
				
				"content_html": "<p><a href=\"https://www.perell.com/tweetstorms/yin-yang\">Yin and Yang: Lessons of Creativity — David Perell</a></p>\n<blockquote>\n<p>Flow states are the holy grail of productivity. To achieve flow, we need a proper skill-challenge ratio.\nSkill: Yin (Order)\nChallenge: Yang (Chaos)\nWe do best when we’re pursuing goals that are a little bit tougher than what we can easily accomplish.</p>\n</blockquote>\n<p>A little bit of disorder makes many things better!</p>\n",
				"content_text": "[Yin and Yang: Lessons of Creativity — David Perell](https://www.perell.com/tweetstorms/yin-yang)\n\n> Flow states are the holy grail of productivity. To achieve flow, we need a proper skill-challenge ratio.\n> Skill: Yin (Order)\n> Challenge: Yang (Chaos)\n> We do best when we’re pursuing goals that are a little bit tougher than what we can easily accomplish.\n\nA little bit of disorder makes many things better!\n",
				"date_published": "2020-05-27T17:32:05-07:00",
				"url": "https://therealadam.com/2020/05/27/yin-and-yang.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/27/dear-apple-music.html",
				
				"content_html": "<p>Dear Apple Music algorithms,</p>\n<p>The center item is not at all like the others.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Dear Apple Music algorithms,\n\nThe center item is not at all like the others.\n\n<img src=\"https://short.therealadam.com/uploads/2020/4f53efc443.jpg\" width=\"600\" height=\"169\" alt=\"Album covers of J-Dilla, Madlib, Shaquille O’Neal, Big Krit, Slum Village\" />\n",
				"date_published": "2020-05-27T06:27:52-07:00",
				"url": "https://therealadam.com/2020/05/27/dear-apple-music.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/27/h-is-magic.html",
				
				"content_html": "<p><a href=\"https://sidbala.com/h-264-is-magic/\">H.264 is Magic</a>. There&rsquo;s so much amazing stuff you can do with math in the pursuit of distinctly non-math-y endeavors. I’ve always thought compilers, and their cousins the query optimizer, are magic. Computer graphics too. Turns out video compression is also uniquely amazing.</p>\n",
				"content_text": "[H.264 is Magic](https://sidbala.com/h-264-is-magic/). There's so much amazing stuff you can do with math in the pursuit of distinctly non-math-y endeavors. I’ve always thought compilers, and their cousins the query optimizer, are magic. Computer graphics too. Turns out video compression is also uniquely amazing.\n",
				"date_published": "2020-05-27T05:32:30-07:00",
				"url": "https://therealadam.com/2020/05/27/h-is-magic.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/26/bonus-quote-from.html",
				
				"content_html": "<p>Bonus quote from <a href=\"https://www.wired.com/1999/01/eno/\">Revenge of the Intuitive</a>:</p>\n<blockquote>\n<p>Years ago I realized that the recording studio was becoming a musical instrument. I even lectured about it, proclaiming that “by turning sound into malleable material, studios invite you to construct new worlds of sounds as painters construct worlds of form and color.” I was thrilled at how people were using studios to make music that otherwise simply could not exist. Studios opened up possibilities. But now I’m struck by the insidious, computer-driven tendency to take things out of the domain of muscular activity and put them into the domain of mental activity.</p>\n</blockquote>\n<p>I am, in general, a sucker for the notion of the studio as a kind of musical instrument unto itself. It&rsquo;s a very maximalist, Romantic-era symphony sort of thinking. I want to be <em>Pet Sounds</em>-era Brian Wilson or <em>Rite of Spring</em>-era Stravinksy when I grow up.</p>\n",
				"content_text": "Bonus quote from [Revenge of the Intuitive](https://www.wired.com/1999/01/eno/):\n\n> Years ago I realized that the recording studio was becoming a musical instrument. I even lectured about it, proclaiming that “by turning sound into malleable material, studios invite you to construct new worlds of sounds as painters construct worlds of form and color.” I was thrilled at how people were using studios to make music that otherwise simply could not exist. Studios opened up possibilities. But now I’m struck by the insidious, computer-driven tendency to take things out of the domain of muscular activity and put them into the domain of mental activity.\n\nI am, in general, a sucker for the notion of the studio as a kind of musical instrument unto itself. It's a very maximalist, Romantic-era symphony sort of thinking. I want to be _Pet Sounds_-era Brian Wilson or _Rite of Spring_-era Stravinksy when I grow up.\n",
				"date_published": "2020-05-26T05:23:16-07:00",
				"url": "https://therealadam.com/2020/05/26/bonus-quote-from.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/25/the-revenge-of.html",
				"title": "The Revenge of the Intuitive and developer tools in 2020",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://www.wired.com/1999/01/eno/\">The Revenge of the Intuitive</a>&nbsp;- Brian Eno lamented the downsides of a modern, computer-based recording console. Twenty years ago! The trade-offs for “freedom” at the expense of human affordances were too much for Eno at the time.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Feels like we’re in a similar spot with developer tooling. It works for the most accomplished and persistent of us. For many people who would&nbsp;<em>like</em>&nbsp;to build software, it’s too much. It’s too easy for our castles of complexity to thwart the novices.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>The trouble begins with a design philosophy that equates “more options” with “greater freedom.” Designers struggle endlessly with a problem that is almost nonexistent for users: “How do we pack the maximum number of options into the minimum space and price?” In my experience, the instruments and tools that endure (because they are loved by their users) have limited options</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>You could just as easily write this today about software development libraries and tools. Too many of them discard pretty good ideas about how to build applications. Too much fascination with meta-tooling. Not enough thought put into how to put applications in people’s hands.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>With tools, we crave intimacy. This appetite for emotional resonance explains why users - when given a choice - prefer deep rapport over endless options. You can’t have a relationship with a device whose limits are unknown to you, because without limits it keeps becoming something else.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>We need standalone tools and libraries to build upon. However, well-curated, opinionated developers tools are where the magic happens. Frameworks like Rails, Tailwind, Next.js are where the leverage is.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A determined expert can build an application from building blocks. Novices can at least get started with a well-crafted framework. A good community and forgiving documentation can get them through the valleys of confusion to the peaks of accomplishment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perhaps low/no-code tools will bring the benefit of the “golden, narrow path” to more people. Maybe the trade-winds of developer tooling will blow away from showmanship back to accessibility. Either way, we should tidy up our house and make software development more welcoming to those who aren’t already monks in the monastery.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-05-25T12:51:40-07:00",
				"url": "https://therealadam.com/2020/05/25/the-revenge-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/25/112500.html",
				
				"content_html": "<p><a href=\"https://therealadam.com/2020/05/25/the-revenge-of-the-intuitive-and-developer-tools-in-2020/\">The Revenge of the Intuitive and developer tools in 2020</a></p>\n",
				"content_text": "[The Revenge of the Intuitive and developer tools in 2020](https://therealadam.com/2020/05/25/the-revenge-of-the-intuitive-and-developer-tools-in-2020/)\n",
				"date_published": "2020-05-25T11:25:00-07:00",
				"url": "https://therealadam.com/2020/05/25/112500.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/24/they-say-never.html",
				"title": "They say never let a good crisis go to waste",
				"content_html": "<p>We should use the pandemic to reevaluate how we value service, child care, and education labor. It’s apparent we undervalued them. Their value is now explicit for those clamoring for a return to paying people to handle their chores and obligations. So let’s pay them more when we emerge from this!</p>\n<p>The burden of navigating urban sprawl to reach our offices, shops, and entertainment is now explicit. Density won’t be the answer for this is in the short or medium term. Perhaps we could value the ease by which we can drive around right now and work backwards from there.</p>\n<p>The bit that has worried me is how density is no longer a virtue. Public transport and dense neighborhoods won’t be desirable for a while. What’s the alternative that reduces our environmental toll and increases the cohesion of our neighborhoods?</p>\n",
				"content_text": "We should use the pandemic to reevaluate how we value service, child care, and education labor. It’s apparent we undervalued them. Their value is now explicit for those clamoring for a return to paying people to handle their chores and obligations. So let’s pay them more when we emerge from this!\n\nThe burden of navigating urban sprawl to reach our offices, shops, and entertainment is now explicit. Density won’t be the answer for this is in the short or medium term. Perhaps we could value the ease by which we can drive around right now and work backwards from there.\n\nThe bit that has worried me is how density is no longer a virtue. Public transport and dense neighborhoods won’t be desirable for a while. What’s the alternative that reduces our environmental toll and increases the cohesion of our neighborhoods?\n",
				"date_published": "2020-05-24T09:24:56-07:00",
				"url": "https://therealadam.com/2020/05/24/they-say-never.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/21/building-quality-things.html",
				
				"content_html": "<p>“Building quality things of substance takes time.” - Rands in Repose, <a href=\"https://randsinrepose.com/archives/one-thing/\">One Thing</a></p>\n",
				"content_text": "“Building quality things of substance takes time.” - Rands in Repose, [One Thing](https://randsinrepose.com/archives/one-thing/)\n",
				"date_published": "2020-05-21T08:08:49-07:00",
				"url": "https://therealadam.com/2020/05/21/building-quality-things.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/20/why-netnewswire-is.html",
				
				"content_html": "<p><a href=\"https://inessential.com/2020/05/18/why_netnewswire_is_fast\">Why NetNewsWire Is Fast</a> - I love it when Brent Simmons writes about system design and principles.</p>\n",
				"content_text": "[Why NetNewsWire Is Fast](https://inessential.com/2020/05/18/why_netnewswire_is_fast) - I love it when Brent Simmons writes about system design and principles.\n",
				"date_published": "2020-05-20T06:50:09-07:00",
				"url": "https://therealadam.com/2020/05/20/why-netnewswire-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/17/one-strong-center.html",
				"title": "One strong center and two senses stimulated",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I rented a 12-year old Porsche Boxster via <a href=\"https://turo.com\">Turo</a> this weekend. Good app, great car. I’m shopping older German convertibles for my next car. Paying a little to rent a prospective car for a day is way better than driving one for less than an hour. Plus, no sales tactics!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5458,\"width\":480,\"height\":360,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"uploads/2024/c630693c6e.jpg\" alt=\"\" class=\"wp-image-5458\" width=\"480\" height=\"360\" /><figcaption>I swear this isn’t a headshot for a TV show set in an era where masculine pastels are Extremely The Thing.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>The center of the Boxster experience, it turns out, is the tachometer and the engine. The tachometer is dead-center, set in distinctly-Porsche numerals with a digital speedometer in the bottom. You don’t <em>want</em>  any other gauges. It’s nice to know when you’re about to run out of fuel, I suppose.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5457,\"width\":380,\"height\":506,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large is-resized\"><img src=\"https://therealadam.com/wp-content/uploads/2020/05/f7e374ad-fd5d-4b01-82d5-973f24b12e4f_1_105_c.jpeg?w=768\" alt=\"2008 Porsche Boxster speedometer and tachometer\" class=\"wp-image-5457\" width=\"380\" height=\"506\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>The flat-six cylinder engine sits right behind your shoulders. It is, according to my wife, loud. I found it sonorous. I don’t have a picture of it because you literally can’t see it without taking the car apart. And, a picture of a dirty machine with 130,000 miles isn’t right. The engine on a Porsche is meant, and designed, to be <em>heard</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Once I was between that tachometer and engine, I knew I was definitely in a Porsche Bubble. The switches, seats, even entertainment system didn’t matter much. It helped that it was a lovely day and the air conditioner was up to the challenge. But it’s all auxiliary to the sights and sounds.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Turns out, that’s sort of all you need. A strong design center and two senses stimulated can make a product that stands the test of a decade or three.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-05-17T17:04:21-07:00",
				"url": "https://therealadam.com/2020/05/17/one-strong-center.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/05/12/tools-for-plaintext.html",
				"title": "Tools for plain-text thinking",
				"content_html": "<p><a href=\"https://margin.love\">Margin</a> is a plain text notation for thinking in lists, notes, and structured data. I have a soft spot for notations for thinking like, e.g. <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a>, <a href=\"https://www.taskpaper.com\">TaskPaper</a>, even <a href=\"https://bulletjournal.com\">bullet journaling</a>.</p>\n<p>The mark of a nicely designed plain text format is that it works equally well in a well-crafted app, a text editor, and on a sheet of paper. Margin meets that criteria.</p>\n",
				"content_text": "[Margin](https://margin.love) is a plain text notation for thinking in lists, notes, and structured data. I have a soft spot for notations for thinking like, e.g. [Markdown](https://daringfireball.net/projects/markdown/), [TaskPaper](https://www.taskpaper.com), even [bullet journaling](https://bulletjournal.com). \n\nThe mark of a nicely designed plain text format is that it works equally well in a well-crafted app, a text editor, and on a sheet of paper. Margin meets that criteria.\n",
				"date_published": "2020-05-12T06:12:09-07:00",
				"url": "https://therealadam.com/2020/05/12/tools-for-plaintext.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/26/no-way-through.html",
				
				"content_html": "<p><a href=\"https://buttondown.email/therealadam/archive/now-way-through-but-together/\">No way through but together</a></p>\n",
				"content_text": "[No way through but together](https://buttondown.email/therealadam/archive/now-way-through-but-together/)\n",
				"date_published": "2020-04-26T12:38:08-07:00",
				"url": "https://therealadam.com/2020/04/26/no-way-through.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/24/the-bremont-argonaut.html",
				
				"content_html": "<p><a href=\"https://www.hodinkee.com/articles/the-bremont-argonaut-hands-on\">The Bremont Argonaut</a> - there&rsquo;s a lot of &ldquo;ink&rdquo; on this watch face, but it doesn&rsquo;t seem busy. Even more, the marks on the crowns are the real winners.</p>\n<p>![https://hodinkee.imgix.net/uploads/images/1586281720176-9qegaqjnjs7-0243d3e3c71e5244dc4c03c63b5282cd/L1180502.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;ch=Width%2CDPR%2CSave-Data&amp;fit=crop&amp;w=820](Bremont Argonaut crowns)</p>\n",
				"content_text": "[The Bremont Argonaut](https://www.hodinkee.com/articles/the-bremont-argonaut-hands-on) - there's a lot of \"ink\" on this watch face, but it doesn't seem busy. Even more, the marks on the crowns are the real winners.\n\n\n![https://hodinkee.imgix.net/uploads/images/1586281720176-9qegaqjnjs7-0243d3e3c71e5244dc4c03c63b5282cd/L1180502.jpg?ixlib=rails-1.1.0&fm=jpg&q=55&auto=format&usm=12&ch=Width%2CDPR%2CSave-Data&fit=crop&w=820](Bremont Argonaut crowns)\n",
				"date_published": "2020-04-24T07:51:17-07:00",
				"url": "https://therealadam.com/2020/04/24/the-bremont-argonaut.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/22/the-second-best.html",
				
				"content_html": "<p>The second best sunset of the week (Monday)</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The second best sunset of the week (Monday)\n\n<img src=\"https://short.therealadam.com/uploads/2020/3bab02ae35.jpg\" width=\"600\" height=\"450\" alt=\"\" />\n",
				"date_published": "2020-04-22T18:14:03-07:00",
				"url": "https://therealadam.com/2020/04/22/the-second-best.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/20/manage-for-time.html",
				"title": "Manage for time and mental burden",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Features in software are answers to questions. How can customers send what they're looking at to someone else? That's share via email. How can customers distill all the data about my project's tasks down to raw data to analyze it? That's a report, probably with a CSV export.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>All of these answers exist on some kind of spectrum. There are simplistic and sophisticated answers. Maybe reporting has no interaction affordances at all; it's an HTML table and a link to download it as a CSV. Perhaps reporting is full of interactions, using metaphors of spreadsheets like sorting or filtering.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>It hurts to waste time and effort. We get attached to the things we work on. But that’s the Sunk Cost Fallacy talking. If you don’t think a feature is worth the time it takes to make it great, then it is not rational to ship a crappier version simply because you have sunk time into it.</p><cite><strong><em>Julie Zhou</em></strong>, <a href=\"https://medium.com/the-year-of-the-looking-glass/how-to-make-things-high-quality-f466f875227d\">How to Make Things High-Quality</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Early in the development of a feature is the time to seriously consider whether to ship the simplistic or sophisticated version of the feature. Before Sunk Cost starts to weigh on our souls. The first few days of building the feature are often about figuring out how much sophistication we can afford to build given the amount of time we have to ship the feature. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>It is tempting to stop when it works, but it is only the beginning. That’s the shitty first draft you’d never turn in. Now you must go through the process to make it as simple as possible for others to understand.</p><cite><strong><em>Simon Hørup Eskildsen</em></strong>, <a href=\"https://sirupsen.com/drafts/\">Shitty First Software Drafts</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In a sense, we’re matching a time budget to a mental complexity budget. In one week, we could figure out how to do a very simplistic CSV export. We could get it to work, make the implementation clear, test it out, iterate on code review, and have it ready to ship. In four weeks, we could add all the features that make a crisp and clear customer feature: generating it in the background, emailing a link to download the CSV after its generated, showing progress of the export to a user, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>With the teams I work with, we operate with the idea of&nbsp;<em>peak complexity</em>: the time at which a project reaches its highest complexity. Peak complexity has proved a useful mental model to us for reasoning about complexity. It helps inform decisions about when to step back and refactor, how many people should be working on the project at a given point in time, and how we should structure the project.</p><cite><strong><em>Simon Hørup Eskildsen</em></strong>, <a href=\"https://sirupsen.com/peak-complexity/\">Peak Complexity</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Somewhere in the middle of the time allotted to the project, a feature might start to feel like its getting out of hand. Inevitably, there's some surprise complexity or scope that no one anticipated. If the code of the feature were a combustion engine, it is sitting on a stand, partially disassembled, and in need of a rebuilt component.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Maybe we decide that the surprise scope isn't worth the toil and scrap part of the feature. We might decide it is essential and scrap some other part of the feature so we can finish this while affording the time and complexity budget. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Eventually you reach a point where there aren’t any more unsolved problems. That’s like&nbsp;<strong>standing at the top of the hill</strong>. You can see clearly all the way down the other side. Then the&nbsp;<strong>downhill</strong>&nbsp;phase is just about execution.</p><cite><a href=\"https://basecamp.com/features/hill-charts\">Basecamp Hill Charts</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>We reach that Peak Complexity, decide how to get through it, and start working downhill. We're now reaping the benefits of the thought and effort we put into managing the complexity budget of the feature, given the our time budget. We're crossing t's and dotting i's, finishing detail work, and getting the project ready to ship.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I find that managing software projects as time plus complexity works far better than viewing it as tasks for people to work on until it's \"done\".</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-04-20T07:23:00-07:00",
				"url": "https://therealadam.com/2020/04/20/manage-for-time.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/19/airpods-as-a.html",
				
				"content_html": "<p><a href=\"https://julian.digital/2020/04/19/airpods-as-a-platform/\">AirPods as a Platform</a>:</p>\n<blockquote>\n<p>You could also think about the Apple Watch as the main input device. In contrast to the AirPods, Apple opened the Watch for developers from the start, but it hasn’t really seen much success as a platform. Perhaps a combination of Watch and AirPods has a better chance of creating an ecosystem with its own unique applications?</p>\n</blockquote>\n<p>Bingo.</p>\n",
				"content_text": "[AirPods as a Platform](https://julian.digital/2020/04/19/airpods-as-a-platform/):\n\n> You could also think about the Apple Watch as the main input device. In contrast to the AirPods, Apple opened the Watch for developers from the start, but it hasn’t really seen much success as a platform. Perhaps a combination of Watch and AirPods has a better chance of creating an ecosystem with its own unique applications?\n\nBingo.\n",
				"date_published": "2020-04-19T15:27:09-07:00",
				"url": "https://therealadam.com/2020/04/19/airpods-as-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/19/graphs-are-the.html",
				"title": "Graphs are the new hierarchies",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>In the sense that trees of people (managers and reports, ala Taylorism) are the old guard. Data (folders and files) are old sauce and nodes + edges are new sauce.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>In the sense that part of the confusion of our modern world is that e.g. the Koch brothers have considerable influence on how the Republican party organizes itself. Thus, money is the speech that organizes our current regime and acts on policy. But the Koch brothers aren’t on the org chart for the government <em>or</em> the Republican party.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>In the sense that hierarchical databases are such old sauce that I’ve never used one. People new to software development don’t even realize they were at one time a thing that competed against the idea of relational databases.</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>In the sense that writing is linear or organized by chapters in books. But, the web is a wild mess of hyperlinked graphs. Maybe writers want to <a href=\"https://twitter.com/rjs/status/1130603817605558272?s=21\">organize by graphs too</a>!</p>\n<!-- /wp:paragraph -->\n\n\n<!-- wp:paragraph -->\n<p>(Spoiler: you can represent strictly hierarchical data with graphs too!)</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-04-19T11:33:12-07:00",
				"url": "https://therealadam.com/2020/04/19/graphs-are-the.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/19/machine-supply-knowing.html",
				
				"content_html": "<p><a href=\"http://interconnected.org/home/2015/07/22/machine_supply\">Machine Supply</a>:</p>\n<blockquote>\n<p>Knowing what books someone loves is to know their perspective and their journey, to have something special in common, to share a language.</p>\n</blockquote>\n",
				"content_text": "[Machine Supply](http://interconnected.org/home/2015/07/22/machine_supply):\n\n> Knowing what books someone loves is to know their perspective and their journey, to have something special in common, to share a language.\n",
				"date_published": "2020-04-19T08:56:55-07:00",
				"url": "https://therealadam.com/2020/04/19/machine-supply-knowing.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/13/the-cwc-mellor.html",
				
				"content_html": "<p><a href=\"https://www.hodinkee.com/articles/cwc-mellor-72-hands-on?mc_cid=0ee87fdfa9&amp;mc_eid=1e5968a7ea\">The CWC Mellor-72</a> - I love the overall shape, but especially the arrow icon above the 6.</p>\n<p><img src=\"https://hodinkee.imgix.net/uploads/images/1584970703548-koucm44eowq-d72751d7feb37bd2fac25812da92efc4/CWC_Mellor-9.jpg?ixlib=rails-1.1.0&amp;fm=jpg&amp;q=55&amp;auto=format&amp;usm=12&amp;ch=Width%2CDPR%2CSave-Data&amp;fit=crop&amp;w=820\" alt=\"Mellor-72 and Swiss army watch\"></p>\n",
				"content_text": "[The CWC Mellor-72](https://www.hodinkee.com/articles/cwc-mellor-72-hands-on?mc_cid=0ee87fdfa9&mc_eid=1e5968a7ea) - I love the overall shape, but especially the arrow icon above the 6.\n\n![Mellor-72 and Swiss army watch](https://hodinkee.imgix.net/uploads/images/1584970703548-koucm44eowq-d72751d7feb37bd2fac25812da92efc4/CWC_Mellor-9.jpg?ixlib=rails-1.1.0&fm=jpg&q=55&auto=format&usm=12&ch=Width%2CDPR%2CSave-Data&fit=crop&w=820)\n",
				"date_published": "2020-04-13T05:01:55-07:00",
				"url": "https://therealadam.com/2020/04/13/the-cwc-mellor.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/12/my-law-of.html",
				
				"content_html": "<p>My law of music: there is no song that Aretha Franklin could not perform <em>slower</em> and therefore <em>better</em> than everyone else.</p>\n<p>Newly discovered corollary: except possibly <a href=\"https://www.youtube.com/watch?v=uXDXMI7PW6M\">Pierre Boulez and Beethoven&rsquo;s 5th</a>. So slow, nearly belabored. Love it!</p>\n",
				"content_text": "My law of music: there is no song that Aretha Franklin could not perform _slower_ and therefore _better_ than everyone else. \n\nNewly discovered corollary: except possibly [Pierre Boulez and Beethoven's 5th](https://www.youtube.com/watch?v=uXDXMI7PW6M). So slow, nearly belabored. Love it!\n",
				"date_published": "2020-04-12T10:49:05-07:00",
				"url": "https://therealadam.com/2020/04/12/my-law-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/11/drew-austin-on.html",
				
				"content_html": "<p>Drew Austin on high/low-brow music, how it fits into album reviews and club culture, and how all that has shifted in our current state of distance. <a href=\"https://kneelingbus.substack.com/p/122-energy-flash\">Energy Flash</a>:</p>\n<blockquote>\n<p>“For Reynolds, “at home and at album length” refers to a process of decontextualization, the musical equivalent of the modern gallery’s white cube: a belief that any cultural product meriting serious appreciation must prove that it can survive outside of its native habitat by becoming a fungible unit of culture, fitting into the standardized format of Pitchfork album reviews and solitary, focused listening. If music sounds good in a packed nightclub at 3 a.m. but not through headphones on your couch, is it real in the same way that Kid A is real? Right now in quarantine, the contextualizing environments in which culture traditionally incubates are closed off and dormant, so everything has to sound good in the living room whether it’s meant to or not. We live in the white cube now; anything that relies on a specific source of external context is an endangered species. We’re one month into a worldwide experiment to learn whether the internet alone can produce sufficient meaning on its own, or whether we must keep mining our memories of an embodied shared reality to bridge this gap.”</p>\n</blockquote>\n",
				"content_text": "Drew Austin on high/low-brow music, how it fits into album reviews and club culture, and how all that has shifted in our current state of distance. [Energy Flash](https://kneelingbus.substack.com/p/122-energy-flash):\n\n> “For Reynolds, “at home and at album length” refers to a process of decontextualization, the musical equivalent of the modern gallery’s white cube: a belief that any cultural product meriting serious appreciation must prove that it can survive outside of its native habitat by becoming a fungible unit of culture, fitting into the standardized format of Pitchfork album reviews and solitary, focused listening. If music sounds good in a packed nightclub at 3 a.m. but not through headphones on your couch, is it real in the same way that Kid A is real? Right now in quarantine, the contextualizing environments in which culture traditionally incubates are closed off and dormant, so everything has to sound good in the living room whether it’s meant to or not. We live in the white cube now; anything that relies on a specific source of external context is an endangered species. We’re one month into a worldwide experiment to learn whether the internet alone can produce sufficient meaning on its own, or whether we must keep mining our memories of an embodied shared reality to bridge this gap.”\n",
				"date_published": "2020-04-11T17:12:50-07:00",
				"url": "https://therealadam.com/2020/04/11/drew-austin-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/11/a-new-cannonball.html",
				
				"content_html": "<p><a href=\"https://www.nytimes.com/2020/04/11/us/speeding-tickets-cars-coronavirus.html\">A new cannonball run record set</a> - a surprise and unintentended consequence of pandemic and shutting down the economy. It’s now much easier to drive a car really fast from New York to Los Angeles. The new record is just a few hours over a day.</p>\n",
				"content_text": "[A new cannonball run record set](https://www.nytimes.com/2020/04/11/us/speeding-tickets-cars-coronavirus.html) - a surprise and unintentended consequence of pandemic and shutting down the economy. It’s now much easier to drive a car really fast from New York to Los Angeles. The new record is just a few hours over a day.\n",
				"date_published": "2020-04-11T10:12:32-07:00",
				"url": "https://therealadam.com/2020/04/11/a-new-cannonball.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/10/top-of-mind.html",
				"title": "Top of Mind No. 0",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<ul>\n<li>Managing a backend engineering team at Pingboard.</li>\n<li>Managers can, and should, do deep work. What forms does that take?</li>\n<li>You can build anything from trust; how do you turn accountability into agency amongst teams?</li>\n<li>How can I get more writing/editing/publishing practice in?</li>\n<li>Meditating &amp; reading</li>\n</ul>\n",
				"date_published": "2020-04-10T05:07:01-07:00",
				"url": "https://therealadam.com/2020/04/10/top-of-mind.html",
				"tags": ["Now"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/09/the-majestic-monolith.html",
				
				"content_html": "<p><a href=\"https://m.signalvnoise.com/the-majestic-monolith-can-become-the-citadel/\">The Majestic Monolith can become The Citadel</a> - when a function of the monolith becomes unwieldy, split off an Outpost to service that need specifically. I like to call them sidecars, because that seems more fun!</p>\n",
				"content_text": "[The Majestic Monolith can become The Citadel](https://m.signalvnoise.com/the-majestic-monolith-can-become-the-citadel/) - when a function of the monolith becomes unwieldy, split off an Outpost to service that need specifically. I like to call them sidecars, because that seems more fun!\n",
				"date_published": "2020-04-09T05:54:42-07:00",
				"url": "https://therealadam.com/2020/04/09/the-majestic-monolith.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/08/introducing-watchsmith-i.html",
				
				"content_html": "<p><a href=\"https://david-smith.org/blog/2020/04/08/introducing-watchsmith/\">Introducing Watchsmith</a> - I love the idea of using customizable, bespoke complications to get a foot in the door of customizable Apple Watch faces. I’m trying it right now, so far so good!</p>\n",
				"content_text": "[Introducing Watchsmith](https://david-smith.org/blog/2020/04/08/introducing-watchsmith/) - I love the idea of using customizable, bespoke complications to get a foot in the door of customizable Apple Watch faces. I’m trying it right now, so far so good!\n",
				"date_published": "2020-04-08T18:23:33-07:00",
				"url": "https://therealadam.com/2020/04/08/introducing-watchsmith-i.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/05/ever-forward-eventually.html",
				
				"content_html": "<p><a href=\"https://buttondown.email/therealadam/archive/ever-forward-eventually-to-the-new-way/\">Ever forward, eventually, to the new way</a></p>\n",
				"content_text": "[Ever forward, eventually, to the new way](https://buttondown.email/therealadam/archive/ever-forward-eventually-to-the-new-way/)\n",
				"date_published": "2020-04-05T17:52:43-07:00",
				"url": "https://therealadam.com/2020/04/05/ever-forward-eventually.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/05/im-no-good.html",
				
				"content_html": "<p>I’m no good at photography, but Texas sunsets make it easy.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I’m no good at photography, but Texas sunsets make it easy.\n\n<img src=\"https://short.therealadam.com/uploads/2020/c781b75224.jpg\" width=\"600\" height=\"450\" alt=\"\" />\n",
				"date_published": "2020-04-05T17:48:37-07:00",
				"url": "https://therealadam.com/2020/04/05/im-no-good.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/04/05/ive-been-tinkering.html",
				
				"content_html": "<p>I&rsquo;ve been tinkering this weekend and <a href=\"https://andybrewer.github.io/mvp/\">MVP.css</a> may be one of my new favorite tools. Drop in some CSS and then just use HTML elements as their name would suggest. No layout, no grids, no typographical system. No classes to memorize. Build now, worry about all the other stuff later.</p>\n",
				"content_text": "I've been tinkering this weekend and [MVP.css](https://andybrewer.github.io/mvp/) may be one of my new favorite tools. Drop in some CSS and then just use HTML elements as their name would suggest. No layout, no grids, no typographical system. No classes to memorize. Build now, worry about all the other stuff later.\n",
				"date_published": "2020-04-05T11:41:13-07:00",
				"url": "https://therealadam.com/2020/04/05/ive-been-tinkering.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/28/this-weekend-im.html",
				
				"content_html": "<p>This weekend, I&rsquo;m revisiting some of David Perell&rsquo;s writing on writing, thinking, and aiming high. My favorites: <a href=\"https://www.perell.com/blog/why-you-should-write\">Why You Should Write</a>, <a href=\"https://www.perell.com/blog/learn-like-an-athlete\">Learn Like an Athlete</a>, <a href=\"https://www.perell.com/tweetstorms/network-writing\">Networked Writing</a>.</p>\n",
				"content_text": "This weekend, I'm revisiting some of David Perell's writing on writing, thinking, and aiming high. My favorites: [Why You Should Write](https://www.perell.com/blog/why-you-should-write), [Learn Like an Athlete](https://www.perell.com/blog/learn-like-an-athlete), [Networked Writing](https://www.perell.com/tweetstorms/network-writing).\n",
				"date_published": "2020-03-28T12:36:24-07:00",
				"url": "https://therealadam.com/2020/03/28/this-weekend-im.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/26/whiteboard-even-if.html",
				"title": "Whiteboard, even if you're a distributed team",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A lot of us are out here, amongst all the strangeness of the world, trying to figure out how to help our teams adjust to collaborating remotely. It’s long been my observation that nothing beats people in a room together communicating via ad-hoc scribbles on a whiteboard.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Seems like a good time to survey the landscape and see if the situation has improved!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On one end of the spectrum are Google <a href=\"https://en.wikipedia.org/wiki/Google_Drawings\">Draw</a> and <a href=\"https://jamboard.google.com\">Jamboard</a>. The former seems better for <em>attempting</em> to draw technical diagrams. I think it's actually better for ironically creating <a href=\"https://makewordart.com\">WordArt</a>. The latter seems like an honest, lo-fi attempt to re-create whiteboards online and collaboratively. I don’t think these tools cut it. But, they have the advantage of ubiquity: a lot of companies use Google Suite, so these could come in handy, in a pinch.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Another wild card is to use design software your team might have in place. Sketch or Figma are inherently about visual communication. If everyone has a license and some patience, this could work! If anyone can put some boxes, arrows, and text together, you can basically whiteboard.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve used <a href=\"https://whimsical.com\">Whimiscal</a> to create non-trivial visual communications. It works great, it’s easy to share with people, there is some multi-person editing. It's easy to get started in Whimsical and it has some depth, but not so much depth that it's intimidating or overwhelming. Pricing aside, this is where I’d start with my current team.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I have not kicked the tires on <a href=\"https://miro.com\">Miro</a>, but the concept is intriguing. Looks like there’s real-time, collaborative visual communication/editing. They also brag a lot about their integrations with adjacent project/collaboration tools such that one can embed JIRA cards, mockups, docs, etc. in a whiteboard. If you’re already using this, I’d love to hear your experience with it!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, you don’t <em>need</em> software to share ad-hoc scribbles. You can draw on paper, capture it with a camera, and share that image almost <em>anywhere</em>. You could use sketching/drawing tools to do a fancier version of that. If you have a whiteboard at home, <a href=\"https://twitter.com/rjs/status/1240762467195600896\">you can draw on it, take a photo, and share it</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It doesn’t matter if the tools aren’t <em>that</em> great or if your company hasn’t adopted any of them. Taking the initiative to collaborate, or having the insight that communicating with words is not cutting it, is much more important.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-03-26T07:20:00-07:00",
				"url": "https://therealadam.com/2020/03/26/whiteboard-even-if.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/24/wherein-the-good.html",
				"title": "Wherein the “good old days” are revisited",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Remember secretaries and drinking at work? And land-line telephones? And smoking inside? Blech! And an even more unequal society with even more thumbs on the scales?</p><cite>My wife and I, when we first watched <em>Mad Men</em>:</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Oy, Makefiles! And weird preprocessor tricks! And file-scoped variables/memory ownership? And everything is an int, sometimes pretending to be a char.</p><cite>Me, reading C code, having last written valid, in-anger C code during college</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The 1960s and 70s had some nice qualities, but some of them don't hold up to the nostalgia.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-03-24T08:12:00-07:00",
				"url": "https://therealadam.com/2020/03/24/wherein-the-good.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/24/that-is-a.html",
				
				"content_html": "<p>That <em>is</em> a <a href=\"http://fabiensanglard.net/the_beautiful_machine/index.html\">beautiful machine</a>. I must have a soft spot for extensive air-cooling schemes. If Windows/PCs were a thing I could get with, I would get with this hardware.</p>\n",
				"content_text": "That _is_ a [beautiful machine](http://fabiensanglard.net/the_beautiful_machine/index.html). I must have a soft spot for extensive air-cooling schemes. If Windows/PCs were a thing I could get with, I would get with this hardware.\n",
				"date_published": "2020-03-24T07:48:56-07:00",
				"url": "https://therealadam.com/2020/03/24/that-is-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/24/use-as-few.html",
				"title": "Use as few rules as possible, mostly guidelines",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Rules won’t solve your problems, but thinking about them might. To paraphrase a couple well-known quotes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>“Rules are useless, but thinking about rules is indispensable”</p><cite><em>Dwight Eisenhower</em></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>“No rules survive first contact with a toddler” </p><cite><a href=\"https://en.wikipedia.org/wiki/Helmuth_von_Moltke_the_Elder\">Helmuth von Moltke the Elder</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>😉</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s folly to think we can generate the <em>exact</em> outcomes we want with rules. Every ruleset leaves more unstated assumptions than it generates clarity. The legalese found in contracts, and its absolute obtuseness, is testament to how hard it is to write clear rules.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That said, thinking about how rules, or a lack thereof, generate outcomes is an essential and worthwhile exercise. I like putting things through the lens of macroeconomic thinking to seek out <a href=\"https://jamesstuber.com/second-order-effects/\">second order effects</a>, <a href=\"https://en.wikipedia.org/wiki/Unintended_consequences\">unintended consequences</a>, and <a href=\"https://en.wikipedia.org/wiki/Perverse_incentive\">perverse incentives</a> that emerge from a proposed rule set. Rules are trade-offs!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In short: humans + rules are a strange, not entirely mathematical thing. Think about how bad actors will abuse rules in their favor and how good actors will be constrained by rules in search of the outcomes you actually want. Then, if you must, write as few rules as possible.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-03-24T07:46:00-07:00",
				"url": "https://therealadam.com/2020/03/24/use-as-few.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/22/we-took-all.html",
				
				"content_html": "<p>We took all the dogs on a walk today. Even the sixteen year old one who walks janky. I have never seen so many people out walking in our neighborhood. So that’s nice! Add that to the list of things we should considering preserving once we reach the new normal.</p>\n",
				"content_text": "We took all the dogs on a walk today. Even the sixteen year old one who walks janky. I have never seen so many people out walking in our neighborhood. So that’s nice! Add that to the list of things we should considering preserving once we reach the new normal.\n",
				"date_published": "2020-03-22T16:58:15-07:00",
				"url": "https://therealadam.com/2020/03/22/we-took-all.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/22/stop-the-coronavirus.html",
				
				"content_html": "<p><a href=\"https://mattstoller.substack.com/p/stop-the-coronavirus-corporate-coup\">Stop the Coronavirus Corporate Coup</a>. I’ve got a bad feeling about this.</p>\n<blockquote>\n<p>The aerospace giant of course wants a $60 billion bailout. Financial problems for this corporation predated the crisis, with the mismanagement that led to the 737 Max as well as defense and space products that don&rsquo;t work (I noted last July a bailout was coming). The corporation paid out $65 billion in stock buybacks and dividends over the last ten years, and it was drawing down credit lines before this crisis hit. It is highly politically connected; the board of the corporation includes Caroline Kennedy, Ronald Reagan’s Chief of Staff Ken Duberstein, three Fortune 100 CEOs, a former US Trade Representative, and two Admirals, one of whom is the board’s only engineer. Using the excuse of the coronavirus, Boeing is trying to get the taxpayer to foot the bill for its errors, so it can go back to making more of them.</p>\n</blockquote>\n",
				"content_text": "[Stop the Coronavirus Corporate Coup](https://mattstoller.substack.com/p/stop-the-coronavirus-corporate-coup). I’ve got a bad feeling about this.\n\n> The aerospace giant of course wants a $60 billion bailout. Financial problems for this corporation predated the crisis, with the mismanagement that led to the 737 Max as well as defense and space products that don't work (I noted last July a bailout was coming). The corporation paid out $65 billion in stock buybacks and dividends over the last ten years, and it was drawing down credit lines before this crisis hit. It is highly politically connected; the board of the corporation includes Caroline Kennedy, Ronald Reagan’s Chief of Staff Ken Duberstein, three Fortune 100 CEOs, a former US Trade Representative, and two Admirals, one of whom is the board’s only engineer. Using the excuse of the coronavirus, Boeing is trying to get the taxpayer to foot the bill for its errors, so it can go back to making more of them.\n",
				"date_published": "2020-03-22T10:59:00-07:00",
				"url": "https://therealadam.com/2020/03/22/stop-the-coronavirus.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/03/22/the-jazz-icon.html",
				
				"content_html": "<p><a href=\"https://www.nytimes.com/interactive/2020/02/24/magazine/sonny-rollins-interview.html?referringSource=articleShare\">The jazz icon Sonny Rollins knows life is a solo trip</a>. Seems like a surprisingly wise, grounded performer.</p>\n",
				"content_text": "[The jazz icon Sonny Rollins knows life is a solo trip](https://www.nytimes.com/interactive/2020/02/24/magazine/sonny-rollins-interview.html?referringSource=articleShare). Seems like a surprisingly wise, grounded performer.\n",
				"date_published": "2020-03-22T06:32:29-07:00",
				"url": "https://therealadam.com/2020/03/22/the-jazz-icon.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/22/keep-in-touch.html",
				"title": "Keep in touch with friends, the littlest CRM that could",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>This year, I’m trying to better keep in touch with friends, family, and former co-workers. It came to my attention that this is, in many ways, <a href=\"https://mobile.twitter.com/brynary/status/567043487485665280\">a thing for which you would use a customer-relationship management application</a>. This could work, but seems like a lot to me.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most software starts life as a) a document/spreadsheet or b) a system of long email threads. In that spirit, I thought I might work backwards from what I normally do: build the littlest CRM I can without writing code or using development tools.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’ve already got <a href=\"https://culturedcode.com/things/\">Things</a> and <a href=\"https://bear.app\">Bear</a> in my workflow. Turns out that duo solves the essential part of the problem. Things reminds me to contact a friend/family/co-worker periodically. I keep notes on what folks are up to, what we talked about,  when the last time we talked, etc. as unstructured notes in Bear.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That’s it! I’m only one month into this experiment, but I’ve contacted, at least once, most folks I wanted to. 📈</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-02-22T09:29:19-07:00",
				"url": "https://therealadam.com/2020/02/22/keep-in-touch.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/21/enforce-system-consistency.html",
				"title": "Enforce system consistency at the boundaries \u0026amp; meditations on run-time type systems",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>(…continuing <a href=\"https://twitter.com/therealadam/status/1228843830906118146?s=21\">a Twitter thread</a>)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://gcanti.github.io/fp-ts/\">io-ts</a> caught my attention a while back and I finally had the chance to read through it. I’m glad folks are experimenting in this area, particularly with the potential reach into multiple communities and ecosystems that TypeScript affords.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We use <a href=\"https://dry-rb.org\">dry-rb</a> extensively at work and I was curious how a TypeScript expression of the same idea (define type-like structures at your runtime boundaries) looks.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The flippant response to runtime type systems for dynamic languages is: if you love types so much, why aren’t you using Haskell, Scala, Swift, etc.? That is, a type system over JavaScript or Ruby is a relatively new/unconventional choice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Gradual type checkers: it works for Facebook and Stripe. Maybe it scales down for much smaller teams and codebases? Weird flex, but okay.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>In reality, a runtime type system is easy to adopt and, when paired with some kind of Either/Result abstraction, can be built incrementally by composing types, data coercions to types, and validations of coerced data.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having spent a year and change working with dry-rb’s runtime types/validations, I’m looking forward to introducing Sorbet. I like the idea of writing types and function signatures for development-time enforcement, but having the option to use some of them at runtime for boundary enforcement.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>dry-rb has served us well, but the development experience that I crafted is highly coupled to using a Result/monad-ish idiom. Lots of combinator-envy. Most developers don’t crave this sort of thing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if it’s successfully sold, it’s an uphill battle of education and FP/OO adaptation the whole way. If I were doing it over I’d look to Go’s tedious but easy to teach idiom of checking for errors after nearly every non-trivial operation.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I think dry-rb and io-ts will succeed or fail in very similar ways. Teams that know an ML-like language but are for some reason using JS or Ruby will take quickly to it. Otherwise, there’s an impedance mismatch to manage as they teams their own idioms on top of runtime types.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>I’d pitch this to front-end developers as similar to React’s PropTypes, but better.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PropTypes give you greater confidence that you’re passing the right properties to a component and that a refactoring didn’t break things. Type-asserting data structures, like io-ts, give you confidence that the boundaries of your system, e.g. the XHR request/responses and persisting data to local storage, are either well-formed or <em>immediately</em> kick over to failure handling.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enforcing object shapes (keys and nesting), type correctness (the value for key X is type Y), and validity (values declared as an “age” are always positive integers) at the boundary of your application and between components means you can more code on the “happy path” in your application logic. Conditionals and error handling are largely, but not entirely, pushed outwards to  prop types or the boundary type system. This is, in my opinion, living the dream!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>The gift and the curse of io-ts and dry-rb’s design is the use of combinators as the center of their design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The skill ceiling for composing functions to handle network/database requests, type/shape assertions, coercions, and validations is very high. There’s lots to learn about combinators and the more you know, the more you can do. The downside is that the skill floor is also high. The less you know about combinators, the more mysterious, intimidating, and math-y they are.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s an unfortunate reality that developers rarely rave about how great a library or language’s error model is. Mostly people put up with exception handling and try to live in a blissful world of error-avoidance and happy paths.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Result types - e.g. Rust’s <a href=\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html\">Result</a>, io-ts’ Either, Haskell’s monads, dry-rb’s <a href=\"https://dry-rb.org/gems/dry-monads/1.3/\">Result and monads</a>, Elm’s <a href=\"https://guide.elm-lang.org/error_handling/\">Result and Maybe</a> - are promising. Function return types that are <em>explicit</em> about whether the thing succeeded or failed (without stack manipulation hijinks) is something we really should have put in practice some time ago. io-ts and dry-rb are existence proofs, to me, that you don’t need an extremely sophisticated type system to make these work in practical, runtime-typed languages like Python, Ruby, or JavaScript. <em>But</em> they <em>can</em> quickly send you down the road of combinators. I’ve found this is not a road developers are enthusiastic about traveling.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>Go and Erlang take a different, utterly unsophisticated, road and I wonder if it’s more promising. Functions that can fail (any kind of IO, some kinds of math, etc.) return a success value and error value as an array or tuple. Developers are expected to <em>always</em> check for an error before proceeding; linters and peers will complain if you don’t.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If a linter does it, so can a compiler or gradual type system can too. Maybe the middle ground between the status quo of exceptions and the promised land of result types is compiler-enforced checking of success/error pairs. The advantage is, no invention or re-learning is needed. It’s an array and a conditional. Granted, I’d prefer to get rid of the conditional. But, I’ll take the ease of training developers on the approach as a trade-off.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>In short: my new hypothesis is “run-time enforcement of types/values/rules around the boundaries of your system, gradual/static types inside your system to prevent programmer errors”. If you can go further and use a static type system like Rust or Elm to reach the point your software is “correct by design”, that seems like living the mega-dream. 🌈</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-02-21T16:43:39-07:00",
				"url": "https://therealadam.com/2020/02/21/enforce-system-consistency.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/12/the-beautiful-ones.html",
				"title": "The Beautiful Ones",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Prince’s unfinished memoir, <em>The Beautiful Ones</em> is a quick, but awkward, read. The preface is the most coherent, the story of how the editor, Dan Piepenbring, ended up being chosen by Prince to realize his autobiography. It shines an interesting light onto what it was like to be in Prince’s orbit, if only briefly.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Of course, Prince passed away shortly after the book was announced. He had started providing material to his writer in the form of notes and guidance, but only a few chapters worth covering his youth and early career. These notes, in their idiomatic manner of writing, e.g. “👁️ love u”, form the bulk of the book. The rest of the material are photographs and other notes collected with the help of Prince’s estate. They’re insightful, but not particularly coherent.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’m relatively new to the deep Prince mythology. I suspect I got more out of the book than those already steeped in purple mystery would. There are probably better starting points for those who want to know everything about Prince or who are enitrely new to the Prince mythos.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-02-12T06:59:59-07:00",
				"url": "https://therealadam.com/2020/02/12/the-beautiful-ones.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/09/i-watched-the.html",
				"title": "I watched the various Watchmen",
				"content_html": "<p>I just finished reading the <!-- raw HTML omitted -->Watchmen<!-- raw HTML omitted --> graphic novel and it is amazing. I was drawn in by the HBO series last year, which amplified my enjoyment of the original story. It might end up in my top five works of fiction.</p>\n<p>The story is of its time: the Cold War, superheroes as saviors. Even better, it has timeless themes that feel relevant in our weird contemporary situation: growing authoritarianism and nihilism towards overcoming the status quo to tackle other looming problems.</p>\n<p>I saw the <!-- raw HTML omitted -->Watchmen<!-- raw HTML omitted --> movie first, several years ago. The movie, as I remember it, holds to the first few issues surprisingly well. The ending of the comic is far superior to the one used in the movie. The comic has more space to expand minor storylines and even introduce a whole other comic within the graphic novel. The comic stands head and shoulders above the movie.</p>\n<p>I still feel like the <!-- raw HTML omitted -->Watchmen<!-- raw HTML omitted --> HBO series was one of, if not singularly, the best shows on television/streaming last year. The graphic novel is the perfect chaser. Lots of plot points make more sense through the lens of the graphic novel: the whole squid attack, Looking Glass being slightly off, Robert Redford as president.</p>\n<p>If it turns out they don’t produce more seasons in the HBO series timeline, at least there will always be the comic. (And <!-- raw HTML omitted -->Westworld<!-- raw HTML omitted -->, for the time being).</p>\n",
				"content_text": "I just finished reading the <em>Watchmen</em> graphic novel and it is amazing. I was drawn in by the HBO series last year, which amplified my enjoyment of the original story. It might end up in my top five works of fiction.\n\nThe story is of its time: the Cold War, superheroes as saviors. Even better, it has timeless themes that feel relevant in our weird contemporary situation: growing authoritarianism and nihilism towards overcoming the status quo to tackle other looming problems.\n\nI saw the <em>Watchmen</em> movie first, several years ago. The movie, as I remember it, holds to the first few issues surprisingly well. The ending of the comic is far superior to the one used in the movie. The comic has more space to expand minor storylines and even introduce a whole other comic within the graphic novel. The comic stands head and shoulders above the movie.\n\nI still feel like the <em>Watchmen</em> HBO series was one of, if not singularly, the best shows on television/streaming last year. The graphic novel is the perfect chaser. Lots of plot points make more sense through the lens of the graphic novel: the whole squid attack, Looking Glass being slightly off, Robert Redford as president.\n\nIf it turns out they don’t produce more seasons in the HBO series timeline, at least there will always be the comic. (And <em>Westworld</em>, for the time being).\n",
				"date_published": "2020-02-09T10:25:42-07:00",
				"url": "https://therealadam.com/2020/02/09/i-watched-the.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/04/get-a-cute.html",
				"title": "Get a cute credit card and overtip",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Highly recommend: get a BB-8 or similarly lovely icon from your favorite mythology on the credit/debit card you most frequently use. I have a couple lovely bonus conversations with folks per week because of it. Sometimes it's \"like your card\" but sometimes it's full \"did you see the latest thing?\" and it's nice to talk to people outside my normal routines.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Of note, I get as many comments about BB-8 on my card in a week as I did for Darth Vader in a month. QED the fandom is wrong, bring more fun stuff and less super-serious Skywalker stuff. And don't be cowards, let Chewbacca and Maz resolve their romantic tension!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>ps. tip everyone you can until our country’s terrible treatment of people in service jobs improves. They work hard, get paid too little, have basically zero safety net, and serve on the front lines of the \"may I speak with the manager\" wars.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-02-04T08:36:19-07:00",
				"url": "https://therealadam.com/2020/02/04/get-a-cute.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/02/02/keep-waterfall-out.html",
				"title": "Keep waterfall out of your agile",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>An insightful thing my pal <a href=\"https://twitter.com/tehviking\">Brandon Hays</a> observed is that teams introduce little bits of waterfall into their agile processes when they get burned by scope expansion, bugs, infrastrucure, and such.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>It’s tempting to try to eliminate potential sources of surprise and drama. Paradoxically, adding waterfall-style checkpoints seems to introduce more drama and surprise than it prevents. In my experience, checkpoints introduce bottlenecks and hand-offs that reduce the speed and quality a team produces software.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Instead of reinventing waterfall within an ostensibly agile process, I’ve found its better to note all the things that have surprised and caused drama. Consider if those are due to consistent conditions in your team. If they’re systematic, fix them. That is, do agile retrospectives.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If it’s not systematic, take a dose of optimism and keep going. Thoughtful, capable teams have a sense for the conditions that yield unpleasant surprises. They don’t need waterfall-esque checkpoints and documentation to avoid them. In my experience, they’ll tell you what they’re worried will bite them later. Just ask!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-02-02T13:50:04-07:00",
				"url": "https://therealadam.com/2020/02/02/keep-waterfall-out.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/30/unblocking-oneself.html",
				"title": "Unblocking oneself",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Succeeding and thriving at remote work is largely about getting very good at asynchronous (Slack, discussion threads, email, etc.) and nearly-asynchronous (phone calls, video meetings, screen sharing) communication.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Productivity in remote work is often bottlenecked by the availability of teammates for near-asynchronous collaboration.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Therefore: <strong>boost your productivity</strong> as a remote team member by <strong>writing up context and questions</strong> your teammates can think through and help with when they’re available to collaborate. Then, <strong>pick up another task</strong> to make progress on in the meantime.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>Suppose I’m working on a card/task someone wrote up for me last week. I’m likely to come up with questions about edge cases or clarifications about how the thing is supposed to work. Often I can make a guess and keep working, but sometimes all those guesses pile up and necessitate getting on the same page before I go too deep. Instead of waiting for my teammates to get out of meetings or re-appear online, I write up my current thinking and the questions that I’m blocked on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key is to always have another task I can switch to without losing all the context in your head. Usually, there are tests to write, edge cases to explore, code to refactor or clarify. Switching between entirely unrelated features or bugs is not the best choice. I maintain my own backlog of ideas, chores, and tasks for these occasions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My teammates are pretty consistent about their working hours and checking in several times per day, so I don’t often wait more than a couple of hours to collaborate on how to unstick myself. More often, the act of writing down how I’m stuck leads me to realize how I could proceed while my teammates think about my questions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>p.s. this works for co-located teammates too! 😉</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-30T13:54:00-07:00",
				"url": "https://therealadam.com/2020/01/30/unblocking-oneself.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/27/sharing-context-in.html",
				"title": "Sharing context in code review",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A <a href=\"https://www.notion.so/How-to-do-Code-Reviews-1c33cbf7597a4d61aeb3905b86844baf\">nice guide on code reviews</a> (unfortunately no author is attributed on the Notion doc) is making the rounds. If you do code reviews, you should read it. If you don’t, you should start, and then read it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I do have a personal quibble with this particular guide. I find code review most valuable for “education and context sharing”. I rarely detect bugs or “safety” issues when <em>reading</em> PRs. I’m trying to build this skill, so maybe check back with me later on that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the flip side, I want to boost a couple ideas that I wish had been in force for code reviews I’ve given/received in the past:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>“No stylistic preferences” enforced by humans. This is indeed what linters and style guides are for. If you object to the use of linters, I can’t help you.</li><li>“No blocking tips”. Lately I’ve tried leaving comments that start with “not a blocker…” followed by an idea on how to make code clearer. This gives the code author the option to address it immediately if they have the gumption, return to it later if they don’t, or take it under consideration for the future.</li><li>“Any PR that introduces…a security or privacy issue should be blocked”, in particular user privacy/safety issues. I’m lucky to work on a team that is considering user safety and data privacy very early in the process, so we often don’t come across these issues as late as code review. That said, expanding code review scrutiny to include ways that customer data could be leaked or people could act maliciously feels like a cultural win.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Lastly, this whole paragraph hits home. Onboarding and “mind-melding” is possibly the second most important thing to keep in mind regarding code review in the year 2020:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Nobody went to school for hacking on your company’s stack. Outside of software fundamentals all of us had to learn how to make things work while on the job. Code reviews are one of the best ways for us to share knowledge and context about different ways things are done or tricks we’ve figured out to get things done in better ways.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In my opinion, the most important thing to remember about code review is that it is often the worst time to offer non-trivial feedback. Most pull/change requests land when a project is wrapping up and the author is ready to ship the thing. This is the riskiest and most frustrating time to make substantial changes. If you want to improve code design and practice, pair programming is the better tool, not code review.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-27T09:49:00-07:00",
				"url": "https://therealadam.com/2020/01/27/sharing-context-in.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/25/reading-massive-tomes.html",
				"title": "Reading massive tomes: less slog, more joy",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>I’m drawn to expansive views on a subject. Sprawling narratives are irresistible. Giant books are my weakness. It’s rewarding to finish a chunky, 500-page book but getting there is quite the chore. The more pressing problem is, there are far more tomes out there than I can ever read.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Previously, my strategy for reading large <em>non-fiction</em> tomes has been to 1) slog through them or 2) let them sit around making me feel guilty. Instead of accruing a backlog, I’m looking for opportunities to get the essence of longer books with a smaller investment of time and energy.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Thus, I’ve organized my ideas into a 2x2 diagram to how I’m making tradeoffs and deciding which books to read this year:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5269,\"sizeSlug\":\"large\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"uploads/2024/a73f358e89.jpg\" alt=\"A 2x2 diagram showing tradeoffs between reading/skimming, podcast interviews, articles/reviews on the book, and reading the Wikipedia article.\" class=\"wp-image-5269\" /><figcaption>Besides reading a bajillion pages a day, how can I read more of the books I find interesting?</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:heading -->\n<h2>Quick and somewhat deep</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Interviews with the author on podcasts</strong> are often the sweet spot. Podcasts around 60-90 minutes are often enough time to explore the major ideas for the majority of the interview. Often this is as much or more than I’d want to get out of the book in the first place. Plus, a podcast, especially when sped up, is a tiny fraction of the time it takes me to read a short book, let alone a considerable tome. If I finish listening to a good interview wanting more, it’s a great indication that I should the book to the “someday” list.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Book reviews</strong> sometimes cover enough of the material in a book to get an idea of whether it’s worth seeking a podcast interview or adding to the “someday” list. Even better, sometimes they more concisely state the whole idea of the book, obviating taking time to read it. This is especially true for topics not known for their depth, e.g. business books.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Quick but shallow</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I am probably never going to read <em>War and Peace</em> or <em>Capital. A Critique of Political Economy</em>. Instead, <strong>reading the Wikipedia articles</strong> on those books gets me in the ballpark or conversation. I think of this as quiz-level literacy: I might remember enough to answer a pub quiz question on these, but I would not be able to debate even the granular points in either of those books with someone who had read them.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the upside, most Wikipedia articles are less than a ten-minute read; quite the time savings! Sometimes those articles are heavily linked to other topic pages, possibly more useful than reading the actual book when it comes to deep topics like economics, history, or philosophy. On the downside, most Wikipedia summaries are very short, to the point of only indicating an idea is present, rather than exploring it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Slow yet shallow</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p><strong>Discussion threads</strong> on a book (Twitter, Reddit, Internet forums) sometimes yield deep insight or connections about the material in a book. More often, the discussions get sidetracked and it's not about the book I’m interested in anymore.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>Articles on books</strong> often seem like they would be a perfect balance between depth and time. However, like discussion threads, they tend to spread out into other topics easily. Not necessarily bad, but suboptimal for my purposes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It would seem like long-form magazine writing on books would be a nice balance point. Reviews and articles on interesting books often pop up in my periodicals or timeline. Mostly, these aren’t as useful as interviews because they weave in and out of the book material and into whatever larger point the writer is trying to make of the book. Nonetheless, a good article on a book indicates either a writer worth reading in the future or a book with “someday” list potential.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Slow and deep</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>When I really want to go deep, but still don’t know if it’s worth reading every single page, <strong>skimming</strong> is the answer. Some books are rewarding in-depth but repetitive. The second or third case study backing up an idea or thesis is not as valuable or interesting as the first.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally, if the topic and/or author seem worth the time and effort, <strong>just read the dang book</strong>. It takes time and dedication but yields the best journey. It’s an investment; the reward is proportional to what you put in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\" />\n<!-- /wp:separator -->\n\n<!-- wp:paragraph -->\n<p>After all these hacks and shortcuts, deciding to read a massive tome ends up being something of a joy. I want to read a Robert Caro book this year, either <em>The Power Broker</em> (definitively a tome) or <em>Working</em> (relatively short). Having read about Caro a bit last year, it seems like I should experience his work at least once. So I’m a little excited to take on the challenge and a little worried it might consume many months of reading time. But I’m pretty sure it’s a worthwhile adventure.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-25T12:54:02-07:00",
				"url": "https://therealadam.com/2020/01/25/reading-massive-tomes.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/20/little-victories-amongst.html",
				"title": "Little victories amongst the bigger vision",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A couple of <a href=\"https://twitter.com/therealadam/status/1186067634397306881\">my favorite Ruby friends</a> mentioned that they’re trying to keep their side projects small. Despite that very practical aspiration, the siren call of larger projects still beckons. We know the pragmatic step is to find the little projects inside the big projects and share/ship those.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And yet…it’s easy to fall back into big projects, forgetting to show progress. So here I am, showing a little bit of progress! 🤞</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>...</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's a behind-the-scenes look: I wrote this months ago, when I was trying to get back to consistently blogging. It was my the little push to get the habit started again. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The astute amongst have noticed that I've been <em>somewhat</em> consistent for the past few weeks. But I'm about to jaunt off for a few days of vacation and I didn't want to let my progress reset to zero. So I dug this post back up and here we are. Repurposed for a good purpose.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I'm still here, showing progress. Finding the little victories amongst the bigger vision. Keeping the candle lit, per se. As it turns out, if perfect is the enemy of good, skipping your blogs because you're going on vacation is the enemy of sticking with the habit of blogging. 📈</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-20T13:27:00-07:00",
				"url": "https://therealadam.com/2020/01/20/little-victories-amongst.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/15/when-management-clicks.html",
				"title": "When management clicks",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>As a manager, I hear about things that are interesting and things that probably need changing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>“We want to do three projects but only have two teams.”<br>“The next production release is held up by this one task that needs seven people to agree on a minor but complicated detail.”<br>“The backend team has to spend the next week upgrading dependencies to meet new security requirements from the operations team.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Lots of work to do there. Eyes bigger than stomachs, weird coordination issues, past decisions piling up and haunting us all at once. Assembling these data points into a theory of how the organization works, without falling victim to us-vs-them narratives and cynicism, is an essential challenge of management.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the other hand, I hear things that are categorically good.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>“Alice has saved us a ton of work this week.”<br>“Bob did fantastic work on this product and we’re going to ship early.”<br>“Carol stepped up and coordinated everyone when the project lead had to take a few sick days.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my few years of leading and managing teams, these are the best kinds of things to hear. Something about <em>people</em> is working here. They’re turning accountability for their work into positive outcomes.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Stacking repeated positive outcomes yields trust in people and teams. That yields agency to tackle future projects in creative, potentially better ways. That usually leads to even more positive outcomes. Even more importantly, it makes for teammates who are excited and satisfied by their work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Bringing teams together across an organization to make positive outcomes for people who are excited about their work: that’s when management feels like it is clicking.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-15T08:59:29-07:00",
				"url": "https://therealadam.com/2020/01/15/when-management-clicks.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/13/three-increasingly-wild.html",
				"title": "Three (increasingly wild) bits about Prince",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>As <a href=\"https://www.prince.com/article/prince-originals\">unreleased</a> <a href=\"https://www.prince.com/article/1999\">material</a> trickles out of the Prince estate, some fantastic stories have emerged. I haven’t yet read <a href=\"https://www.newyorker.com/magazine/2019/09/09/the-book-of-prince\"><em>The Beautiful Ones</em></a>, but even the stories that aren’t part of his incomplete autobiography are top-notch Prince mythology.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.stereogum.com/1873308/prince-hired-this-guy-to-dj-a-date-and-he-knocked-it-out-of-the-park/news/\">Prince hired a DJ to play music for <em>just</em> him and his date</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>\n  “And then it hits me,” WallyWaves writes. “There’s only two people in there. Prince and a girl. I’m not there to DJ a private party. I’m there to DJ a date. Prince is on a date and I’m the entertainment.”\n</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.nbcnews.com/news/nbcblk/time-i-opened-tower-records-early-so-prince-could-shop-n560896\">Prince shopping before Tower Records opened</a>:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>\n  Mike: \"How do you want to pay for this? Would you like us to ring it up now?\"</p><p>  Prince: (smiles)</p><p>  Jerome: \"Yeah, talk to THIS dude, here's his number, he'll handle it.\" (hands us digits for the President of Warner Bros. Records)\n</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Finally, for all your conversational and expressive needs, an <a href=\"https://giphy.com/prince\">Official Prince GIF Archive</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image -->\n<figure class=\"wp-block-image\"><img src=\"uploads/2024/e4aae748cc.jpg\" alt=\"Do you think he's making a guitar sound with his mouth here?\" /><figcaption>Do you think he's making guitar sounds with his mouth while he films a music video for a recording of him making guitar sounds with his hands?</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-13T08:00:00-07:00",
				"url": "https://therealadam.com/2020/01/13/three-increasingly-wild.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/09/contracts-made-older.html",
				"title": "Contracts made older objects better",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Developers <a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">love</a> <a href=\"https://www.howtogeek.com/350322/what-is-ethereum-and-what-are-smart-contracts/\">contracts</a>, i.e. types and type systems. Except, and especially, <a href=\"http://blog.jayfields.com/2008/02/static-typing-considered-harmful.html\">when they don’t</a>. Contracts tell us, this module has a few functions and they definitely take these inputs and produce these outputs. Some languages (Haskell, Elm) even encode the possible side-effects of calling a function in the types. Contracts place useful, and sometimes comforting, constraints on the relationship between two bits of code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A consequence of software eating the world is real-world contracts became weaker. Physical objects no longer have the constraints that made them special before.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That fancy car you bought might mix artificial engine sounds in with whatever’s playing on your speakers. It may also collect data on where you’re going, upload it through a cellular data connection you’re not even paying for, and sell it for “marketing”. All of this a departure from what was previously considered the “contract” for a high-end car.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That porch camera an e-commerce giant sold you so people don’t steal packages off your porch may also be accessible to their customer support. Or, the police. Again, a departure from the contract most of us grew up with for household electronics.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That book you bought might get “turned off” if it’s no longer a good business for the vendor. It might get changed if words in it were wrong or politically inconvenient. You guessed it, not quite the contract most of us expect from a bag of words.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That computer-enhanced movie you went to see might get revamped wholesale because the teeth are creepy, a human hand where a cat's paw should be was overlooked, or because people were having too much of a laugh about the whole movie. Notably, this is not Martin Scorcese’s vision of what cinema should be.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Before they were software it was natural that cars, books, appliances, vinyl, etc. had better contracts:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>To understand why books are still around, and why they delight as they do, we need to do some “media accounting” — What are the costs (individually, socially) of engaging with certain media and mediums, apps and publications?</p><p><br>Understanding the contracts into which we enter with media helps demystify why physical books (and, similarly, vinyl, analog film, et cetera) not only remain compelling, but become more compelling the more their digital twins grow vast and fuzzy.</p><cite><a href=\"https://craigmod.com/essays/media_accounting/\">Stab a Book, the Book Won't Die</a> - Craig Mod</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>The software we’re building today is in almost every way superior to the immutable objects we created before. But I can’t help think that the constraints that make a copy of <em>Cat’s Cradle</em>, <em>The White Album</em>, an Omega watch, or a Porsche 911 special might make software better as well. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Perhaps what we need is a little <em>less</em> change and a little <em>more</em> purpose.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-09T19:40:00-07:00",
				"url": "https://therealadam.com/2020/01/09/contracts-made-older.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/06/training-amp-learning.html",
				"title": "Training \u0026amp; Learning",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A thing I’ve learned from weightlifting (also from <em>Destiny</em>, but that’s a whole other thing), is the value of showing up several times a week and putting in the right kind of work.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Learning is training, and the quality of your reps is important. David Perell makes the connection better than I could:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Athletes train. Musicians train. Performers train. But knowledge workers don’t.</p><p><br>Knowledge workers should train like LeBron, and implement strict “learning plans.” To be sure, intellectual life is different from basketball. Success is harder to measure and the metrics for improvement aren’t quite as clear. Even then, there’s a lot to learn from the way top athletes train. They are clear in their objectives and deliberate in their pursuit of improvement.</p><p><br>Knowledge workers should imitate them.</p><cite><a href=\"https://www.perell.com/blog/learn-like-an-athlete\">Learn like an athlete</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>In short:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><li>Train intentionally: choose one learning project per quarter.</li><li>Do the reps: learn every day.</li><li>Train in public/on Instagram: write/blog/etc. about your journey.</li></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>Economist Tyler Cowen also <a href=\"https://marginalrevolution.com/marginalrevolution/2019/07/learn-like-an-athlete-knowledge-workers-should-train.html\">commented</a> and shared his <a href=\"https://marginalrevolution.com/marginalrevolution/2019/07/how-i-practice-at-what-i-do.html\">routine</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My personal routine this month is: read fiction and non-fiction every day. Write or revise every day with an eye towards building up my muscle for publishing articles on this blog.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Also: floss every night. 🤷‍♂️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Related: applying a fitness training mindset to software development is a great way to reach <a href=\"https://therealadam.com/2019/05/28/these-are-computers-i-know-this/\">“I know this”</a>!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-06T08:30:00-07:00",
				"url": "https://therealadam.com/2020/01/06/training-amp-learning.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/03/william-gibson-in.html",
				"title": "William Gibson in the New Yorker",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"https://apple.news/Awlurs60rT8697PHSATyifA\">How William Gibson Keeps His Science Fiction Real</a> - I gotta read more Gibson; just as soon as I finish all the Stephenson. 🤦‍♂️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>   One of them showed him an episode of “Cops,” the pioneering reality series in which camera crews sprinted alongside police officers as they apprehended suspects. Policing, as performance, could be monetized. He could feel the world’s [fuckedness quotient] drifting upward.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>  Futurists he knew had begun talking about “the Singularity”—the moment when humanity is transformed completely by technology. Gibson didn’t buy it; he aimed to represent a “half-assed Singularity”—a world transforming dramatically but haphazardly. “It doesn’t feel to me that it’s in our nature to do anything perfectly,” he said.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>  He spent time on eBay—the first Web site that felt to him like a real place, perhaps because it was full of other people and their junk. Through eBay, he discovered an online watch forum, and, through the forum, he developed some expertise in military watches. He learned of a warehouse in Egypt from which it was possible to procure extinct Omega components; he sourced, for the forum membership, a particular kind of watch strap, the G10, which had originally been manufactured in the nineteen-seventies and had since become obscure. (A version of it, known as the NATO strap, is now wildly popular in menswear circles.) Gibson noticed that people with access to unlimited information could develop illusions of omniscience. He got into a few political debates on the forum. He felt the F.Q. creeping upward. </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Did Gibson popularize the <a href=\"https://www.hodinkee.com/watch101/nato-strap\">NATO watch strap</a> or was he just ahead of the horological time?🥁</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-03T18:42:08-07:00",
				"url": "https://therealadam.com/2020/01/03/william-gibson-in.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2020/01/02/options-everywhere.html",
				"title": "Options everywhere",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Setting roadmaps and key results feel like truthful, strategic work. But the flip side is, if you approach them at face value or don’t focus on the outcome, they reduce the ability for teams to creatively pursue different solutions in service of the desired outcome. That <em>increases</em> your risk of exceeding calendar/complexity budgets!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>I’ve come to hate the damage the “product roadmap” metaphor does to the brains of everyone involved in developing a product. When I use an actual map of actual roads, I assume that I know where I’m going and how I’m going to get there. This is never the case when developing a product.</p><cite>Kent Beck, <a href=\"https://medium.com/@kentbeck_7670/decisions-decisions-or-why-baskets-of-options-dominate-9ac63658b593\">Decisions, Decisions or Why Baskets of Options Dominate </a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Instead: choose shorter iterations that let you try an idea, spend a limited amount of time on it, and decide if it’s worth further pursuit. Optionality! The downside is, now you have to decide on each idea that got you closer to building the product or achieving the key result. Decision fatigue: It’s a better problem than no options! 🤷‍♂️</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Consumers, on the other hand, love options. Buying a car, instead of e.g. a bike or using scooters and buses, is buying a bundle of options:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>That’s why ditching car ownership is going to be really unattractive for a lot of people - no matter how attractive you make the alternatives. Unless you can replace all of the important jobs that a car does for you, all at once, then competing against the car means competing against free. Actually, it’s worse than that - it means competing against free and nice. Bundle economics (and also ego issues) are powerful enough that it’s pretty rare to see people downgrade their cars, even if their car requirements have gone way down (like they had kids go off to college). Once you go SUV, you don’t go back.   </p><cite>Alex Danco, <a href=\"https://danco.substack.com/p/the-car-bundle\">The Car Bundle</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>When we’re buying cars, we are making trade-offs on money, signaling, time, practicality, wanderlust, recreation, and whatever hoops the car salesperson is putting us through. Again, decisions are fatiguing!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2020-01-02T08:13:36-07:00",
				"url": "https://therealadam.com/2020/01/02/options-everywhere.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/24/taking-notes-on.html",
				"title": "Taking notes on paper vs. glass in 2019",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Software (currently, <a href=\"https://www.goodnotes.com\">GoodNotes</a>) and hardware (iPad Pro + Apple Pencil) are finally to a point where glass is competitive with paper (currently, Studio Neat <a href=\"https://www.studioneat.com/products/panobook\">Panobook</a>, previously Baron Fig <a href=\"https://www.baronfig.com/products/shopconfidant?subset=classic%20editions&amp;variant=35638867020\">Confidant</a>). I suspect we’re in a grey area like automatic vs. manual transmissions. Most folks won’t care and choose whichever is easier or at their disposal. A few will have very specific opinions or principles that lead their choices.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong>I am a man of principles and opinions.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>The sensation &amp; constraint of paper still beats glass. There is something about the resistance, the scratch, of a good pen across a finite sheet of paper. It’s easier for me to write “well” (opinions on my penmanship vary) on paper than on glass; something about the permanence of the ink or that my eyes are considerably higher resolution than glass displays. Filling notebook after notebook over the years and decades is vastly fulfilling in a way digital notes and writing aren’t.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The recall of software still beats note summarization. I flip through my digital notes quickly. Notionally, though not always accurately, I can search them via OCR. They’re always sync’d to some cloud, with me or quickly retrieved on whatever device is on my person. I can reference them in a window on my desktop computer or update them as though the glass was a sheet of paper at the ready. Organizing infinite notes in software is a gift and a curse.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The wildcards: I feel slightly precious in meetings when I unfold and start writing on glass. Cat drool doesn't smudge glass.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-24T13:11:29-07:00",
				"url": "https://therealadam.com/2019/12/24/taking-notes-on.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/23/how-regressions-happen.html",
				"title": "How regressions happen",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Working with software is frustrating, and working <em>on</em> software doubly so, because things up and break. Seemingly without warning or cause. One day the software is fine, the next day it flat-out doesn’t work. Even worse, one day it has this one bug or missing feature and the next day the bug is fixed or feature added but there’s all <em>new</em> bugs. What gives?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>I was finishing a new feature a couple weeks ago. The project was to the point of functional completion, but still needed QA review to find all the little missing details and product review to find any lurking inconsistencies or oddities. Over the course of a few days, I worked with my brave and intrepid teammates to get our software from a state of optimistic, abstract readiness to a more specific, concrete readiness to ship. As we worked through various scenarios, it often came up that something worked on Monday when Alice tried it but didn’t work Tuesday when Bob tried it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And thus, I was compelled to try and sheepishly explain why this kind of thing happens so frequently in the process of producing software.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In short, software is a mess of interconnections, ripple effects, and unintended consequences. Largely, software is a bunch of informal systems interacting with other dynamic systems interacting with humans.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Suppose a computer as sophisticated as an original iPhone. Given its processor and memory size, it can be in more distinct states than there are stars in the sky. More atoms than there are on earth, if you consider the storage.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Say, unscientifically, that 10% of those states result in your program doing the right thing and 90% result in bugs or indecipherable garbage. Because web/mobile app developers don't work in formalisms, it's impossible to say which of those states our program can be in, and whether any given code change can take you from 10% of the good states to 90% of the bad states.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Each time you change code, whether its adding a conditional to prevent a bug or adding new behavior for a wholly new feature, you're getting an entirely new \"path\" through the good/bad states. Some changes are more chaotic than you’d think; little change, bit outcome. And hence, sometimes a thing works fine, you make a change to fix something unrelated, and boom! you're in a bad state.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>To make matters worse, these states, the good and bad ones, aren’t determined in isolation. They’re interdependent. A small change in how you go from the 437th state to the 438th could result in an unexpected foray into the land of bad states.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s easy to think that the miracle is not that we’ve managed to arrange rocks and sand into microprocessors that seem like they can think, but that code we run on those rocks and sand ever worked in the first place!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-23T08:40:02-07:00",
				"url": "https://therealadam.com/2019/12/23/how-regressions-happen.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/19/my-routine-your.html",
				"title": "My 2019 routine, your mileage may vary",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I'm having a moment where I feel like I've got a winning wakeup/morning formula 🎊. Wake up early, around 6:30am. Feed the cats so they don't barf in protest later. Skim the tweets and feeds for a few minutes while the brain boots up. Write for five, fifteen minutes or so. Organize and think about notes/files/projects/research (I'm trying <a href=\"https://praxis.fortelabs.co/the-p-a-r-a-method-a-universal-system-for-organizing-digital-information-75a9da8bfb37/\">PARA</a>) and the structure of my work. <a href=\"https://headspace.design\">Meditate</a>. Work out, get to work (around 9:30am, lately).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Drink coffee. Focus before lunch. Teamwork after lunch, focused if possible. But probably meetings or 1:1s. <a href=\"https://therealadam.com/2019/11/14/things-makes-a-nice-landing-pad/\">Land ideas/tasks/projects/articles into Things</a> as I work so I can avoid distractions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Backfill things I finished into my todo so I don't have days where I accomplish a lot but check off little. Finish work by 6ish. Read in the evenings. Restrict gaming to weeks my wife travels for competitions. <em>(Narrator: he used restrict in a loose sense, here). </em>Watch the Peak Television, or just <em>Bob's Burgers</em> re-runs in the evening. Read a bit before bed, but probably also end up watching car videos on YouTube.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I fall to sleep easily, which is my superpower. Rinse, repeat.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-19T14:36:00-07:00",
				"url": "https://therealadam.com/2019/12/19/my-routine-your.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/18/sometimes-you-have.html",
				"title": "Sometimes you have to compile a list of known issues and ship",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>“’tis better to have known a software bug than to have never had a software at all”</p><cite> Lord Alfred Tennyson, except not</cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Software that never ships never has issues. Draw the line, get it out there. Celebrate a little and recharge your batteries. Now fix the important stuff; it may not even be the bug that almost held up your release.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-18T09:20:00-07:00",
				"url": "https://therealadam.com/2019/12/18/sometimes-you-have.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/17/supporting-remote-work.html",
				"title": "Supporting remote work when you're co-located",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Dave Rupert, <a href=\"https://daverupert.com/2019/12/remote-work/\">Everything I Know About Remote Work</a>. Me, everything I know about working with remote workers when you're co-located:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li><strong>Every</strong> single meeting has a video link.</li><li>If one person is remote on a meeting, it's optimal to have <em>everyone</em> on the video call. Meeting rooms with video equipment are good, but don't put everyone on equal footing. Mind the dynamic! One person with their laptop open vaguely facing most participants is not even acceptable.</li><li>People naturally discuss and even decide things face-to-face/offline when colocated. That's fine! Make sure one person summarizes the shape of the conversation and important take-aways in email/Slack/whatever you're using.</li><li>You now work async. On the downside, that means <em>anyone</em> on your team could now be heads-down, in the zone, not responding to your emails/Slacks while they get stuff done. On the upside, you can turn off all your distractions and get some stuff done too!</li></ol>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>The end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Narrator: there was probably more...</em></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-17T17:14:10-07:00",
				"url": "https://therealadam.com/2019/12/17/supporting-remote-work.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/14/writing-to-a.html",
				"title": "Writing to a past version of myself",
				"content_html": "<p>Left to my own devices, I write in the second person. With apologies to my high school English teachers, I have a justification for this: I&rsquo;m writing to myself from one, five, ten, twenty years ago.</p>\n<p>I&rsquo;m writing a thing on the skill of reading framework code. I try to keep in mind that I should write to <!-- raw HTML omitted -->you the reader<!-- raw HTML omitted --> from <!-- raw HTML omitted -->me the first person<!-- raw HTML omitted -->, so as not to project upon you. But I keep writing to <!-- raw HTML omitted -->you the past version of myself<!-- raw HTML omitted -->, like I&rsquo;m <!-- raw HTML omitted -->Scrooged<!-- raw HTML omitted -->&lsquo;ing myself, sending back little bits of wisdom about things that worked out for future me and things that future me wishes past me tried differently.</p>\n<p>So sometimes you, the reader, will see me hastily publish something written in the second person. Sometimes I&rsquo;m diligent and search&amp;replace for &ldquo;you&rdquo;. Tools like Grammarly could probably help me here. But sometimes, I like to leave in the notes to my past or future self. 🤷‍♂️</p>\n",
				"content_text": "Left to my own devices, I write in the second person. With apologies to my high school English teachers, I have a justification for this: I'm writing to myself from one, five, ten, twenty years ago.\n\nI'm writing a thing on the skill of reading framework code. I try to keep in mind that I should write to <strong>you the reader</strong> from <strong>me the first person</strong>, so as not to project upon you. But I keep writing to <strong>you the past version of myself</strong>, like I'm <em>Scrooged</em>'ing myself, sending back little bits of wisdom about things that worked out for future me and things that future me wishes past me tried differently.\n\nSo sometimes you, the reader, will see me hastily publish something written in the second person. Sometimes I'm diligent and search&amp;replace for \"you\". Tools like Grammarly could probably help me here. But sometimes, I like to leave in the notes to my past or future self. 🤷‍♂️\n",
				"date_published": "2019-12-14T13:33:41-07:00",
				"url": "https://therealadam.com/2019/12/14/writing-to-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/12/14/your-fathers-janky.html",
				"title": "Your father's janky graphs these are not",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>You can Graphviz on the web now. <a href=\"https://sketchviz.com/new\">Roughly-drawn sketch style</a>, <a href=\"https://rsms.me/graphviz/\">slightly Swiss modernism</a>, or even in the <a href=\"https://www.figma.com/c/plugin/770827538515501401/Graphviz\">design tool Figma</a>. Mostly enabled by <a href=\"https://github.com/mdaines/viz.js\">a port of Graphviz to Web Assembly</a> via emscripten. This is one of the futures I was promised.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-12-14T06:45:36-07:00",
				"url": "https://therealadam.com/2019/12/14/your-fathers-janky.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/17/locality-module-systems.html",
				"title": "Locality, module systems, coherence",
				"content_html": "<p><a href=\"https://twitter.com/mfeathers/status/1188522838078218240\">Michael Feathers on locality</a> in software design:</p>\n<blockquote>\n<p>You have locality when you don&rsquo;t have to look beyond your gaze to understand how you are affected or how you affect.</p>\n</blockquote>\n<p>I find languages with a strong module system (Rust, Clojure, sometimes ES6-by-the-books) make each source file more coherent and easier to read than languages where methods or state have more sophisticated/powerful lookup schemes (Ruby, React-flavored ES6).</p>\n<p>Plus, strong module systems seem to come with the side benefit of encouraging us to make up names for the functions and state we import, again improving coherence and readability.</p>\n<p>A strong sense of locality, module systems, and coherence aren&rsquo;t in a causal relationship, but they sure do taste great together.</p>\n",
				"content_text": "[Michael Feathers on locality](https://twitter.com/mfeathers/status/1188522838078218240) in software design: \n\n> You have locality when you don't have to look beyond your gaze to understand how you are affected or how you affect.\n\nI find languages with a strong module system (Rust, Clojure, sometimes ES6-by-the-books) make each source file more coherent and easier to read than languages where methods or state have more sophisticated/powerful lookup schemes (Ruby, React-flavored ES6). \n\nPlus, strong module systems seem to come with the side benefit of encouraging us to make up names for the functions and state we import, again improving coherence and readability.\n\nA strong sense of locality, module systems, and coherence aren't in a causal relationship, but they sure do taste great together.\n",
				"date_published": "2019-11-17T16:29:44-07:00",
				"url": "https://therealadam.com/2019/11/17/locality-module-systems.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/16/the-longines-heritage.html",
				"title": "The Longines Heritage Military 1938",
				"content_html": "<p>The <a href=\"https://www.hodinkee.com/articles/the-longines-heritage-military-1938?mc_cid=3bceda9230&amp;mc_eid=1e5968a7ea\">deep-black, serene face</a> on this watch is a real winner. The numbering and proportions are also ace.</p>\n",
				"content_text": "The [deep-black, serene face](https://www.hodinkee.com/articles/the-longines-heritage-military-1938?mc_cid=3bceda9230&mc_eid=1e5968a7ea) on this watch is a real winner. The numbering and proportions are also ace.\n",
				"date_published": "2019-11-16T15:11:00-07:00",
				"url": "https://therealadam.com/2019/11/16/the-longines-heritage.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/16/i-guess-brian.html",
				"title": "I guess Brian Wilson didn't recede into his pocket dimension after all",
				"content_html": "<p><a href=\"https://www.reddit.com/r/dataisbeautiful/comments/dwj07j/oc_share_of_lead_vocals_by_each_beach_boy_on/\">Who sang lead the most on each Beach Boys album?</a> - Brian Wilson is way more active after <em>Pet Sounds</em> than I would have imagined.</p>\n",
				"content_text": "[Who sang lead the most on each Beach Boys album?](https://www.reddit.com/r/dataisbeautiful/comments/dwj07j/oc_share_of_lead_vocals_by_each_beach_boy_on/) - Brian Wilson is way more active after _Pet Sounds_ than I would have imagined.\n",
				"date_published": "2019-11-16T14:52:48-07:00",
				"url": "https://therealadam.com/2019/11/16/i-guess-brian.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/16/team-organization-matters.html",
				"title": "Team organization matters",
				"content_html": "<p>On <a href=\"https://rcrowley.org/2019/team-composition.html\">team composition</a> and the distribution of higher/lower experience team members:</p>\n<blockquote>\n<p>Even though pretty much any team can deliver results, suboptimal team composition is still a problem.  It’s a problem when teams working on very straightforward projects take longer than necessary.  It’s a problem when teams stacked with senior engineers are neither mentoring junior engineers nor taking moonshots.  Most importantly, these problems are hard to notice because, again, everyone’s delivering results.</p>\n</blockquote>\n<ul>\n<li>Richard Crowley</li>\n</ul>\n",
				"content_text": "On [team composition](https://rcrowley.org/2019/team-composition.html) and the distribution of higher/lower experience team members:\n\n> Even though pretty much any team can deliver results, suboptimal team composition is still a problem.  It’s a problem when teams working on very straightforward projects take longer than necessary.  It’s a problem when teams stacked with senior engineers are neither mentoring junior engineers nor taking moonshots.  Most importantly, these problems are hard to notice because, again, everyone’s delivering results.\n\n- Richard Crowley\n",
				"date_published": "2019-11-16T07:15:19-07:00",
				"url": "https://therealadam.com/2019/11/16/team-organization-matters.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/14/dave-quah-made.html",
				
				"content_html": "<p>Dave Quah made a pretty dang good HTML &amp; CSS version of the <a href=\"https://codepen.io/Milleus/pen/XWWEKqm\">Destiny loading animation</a>. I see a lot of this thing and that’s pretty a pretty dang awesome achievement.</p>\n",
				"content_text": "Dave Quah made a pretty dang good HTML & CSS version of the [Destiny loading animation](https://codepen.io/Milleus/pen/XWWEKqm). I see a lot of this thing and that’s pretty a pretty dang awesome achievement.\n",
				"date_published": "2019-11-14T15:48:24-07:00",
				"url": "https://therealadam.com/2019/11/14/dave-quah-made.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/14/things-makes-a.html",
				"title": "Things makes a nice landing pad",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>One of the better productivity ideas I’ve seen over the years is using some app as a landing pad for all the random ideas, recommendations, and notes I come across in the moment.  I’ve been using <a href=\"https://culturedcode.com/things/\">Things</a> for this lately, and its surprisingly effective while remaining stress free.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>Here's what my Inbox/landing pad looks like right now:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5161,\"width\":766,\"height\":358} -->\n<figure class=\"wp-block-image is-resized\"><img src=\"uploads/2024/4533f6e9bf.jpg\" alt=\"An inbox in Things with four items\" class=\"wp-image-5161\" width=\"766\" height=\"358\" /><figcaption>In our modern times, Inbox is another word for procrastination</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>I've accumulated a handful of links to read, link to, watch, or write about. Some of these I'll look at in the morning and check off as I go. If something hangs around in the Inbox too long, it probably needs to go into a project somewhere. Usually, I read the thing or watch the video, check it off, and feel more productive about the day.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most importantly, I'm capturing ideas or links whether they're Really Great or Just Okay and then dealing with them later. If an idea is really special, I start filling an idea in right away in Things, either in the Inbox or as part of a project. I also do this when I'm actually working on a task. Rather than try to balance Things, Bear, Goodnotes, etc. I jot down ideas and progress as I work in Things.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":5162} -->\n<figure class=\"wp-block-image\"><img src=\"uploads/2024/0f62c83e1b.jpg\" alt=\"A task in Things with a note describing programming research\" class=\"wp-image-5162\" /><figcaption>Thinking into a text box: an essential skill of contemporary times.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>This running list of ideas, code, and further links may become a note in Bear, a blog post, a tweet, etc. Things isn't perfect here; it doesn't understand Markdown, it's not a sophisticated note-taking thing. But, it's quick and it works great, so it checks the boxes here. As I'm wrapping up the task, I will probably end up copy/pasting the whole task and notes into someplace for future reference.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So that works for me, right now!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-11-14T15:35:04-07:00",
				"url": "https://therealadam.com/2019/11/14/things-makes-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/13/i-dont-often.html",
				
				"content_html": "<p>I don&rsquo;t often have the need for a tiny spreadsheet on my phone, but I love everything about <a href=\"https://postlight.com/labs/tinysheet\">Tinysheet</a> by Postlight.</p>\n",
				"content_text": "I don't often have the need for a tiny spreadsheet on my phone, but I love everything about [Tinysheet](https://postlight.com/labs/tinysheet) by Postlight.\n",
				"date_published": "2019-11-13T06:21:12-07:00",
				"url": "https://therealadam.com/2019/11/13/i-dont-often.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/13/how-dj-premier.html",
				
				"content_html": "<p><a href=\"https://www.vulture.com/2017/12/how-dj-premier-changed-hip-hop.html\">How DJ Premier Changed Hip-Hop</a> - I did not realize he&rsquo;s the producer on so many tracks. Particularly, Nas (&ldquo;New York State of Mind&rdquo;, even), D&rsquo;Angelo, and (checks notes) Christina Aguilera.</p>\n",
				"content_text": "[How DJ Premier Changed Hip-Hop](https://www.vulture.com/2017/12/how-dj-premier-changed-hip-hop.html) - I did not realize he's the producer on so many tracks. Particularly, Nas (\"New York State of Mind\", even), D'Angelo, and (checks notes) Christina Aguilera.\n",
				"date_published": "2019-11-13T06:15:07-07:00",
				"url": "https://therealadam.com/2019/11/13/how-dj-premier.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/11/the-desirable-qualities.html",
				"title": "The desirable qualities of good tests",
				"content_html": "<p>I often say that learning test-driven development is comparable to learning a whole other programming language. The practice of TDD is a mirror world of depth and trade-offs. Kent Beck underscores that depth in listing all [the desirable qualities of good tests], some of which are at tension with each other. Tests aren’t the easiest thing to get right, but there’s no better way to improve your design skills than to wrestle with the feedback loop of writing tests for the code you’re currently working on.</p>\n",
				"content_text": "I often say that learning test-driven development is comparable to learning a whole other programming language. The practice of TDD is a mirror world of depth and trade-offs. Kent Beck underscores that depth in listing all [the desirable qualities of good tests], some of which are at tension with each other. Tests aren’t the easiest thing to get right, but there’s no better way to improve your design skills than to wrestle with the feedback loop of writing tests for the code you’re currently working on.\n",
				"date_published": "2019-11-11T06:06:17-07:00",
				"url": "https://therealadam.com/2019/11/11/the-desirable-qualities.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/10/i-just-wrote.html",
				
				"content_html": "<p>‪I just wrote &lsquo;Automotive form, Eddie Murphy, DC, the Goodfellas/My Blue Heaven connection&rsquo;. <a href=\"https://buttondown.email/therealadam/archive/automotive-form-eddie-murphy-dc-the-goodfellasmy/\">buttondown.email/therealad&hellip;</a>‬</p>\n",
				"content_text": "‪I just wrote 'Automotive form, Eddie Murphy, DC, the Goodfellas/My Blue Heaven connection'. [buttondown.email/therealad...](https://buttondown.email/therealadam/archive/automotive-form-eddie-murphy-dc-the-goodfellasmy/)‬\n",
				"date_published": "2019-11-10T10:44:59-07:00",
				"url": "https://therealadam.com/2019/11/10/i-just-wrote.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/10/the-fulltext-search.html",
				"title": "The full-text search future we were promised",
				"content_html": "<p>I&rsquo;ve been reorganizing some notes and considering moving specific topics/tags out of Bear. Turns out I can search across Bear, OmniOutliner, Ulysses, and random text files on my Mac w/ Spotlight pretty well now. Just type in a few words I vaguely recall and boom I’m there. That&rsquo;s a promising development, the future we were promised!</p>\n",
				"content_text": "I've been reorganizing some notes and considering moving specific topics/tags out of Bear. Turns out I can search across Bear, OmniOutliner, Ulysses, and random text files on my Mac w/ Spotlight pretty well now. Just type in a few words I vaguely recall and boom I’m there. That's a promising development, the future we were promised!\n",
				"date_published": "2019-11-10T10:05:13-07:00",
				"url": "https://therealadam.com/2019/11/10/the-fulltext-search.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/09/a-great-twitter.html",
				
				"content_html": "<p>A great <a href=\"https://twitter.com/nmsanchez/status/1191829481180155904\">Twitter thread</a> on the importance of training managers. It boggles my mind we just throw so many people in the leadership pool and hope for the best. Every manager had a manager at some point! Why did we only start writing it down in the past few years? 🤷‍♂️🤦‍♂️</p>\n",
				"content_text": "A great [Twitter thread](https://twitter.com/nmsanchez/status/1191829481180155904) on the importance of training managers. It boggles my mind we just throw so many people in the leadership pool and hope for the best. Every manager had a manager at some point! Why did we only start writing it down in the past few years? 🤷‍♂️🤦‍♂️\n",
				"date_published": "2019-11-09T14:50:43-07:00",
				"url": "https://therealadam.com/2019/11/09/a-great-twitter.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/09/automotive-function-determines.html",
				"title": "Automotive function determines form",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>I generally think function should have a strong influence on form, if not determine the form outright. I like to use cars an example of this, but I’m having trouble reconciling  the past of “function over form” with the future.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Back in the days of peak car culture (1960s), the Jaguar E-Type was (and currently is) considered one of the finest looking cars ever produced:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":5154} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"uploads/2024/b06708b040.jpg\" alt=\"\" class=\"wp-image-5154\" /><figcaption>The Jaguar E-Type. Possibly the best possible shape for a car, ever.</figcaption></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>I’m taken by that long, long hood. And, as per my principles, that is function defining form. The car had an inline-6 cylinder engine and later a V-12 engine. Both very long engines. Further, the E-Type is a sports car and sports cars of the era were all rear-wheel drive. That means the engine has to be mounted on the length of the car. All that adds up to requiring a <em>very</em> long hood. And, it turns out, the designers working on the form did a fine job accommodating that function!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’m not particularly taken by modern Lamborghini, but the Aventador serves nicely as another example of form determining function (at least in my imagination):</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":5152} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"uploads/2024/6e69b7a3b9.jpg\" alt=\"\" class=\"wp-image-5152\" /><figcaption>The Lamborghini Aventador. An ode to mechanical aggression.</figcaption></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>The Aventador is also a sports car and also contains a rather large V-12 engine, this time mounted <em>behind</em> the driver. What transpired in the decades between the E-Type and the Aventador is a whole lot of technological development. Where the E-Type is a masterpiece in blended lines, the Aventador is a cacophony of gizmos and dingers on the outside of the car, particularly the back. Most of those slats and ducts serve the function of a) cooling the car’s engine, turbochargers, or brakes, b) shaping air flow around the car to reduce drag or increase grip in corners, and/or c) making the car “look pricey and fast”. I like to think that an initial design concept had more gracefully blended curves, but the engineering director put the kibosh on it because it would prevent exposing some kind of cooling duct or aerodynamic surface in a crucial spot. Function (going fast, looking pricey) determines form.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I’m increasingly convinced the Toyota Prius, alongside the Tesla Model S, will be thought of as the pivot point from oil to renewable culture. This shape will be part of that story:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":5153} -->\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"uploads/2024/244d89207c.jpg\" alt=\"\" class=\"wp-image-5153\" /><figcaption>The Toyota Prius. It is a car, with a shape.</figcaption></figure></div>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Electric cars <em>require</em> efficiency throughout. Lower weight, skinny tires to reduce friction, and low aerodynamic drag. The last, I fear, is the function that will lead us to extremely boring “aero-lump” forms. Most electric/self-driving car designs are going for “sitting room on wheels” as function, and there are only so many low-drag forms that can take. None of them “exciting”.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The E-Type and Aventador are, to my eye, pleasing forms by function, or perhaps by nostalgia. But the Prius (and even the Model S/3 that have followed it) school of design has not yet generated deeply pleasing forms.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In principle, I still like the idea of form following function. In my heart, for the future of car-based transportation, I’m a little worried about the outcomes.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-11-09T07:01:33-07:00",
				"url": "https://therealadam.com/2019/11/09/automotive-function-determines.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/05/social-media-in.html",
				"title": "Social media in the morning? Whichever.",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<!-- wp:paragraph -->\n<p>Austin Kleon <a href=\"https://austinkleon.com/2017/07/27/being-woke-without-waking-up-to-it/%0A\">recommends skipping the news/social media/blinky lights in the morning</a>. I’ve found this works great for me, and sometimes not! I’m a morning person, so I’ve got that going for me. If I’m already in a groove, have ideas about what to write or code on, and jump in first thing, this advice works out for me. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:more -->\n<!--more-->\n<!-- /wp:more -->\n\n<!-- wp:paragraph -->\n<p>When I’m in a rut, or returning from a vacation and out of the groove, I need something to kickstart the process. I can <em>often</em> find that somewhere in the buzz of people computing with words on blogs or Twitter.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>On the other hand, less thoughtful inputs don’t get me going. Instagram, nope. Daily news articles or op-eds raise my blood pressure, but don’t get me creating in the right direction. Seeing what’s up with cars, racing, or video games are interesting, but don’t get me to the point of making.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Getting over the hurdle from “waking up” to “making stuff” to “in a groove” is so difficult. Often that takes a little outside stimulus. Equally often, I just need to keep going.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-11-05T06:07:38-07:00",
				"url": "https://therealadam.com/2019/11/05/social-media-in.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/11/03/blogging-like-writing.html",
				"title": "Blogging, like writing, is challenging",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>The thing which makes blogging difficult is not engagement, analytics, finding just the right theme, curating to a newsletter, managing comments, finding reach after the demise of Google reader, etc. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The hardest part is showing up, every day, writing. The hardest part is writing! The second hardest thing is hitting the publish button on a regular basis, not necessarily every day.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Deciding what to write about is pretty tricky too. And not falling prey to \"hmm this idea really deserves a nine-part, 15 thousand word treatment, probably in eBook form\". And hitting <code>Publish</code> even when you're not sure.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>So I'm trying to blog (most/many) days in November. Which is easier than <a href=\"https://www.nanowrimo.org\">writing a whole book</a>! The roadblocks look pretty similar, though.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-11-03T17:34:03-07:00",
				"url": "https://therealadam.com/2019/11/03/blogging-like-writing.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/08/26/currently-intriguing-toby.html",
				"title": "Currently intriguing: Toby Shorin",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I'm currently intrigued by, and not entirely sure what to do with, the ideas of <a href=\"https://subpixel.space/\">Toby Shorin</a>. Particularly, <a href=\"https://subpixel.space/entries/jobs-to-be-done/\">Jobs To Be Done</a> and <a href=\"https://subpixel.space/entries/the-desire-for-full-automation/\">The Desire for Full Automation</a>. The thread of design thinking, the \"needs\" of technology, capitalism, and social systems runs throughout. Milkshakes are perfect for commutes, jobs are as varied as chores, biological functions, and societal norms. Existing in the system of the world, the system and our job within it defining us. What capitalism desires of people and society, the need for automation therein. Whether automation of tedium liberates or restricts us. Has the agency of capital (the excess money in the emergent system we live in) already turned us into automatons for its purposes? How does automation and purpose square with religion? 🤔🤔🤔</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-08-26T12:52:00-07:00",
				"url": "https://therealadam.com/2019/08/26/currently-intriguing-toby.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/08/17/the-paradox-of.html",
				"title": "The paradox of event sourcing",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>The hardest part for me is knowing when to use this. It creates a lot of friction for a small application, but all applications start small. Moving to an event-sourced architecture when your application (and team) is no longer small feels like a big undertaking that could be hard to justify.</p><cite>Dave Copeland, <a href=\"https://naildrivin5.com/blog/2019/08/14/event-sourcing-in-the-small.html\">Event Sourcing in the Small</a></cite></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Once an application is big enough to need it, it's already hard to introduce it. But, it's too much trouble to start an application with this architecture. Maybe this is corollary to \"most things are easy/workable on small teams/applications\"?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>A few problems that Dave ran into building a small event-sourced data model were in deriving the domain models (he called them projections) from the event data model. It's possible that there's a sweet balance point between rolling this kind of data flow behavior by hand and building an entire framework around capturing events that are transformed for various consumers to their specific domain model needs. I haven't seen it yet.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I haven't kept up with <a href=\"https://www.datomic.com\">Datomic</a>, but the interesting about it a few years ago was that it was sort of event sourcing as a database. Data producers store events to it (in a format that strongly resembled RDF triples). Consumers used data flow queries to define how to transform and scope that data to their needs. It also had a pretty sweet time-travel story. (I'm always a sucker for a good time-travel story.)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If well-considered boundaries and excellent operational tooling are the enabling factors of a services architecture, what are the enabling factors of an event-modeled architecture?</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-08-17T06:46:17-07:00",
				"url": "https://therealadam.com/2019/08/17/the-paradox-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/08/16/selfdirected-rabbit-holes.html",
				"title": "Self-directed rabbit holes (rather than reading All The Topics)",
				"content_html": "<p>Tyler Cowen: go down <a href=\"https://marginalrevolution.com/marginalrevolution/2019/08/reading-and-rabbit-holes.html?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+marginalrevolution%2Ffeed+%28Marginal+Revolution%29\">self-directed rabbit holes</a> rather than reading the &ldquo;definitive tomes&rdquo; on broad-ish topics you&rsquo;re curious about:</p>\n<blockquote>\n<p>Let’s say you want to read some books on Venice, maybe because you are traveling there, or you are just curious about the Renaissance, or about the history of the visual arts.</p>\n</blockquote>\n<blockquote>\n<p>&hellip;</p>\n</blockquote>\n<blockquote>\n<p>I instead suggest a “rabbit holes” strategy, a term coined in this context by Devon Zuegel. Come up with a bunch of questions about Venice you want answered, and then simply do whatever you must to pursue them. </p>\n</blockquote>\n",
				"content_text": "Tyler Cowen: go down [self-directed rabbit holes](https://marginalrevolution.com/marginalrevolution/2019/08/reading-and-rabbit-holes.html?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+marginalrevolution%2Ffeed+%28Marginal+Revolution%29) rather than reading the \"definitive tomes\" on broad-ish topics you're curious about:\n\n> Let’s say you want to read some books on Venice, maybe because you are traveling there, or you are just curious about the Renaissance, or about the history of the visual arts.\n\n> ...\n\n> I instead suggest a “rabbit holes” strategy, a term coined in this context by Devon Zuegel. Come up with a bunch of questions about Venice you want answered, and then simply do whatever you must to pursue them. \n",
				"date_published": "2019-08-16T06:42:46-07:00",
				"url": "https://therealadam.com/2019/08/16/selfdirected-rabbit-holes.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/08/13/reclaim-the-hacker.html",
				"title": "Reclaim the hacker mindset",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>There was a time when the <a href=\"https://blogs.lse.ac.uk/impactofsocialsciences/2014/01/16/hacking-is-a-mindset-not-a-skillset/\">hacker mindset</a> was about something nice.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>They’ve adopted a hacking mindset. They translate this clever, ethical, enjoyable, excellence-seeking behaviour to their everyday lives. See? Hacking is a mindset, not a skillset. When you seek, in your everyday life, to deliberately find opportunities to be clever, ethical, to enjoy what you are doing, to seek excellence, then you’re hacking. </p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>Not enriching a few people. Not replacing everyone else's bad things with differently-bad treadmills. Not crushing 20-hour days, the latest programming hype, or whatever Paul Graham/Peter Thiel are saying. The orange website ethos, as one might say. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Enjoyable. <strong>Ethical</strong>. Seeking excellence to reshape the world into something better for <em>everyone's everyday</em> life.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-08-13T08:12:25-07:00",
				"url": "https://therealadam.com/2019/08/13/reclaim-the-hacker.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/08/13/current-obsession-the.html",
				
				"content_html": "<p>Current obsession: the <a href=\"https://en.wikipedia.org/wiki/Porsche_962\">Porsche 962</a> racecar. A spacecar GT/LeMans design. Bubble-esque cockpit, ground-effect body. It won some races. A <a href=\"https://canepa.com/1985-porsche-962c/\">great shape with the body panels on or off</a>.</p>\n",
				"content_text": "Current obsession: the [Porsche 962](https://en.wikipedia.org/wiki/Porsche_962) racecar. A spacecar GT/LeMans design. Bubble-esque cockpit, ground-effect body. It won some races. A [great shape with the body panels on or off](https://canepa.com/1985-porsche-962c/).\n",
				"date_published": "2019-08-13T05:32:37-07:00",
				"url": "https://therealadam.com/2019/08/13/current-obsession-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/07/18/personal-choices-outperform.html",
				"title": "Personal choices outperform technology choices",
				"content_html": "<p>This dinger at the end of <a href=\"https://nshipster.com/wwdc-2019/\">Mattt&rsquo;s WWDC wrap-up</a> is everything:</p>\n<blockquote>\n<p>Taking care of yourself — sleeping enough, eating right, exercising regularly — will do more to improve your productivity than any language or framework out there. Your ability to communicate and collaborate with others will always be a better predictor of success than your choice of technology stack. Your relationships with others are the most significant factors of success and happiness in life.</p>\n</blockquote>\n",
				"content_text": "This dinger at the end of [Mattt's WWDC wrap-up](https://nshipster.com/wwdc-2019/) is everything:\n\n> Taking care of yourself — sleeping enough, eating right, exercising regularly — will do more to improve your productivity than any language or framework out there. Your ability to communicate and collaborate with others will always be a better predictor of success than your choice of technology stack. Your relationships with others are the most significant factors of success and happiness in life.\n",
				"date_published": "2019-07-18T05:40:55-07:00",
				"url": "https://therealadam.com/2019/07/18/personal-choices-outperform.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/07/17/no-topic-is.html",
				"title": "No topic is off-limits",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>My favorite thing about software development is the breadth and depth of the profession. On the one hand, there’s a ton to learn about computer science, programming languages, operating systems, databases, user interface, networking, and so on. On the other hand, there’s <em>even more</em> to learn about math, payments, sociology, team dynamics, finance, commerce, linguistics, business, design, etc. Pretty much the whole world around us!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some folks tell you topics are off-limits. “Front-end developers don’t need to know databases”. “Back-end developers don’t need to know design”. “You only need to know Linux if you’re doing dev-ops”. “The humanities are a waste of your time.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Those folks are wrong. 😡</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You can pick up whatever ideas you want. You can study a topic at any depth. Choose your own specialization. Learn whatever you want, however you want. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Maybe you want to know just enough <a href=\"https://www.youtube.com/watch?v=spUNpyF58BY\">Fourier math</a> to understand how imaging and audio systems work. Maybe you’re so hungry for clever math you work the problem sets from a college course. Either way is fine!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Several years ago I wanted to understand the jargon and mechanics of economics and finance. So, I listened to <a href=\"http://www.econtalk.org\">a bunch of podcasts</a>, read a few books, and <a href=\"https://www.economist.com\">consistently read a magazine</a>. I can throw around words like “negative externalities” or “financial instrument” now, but I’m no expert. I’m cool with that. I’m just here to understand the shape of things, not to become a professional.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Point is, all of these ideas could come in handy under the very large tent that is software development. Go learn economics, databases, design, or whatever. The more you know, the more likely you are to create a connection between adjacent ideas.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Beyond the languages, the libraries, and all the hype cycles, the ability to understand domains of knowledge is what sets great developers aside from good ones. And none of that knowledge, whether technical or otherwise, is off limits!</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-07-17T09:14:58-07:00",
				"url": "https://therealadam.com/2019/07/17/no-topic-is.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/07/10/problem-solvers.html",
				"title": "Problem solvers",
				"content_html": "<p>We could be problem-solving technologists. We could avoid getting wrapped up in programmer elitism and tribal competition.</p>\n<p>We might solve more problems that way!</p>\n<p>We can still find <!-- raw HTML omitted -->joy<!-- raw HTML omitted --> in certain technologies. We can still ply our trade in solving meta-problems with those technologies while solving increasingly interesting problems with the technology.</p>\n<p>We might have more fun and worry less about the hype treadmill!</p>\n<p>We’d have more mental space to consider <!-- raw HTML omitted -->how<!-- raw HTML omitted --> we’re solving problems. We could communicate better with our teammates and customers.</p>\n<p>We might consider whether the thing we’re building is right for the world we live in!</p>\n",
				"content_text": "We could be problem-solving technologists. We could avoid getting wrapped up in programmer elitism and tribal competition.\n\nWe might solve more problems that way!\n\nWe can still find <em>joy</em> in certain technologies. We can still ply our trade in solving meta-problems with those technologies while solving increasingly interesting problems with the technology.\n\nWe might have more fun and worry less about the hype treadmill!\n\nWe’d have more mental space to consider <em>how</em> we’re solving problems. We could communicate better with our teammates and customers.\n\nWe might consider whether the thing we’re building is right for the world we live in!\n",
				"date_published": "2019-07-10T05:22:56-07:00",
				"url": "https://therealadam.com/2019/07/10/problem-solvers.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/07/03/postmodernism-rules-everything.html",
				"title": "Postmodernism rules everything around me",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p><a href=\"http://www.bldgblog.com/2007/10/greater-los-angeles/\">Greater Los Angeles</a> - Geoff Manaugh. Remember when an iPhone had trouble with cellular reception if you put your fingers in the wrong place and a response that was overblown and taken out of context was “you’re holding it wrong”? Los Angeles is a city which you cannot hold wrong. It is so vast and varied that everyone belongs in some way and yet everyone can be alone in some way. It’s not about where you came from or what you did, but what  you’re making of it <em>right now</em>. The idea of moving to LA is daunting, but at least it's a bit romantic.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p> <a href=\"https://www.topic.com/how-ambient-chill-became-the-new-silence\">Corporate Background Music Is Taking Over Every Part of Our Lives</a> - Sophie Haigney. Apparently there’s a whole post-job/career industry of making and (royalty-free) licensing of music to play in the commercial spaces where we do our consumer society thing. Previously we would have called this Muzak, which was also the name of a company, which is also still a thing.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"https://www.newyorker.com/books/page-turner/what-kurt-vonneguts-slaughterhouse-five-tells-us-now\">What Kurt Vonnegut’s “Slaughterhouse-Five” Tells Us Now</a> - Salman Rushdie. My favorite phrase, “So it goes” is a bit more gallows than I remembered:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>I had not remembered, until I reread “Slaughterhouse-Five,” that that famous phrase “So it goes” is used only and always as a comment on death. Sometimes a phrase from a novel or a play or a film can catch the imagination so powerfully—even when misquoted—that it lifts off from the page and acquires an independent life of its own. “Come up and see me sometime” and “Play it again, Sam” are misquotations of this type. Something of this sort has also happened to the phrase “So it goes.” The trouble is that when this kind of liftoff happens to a phrase its original context is lost. I suspect that many people who have not read Vonnegut are familiar with the phrase, but they, and also, I suspect, many people who have read Vonnegut, think of it as a kind of resigned commentary on life. Life rarely turns out in the way the living hope for, and “So it goes” has become one of the ways in which we verbally shrug our shoulders and accept what life gives us. But that is not its purpose in “Slaughterhouse-Five.” “So it goes” is not a way of accepting life but, rather, of facing death. It occurs in the text almost every single time someone dies, and only when death is evoked.</em></p><p><em>It may be impossible to stop wars, just as it’s impossible to stop glaciers, but it’s still worth finding the form and the language that reminds us what they are and calls them by their true names. That is what realism is.</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p><em>Slaugherhouse Five</em> is not my favorite Vonnegut novel (<em>Cat’s Cradle</em> is, lets hear it for Bokonism), but it’s certainly the most consequential and the one I get the most out of re-reading (or have ever re-read?). I had no idea <em>Hitchhiker’s Guide to the Galaxy</em> is so intertwined with it (which I also could stand to re-read).</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-07-03T06:01:42-07:00",
				"url": "https://therealadam.com/2019/07/03/postmodernism-rules-everything.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/29/data-it-turns.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Data, it turns out, is far more valuable than code. Google and Facebook are unprecedented in economic history because of the data they&#8217;ve amassed; their applications, languages, and vast infrastructure merely enable the data. </p>\n\n<p><a href=\"https://blog.jessitron.com/2019/06/27/when-the-db-is-the-interface/\">When the db is the interface – Jessitron</a>: &#8220;There are two huge sources of inertia in software: data, and interfaces.&#8221; Therefore, it makes sense, as Jessica points out, that 1) databases are the interface that matter most in your system and 2) a few patterns of databases and interactions thereof can make the difference between an evolvable system and one that grows from unwieldy to untenable.</p>\n",
				"date_published": "2019-06-29T12:54:02-07:00",
				"url": "https://therealadam.com/2019/06/29/data-it-turns.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/23/do-something-syndrome.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://fs.blog/2015/06/do-something-syndrome/\">Do Something Syndrome: When Movement Trumps Results</a>:</p>\n\n<blockquote>I was to learn later in life that we tend to meet any new situation by reorganizing, and what a wonderful method it can be for creating the illusion of progress while producing confusion, inefficiency, and demoralization.</blockquote>\n",
				"date_published": "2019-06-23T09:51:48-07:00",
				"url": "https://therealadam.com/2019/06/23/do-something-syndrome.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/21/til-that-codemod.html",
				
				"content_html": "<p>TIL that <!-- raw HTML omitted -->codemod<!-- raw HTML omitted --> is a (Python, target language agnostic) thing for doing large-scale find/replace refactorings in code bases, <!-- raw HTML omitted -->react-codemod<!-- raw HTML omitted --> is a tool for doing the same specifically for React APIs and idioms, based on <!-- raw HTML omitted -->jscodeshift<!-- raw HTML omitted --> for doing large-scale refactorings specifically on JS codebases. All come from Facebook. This is not at all confusing.</p>\n",
				"content_text": "TIL that <a href=\"https://github.com/facebook/codemod\">codemod</a> is a (Python, target language agnostic) thing for doing large-scale find/replace refactorings in code bases, <a href=\"https://github.com/reactjs/react-codemod\">react-codemod</a> is a tool for doing the same specifically for React APIs and idioms, based on <a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a> for doing large-scale refactorings specifically on JS codebases. All come from Facebook. This is not at all confusing.\n",
				"date_published": "2019-06-21T12:37:11-07:00",
				"url": "https://therealadam.com/2019/06/21/til-that-codemod.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/21/deray-mckesson-from.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"https://twitter.com/deray\">DeRay McKesson</a> from <a href=\"https://twitter.com/deray/status/947892677768613889\">January 1, 2018</a>:</p>\n\n<blockquote>\"I’ve found that the people who “play all sides” eventually get played in the end. The world does not need you to pretend to be a neutral party on everything. Stand for the things & people you believe in.\"</blockquote>\n\n<p>Wise words that are going to apply for a long while as we work through our weird, often dismal world.</p>\n",
				"date_published": "2019-06-21T05:48:46-07:00",
				"url": "https://therealadam.com/2019/06/21/deray-mckesson-from.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/19/jessica-kerr-the.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Jessica Kerr - <a href=\"https://medium.com/@jessitron/the-future-of-software-complexity-a4d4d663653f\">the future of software: complexity</a>: &#8220;Complexity: Fight it, or fight through it, or embrace it? Yes.&#8221; On leverage, the intellectually rewarding kind of software complexity, and tackling accidental software complexity.</p>\n",
				"date_published": "2019-06-19T05:40:26-07:00",
				"url": "https://therealadam.com/2019/06/19/jessica-kerr-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/15/craig-mod-on.html",
				
				"content_html": "<p><a href=\"https://craigmod.com/roden/027/\">Craig Mod, on returning to the internet after forty days without</a>:</p>\n<blockquote>\n<p>Strong net connection burbling up above, smartphone in hand, put the right apps on the thing and we are all Odysseuses. Except we didn’t strap ourselves to the mast of our ship, we walked straight up to those beautiful singing bird-women and handcuffed ourselves to Thelxinoe’s silken leg.</p>\n</blockquote>\n",
				"content_text": "[Craig Mod, on returning to the internet after forty days without](https://craigmod.com/roden/027/):\n\n> Strong net connection burbling up above, smartphone in hand, put the right apps on the thing and we are all Odysseuses. Except we didn’t strap ourselves to the mast of our ship, we walked straight up to those beautiful singing bird-women and handcuffed ourselves to Thelxinoe’s silken leg.\n",
				"date_published": "2019-06-15T13:02:19-07:00",
				"url": "https://therealadam.com/2019/06/15/craig-mod-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/12/thea-flowers-from.html",
				"title": "Thea Flowers - From API keys to tamper-proof encryption",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>I didn&#8217;t expect <a href=\"https://twitter.com/theavalkyrie\">Thea Flowers&#8217;</a> <a href=\"https://blog.thea.codes/building-a-stateless-api-proxy/\">Building a stateless API proxy</a> to end up explaining public-key cryptography and motivating JSON Web Tokens (JWT) from first principles. But it did! Great read.</p>\n",
				"date_published": "2019-06-12T05:39:30-07:00",
				"url": "https://therealadam.com/2019/06/12/thea-flowers-from.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/12/im-the-bug.html",
				"title": "I'm the bug",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<ol>\n<li>Write about <a href=\"https://therealadam.com/2019/05/28/these-are-computers-i-know-this/\">how computer programs are fun to solve and everyone can solve programming problems</a></li>\n<li>Run into a computer program that involves multiple black boxes in multiple computer programs you can&#8217;t look at the source code for, find good docs, or ask a human about</li>\n<li>Sometimes you&#8217;re the bug, sometimes you&#8217;re the windshield</li>\n</ol>\n",
				"date_published": "2019-06-12T05:29:47-07:00",
				"url": "https://therealadam.com/2019/06/12/im-the-bug.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/06/01/zdog-is-d.html",
				
				"content_html": "<p><a href=\"https://zzz.dog/\">zDog</a> is 3-D rendering and animation with ~2k lines of JavaScript and only rectangles/spheres. I’m extremely impressed. This is the kind of playful but compelling technology I wish was more prevalent in the world.</p>\n",
				"content_text": "[zDog](https://zzz.dog/) is 3-D rendering and animation with ~2k lines of JavaScript and only rectangles/spheres. I’m extremely impressed. This is the kind of playful but compelling technology I wish was more prevalent in the world.\n",
				"date_published": "2019-06-01T13:28:42-07:00",
				"url": "https://therealadam.com/2019/06/01/zdog-is-d.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/28/if-time-is.html",
				"title": "If time is money, investing time in your tests can save money",
				"content_html": "<p>Sam Saffron - <a href=\"https://samsaffron.com/archive/2019/05/15/tests-that-sometimes-fail\">Tests that sometimes fail</a>. Fantastic advice on maintaining a test suite over time. A test suite is either an albatross or an asset, depending on the quality of effort your team invests.  Via <a href=\"https://benbailey.me\">Ben Bailey</a>.</p>\n",
				"content_text": "Sam Saffron - [Tests that sometimes fail](https://samsaffron.com/archive/2019/05/15/tests-that-sometimes-fail). Fantastic advice on maintaining a test suite over time. A test suite is either an albatross or an asset, depending on the quality of effort your team invests.  Via [Ben Bailey](https://benbailey.me).\n",
				"date_published": "2019-05-28T15:47:34-07:00",
				"url": "https://therealadam.com/2019/05/28/if-time-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/28/these-are-computers.html",
				"title": "These are computers, I know this",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>An encouraging thing happened to me last year. I was faced with a mystery involving how a bit of application code was interacting with ActiveRecord. It seemed like we were calling ActiveRecord properly, but the query wasn’t coming out quite right. In years past, this would have likely stymied me; productivity lost! But this time, I had the <strong>gumption</strong> to dive into the mystery and the <strong>tooling</strong> to help me navigate the murky waters of an object-relational mapper’s internals. Armed with a little bit of <strong>confidence</strong>, the ability to click on a method call to jump into its definition, and a little bit of experimenting in a Rails console, I figured out the problem. Success!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, when I’m faced with a weird situation, I tell myself “these are computers, I know this!”<sup><a id=\"ffn1\" href=\"#fn1\" class=\"footnote\">1</a></sup> and dive in.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This feeling is due to a few ways I leveled up my skills over the past few years. A little improvement in my tooling helped me acquire the “quickly jump to the definition of this function/method/etc.” skill. The <em>big</em> level up was the confidence that I could <strong>figure this mystery out</strong>, that there was likely <strong>an easy explanation lurking just behind the curtain</strong>, and that if I had the gumption to pursue it, I could figure all this out.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I feel like any developer of any background and experience can level up these skills!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>I. Finding courage in cartoon foxes and stick figures</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Over the past few years, I have been able to dive into more curious bugs, behaviors, and domain logic because I was encouraged by off-the-wall, esoteric forms of technical discourse. It probably started off years ago with the silly carton foxes of <a href=\"https://poignant.guide\"><em>Why’s Poignant Guide to Ruby</em></a>. Check it out if you haven’t! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fifteen years ago (yikes!), when Ruby was gaining momentum and Rails was, to most people, a demo screencast, this approach to teaching a language was controversial. “Programming is serious!”, some would say. They claim there’s no room for flippant catchphrases like “chunky bacon,\" sketchy cartoons, or programs not meant for “production-fortified commercial codebases”. Turns out, they are wrong — some folks find playful texts are a much easier way to learn deep topics like <a href=\"http://learnyouahaskell.com\">Haskell</a>, <a href=\"https://learnyousomeerlang.com\">Erlang</a>, or even <a href=\"https://www.amazon.com/Cartoon-Introduction-Economics-One-Microeconomics/dp/0809094819\">economics</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Fast forward to now, and folks like <a href=\"https://jvns.ca\">Julia Evans</a>, the <a href=\"https://www.codenewbie.org/basecs\">Base CS podcast</a>, and <a href=\"https://illustrated.dev\">illustrated.dev</a> are once again chipping away at the notion that computers are all serious business that require a stiff lip and stereotypically masculine dedication to mathematical rigidity. I have learned more about datacenter networking and containerized deployment from Evans’ stick figures than any manual page, reference doc, or even the classic textbooks of <a href=\"https://en.wikipedia.org/wiki/W._Richard_Stevens\">W. Richard Stevens</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In other words: <strong>These are computers. I <em>know</em> this.</strong> And from there, I can figure out almost anything.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>II. Knowing I’ve solved bigger mysteries than this</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Allow me to get self-involved for a moment. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I recharge my batteries not with side hustles or open source projects<sup><a id=\"ffn2\" href=\"#fn2\" class=\"footnote\">2</a></sup> but by tinkering with side projects and learning new technologies. I’ve long had a <a href=\"https://hbr.org/2016/01/what-having-a-growth-mindset-actually-means\">growth mindset</a>. I’ve benefitted a lot by turning that energy and curiosity into something I could apply when I get stuck on less esoteric work mysteries like legacy-to-me code and framework code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I was fortunate to study computer science in university, and a little lucky that the program at my university was very average. My courses pushed me to figure out topics I would have otherwise skipped or found too intimidating like discrete math, computer architecture, or compiler construction. I came out with the ability to self-teach myself the topics I found interesting and immediately practical like Linux, programming languages, and how to actually <em>build</em> software.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In my twenties, when I was still full of energy and some margin time to pursue interesting ideas, I took more time to self-learn things which challenged or intrigued me. I learned how <a href=\"https://confreaks.tv/videos/lonestarruby2013-the-mechanics-of-ruby\">Ruby works</a>, the basics of Haskell, and went deeper into <a href=\"https://confreaks.tv/videos/lsrc2010-rails-next-top-model-using-activemodel-and-activerelation\">databases</a> and <a href=\"https://confreaks.tv/videos/lsrc2011-chronologic-and-cassandra-at-gowalla\">distributed systems</a> than many developers outside of mega corporations have the necessity to do.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>By my early thirties, I could look at a wide spectrum of technologies and feel confident (perhaps unearned) I could “figure it out” if necessary in a professional context. Out of order computer architectures, database index and query strategies, distributed consensus, managed runtime trade offs, or implementing binary addition from first principles all felt like a big challenge, but something I could participate in a discussion of, if not attempt to implement of on my own. A growth mindset in my twenties, learning tricky talks on my own, and a few of the courses I didn’t think I’d use in college paid off!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Having these topics “under my belt” makes tackling many (but not all) challenges feel achievable. I feel like this is down to the curiosity to learn a bunch of topics on my own and the optimism that I’ve learned plenty of tricky topics and can learn more. Of all the things I would encourage a younger-me to continue doing, challenging myself to figure out big, audacious mysteries is amongst the most important.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>III. Believing there are no evil spirits</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>In code, there are no boogeymen or little demons conspiring to confuse me. The vast majority of the logic and behavior of any computer, program, or system thereof is explainable. While it’s tempting and enjoyable to ascribe personalities, stories, motivations, and drama to inanimate systems, they do not actually exist.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most systems are linear, predictable, and some kind of deterministic. Things don’t happen magically, they only happen for reasons I don’t yet understand. There are no evil demons or spirits, only processes or circumstances which my mental model does not yet accommodate.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The corollary to this is that there are very few mysteries I can’t solve with sufficient time and determination. The solution might be weird, completely different from what I first thought, not what I’d hoped to learn, or involve inputs outside what I considered the domain of the problem. But the answer exists! </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s tempting to say “this job just dies overnight and we restart it” as though that were nature and we have no agency over the process. But, I totally do have control over the process and can look into why it’s dying overnight! The only thing stopping me is me, and finding some time to learn. Given necessity and a time box<sup><a id=\"ffn3\" href=\"#fn3\" class=\"footnote\">3</a></sup>, I can figure it out or eliminate variables that <em>aren’t</em> the answer.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s also tempting to think “well I call this method and then the framework does some magic? and I get the value I want back, most of the time”. Like I said before: there is no magic, only things I don’t yet know about. When I find myself uttering this, I know it’s time to roll up some courage, gumption, and sleeves then dive into the framework to figure out how it makes the magic happen.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some unpredictable or surprising behavior <em>is</em> very deep. Not every mystery is worth my time to resolve. That’s what time boxes are for! When this happens, my goal is to remove as many “suspicious spirit” stories as possible. The more logic and facts I bring to explaining this behavior, the better equipped I am to actually figuring it out next time I look into it.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>These are computers and software; I <em>know</em> this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>IV. Enhancing my thinking with tools</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>I eschewed integrated development environments for a long time; they were slower and less capable than more focused text editors with smaller, Unix-style language integrations. But, computers are faster, designers of IDEs are more tasteful, and we now live in a world where language runtimes are just as influential as linters, test runners, and build tools. Perhaps now is the time for a smarter, integrated development environment.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It’s essential, to me, that whatever I’m using to write and edit the code is fast enough to keep up with my thinking. Beyond my own ability to type and make up names, the important criteria are all about <em>enhancing</em> my ability to think. TextMate first did this with vastly improved file navigation and language-specific snippets and expansions that helped me hold less syntax and boilerplate in my head. Vim, then Atom, helped me lay source files out side-by-side, like I would with sheets of paper, so I could think about related things in a limited-but-helpful spatial ordering.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now, the tool that is enhancing my thinking is RubyMine. Its ability to “take me to the definition of the method/variable/class/etc.” under my cursor is now much easier to use than setting up equivalent tools that integration with Emacs, Vim, etc. So in the moment of perplexing code, I’m able to jump into the code at the center of the mystery and figure out what was going on.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In this case: these are computers, they know <em>me</em>. ;)</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>V. Mystery. Learn. Repeat.</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Pulling it all together: I’m often faced with mysteries in the course of development work. It often takes courage and the confidence I’ve tackled deep topics before to go down the rabbit hole. Once I’m down the rabbit hole, it’s important to remind myself that most systems are linear and have logical inputs and outputs; no philosophical daemons mischievously manipulating results to confuse me. Automated tools for navigating source code are a huge boon throughout the process. All together, I stand a pretty good chance of tackling mysteries.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The common link between Ms. Evans and Mr. Stiff, makers of cartoon-y programming literature, is broad curiosity about the craft of programming and optimism that no topic is “off limits”, “too deep”, or “requires credentials” for us to learn. That’s a great mindset we can all benefit from!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Thanks to Marie Chatfield, Kelsey Huse, and Brian Ray for giving me tremendous feedback on this draft.</em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list {\"ordered\":true} -->\n<ol><li id=\"fn1\">There’s a scene in the original <em>Jurassic Park</em> where a young heroine saves the day by doing some computer stuff. In a crucial moment with dinosaurs about to eat the whole cast, she sits down in front of the computer system which can save them, recognizes it, utters <a href=\"https://youtu.be/dFUlAQZB9Ng\">“This is Unix, I know this!”</a>, and proceeds to save the day. <a href=\"#ffn1\">↩</a></li><li id=\"fn2\">Though I wish I could do that too! <a href=\"#ffn2\">↩</a></li><li id=\"fn3\"><a href=\"https://en.wikipedia.org/wiki/Timeboxing\">Time boxing</a> is working on a task for a fixed time, e.g. 30 minutes. Either you finish it, decide not to keep going, or have a better idea of how to break it down so you can finish it. <a href=\"#ffn3\">↩</a></li></ol>\n<!-- /wp:list -->\n",
				"date_published": "2019-05-28T11:16:32-07:00",
				"url": "https://therealadam.com/2019/05/28/these-are-computers.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/28/i-dont-know.html",
				"title": "“I don’t know everything, but I can learn anything.”",
				"content_html": "<p>Rachel McQuater, <a href=\"https://spin.atomicobject.com/2017/08/29/strategies-new-developer/\">On Becoming a Wizard: Strategies for Keeping Up as a New Developer</a>:</p>\n<blockquote>\n<p>The difference was that wizard developers perceived problems as artifacts of error by rational humans in otherwise rational systems, whereas I perceived them as mysteries beyond my control.</p>\n</blockquote>\n",
				"content_text": "Rachel McQuater, [On Becoming a Wizard: Strategies for Keeping Up as a New Developer](https://spin.atomicobject.com/2017/08/29/strategies-new-developer/):\n\n> The difference was that wizard developers perceived problems as artifacts of error by rational humans in otherwise rational systems, whereas I perceived them as mysteries beyond my control.\n",
				"date_published": "2019-05-28T05:41:17-07:00",
				"url": "https://therealadam.com/2019/05/28/i-dont-know.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/27/the-damn-dumbest.html",
				"title": "The damn dumbest smart kid I know",
				"content_html": "<p>Partial explanation for smart folks, like Paul Graham or Mark Zuckerberg, making consistently bad predictions - <a href=\"https://www.theatlantic.com/magazine/archive/2019/06/how-to-predict-the-future/588040/\">The Peculiar Blindness of Experts</a>:</p>\n<blockquote>\n<p>In Tetlock’s 20-year study, both the broad foxes and the narrow hedgehogs were quick to let a successful prediction reinforce their beliefs. But when an outcome took them by surprise, foxes were much more likely to adjust their ideas. Hedgehogs barely budged. Some made authoritative predictions that turned out to be wildly wrong—then updated their theories in the wrong direction. They became even more convinced of the original beliefs that had led them astray. The best forecasters, by contrast, view their own ideas as hypotheses in need of testing. If they make a bet and lose, they embrace the logic of a loss just as they would the reinforcement of a win. This is called, in a word, learning.</p>\n</blockquote>\n",
				"content_text": "Partial explanation for smart folks, like Paul Graham or Mark Zuckerberg, making consistently bad predictions - [The Peculiar Blindness of Experts](https://www.theatlantic.com/magazine/archive/2019/06/how-to-predict-the-future/588040/):\n\n> In Tetlock’s 20-year study, both the broad foxes and the narrow hedgehogs were quick to let a successful prediction reinforce their beliefs. But when an outcome took them by surprise, foxes were much more likely to adjust their ideas. Hedgehogs barely budged. Some made authoritative predictions that turned out to be wildly wrong—then updated their theories in the wrong direction. They became even more convinced of the original beliefs that had led them astray. The best forecasters, by contrast, view their own ideas as hypotheses in need of testing. If they make a bet and lose, they embrace the logic of a loss just as they would the reinforcement of a win. This is called, in a word, learning.\n",
				"date_published": "2019-05-27T10:21:32-07:00",
				"url": "https://therealadam.com/2019/05/27/the-damn-dumbest.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/25/chernobyl-on-hbo.html",
				"title": "Chernobyl on HBO",
				"content_html": "<p>We&rsquo;re three episodes into the <a href=\"https://www.hbo.com/chernobyl\"><em>Chernobyl</em> miniseries</a>. Great acting, sets, and costumes. I had no idea how much worse the historical situation could have gone. Recommend.</p>\n",
				"content_text": "We're three episodes into the [_Chernobyl_ miniseries](https://www.hbo.com/chernobyl). Great acting, sets, and costumes. I had no idea how much worse the historical situation could have gone. Recommend.\n",
				"date_published": "2019-05-25T06:09:59-07:00",
				"url": "https://therealadam.com/2019/05/25/chernobyl-on-hbo.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/24/brent-simmons-on.html",
				
				"content_html": "<p><a href=\"https://micro.inessential.com/2019/05/24/on-seeing-playdate.html\">Brent Simmons on Playdate</a> - “the thing that seems very difficult, maybe even impossible, that may fail, but is the best expression of our talent and love”</p>\n",
				"content_text": "[Brent Simmons on Playdate](https://micro.inessential.com/2019/05/24/on-seeing-playdate.html) - “the thing that seems very difficult, maybe even impossible, that may fail, but is the best expression of our talent and love”\n",
				"date_published": "2019-05-24T18:15:49-07:00",
				"url": "https://therealadam.com/2019/05/24/brent-simmons-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/24/web-assembly-browser.html",
				"title": "Web assembly + browser editor + CDN edge = wow",
				"content_html": "<p>I&rsquo;m still impressed that the web platform has progressed to the point we can build web apps entirely in the browser with <a href=\"https://glitch.com\">Glitch</a>, <a href=\"https://codesandbox.io\">Code Sandbox</a>, and friends. That we are now starting to build web apps to run (partially) on edge CDNs (<a href=\"https://www.cloudflare.com/products/cloudflare-workers/\">Cloudflare</a>) and edit those kinds of web apps in a browser (<a href=\"https://wasm.fastlylabs.com\">Fastly Terrarium</a>) is kind of blowing my mind. (Via <a href=\"https://simonwillison.net\">Simon Willison</a>)</p>\n",
				"content_text": "I'm still impressed that the web platform has progressed to the point we can build web apps entirely in the browser with [Glitch](https://glitch.com), [Code Sandbox](https://codesandbox.io), and friends. That we are now starting to build web apps to run (partially) on edge CDNs ([Cloudflare](https://www.cloudflare.com/products/cloudflare-workers/)) and edit those kinds of web apps in a browser ([Fastly Terrarium](https://wasm.fastlylabs.com)) is kind of blowing my mind. (Via [Simon Willison](https://simonwillison.net))\n",
				"date_published": "2019-05-24T06:17:27-07:00",
				"url": "https://therealadam.com/2019/05/24/web-assembly-browser.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/23/music-ranked-the.html",
				"title": "Music ranked: the string section",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Best albums, singles of the years. Who is better, the Beatles or the Rolling Stones. Top 100 smooth jazz to fall asleep to. We love to put music into boxes and then rank the items in those boxes. So without further ado, ladies and gentlemen, I present to you: the string section of the orchestra, as rated by the string section.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There's a bit of a tie for first place. The violins and cellos feel equally strongly that they are the best. The cellos and basses are equal mixes of ambivalence to these status games and envy that they are not in the violin or cello sections.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Here's a sampling of the sentiment data our polling gathered, aggregated by section.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Violins: I’m better than everyone else <em>or</em> I’m better than that violinist over there.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Violas: I wish I played cello. Or, that I'd gone to that writing workshop.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Cellos: I am underrated, more composers should write good solo work for cello. I am going to use every minute of this melody to <em>shine</em>. I am overflowing with emotion, which you will hear through my <strong>extremely</strong> wide vibrato.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Basses: I wish I played cello. Or jazz. Or that this instrument was as loud as the brass section. Or that I was out at the loading dock, smoking.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-05-23T09:21:22-07:00",
				"url": "https://therealadam.com/2019/05/23/music-ranked-the.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/21/a-foray-into.html",
				"title": "A foray into building interface",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I spent some time this weekend attempting to make front-end code with <a href=\"https://tailwindcss.com\">Tailwind CSS</a>. Tailwind is a <a href=\"https://tailwindcss.com/docs/utility-first/\">utility-first</a> approach to CSS wherein styles are organized into classes by <em>how</em> they function, not <em>what</em> they style. Instead of <code>avatar-image</code> as a class name on a user’s photo, you would probably have <code>m-4</code>, roughly meaning “margin four”. It’s a bit cryptic at first!</p>\n<p>Reading through all the <a href=\"https://tailwindcss.com/docs/installation\">documentation</a> before getting started is a good idea! Once I read through it and tinkered with it (or any other utility-first CSS approach) for a bit, it was pretty easy to use. The point where it clicked for me was when I thought “hmm, this needs a little room on the top” and then “that means I want <code>mt-2</code>, perfect!” Having a good autocomplete for class names helps a lot too.</p>\n<p>I started off trying to use Tailwind in a Code Sandbox, but <a href=\"https://twitter.com/adamwathan/status/1054212776955019265?lang=en\">it seems like the community hasn’t quite figured that one out yet</a>. That said, once I cloned a <a href=\"https://codesandbox.io/s/1q516xvl63\">not-quite-working sandbox</a> locally and ran it, I was off to the races.</p>\n<p>I’ll probably read more through the <a href=\"https://tailwindcss.com/components\">component gallery</a> next. If I can get <em>closer</em> to being to thinking/sketching up a UI component and then coding it up in just HTML and utility CSS, that will be a huge step forward for my craft.</p>\n<p>Onward and upward! 📈</p>\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-05-21T09:00:00-07:00",
				"url": "https://therealadam.com/2019/05/21/a-foray-into.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/16/refreshing-my-rails.html",
				"title": "Refreshing my Rails: OmniAuth",
				"content_html": "<p>I’m refreshing my understanding of mainstay Rails libraries lately<!-- raw HTML omitted --><!-- raw HTML omitted -->1<!-- raw HTML omitted --><!-- raw HTML omitted -->. This week, it’s <!-- raw HTML omitted -->OmniAuth<!-- raw HTML omitted -->.</p>\n<p>When you sign-in (authenticate) to website A (say <!-- raw HTML omitted -->dev.to<!-- raw HTML omitted -->) via website B (say GitHub), that’s delegated authentication and the protocol underneath it is <!-- raw HTML omitted -->OAuth2<!-- raw HTML omitted -->. OAuth2 is a bit tricky because there is a lot of back-and-forth between the service that the user signs into (GitHub) and the service that you’re signing into with that authentication (dev.to).</p>\n<p>Once you’ve set it up <!-- raw HTML omitted -->set it up<!-- raw HTML omitted -->, OmniAuth encapsulates much of the back-and-forth with a <!-- raw HTML omitted -->Strategy<!-- raw HTML omitted --> class. A bunch of folks out on the internet have bravely contributed <!-- raw HTML omitted -->literally hundreds of strategies<!-- raw HTML omitted --> for various services that provide OAuth2 sign-in, e.g. <!-- raw HTML omitted -->omniauth-twitter<!-- raw HTML omitted --> or <!-- raw HTML omitted -->omniauth-github<!-- raw HTML omitted -->.</p>\n<p>A nice thing about the Strategy implementation is that each phase of the OAuth2 callback scheme<!-- raw HTML omitted --><!-- raw HTML omitted -->2<!-- raw HTML omitted --><!-- raw HTML omitted --> is a method; you can overwrite each one to handle the particularities of the provider you’re integrating with. For example, the <!-- raw HTML omitted -->“callback phase”<!-- raw HTML omitted --> is the most common extension point since every app is likely to want to store user information and access tokens differently.</p>\n<p>In the wild, OmniAuth is often used in combination with <!-- raw HTML omitted -->Devise for user models<!-- raw HTML omitted --> which in turn uses <!-- raw HTML omitted -->Warden for authentication<!-- raw HTML omitted -->.</p>\n<p>Also nifty to note: the Rakefile for OmniAuth has developer tasks for benchmarking performance and measuring memory overhead. It’s pretty awesome that an essential gem like this has that level of detail in its maintenance.</p>\n<p>The time required to do a simplistic OAuth verification is negligible; about as fast as a call to Redis:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I have no baseline to compare this with, but memory usage looks like this:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>So that’s OmniAuth. If your Rails app is more than a few years old and integrates with other services, you’re probably already using it. Thanks, OmniAuth community!</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "I’m refreshing my understanding of mainstay Rails libraries lately<sup id=\"fnref-4976-1\"><a class=\"jetpack-footnote\" href=\"#fn-4976-1\">1</a></sup>. This week, it’s <a href=\"https://github.com/omniauth/omniauth\">OmniAuth</a>.\n\nWhen you sign-in (authenticate) to website A (say <a href=\"https://dev.to\">dev.to</a>) via website B (say GitHub), that’s delegated authentication and the protocol underneath it is <a href=\"https://oauth.net/2/\">OAuth2</a>. OAuth2 is a bit tricky because there is a lot of back-and-forth between the service that the user signs into (GitHub) and the service that you’re signing into with that authentication (dev.to).\n\nOnce you’ve set it up <a href=\"https://github.com/omniauth/omniauth#getting-started\">set it up</a>, OmniAuth encapsulates much of the back-and-forth with a <a href=\"https://github.com/omniauth/omniauth/blob/master/lib/omniauth/strategy.rb\">Strategy</a> class. A bunch of folks out on the internet have bravely contributed <a href=\"https://github.com/omniauth/omniauth/wiki/List-of-Strategies\">literally hundreds of strategies</a> for various services that provide OAuth2 sign-in, e.g. <a href=\"https://github.com/arunagw/omniauth-twitter\">omniauth-twitter</a> or <a href=\"https://github.com/intridea/omniauth-github\">omniauth-github</a>.\n\nA nice thing about the Strategy implementation is that each phase of the OAuth2 callback scheme<sup id=\"fnref-4976-2\"><a class=\"jetpack-footnote\" href=\"#fn-4976-2\">2</a></sup> is a method; you can overwrite each one to handle the particularities of the provider you’re integrating with. For example, the <a href=\"https://github.com/omniauth/omniauth/blob/cc0f5522621b4a372f4dff0aa608822aa082cb60/lib/omniauth/strategy.rb#L231\">“callback phase”</a> is the most common extension point since every app is likely to want to store user information and access tokens differently.\n\nIn the wild, OmniAuth is often used in combination with <a href=\"http://devise.plataformatec.com.br\">Devise for user models</a> which in turn uses <a href=\"https://github.com/wardencommunity/warden\">Warden for authentication</a>.\n\nAlso nifty to note: the Rakefile for OmniAuth has developer tasks for benchmarking performance and measuring memory overhead. It’s pretty awesome that an essential gem like this has that level of detail in its maintenance.\n\nThe time required to do a simplistic OAuth verification is negligible; about as fast as a call to Redis:\n<pre>% rake perf:ips\nWarming up --------------------------------------\n                 ips     1.210k i/100ms\nCalculating -------------------------------------\n                 ips     12.329k (± 5.1%) i/s -     61.710k in   5.019465s</pre>\nI have no baseline to compare this with, but memory usage looks like this:\n<pre>% rake perf:mem|head\nTotal allocated: 147317 bytes (831 objects)\nTotal retained:  60863 bytes (152 objects)\n\nallocated memory by gem\n-----------------------------------\n     74492  lib\n     52894  rubygems\n     12659  omniauth/lib\n      4200  rack-2.0.7\n      2832  hashie-3.6.0</pre>\nSo that’s OmniAuth. If your Rails app is more than a few years old and integrates with other services, you’re probably already using it. Thanks, OmniAuth community!\n<div class=\"footnotes\">\n\n<hr />\n\n<ol>\n \t<li id=\"fn-4976-1\">This series isn’t meant as tutorials for getting started with these libraries. If tutorials are the first thirty minutes I spend with a library, these are the second thirty minutes where I start to wonder how this library works. I’ll always link to getting started tutorials though! <a href=\"#fnref-4976-1\">↩</a></li>\n \t<li id=\"fn-4976-2\">In short: user clicks a link/submits a form on your site to initiate authentication with the other site. If the user successfully authenticates with the other site, they are redirected (the callback) back to your site with a user info and an access token encoded in a query parameter. <a href=\"https://aaronparecki.com/oauth-2-simplified/\">OAuth 2 simplified</a> is an even better read. <a href=\"#fnref-4976-2\">↩</a></li>\n</ol>\n</div>\n",
				"date_published": "2019-05-16T09:17:59-07:00",
				"url": "https://therealadam.com/2019/05/16/refreshing-my-rails.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/13/gorillaz-amp-moby.html",
				"title": "Gorillaz \u0026amp; Moby \u0026amp; Van Vaudeville \u0026amp; Soulection",
				"content_html": "<p>Gorillaz, <!-- raw HTML omitted -->Demon Days<!-- raw HTML omitted --> - this one holds up, still a solid album.</p>\n<p>News to me, Moby has been making <!-- raw HTML omitted -->extended ambient tracks<!-- raw HTML omitted --> in some manner of partnership with the <!-- raw HTML omitted -->Calm<!-- raw HTML omitted --> app. They make good “I need to focus and get stuff done” music, but aren’t particularly high energy, if that’s your thing. Says Moby, &ldquo;<!-- raw HTML omitted -->my suggestion is to not approach this as music, but to approach it as a sleep aid or tool<!-- raw HTML omitted -->&rdquo;. Okay!</p>\n<p>I would like to some day learn enough piano to play and sing the songs of the original Van Halen line-up, e.g. &ldquo;Panama&rdquo;, &ldquo;Hot for Teacher&rdquo;, &ldquo;Beautiful Girls&rdquo;, and &ldquo;Unchained&rdquo;. My theory here is, the original Van Halen is very Vaudeville, except louder and more late-seventies. Corollary: played literally and with a little bit of a vaudevillian spin, they’d work perfectly. Case in point: &ldquo;Ice Cream Man&rdquo;.</p>\n<p>Somehow, I’ve never mentioned <!-- raw HTML omitted -->Soulection Radio<!-- raw HTML omitted -->. It’s equal parts new R&amp;B/hip-hop, classic soul, and a lot of sample culture. It’s one of the best things going on <!-- raw HTML omitted -->Apple Music<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Spotify<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->Soundcloud<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Gorillaz, <em>Demon Days</em> - this one holds up, still a solid album.\n\nNews to me, Moby has been making <a href=\"http://moby.com/la/\">extended ambient tracks</a> in some manner of partnership with the <a href=\"https://www.calm.com/\">Calm</a> app. They make good “I need to focus and get stuff done” music, but aren’t particularly high energy, if that’s your thing. Says Moby, \"<span>my suggestion is to not approach this as music, but to approach it as a sleep aid or tool</span>\". Okay!\n\nI would like to some day learn enough piano to play and sing the songs of the original Van Halen line-up, e.g. \"Panama\", \"Hot for Teacher\", \"Beautiful Girls\", and \"Unchained\". My theory here is, the original Van Halen is very Vaudeville, except louder and more late-seventies. Corollary: played literally and with a little bit of a vaudevillian spin, they’d work perfectly. Case in point: \"Ice Cream Man\".\n\nSomehow, I’ve never mentioned <a href=\"https://soulection.com/radio\">Soulection Radio</a>. It’s equal parts new R&amp;B/hip-hop, classic soul, and a lot of sample culture. It’s one of the best things going on <a href=\"https://itunes.apple.com/us/curator/soulection/1434924751\">Apple Music</a>, <a href=\"https://open.spotify.com/user/soulection/playlist/5nyl0OhwrtNtRlhJtaqgoB?si=nQ_krxf9Rryw55pxrJm5Sw\">Spotify</a>, and <a href=\"https://soundcloud.com/soulection\">Soundcloud</a>.\n",
				"date_published": "2019-05-13T11:40:36-07:00",
				"url": "https://therealadam.com/2019/05/13/gorillaz-amp-moby.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/08/robocalls-what-a.html",
				"title": "Robocalls. What a concept!",
				"content_html": "<p>They&rsquo;re on our phones, in our voicemails. Computers or sometimes even humans calling in massive volumes, funneling people into bad purchases. Questionable insurance at best, outright fraud at worst. Sometimes, depending on the state you live in, politics!</p>\n<p>There&rsquo;s no reason to pick up on an unknown number in 2019, or even 2009. For many of us, <!-- raw HTML omitted -->Dunbar&rsquo;s number<!-- raw HTML omitted --> for phone calls is in the low single digits. Outside those few numbers, why answer an even remotely questionable number, ever?</p>\n<p>If you squint right, robocalls appear they were  designed for the technological landscape of 1995, of <em>Friends</em> and cordless, landline phones. Robocalls,  <!-- raw HTML omitted -->could<!-- raw HTML omitted --> have made sense in 1995. You get a call, it&rsquo;s Friday, there are no repeats of your favorite show on, you&rsquo;re a bit bored. Sure, maybe you&rsquo;ll pick up. Or in 1992, when receiving a phone call was not only a big, exciting deal!, but also a social imperative. You can&rsquo;t just let the <!-- raw HTML omitted -->answering machine<!-- raw HTML omitted --> pick up? It could be&hellip;someone. Probably a human!</p>\n<p>Sadly, the technological landscape I just described is <!-- raw HTML omitted -->exactly<!-- raw HTML omitted --> folks who aren&rsquo;t &ldquo;technology natives&rdquo;. I suspect that&rsquo;s largely who Robocalls prey on: the bored and lonely, those who grew up before the pace of technological evolution surged and haven&rsquo;t developed a layered defense to those who would prey on them.</p>\n",
				"content_text": "They're on our phones, in our voicemails. Computers or sometimes even humans calling in massive volumes, funneling people into bad purchases. Questionable insurance at best, outright fraud at worst. Sometimes, depending on the state you live in, politics!\n\nThere's no reason to pick up on an unknown number in 2019, or even 2009. For many of us, <a href=\"https://en.wikipedia.org/wiki/Dunbar%27s_number\">Dunbar's number</a> for phone calls is in the low single digits. Outside those few numbers, why answer an even remotely questionable number, ever?\n\nIf you squint right, robocalls appear they were  designed for the technological landscape of 1995, of _Friends_ and cordless, landline phones. Robocalls,  <em>could</em> have made sense in 1995. You get a call, it's Friday, there are no repeats of your favorite show on, you're a bit bored. Sure, maybe you'll pick up. Or in 1992, when receiving a phone call was not only a big, exciting deal!, but also a social imperative. You can't just let the <em>answering machine</em> pick up? It could be...someone. Probably a human!\n\nSadly, the technological landscape I just described is <em>exactly</em> folks who aren't \"technology natives\". I suspect that's largely who Robocalls prey on: the bored and lonely, those who grew up before the pace of technological evolution surged and haven't developed a layered defense to those who would prey on them.\n",
				"date_published": "2019-05-08T09:42:34-07:00",
				"url": "https://therealadam.com/2019/05/08/robocalls-what-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/07/how-we-get.html",
				"title": "How we get back to space",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Space isn’t a dead-end, it’s just taking us longer to figure out than our earliest trajectory. The New Yorker has a great look at <a href=\"https://www.newyorker.com/magazine/2019/05/06/the-race-to-develop-the-moon\">The Race to Develop the Moon</a> for industrial purposes:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Lunar construction projects now look feasible. “Down the hall, we have a telerobotics lab,” Burns said. “You could print components of habitats, of telescopes. You use the lunar regolith”—the dust of the moon—“as your printing material. You could print the wrench you need to fix something.” Fifteen years ago, the moon was believed to be a dry rock; now we know that there’s water there. Both private industry and national agencies regard the mining of water and precious materials as something that’s not too far off.</p><p></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Only twelve people have walked on the moon, all of them between the summer of 1969 and Christmas, 1972. All the moonwalkers were men, all were American, all but one were Boy Scouts, and almost all listened to country-and-Western music on their way to the moon; they earned eight dollars a day, minus a fee for a bed on the spacecraft.<br></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p><em>Buzz Aldrin had hoped, and briefly expected, that it would be he, and not Neil Armstrong, who would take the first human step on the moon. The astronaut Michael Collins, who manned the control module that orbited the moon while Armstrong and Aldrin walked below, has said of Aldrin that he “resents not being first on the moon more than he appreciates being second.” On the moon, Armstrong took photos of Aldrin posing, but Aldrin took none of Armstrong doing the same. One of the few photos that shows Neil Armstrong on the moon was taken by Armstrong himself—of his reflection in Aldrin’s helmet, as Aldrin salutes the flag. We are petty and misbehave on Earth; we will be petty and misbehave in space.</em></p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>​Futurism isn’t dead, it’s just not all around us like Tomorrowland promised.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-05-07T07:52:12-07:00",
				"url": "https://therealadam.com/2019/05/07/how-we-get.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/05/06/the-notes-may.html",
				"title": "The notes - May 6, 2018",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:jetpack/markdown {\"source\":\"Unclogging the blog pipes here…\\n\\n## Think better\\n\\nI feel seen - [Satisfaction and progress in open-ended work:](https://blog.andymatuschak.org/post/159979927467/satisfaction-and-progress-in-open-ended-work)\\n\\n\> For more open-ended problems, much of the challenge lies in figuring out what to do next. These rich questions offer deep satisfaction on longer time scales, but without a clear sense of progress, each day ends ambiguously. Was today good? Will these tinkerings add up to anything? In what timeframe? Who knows. Ultimately: what structures around progress, self-correction, and operations can help us in open-ended mode?\\n\\nTimes Jason Kottke or Austin Kleon wrote about thoughtfully engaging with the news: [Things you notice when you quit the news](https://kottke.org/16/12/things-you-notice-when-you-quit-the-news), [A tip for a better media diet: delay reading the news](https://kottke.org/18/04/a-tip-for-a-better-media-diet-delay-reading-the-news), [You can be woke without waking up to the news](https://austinkleon.com/2017/07/27/being-woke-without-waking-up-to-it/). \\n\\n## Code better\\n\\nI revisited thinking about code on my iPad again this weekend. On the one hand, the status quo continues: you can type programs in, but you can’t navigate, compile, or run them on the device. [Textastic](https://www.textasticapp.com), [Working Copy](https://workingcopyapp.com), [Codea](https://codea.io), and [Swift Playgrounds](https://www.apple.com/swift/playgrounds/) continue to exist and continue to set a high standard but leave me wanting. I _did_ make it further using [CodeSandbox](https://codesandbox.io/) than last time I tried. If you don’t mind living entirely in a mobile Safari tab, you can do non-trivial things with JavaScript!\\n\\nRelated: [Muse](https://www.inkandswitch.com/muse-studio-for-ideas.html) is a prototype for an iPad-based thinking environment and I want this running on a dozen iPads spread across a big table in a well-lit room. The demo video and accompanying essay are full of great ideas. \\n\\n[SRE School: No Haunted Forests](https://john-millikin.com/sre-school/no-haunted-forests):\\n\\n\> You've heard the euphemism tech debt, where like a car loan you hold a recurring obligation in exchange for immediate liquidity. But this is misleading: bad code is not merely overhead, it also reduces optionality for all teams that come in contact with it. Imagine being unable to get indoor plumbing because your neighbor has a mortgage!\\n\\n[Preact](https://preactjs.com) - a cool way to understand React as a UI runtime is to look at smaller, single purpose implementation of the concept. To my surprise, much of React’s API surface area is about [delivering values to components](https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L27-L34), [passing those values to components](https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L86-L89), and [letting the component help decide if it should re-render](https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L96-L103). All implemented in two not-so-tricky functions which handle render components.\\n\\n## Listen better\\n\\nSpider-Man: _Into the Spider-Verse_ - fresher than it is essential, carries the vibe of the movie nicely.\\n\\nBen Folds Five, _The Unauthorized Biography of Reinhold Messner_ - I forgot how strongly this album starts, “Narcolepsy is a real gem”.\\n\\nNew-to-me band whose whole catalog I’m celebrating: The Middle Kids.\\n\\nVampire Weekend, _Father of the Bride_ - meets but does not exceed expectations.\"} -->\n<div class=\"wp-block-jetpack-markdown\"><p>Unclogging the blog pipes here…</p>\n<h2>Think better</h2>\n<p>I feel seen - <a href=\"https://blog.andymatuschak.org/post/159979927467/satisfaction-and-progress-in-open-ended-work\">Satisfaction and progress in open-ended work:</a></p>\n<blockquote>\n<p>For more open-ended problems, much of the challenge lies in figuring out what to do next. These rich questions offer deep satisfaction on longer time scales, but without a clear sense of progress, each day ends ambiguously. Was today good? Will these tinkerings add up to anything? In what timeframe? Who knows. Ultimately: what structures around progress, self-correction, and operations can help us in open-ended mode?</p>\n</blockquote>\n<p>Times Jason Kottke or Austin Kleon wrote about thoughtfully engaging with the news: <a href=\"https://kottke.org/16/12/things-you-notice-when-you-quit-the-news\">Things you notice when you quit the news</a>, <a href=\"https://kottke.org/18/04/a-tip-for-a-better-media-diet-delay-reading-the-news\">A tip for a better media diet: delay reading the news</a>, <a href=\"https://austinkleon.com/2017/07/27/being-woke-without-waking-up-to-it/\">You can be woke without waking up to the news</a>.</p>\n<h2>Code better</h2>\n<p>I revisited thinking about code on my iPad again this weekend. On the one hand, the status quo continues: you can type programs in, but you can’t navigate, compile, or run them on the device. <a href=\"https://www.textasticapp.com\">Textastic</a>, <a href=\"https://workingcopyapp.com\">Working Copy</a>, <a href=\"https://codea.io\">Codea</a>, and <a href=\"https://www.apple.com/swift/playgrounds/\">Swift Playgrounds</a> continue to exist and continue to set a high standard but leave me wanting. I <em>did</em> make it further using <a href=\"https://codesandbox.io/\">CodeSandbox</a> than last time I tried. If you don’t mind living entirely in a mobile Safari tab, you can do non-trivial things with JavaScript!</p>\n<p>Related: <a href=\"https://www.inkandswitch.com/muse-studio-for-ideas.html\">Muse</a> is a prototype for an iPad-based thinking environment and I want this running on a dozen iPads spread across a big table in a well-lit room. The demo video and accompanying essay are full of great ideas.</p>\n<p><a href=\"https://john-millikin.com/sre-school/no-haunted-forests\">SRE School: No Haunted Forests</a>:</p>\n<blockquote>\n<p>You've heard the euphemism tech debt, where like a car loan you hold a recurring obligation in exchange for immediate liquidity. But this is misleading: bad code is not merely overhead, it also reduces optionality for all teams that come in contact with it. Imagine being unable to get indoor plumbing because your neighbor has a mortgage!</p>\n</blockquote>\n<p><a href=\"https://preactjs.com\">Preact</a> - a cool way to understand React as a UI runtime is to look at smaller, single purpose implementation of the concept. To my surprise, much of React’s API surface area is about <a href=\"https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L27-L34\">delivering values to components</a>, <a href=\"https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L86-L89\">passing those values to components</a>, and <a href=\"https://github.com/developit/preact/blob/8.4.2/src/vdom/component.js#L96-L103\">letting the component help decide if it should re-render</a>. All implemented in two not-so-tricky functions which handle render components.</p>\n<h2>Listen better</h2>\n<p>Spider-Man: <em>Into the Spider-Verse</em> - fresher than it is essential, carries the vibe of the movie nicely.</p>\n<p>Ben Folds Five, <em>The Unauthorized Biography of Reinhold Messner</em> - I forgot how strongly this album starts, “Narcolepsy is a real gem”.</p>\n<p>New-to-me band whose whole catalog I’m celebrating: The Middle Kids.</p>\n<p>Vampire Weekend, <em>Father of the Bride</em> - meets but does not exceed expectations.</p>\n</div>\n<!-- /wp:jetpack/markdown -->\n",
				"date_published": "2019-05-06T08:33:17-07:00",
				"url": "https://therealadam.com/2019/05/06/the-notes-may.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/22/possibly-the-biggest.html",
				
				"content_html": "<p>Possibly the biggest upsight I&rsquo;ve had on software estimation in a while - the blowup factor: <a href=\"https://erikbern.com/2019/04/15/why-software-projects-take-longer-than-you-think-a-statistical-model.html\">erikbern.com/2019/04/1&hellip;</a></p>\n",
				"content_text": "Possibly the biggest upsight I've had on software estimation in a while - the blowup factor: [erikbern.com/2019/04/1...](https://erikbern.com/2019/04/15/why-software-projects-take-longer-than-you-think-a-statistical-model.html)\n",
				"date_published": "2019-04-22T16:54:07-07:00",
				"url": "https://therealadam.com/2019/04/22/possibly-the-biggest.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/21/what-makes-into.html",
				"title": "What makes Into the Wide Open such a great album?",
				"content_html": "<p><!-- raw HTML omitted -->Into the Great Wide Open<!-- raw HTML omitted --> strikes me as a singular album. Perhaps it&rsquo;s not even the <!-- raw HTML omitted -->best<!-- raw HTML omitted --> Tom Petty album, but it stands out from the rest in some kind of way.</p>\n<p>Maybe it&rsquo;s nostalgia? It&rsquo;s the first Petty album I bought.</p>\n<p>Maybe it&rsquo;s humble? None of the songs are flashy, sitting right on the fence between songwriting and rock &lsquo;n roll.</p>\n<p>Maybe it&rsquo;s the lyrics? I&rsquo;ve listened to this album <!-- raw HTML omitted -->a lot<!-- raw HTML omitted -->, so I&rsquo;ve actually heard the lyrics and they&rsquo;re the right balance between clever and storytelling, for me.</p>\n<p>Maybe it&rsquo;s Jeff Lynne? Love that guy&rsquo;s production work. Great touch.</p>\n<p>It&rsquo;s not too long, it&rsquo;s not too short. All the moving parts do their job without getting showy. Perhaps, it&rsquo;s just more than the sum of its parts.</p>\n",
				"content_text": "<em>Into the Great Wide Open</em> strikes me as a singular album. Perhaps it's not even the <em>best</em> Tom Petty album, but it stands out from the rest in some kind of way.\n\nMaybe it's nostalgia? It's the first Petty album I bought.\n\nMaybe it's humble? None of the songs are flashy, sitting right on the fence between songwriting and rock 'n roll.\n\nMaybe it's the lyrics? I've listened to this album <em>a lot</em>, so I've actually heard the lyrics and they're the right balance between clever and storytelling, for me.\n\nMaybe it's Jeff Lynne? Love that guy's production work. Great touch.\n\nIt's not too long, it's not too short. All the moving parts do their job without getting showy. Perhaps, it's just more than the sum of its parts.\n",
				"date_published": "2019-04-21T16:26:40-07:00",
				"url": "https://therealadam.com/2019/04/21/what-makes-into.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/09/typod-graphql-as.html",
				
				"content_html": "<p>Typo&rsquo;d GraphQL as &ldquo;GraphSQL&rdquo; and was like &ldquo;that&rsquo;s a little on the nose there, fingers&rdquo;</p>\n",
				"content_text": "Typo'd GraphQL as \"GraphSQL\" and was like \"that's a little on the nose there, fingers\"\n",
				"date_published": "2019-04-09T09:18:02-07:00",
				"url": "https://therealadam.com/2019/04/09/typod-graphql-as.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/08/a-nice-reminder.html",
				
				"content_html": "<p>A nice reminder that our work is often more about storytelling than we think - <a href=\"https://overreacted.io/name-it-and-they-will-come/\">Name It, and They Will Come — Overreacted</a></p>\n",
				"content_text": "A nice reminder that our work is often more about storytelling than we think - [Name It, and They Will Come — Overreacted](https://overreacted.io/name-it-and-they-will-come/)\n",
				"date_published": "2019-04-08T15:11:06-07:00",
				"url": "https://therealadam.com/2019/04/08/a-nice-reminder.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/04/til-vim-hybrid.html",
				
				"content_html": "<p>TIL, Vim hybrid absolute + relative line numbering: <a href=\"https://jeffkreeftmeijer.com/vim-number/\">jeffkreeftmeijer.com/vim-numbe&hellip;</a></p>\n",
				"content_text": "TIL, Vim hybrid absolute + relative line numbering: [jeffkreeftmeijer.com/vim-numbe...](https://jeffkreeftmeijer.com/vim-number/)\n",
				"date_published": "2019-04-04T09:19:41-07:00",
				"url": "https://therealadam.com/2019/04/04/til-vim-hybrid.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/03/does-clojure-style.html",
				
				"content_html": "<p>Does Clojure style still rely on writing a lot of  chains of higher-order functions (with -&gt; IIRC) or have they moved on to something else?</p>\n",
				"content_text": "Does Clojure style still rely on writing a lot of  chains of higher-order functions (with -> IIRC) or have they moved on to something else?\n",
				"date_published": "2019-04-03T06:07:31-07:00",
				"url": "https://therealadam.com/2019/04/03/does-clojure-style.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/04/01/sometimes-software-rewrites.html",
				
				"content_html": "<p><a href=\"https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22\">Sometimes software rewrites don&rsquo;t fail</a> - if you focus on escaping a local maximum for the <em>product</em> and <em>customers</em>.</p>\n",
				"content_text": "[Sometimes software rewrites don't fail](https://medium.com/@herbcaudill/lessons-from-6-software-rewrite-stories-635e4c8f7c22) - if you focus on escaping a local maximum for the _product_ and _customers_.\n",
				"date_published": "2019-04-01T06:05:31-07:00",
				"url": "https://therealadam.com/2019/04/01/sometimes-software-rewrites.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/31/leaning-into-the.html",
				
				"content_html": "<p>Leaning into the impostor syndrome here, I did a little bit of GraphQL hacking to see how the ecosystem is coming along. Not too badly! <a href=\"https://github.com/therealadam/outliner-graphql/blob/master/graph.js\">github.com/therealad&hellip;</a></p>\n<p>Also, semi-literate programming 🤓🤠💪!</p>\n",
				"content_text": "Leaning into the impostor syndrome here, I did a little bit of GraphQL hacking to see how the ecosystem is coming along. Not too badly! [github.com/therealad...](https://github.com/therealadam/outliner-graphql/blob/master/graph.js)\n\nAlso, semi-literate programming 🤓🤠💪!\n",
				"date_published": "2019-03-31T14:45:28-07:00",
				"url": "https://therealadam.com/2019/03/31/leaning-into-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/31/stephen-anderson-on.html",
				
				"content_html": "<p>Stephen Anderson on <a href=\"https://medium.com/@stephenanderson/the-future-of-design-computation-complexity-a434d2da3cd5\">The Future of Design: Computation &amp; Complexity</a>. Like everything else, its going to get more weird. But, the large-scale outcome remains the same - design is deciding which elements are essential and which elements to remove:</p>\n<blockquote>\n<p>The real world isn’t so simple, and often has many competing goals and constraints. As a designer, what are you already doing, to help define the objectives and goals for a project? As critical as this is to teamwork, it’s the single, driving factor for machines. We can — and should — absolutely lean into defining these things. This has always been important, but will be vital as we hand over more decisions to Machine Learning.</p>\n</blockquote>\n<p>This definitely sounds like the future…</p>\n<blockquote>\n<p>Now, what if I told you nothing could be designed that can’t be pitched, coded up, and released in an afternoon. Sound insane? I know of at least one company — the largest in their industry — that works this way.</p>\n</blockquote>\n<p>…and we have to invent a future where we solve this future we created without thinking through the ramifications:</p>\n<blockquote>\n<p>Never before has technology allowed individuals to do more harm (or good) with such low effort.\n— Christian Beck</p>\n</blockquote>\n<p>​Any practice where we can drive the iteration time to zero will end up requiring a new way of working where the computer generates a bunch of possible designs/systems/artifacts and a human applies education and intuition to determine which one to keep:</p>\n<blockquote>\n<p>Play this out, and the role of human shifts from that of hands-on creator using software to render an idea to that of a conductor (or curator or cultivator?) working with software to explore possible options. In a sense, we develop a sort of symbiotic relationship with the machine; the machine generates possibilities that we then direct or tweak until arriving at an optimal solution. We see this playing out in nearly every industry, from manufacturing to the design of web sites to healthcare.</p>\n</blockquote>\n<p>​A phase transition has already happened where the most successful systems occasionally touch the lives of city-sized populations. “Scale” means the most successful systems/platforms touch entire societies and a major fraction of the human population. I missed this forest amongst the trees of frameworks, languages, and databases. I suspect leaders like Zuckerberg and Dorsey missed it amongst the trees of growth and market acquisition.</p>\n<p>Again, we have to invent a future where we fix the future we accidentally created:</p>\n<blockquote>\n<p>What is new in all this is visibility into the scale and scope of problems we now work on — we have to ask questions about impact and outcomes. Facebook and Twitter are platforms that have changed the world. The addictive properties of Pinterest and SnapChat are changing human behavior and social interactions. We can’t treat these things like simple web apps. They aren’t.</p>\n</blockquote>\n<p>Part of inventing the future to fix the future is thinking more about feedback loops and how small changes in forces and incentives create outsized results:</p>\n<blockquote>\n<p>Much of the literature on formal systems thinking is dedicated to this topic of small changes. Reinforcing loops and balancing loops are the two foundational structures of systems thinking. The idea goes like this: Want to introduce a change? Don’t try to change the system (you can’t!). Instead, introduce a small change, or tweak an existing rule, then see what happens.</p>\n</blockquote>\n<p>More optimiscally, this last bit leads me to (continue to) think that the skills designers need aren’t so far off the skills developers need:</p>\n<blockquote>\n<p>I’ve identified about 11 ways of being that describe design. I won’t go into them all — there’s a post coming for that. But you’ve heard me mention some of these:</p>\n<ul>\n<li>Frame &amp; Reframe Problems</li>\n<li>Work from Principles &amp; Values</li>\n<li>Think in Systems and Contexts</li>\n<li>Focus on Human Needs &amp; Motivations</li>\n<li>See Possible Futures (where Others See Present Realities)</li>\n<li>Thrive on Ambiguity</li>\n</ul>\n</blockquote>\n",
				"content_text": "Stephen Anderson on [The Future of Design: Computation & Complexity](https://medium.com/@stephenanderson/the-future-of-design-computation-complexity-a434d2da3cd5). Like everything else, its going to get more weird. But, the large-scale outcome remains the same - design is deciding which elements are essential and which elements to remove:\n\n> The real world isn’t so simple, and often has many competing goals and constraints. As a designer, what are you already doing, to help define the objectives and goals for a project? As critical as this is to teamwork, it’s the single, driving factor for machines. We can — and should — absolutely lean into defining these things. This has always been important, but will be vital as we hand over more decisions to Machine Learning.\n\nThis definitely sounds like the future…\n\n> Now, what if I told you nothing could be designed that can’t be pitched, coded up, and released in an afternoon. Sound insane? I know of at least one company — the largest in their industry — that works this way.\n\n…and we have to invent a future where we solve this future we created without thinking through the ramifications:\n\n> Never before has technology allowed individuals to do more harm (or good) with such low effort.\n> — Christian Beck\n\n​Any practice where we can drive the iteration time to zero will end up requiring a new way of working where the computer generates a bunch of possible designs/systems/artifacts and a human applies education and intuition to determine which one to keep:\n\n> Play this out, and the role of human shifts from that of hands-on creator using software to render an idea to that of a conductor (or curator or cultivator?) working with software to explore possible options. In a sense, we develop a sort of symbiotic relationship with the machine; the machine generates possibilities that we then direct or tweak until arriving at an optimal solution. We see this playing out in nearly every industry, from manufacturing to the design of web sites to healthcare.\n\n​A phase transition has already happened where the most successful systems occasionally touch the lives of city-sized populations. “Scale” means the most successful systems/platforms touch entire societies and a major fraction of the human population. I missed this forest amongst the trees of frameworks, languages, and databases. I suspect leaders like Zuckerberg and Dorsey missed it amongst the trees of growth and market acquisition. \n\nAgain, we have to invent a future where we fix the future we accidentally created:\n\n> What is new in all this is visibility into the scale and scope of problems we now work on — we have to ask questions about impact and outcomes. Facebook and Twitter are platforms that have changed the world. The addictive properties of Pinterest and SnapChat are changing human behavior and social interactions. We can’t treat these things like simple web apps. They aren’t.\n\nPart of inventing the future to fix the future is thinking more about feedback loops and how small changes in forces and incentives create outsized results:\n\n> Much of the literature on formal systems thinking is dedicated to this topic of small changes. Reinforcing loops and balancing loops are the two foundational structures of systems thinking. The idea goes like this: Want to introduce a change? Don’t try to change the system (you can’t!). Instead, introduce a small change, or tweak an existing rule, then see what happens.\n\nMore optimiscally, this last bit leads me to (continue to) think that the skills designers need aren’t so far off the skills developers need:\n\n> I’ve identified about 11 ways of being that describe design. I won’t go into them all — there’s a post coming for that. But you’ve heard me mention some of these:\n> \n> - Frame & Reframe Problems\n> - Work from Principles & Values\n> - Think in Systems and Contexts\n> - Focus on Human Needs & Motivations\n> - See Possible Futures (where Others See Present Realities)\n> - Thrive on Ambiguity\n",
				"date_published": "2019-03-31T13:00:07-07:00",
				"url": "https://therealadam.com/2019/03/31/stephen-anderson-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/29/since-i-can.html",
				
				"content_html": "<p>Since I can never remember their individual names, it&rsquo;d help me a lot if all pugs were named &ldquo;Puggers&rdquo; from here on out. &ldquo;Mugsy&rdquo; would also be acceptable, but I might get them confused for bulldogs idk.</p>\n",
				"content_text": "Since I can never remember their individual names, it'd help me a lot if all pugs were named \"Puggers\" from here on out. \"Mugsy\" would also be acceptable, but I might get them confused for bulldogs idk.\n",
				"date_published": "2019-03-29T12:00:54-07:00",
				"url": "https://therealadam.com/2019/03/29/since-i-can.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/29/at-least-once.html",
				
				"content_html": "<p>At least once a week, I wish I could go show fourteen-year-old Adam <em>Diamonds and Pearls</em> and <em>Enter the Wu-Tang</em> so that I&rsquo;d have much better musical taste much earlier.</p>\n",
				"content_text": "At least once a week, I wish I could go show fourteen-year-old Adam _Diamonds and Pearls_ and _Enter the Wu-Tang_ so that I'd have much better musical taste much earlier.\n",
				"date_published": "2019-03-29T09:35:11-07:00",
				"url": "https://therealadam.com/2019/03/29/at-least-once.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/27/coding-without-a.html",
				"title": "Coding without a computer, designing without a design",
				"content_html": "<p>A thing I want to try is coding offline, per se. Without a functional computer (like a tablet). Think first. Outline and sketch a solution. Maybe pseudocode it up. Then fill it in and make it work once a “real” computer is available.</p>\n<p>Related: think first, outline/sketch a solution, only use the computer once I’m ready to build.</p>\n<p>Related related: what if frameworks like Rails, Django, etc. are scaffolds that we attach boilerplate-ish behavior to while we’re trying to figure what a program <em>really</em> wants to be? How many essay-sized programs are hiding in novel or encyclopedia-sized systems?</p>\n<p>Basically: I want to code without computers more often, and discover more program designs that are lurking within the design of a framework.</p>\n",
				"content_text": "A thing I want to try is coding offline, per se. Without a functional computer (like a tablet). Think first. Outline and sketch a solution. Maybe pseudocode it up. Then fill it in and make it work once a “real” computer is available.\n\nRelated: think first, outline/sketch a solution, only use the computer once I’m ready to build.\n\nRelated related: what if frameworks like Rails, Django, etc. are scaffolds that we attach boilerplate-ish behavior to while we’re trying to figure what a program _really_ wants to be? How many essay-sized programs are hiding in novel or encyclopedia-sized systems?\n\nBasically: I want to code without computers more often, and discover more program designs that are lurking within the design of a framework.\n",
				"date_published": "2019-03-27T15:08:47-07:00",
				"url": "https://therealadam.com/2019/03/27/coding-without-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/27/vacation-reads.html",
				"title": "Vacation reads",
				"content_html": "<p>It used to be that all the programmers were ladies. Arguably, they were higher skilled programmers since they didn&rsquo;t have little luxuries like text editors, REPLs, and online communities to problem solve with! Things were different back then, and they could be better again - <a href=\"https://www.nytimes.com/2019/02/13/magazine/women-coding-computer-programming.html?smid=nytcore-ios-share\">The Secret History of Women in Coding - The New York Times</a></p>\n<p>I finally looked into The Pudding and came upon many a delightful visual essay:  <a href=\"https://pudding.cool/projects/vocabulary/\">Rappers, sorted by the size of their vocabulary</a> and  <a href=\"https://pudding.cool/2018/02/stand-up/\">The Structure of Stand-Up Comedy</a> on the cycles in Ali Wong&rsquo;s famous set.</p>\n<p>A list of non-hacks, mostly about sleep, that might help you feel better. <a href=\"https://www.theatlantic.com/health/archive/2019/03/top-biohacks/584584/\">7 Biohacks That Actually Work - The Atlantic</a></p>\n<p>A bit dismal: <a href=\"https://www.washingtonpost.com/news/opinions/wp/2019/03/14/feature/the-strongmen-strike-back/\">Dictators have reemerged as the greatest threat to the liberal democratic world - The Washington Post</a>. Improvements to liberalism that could counter said rise of dictators and nationalism: <a href=\"https://www.economist.com/essay/2018/09/13/the-economist-at-175\">The Economist at 175 - Liberalism</a>.</p>\n<p>The degree to which the tradecraft of national intelligence agencies are applied in the private sector continually appalls me. But apparently its part of the game for at least one activist investor. <a href=\"https://www.newyorker.com/magazine/2018/08/27/paul-singer-doomsday-investor\">Paul Singer, Doomsday Investor | The New Yorker</a> I think probably we&rsquo;re doing capitalism wrong at this point?</p>\n<p>On James Cameron. A man creatively possessed, but a crude man at a best.<a href=\"https://www.newyorker.com/magazine/2009/10/26/man-of-extremes\">Man of Extremes | The New Yorker</a></p>\n<p>Javier Grillo-Marxuach (<em>LOST</em> and a bunch of other stuff) on <a href=\"http://okbjgm.weebly.com/uploads/3/1/5/0/31506003/11_laws_of_showrunning_nice_version.pdf\">running a television show</a>, but absolutely applicable to any creative leadership discipline.</p>\n<p>On <em>Barry</em>, the loveliness, and apparently the sadness that is Bill Hader.  <a href=\"https://www.newyorker.com/magazine/2019/03/18/bill-hader-kills\">Bill Hader Kills | The New Yorker</a></p>\n",
				"content_text": "It used to be that all the programmers were ladies. Arguably, they were higher skilled programmers since they didn't have little luxuries like text editors, REPLs, and online communities to problem solve with! Things were different back then, and they could be better again - [The Secret History of Women in Coding - The New York Times](https://www.nytimes.com/2019/02/13/magazine/women-coding-computer-programming.html?smid=nytcore-ios-share)\n\nI finally looked into The Pudding and came upon many a delightful visual essay:  [Rappers, sorted by the size of their vocabulary](https://pudding.cool/projects/vocabulary/) and  [The Structure of Stand-Up Comedy](https://pudding.cool/2018/02/stand-up/) on the cycles in Ali Wong's famous set.\n\nA list of non-hacks, mostly about sleep, that might help you feel better. [7 Biohacks That Actually Work - The Atlantic](https://www.theatlantic.com/health/archive/2019/03/top-biohacks/584584/)\n\n\nA bit dismal: [Dictators have reemerged as the greatest threat to the liberal democratic world - The Washington Post](https://www.washingtonpost.com/news/opinions/wp/2019/03/14/feature/the-strongmen-strike-back/). Improvements to liberalism that could counter said rise of dictators and nationalism: [The Economist at 175 - Liberalism](https://www.economist.com/essay/2018/09/13/the-economist-at-175).\n\nThe degree to which the tradecraft of national intelligence agencies are applied in the private sector continually appalls me. But apparently its part of the game for at least one activist investor. [Paul Singer, Doomsday Investor | The New Yorker](https://www.newyorker.com/magazine/2018/08/27/paul-singer-doomsday-investor) I think probably we're doing capitalism wrong at this point?\n\nOn James Cameron. A man creatively possessed, but a crude man at a best.[Man of Extremes | The New Yorker](https://www.newyorker.com/magazine/2009/10/26/man-of-extremes)\n\nJavier Grillo-Marxuach (_LOST_ and a bunch of other stuff) on [running a television show](http://okbjgm.weebly.com/uploads/3/1/5/0/31506003/11_laws_of_showrunning_nice_version.pdf), but absolutely applicable to any creative leadership discipline.\n\nOn _Barry_, the loveliness, and apparently the sadness that is Bill Hader.  [Bill Hader Kills | The New Yorker](https://www.newyorker.com/magazine/2019/03/18/bill-hader-kills)\n",
				"date_published": "2019-03-27T14:23:47-07:00",
				"url": "https://therealadam.com/2019/03/27/vacation-reads.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/21/i-think-with.html",
				
				"content_html": "<p>I think with my mouth. Often that means I start talking with some idea, realize that the idea isn&rsquo;t as hefty as I originally thought, and end up talking until I reach a moment of mild truth. Which often ends up being a platitude.</p>\n<p>Shutting up: it&rsquo;s a thing I&rsquo;m working on.</p>\n",
				"content_text": "I think with my mouth. Often that means I start talking with some idea, realize that the idea isn't as hefty as I originally thought, and end up talking until I reach a moment of mild truth. Which often ends up being a platitude.\n\nShutting up: it's a thing I'm working on.\n",
				"date_published": "2019-03-21T05:44:34-07:00",
				"url": "https://therealadam.com/2019/03/21/i-think-with.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/17/in-the-world.html",
				
				"content_html": "<p>In the world where data-privacy and GDPR compliance matter, owned/onsite analytics stacks like this seem promising <a href=\"https://bostata.com/post/client-side-instrumentation-for-under-one-dollar/\">bostata.com/post/clie&hellip;</a></p>\n",
				"content_text": "In the world where data-privacy and GDPR compliance matter, owned/onsite analytics stacks like this seem promising [bostata.com/post/clie...](https://bostata.com/post/client-side-instrumentation-for-under-one-dollar/)\n",
				"date_published": "2019-03-17T13:38:12-07:00",
				"url": "https://therealadam.com/2019/03/17/in-the-world.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/12/technologies-which-i.html",
				
				"content_html": "<p>Technologies which I am 🤔 about adding to a product but 🤷‍♂️ if someone has already gone through the process of setting them up and getting the developer experience right: React, Docker, ELK, (probably others)</p>\n",
				"content_text": "Technologies which I am 🤔 about adding to a product but 🤷‍♂️ if someone has already gone through the process of setting them up and getting the developer experience right: React, Docker, ELK, (probably others)\n",
				"date_published": "2019-03-12T15:13:55-07:00",
				"url": "https://therealadam.com/2019/03/12/technologies-which-i.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/11/a-thing-people.html",
				
				"content_html": "<p>A thing people don’t like is hearing that a foundational component of their project is mathematically impossible. Corollary: never tell people about the halting problem.</p>\n",
				"content_text": "A thing people don’t like is hearing that a foundational component of their project is mathematically impossible. Corollary: never tell people about the halting problem.\n",
				"date_published": "2019-03-11T06:13:25-07:00",
				"url": "https://therealadam.com/2019/03/11/a-thing-people.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/11/programming-languages-frameworks.html",
				
				"content_html": "<p>Programming languages &gt; frameworks &gt; libraries &gt; domain languages &gt; domain modeling</p>\n<p>(Things on the left are higher leverage than things on the right. Things on the right are easier to build than things on the left.)</p>\n<p>In the brief moment when I start a new application, I work from left to right. The rest of the time, I’m working right to left.</p>\n<p>It’s easy to learn languages, frameworks, and libraries in the abstract. It’s harder, for me, to find domains to model and build languages for outside of teamwork/professional contexts.</p>\n<p>I continue to suspect that developers are undervaluing the ratio of leverage to development effort of frameworks.</p>\n",
				"content_text": "Programming languages > frameworks > libraries > domain languages > domain modeling\n\n(Things on the left are higher leverage than things on the right. Things on the right are easier to build than things on the left.)\n\nIn the brief moment when I start a new application, I work from left to right. The rest of the time, I’m working right to left.\n\nIt’s easy to learn languages, frameworks, and libraries in the abstract. It’s harder, for me, to find domains to model and build languages for outside of teamwork/professional contexts.\n\nI continue to suspect that developers are undervaluing the ratio of leverage to development effort of frameworks.\n",
				"date_published": "2019-03-11T06:01:29-07:00",
				"url": "https://therealadam.com/2019/03/11/programming-languages-frameworks.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/03/11/markets-are-eating.html",
				
				"content_html": "<p><a href=\"https://www.ribbonfarm.com/2019/02/28/markets-are-eating-the-world/\">Markets Are Eating The World</a>. A non-obnoxious meditation on how blockchains could reduce coordination costs and makes large, corporate-like entities less necessary in the same way division of labor and technology have in the past.</p>\n",
				"content_text": "[Markets Are Eating The World](https://www.ribbonfarm.com/2019/02/28/markets-are-eating-the-world/). A non-obnoxious meditation on how blockchains could reduce coordination costs and makes large, corporate-like entities less necessary in the same way division of labor and technology have in the past.\n",
				"date_published": "2019-03-11T05:55:37-07:00",
				"url": "https://therealadam.com/2019/03/11/markets-are-eating.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/02/18/why-are-you.html",
				"title": "Why are you building this?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>At some point in what feels like the very distant past, I bought <em><a href=\"https://shapeofdesignbook.com\">The Shape of Design</a></em> by Frank Chimero. For six years, apparently, I’ve flipped past it on the way to reading other things. For some of that time, I was convinced I’d already read it. I was wrong, I just started reading it, and I’m super glad I did.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It opens with this bit of foreword, which struck me right in the “these are my people” feels:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>Frank Chimero and I came together over a shared commitment to jazz. But not only exchanges of music. We emulated the form. He would write a blog post. I would respond. I would improvise one of his hunches. He would iterate one of my posts. A call-and-response approach to a developing friendship.</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>From there, it’s continued to impress. The illustrations before each chapter are delightful, the chapters are short and punchy, and the ideas are as useful to doing computer programs as they are to doing design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The first idea in the book has taken up residence in my brain and I don’t want to let it go. It is, simple enough, that we should ask “how and why?” are we building this thing. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The “how” is often easy enough and the proverbial cart before the horse. We’re building a design system, we’re using Rails or React or whatever’s hot right now, or we’re doing XP with a little bit of Kanban and a dab of Lean methodology. The thing is, in the end, few of us will say “Oh, they built this with a design system, React, and lean methodology. Phew! I wasn’t going to use it otherwise.”</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The answer to “why” is more likely to generate a satisfying response. We build things to learn, because they don’t exist and we want it to exist, because what exists doesn’t satisfy us, because people need it, because it brings joy to those who would use it, etc. Answering why motivates our craft.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Working backwards from “why” something should exist to “how” it should come to exist makes the difference between boring blandness and purposeful clarity.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-02-18T07:13:42-07:00",
				"url": "https://therealadam.com/2019/02/18/why-are-you.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/02/02/little-rust-learning.html",
				"title": "Little (Rust) learning victories",
				"content_html": "<p>I’m attempting to learn Rust. And really make it stick this time around. A lot of the “making it stick” part is making lists and having the discipline to stick with crossing items off them!</p>\n<p>A smaller part is figuring out how I can notch very small victories no matter how much progress I make. This is crucial because I’ve got about a half an hour each morning to work on this!</p>\n<p>My current favorite sort of small victory is to write up what I’ve learned if it doesn’t seem like I’m going to get far enough to commit new code behavior. This happens a fair bit when you’re working with a type checker after years of using a very implicit language.</p>\n<p>So far I’ve written up what I’ve learned about the web frameworks <a href=\"https://github.com/therealadam/rust-web-bakeoff/blob/master/docs/actix.md\">Nickel</a> and <a href=\"https://github.com/therealadam/rust-web-bakeoff/blob/master/docs/actix.md\">Actix</a> so far.</p>\n<p>The motivation for these little chunks of progress are the <a href=\"http://inessential.com/vespersyncdiary\">learning journals Brent Simmons has published</a> over the years.</p>\n",
				"content_text": "I’m attempting to learn Rust. And really make it stick this time around. A lot of the “making it stick” part is making lists and having the discipline to stick with crossing items off them! \n\nA smaller part is figuring out how I can notch very small victories no matter how much progress I make. This is crucial because I’ve got about a half an hour each morning to work on this!\n\nMy current favorite sort of small victory is to write up what I’ve learned if it doesn’t seem like I’m going to get far enough to commit new code behavior. This happens a fair bit when you’re working with a type checker after years of using a very implicit language.\n\nSo far I’ve written up what I’ve learned about the web frameworks [Nickel](https://github.com/therealadam/rust-web-bakeoff/blob/master/docs/actix.md) and [Actix](https://github.com/therealadam/rust-web-bakeoff/blob/master/docs/actix.md) so far.\n\nThe motivation for these little chunks of progress are the [learning journals Brent Simmons has published](http://inessential.com/vespersyncdiary) over the years.\n",
				"date_published": "2019-02-02T15:46:44-07:00",
				"url": "https://therealadam.com/2019/02/02/little-rust-learning.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/15/was-way-more.html",
				
				"content_html": "<p>Was way more into this playlist when I thought it was &ldquo;Eels!&rdquo;</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Was way more into this playlist when I thought it was \"Eels!\"\n\n<img src=\"https://short.therealadam.com/uploads/2019/2b58427bb1.jpg\" width=\"600\" height=\"311\" alt=\"\" />\n",
				"date_published": "2019-01-15T09:57:55-07:00",
				"url": "https://therealadam.com/2019/01/15/was-way-more.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/13/pardon-the-dust.html",
				"title": "Pardon the dust, learning in progress",
				"content_html": "<p>I&rsquo;m trying a few things while I learn how <a href=\"https://github.com/therealadam/rusty-ray\">ray-tracers work</a>:</p>\n<ul>\n<li>learning Rust and graphics programming</li>\n<li>collecting my thoughts and discoveries in the repo, aka blogging</li>\n<li>doing it all in public, rather than a private repo</li>\n<li>tackling very math-y programming and domain problems, despite my lack of acumen in the area</li>\n</ul>\n<p>Brought to you by: more folks should do blogging-like things, even if it’s not entirely on their own platform or using blog-software <strong>and</strong> more veteran programmers should be naive and not know everything <em>in public</em>.</p>\n",
				"content_text": "I'm trying a few things while I learn how [ray-tracers work](https://github.com/therealadam/rusty-ray):\n\n- learning Rust and graphics programming\n- collecting my thoughts and discoveries in the repo, aka blogging\n- doing it all in public, rather than a private repo\n- tackling very math-y programming and domain problems, despite my lack of acumen in the area\n\nBrought to you by: more folks should do blogging-like things, even if it’s not entirely on their own platform or using blog-software **and** more veteran programmers should be naive and not know everything _in public_.\n",
				"date_published": "2019-01-13T14:56:34-07:00",
				"url": "https://therealadam.com/2019/01/13/pardon-the-dust.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/13/its-true-that.html",
				
				"content_html": "<p>It&rsquo;s true that Twitter took some air out of blogging. I suspect it’s also true that they formed a positive feedback loop when they overlapped. Longer-form writing informed tweets, tweets responded to or inspired longer-form writing. We can have our tweets and eat blogs too!</p>\n",
				"content_text": "It's true that Twitter took some air out of blogging. I suspect it’s also true that they formed a positive feedback loop when they overlapped. Longer-form writing informed tweets, tweets responded to or inspired longer-form writing. We can have our tweets and eat blogs too!\n",
				"date_published": "2019-01-13T14:10:39-07:00",
				"url": "https://therealadam.com/2019/01/13/its-true-that.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/13/listening-to-a.html",
				
				"content_html": "<p>Listening to a DJ live set and it opens with the whitest, most English version of a 90’s hip-hop sketch I’ve ever heard. This person learned the exactly wrong lesson of possibly every album after <em>3 Feet High and Rising</em>.</p>\n",
				"content_text": "Listening to a DJ live set and it opens with the whitest, most English version of a 90’s hip-hop sketch I’ve ever heard. This person learned the exactly wrong lesson of possibly every album after _3 Feet High and Rising_.\n",
				"date_published": "2019-01-13T13:56:19-07:00",
				"url": "https://therealadam.com/2019/01/13/listening-to-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/13/gil-scott-heron.html",
				
				"content_html": "<p>Gil! Scott! Heron! <strong>man crush on LCD Soundsystem intensifies</strong> <a href=\"https://itunes.apple.com/us/album/losing-my-edge-live-at-madison-square-garden/869319713?i=869319791\">itunes.apple.com/us/album/&hellip;</a></p>\n",
				"content_text": "Gil! Scott! Heron! **man crush on LCD Soundsystem intensifies** [itunes.apple.com/us/album/...](https://itunes.apple.com/us/album/losing-my-edge-live-at-madison-square-garden/869319713?i=869319791)\n",
				"date_published": "2019-01-13T13:06:07-07:00",
				"url": "https://therealadam.com/2019/01/13/gil-scott-heron.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/12/why-blogs-are.html",
				
				"content_html": "<p>Why blogs are still lovely, part fourteen: <a href=\"https://shawnblanc.net/2019/01/snow-day-2/\">shawnblanc.net/2019/01/s&hellip;</a></p>\n",
				"content_text": "Why blogs are still lovely, part fourteen: [shawnblanc.net/2019/01/s...](https://shawnblanc.net/2019/01/snow-day-2/)\n",
				"date_published": "2019-01-12T14:22:25-07:00",
				"url": "https://therealadam.com/2019/01/12/why-blogs-are.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/08/corollaries-to-new.html",
				
				"content_html": "<p>Corollaries to “new languages won&rsquo;t achieve career-sustaining critical mass&quot;: 1) frameworks  become the important point of leverage 2) framework/language harmony or outright integration ala Elm or Erlang become even more important.</p>\n",
				"content_text": "Corollaries to “new languages won't achieve career-sustaining critical mass\": 1) frameworks  become the important point of leverage 2) framework/language harmony or outright integration ala Elm or Erlang become even more important.\n",
				"date_published": "2019-01-08T06:36:48-07:00",
				"url": "https://therealadam.com/2019/01/08/corollaries-to-new.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/07/long-bet-java.html",
				
				"content_html": "<p>Long bet: Java, PHP, JavaScript, Python, Ruby, and C# will be the last languages that achieve a critical mass such that they can sustain developers through their whole career. From here on out, it’s a melting pot of framework and technology choices.</p>\n",
				"content_text": "Long bet: Java, PHP, JavaScript, Python, Ruby, and C# will be the last languages that achieve a critical mass such that they can sustain developers through their whole career. From here on out, it’s a melting pot of framework and technology choices.\n",
				"date_published": "2019-01-07T06:40:06-07:00",
				"url": "https://therealadam.com/2019/01/07/long-bet-java.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/03/increasingly-convinced-houses.html",
				
				"content_html": "<p>Increasingly convinced houses only exist in two states: brand new and invisibly needing repair, lived in and visibly needing multiple repairs. This adage may apply to societies too.</p>\n",
				"content_text": "Increasingly convinced houses only exist in two states: brand new and invisibly needing repair, lived in and visibly needing multiple repairs. This adage may apply to societies too.\n",
				"date_published": "2019-01-03T16:39:53-07:00",
				"url": "https://therealadam.com/2019/01/03/increasingly-convinced-houses.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/03/we-dont-have.html",
				"title": "We don't have to agree about code style",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Will we ever come to agree on writing code?</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Ruby folks like short methods. One-liners even; maybe for their concision, maybe to show off their language and code golfing skill.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>JavaScript folk like often like a bit more heft in their functions. No matter how good a function name is, logic is easier to understand if it's all in one place.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Despite the mechanical similarities of this sample size of two languages, programming communities have chosen very different styles. This has been happening for decades, since the beginning. It will probably always happen.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>As sure as Keith Richards sounds different than George Harrison or Pete Townsend, developers will disagree on the structure and little details of code. Like music, like code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Luckily, now we have pretty printers and code formatters like <a href=\"https://prettier.io\">prettier</a>, <a href=\"https://blog.golang.org/go-fmt-your-code\">gofmt</a>, <a href=\"https://github.com/rust-lang/rustfmt\">rustfmt</a>, or <a href=\"https://github.com/rubocop-hq/rubocop\">RuboCop</a>. This is a welcome advance from even ten years ago, when some code reviews could bog down in \"there's an extra whitespace here\" or \"this function seems too short, can we merge it with its callers?\"</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We don't have to agree, we just have to act like professionals when it comes to the little things.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2019-01-03T06:35:13-07:00",
				"url": "https://therealadam.com/2019/01/03/we-dont-have.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2019/01/01/its-and-im.html",
				"title": "It's 2019 and I'm signing my jokes like its 2019",
				"content_html": "<p>A stranger walks into an elevator. I say “how about this weather?!” They smirk, or let out a small laugh. It&rsquo;s easy to think, &ldquo;I am funny guy!&rdquo; But: that’s not a joke, it’s not funny. It’s just small talk and politeness in action. I am not, actually, the funny guy in this scenario.</p>\n<p>When I was fourteen, I was really into standup comedy. I managed to find a club above a bowling alley that let me do a 2 minute set. The only constraint was that I couldn’t work blue. So I wrote two minutes of jokes, performed it a couple times, got a few laughs, and that was that. I figured out that I could get in front of people and tell some jokes, and I didn&rsquo;t need to rely on slapstick cursing to do it.</p>\n<p>Also, I was fourteen and surrounded by teenagers. Teenagers make a lot of jokes at each other&rsquo;s expense, because they&rsquo;re cruel, don&rsquo;t know better, and aren&rsquo;t practiced humorists. I had experienced my share of being the subject of those jokes and decided I didn&rsquo;t want to be that kind of funny. Eventually, I came to the formulation that the best jokes aren&rsquo;t at someone else&rsquo;s expense.</p>\n<p>As random things in one’s youth go, these two were pretty formative. I decided that if you can’t get a laugh without cursing or making a joke at someone’s expense by punching down, you weren’t actually funny.</p>\n<p>Turns out these principles are pretty handy for the world we live in (and have always lived in, but some the future is not evenly distributed, etc.)</p>\n<p><a href=\"https://twitter.com/AndyRichter/status/1079809155928449028\">twitter.com/AndyRicht&hellip;</a></p>\n<p>You can work blue, you can demean other people, you can say what&rsquo;s really on your mind, and you can punch down. You may get laughs, but they’re because people are sympathetic to your anger or cruelty. Or, maybe you’ve been bombing so long they’re just relieved you said something almost decent and the laugh to diffuse the situation. But, that’s not funny.</p>\n<p>When a joke misses, when a standup flops, it doesn&rsquo;t mean we&rsquo;ve become a humorless or prduce society. None of this means the end of humor or satire. It means we&rsquo;re going to separate the really excellent humorists from those who are merely humor-adjacent.</p>\n",
				"content_text": "A stranger walks into an elevator. I say “how about this weather?!” They smirk, or let out a small laugh. It's easy to think, \"I am funny guy!\" But: that’s not a joke, it’s not funny. It’s just small talk and politeness in action. I am not, actually, the funny guy in this scenario.\n\nWhen I was fourteen, I was really into standup comedy. I managed to find a club above a bowling alley that let me do a 2 minute set. The only constraint was that I couldn’t work blue. So I wrote two minutes of jokes, performed it a couple times, got a few laughs, and that was that. I figured out that I could get in front of people and tell some jokes, and I didn't need to rely on slapstick cursing to do it.\n\nAlso, I was fourteen and surrounded by teenagers. Teenagers make a lot of jokes at each other's expense, because they're cruel, don't know better, and aren't practiced humorists. I had experienced my share of being the subject of those jokes and decided I didn't want to be that kind of funny. Eventually, I came to the formulation that the best jokes aren't at someone else's expense.\n\nAs random things in one’s youth go, these two were pretty formative. I decided that if you can’t get a laugh without cursing or making a joke at someone’s expense by punching down, you weren’t actually funny.\n\nTurns out these principles are pretty handy for the world we live in (and have always lived in, but some the future is not evenly distributed, etc.)\n\n[twitter.com/AndyRicht...](https://twitter.com/AndyRichter/status/1079809155928449028)\n\nYou can work blue, you can demean other people, you can say what's really on your mind, and you can punch down. You may get laughs, but they’re because people are sympathetic to your anger or cruelty. Or, maybe you’ve been bombing so long they’re just relieved you said something almost decent and the laugh to diffuse the situation. But, that’s not funny.\n\nWhen a joke misses, when a standup flops, it doesn't mean we've become a humorless or prduce society. None of this means the end of humor or satire. It means we're going to separate the really excellent humorists from those who are merely humor-adjacent.\n",
				"date_published": "2019-01-01T14:18:10-07:00",
				"url": "https://therealadam.com/2019/01/01/its-and-im.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/27/who-has-two.html",
				
				"content_html": "<p>Who has two thumbs and is pretty excited for Enumerable#to_h and the proc composition/chaining stuff in Ruby 2.6! 👍👍</p>\n<p><a href=\"http://anamaria.martinezgomez.name/2018/12/21/ruby2_6.html\">anamaria.martinezgomez.name/2018/12/2&hellip;</a></p>\n",
				"content_text": "Who has two thumbs and is pretty excited for Enumerable#to_h and the proc composition/chaining stuff in Ruby 2.6! 👍👍\n\n[anamaria.martinezgomez.name/2018/12/2...](http://anamaria.martinezgomez.name/2018/12/21/ruby2_6.html)\n",
				"date_published": "2018-12-27T13:22:46-07:00",
				"url": "https://therealadam.com/2018/12/27/who-has-two.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/26/which-came-first.html",
				
				"content_html": "<p>Which came first: the theory of productivity or the Singularly Great Work?</p>\n<p>Point: GTD and XP are both based on what worked Really Well for One Singularly Productrive person.\nCounterpoint: we all need our own theory of what might work for us personally before we get started.</p>\n",
				"content_text": "Which came first: the theory of productivity or the Singularly Great Work?\n\nPoint: GTD and XP are both based on what worked Really Well for One Singularly Productrive person.\nCounterpoint: we all need our own theory of what might work for us personally before we get started.\n",
				"date_published": "2018-12-26T10:13:59-07:00",
				"url": "https://therealadam.com/2018/12/26/which-came-first.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/13/in-honor-of.html",
				
				"content_html": "<p>In honor of Ms. Jackson&rsquo;s imminent induction into the Rock Hall of Fame: is <em>Rhythm Nation 1814</em> a concept album? 🤔 ✋🖐️✋</p>\n",
				"content_text": "In honor of Ms. Jackson's imminent induction into the Rock Hall of Fame: is _Rhythm Nation 1814_ a concept album? 🤔 ✋🖐️✋\n",
				"date_published": "2018-12-13T10:40:13-07:00",
				"url": "https://therealadam.com/2018/12/13/in-honor-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/05/fortnite-creative-looks.html",
				
				"content_html": "<p><a href=\"https://www.epicgames.com/fortnite/en-US/news/creative\">Fortnite Creative</a> looks like a combination of private servers and exposing most of the map building tools through a clever game item. Seeing as how nothing in Fortnite should work, on paper, I’m excited to see what folks do with it!</p>\n",
				"content_text": "[Fortnite Creative](https://www.epicgames.com/fortnite/en-US/news/creative) looks like a combination of private servers and exposing most of the map building tools through a clever game item. Seeing as how nothing in Fortnite should work, on paper, I’m excited to see what folks do with it!\n",
				"date_published": "2018-12-05T20:32:49-07:00",
				"url": "https://therealadam.com/2018/12/05/fortnite-creative-looks.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/04/in-lieu-of.html",
				
				"content_html": "<p>In lieu of coffee, I took a five minute walk yesterday when I hit the mid-afternoon groginess. This was at least as effective, if not more than a coffee. 100% success rate, would recommend! 😉</p>\n",
				"content_text": "In lieu of coffee, I took a five minute walk yesterday when I hit the mid-afternoon groginess. This was at least as effective, if not more than a coffee. 100% success rate, would recommend! 😉\n",
				"date_published": "2018-12-04T10:33:34-07:00",
				"url": "https://therealadam.com/2018/12/04/in-lieu-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/12/01/i-like-how.html",
				
				"content_html": "<p>I like how the module systems in ES6 and Clojure solve the “where the heck did this function come from?&quot; problem. I&rsquo;m optimistic that adding some kind of module system to Ruby can make working with Rails and large apps even more pleasant!</p>\n<p><a href=\"https://github.com/ciconia/modulation\">github.com/ciconia/m&hellip;</a></p>\n",
				"content_text": "I like how the module systems in ES6 and Clojure solve the “where the heck did this function come from?\" problem. I'm optimistic that adding some kind of module system to Ruby can make working with Rails and large apps even more pleasant!\n\n[github.com/ciconia/m...](https://github.com/ciconia/modulation)\n",
				"date_published": "2018-12-01T14:19:17-07:00",
				"url": "https://therealadam.com/2018/12/01/i-like-how.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/25/the-new-yorkers.html",
				
				"content_html": "<p>The New Yorker&rsquo;s “Touchstones” essays on classic albums are quite good. The inline samples of <a href=\"https://www.newyorker.com/culture/touchstones/an-appreciation-of-missy-elliotts-1997-album-supa-dupa-fly\">Missy Elliott’s musical references</a> and supercuts of other artists borrowing <a href=\"https://www.newyorker.com/culture/touchstones/an-appreciation-of-janet-jacksons-1989-album-rhythm-nation-1814\">Janet Jackson&rsquo;s chair dance</a> are a great evolution of online music writing. (There&rsquo;s also one on Nirvana 🤷‍♂️)</p>\n",
				"content_text": "The New Yorker's “Touchstones” essays on classic albums are quite good. The inline samples of [Missy Elliott’s musical references](https://www.newyorker.com/culture/touchstones/an-appreciation-of-missy-elliotts-1997-album-supa-dupa-fly) and supercuts of other artists borrowing [Janet Jackson's chair dance](https://www.newyorker.com/culture/touchstones/an-appreciation-of-janet-jacksons-1989-album-rhythm-nation-1814) are a great evolution of online music writing. (There's also one on Nirvana 🤷‍♂️)\n",
				"date_published": "2018-11-25T14:08:46-07:00",
				"url": "https://therealadam.com/2018/11/25/the-new-yorkers.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/18/wherein-a-mind.html",
				"title": "Wherein a mind is kept clear(er)",
				"content_html": "<p>A couple things making me feel more productive lately:</p>\n<p><strong>Jot down a theme for the day</strong>: at the beginning or end of the day, I make up some kind of near-platitude to help me focus and get stuff done. Recently: “Hack like a writer”, “Finish like a shipper”, “Focus on code”. They&rsquo;re a bit hustle-y, nearly cringe-y, and function only to get me back on track should I field a bunch of curveballs.</p>\n<p><strong>“Sync&quot; written notes to a daily page</strong>: usually after lunch and before I wrap up work for the day, I transcribe any notes/sketches/todos/etc. I wrote down, on pen and paper, to a note (in <a href=\"https://bear.app\">Bear</a>). This seems to help me keep a clear head and not get overwhelmed on hectic days.</p>\n<p>A couple things that feel right but haven&rsquo;t &ldquo;stuck&rdquo; as habits yet:</p>\n<p><strong>Set out clothes for tomorrow before I go to bed</strong>: check the weather, set out what I&rsquo;ll wear tomorrow. I often forget, but when I don&rsquo;t I thank myself the next day.</p>\n<p><strong>One big thing, a dozen or so little things</strong>: I don&rsquo;t think I&rsquo;ll go so far as eschewing a productivity/todo app, but using <a href=\"http://randsinrepose.com/archives/one-thing/\">One Thing</a> as a guideline when organizing my tasks often helps me reduce implausible lists to tractable plans.</p>\n",
				"content_text": "A couple things making me feel more productive lately:\n\n**Jot down a theme for the day**: at the beginning or end of the day, I make up some kind of near-platitude to help me focus and get stuff done. Recently: “Hack like a writer”, “Finish like a shipper”, “Focus on code”. They're a bit hustle-y, nearly cringe-y, and function only to get me back on track should I field a bunch of curveballs.\n\n**“Sync\" written notes to a daily page**: usually after lunch and before I wrap up work for the day, I transcribe any notes/sketches/todos/etc. I wrote down, on pen and paper, to a note (in [Bear](https://bear.app)). This seems to help me keep a clear head and not get overwhelmed on hectic days.\n\nA couple things that feel right but haven't \"stuck\" as habits yet:\n\n**Set out clothes for tomorrow before I go to bed**: check the weather, set out what I'll wear tomorrow. I often forget, but when I don't I thank myself the next day.\n\n**One big thing, a dozen or so little things**: I don't think I'll go so far as eschewing a productivity/todo app, but using [One Thing](http://randsinrepose.com/archives/one-thing/) as a guideline when organizing my tasks often helps me reduce implausible lists to tractable plans.\n",
				"date_published": "2018-11-18T13:27:12-07:00",
				"url": "https://therealadam.com/2018/11/18/wherein-a-mind.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/14/our-evil-corgi.html",
				
				"content_html": "<p>Our evil corgi, national champion Fran is now an evil corgi cover girl 😃😃😃</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Our evil corgi, national champion Fran is now an evil corgi cover girl 😃😃😃\n\n<img src=\"https://therealadam.micro.blog/uploads/2018/7edd7117c0.jpg\" width=\"448\" height=\"600\" />\n",
				"date_published": "2018-11-14T15:23:16-07:00",
				"url": "https://therealadam.com/2018/11/14/our-evil-corgi.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/14/bobs-what-would.html",
				
				"content_html": "<p>Bobs: What would you say it is you do around here?</p>\n<p>Me: I curate and repost cute animal memes from various Slacks into our company Slack&rsquo;s pets channel.</p>\n<p>Bobs: This guy&rsquo;s a straight shooter with upper management written all over him.</p>\n",
				"content_text": "Bobs: What would you say it is you do around here?\n\nMe: I curate and repost cute animal memes from various Slacks into our company Slack's pets channel.\n\nBobs: This guy's a straight shooter with upper management written all over him.\n",
				"date_published": "2018-11-14T13:48:33-07:00",
				"url": "https://therealadam.com/2018/11/14/bobs-what-would.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/14/currently-enjoying-what.html",
				
				"content_html": "<p>Currently enjoying: <em>What Now</em> from Sylvan Esso. Love the edge on the lyrics and the shape of the synth sounds.</p>\n<p><a href=\"https://itunes.apple.com/us/album/what-now/1206174094\">itunes.apple.com/us/album/&hellip;</a></p>\n",
				"content_text": "Currently enjoying: _What Now_ from Sylvan Esso. Love the edge on the lyrics and the shape of the synth sounds.\n\n[itunes.apple.com/us/album/...](https://itunes.apple.com/us/album/what-now/1206174094)\n",
				"date_published": "2018-11-14T12:44:33-07:00",
				"url": "https://therealadam.com/2018/11/14/currently-enjoying-what.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/12/ruby-library-designs.html",
				
				"content_html": "<p>Ruby library designs based on plugins and/or extensive module composition make me worried I’m going to spend a lot of time understanding the flow of control between modules (e.g. CarrierWave, AuthLogic).</p>\n<p>I’d rather something that’s already integrated with “common” problems of coupling. I have a lot more experience troubleshooting those and don&rsquo;t have to &ldquo;play computer&rdquo; so much. 🤷‍♂️</p>\n",
				"content_text": "Ruby library designs based on plugins and/or extensive module composition make me worried I’m going to spend a lot of time understanding the flow of control between modules (e.g. CarrierWave, AuthLogic).\n\nI’d rather something that’s already integrated with “common” problems of coupling. I have a lot more experience troubleshooting those and don't have to \"play computer\" so much. 🤷‍♂️\n",
				"date_published": "2018-11-12T09:04:33-07:00",
				"url": "https://therealadam.com/2018/11/12/ruby-library-designs.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/11/its-never-a.html",
				"title": "Its never a bad time to educate the kids about their rock and roll heritage",
				"content_html": "<p>Speaking of rowdy Springsteen: found this anachronistic and slightly surprising performance of “Ramrod&quot; from the 2002 MTV Video Music Awards.</p>\n<p><a href=\"https://www.youtube.com/watch?v=fn2-b7KiWP4\">www.youtube.com/watch</a></p>\n<p>Presumably he was out promoting <em>The Rising</em>, a sincere collection of 9/11 songs. Nonetheless, I guess he decided it was a good time to educate the kids about their rock and roll heritage.</p>\n",
				"content_text": "Speaking of rowdy Springsteen: found this anachronistic and slightly surprising performance of “Ramrod\" from the 2002 MTV Video Music Awards.\n\n[www.youtube.com/watch](https://www.youtube.com/watch?v=fn2-b7KiWP4)\n\nPresumably he was out promoting _The Rising_, a sincere collection of 9/11 songs. Nonetheless, I guess he decided it was a good time to educate the kids about their rock and roll heritage.\n",
				"date_published": "2018-11-11T14:51:09-07:00",
				"url": "https://therealadam.com/2018/11/11/its-never-a.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/11/maximum-theoretical-sincerity.html",
				"title": "\"Maximum theoretical sincerity\"",
				"content_html": "<p>Pitchfork: <a href=\"https://pitchfork.com/reviews/albums/talking-heads-remain-in-light/?mbid=social_twitter\">Talking Head: <em>Remain in Light</em></a></p>\n<blockquote>\n<p>By 1980, the conflict in music between what was thought and what was felt was in full cry. As disco continued to monopolize music you could dance to, rock reached a point of maximum theoretical sincerity. Pink Floyd’s The Wall, possibly the least ironic recording of all time, was the No. 1 album in America for 15 weeks. It was finally unseated by Bob Seger’s Against the Wind, which was knocked out of the top spot by Billy Joel’s Glass Houses. Ostensibly, these were works of deep sentiment. To a generation of punks, though, they were rock at its most bloodless and calculating.\n&hellip;\nThe central insight of Talking Heads—what made them not just weird but exciting and relevant—was that their art-house affectation felt more sincere than a lot of American culture.</p>\n</blockquote>\n<p>Completely unrelated but somewhat adjacent: the unseen magic trick Bruce Springsteen pulls off, for me, is to thread the needle between sincere storytelling, grandiose maximalism, and bar band raucousness.</p>\n<blockquote>\n<p>Without Afrobeat, though, there is no Remain in Light. The central role of West-African polyrhythms in the album’s sound draws attention to a curious aspect of its longevity. Could a group of white musicians playing Afrobeat be taken sincerely in 2018? Virtually every genre of American music, including punk and especially rock, is taken from black forms. Afrobeat is not African-American, though; it’s straight-up African. The 21st-century sensibility finds something problematic in a band of white art-school types playing West African music. Earlier this year, the Beninese musician Angelique Kidjo released her own version of Remain in Light, which NPR described as “an authentic Afrobeat record” compared to the original. Given how closely Kidjo followed the Talking Heads’ arrangements, this description raises questions about what we mean when we say “authentic.”</p>\n</blockquote>\n<p>This is a great review and a pretty good read.</p>\n",
				"content_text": "Pitchfork: [Talking Head: _Remain in Light_](https://pitchfork.com/reviews/albums/talking-heads-remain-in-light/?mbid=social_twitter)\n\n> By 1980, the conflict in music between what was thought and what was felt was in full cry. As disco continued to monopolize music you could dance to, rock reached a point of maximum theoretical sincerity. Pink Floyd’s The Wall, possibly the least ironic recording of all time, was the No. 1 album in America for 15 weeks. It was finally unseated by Bob Seger’s Against the Wind, which was knocked out of the top spot by Billy Joel’s Glass Houses. Ostensibly, these were works of deep sentiment. To a generation of punks, though, they were rock at its most bloodless and calculating.\n> ...\n> The central insight of Talking Heads—what made them not just weird but exciting and relevant—was that their art-house affectation felt more sincere than a lot of American culture.\n\nCompletely unrelated but somewhat adjacent: the unseen magic trick Bruce Springsteen pulls off, for me, is to thread the needle between sincere storytelling, grandiose maximalism, and bar band raucousness.\n\n> Without Afrobeat, though, there is no Remain in Light. The central role of West-African polyrhythms in the album’s sound draws attention to a curious aspect of its longevity. Could a group of white musicians playing Afrobeat be taken sincerely in 2018? Virtually every genre of American music, including punk and especially rock, is taken from black forms. Afrobeat is not African-American, though; it’s straight-up African. The 21st-century sensibility finds something problematic in a band of white art-school types playing West African music. Earlier this year, the Beninese musician Angelique Kidjo released her own version of Remain in Light, which NPR described as “an authentic Afrobeat record” compared to the original. Given how closely Kidjo followed the Talking Heads’ arrangements, this description raises questions about what we mean when we say “authentic.”\n\nThis is a great review and a pretty good read.\n",
				"date_published": "2018-11-11T14:24:50-07:00",
				"url": "https://therealadam.com/2018/11/11/maximum-theoretical-sincerity.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/11/elvis-costello-is.html",
				
				"content_html": "<p>Elvis Costello is a jewel unstuck in time, simultaneously timeless and of his time. His most recent album, no exception. <a href=\"https://pitchfork.com/reviews/albums/elvis-costello-the-imposters-look-now/\">pitchfork.com/reviews/a&hellip;</a></p>\n",
				"content_text": "Elvis Costello is a jewel unstuck in time, simultaneously timeless and of his time. His most recent album, no exception. [pitchfork.com/reviews/a...](https://pitchfork.com/reviews/albums/elvis-costello-the-imposters-look-now/)\n",
				"date_published": "2018-11-11T14:02:37-07:00",
				"url": "https://therealadam.com/2018/11/11/elvis-costello-is.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/10/wherein-writing-the.html",
				"title": "Wherein writing the dang memo is the easy part",
				"content_html": "<p>Seth Godin, <a href=\"https://feeds.feedblitz.com/~/579463060/0/sethsblog~Get-your-memo-read/\">Get your memo read</a>:</p>\n<blockquote>\n<p>The unanticipated but important memo has a difficult road. It will likely be ignored.</p>\n</blockquote>\n<p>I find this is one of the unexpected challenges of taking on engineering leadership responsibilities. First off, you have to do all the writing things right: use a clear and concise subject, say all the important things up front (probably in bullets!), and develop the important details in thoughtful prose. Even if you nail it there, some people just won&rsquo;t read, retain, and/or care about the information you have conveyed to them.</p>\n<p>Hence: Always Be Repeating Yourself. Always.</p>\n",
				"content_text": "Seth Godin, [Get your memo read](https://feeds.feedblitz.com/~/579463060/0/sethsblog~Get-your-memo-read/):\n\n> The unanticipated but important memo has a difficult road. It will likely be ignored.\n\nI find this is one of the unexpected challenges of taking on engineering leadership responsibilities. First off, you have to do all the writing things right: use a clear and concise subject, say all the important things up front (probably in bullets!), and develop the important details in thoughtful prose. Even if you nail it there, some people just won't read, retain, and/or care about the information you have conveyed to them.\n\nHence: Always Be Repeating Yourself. Always.\n",
				"date_published": "2018-11-10T13:30:18-07:00",
				"url": "https://therealadam.com/2018/11/10/wherein-writing-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/11/10/now-i-am.html",
				
				"content_html": "<p>Now <em>I am the one</em> who microblogs.</p>\n",
				"content_text": "Now _I am the one_ who microblogs.\n",
				"date_published": "2018-11-10T08:32:11-07:00",
				"url": "https://therealadam.com/2018/11/10/now-i-am.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/08/06/context-buckets.html",
				"title": "Context buckets",
				"content_html": "<p>Sometimes I ask myself: why did past Adam think this text/link/picture/etc. was important. Increasingly the answer is: put it in a bucket that makes the answer self-explanatory. For example: I have tags in <!-- raw HTML omitted -->Bear<!-- raw HTML omitted --> for music, recommendations, notes on The System of the World, Technology, software, Disney, and even for random tweets that I will sometime want to share with someone as proof that I&rsquo;m not just making this up.</p>\n<p><a href=\"https://twitter.com/rands/status/1026120337522454528\">twitter.com/rands/sta&hellip;</a></p>\n<p>95% endorsed! The exception: I am extremely picky about the size and aspect ratio of windows in relation to how the particular application is designed. I can neither walk into Mordor or simply resize an application to use exactly 50% of my screen.</p>\n",
				"content_text": "Sometimes I ask myself: why did past Adam think this text/link/picture/etc. was important. Increasingly the answer is: put it in a bucket that makes the answer self-explanatory. For example: I have tags in <a href=\"http://www.bear-writer.com\">Bear</a> for music, recommendations, notes on The System of the World, Technology, software, Disney, and even for random tweets that I will sometime want to share with someone as proof that I'm not just making this up.\n\n[twitter.com/rands/sta...](https://twitter.com/rands/status/1026120337522454528)\n\n95% endorsed! The exception: I am extremely picky about the size and aspect ratio of windows in relation to how the particular application is designed. I can neither walk into Mordor or simply resize an application to use exactly 50% of my screen.\n",
				"date_published": "2018-08-06T15:02:07-07:00",
				"url": "https://therealadam.com/2018/08/06/context-buckets.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/08/05/pick-prolific-quantity.html",
				"title": "Pick prolific: quantity, quality, and Chidi's Dilemma",
				"content_html": "<p><!-- raw HTML omitted -->Prolific is better than perfect<!-- raw HTML omitted -->, Jared Dees:</p>\n<!-- raw HTML omitted -->\n<p>I’m fond of restating this in terms of the quantity/quality trade-off. It’s easy for me to fall into the temptation of creating one essay/pull request/turn-of-phrase that exhibits all of the quality that should exemplify my work. But it’s <!-- raw HTML omitted -->better<!-- raw HTML omitted --> for me to create a bunch of things that exhibit <!-- raw HTML omitted -->some<!-- raw HTML omitted --> of that quality so I can better learn what is essential to the quality and what is illusory.</p>\n<p>To borrow Dees’ model: if I write fifty-two blog posts in a year, several of them will be Not That Great. But after the first dozen or so, I’ll start to figure out what’s important in a story and what I thought was important but doesn’t really matter much. This is quantity <!-- raw HTML omitted -->creating<!-- raw HTML omitted --> quality; not a tradeoff!</p>\n<p>The flip side is <!-- raw HTML omitted -->Chidi’s dilemma<!-- raw HTML omitted -->: spending your whole life trying to write every single thing about your area of expertise, with nuance, and producing something so impenetrable that not even a demigod can make sense of it.</p>\n<p>In short: quantity doesn’t reduce quality. <!-- raw HTML omitted -->Quantity is the feedback loop that creates Quality<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://jareddees.com/prolific-better-than-perfect/\">Prolific is better than perfect</a>, Jared Dees:\n\n<blockquote>“Perfect” is a mirage that no one knows how to reach.</blockquote>\n\nI’m fond of restating this in terms of the quantity/quality trade-off. It’s easy for me to fall into the temptation of creating one essay/pull request/turn-of-phrase that exhibits all of the quality that should exemplify my work. But it’s <em>better</em> for me to create a bunch of things that exhibit <em>some</em> of that quality so I can better learn what is essential to the quality and what is illusory.\n\nTo borrow Dees’ model: if I write fifty-two blog posts in a year, several of them will be Not That Great. But after the first dozen or so, I’ll start to figure out what’s important in a story and what I thought was important but doesn’t really matter much. This is quantity <em>creating</em> quality; not a tradeoff!\n\nThe flip side is <a href=\"https://www.youtube.com/watch?v=g-NBWwmtwy8\">Chidi’s dilemma</a>: spending your whole life trying to write every single thing about your area of expertise, with nuance, and producing something so impenetrable that not even a demigod can make sense of it.\n\nIn short: quantity doesn’t reduce quality. <strong>Quantity is the feedback loop that creates Quality</strong>.\n",
				"date_published": "2018-08-05T16:52:34-07:00",
				"url": "https://therealadam.com/2018/08/05/pick-prolific-quantity.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/30/we-are-now.html",
				
				"content_html": "<p>We are now a two robot vacuum family! One for the cats upstairs, one for the dogs downstairs. Courtney loves them both.</p>\n<p>The cats and dogs are way smarter than the robots, which just bump around like embodiments of the old Windows logo screensaver. Our floors have never been slightly cleaner and our power strips never in greater threat.</p>\n<p>I highly recommend it if you have the means.</p>\n",
				"content_text": "We are now a two robot vacuum family! One for the cats upstairs, one for the dogs downstairs. Courtney loves them both.\n\nThe cats and dogs are way smarter than the robots, which just bump around like embodiments of the old Windows logo screensaver. Our floors have never been slightly cleaner and our power strips never in greater threat.\n\nI highly recommend it if you have the means.\n",
				"date_published": "2018-07-30T11:10:32-07:00",
				"url": "https://therealadam.com/2018/07/30/we-are-now.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/29/it-is-i.html",
				
				"content_html": "<p>It is I, who dwells at coffee shops, who sometimes reads paper books instead of a glass display, who prefers Apple Pay over card swiping when possible.<!-- raw HTML omitted --></p>\n",
				"content_text": "It is I, who dwells at coffee shops, who sometimes reads paper books instead of a glass display, who prefers Apple Pay over card swiping when possible.<img src=\"uploads/2024/d55aae0d28.jpg\" class=\"wp-image-4749 alignright\" height=\"4032\" alt=\"Greater Good Coffee Roasters interior\" width=\"3024\">\n",
				"date_published": "2018-07-29T09:46:45-07:00",
				"url": "https://therealadam.com/2018/07/29/it-is-i.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/22/how-i-focus.html",
				"title": "How I focus more and worry less about the internet",
				"content_html": "<p>As a long time Rands fan, I highly recommend you partake of the <!-- raw HTML omitted -->Rands Information Practices<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Rands Slack Protocol<!-- raw HTML omitted -->. Allow me to add some of my favorite tactics.</p>\n<p>Get your browser tab situation under control; I get itchy when I have more than several tabs open! (But if you’re the sort who never has less than a few dozen tabs open, I still like you.) Move your most important and favorite blogs and websites into a feedreader. I like <!-- raw HTML omitted -->Newsblur<!-- raw HTML omitted --> plus <!-- raw HTML omitted -->Reeder macOS<!-- raw HTML omitted -->/<!-- raw HTML omitted -->Reeder iOS<!-- raw HTML omitted -->. You can even put Twitters and email subscriptions into Newsblur, which is some next level distraction management.</p>\n<p>Learn the keyboard shortcuts. All of them. Dazzle people with your ability to dance across the keyboard and make computers do things. Bonus tip: picking up a mechanical keyboard will make you sound <!-- raw HTML omitted -->extra amazing<!-- raw HTML omitted --> but slightly annoy the people who sit close to you.</p>\n<p>Customize your system to remove distractions, allow you to focus, reduce drag, and move faster. If other people sit down at your computer and can’t operate it, that’s okay. <!-- raw HTML omitted -->But<!-- raw HTML omitted -->, don’t customize it too much. I want to get stuff done, not produce the ultimate hot rod computer for hot rodding computers.</p>\n<p>Speaking of hot rodding, do not go too deep on productivity systems. I need a notebook-like app to think in and write stuff down. I need some kind of souped up todo list. Not much else. They are outboard brains, augmenting my ability to function as an adult and as someone thinking about and/or making things. Its tempting to read about everyone else’s Extremely Awesome Productivity Setup, but they’re doing different stuff and have different responsibilities; it’s entertainment, not education.</p>\n<p>I cannot read the entire internet. Get really good at guessing whether something that comes across your desk is going to better your understanding of the world. Skip all the clickbait and tribal rage stuff. I look for stuff that provides insight into how we got here or what the future might look like.</p>\n<p>That said, don’t accidentally filter your dear friends out in the process of managing the information onslaught. Put them in a special list or feed folder and look at it daily. Engage with them like its 2008 and the internet is still a promising thing that connects us to our friends.</p>\n<p>Finally, I highly recommend you follow Rands’ best bit of advice, which is curiously tucked into the last footnote: replace screens by your bed (as many as possible, at least) with a book.</p>\n",
				"content_text": "As a long time Rands fan, I highly recommend you partake of the <a href=\"http://randsinrepose.com/archives/rands-information-practices/\">Rands Information Practices</a> and <a href=\"http://randsinrepose.com/archives/how-i-slack/\">Rands Slack Protocol</a>. Allow me to add some of my favorite tactics.\n\nGet your browser tab situation under control; I get itchy when I have more than several tabs open! (But if you’re the sort who never has less than a few dozen tabs open, I still like you.) Move your most important and favorite blogs and websites into a feedreader. I like <a href=\"https://www.newsblur.com\">Newsblur</a> plus <a href=\"#\">Reeder macOS</a>/<a href=\"http://reederapp.com/ios/\">Reeder iOS</a>. You can even put Twitters and email subscriptions into Newsblur, which is some next level distraction management.\n\nLearn the keyboard shortcuts. All of them. Dazzle people with your ability to dance across the keyboard and make computers do things. Bonus tip: picking up a mechanical keyboard will make you sound <em>extra amazing</em> but slightly annoy the people who sit close to you.\n\nCustomize your system to remove distractions, allow you to focus, reduce drag, and move faster. If other people sit down at your computer and can’t operate it, that’s okay. <em>But</em>, don’t customize it too much. I want to get stuff done, not produce the ultimate hot rod computer for hot rodding computers.\n\nSpeaking of hot rodding, do not go too deep on productivity systems. I need a notebook-like app to think in and write stuff down. I need some kind of souped up todo list. Not much else. They are outboard brains, augmenting my ability to function as an adult and as someone thinking about and/or making things. Its tempting to read about everyone else’s Extremely Awesome Productivity Setup, but they’re doing different stuff and have different responsibilities; it’s entertainment, not education.\n\nI cannot read the entire internet. Get really good at guessing whether something that comes across your desk is going to better your understanding of the world. Skip all the clickbait and tribal rage stuff. I look for stuff that provides insight into how we got here or what the future might look like.\n\nThat said, don’t accidentally filter your dear friends out in the process of managing the information onslaught. Put them in a special list or feed folder and look at it daily. Engage with them like its 2008 and the internet is still a promising thing that connects us to our friends.\n\nFinally, I highly recommend you follow Rands’ best bit of advice, which is curiously tucked into the last footnote: replace screens by your bed (as many as possible, at least) with a book.\n",
				"date_published": "2018-07-22T08:38:07-07:00",
				"url": "https://therealadam.com/2018/07/22/how-i-focus.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/17/on-decision-tables.html",
				"title": "On decision tables and conditionals",
				"content_html": "<p>Over the years, I’ve heard a few times about something like <!-- raw HTML omitted -->Decision Tables<!-- raw HTML omitted --> (Hillel Wayne):</p>\n<!-- raw HTML omitted -->\n<p>It was usually some variation of teams using something like a truth table to define the logic of their application without using a mess of conditionals. It also turned out that there was a compiler optimization where these tables could be laid out such that figuring out which behavior was appropriate to all the inputs was faster than conditionals would have been.</p>\n<p>Wayne doesn’t mention anything like this. But, there is mention of using decision tables with an RSpec macro to verify code behavior with less boilerplate assertion logic. So that’s neat!</p>\n<p>If I had to sum up my style of coding, I’d say probably a third of it is about reducing the time I spend reading or writing conditional code. That’s where most of the bugs and frustration are. Pushing them down into the compiler, runtime, or database is a fun exercise too.</p>\n",
				"content_text": "Over the years, I’ve heard a few times about something like <a href=\"https://www.hillelwayne.com/post/decision-tables/\">Decision Tables</a> (Hillel Wayne):\n\n<blockquote>\n  A decision table is a means of concisely representing branching and conditional computations. In the most basic form, you have some columns that represent the “inputs” as booleans and some columns that represent outputs and effects.\n</blockquote>\n\nIt was usually some variation of teams using something like a truth table to define the logic of their application without using a mess of conditionals. It also turned out that there was a compiler optimization where these tables could be laid out such that figuring out which behavior was appropriate to all the inputs was faster than conditionals would have been.\n\nWayne doesn’t mention anything like this. But, there is mention of using decision tables with an RSpec macro to verify code behavior with less boilerplate assertion logic. So that’s neat!\n\nIf I had to sum up my style of coding, I’d say probably a third of it is about reducing the time I spend reading or writing conditional code. That’s where most of the bugs and frustration are. Pushing them down into the compiler, runtime, or database is a fun exercise too.\n",
				"date_published": "2018-07-17T05:37:18-07:00",
				"url": "https://therealadam.com/2018/07/17/on-decision-tables.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/15/my-favorite-question.html",
				"title": "My favorite question is “why?”",
				"content_html": "<p>At some point in elementary or junior high school, we were taught all our essays should answer one of five questions: who, what, where, why, or how. These were, at the time, “the five W’s” of writing.</p>\n<p>Why is my favorite because it provides context. Asking why usually gets me to the bottom of the situation. It often encapsulates the who/what/where/how/when. It’s the most open ended, which is probably the best part. Asking why almost always makes the next most important question obvious.</p>\n<p>I still like the other ones too. When often yields interesting histories or chronologies. Who can lead to a nice bit of biographical or character background. How is great when I care most about progress over deep context. Where can give me a little bit of backstory about why a certain location or geography is important.</p>\n<p>Asking why wraps up all of those. Why are shipping containers a standard size? Who decided it should be that way. How did that drastically change global shipping? When did this occur and what changes can we observe from it?</p>\n<p>One word, one question. So much to learn!</p>\n",
				"content_text": "At some point in elementary or junior high school, we were taught all our essays should answer one of five questions: who, what, where, why, or how. These were, at the time, “the five W’s” of writing.\n\nWhy is my favorite because it provides context. Asking why usually gets me to the bottom of the situation. It often encapsulates the who/what/where/how/when. It’s the most open ended, which is probably the best part. Asking why almost always makes the next most important question obvious.\n\nI still like the other ones too. When often yields interesting histories or chronologies. Who can lead to a nice bit of biographical or character background. How is great when I care most about progress over deep context. Where can give me a little bit of backstory about why a certain location or geography is important.\n\nAsking why wraps up all of those. Why are shipping containers a standard size? Who decided it should be that way. How did that drastically change global shipping? When did this occur and what changes can we observe from it?\n\nOne word, one question. So much to learn!\n",
				"date_published": "2018-07-15T13:22:08-07:00",
				"url": "https://therealadam.com/2018/07/15/my-favorite-question.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/07/06/the-systemic-sublime.html",
				"title": "The systemic sublime makes our world more legible",
				"content_html": "<p>My new favorite category on Kottke.org is the <!-- raw HTML omitted -->systemic sublime<!-- raw HTML omitted -->, wherein our networked, often inscrutable world is made more legible. The connections between ideas and and their instantiations are not always obvious. The history, and often the path dependence, of how we got here make it a little easier to understand our world.</p>\n<p>Other fine purveyors of system sublime include <!-- raw HTML omitted -->Alexis Madrigal<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Matt Webb<!-- raw HTML omitted -->, <!-- raw HTML omitted -->T<!-- raw HTML omitted --><!-- raw HTML omitted -->o<!-- raw HTML omitted --><!-- raw HTML omitted -->m Armitage<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Ribbonfarm<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Steven Johnson<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->Michael Lewis<!-- raw HTML omitted -->. My favorite thing about these authors is, they are answering “why?” by connecting the dots between “how”, “who”, and “what”. It’s my favorite kind of thinking!</p>\n",
				"content_text": "My new favorite category on Kottke.org is the <a href=\"https://kottke.org/tag/systemic%20sublime\">systemic sublime</a>, wherein our networked, often inscrutable world is made more legible. The connections between ideas and and their instantiations are not always obvious. The history, and often the path dependence, of how we got here make it a little easier to understand our world.\n\nOther fine purveyors of system sublime include <a href=\"https://www.google.com/url?q=https://www.theatlantic.com/author/alexis-madrigal/\">Alexis Madrigal</a>, <a href=\"http://interconnected.org\">Matt Webb</a>, <a href=\"https://infovore.org\">T</a><a href=\"https://infovore.org\">o</a><a href=\"https://infovore.org\">m Armitage</a>, <a href=\"https://www.ribbonfarm.com\">Ribbonfarm</a>, <a href=\"https://stevenberlinjohnson.com\">Steven Johnson</a>, and <a href=\"http://michaellewiswrites.com/#top\">Michael Lewis</a>. My favorite thing about these authors is, they are answering “why?” by connecting the dots between “how”, “who”, and “what”. It’s my favorite kind of thinking!\n",
				"date_published": "2018-07-06T10:10:34-07:00",
				"url": "https://therealadam.com/2018/07/06/the-systemic-sublime.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/04/22/advocacy-empathy-speaking.html",
				
				"content_html": "<p><!-- raw HTML omitted -->Advocacy = empathy + speaking to someone else’s conceptual framework.<!-- raw HTML omitted --> When I&rsquo;m trying to convey an idea from my head to someone else&rsquo;s head, the biggest challenge is converting from my conceptual framework and values to theirs. Hence, <!-- raw HTML omitted -->The words that work<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Rare is the success of advocacy that doesn&rsquo;t involve a lot of empathy, understanding your conversation partner, and letting go of the little details to reach a new local maximum of mutual understanding.</p>\n",
				"content_text": "<strong>Advocacy = empathy + speaking to someone else’s conceptual framework.</strong> When I'm trying to convey an idea from my head to someone else's head, the biggest challenge is converting from my conceptual framework and values to theirs. Hence, <a href=\"http://sethgodin.typepad.com/seths_blog/2018/04/the-words-that-work.html\">The words that work</a>:\n\n<blockquote>For example, one partner in a conversation might use concepts like power and tradition and authority to make a case, while the other might rely on science, statistics or fairness. One person might argue with tons of emotional insight, while someone else might bring up studies and peer reviews.\n\n</blockquote>\n\nRare is the success of advocacy that doesn't involve a lot of empathy, understanding your conversation partner, and letting go of the little details to reach a new local maximum of mutual understanding.\n",
				"date_published": "2018-04-22T13:04:27-07:00",
				"url": "https://therealadam.com/2018/04/22/advocacy-empathy-speaking.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/04/17/its-dangerous-to.html",
				"title": "It's dangerous to go alone, take dotfiles",
				"content_html": "<p>Yesterday I was handed a fresh, nifty new laptop. This is, for me, mildly terrifying. Last time I did a clean operating system install was seven years ago. I&rsquo;ve carried an idiomatic mixtape of dotfiles, macOS preferences, files, and cruft with me on my personal laptop ever since.</p>\n<p>A brand-new, stock laptop is a shock to my highly acclimated and particular system.</p>\n<p>I started contemplating how exactly I could get setup relatively quickly. At the same time, I want to pay down a little bit of automation debt. By the next time I&rsquo;m faced with this situation (when I buy my own computer, if a disk is struck by lightning, etc.) I shouldn&rsquo;t feel so much like a deer in headlights.</p>\n<p>At first I thought I&rsquo;d attempt to transmogrify my <!-- raw HTML omitted -->current lightsaber<!-- raw HTML omitted --> into something like <!-- raw HTML omitted -->Gina Tripani&rsquo;s dotfiles<!-- raw HTML omitted -->. I like how this is structured, and that the initial setup of apps and Unix-y things is bootstrapped by Homebrew. But, then I remembered Thoughtbot&rsquo;s <!-- raw HTML omitted -->laptop<!-- raw HTML omitted --> and <!-- raw HTML omitted -->dotfiles<!-- raw HTML omitted --> and convinced myself this was the way to go.</p>\n<p>Indeed, <!-- raw HTML omitted -->laptop<!-- raw HTML omitted --> helped me cut the Gordian knot of setting up my new machine so I can write code and feel at home on it. I highly recommend it if you have the means.</p>\n<p>New dotfile repo forthcoming!</p>\n",
				"content_text": "Yesterday I was handed a fresh, nifty new laptop. This is, for me, mildly terrifying. Last time I did a clean operating system install was seven years ago. I've carried an idiomatic mixtape of dotfiles, macOS preferences, files, and cruft with me on my personal laptop ever since.\n\nA brand-new, stock laptop is a shock to my highly acclimated and particular system.\n\nI started contemplating how exactly I could get setup relatively quickly. At the same time, I want to pay down a little bit of automation debt. By the next time I'm faced with this situation (when I buy my own computer, if a disk is struck by lightning, etc.) I shouldn't feel so much like a deer in headlights.\n\nAt first I thought I'd attempt to transmogrify my <a href=\"https://github.com/therealadam/dotfiles\">current lightsaber</a> into something like <a href=\"https://github.com/ginatrapani/dotfiles\">Gina Tripani's dotfiles</a>. I like how this is structured, and that the initial setup of apps and Unix-y things is bootstrapped by Homebrew. But, then I remembered Thoughtbot's <a href=\"https://github.com/thoughtbot/laptop\">laptop</a> and <a href=\"https://github.com/thoughtbot/dotfiles\">dotfiles</a> and convinced myself this was the way to go.\n\nIndeed, <code>laptop</code> helped me cut the Gordian knot of setting up my new machine so I can write code and feel at home on it. I highly recommend it if you have the means.\n\nNew dotfile repo forthcoming!\n",
				"date_published": "2018-04-17T18:46:40-07:00",
				"url": "https://therealadam.com/2018/04/17/its-dangerous-to.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/04/15/im-starting-a.html",
				
				"content_html": "<p>I&rsquo;m starting a new job tomorrow. I decided to take a week off in-between jobs, mostly to make a quick trip to Disney Land.</p>\n<p>I hid most social media apps away, stopped paying attention to news, and caught up on reading. I gave myself a 3-day weekend before our trip to decompress, we went to Disney Land for 3 days, and had a 3-day weekend to relax before I start the next thing. I&rsquo;ve done a fair bit of writing, watching movies, tinkering with Ableton, and playing games too. A great vacation sandwiched between two stay-cations, in the lexicon of our times.</p>\n<p>My mind feels like it&rsquo;s had a chance to reset and get back to a neutral state. I&rsquo;m hoping this will help me keep my frame-of-mind looking forward as I start the next job. This was a great decision and I highly recommend you do something <!-- raw HTML omitted -->like<!-- raw HTML omitted --> this (granted, Disney Land isn&rsquo;t everyone&rsquo;s thing) yourself, if you have the means.</p>\n",
				"content_text": "I'm starting a new job tomorrow. I decided to take a week off in-between jobs, mostly to make a quick trip to Disney Land.\n\nI hid most social media apps away, stopped paying attention to news, and caught up on reading. I gave myself a 3-day weekend before our trip to decompress, we went to Disney Land for 3 days, and had a 3-day weekend to relax before I start the next thing. I've done a fair bit of writing, watching movies, tinkering with Ableton, and playing games too. A great vacation sandwiched between two stay-cations, in the lexicon of our times.\n\nMy mind feels like it's had a chance to reset and get back to a neutral state. I'm hoping this will help me keep my frame-of-mind looking forward as I start the next job. This was a great decision and I highly recommend you do something <em>like</em> this (granted, Disney Land isn't everyone's thing) yourself, if you have the means.\n",
				"date_published": "2018-04-15T13:55:49-07:00",
				"url": "https://therealadam.com/2018/04/15/im-starting-a.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2018/04/15/scribbling-through-tensorflowjs.html",
				"title": "Scribbling through TensorFlow.js",
				"content_html": "<p>I&rsquo;ve been trying to wrap my head around machine learning lately. Today I worked through the <!-- raw HTML omitted -->TensorFlow.js tutorial on recognizing handwritten numbers with a neural network<!-- raw HTML omitted -->. Herein, my notes and scribbles.</p>\n<p>[caption id=&ldquo;attachment_4714&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;1537&rdquo;]<!-- raw HTML omitted --> TensorFlow: it&rsquo;s about turning linear algebra into models built of layers built of math[/caption]</p>\n<p>My previous forays into machine learning left me a little frustrated: I could tell there was <!-- raw HTML omitted -->language,<!-- raw HTML omitted --> <!-- raw HTML omitted -->pattern, <!-- raw HTML omitted -->and <!-- raw HTML omitted -->notations<!-- raw HTML omitted --> to this, but I couldn&rsquo;t see them from the novelty of new-to-me words like sigmoids, convolution, and hidden layers. Turns out those are <!-- raw HTML omitted -->part<!-- raw HTML omitted --> of the language.</p>\n<p>But the really handy idioms are encoded in TensorFlow&rsquo;s high-level model-and-layer API. A model encapsulates a chunk of machine learning that can be trained to classify inputs (images, texts, etc.) based on a mess of training data (pre-classified stuff). Every model is built from a network of layers; layers use linear algebra to transform numbers into classifications.</p>\n<p>Once you&rsquo;ve built a model, you feed it a bunch of training data so that it can learn the coefficients and other number-stuff that goes inside the math-y network. You also provide it with an <!-- raw HTML omitted -->optimizer<!-- raw HTML omitted --> and <!-- raw HTML omitted -->loss<!-- raw HTML omitted --> function so that as the model is trained, it can know whether its getting better or worse at classifying data.</p>\n<p>A really cool thing is you run this training process on your computer&rsquo;s GPU. GPUs, like machine learning models, are big networks of fast math-y stuff. Beautiful symmetry! On the other hand, you usually can&rsquo;t fit your training data set into GPU memory, so you end up batching your test data and submitting it to the GPU in loops.</p>\n<p>Once all this runs, you&rsquo;ve got a trained model that can take image inputs (in this case, hand-written digits) and classify them to decimal numbers (0-9). Magic!</p>\n",
				"content_text": "I've been trying to wrap my head around machine learning lately. Today I worked through the <a href=\"https://js.tensorflow.org/tutorials/mnist.html\">TensorFlow.js tutorial on recognizing handwritten numbers with a neural network</a>. Herein, my notes and scribbles.\n\n[caption id=\"attachment_4714\" align=\"alignnone\" width=\"1537\"]<img class=\"alignnone size-full wp-image-4714\" src=\"https://therealadam.com/uploads/2024/080238c7a1.jpg\" alt=\"Hand-written notes on machine learning\" width=\"1537\" height=\"1961\" /> TensorFlow: it's about turning linear algebra into models built of layers built of math[/caption]\n\nMy previous forays into machine learning left me a little frustrated: I could tell there was <em>language,</em> <em>pattern, </em>and <em>notations</em> to this, but I couldn't see them from the novelty of new-to-me words like sigmoids, convolution, and hidden layers. Turns out those are <em>part</em> of the language.\n\nBut the really handy idioms are encoded in TensorFlow's high-level model-and-layer API. A model encapsulates a chunk of machine learning that can be trained to classify inputs (images, texts, etc.) based on a mess of training data (pre-classified stuff). Every model is built from a network of layers; layers use linear algebra to transform numbers into classifications.\n\nOnce you've built a model, you feed it a bunch of training data so that it can learn the coefficients and other number-stuff that goes inside the math-y network. You also provide it with an <em>optimizer</em> and <em>loss</em> function so that as the model is trained, it can know whether its getting better or worse at classifying data.\n\nA really cool thing is you run this training process on your computer's GPU. GPUs, like machine learning models, are big networks of fast math-y stuff. Beautiful symmetry! On the other hand, you usually can't fit your training data set into GPU memory, so you end up batching your test data and submitting it to the GPU in loops.\n\nOnce all this runs, you've got a trained model that can take image inputs (in this case, hand-written digits) and classify them to decimal numbers (0-9). Magic!\n",
				"date_published": "2018-04-15T13:49:52-07:00",
				"url": "https://therealadam.com/2018/04/15/scribbling-through-tensorflowjs.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/23/code-minutiae-october.html",
				"title": "Code minutiae, October 23, 2017",
				"content_html": "<p>For some reason, identifier schemes that are global unique, coordination-free, somewhat humanely-representable, and efficiently indexed by databases are a thing I really like. Universally Unique Lexicographically Sortable Identifier (<!-- raw HTML omitted -->ulid<!-- raw HTML omitted -->, for humans) is one of those things. Implementations available for dozens of languages! They look like this: <!-- raw HTML omitted -->01ARZ3NDEKTSV4RRFFQ69G5FAV<!-- raw HTML omitted -->.</p>\n<p>Paul Ford’s website is <!-- raw HTML omitted -->twenty years old<!-- raw HTML omitted -->. For maybe half that time I’ve been extremely jealous of how well he writes about technology without being dry and technical. When I grow up, I’ll write like that!</p>\n<p><!-- raw HTML omitted -->How Awesome Engineers Ask For Help<!-- raw HTML omitted -->. So much good stuff there, I can’t quote it. There’s something in there for new and experienced engineers alike. In particular: don’t give up, actively participate in the process of getting unstuck, take and share notes, give thanks afterwards.</p>\n<p>The best time to work on your dotfiles is on weekends between high-intensity project pushes at work. No better time to do some lateral thinking and improving of your workflow. Feels good, man.</p>\n",
				"content_text": "For some reason, identifier schemes that are global unique, coordination-free, somewhat humanely-representable, and efficiently indexed by databases are a thing I really like. Universally Unique Lexicographically Sortable Identifier (<a href=\"https://github.com/alizain/ulid\">ulid</a>, for humans) is one of those things. Implementations available for dozens of languages! They look like this: <code>01ARZ3NDEKTSV4RRFFQ69G5FAV</code>.\n\nPaul Ford’s website is <a href=\"http://www.ftrain.com/20.html\">twenty years old</a>. For maybe half that time I’ve been extremely jealous of how well he writes about technology without being dry and technical. When I grow up, I’ll write like that!\n\n<a href=\"https://hackernoon.com/how-awesome-engineers-ask-for-help-93bcb2c7dbb7\">How Awesome Engineers Ask For Help</a>. So much good stuff there, I can’t quote it. There’s something in there for new and experienced engineers alike. In particular: don’t give up, actively participate in the process of getting unstuck, take and share notes, give thanks afterwards.\n\nThe best time to work on your dotfiles is on weekends between high-intensity project pushes at work. No better time to do some lateral thinking and improving of your workflow. Feels good, man.\n",
				"date_published": "2017-10-23T08:38:34-07:00",
				"url": "https://therealadam.com/2017/10/23/code-minutiae-october.html",
				"tags": ["Uncategorized","Build","dotfiles"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/19/you-must-be.html",
				"title": "You must be this tall to ride the services",
				"content_html": "<p>If I were trying to convince myself to extract a (micro)service, today, I’d do it like this. First I&rsquo;d have a conversation with myself:</p>\n<!-- raw HTML omitted -->\n<p>I would reflect upon how most of the required acumen is operational and wonder if I&rsquo;m trying to solve a design problem with operational complexity. If I still thought that operational complexity was worthwhile, I&rsquo;d then reflect upon how close the code in question was to the necessary design. If it wasn&rsquo;t, I would again kick the can down the road; if I can&rsquo;t refactor the code when it&rsquo;s objects and methods, there&rsquo;s little hope I can refactor it once its spread across two codebases and interacting via network calls as API endpoints, clients, data formats, etc.</p>\n<p>If, upon all that reflection, I was sure in my heart that I was ready to extract a service, it&rsquo;d go something like this:</p>\n<!-- raw HTML omitted -->\n<p>In short, I still don&rsquo;t think service extraction is as awesome as it sounds on paper. But, if you can get to the point of making a Modular Monolith, and if you can level up your operations to deal with the demands of multiple services, you might successfully pull off (micro)services.</p>\n",
				"content_text": "If I were trying to convince myself to extract a (micro)service, today, I’d do it like this. First I'd have a conversation with myself:\n\n<ul>\n    <li>you are making tactical changes slightly easier at the expense of making strategic changes quite hard; is that really the trade-off you're after?</li>\n    <li>you must have the operational acumen to provision and deploy new services in less than a week</li>\n    <li>you must have the operational acumen to instrument, monitor, and debug how your applications interact with each other over unreliable datacenter networks</li>\n    <li>you must have the design and refactoring acumen to patiently encapsulate the service you want to build <em>inside</em> your current application until you get the boundaries <em>just right</em> and only then does it make sense to start thinking about pulling a service out</li>\n</ul>\n\nI would reflect upon how most of the required acumen is operational and wonder if I'm trying to solve a design problem with operational complexity. If I still thought that operational complexity was worthwhile, I'd then reflect upon how close the code in question was to the necessary design. If it wasn't, I would again kick the can down the road; if I can't refactor the code when it's objects and methods, there's little hope I can refactor it once its spread across two codebases and interacting via network calls as API endpoints, clients, data formats, etc.\n\nIf, upon all that reflection, I was sure in my heart that I was ready to extract a service, it'd go something like this:\n\n<ul>\n    <li>try to encapsulate the service in question inside the current app</li>\n    <li>spike out an internal API just for that service; this API will become the <em>client</em> contract</li>\n    <li>wrap an HTTP API around the encapsulation</li>\n    <li>make sure I have an ops buddy who can help me at every provisioning and deployment step, especially if this sort of thing is new and a monolith is the status quo</li>\n    <li>test the monolith calling itself with the new API</li>\n    <li>trial deploy the service and make some cross-cutting changes (client and server) to make sure I know the change process</li>\n    <li>start transferring traffic from the monolith to the service</li>\n</ul>\n\nIn short, I still don't think service extraction is as awesome as it sounds on paper. But, if you can get to the point of making a Modular Monolith, and if you can level up your operations to deal with the demands of multiple services, you might successfully pull off (micro)services.\n",
				"date_published": "2017-10-19T09:15:40-07:00",
				"url": "https://therealadam.com/2017/10/19/you-must-be.html",
				"tags": ["Uncategorized","Build","monoliths","services"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/18/how-methodical-and.html",
				"title": "How methodical and quality might keep up with fast and loose",
				"content_html": "<p>I’ve previously thought that a developer moving fast and coding loose will always outpace a developer moving methodically and intentionally. Cynically stated, someone making a mess will always make more mess than someone else can clean up or produce offsetting code of The Quality.</p>\n<p>I’ve recently had luck changing my mindset to “make The Quality by making the quantity”. That is, I’m trying to make <!-- raw HTML omitted -->more<!-- raw HTML omitted --> stuff that express <!-- raw HTML omitted -->some<!-- raw HTML omitted --> aspect of The Quality I’m going for. Notably, I’m not worrying too much if I have An Eternal Quality or A Complete Expression of the Quality. I’m a lot less perfectionist and doing more experiments with my own style to match the code around me.</p>\n<p>I now suspect that given the first two developers, its possible to make noticeably more Quality by putting little bits of thoughtfulness throughout the code. Unless the person moving fast and loose is actively undermining the quality of the system, they will notice the Quality practices or idioms and adopt them. Code review is the first line of defense to pump the brakes and inform someone moving a little too fast/loose that there’s a Quality way to do what they’re after without slowing down too much.</p>\n<p>Sometimes, I’m an optimist.</p>\n",
				"content_text": "I’ve previously thought that a developer moving fast and coding loose will always outpace a developer moving methodically and intentionally. Cynically stated, someone making a mess will always make more mess than someone else can clean up or produce offsetting code of The Quality.\n\nI’ve recently had luck changing my mindset to “make The Quality by making the quantity”. That is, I’m trying to make <em>more</em> stuff that express <em>some</em> aspect of The Quality I’m going for. Notably, I’m not worrying too much if I have An Eternal Quality or A Complete Expression of the Quality. I’m a lot less perfectionist and doing more experiments with my own style to match the code around me.\n\nI now suspect that given the first two developers, its possible to make noticeably more Quality by putting little bits of thoughtfulness throughout the code. Unless the person moving fast and loose is actively undermining the quality of the system, they will notice the Quality practices or idioms and adopt them. Code review is the first line of defense to pump the brakes and inform someone moving a little too fast/loose that there’s a Quality way to do what they’re after without slowing down too much.\n\nSometimes, I’m an optimist.\n",
				"date_published": "2017-10-18T08:57:00-07:00",
				"url": "https://therealadam.com/2017/10/18/how-methodical-and.html",
				"tags": ["Uncategorized","Build","Code","the_quality"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/17/a-strange-world.html",
				"title": "A strange world of mathematical and computational complexity",
				"content_html": "<p>Over the past few weekends, I’ve been reading on two topics which are way out of my technical confidence. I’ve spent the majority of my software development career building web applications and neither of these are very coincident with web apps right now:</p>\n<!-- raw HTML omitted -->\n<p>With blockchain stuff, there are very interesting fundamentals underlying a sprawling system of hype and information asymmetry. Every time I go in, it’s “shields up!”, time to defend myself from people trading reputation for short-term speculation or actively spreading inaccurate information. In other words, here comes the snake oil salesmen!</p>\n<p>That said, there are cool ideas in there. <!-- raw HTML omitted -->Solidity<!-- raw HTML omitted --> is a language built into <!-- raw HTML omitted -->Ethereum<!-- raw HTML omitted --> for writing programs that run alongside the blockchain. You wouldn’t want to build a normal application this way, but if you want some degree of confidence in a system, like voting or accounting, a system inside Ethereum and Solidity might make sense. Even more strange, to a web developer, you have to <!-- raw HTML omitted -->pay<!-- raw HTML omitted --> for the compute time that program requires in Ethereum itself. Strange and intriguing!</p>\n<p>By comparison, machine learning is equally hyped but has little speculation. They both involve about the same level of mathematical and computational complexity. Which is probably how I’ve managed to avoid both so far: I’m far better at social reasoning, which is a big deal in web applications, than I am at math. But I’m trying to change that!</p>\n<p>I found <!-- raw HTML omitted -->deeplearning.js<!-- raw HTML omitted --> and it seems like a nice gateway into the domain of building neural networks for machine learning, computer vision, etc. And it utilizes your GPUs, if present, which is pretty neat because GPUs are strange little computers we seem to have increasingly more of as the days go on.</p>\n<p>No idea where this line of thinking is going. All I know is it&rsquo;s more fun than reading about yet another client or server side framework. ;)</p>\n",
				"content_text": "Over the past few weekends, I’ve been reading on two topics which are way out of my technical confidence. I’ve spent the majority of my software development career building web applications and neither of these are very coincident with web apps right now:\n\n<ul>\n<li>blockchains, cryptocurrencies, and autonomous contracts</li>\n<li>machine learning, neural networks, general purpose GPUs, deep learning</li>\n</ul>\n\nWith blockchain stuff, there are very interesting fundamentals underlying a sprawling system of hype and information asymmetry. Every time I go in, it’s “shields up!”, time to defend myself from people trading reputation for short-term speculation or actively spreading inaccurate information. In other words, here comes the snake oil salesmen!\n\nThat said, there are cool ideas in there. <a href=\"https://solidity.readthedocs.io/en/develop/\">Solidity</a> is a language built into <a href=\"https://ethereum.org/\">Ethereum</a> for writing programs that run alongside the blockchain. You wouldn’t want to build a normal application this way, but if you want some degree of confidence in a system, like voting or accounting, a system inside Ethereum and Solidity might make sense. Even more strange, to a web developer, you have to <em>pay</em> for the compute time that program requires in Ethereum itself. Strange and intriguing!\n\nBy comparison, machine learning is equally hyped but has little speculation. They both involve about the same level of mathematical and computational complexity. Which is probably how I’ve managed to avoid both so far: I’m far better at social reasoning, which is a big deal in web applications, than I am at math. But I’m trying to change that!\n\nI found <a href=\"https://deeplearnjs.org\">deeplearning.js</a> and it seems like a nice gateway into the domain of building neural networks for machine learning, computer vision, etc. And it utilizes your GPUs, if present, which is pretty neat because GPUs are strange little computers we seem to have increasingly more of as the days go on.\n\nNo idea where this line of thinking is going. All I know is it's more fun than reading about yet another client or server side framework. ;)\n",
				"date_published": "2017-10-17T09:42:29-07:00",
				"url": "https://therealadam.com/2017/10/17/a-strange-world.html",
				"tags": ["Uncategorized","machine_learning"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/16/just-keep-writing.html",
				"title": "Just keep writing, October 16, 2017",
				"content_html": "<p>I watched pal <!-- raw HTML omitted -->Drew Yeaton<!-- raw HTML omitted --> work in Ableton briefly and it was pretty incredible. He laid down a keyboard and drums beat, fixed up all the off-beat stuff, and proceeded to tinker with his myriad of synthesizers and effects rack with speed. I had no idea what his hands were doing as he moved from MIDI keyboards, mouse, and computer keyboard like a blur. Seems pretty cool!</p>\n<p>I talked myself into and out of porting this website to Jekyll three times over the past week. Hence, the writing dropped off, which is silly because I just blogged about not tinkering with blog tools in the last month. WordPress.com doesn’t quite do the things I want it to and its syntax highlighting is keeping the dream of the nineties alive. I’m writing these short form bits in lieu of a sidebar thing for now. No idea how I’ll make do with the code highlighting.</p>\n<p><!-- raw HTML omitted -->The Good Place<!-- raw HTML omitted --> is an amazing show. Ted Danson, Kristen Bell, and the rest of the cast are fantastic. There is an amazing-for-a-comedy twist. Do not read the internet until you watch the first season of this show. It’s just started season two, get on board now!</p>\n",
				"content_text": "I watched pal <a href=\"https://twitter.com/xeeton\">Drew Yeaton</a> work in Ableton briefly and it was pretty incredible. He laid down a keyboard and drums beat, fixed up all the off-beat stuff, and proceeded to tinker with his myriad of synthesizers and effects rack with speed. I had no idea what his hands were doing as he moved from MIDI keyboards, mouse, and computer keyboard like a blur. Seems pretty cool!\n\nI talked myself into and out of porting this website to Jekyll three times over the past week. Hence, the writing dropped off, which is silly because I just blogged about not tinkering with blog tools in the last month. WordPress.com doesn’t quite do the things I want it to and its syntax highlighting is keeping the dream of the nineties alive. I’m writing these short form bits in lieu of a sidebar thing for now. No idea how I’ll make do with the code highlighting.\n\n<em>The Good Place</em> is an amazing show. Ted Danson, Kristen Bell, and the rest of the cast are fantastic. There is an amazing-for-a-comedy twist. Do not read the internet until you watch the first season of this show. It’s just started season two, get on board now!\n",
				"date_published": "2017-10-16T16:56:27-07:00",
				"url": "https://therealadam.com/2017/10/16/just-keep-writing.html",
				"tags": ["Uncategorized","Music","Curated","blogging","the_good_place"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/10/one-step-closer.html",
				"title": "One step closer to a good pipeline operator for Ruby",
				"content_html": "<p>I’ve previously yearned for something like Elm and Elixir’s <!-- raw HTML omitted -->|&gt;<!-- raw HTML omitted --> operator in Ruby. Turns out, <!-- raw HTML omitted -->this clever bit of concision is in Ruby 2.5<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I would prefer <!-- raw HTML omitted -->then<!-- raw HTML omitted --> or even <!-- raw HTML omitted -->|<!-- raw HTML omitted --> to the verbosely literal <!-- raw HTML omitted -->yield_self<!-- raw HTML omitted -->, but I’ll take anything. Surprisingly, both of my options are legal method names!</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>However, <!-- raw HTML omitted -->|<!-- raw HTML omitted --> already has 20+ implementations, either of the mathematical logical-OR variety or of the shell piping variety. Given the latter, maybe there’s a chance!</p>\n<p>Next, all we need is:</p>\n<!-- raw HTML omitted -->\n<p>If those two things make their way into Ruby, I can move on to my next pet feature request: a module/non-global namespace scheme ala Python, ES6, Elixir, etc. A guy can dream!</p>\n",
				"content_text": "I’ve previously yearned for something like Elm and Elixir’s <code>|&gt;</code> operator in Ruby. Turns out, <a href=\"http://mlomnicki.com/yield-self-in-ruby-25/\">this clever bit of concision is in Ruby 2.5</a>:\n\n<pre>object.yield_self {|x| block } → an_object\n# Yields self to the block and returns the result of the block.\n\nclass Object\n  def yield_self\n    yield(self)\n  end\nend</pre>\n\nI would prefer <code>then</code> or even <code>|</code> to the verbosely literal <code>yield_self</code>, but I’ll take anything. Surprisingly, both of my options are legal method names!\n\n<pre>class Object\n\n  def then\n    yield self\n  end\n\n  def |\n    yield self\n  end\n\nend\n\nrequire \"pathname\"\n\n__FILE__.\n then { |s| Pathname.new(s) }.\n yield_self { |p| p.read }.\n | { |source| source.each_line }.\n select { |line| line.match /^\\W*def ([\\S]*)/ }.\n map { |defn| p defn }</pre>\n\nHowever, <code>|</code> already has 20+ implementations, either of the mathematical logical-OR variety or of the shell piping variety. Given the latter, maybe there’s a chance!\n\nNext, all we need is:\n\n<ul>\n    <li>a syntax to curry a method by name (which is in the works!)</li>\n    <li>a syntax to partially apply said curry</li>\n</ul>\n\nIf those two things make their way into Ruby, I can move on to my next pet feature request: a module/non-global namespace scheme ala Python, ES6, Elixir, etc. A guy can dream!\n",
				"date_published": "2017-10-10T15:48:33-07:00",
				"url": "https://therealadam.com/2017/10/10/one-step-closer.html",
				"tags": ["Uncategorized","ruby","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/09/heck-yeah-october.html",
				"title": "Heck yeah, October 09, 2017",
				"content_html": "<p><!-- raw HTML omitted -->Simon Willison<!-- raw HTML omitted --> returns to blogging, in peak form nonetheless. Heck yeah!</p>\n<p>Janet Jackson, <!-- raw HTML omitted -->“Rhythm Nation”<!-- raw HTML omitted -->, posted by Billy Eichner. Heck yeah!</p>\n<p>A <!-- raw HTML omitted -->rocket engine made of nuclear fission<!-- raw HTML omitted -->. Note the “poison rod” in the schematic. Heck yeah engineering, heck no they actually tested this on Earth, heck yeah they never flew it!</p>\n",
				"content_text": "<a href=\"https://simonwillison.net\">Simon Willison</a> returns to blogging, in peak form nonetheless. Heck yeah!\n\nJanet Jackson, <a href=\"https://www.instagram.com/p/BaBCB-oB473/?taken-by=billyeichner\">“Rhythm Nation”</a>, posted by Billy Eichner. Heck yeah!\n\nA <a href=\"https://twitter.com/Casillic/status/917503567069671425\">rocket engine made of nuclear fission</a>. Note the “poison rod” in the schematic. Heck yeah engineering, heck no they actually tested this on Earth, heck yeah they never flew it!\n",
				"date_published": "2017-10-09T16:04:48-07:00",
				"url": "https://therealadam.com/2017/10/09/heck-yeah-october.html",
				"tags": ["Uncategorized","people:simon-willison","blogging","janet_jackson","nukes"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/09/strange-loop.html",
				"title": "Strange Loop 2017",
				"content_html": "<p>I was lucky enough to attend Strange Loop this year. I described the conference to friends as a gathering of minds interested in programming esoterica. The talks I attended were appropriately varied: from very academic slides to illustrated hero’s journeys, from using decomposed mushrooms to create materials to programming GPUs, from JavaScript to Ruby. Gotcha, that last one was not particularly varied.</p>\n<p>In short, most of the language-centric conferences I’ve been to in the past were about “hey look at what I did with this library or weird corner of the language”, though the most recent Ruby/Rails conference are more varied than this. By comparison, Strange Loop was more about “I did this thing that I’m excited about and its a little brainy but not intimidating and also I’m really excited about it.”</p>\n<!-- raw HTML omitted -->\n<p>I started the weekend off checking out the Elm community. I already think pretty highly of the language. I would certainly use it for a green-field project.</p>\n<p>Size, excitement, and employment-wise, Elm is about where Ruby was when I joined the community in 2005. Lots of excited folks, a smattering of employed folks, and a good technical/social setup for growth.</p>\n<p>A nice thing about the community is that there is no “other” that Elm is set against. Elm code often needs to interface with JavaScript to get at functionality like location or databases, so they don’t turn their nose up at it. It’s a symbiotic relationship. Further, most Elm developers are probably coming from JavaScript, so its a pretty friendly relationship. This is nice shift from the tribalism of yore.</p>\n<p>It’s also exciting that Elm is already more diverse than Ruby was at the same point in its growth/inflection curve. Fewer dudes, more beginners, and none of the “pure Ruby” sort of condescension towards Rails and web development.</p>\n<p>Favorite talks:</p>\n<!-- raw HTML omitted -->\n<p>The majority of the talks referenced Elm creator Evan Czaplicki’s approach to designing APIs. He is humble enough that I don’t think this will backlash like it did with DHH’s opinions did with Rails.</p>\n<p>By far the biggest corporate footprint in the community and talks was NoRedInk. Nearly half of the talks were by someone at the company.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Types for Ruby<!-- raw HTML omitted -->: it seems like they’ve implemented a full-blown type <!-- raw HTML omitted -->system<!-- raw HTML omitted --> for Ruby. It’s got all the gizmos and gadgets you might expect: unions, generics, gradual typing. It applies all its checks at runtime though, and they didn’t say if it does exhaustive checking, so I’m not sure how handy it would be in the way that e.g. Elm or Flow are. On my list of things to check out later.</p>\n<p><!-- raw HTML omitted -->Level up your concurrency skills with Rust<!-- raw HTML omitted -->. Learning Rust’s concepts for memory and concurrency safety, i.e. resources, ownerships, and lifetimes, can help you program in any language. Putting concurrency into a system is refactoring for out-of-orderness and most likely a retrofit of the underlying structure. Rust models memory like a resource, ala file handles or network sockets are modeled by the operating system. Rust resource borrowing in summary: if you can read it, no one else can write it; if you can write it, no one else can read or write it; borrows are checked at compile time so there is no runtime overhead/cost.</p>\n<p><!-- raw HTML omitted -->GPGPU programming with Metal<!-- raw HTML omitted -->. Your processor core has a medium sized arithmetic logic unit and a giant control unit (plus as much memory/cache as they can spare). A GPU is thousands of arithmetic logic units. Besides drawing amazing pictures, you can use all those arithmetic logic units to train/implement a neural network, do machine vision or image processing, run machine learning algorithms, and any kind of linear algebra or vector calculus. Work is sent to the GPU by loading data/state into buffers, converting math instructions to GPU code and load that into GPU buffers, and then let the GPU go wild executing it.</p>\n<p>Seeking a better culture and organization of open source maintainership (no talk video). Projects are getting smaller, more fragmented, and attracting no community (ed. the unintended consequence of extreme modularity?) Bitcoin and Ethereum have very little backing despite the astronomical amounts of money in the ecosystem. We need a new perspective on funding open source work. Consumption of open source has won, but production of open source is still in a pretty bad place.</p>\n<p><!-- raw HTML omitted -->How to be a compiler<!-- raw HTML omitted -->. Knitting is programming; you can even compile between knitting description pseudo-languages. Implemented Design by Numbers, a Processing predecessor, as transpiler to SVG.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Measuring and optimizing tail latency<!-- raw HTML omitted -->. Activating instrumentation and “slow-path” techniques on live web requests that run so long they will fall into the 99th percentile. Switch processor voltage to “power up” a processor that’s running a slow request so it will finish faster, e.g. switch a core from low power/500MHz mode to high power/2GHz mode.</p>\n<p>Really using functional ideas of composition and state in production, consumer-facing applications (<!-- raw HTML omitted -->e.g. the NY Times<!-- raw HTML omitted -->) and <!-- raw HTML omitted -->using ML-style type checkers with JavaScript<!-- raw HTML omitted --> (e.g. Flow and Elm).</p>\n<p><!-- raw HTML omitted -->My two favorite talks by far:<!-- raw HTML omitted --> <!-- raw HTML omitted -->Making digital art with JavaScript, WebGL, vdom and immutability<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Scraping/querying/aggregating image data from various space missions<!-- raw HTML omitted --> (e.g. Jupiter and Pluto flybys).</p>\n<p>Facebook stopped using datacenter routers and <!-- raw HTML omitted -->started building their own servers that program the networking chips a router would use from CentOS<!-- raw HTML omitted -->, basically giving them programmable routers that deploy like you would update infrastructure like Nginx or memcached. I wonder when/if treating network devices as software will scale down to your typical large company?</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>If you get the chance, you should go to Strange Loop!</p>\n",
				"content_text": "I was lucky enough to attend Strange Loop this year. I described the conference to friends as a gathering of minds interested in programming esoterica. The talks I attended were appropriately varied: from very academic slides to illustrated hero’s journeys, from using decomposed mushrooms to create materials to programming GPUs, from JavaScript to Ruby. Gotcha, that last one was not particularly varied.\n\nIn short, most of the language-centric conferences I’ve been to in the past were about “hey look at what I did with this library or weird corner of the language”, though the most recent Ruby/Rails conference are more varied than this. By comparison, Strange Loop was more about “I did this thing that I’m excited about and its a little brainy but not intimidating and also I’m really excited about it.”\n\n<h2>Elm Conf 2017</h2>\n\nI started the weekend off checking out the Elm community. I already think pretty highly of the language. I would certainly use it for a green-field project.\n\nSize, excitement, and employment-wise, Elm is about where Ruby was when I joined the community in 2005. Lots of excited folks, a smattering of employed folks, and a good technical/social setup for growth.\n\nA nice thing about the community is that there is no “other” that Elm is set against. Elm code often needs to interface with JavaScript to get at functionality like location or databases, so they don’t turn their nose up at it. It’s a symbiotic relationship. Further, most Elm developers are probably coming from JavaScript, so its a pretty friendly relationship. This is nice shift from the tribalism of yore.\n\nIt’s also exciting that Elm is already more diverse than Ruby was at the same point in its growth/inflection curve. Fewer dudes, more beginners, and none of the “pure Ruby” sort of condescension towards Rails and web development.\n\nFavorite talks:\n\n<ul>\n<li>“Teaching Elm to Beginners” (no talk video), Richard Feldman. Using Elm at work requires teaching Elm to beginners. Teaching is a totally different skill set, disjoint from programming. When answering a question, introduce as few new concepts as possible. Find the most direct path to helping someone understand. It’s unimportant to be precise, include lots of details, or being entertaining when teaching. You can avoid types and still help students build a substantial Elm program.</li>\n<li><a href=\"https://www.youtube.com/watch?v=Wiw3YcwGwrU\">If Coco Chanel Reviewed Elm</a>, Tereza Sokol: Elm as seen through the lens of high and low fashion. Elm is a carefully curated, slow releasing collection of parts ala Coco Chanel. It is not the hectic variety of an H&amp;M store.</li>\n<li><a href=\"https://www.youtube.com/watch?v=G_TNRuoF3FE\">Accessibility with Elm</a>, Tessa Kelly: Make accessible applications by enforcing view/DOM helpers with functional encapsulation and types. Your program won’t compile if you forget an accessibility annotation. A pretty good idea!</li>\n<li><a href=\"https://www.youtube.com/watch?v=NRXTMaXO15I\">Mogee, or how we fit Elm in a 64x64 grid</a>”, Andrew Kuzmin: A postmortem on building games with Elm. Key insight: work on the game, not on the code or engine. Don’t frivolously polish code. Use entity-component-system modeling. Build sprite/bitmap graphics in WebGL by making one pixel out of two triangles.</li>\n</ul>\n\nThe majority of the talks referenced Elm creator Evan Czaplicki’s approach to designing APIs. He is humble enough that I don’t think this will backlash like it did with DHH’s opinions did with Rails.\n\nBy far the biggest corporate footprint in the community and talks was NoRedInk. Nearly half of the talks were by someone at the company.\n\n<h2>Most practical talks from StrangeLoop</h2>\n\n<a href=\"https://www.youtube.com/watch?v=buY54I7mEjA\">Types for Ruby</a>: it seems like they’ve implemented a full-blown type <em>system</em> for Ruby. It’s got all the gizmos and gadgets you might expect: unions, generics, gradual typing. It applies all its checks at runtime though, and they didn’t say if it does exhaustive checking, so I’m not sure how handy it would be in the way that e.g. Elm or Flow are. On my list of things to check out later.\n\n<a href=\"https://www.youtube.com/watch?v=oIikwmeGVYY\">Level up your concurrency skills with Rust</a>. Learning Rust’s concepts for memory and concurrency safety, i.e. resources, ownerships, and lifetimes, can help you program in any language. Putting concurrency into a system is refactoring for out-of-orderness and most likely a retrofit of the underlying structure. Rust models memory like a resource, ala file handles or network sockets are modeled by the operating system. Rust resource borrowing in summary: if you can read it, no one else can write it; if you can write it, no one else can read or write it; borrows are checked at compile time so there is no runtime overhead/cost.\n\n<a href=\"https://www.youtube.com/watch?v=kc4qG42z7GA\">GPGPU programming with Metal</a>. Your processor core has a medium sized arithmetic logic unit and a giant control unit (plus as much memory/cache as they can spare). A GPU is thousands of arithmetic logic units. Besides drawing amazing pictures, you can use all those arithmetic logic units to train/implement a neural network, do machine vision or image processing, run machine learning algorithms, and any kind of linear algebra or vector calculus. Work is sent to the GPU by loading data/state into buffers, converting math instructions to GPU code and load that into GPU buffers, and then let the GPU go wild executing it.\n\nSeeking a better culture and organization of open source maintainership (no talk video). Projects are getting smaller, more fragmented, and attracting no community (ed. the unintended consequence of extreme modularity?) Bitcoin and Ethereum have very little backing despite the astronomical amounts of money in the ecosystem. We need a new perspective on funding open source work. Consumption of open source has won, but production of open source is still in a pretty bad place.\n\n<a href=\"https://www.youtube.com/watch?v=-xlbfBUZN5s\">How to be a compiler</a>. Knitting is programming; you can even compile between knitting description pseudo-languages. Implemented Design by Numbers, a Processing predecessor, as transpiler to SVG.\n\n<h2>Random cool things people are really doing</h2>\n\n<a href=\"https://www.youtube.com/watch?v=_Zoa3xkzgFk\">Measuring and optimizing tail latency</a>. Activating instrumentation and “slow-path” techniques on live web requests that run so long they will fall into the 99th percentile. Switch processor voltage to “power up” a processor that’s running a slow request so it will finish faster, e.g. switch a core from low power/500MHz mode to high power/2GHz mode.\n\nReally using functional ideas of composition and state in production, consumer-facing applications (<a href=\"https://www.youtube.com/watch?v=lI3IcjFg9Wk\">e.g. the NY Times</a>) and <a href=\"https://www.youtube.com/watch?v=Eti6_bSRgHU\">using ML-style type checkers with JavaScript</a> (e.g. Flow and Elm).\n\n<strong>My two favorite talks by far:</strong> <a href=\"https://www.youtube.com/watch?v=WhE2TUZXQQU\">Making digital art with JavaScript, WebGL, vdom and immutability</a>. <a href=\"https://www.youtube.com/watch?v=6wrEZwX_5Ak\">Scraping/querying/aggregating image data from various space missions</a> (e.g. Jupiter and Pluto flybys).\n\nFacebook stopped using datacenter routers and <a href=\"https://www.youtube.com/watch?v=WDfWd-Utcgo\">started building their own servers that program the networking chips a router would use from CentOS</a>, basically giving them programmable routers that deploy like you would update infrastructure like Nginx or memcached. I wonder when/if treating network devices as software will scale down to your typical large company?\n\n<h2>Strange Loop takeaways</h2>\n\n<ul>\n<li>a conference of diverse backgrounds and experiences is a better one</li>\n<li>my favorite talks told a hero’s journey story through illustrations</li>\n<li>folks in this sphere of technology are taking privacy and security very seriously, but the politics of code, e.g. user safety and information war, were not particularly up there in the talks I went to (probably by self-selection)</li>\n<li>way more people are doing machine learning applications than I’d realized; someone said off-hand that we’d “emerged from the AI winter in 2012” and that struck me as pretty accurate</li>\n<li><em>everyone</em> gets the impostor syndrome, even conference speakers and wildly successful special effects and TV personalities like Adam Savage</li>\n</ul>\n\nIf you get the chance, you should go to Strange Loop!\n",
				"date_published": "2017-10-09T08:07:49-07:00",
				"url": "https://therealadam.com/2017/10/09/strange-loop.html",
				"tags": ["Uncategorized","conferences","javascript","Build","rust"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/05/heres-a-thing.html",
				"title": "Here’s a thing, October 05, 2017",
				"content_html": "<p>As I endeavor to re-establish writing here as a regular and consistent project, I’m reminding myself of two things that helped me in the past.</p>\n<p>First and foremost, it’s about the writing and the finished product over the page views and vanity metrics. No one’s biography or Wikipedia page says “and lo they were followed by many social media influencers and gathered many thousands of impressions!”</p>\n<p>Second, no weblog is better than the one you already have. Resist the urge to roll your own tools and <!-- raw HTML omitted -->just write<!-- raw HTML omitted -->.</p>\n<p>By virtue of Apple Music’s “For You” tab, I came upon the musical landscape of <!-- raw HTML omitted -->Tim Heckler<!-- raw HTML omitted -->. If wooshy, atmospheric ambient experimental/electronic music is your thing, you should check it out.</p>\n<p>Also, you should listen to lots of <!-- raw HTML omitted -->Nina Simone<!-- raw HTML omitted -->.</p>\n",
				"content_text": "As I endeavor to re-establish writing here as a regular and consistent project, I’m reminding myself of two things that helped me in the past.\n\nFirst and foremost, it’s about the writing and the finished product over the page views and vanity metrics. No one’s biography or Wikipedia page says “and lo they were followed by many social media influencers and gathered many thousands of impressions!”\n\nSecond, no weblog is better than the one you already have. Resist the urge to roll your own tools and <a href=\"http://therealadam.com/2010/07/12/adams-guide-to-switching-weblogs/\">just write</a>.\n\nBy virtue of Apple Music’s “For You” tab, I came upon the musical landscape of <a href=\"https://itunes.apple.com/us/artist/tim-hecker/id3823891\">Tim Heckler</a>. If wooshy, atmospheric ambient experimental/electronic music is your thing, you should check it out.\n\nAlso, you should listen to lots of <a href=\"https://itunes.apple.com/us/playlist/nina-simone-next-steps/idpl.85db2d641b454b82bee98dc9ef81824c\">Nina Simone</a>.\n",
				"date_published": "2017-10-05T15:52:22-07:00",
				"url": "https://therealadam.com/2017/10/05/heres-a-thing.html",
				"tags": ["Expanded ideas","The System","writing","nina_simone"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/05/exa-in-seconds.html",
				"title": "exa in 30 seconds",
				"content_html": "<p><!-- raw HTML omitted -->What is it?<!-- raw HTML omitted --> <!-- raw HTML omitted -->exa<!-- raw HTML omitted --> is <!-- raw HTML omitted -->ls<!-- raw HTML omitted --> reimagined for modern times, in Rust. And more colorfully. It is nifty, but not life-changing. I mostly still use <!-- raw HTML omitted -->ls<!-- raw HTML omitted -->, because muscle memory is strong and its basically the only mildly friendly thing about Unix.</p>\n<!-- raw HTML omitted -->\n<p>Spoiler alert: basically the same.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<strong>What is it?</strong> <a href=\"https://github.com/ogham/exa\">exa</a> is <code>ls</code> reimagined for modern times, in Rust. And more colorfully. It is nifty, but not life-changing. I mostly still use <code>ls</code>, because muscle memory is strong and its basically the only mildly friendly thing about Unix.\n\n<h3>How do I do boring old ls things?</h3>\n\nSpoiler alert: basically the same.\n\n<ul>\n<li><code>ls -a</code>: <code>exa -a</code></li>\n<li><code>ls -l</code>: <code>exa -l</code></li>\n<li><code>ls -lR</code>: <code>exa -lR</code></li>\n</ul>\n\n<h3>How do I do things I rarely had the gumption to do with ls?</h3>\n\n<ul>\n<li><code>exa -rs created</code>: simple listing, sort files reverse by created time. Other options: <code>name, extension, size, type, modified, accessed, created, inode</code></li>\n<li><code>exa -hl</code>: show a long listing with headers for each column</li>\n<li><code>exa -T</code>: recurse into directories ala <code>tree</code></li>\n<li><code>exa -l --git</code>: show <code>git</code> metadata alongside file info</li>\n</ul>\n",
				"date_published": "2017-10-05T13:20:45-07:00",
				"url": "https://therealadam.com/2017/10/05/exa-in-seconds.html",
				"tags": ["Uncategorized","Build","unix","rust"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/05/generalization-and-specialization.html",
				"title": "Generalization and specialization: more of column A, a little less of column B",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<ol>\n<li>Now, I attempt to write in the style of a tweetstorm. But about code. For my website. Not for tweets. </li>\n<li>For a long time, we have been embracing specialization. It's taken for granted even more than capitalism. But maybe not as much as the sun rising in the morning</li>\n<li>From specialization comes modularization, inheritance, microservices, pizza teams, Conway's Law, and lots of other things we sometimes consider as righteous as apple pie.</li>\n<li>Specialization comes at a cost though. Because a specialized entity is specific, it is useless out of context. It cannot exist except for the support of other specialized things.</li>\n<li>Interconnectedness is the unintended consequence of specialization. Little things depend on other things.</li>\n<li>Those dependencies may prove surprising, fragile, unstable, chaotic, or create a bottleneck.</li>\n<li>Specialization also requires some level of infrastructure to even get started. You can't share code in a library until you have the infrastructure to import it at runtime (dynamic linking) or resolve the library's dependencies (package managers).</li>\n<li>The expensive open secret of microservices and disposable infrastructure is that you need a high level of operational acumen to even consider starting down the road.</li>\n<li>You're either going to buy this as a service, buy it as software you host, or build it yourself. Either way, you're going to pay for this decision right in the budget.</li>\n<li>On the flip side is generalization. The grand vision of interchangeable cogs that can work any project.</li>\n<li>A year ago I would have thought this was as foolish as microservices. But the ecosystems and tooling are getting really good. And, JavaScript is getting good enough and continues to have the most amazing reach across platforms and devices.</li>\n<li>A year ago I would have told you generalization is the foolish dream of the capitalist who wants to drive down his costs by treating every person as a commodity. I suspect this exists in parts of our trade, but developers are generally rare enough that finding a good one is difficult enough, let alone a good one that knows your ecosystem and domain already.</li>\n<li>Generalization gives you a cushion when you need help a short handed team get something out the door. You can shift a generalist over to take care of the dozen detail things so the existing team can stay focused on the core, important things. Shifting a generalist over for a day doesn't get you 8 developer hours, but it might get you 4 when you really need it.</li>\n<li>Generalization means more people can help each other. Anyone can grab anyone else and ask to pair, for a code review, for a sanity check, etc.</li>\n<li>When we speak of increasing our team's bus number, we are talking about generalizing along some axis. Ecosystem generalists, domain knowledge generalists, operational generalists, etc.</li>\n<li>On balance, I still want to make myself a T-shaped person. But, I think the top of the T is fatter than people think. Or, it's wider than it is tall, by a factor of one or two.</li>\n<li>Organizationally, I think we should choose what the tools and processes we use carefully so that we don't end up where only one or two people do something. That's creating fragility and overhead where it doesn't yield any benefit.</li>\n</ol>\n",
				"date_published": "2017-10-05T08:45:00-07:00",
				"url": "https://therealadam.com/2017/10/05/generalization-and-specialization.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/04/the-notes-october.html",
				"title": "The notes, October 04, 2017",
				"content_html": "<p>I’m intrigued by <!-- raw HTML omitted -->folks having luck building virtualized development environments for localhost setups<!-- raw HTML omitted -->. It sounds like fun to work in this kind of workflow. I never want to do the legwork to make this work, though.</p>\n<p>I did the preliminaries for this last year and ended up turning back from it. I understand Docker and virtualization superficially at best. I don’t want to impose it on teammates. It’s still too hard to search for Unix-y error messages and fix your development environment. Trying to figure out if your host Unix, Docker, or a virtualized Unix are the problem is not something I wanted to do to someone else.</p>\n<p>Is <!-- raw HTML omitted -->Amazon Lightsail<!-- raw HTML omitted --> a move by AWS into the space occupied by Linode, Digital Ocean, etc.? Related to virtualized localhost setups: someone write me a thing to drop my dotfiles from macOS onto a Digital Ocean, AWS, etc. instance and do development from an iPad, keyboard, and SSH client.</p>\n<p><!-- raw HTML omitted -->Hammerspoon<!-- raw HTML omitted --> is a really cool to do all-the-things with your keyboard and some Lua. I use it to launch/switch to my most frequent dozen apps and some light Markdown helpers. But, something about it is correspondingly creepy. It can, theoretically, scoop up every keystroke. (Which probably every bit of open source I install via Homebrew could, to be honest) But maybe I could replace it with a clever bit of Alfred workflow and scripting. Catch a triggering keystroke and then give me a constrained list of apps to switch to. Yes, this is a very strange way to hit <!-- raw HTML omitted -->Command-Tab<!-- raw HTML omitted -->! I wonder how well a few custom Alfred workflows fit into a dotfiles repo.</p>\n",
				"content_text": "I’m intrigued by <a href=\"http://workstuff.tumblr.com/post/50911984233/some-tips-on-getting-started-with-vagrant-and-chef\">folks having luck building virtualized development environments for localhost setups</a>. It sounds like fun to work in this kind of workflow. I never want to do the legwork to make this work, though.\n\nI did the preliminaries for this last year and ended up turning back from it. I understand Docker and virtualization superficially at best. I don’t want to impose it on teammates. It’s still too hard to search for Unix-y error messages and fix your development environment. Trying to figure out if your host Unix, Docker, or a virtualized Unix are the problem is not something I wanted to do to someone else.\n\nIs <a href=\"https://amazonlightsail.com\">Amazon Lightsail</a> a move by AWS into the space occupied by Linode, Digital Ocean, etc.? Related to virtualized localhost setups: someone write me a thing to drop my dotfiles from macOS onto a Digital Ocean, AWS, etc. instance and do development from an iPad, keyboard, and SSH client.\n\n<a href=\"http://www.hammerspoon.org\">Hammerspoon</a> is a really cool to do all-the-things with your keyboard and some Lua. I use it to launch/switch to my most frequent dozen apps and some light Markdown helpers. But, something about it is correspondingly creepy. It can, theoretically, scoop up every keystroke. (Which probably every bit of open source I install via Homebrew could, to be honest) But maybe I could replace it with a clever bit of Alfred workflow and scripting. Catch a triggering keystroke and then give me a constrained list of apps to switch to. Yes, this is a very strange way to hit <code>Command-Tab</code>! I wonder how well a few custom Alfred workflows fit into a dotfiles repo.\n",
				"date_published": "2017-10-04T15:16:16-07:00",
				"url": "https://therealadam.com/2017/10/04/the-notes-october.html",
				"tags": ["Uncategorized","Expanded ideas","The System","workflow","lua","vagrant"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/04/notascience-science.html",
				"title": "Not-a-Science Science",
				"content_html": "<!-- raw HTML omitted -->\n<p>&ndash; Gerald Weinberg, <!-- raw HTML omitted -->An Introduction to General Systems Thinking<!-- raw HTML omitted --></p>\n",
				"content_text": "<blockquote>\n   <span style=\"line-height:inherit;\">Any field with the word \"science\" in its name is guaranteed not to be a science.</span>\n</blockquote>\n\n-- Gerald Weinberg, <em>An Introduction to General Systems Thinking</em>\n",
				"date_published": "2017-10-04T08:04:42-07:00",
				"url": "https://therealadam.com/2017/10/04/notascience-science.html",
				"tags": ["The System","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/03/afternoon-notes-october.html",
				"title": "Afternoon notes, October 03, 2017",
				"content_html": "<p>Someone will always have a slicker Git workflow than you. For example,<!-- raw HTML omitted -->Auto-squashing Git Commits<!-- raw HTML omitted --> for clever rebasing.</p>\n<p>The passage of time is weird, lately. Nonetheless, it’s surprising that <!-- raw HTML omitted -->the Dynamo white paper is ten years old<!-- raw HTML omitted -->. Ten years of NoSQL hype. <!-- raw HTML omitted -->Even from a naive yours truly<!-- raw HTML omitted -->.</p>\n<p>I’ve been using the <!-- raw HTML omitted --><!-- raw HTML omitted -->fish<!-- raw HTML omitted --><!-- raw HTML omitted --> shell for about five months and it is pretty great. A shell with human affordances! It has very good guesses about what I want to do (completions) and what I want it to remember (history). You can configure it with a web interface or regular-old dotfiles. It doesn’t do anything bizarrely different from your typical Unix-style shell, namely <!-- raw HTML omitted -->bash<!-- raw HTML omitted -->, so there’s not much new to learn and when I SSH to a server, I don’t wonder what kind of weird contraption I’m interacting with. I haven’t bothered to learn its scripting language because I’ve decided no one should learn those anymore and they should use Ruby, Python, Go, etc. for that kind of thing.</p>\n",
				"content_text": "Someone will always have a slicker Git workflow than you. For example,<a href=\"https://robots.thoughtbot.com/autosquashing-git-commits\">Auto-squashing Git Commits</a> for clever rebasing.\n\nThe passage of time is weird, lately. Nonetheless, it’s surprising that <a href=\"http://www.allthingsdistributed.com/2017/10/a-decade-of-dynamo.html\">the Dynamo white paper is ten years old</a>. Ten years of NoSQL hype. <a href=\"https://therealadam.com/2009/08/31/its-not-nosql-its-post-relational/\">Even from a naive yours truly</a>.\n\nI’ve been using the <a href=\"https://fishshell.com\"><code>fish</code></a> shell for about five months and it is pretty great. A shell with human affordances! It has very good guesses about what I want to do (completions) and what I want it to remember (history). You can configure it with a web interface or regular-old dotfiles. It doesn’t do anything bizarrely different from your typical Unix-style shell, namely <code>bash</code>, so there’s not much new to learn and when I SSH to a server, I don’t wonder what kind of weird contraption I’m interacting with. I haven’t bothered to learn its scripting language because I’ve decided no one should learn those anymore and they should use Ruby, Python, Go, etc. for that kind of thing.\n",
				"date_published": "2017-10-03T15:51:17-07:00",
				"url": "https://therealadam.com/2017/10/03/afternoon-notes-october.html",
				"tags": ["Uncategorized","Expanded ideas","The System","git","dotfiles","hype","nosql","unix"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/03/morning-notes-october.html",
				"title": "Morning notes, October 03, 2017",
				"content_html": "<p>I like Bluebottle&rsquo;s coffee subscription service a lot. The web app is well done and having coffee magically appear in my mailbox means I have far fewer &ldquo;awww heck we&rsquo;re out of coffee until I go to a coffee shop&rdquo; moments. However, I do occasionally mess up the timing, such as right now, and then I have a <!-- raw HTML omitted -->very<!-- raw HTML omitted --> first world problem.</p>\n<p><!-- raw HTML omitted -->Scheduling my time on social media<!-- raw HTML omitted --> and capping the total time spent, not unlike watching a regular TV show, is an idea with some appeal. It&rsquo;s probably a good idea for moderating how much daily news one consumes, as well.</p>\n<p>I was looking at <!-- raw HTML omitted -->WP-CLI<!-- raw HTML omitted --> so I could automate some housekeeping tasks on this blog. It&rsquo;s pretty close to what I&rsquo;d like to use, the ideal being something closer to <!-- raw HTML omitted --><!-- raw HTML omitted -->t<!-- raw HTML omitted --><!-- raw HTML omitted -->. I&rsquo;m a little wary of installing a PHP tool though. It&rsquo;s probably the language tribalism talking though. Seems pretty likely I&rsquo;d save time using someone else&rsquo;s PHP than figuring it out on my own.</p>\n",
				"content_text": "I like Bluebottle's coffee subscription service a lot. The web app is well done and having coffee magically appear in my mailbox means I have far fewer \"awww heck we're out of coffee until I go to a coffee shop\" moments. However, I do occasionally mess up the timing, such as right now, and then I have a <em>very</em> first world problem.\n\n<a href=\"http://calnewport.com/blog/2017/10/02/are-you-using-social-media-or-being-used-by-it/\">Scheduling my time on social media</a> and capping the total time spent, not unlike watching a regular TV show, is an idea with some appeal. It's probably a good idea for moderating how much daily news one consumes, as well.\n\nI was looking at <a href=\"https://make.wordpress.org/cli/\">WP-CLI</a> so I could automate some housekeeping tasks on this blog. It's pretty close to what I'd like to use, the ideal being something closer to <a href=\"http://sferik.github.io/t/\"><code>t</code></a>. I'm a little wary of installing a PHP tool though. It's probably the language tribalism talking though. Seems pretty likely I'd save time using someone else's PHP than figuring it out on my own.\n",
				"date_published": "2017-10-03T09:27:00-07:00",
				"url": "https://therealadam.com/2017/10/03/morning-notes-october.html",
				"tags": ["Uncategorized","Expanded ideas","The System","cli","social-media"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/03/the-loungification-of.html",
				"title": "The loungification of luxury cars",
				"content_html": "<p>High-end luxury cars are starting to resemble first-class airport lounges and it’s bothering me.</p>\n<p>The Porsche Panamera has a dang tray table. Just about every German luxury car has the option to put an LCD screen on the back of the front seats, for entertainment. Who puts $100k+ down on a car so that someone else can drive you around? The seats recline, have tablets to control their massage and scent-control functions. Of course they’re heated and ventilated.</p>\n<p>I’m fine with cars as things that merely get you from point A to point B, and I’m fine with rich people buying extravagant cars, but I’m not okay with this airport lounge stuff. No one likes airports! They’re miserable! Stop designing things to resemble airports!</p>\n",
				"content_text": "High-end luxury cars are starting to resemble first-class airport lounges and it’s bothering me.\n\nThe Porsche Panamera has a dang tray table. Just about every German luxury car has the option to put an LCD screen on the back of the front seats, for entertainment. Who puts $100k+ down on a car so that someone else can drive you around? The seats recline, have tablets to control their massage and scent-control functions. Of course they’re heated and ventilated.\n\nI’m fine with cars as things that merely get you from point A to point B, and I’m fine with rich people buying extravagant cars, but I’m not okay with this airport lounge stuff. No one likes airports! They’re miserable! Stop designing things to resemble airports!\n",
				"date_published": "2017-10-03T08:31:00-07:00",
				"url": "https://therealadam.com/2017/10/03/the-loungification-of.html",
				"tags": ["Pop Culture","Cars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/10/02/categorizing-and-understanding.html",
				"title": "Categorizing and understanding magical code",
				"content_html": "<p>Sometimes, programmers like to disparage “magical code”. They say magical code is causing their bugs, magical code is offensive to use, magical code is harder to understand, we should try to write “less magical” code.</p>\n<p>“Wait, what’s magic?”, I hear you say. That’s what I’m here to talk about! (Warning: this post contains an above-average density of “air quotes”, ask your doctor if your heart is strong enough for “humorous quoting”.)</p>\n<!-- raw HTML omitted -->\n<p>It’s not inscrutable code. It’s not bad code. It doesn’t intentionally defy understanding, like an <!-- raw HTML omitted -->obfuscated code contest<!-- raw HTML omitted --> or <!-- raw HTML omitted -->code golfing<!-- raw HTML omitted -->.</p>\n<p>I can start to understand why a big of code is frustratingly magical to me by categorizing it. (Hi, I’m Adam, I love categorizing things, it’s awful.)</p>\n<p>“Mathemagical” code escapes my understanding due to its foundation in math and my lack of understanding therein. I recently read <!-- raw HTML omitted --><!-- raw HTML omitted -->Purely Functional Data Structures<!-- raw HTML omitted --><!-- raw HTML omitted -->, which is a great book, but the parts on proving e.g. worst-case cost for amortized operations on data structures are completely beyond my patience or confidence in math. Once Greek symbols enter the text, my brain kinda “nope!”s out.</p>\n<p>“Metamagic” is hard to understand due to use of metaprogramming. Code that generates code inside code is a) really cool and b) a bit of a mind exploder at first. When it works, its glorious and not “magical”. When it falls short, it’s a mess of violated expectations and complaints about magic. PSA: don’t <!-- raw HTML omitted -->metaprogram when you can program<!-- raw HTML omitted -->.</p>\n<p>“Sleight of hand” makes it harder for me to understand code because I don’t know where the control flow or logic goes. Combining inheritance and mixins when using Ruby is a good example of control flow sleight-of-hand. If a class extends <!-- raw HTML omitted -->Foo<!-- raw HTML omitted -->, includes <!-- raw HTML omitted -->Bar<!-- raw HTML omitted -->, and all three define a method <!-- raw HTML omitted -->do_the_thing<!-- raw HTML omitted -->, which one gets called (trick question: all of them, trick follow-up question: in what order!)? The Rails router is a good example of logical sleight-of-hand. If I’m wondering how <!-- raw HTML omitted -->root to: &ldquo;some_controller/index&rdquo;<!-- raw HTML omitted --> works and I have only the Rails sources on me, where would I start looking to find that logic? For the first few years of Rails, I’d dig around in various files before I found the trail to that answer.</p>\n<p>“Multi-level magic schemes” is my new tongue-in-cheek way to explain a tool like <!-- raw HTML omitted -->tmux<!-- raw HTML omitted -->. It’s a wonderful tool for those of us who prefer to work in (several) shells all day. I’m terrified of when things go wrong with it, though. To multiplex several shells into one process while persisting that state across user sessions requires <!-- raw HTML omitted -->tmux<!-- raw HTML omitted --> to operate at the intersection of Unix shells, process trees, and redrawing interfaces to a terminal emulator. I understand the first two in isolation, but when you put it all together, my brain again “nope!”s out of trying to solve any problems that arise. Other multi-level magic schemes include object-relational mappers, game engines, operating system containers, and datacenter networking.</p>\n<!-- raw HTML omitted -->\n<p>I’m writing this because I often see ineffective reactions to “magical” code. Namely, 1) identify code that is frustrating, 2) complain on Twitter or Slack, 3) there is no step 3. Getting frustrated is okay and normal! Contributing only negative energy to the situation is not.</p>\n<p>Instead, once I find a thing frustrating, I try to step back and figure out what’s going on. How does this bit of code or tool work? Am I doing something that it recommends against or doesn’t expect? Can I get back on the “golden path” the code is built for? Can I find the code and understand what’s going on by reading it? Often some combination of these side quests puts me back on my way an out of frustration’s way.</p>\n<p>Other times, I don’t have time for a side quest of understanding. If that’s the case, I make a mental note that “here be dragons” and try to work around it until I’m done with my main quest. Next time I come across that mental map and remember “oh, there were dragons here!”, I try to understand the situation a little better.</p>\n<p>For example, I have a “barely tolerating” relationship with <!-- raw HTML omitted -->webpack<!-- raw HTML omitted -->. I’m glad it exists, it mostly works well, but I feel its human factors leave a lot to be desired. It took a few dives into how it works and how to configure it before I started to develop a mental model for what’s going on such that I didn’t feel like it was constantly burning me. I probably even complained about this in the confidence of friends, but for my own personal assurances, attached the caveat of “this is magical because it’s unfamiliar to me.”</p>\n<p>Which brings me to my last caveat: all this advice works for <!-- raw HTML omitted -->me<!-- raw HTML omitted --> because I’ve been programming for quite a while. I have tons of knowledge, the kind anyone can read and the kind you have to win by experience, to draw upon. If you’re still in your first decade of programming, nearly everything will seem like magic. Worse, it’s hard to tell what’s useful magic, what’s virtuous magic, and what’s plain-old mediocre code. In that case: when you’re confronted with magic, consult me or your nearest Adam-like collaborator.</p>\n",
				"content_text": "Sometimes, programmers like to disparage “magical code”. They say magical code is causing their bugs, magical code is offensive to use, magical code is harder to understand, we should try to write “less magical” code.\n\n“Wait, what’s magic?”, I hear you say. That’s what I’m here to talk about! (Warning: this post contains an above-average density of “air quotes”, ask your doctor if your heart is strong enough for “humorous quoting”.)\n\n<h2>Magic is code I have yet to understand</h2>\n\nIt’s not inscrutable code. It’s not bad code. It doesn’t intentionally defy understanding, like an <a href=\"https://en.wikipedia.org/wiki/International_Obfuscated_C_Code_Contest\">obfuscated code contest</a> or <a href=\"https://en.wikipedia.org/wiki/Code_golf\">code golfing</a>.\n\nI can start to understand why a big of code is frustratingly magical to me by categorizing it. (Hi, I’m Adam, I love categorizing things, it’s awful.)\n\n“Mathemagical” code escapes my understanding due to its foundation in math and my lack of understanding therein. I recently read <a href=\"https://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504\"><em>Purely Functional Data Structures</em></a>, which is a great book, but the parts on proving e.g. worst-case cost for amortized operations on data structures are completely beyond my patience or confidence in math. Once Greek symbols enter the text, my brain kinda “nope!”s out.\n\n“Metamagic” is hard to understand due to use of metaprogramming. Code that generates code inside code is a) really cool and b) a bit of a mind exploder at first. When it works, its glorious and not “magical”. When it falls short, it’s a mess of violated expectations and complaints about magic. PSA: don’t <a href=\"https://therealadam.com/2011/12/09/why-metaprogram-when-you-can-program/?frame-nonce=e0840f7343\">metaprogram when you can program</a>.\n\n“Sleight of hand” makes it harder for me to understand code because I don’t know where the control flow or logic goes. Combining inheritance and mixins when using Ruby is a good example of control flow sleight-of-hand. If a class extends <code>Foo</code>, includes <code>Bar</code>, and all three define a method <code>do_the_thing</code>, which one gets called (trick question: all of them, trick follow-up question: in what order!)? The Rails router is a good example of logical sleight-of-hand. If I’m wondering how <code>root to: \"some_controller/index\"</code> works and I have only the Rails sources on me, where would I start looking to find that logic? For the first few years of Rails, I’d dig around in various files before I found the trail to that answer.\n\n“Multi-level magic schemes” is my new tongue-in-cheek way to explain a tool like <code>tmux</code>. It’s a wonderful tool for those of us who prefer to work in (several) shells all day. I’m terrified of when things go wrong with it, though. To multiplex several shells into one process while persisting that state across user sessions requires <code>tmux</code> to operate at the intersection of Unix shells, process trees, and redrawing interfaces to a terminal emulator. I understand the first two in isolation, but when you put it all together, my brain again “nope!”s out of trying to solve any problems that arise. Other multi-level magic schemes include object-relational mappers, game engines, operating system containers, and datacenter networking.\n\n<h2>I can understand magic and so can you!</h2>\n\nI’m writing this because I often see ineffective reactions to “magical” code. Namely, 1) identify code that is frustrating, 2) complain on Twitter or Slack, 3) there is no step 3. Getting frustrated is okay and normal! Contributing only negative energy to the situation is not.\n\nInstead, once I find a thing frustrating, I try to step back and figure out what’s going on. How does this bit of code or tool work? Am I doing something that it recommends against or doesn’t expect? Can I get back on the “golden path” the code is built for? Can I find the code and understand what’s going on by reading it? Often some combination of these side quests puts me back on my way an out of frustration’s way.\n\nOther times, I don’t have time for a side quest of understanding. If that’s the case, I make a mental note that “here be dragons” and try to work around it until I’m done with my main quest. Next time I come across that mental map and remember “oh, there were dragons here!”, I try to understand the situation a little better.\n\nFor example, I have a “barely tolerating” relationship with <code>webpack</code>. I’m glad it exists, it mostly works well, but I feel its human factors leave a lot to be desired. It took a few dives into how it works and how to configure it before I started to develop a mental model for what’s going on such that I didn’t feel like it was constantly burning me. I probably even complained about this in the confidence of friends, but for my own personal assurances, attached the caveat of “this is magical because it’s unfamiliar to me.”\n\nWhich brings me to my last caveat: all this advice works for <em>me</em> because I’ve been programming for quite a while. I have tons of knowledge, the kind anyone can read and the kind you have to win by experience, to draw upon. If you’re still in your first decade of programming, nearly everything will seem like magic. Worse, it’s hard to tell what’s useful magic, what’s virtuous magic, and what’s plain-old mediocre code. In that case: when you’re confronted with magic, consult me or your nearest Adam-like collaborator.\n",
				"date_published": "2017-10-02T08:00:00-07:00",
				"url": "https://therealadam.com/2017/10/02/categorizing-and-understanding.html",
				"tags": ["Uncategorized","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/09/13/on-codereview-bias.html",
				
				"content_html": "<p><!-- raw HTML omitted -->On Code Review<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>This has made code review of big features way more plausible on my current team. Large work is organized into epic branches which have review branches which are individually reviewed. This makes the final merge and review way more tractable.</p>\n<!-- raw HTML omitted -->\n<p>This is a good start for <!-- raw HTML omitted -->a style guide ala git commits<!-- raw HTML omitted -->!</p>\n",
				"content_text": "<a href=\"https://medium.com/@9len/on-code-review-16ea85f7c585\">On Code Review</a>:\n\n<blockquote>\n  Bias to small, digestible review requests. When possible, try to break down your large refactor into smaller, easier to reason about changes, which can be reviewed in sequence (or better still, orthogonally). When your review request gets bigger than about 400 lines of code, ask yourself if it can be compartmentalized. If everyone is efficient at reviewing code as it is published, there’s no advantage to batching small changes together, and there are distinct disadvantages. The most dangerous outcome of a large review request is that reviewers are unable to sustain focus over many lines, and the code isn’t reviewed well or at all.\n</blockquote>\n\nThis has made code review of big features way more plausible on my current team. Large work is organized into epic branches which have review branches which are individually reviewed. This makes the final merge and review way more tractable.\n\n<blockquote>\n  Your description should tell the story of your change. It should not be an automated list of commits. Instead, you should talk about why you’re making the change, what problem you’re solving, what code you changed, what classes you introduced, how you tested it. The description should tell the reviewers what specific pieces of the change they should take extra care in reviewing.\n</blockquote>\n\nThis is a good start for <a href=\"https://chris.beams.io/posts/git-commit/\">a style guide ala git commits</a>!\n",
				"date_published": "2017-09-13T17:36:18-07:00",
				"url": "https://therealadam.com/2017/09/13/on-codereview-bias.html",
				"tags": ["Uncategorized","Link","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/07/21/fewer-changes-are.html",
				"title": "Fewer changes are faster to deploy than fewer changes",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>👏 👏 👏 👏 👏  read the whole thing, Itamar&rsquo;s tale is well told.</p>\n<p>Consider: incremental approaches consist of taking a large scope and finding smaller, still-valuable scopes inside of it. Risk is 100% proportional to scope. Time-to-deliver grows as scope grows. Cancellation and deployment risk grow as time-to-deliver grows. It&rsquo;s not quite math, but it is easy to demonstrate on a whiteboard. In case you happen to need to work with someone who wants large scope <!-- raw HTML omitted -->and<!-- raw HTML omitted --> low risk <!-- raw HTML omitted -->and<!-- raw HTML omitted --> low time-to-delivery.</p>\n",
				"content_text": "<p class=\"post-title\" role=\"heading\">Itamar Turner-Trauring, <a href=\"https://codewithoutrules.com/2017/07/21/large-software-projects/\">Incremental results: how to succeed at large software projects</a>:</p>\n\n<blockquote>\n<ul>\n    <li><strong>Faster feedback...</strong></li>\n    <li><strong>Less unnecessary features...</strong></li>\n    <li><strong>Less cancellation risk...</strong></li>\n    <li><strong>Less deployment risk...</strong></li>\n</ul>\n</blockquote>\n\n👏 👏 👏 👏 👏  read the whole thing, Itamar's tale is well told.\n\nConsider: incremental approaches consist of taking a large scope and finding smaller, still-valuable scopes inside of it. Risk is 100% proportional to scope. Time-to-deliver grows as scope grows. Cancellation and deployment risk grow as time-to-deliver grows. It's not quite math, but it is easy to demonstrate on a whiteboard. In case you happen to need to work with someone who wants large scope <strong>and</strong> low risk <strong>and</strong> low time-to-delivery.\n",
				"date_published": "2017-07-21T14:33:44-07:00",
				"url": "https://therealadam.com/2017/07/21/fewer-changes-are.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/07/17/til-divide-by.html",
				"title": "TIL: divide by 10 with this one weird number",
				"content_html": "<p>Running an application across two physical databases is not a straightforward thing. One of the <!-- raw HTML omitted -->relatively<!-- raw HTML omitted --> easier ways to do it involves assigning each database instance a shard number and then arranging for all your primary key IDs to end with that number. For example, shard 0 generates IDs like <!-- raw HTML omitted -->1230, 40, 482340<!-- raw HTML omitted -->, shard 1 generates IDs like <!-- raw HTML omitted -->1231, 41, 482341<!-- raw HTML omitted -->, and shard 2 generates IDs like <!-- raw HTML omitted -->1232, 42, 482342<!-- raw HTML omitted -->, etc. all the way up to 9. If you want more than 10 database shards, it gets more involved.</p>\n<p>My brain is wired oddly, so I came to wonder how you would quickly get the shard ID for an ID (e.g. shard 1 for <!-- raw HTML omitted -->1231<!-- raw HTML omitted -->). This is really easy with decimal math; you just divide by 10. However, we run our databases on computers that can only do binary math, so its not actually simple.</p>\n<p>But it turns out you can do it quite fast! <!-- raw HTML omitted -->There&rsquo;s one weird number<!-- raw HTML omitted -->, expressed as <code>&lt;code&gt;0x1999999A</code><!-- raw HTML omitted --> hexadecimal, that is very close to multiplying by the fraction <!-- raw HTML omitted -->1/10<!-- raw HTML omitted --> (plus further binary math and register trickery). Thus you can do this in only a few instructions on Intel processors released in the past twenty years.</p>\n<p>I&rsquo;m really glad someone else figured this out.</p>\n",
				"content_text": "Running an application across two physical databases is not a straightforward thing. One of the <em>relatively</em> easier ways to do it involves assigning each database instance a shard number and then arranging for all your primary key IDs to end with that number. For example, shard 0 generates IDs like <code>1230, 40, 482340</code>, shard 1 generates IDs like <code>1231, 41, 482341</code>, and shard 2 generates IDs like <code>1232, 42, 482342</code>, etc. all the way up to 9. If you want more than 10 database shards, it gets more involved.\n\nMy brain is wired oddly, so I came to wonder how you would quickly get the shard ID for an ID (e.g. shard 1 for <code>1231</code>). This is really easy with decimal math; you just divide by 10. However, we run our databases on computers that can only do binary math, so its not actually simple.\n\nBut it turns out you can do it quite fast! <a href=\"https://stackoverflow.com/a/5558614\">There's one weird number</a>, expressed as `<code>0x1999999A`</code> hexadecimal, that is very close to multiplying by the fraction <code>1/10</code> (plus further binary math and register trickery). Thus you can do this in only a few instructions on Intel processors released in the past twenty years.\n\nI'm really glad someone else figured this out.\n",
				"date_published": "2017-07-17T14:46:46-07:00",
				"url": "https://therealadam.com/2017/07/17/til-divide-by.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/07/10/if-i-could.html",
				"title": "If I could imagineer Tomorrowland for a moment",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Personally, I&rsquo;d copy/paste the Magic Kingdom People Mover over to Disneyland, keep the monorail as-is, bring back the motor boat cruise as some kind of &ldquo;see the world from a personal-sized yacht&rdquo; thing, and reimagine Autopia as pure-electric autonymous cars that are integrated with pedestrian, bicycle, and commercial traffic in a way that is less car-centric as our current world. The five second pitch: the future of transportation is global <!-- raw HTML omitted -->and<!-- raw HTML omitted --> interconnected.</p>\n",
				"content_text": "<p class=\"title\">A little bit of fan reflection on <a class=\"journal-entry-navigation-current\" href=\"http://www.imagineeringdisney.com/blog/2017/7/6/future-matters-transportation-in-tomorrowland.html\">Transportation in Tomorrowland</a> and how to revitalize it:</p>\n\n<blockquote>When you visit Disneyland in California, how do you feel when you walk down Main Street, U.S.A. and turn right to enter Tomorrowland? I mostly feel a combination sadness and  frustration when I walk through Tomorrowland–primarily due to the misplaced and pathway– clogging Astro Orbiter and the vacant, rotting PeopleMover track. And while fantasy space travel is well represented in Tomorrowland (Buzz Lightyear Astro Blasters, Star Tours, and Space  Mountain), any semblance of tangible ways of pondering, dreaming about, and honoring humankind's achievements and the wonders of the future are long gone. It's as if Disneyland, like seemingly so much of the world, gave up on an optimistic view of the future, too.</blockquote>\n\nPersonally, I'd copy/paste the Magic Kingdom People Mover over to Disneyland, keep the monorail as-is, bring back the motor boat cruise as some kind of \"see the world from a personal-sized yacht\" thing, and reimagine Autopia as pure-electric autonymous cars that are integrated with pedestrian, bicycle, and commercial traffic in a way that is less car-centric as our current world. The five second pitch: the future of transportation is global <em>and</em> interconnected.\n",
				"date_published": "2017-07-10T11:45:21-07:00",
				"url": "https://therealadam.com/2017/07/10/if-i-could.html",
				"tags": ["Pop Culture","Link","Disney"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/07/06/javascripts-amazing-reach.html",
				"title": "JavaScript's amazing reach",
				"content_html": "<p>There&rsquo;s plenty of room to criticize JavaScript as a technology, language, and community(s). But, when I&rsquo;m optimistic, I think the big things JavaScript as a phenomenon brings to the world are:</p>\n<!-- raw HTML omitted -->\n<p>In short, JavaScript increases the chances someone will level up their career. Maybe they&rsquo;ll continue in sales or marketing but use JS as a secret weapon to get more done or avoid tedium. Maybe it gives them an opportunity to try programming without changing job functions or committing to a bootcamp program.</p>\n<p>Bottom line: JavaScript, like Ruby and PHP before it, is the next thing that&rsquo;s improving the chances non-programmers become programmers and reach the life-improving salary and career trajectories software developers have enjoyed for the past decade or two.</p>\n",
				"content_text": "There's plenty of room to criticize JavaScript as a technology, language, and community(s). But, when I'm optimistic, I think the big things JavaScript as a phenomenon brings to the world are:\n\n<ul>\n    <li><strong>amazing reach</strong>: you can write JS for frontends, backends, games, art, music, devices, mobile, and domains I'm not even aware of</li>\n    <li><strong>a better on-ramp for people new to programming: </strong>the highly motivated can learn JS and not worry about the breadth of languages they may need to learn for operations, design, reporting, build tooling, etc.</li>\n    <li><strong>lots of those on-ramps:</strong> you could start learning JS to improve a spreadsheet, automate something in Salesforce, write a fun little Slack bot, etc.</li>\n</ul>\n\nIn short, JavaScript increases the chances someone will level up their career. Maybe they'll continue in sales or marketing but use JS as a secret weapon to get more done or avoid tedium. Maybe it gives them an opportunity to try programming without changing job functions or committing to a bootcamp program.\n\nBottom line: JavaScript, like Ruby and PHP before it, is the next thing that's improving the chances non-programmers become programmers and reach the life-improving salary and career trajectories software developers have enjoyed for the past decade or two.\n",
				"date_published": "2017-07-06T13:24:24-07:00",
				"url": "https://therealadam.com/2017/07/06/javascripts-amazing-reach.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/07/06/master-of-none.html",
				"title": "👍 Master of None Season 2",
				"content_html": "<p>Just finished watching <!-- raw HTML omitted -->Master of None<!-- raw HTML omitted -->, season 2. What a great show. It&rsquo;s hilarious without being campy, poignant without being a downer. Aziz Ansari is very good at this. Also, now I just want to listen to old Italian music and eat food.</p>\n",
				"content_text": "Just finished watching <i>Master of None</i>, season 2. What a great show. It's hilarious without being campy, poignant without being a downer. Aziz Ansari is very good at this. Also, now I just want to listen to old Italian music and eat food.\n",
				"date_published": "2017-07-06T08:03:12-07:00",
				"url": "https://therealadam.com/2017/07/06/master-of-none.html",
				"tags": ["Pop Culture","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/25/if-i-were.html",
				"title": "If I were a producer: DJ Khaled",
				"content_html": "<p>Actually, I probably wouldn&rsquo;t change much. But I have questions about this marketing photo:</p>\n<p>[caption id=&ldquo;attachment_4434&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;487&rdquo;]<!-- raw HTML omitted --> People, do not pose with apex predators. And especially, don&rsquo;t keep them as domestic pets. I&rsquo;m looking at you, oil billionaires.[/caption]</p>\n<!-- raw HTML omitted -->\n<p>Thank you for your time, DJ Khaled. <!-- raw HTML omitted --><!-- raw HTML omitted -->Grateful<!-- raw HTML omitted --><!-- raw HTML omitted --> is actually pretty good pop music.</p>\n",
				"content_text": "Actually, I probably wouldn't change much. But I have questions about this marketing photo:\n\n[caption id=\"attachment_4434\" align=\"aligncenter\" width=\"487\"]<img class=\"alignnone size-full wp-image-4434\" src=\"https://therealadam.com/uploads/2024/fcc021864b.jpg\" alt=\"DJ Khaled posing with a baby human and a baby lion\" width=\"487\" height=\"286\" /> People, do not pose with apex predators. And especially, don't keep them as domestic pets. I'm looking at you, oil billionaires.[/caption]\n\n<ol>\n    <li>Just, no. Do not pose with apex predators, even the little ones. Not okay, Mr. Khaled. I know this isn't a question?</li>\n    <li>Why doesn't said apex predator kitty get a matching robe?</li>\n    <li>Are you, Mr. DJ Khaled, just a catchphrase soundboard? Have you, at any time, been a soundboard? Is this like a Blue Man Group thing where there are multiple, anonymous DJ Khaleds?</li>\n</ol>\n\nThank you for your time, DJ Khaled. <a href=\"https://itun.es/us/Ohxkkb\"><em>Grateful</em></a> is actually pretty good pop music.\n",
				"date_published": "2017-06-25T11:06:53-07:00",
				"url": "https://therealadam.com/2017/06/25/if-i-were.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/21/if-i-were.html",
				"title": "If I were a producer: Muse",
				"content_html": "<p>I have feelings about Muse, but let&rsquo;s talk about this particular song I&rsquo;m listening to right now: <!-- raw HTML omitted -->&ldquo;Big Freeze&rdquo;<!-- raw HTML omitted --> off <!-- raw HTML omitted -->The 2nd Law<!-- raw HTML omitted -->. In general, I would overgeneralize Muse&rsquo;s music as &ldquo;future-prog&rdquo;. But this song has a) the typical fuzz bass Muse uses, b) nearly <!-- raw HTML omitted -->chicken grease guitar chords<!-- raw HTML omitted -->, and c) a distinct U2 vibe. I&rsquo;m not sure these things all go together. If&rsquo;d been the producer on this track, I&rsquo;d have tried to convince them that chicken grease chords are cool as heck, but they don&rsquo;t belong on any of Muse&rsquo;s album tracks.</p>\n",
				"content_text": "I have feelings about Muse, but let's talk about this particular song I'm listening to right now: <a href=\"https://itun.es/us/gaVJH?i=563015724\">\"Big Freeze\"</a> off <em>The 2nd Law</em>. In general, I would overgeneralize Muse's music as \"future-prog\". But this song has a) the typical fuzz bass Muse uses, b) nearly <a href=\"https://www.youtube.com/watch?v=CqVjw_QqYZQ\">chicken grease guitar chords</a>, and c) a distinct U2 vibe. I'm not sure these things all go together. If'd been the producer on this track, I'd have tried to convince them that chicken grease chords are cool as heck, but they don't belong on any of Muse's album tracks.\n",
				"date_published": "2017-06-21T16:08:32-07:00",
				"url": "https://therealadam.com/2017/06/21/if-i-were.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/21/i-welcome-our.html",
				"title": "I welcome our future computer assistants...",
				"content_html": "<p>&hellip;but they&rsquo;re going to have to deal with the fact that my wife and I commonly have exchanges like this:</p>\n<!-- raw HTML omitted -->\n<p>Courtney: this one?</p>\n<p>Me: which one?</p>\n<p>Courtney: the one I&rsquo;m pointing at</p>\n<p>Me: I&rsquo;m not looking at you</p>\n<p>Courtney: this one</p>\n<p>Me: the thingy!<!-- raw HTML omitted --></p>\n<p>Good luck, machine learners!</p>\n",
				"content_text": "...but they're going to have to deal with the fact that my wife and I commonly have exchanges like this:\n\n<blockquote>Me: can you hand me the thingy from the thing?\n\nCourtney: this one?\n\nMe: which one?\n\nCourtney: the one I'm pointing at\n\nMe: I'm not looking at you\n\nCourtney: this one\n\nMe: the thingy!</blockquote>\n\nGood luck, machine learners!\n",
				"date_published": "2017-06-21T11:51:27-07:00",
				"url": "https://therealadam.com/2017/06/21/i-welcome-our.html",
				"tags": ["Pop Culture","Comedy, haha","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/20/computers-are-coming.html",
				"title": "Computers are coming for more jobs than we think",
				"content_html": "<p>A great video explainer on how computers and <!-- raw HTML omitted -->creative destruction<!-- raw HTML omitted --> are different this time.  <!-- raw HTML omitted -->Why Automation is Different this Time<!-- raw HTML omitted -->. Hint: we need better ideas than individualism, &ldquo;markets&rdquo;, and supply-side economics for this to end well. Via <!-- raw HTML omitted -->Kottke<!-- raw HTML omitted -->.</p>\n",
				"content_text": "A great video explainer on how computers and <a href=\"https://en.wikipedia.org/wiki/Creative_destruction\">creative destruction</a> are different this time.  <a href=\"https://www.youtube.com/watch?v=WSKi8HfcxEk\">Why Automation is Different this Time</a>. Hint: we need better ideas than individualism, \"markets\", and supply-side economics for this to end well. Via <a href=\"https://kottke.org\">Kottke</a>.\n",
				"date_published": "2017-06-20T18:37:18-07:00",
				"url": "https://therealadam.com/2017/06/20/computers-are-coming.html",
				"tags": ["The System","Link","Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/19/oauth-takes.html",
				"title": "OAuth2 🔥-takes",
				"content_html": "<p>Is it too late to do hottakes for something that&rsquo;s been around for nearly a decade?</p>\n<p>OAuth2 pros:</p>\n<!-- raw HTML omitted -->\n<p>Cons:</p>\n<!-- raw HTML omitted -->\n<p>Overall: would not uninvent this technology.</p>\n",
				"content_text": "Is it too late to do hottakes for something that's been around for nearly a decade?\n\nOAuth2 pros:\n\n<ul>\n    <li>I can allow other sites to use my data with some confidence that, at least, my authentication information won't leak</li>\n    <li>It has made really cool stuff possible at my current workplace and workplace-2</li>\n    <li>Libraries to make it happen in server-side apps are pretty good</li>\n</ul>\n\nCons:\n\n<ul>\n    <li>There are a bajillionty implementations and standard definitions of OAuth2 (for somewhat justifiable reasons)</li>\n    <li>If you want to tinker with an OAuth2 API, you're in a bit of hurt because you can't just grab a token and start playing (mostly, depending on the implementer)</li>\n    <li>Those open source libraries are the kind of thing that drive maintainers away pretty quickly 😬</li>\n</ul>\n\nOverall: would not uninvent this technology.\n",
				"date_published": "2017-06-19T16:05:35-07:00",
				"url": "https://therealadam.com/2017/06/19/oauth-takes.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/15/the-emotional-rollercoaster.html",
				"title": "The emotional rollercoaster of extracting code",
				"content_html": "<p>There&rsquo;s a moment of despair when extracting functionality from a larger library, framework, or program. The idea grows, a seed at first and then a full-blown tree, that the coupling in this functionality isn&rsquo;t all bad. A lot of people talk only about coupling and leave out cohesion. They aren&rsquo;t mutually exclusive! When the two are balanced, it&rsquo;s hard to come up with a reason to start extracting.</p>\n<p>On the other hand, sometimes that moment of despair strikes when you start really digging into the domain and realize this chunk of functionality isn&rsquo;t what you thought it was. Maybe it&rsquo;s not coherent (see above!) or perhaps the model of the domain isn&rsquo;t deep enough. This is a pretty good signal to hit the brakes on the refactoring, figure the domain out, and reconsider the course of action.</p>\n<p>Feature envy rears its head in extractions too. Patterns of crosstalk between the existing thing and the new thing are a sure sign of feature envy. It&rsquo;s tempting to say, hey maybe you really need a third thing in the middle. That&rsquo;s probably making matters worse though.</p>\n<p>That said, changing bidirectional communication to unidirectional is usually a positive thing. Same for replacing any kind of asynchronous communication with synchronous. Or replacing lockstep coordination with asynchronous messaging. Envy is tricky!</p>\n<p>(I) often encourage starting a new service or application within your existing &ldquo;mothership&rdquo;. The trendy way to say this right now is &ldquo;monorepo all the things&rdquo; or build a &ldquo;modular monolith&rdquo;. I find this compelling because you can leverage a lot of existing effort into operationalizing, tooling, and infrastructure. Once you know the domain and technical concerns specific to the new thing, you can easily extract into its own thing if you need to. The other edge of a monorepolith is that path dependence is a hell of a thing. Today is almost certainly an easier day to split stuff out than tomorrow.</p>\n<p>A thing to consider pursuing is a <!-- raw HTML omitted -->backend-for-frontend<!-- raw HTML omitted --> service in pursuit of a specific frontend. It doesn&rsquo;t even have to serve an application. You may have services that are specific to mobile, desktop, apps, APIs, integrations, etc. Each of these may need drastically different rates of change, technical features, and team sets.</p>\n<p>Probably don&rsquo;t split out a service so that a bunch of specialized people can build a &ldquo;center of excellence&rdquo; for the rest of the organization to rely upon. This is a very fancy way to say &ldquo;we are too cool for everyone else and we just can&rsquo;t stand the work everyone else is doing&rdquo;. On their best day, the Excellence team will be overwhelmed by the volume of work they have put in front of themselves to make Everything Good. On their worst day, they will straight give up.</p>\n<p>If you split something out, realize you&rsquo;re going to have to maintain it until you replace it. And you&rsquo;re going to rebuild the airplane while it&rsquo;s flying. If you&rsquo;re not really into that, stop now. Just because you can&rsquo;t stand Rails, relational databases, or whatever doesn&rsquo;t mean you should jump into an extraction.</p>\n",
				"content_text": "There's a moment of despair when extracting functionality from a larger library, framework, or program. The idea grows, a seed at first and then a full-blown tree, that the coupling in this functionality isn't all bad. A lot of people talk only about coupling and leave out cohesion. They aren't mutually exclusive! When the two are balanced, it's hard to come up with a reason to start extracting.\n\nOn the other hand, sometimes that moment of despair strikes when you start really digging into the domain and realize this chunk of functionality isn't what you thought it was. Maybe it's not coherent (see above!) or perhaps the model of the domain isn't deep enough. This is a pretty good signal to hit the brakes on the refactoring, figure the domain out, and reconsider the course of action.\n\nFeature envy rears its head in extractions too. Patterns of crosstalk between the existing thing and the new thing are a sure sign of feature envy. It's tempting to say, hey maybe you really need a third thing in the middle. That's probably making matters worse though.\n\nThat said, changing bidirectional communication to unidirectional is usually a positive thing. Same for replacing any kind of asynchronous communication with synchronous. Or replacing lockstep coordination with asynchronous messaging. Envy is tricky!\n\n(I) often encourage starting a new service or application within your existing \"mothership\". The trendy way to say this right now is \"monorepo all the things\" or build a \"modular monolith\". I find this compelling because you can leverage a lot of existing effort into operationalizing, tooling, and infrastructure. Once you know the domain and technical concerns specific to the new thing, you can easily extract into its own thing if you need to. The other edge of a monorepolith is that path dependence is a hell of a thing. Today is almost certainly an easier day to split stuff out than tomorrow.\n\nA thing to consider pursuing is a <a href=\"https://www.thoughtworks.com/insights/blog/bff-soundcloud\">backend-for-frontend</a> service in pursuit of a specific frontend. It doesn't even have to serve an application. You may have services that are specific to mobile, desktop, apps, APIs, integrations, etc. Each of these may need drastically different rates of change, technical features, and team sets.\n\nProbably don't split out a service so that a bunch of specialized people can build a \"center of excellence\" for the rest of the organization to rely upon. This is a very fancy way to say \"we are too cool for everyone else and we just can't stand the work everyone else is doing\". On their best day, the Excellence team will be overwhelmed by the volume of work they have put in front of themselves to make Everything Good. On their worst day, they will straight give up.\n\nIf you split something out, realize you're going to have to maintain it until you replace it. And you're going to rebuild the airplane while it's flying. If you're not really into that, stop now. Just because you can't stand Rails, relational databases, or whatever doesn't mean you should jump into an extraction.\n",
				"date_published": "2017-06-15T09:00:13-07:00",
				"url": "https://therealadam.com/2017/06/15/the-emotional-rollercoaster.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/06/13/what-i-talk.html",
				"title": "What I talk about when I talk about cars",
				"content_html": "<p><!-- raw HTML omitted -->Human design<!-- raw HTML omitted -->: what went into deciding how a human-facing thing is made? How did they decide to put the infotainment screen there? Why are BMW dashboard lights orange-ish? Who designs gauges and do they know what they’re doing? What the hell is going on with Mercedes dashes? When will we stop using gearshifts? When will the scourge of the PRNDL knob leave us?</p>\n<p><!-- raw HTML omitted -->Mechanical design<!-- raw HTML omitted -->: i.e. why is this car the way it is from an engineering point-of-view? Why is the rear-engine 911 unique, special, and kinda dumb? What makes the BMW M1 a weird BMW and yet perhaps the most special? Why do Ferrari engines catch fire so frequently? Do BMW/Audi/Mercedes design their cars as sedans, coupes, or hatchbacks first?</p>\n<p><!-- raw HTML omitted -->History<!-- raw HTML omitted -->: What puts some brands, e.g. Ferrari and Porsche over the others? Is Audi interesting? What is the gestalt of Honda or Toyota? How did the Viper come to have a tractor engine and a Lamborghini body? How does a BMW M car become “the next coming of BMW Jesus?”</p>\n<p><!-- raw HTML omitted -->Emotion<!-- raw HTML omitted -->: What makes people think a car is special? What kind of person owns a Koenigsegg or Pagani? Why own a Lamborghini? Is it practical to drive a Ferrari touring car? When does an Acura TL make sense for someone who enjoys cars? What will enthusiast cars look like once electric cars are the norm; will we finally enter a world of boring aerolumps?</p>\n<p>&hellip;amongst other things. So many questions, so many subjective answers. That&rsquo;s what makes it fun!</p>\n",
				"content_text": "<strong>Human design</strong>: what went into deciding how a human-facing thing is made? How did they decide to put the infotainment screen there? Why are BMW dashboard lights orange-ish? Who designs gauges and do they know what they’re doing? What the hell is going on with Mercedes dashes? When will we stop using gearshifts? When will the scourge of the PRNDL knob leave us?\n\n<strong>Mechanical design</strong>: i.e. why is this car the way it is from an engineering point-of-view? Why is the rear-engine 911 unique, special, and kinda dumb? What makes the BMW M1 a weird BMW and yet perhaps the most special? Why do Ferrari engines catch fire so frequently? Do BMW/Audi/Mercedes design their cars as sedans, coupes, or hatchbacks first?\n\n<strong>History</strong>: What puts some brands, e.g. Ferrari and Porsche over the others? Is Audi interesting? What is the gestalt of Honda or Toyota? How did the Viper come to have a tractor engine and a Lamborghini body? How does a BMW M car become “the next coming of BMW Jesus?”\n\n<strong>Emotion</strong>: What makes people think a car is special? What kind of person owns a Koenigsegg or Pagani? Why own a Lamborghini? Is it practical to drive a Ferrari touring car? When does an Acura TL make sense for someone who enjoys cars? What will enthusiast cars look like once electric cars are the norm; will we finally enter a world of boring aerolumps?\n\n...amongst other things. So many questions, so many subjective answers. That's what makes it fun!\n",
				"date_published": "2017-06-13T15:16:15-07:00",
				"url": "https://therealadam.com/2017/06/13/what-i-talk.html",
				"tags": ["Pop Culture","Cars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/05/17/more-ideas-for.html",
				"title": "More ideas for framework people",
				"content_html": "<p>A few months ago I wrote about<!-- raw HTML omitted --> Framework and Library<!-- raw HTML omitted --> people. I had great follow-up conversations with <!-- raw HTML omitted -->Ben Hamill<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Brad Fults<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->Nathan Ladd<!-- raw HTML omitted --> about it. Some ideas from those conversations:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "A few months ago I wrote about<a href=\"http://therealadam.com/2017/02/14/framework-and-library-people/\"> Framework and Library</a> people. I had great follow-up conversations with <a href=\"https://twitter.com/benhamill\">Ben Hamill</a>, <a href=\"https://twitter.com/h3h\">Brad Fults</a>, and <a href=\"https://twitter.com/realntl\">Nathan Ladd</a> about it. Some ideas from those conversations:\n\n<ul>\n<li><p>use a well-worn framework when it addresses your technical complexities (e.g. expose functionality via the web or build a 3-d game) and your domain complexity (e.g. shopping, social networking, or multi-dimensional bowling) is your paramount concern</p></li>\n<li><p>once you have some time/experience in your problem domain, start rounding off corners to leave future teammates a metaframework that reduces decision/design burdens and gives them some kind of golden path</p></li>\n<li><p>frameworks may end up less useful as integration surface area increases</p></li>\n<li><p>napkin math makes it hard to justify not using a framework; you have to build the thing <em>and</em> accept the cost of not having a community to support you and hire from</p></li>\n<li><p>to paraphrase Sandi Metz on the <a href=\"https://www.sandimetz.com/blog/2016/1/20/the-wrong-abstraction\">wrong abstraction</a>: “(Using) no abstraction is better than the wrong abstraction”; if you’ve had a bad time with a framework, chances it was an inappropriate abstraction or you used the abstraction incorrectly</p></li>\n</ul>\n",
				"date_published": "2017-05-17T16:05:03-07:00",
				"url": "https://therealadam.com/2017/05/17/more-ideas-for.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/05/15/did-you-try.html",
				"title": "Did you try editing the right file?",
				"content_html": "<p>The first few years of my career, I edited the wrong file all the time. I could spend hours making changes, wondering why nothing was happening, until I realized I&rsquo;d been tinkering in the wrong place because I was misreading a file path or not paying close enough attention to control flow.</p>\n<p>Fast forward to now, and I&rsquo;m pretty quick to drop a <!-- raw HTML omitted -->raise &ldquo;BLORP&rdquo;<!-- raw HTML omitted --> in code I&rsquo;m tinkering with if things aren&rsquo;t working like I think they should. All hail <!-- raw HTML omitted -->puts debuggerering<!-- raw HTML omitted -->.</p>\n<p>However, it turns out I found a new class of this operator error today. I was diligently re-running a test case, expecting new results when the test fixture file I thought was changed was the wrong file. Once I deleted the right file, I was back on my way.</p>\n<p>Joyful and grumpy are we who can find new ways to screw up time ever day!</p>\n",
				"content_text": "The first few years of my career, I edited the wrong file all the time. I could spend hours making changes, wondering why nothing was happening, until I realized I'd been tinkering in the wrong place because I was misreading a file path or not paying close enough attention to control flow.\n\nFast forward to now, and I'm pretty quick to drop a <code>raise \"BLORP\"</code> in code I'm tinkering with if things aren't working like I think they should. All hail <a href=\"https://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html\">puts debuggerering</a>.\n\nHowever, it turns out I found a new class of this operator error today. I was diligently re-running a test case, expecting new results when the test fixture file I thought was changed was the wrong file. Once I deleted the right file, I was back on my way.\n\nJoyful and grumpy are we who can find new ways to screw up time ever day!\n",
				"date_published": "2017-05-15T15:19:28-07:00",
				"url": "https://therealadam.com/2017/05/15/did-you-try.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/24/chaining-ruby-enumerators.html",
				"title": "Chaining Ruby enumerators",
				"content_html": "<p>I want to connect two Ruby enumerators. Give me all the values from the first, then the second, and so on. Ideally, without forcing any lazy evaluations and flat so I don’t have to think about nested stuff. Like so:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I couldn’t figure out how to do that with Ruby’s standard library alone. But, it wasn’t that hard to write my own:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>But it seems like Ruby’s library, <!-- raw HTML omitted -->Enumerable<!-- raw HTML omitted --> in particular, is so strong I must have missed something. So, <!-- raw HTML omitted -->mob programmers<!-- raw HTML omitted -->, is there a better way to do this? A fancier enumerator-combining thing I’m missing?</p>\n",
				"content_text": "I want to connect two Ruby enumerators. Give me all the values from the first, then the second, and so on. Ideally, without forcing any lazy evaluations and flat so I don’t have to think about nested stuff. Like so:\n\n<pre>xs = [1, 2, 3].to_enum\nys = [4, 5, 6].to_enum\n[xs, ys].chain.to_a # =&gt; [1, 2, 3, 4, 5, 6]</pre>\n\nI couldn’t figure out how to do that with Ruby’s standard library alone. But, it wasn’t that hard to write my own:\n\n<pre>def chain(*enums)\n  return to_enum(:chain, *enums) unless block_given?\n\n  enums.each { |enum| enum.each { |e| yield e } }\n end</pre>\n\nBut it seems like Ruby’s library, <code>Enumerable</code> in particular, is so strong I must have missed something. So, <a href=\"https://en.wikipedia.org/wiki/Mob_programming\">mob programmers</a>, is there a better way to do this? A fancier enumerator-combining thing I’m missing?\n",
				"date_published": "2017-04-24T16:07:29-07:00",
				"url": "https://therealadam.com/2017/04/24/chaining-ruby-enumerators.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/20/when-my-brain.html",
				"title": "When my brain storms",
				"content_html": "<p>I do my best thinking:</p>\n<!-- raw HTML omitted -->\n<p>Your thinking may vary!</p>\n",
				"content_text": "I do my best thinking:\n\n<ul>\n<li>In the shower. I love to take long showers, and I love my tankless water heater.</li>\n<li>While talking. Something about my brain is wired directly to my mouth.</li>\n<li>When I'm not thinking. See also, the value of letting your mind idle, wander, or just walking away from a tricky problem.</li>\n</ul>\n\nYour thinking may vary!\n",
				"date_published": "2017-04-20T12:26:21-07:00",
				"url": "https://therealadam.com/2017/04/20/when-my-brain.html",
				"tags": ["Expanded ideas","The System","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/18/stored-procedure-modern.html",
				"title": "Stored Procedure Modern",
				"content_html": "<p>The idea behind Facebook&rsquo;s Relay is to write declarative queries, put them next to the user interaction code that uses them, and compose those queries. It&rsquo;s a solid idea. But this snippet about <!-- raw HTML omitted -->Relay Modern<!-- raw HTML omitted --> made me chuckle:</p>\n<!-- raw HTML omitted -->\n<p>Relay Modern adopts a similar approach. The Relay compiler extracts colocated GraphQL snippets from across an app, constructs the necessary queries, saves them on the server ahead of time, and outputs artifacts that the Relay runtime uses to fetch those queries and process their results at runtime.<!-- raw HTML omitted --></p>\n<p>How many meetings did they need before they renamed this from &ldquo;GraphQL stored procedures&rdquo; to &ldquo;Relay Modern&rdquo;?</p>\n<p>(FWIW, I worked on a system that exposed stored procedures through a web service for client-side interaction code. It wasn&rsquo;t too bad, setting aside the need to hand write SQL and XSLT.)</p>\n",
				"content_text": "The idea behind Facebook's Relay is to write declarative queries, put them next to the user interaction code that uses them, and compose those queries. It's a solid idea. But this snippet about <a href=\"https://code.facebook.com/posts/1362748677097871\">Relay Modern</a> made me chuckle:\n\n<blockquote>The teams realized that if the GraphQL queries instead were statically known — that is, they were not altered by runtime conditions — then they could be constructed once during development time and saved on the Facebook servers, and replaced in the mobile app with a tiny identifier. With this approach, the app sends the identifier along with some GraphQL variables, and the Facebook server knows which query to run. No more overhead, massively reduced network traffic, and much faster mobile apps.\n\nRelay Modern adopts a similar approach. The Relay compiler extracts colocated GraphQL snippets from across an app, constructs the necessary queries, saves them on the server ahead of time, and outputs artifacts that the Relay runtime uses to fetch those queries and process their results at runtime.</blockquote>\n\nHow many meetings did they need before they renamed this from \"GraphQL stored procedures\" to \"Relay Modern\"?\n\n(FWIW, I worked on a system that exposed stored procedures through a web service for client-side interaction code. It wasn't too bad, setting aside the need to hand write SQL and XSLT.)\n",
				"date_published": "2017-04-18T14:42:10-07:00",
				"url": "https://therealadam.com/2017/04/18/stored-procedure-modern.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/17/we-should-get.html",
				"title": "We should get back to inventing jetpacks",
				"content_html": "<p>I don’t like using services like Uber, Twitch, or Favor. I want to like them, because the underlying ideas are pretty futuristic. But the reality of these services is that the new boss wants to squeeze their not-even-employess-anymore just as badly the old boss did. It feels manipulative, like buying a car. Except I&rsquo;m abetting the manipulation too. :(</p>\n<p><!-- raw HTML omitted -->The New Yorker<!-- raw HTML omitted -->, <!-- raw HTML omitted -->THE GIG ECONOMY CELEBRATES WORKING YOURSELF TO DEATH<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>What happens when the gig economy tries to turn a profit? The race downwards will squeeze out all of their contractors until they can replace them all with automated drivers, commoditized personalities, and punitively-low ad revenue sharing rates. This sounds horribly dystopian but I’m pretty sure it’s already happening. See also: when Google kneecapped bloggers as a side-effect of end-of-lifing Reader and changing Pagerank.</p>\n<p><!-- raw HTML omitted -->The New York Times<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Platform Companies Are Becoming More Powerful — but What Exactly Do They Want?<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>After reading this, I started substituting “platform company” for “company building its own monopoly”. And then it all makes sense. Businesspeople say they love free markets, but give any rational-thinking business the chance and they will create so many “moats” and “barriers to entry” that they resemble tiny state enterprises more than a private business. See also: telecoms and airlines.</p>\n<p>Anil Dash, <!-- raw HTML omitted -->Tech and the Fake Market tactic<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Yes, my confirmation bias is burning. Yes, technologists are doomed to recreate the robber-baron past they didn’t study. Yes, we still have time to change this. Yes, our field needs an ethics refresher. Yes, we should get back to inventing jetpacks!</p>\n",
				"content_text": "I don’t like using services like Uber, Twitch, or Favor. I want to like them, because the underlying ideas are pretty futuristic. But the reality of these services is that the new boss wants to squeeze their not-even-employess-anymore just as badly the old boss did. It feels manipulative, like buying a car. Except I'm abetting the manipulation too. :(\n\n<em>The New Yorker</em>, <a href=\"http://www.newyorker.com/culture/jia-tolentino/the-gig-economy-celebrates-working-yourself-to-death?mbid=nl_170323_Daily&amp;CNDID=46575420&amp;spMailingID=10681265&amp;spUserID=MTcyMDU2NjAwODMzS0&amp;spJobID=1121869960&amp;spReportId=MTEyMTg2OTk2MAS2\">THE GIG ECONOMY CELEBRATES WORKING YOURSELF TO DEATH</a>:\n\n<blockquote>\n  The contrast between the gig economy’s rhetoric (everyone is always connecting, having fun, and killing it!) and the conditions that allow it to exist (a lack of dependable employment that pays a living wage) makes this kink in our thinking especially clear.\n</blockquote>\n\nWhat happens when the gig economy tries to turn a profit? The race downwards will squeeze out all of their contractors until they can replace them all with automated drivers, commoditized personalities, and punitively-low ad revenue sharing rates. This sounds horribly dystopian but I’m pretty sure it’s already happening. See also: when Google kneecapped bloggers as a side-effect of end-of-lifing Reader and changing Pagerank.\n\n<em>The New York Times</em>, <a href=\"https://mobile.nytimes.com/2017/03/21/magazine/platform-companies-are-becoming-more-powerful-but-what-exactly-do-they-want.html?em_pos=small&amp;ref=headline&amp;nl_art=3&amp;te=1&amp;nl=magazine&amp;emc=edit_ma_20170324&amp;_r=0&amp;referer=\">Platform Companies Are Becoming More Powerful — but What Exactly Do They Want?</a>\n\n<blockquote>\n  Platforms are, in a sense, capitalism distilled to its essence. They are proudly experimental and maximally consequential, prone to creating externalities and especially disinclined to address or even acknowledge what happens beyond their rising walls. And accordingly, platforms are the underlying trend that ties together popular narratives about technology and the economy in general. Platforms provide the substructure for the “gig economy” and the “sharing economy”; they’re the economic engine of social media; they’re the architecture of the “attention economy” and the inspiration for claims about the “end of ownership.”\n</blockquote>\n\nAfter reading this, I started substituting “platform company” for “company building its own monopoly”. And then it all makes sense. Businesspeople say they love free markets, but give any rational-thinking business the chance and they will create so many “moats” and “barriers to entry” that they resemble tiny state enterprises more than a private business. See also: telecoms and airlines.\n\nAnil Dash, <a href=\"https://medium.com/humane-tech/tech-and-the-fake-market-tactic-8bd386e3d382#.ks33ixaif\">Tech and the Fake Market tactic</a>:\n\n<blockquote>\n  This has been the status quo for most of the last decade. But the next rising wave of tech innovators twist the definition of “market” even further, to a point where they aren’t actually markets at all.\n</blockquote>\n\nYes, my confirmation bias is burning. Yes, technologists are doomed to recreate the robber-baron past they didn’t study. Yes, we still have time to change this. Yes, our field needs an ethics refresher. Yes, we should get back to inventing jetpacks!\n",
				"date_published": "2017-04-17T09:00:00-07:00",
				"url": "https://therealadam.com/2017/04/17/we-should-get.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/09/jeremy-johnsonits-time.html",
				
				"content_html": "<p>Jeremy Johnson, <!-- raw HTML omitted -->It’s time to get a real watch, and an Apple Watch doesn’t count:<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>When pal <!-- raw HTML omitted -->Marcos<!-- raw HTML omitted --> started talking to me about watches, I realized they checked all the boxes cars do, but at a fraction of the price. If cars check your boxes, look into watches. Jeremy&rsquo;s intro will get you started without breaking the bank.</p>\n",
				"content_text": "Jeremy Johnson, <a href=\"https://medium.com/@jeremyjohnson/its-time-to-get-a-real-watch-and-an-apple-watch-doesn-t-count-a523f2819618\">It’s time to get a real watch, and an Apple Watch doesn’t count:</a>\n\n<blockquote>...watches are one of the key pieces of jewelry I can sport, and while many have no clue what’s on my wrist, those that do… well do. <strong class=\"markup--strong markup--p-strong\">And they are investments</strong>. Usually good purchases will not only last forever (with a little love and care), but go up or retain most of their value over time.</blockquote>\n\nWhen pal <a href=\"https://twitter.com/marcosacosta\">Marcos</a> started talking to me about watches, I realized they checked all the boxes cars do, but at a fraction of the price. If cars check your boxes, look into watches. Jeremy's intro will get you started without breaking the bank.\n",
				"date_published": "2017-04-09T11:48:57-07:00",
				"url": "https://therealadam.com/2017/04/09/jeremy-johnsonits-time.html",
				"tags": ["Pop Culture","Eye Candy","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/04/feedback-timing-is.html",
				"title": "Feedback: timing is everything",
				"content_html": "<p>With feedback, like jokes, timing is everything. Good feedback at a bad time won&rsquo;t do the trick.</p>\n<p>I’ve mostly experienced programming feedback through pull requests. This is way better than no feedback. However, since most pull requests occur at the end of work, and not somewhere in the middle, some kinds of feedback are not conducive to pull requests.</p>\n<p>Suppose all feedback falls somewhere on two axes: “timeliness” and “depth”. The narrow sweet spot of code review is apparent:</p>\n<p>[caption id=&ldquo;attachment_4302&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;861&rdquo;]<!-- raw HTML omitted --> Pairing and code review are not so similar[/caption]</p>\n<p>The sweet spot in the top-right corner is when code review works best: unhurried and in-depth feedback. I’d hesitate to call the lower-right corner of hurried, minimal feedback a code review at all; it’s more like rubber stamping.</p>\n<p>I’ve often referred to code review, flippantly, as the worst form of pairing yet invented. I’ve given a lot of code review feedback in the past that was better suited to the synchronous nature of pairing than the very asynchronous nature of code reviews. That said, I feel like pairing is an excellent way to give all manners of feedback in the moment the code is being conceived or written. You can immediately point out possible incorrectness or better designs and talk it out, with the code at hand, with your collaborator.</p>\n<p>However, we can’t all pair all the time. Let me show you how I’m trying to better time my feedback when I can’t share it immediately.</p>\n<!-- raw HTML omitted -->\n<p>Consider four PR subject lines. Which ones are appropriate for architectural ideas? What about optimization ideas? When is deep refactoring feedback appropriate? Can I look at one of these in an hour when I’m done with my current task?</p>\n<!-- raw HTML omitted -->\n<p>Lately, when I do pull request reviews, I use these guidelines:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Use different tactics when sharing feedback for code review; it’s not pairing. Identify patches, reviews, and full feedback pull requests. Sanity check patches, look for correctness in review, look for design in review. Use GitHub’s review process to indicate your feedback is “FYI” vs. “fix this before merging”. Time-to-response is most important for patches and fixes.</p>\n<p>Above all: giving feedback is a skill you acquire with practice, empathy, and maintaining a constructive attitude.</p>\n",
				"content_text": "With feedback, like jokes, timing is everything. Good feedback at a bad time won't do the trick.\n\nI’ve mostly experienced programming feedback through pull requests. This is way better than no feedback. However, since most pull requests occur at the end of work, and not somewhere in the middle, some kinds of feedback are not conducive to pull requests.\n\nSuppose all feedback falls somewhere on two axes: “timeliness” and “depth”. The narrow sweet spot of code review is apparent:\n\n[caption id=\"attachment_4302\" align=\"alignnone\" width=\"861\"]<img class=\"alignnone size-full wp-image-4302\" src=\"https://therealadam.com/uploads/2024/afcef31d4b.jpg\" alt=\"Pairing and code review are not so similar\" width=\"861\" height=\"797\" /> Pairing and code review are not so similar[/caption]\n\nThe sweet spot in the top-right corner is when code review works best: unhurried and in-depth feedback. I’d hesitate to call the lower-right corner of hurried, minimal feedback a code review at all; it’s more like rubber stamping.\n\nI’ve often referred to code review, flippantly, as the worst form of pairing yet invented. I’ve given a lot of code review feedback in the past that was better suited to the synchronous nature of pairing than the very asynchronous nature of code reviews. That said, I feel like pairing is an excellent way to give all manners of feedback in the moment the code is being conceived or written. You can immediately point out possible incorrectness or better designs and talk it out, with the code at hand, with your collaborator.\n\nHowever, we can’t all pair all the time. Let me show you how I’m trying to better time my feedback when I can’t share it immediately.\n\n<h2>A tale of four pull requests</h2>\n\nConsider four PR subject lines. Which ones are appropriate for architectural ideas? What about optimization ideas? When is deep refactoring feedback appropriate? Can I look at one of these in an hour when I’m done with my current task?\n\n<ul>\n<li>“Hotfix Facebook Auth scope”</li>\n<li>“Prevent sending email for failed payment jobs”</li>\n<li>“Add tagging to admin storylines listing”</li>\n<li>“WIP introduce Redis/Lua-based story indexing”</li>\n</ul>\n\nLately, when I do pull request reviews, I use these guidelines:\n\n<ul>\n<li>Figure out if this PR seems like it’s a hot patch to production, a quick fix on existing work, a PR landing new functionality, or a work-in-progress checkpoint seeking feedback.</li>\n<li>Bear in mind that hot patches and quick fixes are more time sensitive and need yes/no feedback on correctness more than detailed feedback.</li>\n<li>For hot patches (e.g. “Hotfix FB auth”), I’m only looking for “is this correct” and “will it fix the problem?”; thumbs up or thumbs down and commentary as to what I think is missing to solve the problem. No refactoring ideas. I only touch on performance if I spot a regression.</li>\n<li>For quick fixes (e.g. “Prevent sending email…”), I’m again looking for correctness and timeliness. I might leave ideas for how to improve the performance or cleanliness of the code later. Those kinds of notes are entirely up to the gumption of the other developer, though. I know the low-gumption feeling of wanting only to fix something and get on to the next thing.</li>\n<li>Landing new functionality (e.g. “Add tagging…”) receives a full review cycle. Beyond baseline correctness, I’m trying to view this code through my crystal ball. When some value of <code>N</code> is grows, will this code slow down noticeably? Is the code structured so that future changes are easy and obvious?</li>\n<li>Work-in-progress checkpoints (“WIP introduce Redis/Lua…”) are open to the full spectrum of feedback. Ideas for how to differently structure data, which APIs to export, how to structure objects, how to name the domain model, etc. are all in play. Pretty much the only thing out of play is anything that feels too close to bike shedding.</li>\n<li>Bear in mind that everyone exists on a spectrum of coding specificity. More seasoned developers are likely open to ideas for restructuring code or considering novel approaches. Less seasoned developers (including seasoned developers new to the team) likely want specific guidance about which changes to make or factors they need to consider.</li>\n<li>Where I may try to respond to hot patches and quick fixes in less than fifteen minutes, I may wait a couple hours before I look at new functionality or WIP reviews.</li>\n<li>The most difficult part with these guidelines is how to handle ideas about refactoring on time-sensitive reviews. I want to hold the line against letting lots of little fixes accrete into a medium-sized mess. I don’t want to discourage ideas for refactorings either; I want them separately so I can act on them when I have the energy to really do them.</li>\n</ul>\n\n<h2>In short</h2>\n\nUse different tactics when sharing feedback for code review; it’s not pairing. Identify patches, reviews, and full feedback pull requests. Sanity check patches, look for correctness in review, look for design in review. Use GitHub’s review process to indicate your feedback is “FYI” vs. “fix this before merging”. Time-to-response is most important for patches and fixes.\n\nAbove all: giving feedback is a skill you acquire with practice, empathy, and maintaining a constructive attitude.\n",
				"date_published": "2017-04-04T11:00:00-07:00",
				"url": "https://therealadam.com/2017/04/04/feedback-timing-is.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/04/01/practically-applying-clojure.html",
				"title": "Practically applying Clojure",
				"content_html": "<p><!-- raw HTML omitted -->Fourteen Months with Clojure.<!-- raw HTML omitted --> Dan McKinley on using Clojure to build AWS automation platform Skyliner:</p>\n<!-- raw HTML omitted -->\n<p>Also, the best and worst part of Clojure:</p>\n<!-- raw HTML omitted -->\n<p>This is probably better now that specs and schema are popular. Before, when they were mysterious maps full of Very Important State, reading Clojure code (and any kind of Lisp) was pretty challenging.</p>\n<p>Make sure you stick around for the joke about covariance and contravariance. Those type theories, hilarious!</p>\n",
				"content_text": "<a href=\"https://blog.skyliner.io/fourteen-months-with-clojure-beb8b3e4bf00\">Fourteen Months with Clojure.</a> Dan McKinley on using Clojure to build AWS automation platform Skyliner:\n\n<blockquote>The tricky part isn’t the <em class=\"markup--em markup--p-em\">language</em> so much as it is the <em class=\"markup--em markup--p-em\">slang</em>.</blockquote>\n\nAlso, the best and worst part of Clojure:\n\n<blockquote>When the going gets tough, the tough use maps</blockquote>\n\nThis is probably better now that specs and schema are popular. Before, when they were mysterious maps full of Very Important State, reading Clojure code (and any kind of Lisp) was pretty challenging.\n\nMake sure you stick around for the joke about covariance and contravariance. Those type theories, hilarious!\n",
				"date_published": "2017-04-01T15:10:42-07:00",
				"url": "https://therealadam.com/2017/04/01/practically-applying-clojure.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/30/lessons-on-software.html",
				"title": "Lessons on software complexity from MS Office",
				"content_html": "<p>I learned a lot of things from <!-- raw HTML omitted -->Complexity and Strategy<!-- raw HTML omitted --> by Terry Crowley:</p>\n<!-- raw HTML omitted -->\n<p>In other words, the ability to change a product is directly proportional to the size of N (features, requirements, spec points, etc.) for the system that express that product. You may find practices that multiply N by 0.9 so you go a little faster. You may back yourself into a corner that multiply N by 1.1 so you go a little slower. But, to borrow again from Fred Brooks, <!-- raw HTML omitted -->there is no silver bullet<!-- raw HTML omitted -->. Essential domain complexity is immutable unless you reduce the size of the domain, i.e. cut existing features.</p>\n<p>Not even fancy new technologies are correlated with reducing your multiplier, in the long run:</p>\n<!-- raw HTML omitted -->\n<p>Lastly, this is a gem about getting functionality &ldquo;for free&rdquo;:</p>\n<!-- raw HTML omitted -->\n<p>All free functionality eventually poops on your rug and chews up your shoes.</p>\n",
				"content_text": "I learned a lot of things from <a href=\"https://hackernoon.com/complexity-and-strategy-325cd7f59a92#.8lk2hrekv\">Complexity and Strategy</a> by Terry Crowley:\n\n<blockquote>\n  In Fred Brooks’ terms, this was essential complexity, not accidental complexity. Features interact — intentionally — and that makes the cost of implementing the N+1 feature closer to N than 1.\n</blockquote>\n\nIn other words, the ability to change a product is directly proportional to the size of N (features, requirements, spec points, etc.) for the system that express that product. You may find practices that multiply N by 0.9 so you go a little faster. You may back yourself into a corner that multiply N by 1.1 so you go a little slower. But, to borrow again from Fred Brooks, <a href=\"https://en.wikipedia.org/wiki/No_Silver_Bullet\">there is no silver bullet</a>. Essential domain complexity is immutable unless you reduce the size of the domain, i.e. cut existing features.\n\nNot even fancy new technologies are correlated with reducing your multiplier, in the long run:\n\n<blockquote>\n  This perspective does cause one to turn a somewhat jaundiced eye towards claims of amazing breakthroughs with new technologies...What I found is that advocates for these new technologies tended to confuse the productivity benefits of working on a small code base (small N essential complexity due to fewer feature interactions and small N cost for features that scale with size of codebase) with the benefits of the new technology itself — efforts using a new technology inherently start small so the benefits get conflated.\n</blockquote>\n\nLastly, this is a gem about getting functionality \"for free\":\n\n<blockquote>\n  So “free code” tends to be “free as in puppy” rather than “free as in beer”.\n</blockquote>\n\nAll free functionality eventually poops on your rug and chews up your shoes.\n",
				"date_published": "2017-03-30T12:54:07-07:00",
				"url": "https://therealadam.com/2017/03/30/lessons-on-software.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/29/healthcare-is-a.html",
				"title": "Healthcare is a multiplier, not a consumer good",
				"content_html": "<p>Adam Davidson tells a personal story about a relative who, with health care, could&rsquo;ve continued his career. Without that healthcare, he ended up addicted and in jail. <!-- raw HTML omitted -->What the GOP doesn&rsquo;t get about who pays for health care:<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Healthcare isn&rsquo;t consumption, like buying a TV or going to a movie. It is a <!-- raw HTML omitted -->Keynesian multiplier<!-- raw HTML omitted -->. Every dollar the government spends on it means an individual or business can spend more than a dollar on something productive in GDP terms.</p>\n<p>UPS and FedEx can&rsquo;t exist without public roads. Southwest and United Airlines can&rsquo;t exist without the FAA. Lockheed and Northrop can&rsquo;t exist without the Air Force. Walmart and McDonald&rsquo;s can&rsquo;t exist without food stamps. Entrepreneurs find it harder to start without individual access to healthcare.</p>\n<p>Yet Republicans are opposed to the existence of all of these. Perhaps business in America relies on more subsidies and government services than Republicans are willing to admit!</p>\n",
				"content_text": "Adam Davidson tells a personal story about a relative who, with health care, could've continued his career. Without that healthcare, he ended up addicted and in jail. <a href=\"http://www.newyorker.com/business/adam-davidson/what-the-g-o-p-doesnt-get-about-who-pays-for-health-care?mbid=nl_032417_Daily&amp;CNDID=46575420&amp;spMailingID=10688841&amp;spUserID=MTcyMDU2NjAwODMzS0&amp;spJobID=1121952791&amp;spReportId=MTEyMTk1Mjc5MQS2\">What the GOP doesn't get about who pays for health care:</a>\n\n<blockquote>\n  However, dividing health expenditures into these categories misses an important economic reality: health-care spending has a substantial impact on every other sort of economic activity.\n</blockquote>\n\nHealthcare isn't consumption, like buying a TV or going to a movie. It is a <a href=\"https://en.wikipedia.org/wiki/Fiscal_multiplier\">Keynesian multiplier</a>. Every dollar the government spends on it means an individual or business can spend more than a dollar on something productive in GDP terms.\n\nUPS and FedEx can't exist without public roads. Southwest and United Airlines can't exist without the FAA. Lockheed and Northrop can't exist without the Air Force. Walmart and McDonald's can't exist without food stamps. Entrepreneurs find it harder to start without individual access to healthcare.\n\nYet Republicans are opposed to the existence of all of these. Perhaps business in America relies on more subsidies and government services than Republicans are willing to admit!\n",
				"date_published": "2017-03-29T11:33:20-07:00",
				"url": "https://therealadam.com/2017/03/29/healthcare-is-a.html",
				"tags": ["The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/27/type-tinkering.html",
				"title": "Type tinkering",
				"content_html": "<p>I&rsquo;m playing with typeful language stuff. Having only done a pinch of Haskell, Scala, and Go tinkering amidst Ruby work over the past ten years, it&rsquo;s jarring. But, things are much better than they were before I started with Ruby.</p>\n<p><!-- raw HTML omitted -->Elm<!-- raw HTML omitted --> in particular is like working with a teammate who is helpful but far more detail oriented than myself. It lets me know when I missed something. It points out cases I overlooked. It&rsquo;s good software.</p>\n<p>I&rsquo;ve done less with <!-- raw HTML omitted -->Flow<!-- raw HTML omitted -->, but I like the idea of incrementally adding types to JavaScript. The type system is pragmatic and makes it easy to introduce types to a program as time and gumption permit. Having <!-- raw HTML omitted -->a repository of type definitions for popular libraries<!-- raw HTML omitted --> is a great boon too.</p>\n<p>I&rsquo;m also tinkering with <!-- raw HTML omitted -->Elixir<!-- raw HTML omitted -->, which is not really a typed thing. Erlang&rsquo;s <!-- raw HTML omitted -->dialyzer<!-- raw HTML omitted --> is similar in concept to Flow, but different in implementation. Both allow gradually introducing types to systems.</p>\n<p>I&rsquo;m more interested in types stuff for frontends than backends. I want some assurance, in the wild world of browsers and devices, that my systems are soundly structured. Types buy me that. Backends, I feel, benefit from a little more leeway, and are often faster to deploy quick fixes to, such that I can get away without the full rigor of types.</p>\n<p>Either way, I&rsquo;m jazzed about today&rsquo;s tools that help me think better as I build software.</p>\n",
				"content_text": "I'm playing with typeful language stuff. Having only done a pinch of Haskell, Scala, and Go tinkering amidst Ruby work over the past ten years, it's jarring. But, things are much better than they were before I started with Ruby.\n\n<a href=\"http://elm-lang.org\">Elm</a> in particular is like working with a teammate who is helpful but far more detail oriented than myself. It lets me know when I missed something. It points out cases I overlooked. It's good software.\n\nI've done less with <a href=\"https://flowtype.org\">Flow</a>, but I like the idea of incrementally adding types to JavaScript. The type system is pragmatic and makes it easy to introduce types to a program as time and gumption permit. Having <a href=\"https://github.com/flowtype/flow-typed\">a repository of type definitions for popular libraries</a> is a great boon too.\n\nI'm also tinkering with <a href=\"http://elixir-lang.org\">Elixir</a>, which is not really a typed thing. Erlang's <a href=\"http://erlang.org/doc/man/dialyzer.html\">dialyzer</a> is similar in concept to Flow, but different in implementation. Both allow gradually introducing types to systems.\n\nI'm more interested in types stuff for frontends than backends. I want some assurance, in the wild world of browsers and devices, that my systems are soundly structured. Types buy me that. Backends, I feel, benefit from a little more leeway, and are often faster to deploy quick fixes to, such that I can get away without the full rigor of types.\n\nEither way, I'm jazzed about today's tools that help me think better as I build software.\n",
				"date_published": "2017-03-27T09:48:51-07:00",
				"url": "https://therealadam.com/2017/03/27/type-tinkering.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/24/lets-price-externalities.html",
				"title": "Let’s price externalities, America",
				"content_html": "<p>Hello, America. We have to talk. You are built on top of a mountain of federal (a trillion or so dollars) debt. That debt covers some things we need (roads, health care, social safety nets, education, scientific research) and subsidizes distasteful things (energy companies, military contractors, banks, real estate). You could consider that debt the tip of the iceberg. We can see how it contributes to the annual federal budget in dollars and by percentages. It’s a measurable, knowable thing.</p>\n<p>Unfortunately, there’s also a ton of unmeasured debt we are accruing. We have to pay the price for it through social norms and charity. Here’s a hackish list:</p>\n<!-- raw HTML omitted -->\n<p>But I digress and rant. And rant. Economists call these <!-- raw HTML omitted -->externalities<!-- raw HTML omitted -->. It&rsquo;s when you have some accidental cost or benefit that is paid for by a third party, e.g. Walmart paying less than a living wage because the government will pick up the tab through welfare.</p>\n<p>Point is, we’re underpaying for a lot of stuff. And that’s fun for some of us. We eat avocado toast, take exciting trips around the world, maybe drive race cars. We sort ourselves out so we don’t see the literally millions of people suffering because we’re not paying what it takes to give everyone a chance at doing better off than their parents or picking themselves up when life knocks them down. And then when some transparently awful populist blowhard runs for president, we’re shocked, just shocked, that he ends up winning.</p>\n<p>Bring the higher taxes. Make me pay more to eat out. Charge me more for gas. I don’t mind thinking twice about whether I should subscribe to HBO <!-- raw HTML omitted -->and<!-- raw HTML omitted --> Showtime <!-- raw HTML omitted -->and<!-- raw HTML omitted --> Netflix. If I can’t go to Disney World as often, so be it.</p>\n<p>It’s a small price to pay to have avoided what’s coming over the next four years: an increasingly unequal, unfair world for those of us who aren’t already doing great and white and male. Let me pay more for a greater country where everyone, not just the affluent, seek what it is that makes them happy in life without the fear of illness, bad circumstance, political or racial backlash. Let&rsquo;s not lord that greater country over people to &ldquo;motivate them to work harder and escape their current lot in life&rdquo;. Let&rsquo;s price the externalities that separate the concerns of the rich from the stresses of the poor and let&rsquo;s all pay our share.</p>\n",
				"content_text": "Hello, America. We have to talk. You are built on top of a mountain of federal (a trillion or so dollars) debt. That debt covers some things we need (roads, health care, social safety nets, education, scientific research) and subsidizes distasteful things (energy companies, military contractors, banks, real estate). You could consider that debt the tip of the iceberg. We can see how it contributes to the annual federal budget in dollars and by percentages. It’s a measurable, knowable thing.\n\nUnfortunately, there’s also a ton of unmeasured debt we are accruing. We have to pay the price for it through social norms and charity. Here’s a hackish list:\n\n<ul>\n<li>food service is systematically underpaid so we tip them, most often poorly</li>\n<li>the people who clean our hotel rooms are underpaid because they are invisible, unskilled, and often immigrant; depending on what you read, you should tip them but they also say you should hide your valuables from them so which is it, leave money laying around or distrust them not to rub your toothbrush in the toilet?</li>\n<li>we pay a small tax on the amount of gasoline we use, but it is comically low, hasn’t gone up in years, and isn’t enough to pay for the usage of our crumbling roads, bridges, etc. sometimes it's also used to pay for public transit, which is perverse during high gasoline prices if you've studied even rudimentary supply-and-demand</li>\n<li>our children are raised mostly by women who are expected to just do it for free, despite what else they may want to do with their lives</li>\n<li>we let financiers play with our retirement money, in theory because they know how to allocate it, get the occasional Google but more often some business tragicomedy, and in return they get to take a few percent off the top, which ends up being a huge number, for the service basically of them having gone to Harvard or their daddy knew a guy</li>\n<li>millions of people live paycheck to paycheck, go hungry, go into massive debt if life comes at them wrong, etc. all because the Walmarts of the world (and there are way more than just Walmart) pay them next to nothing expecting the federal government to pick up the slack except the federal government has been systematically dismantled over the course of decades by men who fancy themselves smart enough to start The Next Walmart but in fact are barely smart enough to get themselves elected in a fair contest let alone actually lead a congressional district</li>\n</ul>\n\nBut I digress and rant. And rant. Economists call these <a href=\"https://en.wikipedia.org/wiki/Externality\">externalities</a>. It's when you have some accidental cost or benefit that is paid for by a third party, e.g. Walmart paying less than a living wage because the government will pick up the tab through welfare.\n\nPoint is, we’re underpaying for a lot of stuff. And that’s fun for some of us. We eat avocado toast, take exciting trips around the world, maybe drive race cars. We sort ourselves out so we don’t see the literally millions of people suffering because we’re not paying what it takes to give everyone a chance at doing better off than their parents or picking themselves up when life knocks them down. And then when some transparently awful populist blowhard runs for president, we’re shocked, just shocked, that he ends up winning.\n\nBring the higher taxes. Make me pay more to eat out. Charge me more for gas. I don’t mind thinking twice about whether I should subscribe to HBO <em>and</em> Showtime <em>and</em> Netflix. If I can’t go to Disney World as often, so be it.\n\nIt’s a small price to pay to have avoided what’s coming over the next four years: an increasingly unequal, unfair world for those of us who aren’t already doing great and white and male. Let me pay more for a greater country where everyone, not just the affluent, seek what it is that makes them happy in life without the fear of illness, bad circumstance, political or racial backlash. Let's not lord that greater country over people to \"motivate them to work harder and escape their current lot in life\". Let's price the externalities that separate the concerns of the rich from the stresses of the poor and let's all pay our share.\n",
				"date_published": "2017-03-24T06:24:40-07:00",
				"url": "https://therealadam.com/2017/03/24/lets-price-externalities.html",
				"tags": ["The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/22/personal-city-guides.html",
				"title": "Personal city guides",
				"content_html": "<p>I’ve seen lots of sites about how to use software. <!-- raw HTML omitted -->The Setup<!-- raw HTML omitted --> and <!-- raw HTML omitted -->The Sweet Setup<!-- raw HTML omitted --> are my favorites. You can find lots of sites about how to use ideas like Inbox Zero or Crossfit. People love this stuff.</p>\n<p>What I don’t see a lot of is how to <!-- raw HTML omitted -->use<!-- raw HTML omitted --> a city, as a visitor or resident. I suspect these things are all around me and I don’t even notice.</p>\n<p>A travel guide will tell you where you can go and what you can do, but it won’t tell you how you should go about it. It won’t tell you the little things you’d do as a resident but wouldn’t notice as a traveler. They don’t tell residents (or future residents) what the <!-- raw HTML omitted -->essence<!-- raw HTML omitted --> of the city is and what you should do when it’s nice, or gloomy, or when you want to go out, or when you’re hungry.</p>\n<p>For example, if I had to write an Austin Setup guide, it would include things like:</p>\n<!-- raw HTML omitted -->\n<p>The thing is, this would end up reflecting <!-- raw HTML omitted -->my<!-- raw HTML omitted --> idioms. Not as useful for someone who wants to do sports, or outdoorsy activities, or music. This thing is more personal, like an interview on The Setup about how people use computers to do their cool thing. Sort of a &ldquo;how I&rsquo;ve hacked my city to work better for me&rdquo; guide. A reverse travel guide of sorts; not for everyone else, just for me.</p>\n",
				"content_text": "I’ve seen lots of sites about how to use software. <a href=\"https://usesthis.com\">The Setup</a> and <a href=\"http://thesweetsetup.com\">The Sweet Setup</a> are my favorites. You can find lots of sites about how to use ideas like Inbox Zero or Crossfit. People love this stuff.\n\nWhat I don’t see a lot of is how to <em>use</em> a city, as a visitor or resident. I suspect these things are all around me and I don’t even notice.\n\nA travel guide will tell you where you can go and what you can do, but it won’t tell you how you should go about it. It won’t tell you the little things you’d do as a resident but wouldn’t notice as a traveler. They don’t tell residents (or future residents) what the <em>essence</em> of the city is and what you should do when it’s nice, or gloomy, or when you want to go out, or when you’re hungry.\n\nFor example, if I had to write an Austin Setup guide, it would include things like:\n\n<ul>\n    <li>what to eat lots of (tacos and breakfast) and what to eat little of (Italian, oddly enough)</li>\n    <li>where to go when it’s nice outside (S. Congress, Auditorium shores, or Zilker park), where to go when it’s blazing hot (Barton Springs), or where to go when it’s miserable outside (one of the many great coffee shops)</li>\n    <li>where to find funny people and where to find technology people (because those are my scenes)</li>\n</ul>\n\nThe thing is, this would end up reflecting <em>my</em> idioms. Not as useful for someone who wants to do sports, or outdoorsy activities, or music. This thing is more personal, like an interview on The Setup about how people use computers to do their cool thing. Sort of a \"how I've hacked my city to work better for me\" guide. A reverse travel guide of sorts; not for everyone else, just for me.\n",
				"date_published": "2017-03-22T08:52:49-07:00",
				"url": "https://therealadam.com/2017/03/22/personal-city-guides.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/21/universes-from-which.html",
				"title": "Universes from which to source test names",
				"content_html": "<p>A silly bit of friction in writing good tests is coming up with consistent, distinctive names for the models or object you may create. Libraries that generate fake names, like Faker, are fun for this, but they don&rsquo;t produce consistent results. Thus I end up thinking too hard.</p>\n<p>Instead, I like to use names from various fictional-ish universes:</p>\n<!-- raw HTML omitted -->\n<p>Hopefully my teammates enjoy these little easter eggs as much as I enjoy looking them up when I need something fancier and less dry than <!-- raw HTML omitted -->metasyntactic variables<!-- raw HTML omitted -->.</p>\n",
				"content_text": "A silly bit of friction in writing good tests is coming up with consistent, distinctive names for the models or object you may create. Libraries that generate fake names, like Faker, are fun for this, but they don't produce consistent results. Thus I end up thinking too hard.\n\nInstead, I like to use names from various fictional-ish universes:\n\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Wile_E._Coyote_and_the_Road_Runner#Acme_Corporation\">Wile E. Coyote and the Road Runner</a>: Acme Corp, Ajax, Fleet Foot corp. etc. Bonus: read through the extensive laws and rules of this universe!</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Mickey_Mouse_universe#Ajax_name_brand\">Mickey Mouse universe</a>: you can't go wrong with putting Disney trademarks in your code.</li>\n<li><a href=\"https://en.wikipedia.org/wiki/CIA_cryptonym#Known_cryptonyms\">CIA cryptonyms</a>: when I want my teammates to wonder if they know everything going on with our project.</li>\n</ul>\n\nHopefully my teammates enjoy these little easter eggs as much as I enjoy looking them up when I need something fancier and less dry than <a href=\"https://en.wikipedia.org/wiki/Metasyntactic_variable\">metasyntactic variables</a>.\n",
				"date_published": "2017-03-21T10:25:23-07:00",
				"url": "https://therealadam.com/2017/03/21/universes-from-which.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/20/you-should-practice.html",
				"title": "You should practice preparatory refactoring",
				"content_html": "<p>When your project reaches midlife and tasks start taking noticeably longer, that&rsquo;s the time to refactor. Not to radically decouple your software or erect onerous boundaries. Refactor to prepare the code for the next feature you&rsquo;re going to build. Ron Jeffries, <!-- raw HTML omitted -->Refactoring &ndash; Not on the backlog!<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Check out his drawings, telling the story of a project evolving from a clear lawn to one overwhelmed with brush. Once your project is overwhelmed with code slowing you down, don’t burn it down. Jeffries says we should instead use whatever work is next to do enabling refactorings to make the project work happens.</p>\n<p>Locality is such a strong force in software. What I&rsquo;m changing this week I will probably change next week too. Thus, it’s likely that refactoring will help the next bit of project work. Repeat several times and a new golden path emerges through your software.</p>\n<p>Don’t reach for a new master plan when the effort to change your software goes up. Pave the cow paths through whatever work you’re doing!</p>\n",
				"content_text": "When your project reaches midlife and tasks start taking noticeably longer, that's the time to refactor. Not to radically decouple your software or erect onerous boundaries. Refactor to prepare the code for the next feature you're going to build. Ron Jeffries, <a href=\"http://ronjeffries.com/xprog/articles/refactoring-not-on-the-backlog/\">Refactoring -- Not on the backlog!</a>\n\n<blockquote>\n  Simples! We take the next feature that we are asked to build, and instead of detouring around all the weeds and bushes, we take the time to clear a path through some of them. Maybe we detour around others. We improve the code where we work, and ignore the code where we don't have to work. We get a nice clean path for some of our work. Odds are, we'll visit this place again: that's how software development works.\n</blockquote>\n\nCheck out his drawings, telling the story of a project evolving from a clear lawn to one overwhelmed with brush. Once your project is overwhelmed with code slowing you down, don’t burn it down. Jeffries says we should instead use whatever work is next to do enabling refactorings to make the project work happens.\n\nLocality is such a strong force in software. What I'm changing this week I will probably change next week too. Thus, it’s likely that refactoring will help the next bit of project work. Repeat several times and a new golden path emerges through your software.\n\nDon’t reach for a new master plan when the effort to change your software goes up. Pave the cow paths through whatever work you’re doing!\n",
				"date_published": "2017-03-20T08:13:33-07:00",
				"url": "https://therealadam.com/2017/03/20/you-should-practice.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/15/sometimes-its-okay.html",
				"title": "Sometimes it's okay to interrupt a programmer",
				"content_html": "<p>I try <!-- raw HTML omitted -->really<!-- raw HTML omitted --> hard to avoid interrupting people. Golden rule: if I don’t want interruptions I shouldn’t impose them on other, right? Not entirely so.</p>\n<p>Having teammates around, and interrupting them, has saved my butt. I’ve avoided tons of unnecessary work and solving the wrong problems, and that’s just the last week!</p>\n<p>Communicating with others is a messy, lossy affair. We send messages, emails, bug reports with tons of partial context and implicit assumption. Not (always) because we lack empathy or want to bury ideas in unstated assumptions, but because we’re in a hurry, multitasking, or stressed out.</p>\n<p>When you interrupt a co-worker you can turn five minutes of messages back and forth to thirty seconds of “Did you mean this?” “Yeah I meant that!” “Cool.”</p>\n<p>When you interrupt a co-worker you can ask “this made sense but you also mentioned this which didn’t entirely make sense” and they can say “oh yes because here’s the needle in the haystack” and now you can skip straight to working with the needle instead of sifting through the haystack that was your <!-- raw HTML omitted -->own<!-- raw HTML omitted --> assumptions wrongly contextualized.</p>\n<p>If your coworker is smart, they are keeping track of why people interrupt them. Later they’ll try to make it easier for you to not interrupt them, e.g. write documentation or automate a task. Maybe they <!-- raw HTML omitted -->want<!-- raw HTML omitted --> you to interrupt them so that whenever someone wonders “why haven’t we automated this?” they can talk to you about how it’s important to have a human hand on it rather than let failed automation go unnoticed.</p>\n<p>There are plenty of reasons <!-- raw HTML omitted -->not<!-- raw HTML omitted --> to interrupt someone. I know the struggle. I do my best to respect when people put their head down to concentrate and get stuff done. I always spend a few minutes rereading communications or spelunking the code, logs, or whatever context I have before interrupting someone. It’d be rude to interrupt before I even started trying. But, there’s a moment when the cost and benefit of interrupting someone so I can get something done faster swings towards mutual benefit. That’s when I interrupt them.</p>\n",
				"content_text": "I try <em>really</em> hard to avoid interrupting people. Golden rule: if I don’t want interruptions I shouldn’t impose them on other, right? Not entirely so.\n\nHaving teammates around, and interrupting them, has saved my butt. I’ve avoided tons of unnecessary work and solving the wrong problems, and that’s just the last week!\n\nCommunicating with others is a messy, lossy affair. We send messages, emails, bug reports with tons of partial context and implicit assumption. Not (always) because we lack empathy or want to bury ideas in unstated assumptions, but because we’re in a hurry, multitasking, or stressed out.\n\nWhen you interrupt a co-worker you can turn five minutes of messages back and forth to thirty seconds of “Did you mean this?” “Yeah I meant that!” “Cool.”\n\nWhen you interrupt a co-worker you can ask “this made sense but you also mentioned this which didn’t entirely make sense” and they can say “oh yes because here’s the needle in the haystack” and now you can skip straight to working with the needle instead of sifting through the haystack that was your <em>own</em> assumptions wrongly contextualized.\n\nIf your coworker is smart, they are keeping track of why people interrupt them. Later they’ll try to make it easier for you to not interrupt them, e.g. write documentation or automate a task. Maybe they <em>want</em> you to interrupt them so that whenever someone wonders “why haven’t we automated this?” they can talk to you about how it’s important to have a human hand on it rather than let failed automation go unnoticed.\n\nThere are plenty of reasons <em>not</em> to interrupt someone. I know the struggle. I do my best to respect when people put their head down to concentrate and get stuff done. I always spend a few minutes rereading communications or spelunking the code, logs, or whatever context I have before interrupting someone. It’d be rude to interrupt before I even started trying. But, there’s a moment when the cost and benefit of interrupting someone so I can get something done faster swings towards mutual benefit. That’s when I interrupt them.\n",
				"date_published": "2017-03-15T08:48:50-07:00",
				"url": "https://therealadam.com/2017/03/15/sometimes-its-okay.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/15/lets-not-refer.html",
				"title": "Let's not refer to Ruby classes by string",
				"content_html": "<p>I am basically OK with the tradeoffs involved in using autoloading in Rails. I do, however, rankle a little bit at this bit of advice in the <!-- raw HTML omitted -->Rails guide to developing engines<!-- raw HTML omitted -->.</p>\n<p>[caption id=&ldquo;attachment_4216&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;661&rdquo;]<!-- raw HTML omitted --> Screencapture from Rails Guide to Engines[/caption]</p>\n<p>In short, when configuring an engine from an initializer, you’re supposed to protect references to autoloaded application classes (e.g. models) by encoding them as strings. Your engine later <!-- raw HTML omitted -->constantize<!-- raw HTML omitted -->s the string to a class and everything is back to normal.</p>\n<p>A thing I am not OK with is “programming with strings”. As an ideal, strings are inputs from other machines or humans and internal references to code are something else. In Ruby, symbols fill in nicely for the latter. Could I refer to classes as Symbols instead of Strings and live with the tradeoffs?</p>\n<p>Well it turns out, oddly enough, that Rails is pretty sparing with Symbol extensions. It has only 120 methods after Rails loads, compared to 257 for String. There are no specific extensions to symbol, particularly for class-ifying them. Even worse (for my purposes), there isn’t a particularly great way to use symbols to refer to namespaced classes (e.g. <!-- raw HTML omitted -->Foo::Bar<!-- raw HTML omitted -->).</p>\n<p>But, the Rails router has a shorthand for referring to namespaced classes and methods, e.g. <!-- raw HTML omitted -->foo/bar#baz<!-- raw HTML omitted -->. It doesn’t bother me at all.</p>\n<p>In code I have to work with, if at all possible, I’d rather refer to classes like so:</p>\n<!-- raw HTML omitted -->\n<p>But, as ever, tradeoffs.</p>\n",
				"content_text": "I am basically OK with the tradeoffs involved in using autoloading in Rails. I do, however, rankle a little bit at this bit of advice in the <a href=\"http://guides.rubyonrails.org/engines.html\">Rails guide to developing engines</a>.\n\n[caption id=\"attachment_4216\" align=\"alignnone\" width=\"661\"]<img class=\"alignnone size-full wp-image-4216\" src=\"https://therealadam.com/uploads/2024/c45df857d1.jpg\" alt=\"Screencapture from Rails Guide to Engines\" width=\"661\" height=\"298\" /> Screencapture from Rails Guide to Engines[/caption]\n\nIn short, when configuring an engine from an initializer, you’re supposed to protect references to autoloaded application classes (e.g. models) by encoding them as strings. Your engine later <code>constantize</code>s the string to a class and everything is back to normal.\n\nA thing I am not OK with is “programming with strings”. As an ideal, strings are inputs from other machines or humans and internal references to code are something else. In Ruby, symbols fill in nicely for the latter. Could I refer to classes as Symbols instead of Strings and live with the tradeoffs?\n\nWell it turns out, oddly enough, that Rails is pretty sparing with Symbol extensions. It has only 120 methods after Rails loads, compared to 257 for String. There are no specific extensions to symbol, particularly for class-ifying them. Even worse (for my purposes), there isn’t a particularly great way to use symbols to refer to namespaced classes (e.g. <code>Foo::Bar</code>).\n\nBut, the Rails router has a shorthand for referring to namespaced classes and methods, e.g. <code>foo/bar#baz</code>. It doesn’t bother me at all.\n\nIn code I have to work with, if at all possible, I’d rather refer to classes like so:\n\n<ol>\n<li>Refer to classes by their real ClassName whenever possible given the tradeoffs of autoloading</li>\n<li>When autoloading gets in the way, refer to things by symbols if at all possible</li>\n<li>If symbols aren’t expressive enough, use a shorthand encoded in a string, e.g. <code>foo/bar#baz</code></li>\n<li>… (alternatives I haven't thought of yet)</li>\n<li>Refer to classes by their full string-y name</li>\n</ol>\n\nBut, as ever, tradeoffs.\n",
				"date_published": "2017-03-15T08:30:52-07:00",
				"url": "https://therealadam.com/2017/03/15/lets-not-refer.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/13/theyre-okay-political.html",
				"title": "They're okay political opinions",
				"content_html": "<p>The downside to the Republicans proposing a healthcare bill is that it&rsquo;s a major legislative disappointment, given they&rsquo;ve spent seven years symbolically opposing healthcare. The upside is that, at least, we have something substantive to discuss about healthcare. The silver lining is possibly voters will come to see the Republican party for its cynicism.</p>\n<p>What is there to talk about? We could start with <!-- raw HTML omitted -->David Brooks on how we got to the point<!-- raw HTML omitted --> wherein the GOP has received their moment in the sun. He argues that neglecting three ideas led us to the propaganda of the Trump era:</p>\n<!-- raw HTML omitted -->\n<p>Brooks argued Obama should have addressed these crises, which the ACA arguably did for the second. IMO, Republicans stoked all three of these fires while pointing their fingers elsewhere. Supply side economics built the first crisis, privatization the second, and propaganda media the third.</p>\n<p>Meanwhile in Congress, Paul Ryan is rolling up his sleeves and saying taking healthcare away from Americans is about giving them freedom. <!-- raw HTML omitted -->Paul Ryan&rsquo;s Misguided Sense of Freedom<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>He went on to argue that Obamacare abridges this freedom by telling you what to buy. But his first thought offers a meaningful and powerful definition of freedom. Conservatives are typically proponents of negative liberty: the freedom from constraints and impediments. Mr. Ryan formulated a positive liberty: freedom derived from having what it takes to fulfill one’s needs and therefore to direct one’s own life.</p>\n<!-- raw HTML omitted -->\n<p>(Positive and negative freedom, as terminology, always confuse me; this bit is well written!) This op-ed makes a nice point: healthcare as envisioned by Obamacare, and other more progressive schemes, imagine an America where we are free from worrying about health care. Preventative care happens because we needn&rsquo;t worry whether we should spend the money elsewhere or take the day off. Major health care events like pregancy or major illness are only intimidating because they are life events, not life-changing unfunded expenditures.</p>\n<p>I cannot understand why, outside of deep cynicism of the American dream, Republicans in Congress would not want this kind of free world.</p>\n",
				"content_text": "The downside to the Republicans proposing a healthcare bill is that it's a major legislative disappointment, given they've spent seven years symbolically opposing healthcare. The upside is that, at least, we have something substantive to discuss about healthcare. The silver lining is possibly voters will come to see the Republican party for its cynicism.\n\nWhat is there to talk about? We could start with <a href=\"https://www.nytimes.com/2017/03/10/opinion/the-republican-health-care-crackup.html?em_pos=small&amp;emc=edit_ty_20170310&amp;nl=opinion-today&amp;nl_art=1&amp;nlid=23157028&amp;ref=headline&amp;te=1&amp;_r=1\">David Brooks on how we got to the point</a> wherein the GOP has received their moment in the sun. He argues that neglecting three ideas led us to the propaganda of the Trump era:\n\n<blockquote>\n  First, the crisis of opportunity. People with fewer skills were seeing their wages stagnate, the labor markets evaporate. Second, the crisis of solidarity. The social fabric, especially for those without a college degree, was disintegrating — marriage rates plummeting, opiate abuse rates rising. Third, the crisis of authority. Distrust in major institutions crossed some sort of threshold. People had so lost trust in government, the media, the leadership class in general, that they were willing to abandon truth and decorum and embrace authoritarian thuggery to blow it all up.\n</blockquote>\n\nBrooks argued Obama should have addressed these crises, which the ACA arguably did for the second. IMO, Republicans stoked all three of these fires while pointing their fingers elsewhere. Supply side economics built the first crisis, privatization the second, and propaganda media the third.\n\nMeanwhile in Congress, Paul Ryan is rolling up his sleeves and saying taking healthcare away from Americans is about giving them freedom. <a href=\"https://www.nytimes.com/2017/03/03/opinion/paul-ryans-misguided-sense-of-freedom.html?em_pos=large&amp;emc=edit_ty_20170303&amp;nl=opinion-today&amp;nlid=23157028&amp;ref=headline&amp;te=1\">Paul Ryan's Misguided Sense of Freedom</a>:\n\n<blockquote>\n  ...But Mr. Ryan is sure they will come up with something because they know, as he said in a recent tweet, “Freedom is the ability to buy what you want to fit what you need.”\n\n  He went on to argue that Obamacare abridges this freedom by telling you what to buy. But his first thought offers a meaningful and powerful definition of freedom. Conservatives are typically proponents of negative liberty: the freedom from constraints and impediments. Mr. Ryan formulated a positive liberty: freedom derived from having what it takes to fulfill one’s needs and therefore to direct one’s own life.\n</blockquote>\n\n(Positive and negative freedom, as terminology, always confuse me; this bit is well written!) This op-ed makes a nice point: healthcare as envisioned by Obamacare, and other more progressive schemes, imagine an America where we are free from worrying about health care. Preventative care happens because we needn't worry whether we should spend the money elsewhere or take the day off. Major health care events like pregancy or major illness are only intimidating because they are life events, not life-changing unfunded expenditures.\n\nI cannot understand why, outside of deep cynicism of the American dream, Republicans in Congress would not want this kind of free world.\n",
				"date_published": "2017-03-13T05:46:52-07:00",
				"url": "https://therealadam.com/2017/03/13/theyre-okay-political.html",
				"tags": ["The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/10/a-little-peoplemover.html",
				"title": "A little PeopleMover 💌",
				"content_html": "<p>I love the <!-- raw HTML omitted -->Tomorrowland Transit Authority PeopleMover<!-- raw HTML omitted -->. It&rsquo;s what a transportation system should be.</p>\n<p>[caption id=&ldquo;attachment_4190&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;500&rdquo;]<!-- raw HTML omitted --> People Mover entrance, overlooking Main Street and the Cinderalla Castle, overlooking Tomorrowland[/caption]</p>\n<p>Outside but covered. Elevated so pedestrians can pass below it. Passing in and out of nearby structures. Couch-like.</p>\n<p>[caption id=&ldquo;attachment_4191&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;500&rdquo;]<!-- raw HTML omitted --> The People Mover over Test Track and Space Mountain[/caption]</p>\n<p>Futuristic but achievable. <!-- raw HTML omitted -->Doesn&rsquo;t isolate people from each other<!-- raw HTML omitted -->. You&rsquo;re one of my favorites, People Mover.</p>\n",
				"content_text": "I love the <a href=\"https://en.wikipedia.org/wiki/Tomorrowland_Transit_Authority_PeopleMover\">Tomorrowland Transit Authority PeopleMover</a>. It's what a transportation system should be.\n\n[caption id=\"attachment_4190\" align=\"alignnone\" width=\"500\"]<img class=\"alignnone size-full wp-image-4190\" src=\"https://therealadam.com/uploads/2024/dcc239724c.jpg\" alt=\"People Mover Disney World\" width=\"500\" height=\"170\" /> People Mover entrance, overlooking Main Street and the Cinderalla Castle, overlooking Tomorrowland[/caption]\n\nOutside but covered. Elevated so pedestrians can pass below it. Passing in and out of nearby structures. Couch-like.\n\n[caption id=\"attachment_4191\" align=\"alignnone\" width=\"500\"]<img class=\"alignnone size-full wp-image-4191\" src=\"https://therealadam.com/uploads/2024/c76712f9a6.jpg\" alt=\"People Mover Disney World\" width=\"500\" height=\"252\" /> The People Mover over Test Track and Space Mountain[/caption]\n\nFuturistic but achievable. <a href=\"https://therealadam.com/2016/08/01/getting-around-together/\">Doesn't isolate people from each other</a>. You're one of my favorites, People Mover.\n",
				"date_published": "2017-03-10T14:27:39-07:00",
				"url": "https://therealadam.com/2017/03/10/a-little-peoplemover.html",
				"tags": ["Pop Culture","Disney"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/08/your-product-manager.html",
				"title": "Your product manager could save your day",
				"content_html": "<p>I thought the feature I&rsquo;m working on was sunk. An API we integrate with is, let us say kindly, Very Much Not Great. Other vendors provide an API where we can request All The Things and retrieve it page by page. This API was not nearly so great, barely documented, and the example query to do what I needed didn&rsquo;t even work.</p>\n<p>Sunk.</p>\n<p>Luckily, only an hour in, I rolled over to the product manager and asked if it was okay if we were a little clever about the feature. We couldn&rsquo;t request All The Things, but we could request Each of The Things that we knew about. It wasn&rsquo;t great, but it was better than sunk.</p>\n<p>The product manager proceeded to tell me that was okay and in fact that&rsquo;s kind of how the feature works for other APIs too. I hadn&rsquo;t noticed this because I was up to my neck in code details. She described how this feature is used in out onboarding process. It wouldn&rsquo;t matter, at that level, whether we made a dozen requests or a hundred.</p>\n<p>I wrote basically no code that day. Someone who &ldquo;crushes code&rdquo; or &ldquo;moves fast and breaks things&rdquo; would say I didn&rsquo;t pull my weight. Screw &lsquo;em.</p>\n<p>I didn&rsquo;t go down a rabbit hole valiantly trying to figure out how to make a sub-par API work better. I didn&rsquo;t invent some other way for this feature to work. My wheels were spinning, but only for a moment.</p>\n<p>Instead, I worked with the team, learned about the product, brainstormed, and figured out a good way forward. I call it a very productive day.</p>\n",
				"content_text": "I thought the feature I'm working on was sunk. An API we integrate with is, let us say kindly, Very Much Not Great. Other vendors provide an API where we can request All The Things and retrieve it page by page. This API was not nearly so great, barely documented, and the example query to do what I needed didn't even work.\n\nSunk.\n\nLuckily, only an hour in, I rolled over to the product manager and asked if it was okay if we were a little clever about the feature. We couldn't request All The Things, but we could request Each of The Things that we knew about. It wasn't great, but it was better than sunk.\n\nThe product manager proceeded to tell me that was okay and in fact that's kind of how the feature works for other APIs too. I hadn't noticed this because I was up to my neck in code details. She described how this feature is used in out onboarding process. It wouldn't matter, at that level, whether we made a dozen requests or a hundred.\n\nI wrote basically no code that day. Someone who \"crushes code\" or \"moves fast and breaks things\" would say I didn't pull my weight. Screw 'em.\n\nI didn't go down a rabbit hole valiantly trying to figure out how to make a sub-par API work better. I didn't invent some other way for this feature to work. My wheels were spinning, but only for a moment.\n\nInstead, I worked with the team, learned about the product, brainstormed, and figured out a good way forward. I call it a very productive day.\n",
				"date_published": "2017-03-08T16:14:00-07:00",
				"url": "https://therealadam.com/2017/03/08/your-product-manager.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/06/three-nice-qualities.html",
				"title": "Three Nice Qualities",
				"content_html": "<p><!-- raw HTML omitted -->One of my friends<!-- raw HTML omitted --> has been working on a sort of community software for several years now. Uniquely, this software, <!-- raw HTML omitted -->Uncommon<!-- raw HTML omitted -->, is designed to avoid invading and obstructing your life. From speaking with my Brian, it sounds like people often mistake this community for a forum or a social media group. That’s natural; we often understand new things by comparing or reducing them to old things we already understand.</p>\n<p>The real Quality Uncommon is trying to embody is that of a small dinner party. How do people interact in these small social settings? How can software provide constructive social norms like you’d naturally observe in that setting?</p>\n<!-- raw HTML omitted -->\n<p>I’m currently reading <!-- raw HTML omitted --><!-- raw HTML omitted -->How Buildings Learn<!-- raw HTML omitted --> <!-- raw HTML omitted --><!-- raw HTML omitted -->(also a video series)<!-- raw HTML omitted -->. It’s about architecture, building design, fancy buildings, un-fancy buildings, pretty buildings, ugly buildings, etc. Mostly it’s about how buildings are suited for their occupants or not and whether those buildings can change over time to accommodate the current or future occupants. The main through-lines of the book are 1) function dictates form and 2) function is learned over time, not specified.</p>\n<p>A building that embodies the Quality described by <!-- raw HTML omitted -->How Buildings Learn<!-- raw HTML omitted --> uses learning and change over time to become better. A building with the Quality answers 1) How does one design a building such that it can allow change over time while meeting the needs and wants of the customer paying for its current construction? and 2) How can the building learn about the functions its occupants need over time so that it changes at a lower cost than tearing it down and starting a new building?</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Bret Victor<!-- raw HTML omitted --> has bigger ideas for computing. He seeks to design systems that help us explore and reason on big problems. Rather than using computers as blunt tools for doing the busy work of our day-to-day jobs as we currently do, we should build systems that help all of us think creatively at a higher level than we currently do.</p>\n<p>Software that embodies that Quality is less like a screen and input device and more like a working library. Information you need, in the form of books and videos, line the walls. Where there are no books, there are whiteboards for brainstorming, sharing ideas, and keeping track of things. In the center of the room are wide, spacious desks; you can sit down to focus on working something through or stand and shuffle papers around to try and organize a problem such that an insight reveals itself. You don’t work <!-- raw HTML omitted -->at<!-- raw HTML omitted --> the computer, you work <!-- raw HTML omitted -->amongst<!-- raw HTML omitted --> the information.</p>\n<!-- raw HTML omitted -->\n<p>They&rsquo;re all good qualities. Let&rsquo;s build &lsquo;em all.</p>\n",
				"content_text": "<a href=\"http://brianbailey.me\">One of my friends</a> has been working on a sort of community software for several years now. Uniquely, this software, <a href=\"https://uncommon.cc/home\">Uncommon</a>, is designed to avoid invading and obstructing your life. From speaking with my Brian, it sounds like people often mistake this community for a forum or a social media group. That’s natural; we often understand new things by comparing or reducing them to old things we already understand.\n\nThe real Quality Uncommon is trying to embody is that of a small dinner party. How do people interact in these small social settings? How can software provide constructive social norms like you’d naturally observe in that setting?\n\n<hr />\n\nI’m currently reading <em><a href=\"https://en.wikipedia.org/wiki/How_Buildings_Learn\">How Buildings Learn</a> </em><a href=\"https://www.youtube.com/watch?v=AvEqfg2sIH0\">(also a video series)</a>. It’s about architecture, building design, fancy buildings, un-fancy buildings, pretty buildings, ugly buildings, etc. Mostly it’s about how buildings are suited for their occupants or not and whether those buildings can change over time to accommodate the current or future occupants. The main through-lines of the book are 1) function dictates form and 2) function is learned over time, not specified.\n\nA building that embodies the Quality described by <em>How Buildings Learn</em> uses learning and change over time to become better. A building with the Quality answers 1) How does one design a building such that it can allow change over time while meeting the needs and wants of the customer paying for its current construction? and 2) How can the building learn about the functions its occupants need over time so that it changes at a lower cost than tearing it down and starting a new building?\n\n<hr />\n\n<a href=\"http://worrydream.com\">Bret Victor</a> has bigger ideas for computing. He seeks to design systems that help us explore and reason on big problems. Rather than using computers as blunt tools for doing the busy work of our day-to-day jobs as we currently do, we should build systems that help all of us think creatively at a higher level than we currently do.\n\nSoftware that embodies that Quality is less like a screen and input device and more like a working library. Information you need, in the form of books and videos, line the walls. Where there are no books, there are whiteboards for brainstorming, sharing ideas, and keeping track of things. In the center of the room are wide, spacious desks; you can sit down to focus on working something through or stand and shuffle papers around to try and organize a problem such that an insight reveals itself. You don’t work <em>at</em> the computer, you work <em>amongst</em> the information.\n\n<hr />\n\nThey're all good qualities. Let's build 'em all.\n",
				"date_published": "2017-03-06T09:59:14-07:00",
				"url": "https://therealadam.com/2017/03/06/three-nice-qualities.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/02/i-have-become.html",
				"title": "I have become an accomplished typist",
				"content_html": "<p>Over the years, many hours in front of a computer have afforded me the gift of keyboarding skills. I&rsquo;ve put in the Gladwellian ten thousand hours of work and it&rsquo;s really paid off. I type fairly quickly, somewhat precisely, and often loudly.</p>\n<p>Pursuant to this great talent, I&rsquo;ve optimized my computer to have everything at-hand when I&rsquo;m typing. I don&rsquo;t religiously avoid the mouse. I do seek more ways to use the keyboard to get stuff done quickly and with ease. Thanks to tools like <!-- raw HTML omitted -->Alfred<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Hammerspoon<!-- raw HTML omitted -->, I&rsquo;ve acheived that.</p>\n<p>With the greatest apologies to Bruce Springsteen:</p>\n<!-- raw HTML omitted -->\n<p>Like every good documentary on accomplished performers, there&rsquo;s a dark side to this keyboard computering talent I posess. There are downsides to my keyboard-centric lifestyle:</p>\n<!-- raw HTML omitted -->\n<p>All that said, when I am in the zone, my fingers dance over this keyboard, I think with my fingers, and it&rsquo;s great.</p>\n",
				"content_text": "Over the years, many hours in front of a computer have afforded me the gift of keyboarding skills. I've put in the Gladwellian ten thousand hours of work and it's really paid off. I type fairly quickly, somewhat precisely, and often loudly.\n\nPursuant to this great talent, I've optimized my computer to have everything at-hand when I'm typing. I don't religiously avoid the mouse. I do seek more ways to use the keyboard to get stuff done quickly and with ease. Thanks to tools like <a href=\"https://www.alfredapp.com\">Alfred</a> and <a href=\"http://www.hammerspoon.org\">Hammerspoon</a>, I've acheived that.\n\nWith the greatest apologies to Bruce Springsteen:\n\n<blockquote>\n  Well I got this keyboard and I learned how to make it talk\n</blockquote>\n\nLike every good documentary on accomplished performers, there's a dark side to this keyboard computering talent I posess. There are downsides to my keyboard-centric lifestyle:\n\n<ul>\n    <li>I sometimes find it difficult to step back and think. Rather than take my hands off the keyboard, I could more easily switch to some other app. I feel like this means I'm still making progress, in the moment, but really I'm distracting myself.</li>\n    <li>Even when I don't need to step back and think, it's easy for me to switch over to another app and distract myself with social media, team chat, etc.</li>\n    <li>Being really, really good at keyboarding is almost contrary to Bret Victor's notion of using computers as tools for thinking rather than self-contained all-doing virtual workspaces.</li>\n    <li>Thus I often find I need to push the keyboard away from me, roll my chair back, and think, read, or write to do the deep thinking.</li>\n</ul>\n\nAll that said, when I am in the zone, my fingers dance over this keyboard, I think with my fingers, and it's great.\n",
				"date_published": "2017-03-02T10:22:25-07:00",
				"url": "https://therealadam.com/2017/03/02/i-have-become.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/03/01/the-occurrence-and.html",
				"title": "The occurrence and challenge of ActiveRecord lookup tables",
				"content_html": "<p>I’ve noticed lots of Rails apps end up with database-backed lookup tables. Particularly in systems with some kind of customer or subscription management, it’s almost guaranteed that <!-- raw HTML omitted -->User<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Customer<!-- raw HTML omitted --> models <!-- raw HTML omitted -->belong_to<!-- raw HTML omitted --> <!-- raw HTML omitted -->SubscriptionLevel<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Plan<!-- raw HTML omitted --> models. Thus, you frequently need to query <!-- raw HTML omitted -->both<!-- raw HTML omitted --> models.</p>\n<p>If you’re looking for avoidable database work, as I sometimes have, this seems like low-hanging fruit. Plan level models very rarely change. You could replace those <!-- raw HTML omitted -->Plan<!-- raw HTML omitted --> or <!-- raw HTML omitted -->SubscriptionLevel<!-- raw HTML omitted --> models with a hardcoded data object and move on.</p>\n<p>In my experience, you now have a white whale on your hands. This low-hanging fruit may haunt you for a while. It could cause you to invent increasingly implausible mechanisms for ridding yourself of this “technical debt” (scare quotes, it’s a trade-off and not actual technical debt). Teammates will appear drowsy when you mention this problem and its technical details, then back away slowly.</p>\n<!-- raw HTML omitted -->\n<p>Why is it so tricky to convert AR database lookups to non-AR in-memory lookups?</p>\n<p>I&rsquo;ve attempted this twice. Both times, I tried to grab as little surface area as possible and ended up with nearly all of the models. A current teammate is trying now and suffering a somewhat similar fate. They’re more detail-oriented and motivated than I am, so I hope they’ll succeed. (Ed. they succeeded!)</p>\n<p>Is this phenomenon something we can easily write off to coupling or is it something else? My pessimistic, gossip-y sense leads me to think people who have become ORM Skeptic went down this path thinking it&rsquo;s inevitable if you accept an ORM into your life. They came away a dark shade of who they were with the conclusion that ORMs ruin everything. However, the phases of coping that involve a three thousand word essay and then writing a new database layer thing don’t actually solve this problem.</p>\n<!-- raw HTML omitted -->\n<p>In the ActiveRecord flavor of ORMs, it is easy to describe model graphs and interactions amongst those graphs. Once you’ve got the whole model graph, its often difficult to isolate a subsection of it. AR, in particular, can make it easy to violate Demeter and reach through that graph in hard-to-refactor ways.</p>\n<p>Our lack of great and general tools for working with Ruby code that uses these graphs and rewriting said code is another big challenge. Solving these problems requires visualizing the direct and transitive connections between models. Then you need some kind of refactoring tool to rewrite code to use an indirection object instead of directly coupling. We lack both of those in the Ruby world.</p>\n<p>Optimistically, I’d think this is a case of refactoring smarter. Given a solid test suite you could:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>The thing you <!-- raw HTML omitted -->wouldn&rsquo;t<!-- raw HTML omitted --> want to do, and where I faltered at least once, was to let it become a long-running task. When you&rsquo;re making changes all over the code base, any amount of churn behind your back is potentially crippling. If you can freeze the code base, I highly recommend it. (Coincidentally, this is exactly what my smarter-than-me teammate did!)</p>\n<p>The other thing to keep in mind is that, inevitably, you will come across weird uses of ActiveRecord and Rails that you didn&rsquo;t know about, are pretty sure you don&rsquo;t like, and have to work with anyway. Set aside time for these known unknowns.</p>\n<!-- raw HTML omitted -->\n<p>When dealing with potentially large, radical changes to your application code, how radical are you willing to go to make many smaller changes than one big one? There&rsquo;s no crisp answer here. <!-- raw HTML omitted -->All code grows awkward in different ways<!-- raw HTML omitted -->. As always: divide, conquer, and celebrate your victories!</p>\n",
				"content_text": "I’ve noticed lots of Rails apps end up with database-backed lookup tables. Particularly in systems with some kind of customer or subscription management, it’s almost guaranteed that <code>User</code> or <code>Customer</code> models <code>belong_to</code> <code>SubscriptionLevel</code> or <code>Plan</code> models. Thus, you frequently need to query <em>both</em> models.\n\nIf you’re looking for avoidable database work, as I sometimes have, this seems like low-hanging fruit. Plan level models very rarely change. You could replace those <code>Plan</code> or <code>SubscriptionLevel</code> models with a hardcoded data object and move on.\n\nIn my experience, you now have a white whale on your hands. This low-hanging fruit may haunt you for a while. It could cause you to invent increasingly implausible mechanisms for ridding yourself of this “technical debt” (scare quotes, it’s a trade-off and not actual technical debt). Teammates will appear drowsy when you mention this problem and its technical details, then back away slowly.\n\n<hr />\n\nWhy is it so tricky to convert AR database lookups to non-AR in-memory lookups?\n\nI've attempted this twice. Both times, I tried to grab as little surface area as possible and ended up with nearly all of the models. A current teammate is trying now and suffering a somewhat similar fate. They’re more detail-oriented and motivated than I am, so I hope they’ll succeed. (Ed. they succeeded!)\n\nIs this phenomenon something we can easily write off to coupling or is it something else? My pessimistic, gossip-y sense leads me to think people who have become ORM Skeptic went down this path thinking it's inevitable if you accept an ORM into your life. They came away a dark shade of who they were with the conclusion that ORMs ruin everything. However, the phases of coping that involve a three thousand word essay and then writing a new database layer thing don’t actually solve this problem.\n\n<hr />\n\nIn the ActiveRecord flavor of ORMs, it is easy to describe model graphs and interactions amongst those graphs. Once you’ve got the whole model graph, its often difficult to isolate a subsection of it. AR, in particular, can make it easy to violate Demeter and reach through that graph in hard-to-refactor ways.\n\nOur lack of great and general tools for working with Ruby code that uses these graphs and rewriting said code is another big challenge. Solving these problems requires visualizing the direct and transitive connections between models. Then you need some kind of refactoring tool to rewrite code to use an indirection object instead of directly coupling. We lack both of those in the Ruby world.\n\nOptimistically, I’d think this is a case of refactoring smarter. Given a solid test suite you could:\n\n<ul>\n<li>connect your lookup models to an in-memory SQLite database populated at app start, no need to remove ActiveRecord</li>\n<li>use one of the several libraries that implement enough of the ActiveRecord interface to replace models with classes backed by static data</li>\n<li>lots of things I haven't thought or heard of!</li>\n</ul>\n\n<hr />\n\nThe thing you <em>wouldn't</em> want to do, and where I faltered at least once, was to let it become a long-running task. When you're making changes all over the code base, any amount of churn behind your back is potentially crippling. If you can freeze the code base, I highly recommend it. (Coincidentally, this is exactly what my smarter-than-me teammate did!)\n\nThe other thing to keep in mind is that, inevitably, you will come across weird uses of ActiveRecord and Rails that you didn't know about, are pretty sure you don't like, and have to work with anyway. Set aside time for these known unknowns.\n\n<hr />\n\nWhen dealing with potentially large, radical changes to your application code, how radical are you willing to go to make many smaller changes than one big one? There's no crisp answer here. <strong>All code grows awkward in different ways</strong>. As always: divide, conquer, and celebrate your victories!\n",
				"date_published": "2017-03-01T09:53:26-07:00",
				"url": "https://therealadam.com/2017/03/01/the-occurrence-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/28/the-annoying-browser.html",
				"title": "The annoying browser boundaries",
				"content_html": "<p>Since I started writing web applications in around 1999, there’s been an ever-present boundary around what you can do in a browser. As browsers have improved, we have a new line in the sand. They&rsquo;re more enabling now, but equally annoying.</p>\n<p>Applications running on servers in a datacenter (Ruby, Python, PHP) can’t:</p>\n<!-- raw HTML omitted -->\n<p>Browser applications can’t:</p>\n<!-- raw HTML omitted -->\n<p>It may seem like native applications are the way to go. They can do all the things browsers cannot. But!</p>\n<!-- raw HTML omitted -->\n<p>In practice, this means there’s a step before building an application where I figure out where some functionality lives. “This needs to think real hard, it goes on a very specific kind of server. This needs to store some data so it has to go on that other server. That needs to present the data to the user, so I have to bridge the server and browser. But we’d really like to put this in app stores soooo, how are we going to get something resembling a native app without putting a lot of extra effort into it?”</p>\n<p>There’s entirely good reasons that this dichotomy has emerged, but it’s kinda dumb too. In other words, paraphrasing Churchill:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Since I started writing web applications in around 1999, there’s been an ever-present boundary around what you can do in a browser. As browsers have improved, we have a new line in the sand. They're more enabling now, but equally annoying.\n\nApplications running on servers in a datacenter (Ruby, Python, PHP) can’t:\n\n<ul>\n<li>interact with a user’s data (for largely good reason)</li>\n<li>make interesting graphics</li>\n<li>hop over to a user’s computer(s) without tremendous effort (i.e. people running and securing their own servers)</li>\n</ul>\n\nBrowser applications can’t:\n\n<ul>\n<li>store data on the user’s computer in useful quantities (this recently became less true, but isn’t widely used yet)</li>\n<li>compute very hard; you can’t run the latest games or intense math within a browser</li>\n<li>hang around on a user’s computer; browsers are a sandbox of their own, built around ephemeral information retrieval and not long-term functionality</li>\n<li>present themselves for discovery in various vendor app stores (iTunes, Play, Steam, etc.)</li>\n</ul>\n\nIt may seem like native applications are the way to go. They can do all the things browsers cannot. But!\n\n<ul>\n<li>native apps are more susceptible to the changing needs of their operating system host, may go stale (look outdated) or outright not work anymore after several years</li>\n<li>often struggle to find a sustainable mechanism for exchanging a user’s money for a developer’s time; part of that is the royalty model paid to platforms and stores, part of that is the difficulty of business inherent to building any application</li>\n<li>cannot exceed the resources of one user’s computer, except for a few very high-end professional media production applications</li>\n</ul>\n\nIn practice, this means there’s a step before building an application where I figure out where some functionality lives. “This needs to think real hard, it goes on a very specific kind of server. This needs to store some data so it has to go on that other server. That needs to present the data to the user, so I have to bridge the server and browser. But we’d really like to put this in app stores soooo, how are we going to get something resembling a native app without putting a lot of extra effort into it?”\n\nThere’s entirely good reasons that this dichotomy has emerged, but it’s kinda dumb too. In other words, paraphrasing Churchill:\n\n<blockquote>\n  Browsers are the worst form of cross-platform development, except for all the others.\n</blockquote>\n",
				"date_published": "2017-02-28T09:48:29-07:00",
				"url": "https://therealadam.com/2017/02/28/the-annoying-browser.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/27/just-tackle-the.html",
				"title": "Just tackle the problem",
				"content_html": "<p>There’s a moment when a programming problem engulfs me. Perhaps it’s exciting and intriguing, maybe it’s weird and infuriating, maybe it’s close to a deadline and stressing me out. Whichever it is, I’m not so great at managing that intensity.</p>\n<p>I can’t handle adult responsibilities. Any external demands on my time are met with impatience. My thoughts drift to the problem when I’m not otherwise occupied. I get on my own case about why it’s not solved, festering a negative feedback loop of feeling bad about not having solved it yet and then feeling worse about not having solved it yet.</p>\n<p>I <!-- raw HTML omitted -->am<!-- raw HTML omitted --> able to step away from it a little bit. Go grab food, spend some limited time with my wife or dogs. It doesn’t fully engulf me. But I can’t detach myself from it.</p>\n<p>It’s not frustrating that I get excited or perturbed by my programming work. It’s frustrating that I let it stress me out, to negatively effect my life even if only for a short time. <!-- raw HTML omitted -->Especially<!-- raw HTML omitted --> that it’s spurious, that I don’t need to stress out over it. My code’s not going to endanger lives, yet.</p>\n<p>The best coping tactic I&rsquo;ve come up with, so far, is to tackle the problem. Don&rsquo;t go stew on the circumstances of the problem. Maybe take that moment away to pet a dog and release some stress. Then, find a solution that fits the time and context of the problem so I can get back to thinking clearly about work and life.</p>\n<p>Sometimes, <!-- raw HTML omitted -->I get lucky and the solution to the problem presents itself<!-- raw HTML omitted -->.</p>\n",
				"content_text": "There’s a moment when a programming problem engulfs me. Perhaps it’s exciting and intriguing, maybe it’s weird and infuriating, maybe it’s close to a deadline and stressing me out. Whichever it is, I’m not so great at managing that intensity.\n\nI can’t handle adult responsibilities. Any external demands on my time are met with impatience. My thoughts drift to the problem when I’m not otherwise occupied. I get on my own case about why it’s not solved, festering a negative feedback loop of feeling bad about not having solved it yet and then feeling worse about not having solved it yet.\n\nI <em>am</em> able to step away from it a little bit. Go grab food, spend some limited time with my wife or dogs. It doesn’t fully engulf me. But I can’t detach myself from it.\n\nIt’s not frustrating that I get excited or perturbed by my programming work. It’s frustrating that I let it stress me out, to negatively effect my life even if only for a short time. <em>Especially</em> that it’s spurious, that I don’t need to stress out over it. My code’s not going to endanger lives, yet.\n\nThe best coping tactic I've come up with, so far, is to tackle the problem. Don't go stew on the circumstances of the problem. Maybe take that moment away to pet a dog and release some stress. Then, find a solution that fits the time and context of the problem so I can get back to thinking clearly about work and life.\n\nSometimes, <a href=\"https://youtu.be/e1KKVy-nki8?t=110\">I get lucky and the solution to the problem presents itself</a>.\n",
				"date_published": "2017-02-27T08:59:15-07:00",
				"url": "https://therealadam.com/2017/02/27/just-tackle-the.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/23/what-is-the.html",
				"title": "What is the future of loving cars?",
				"content_html": "<p>To me, a great car is equal part shape, technology, sound, and history. It seems like the future of cars is all technology at the expertise of all other factors. What will it mean to love cars over the next ten years?</p>\n<p>A well shaped car is defined by function. A long hood accommodates an engine running the length of the car and not between the wheels. Aerodynamic surfaces, not too many please, keep the car pressed to the road. The shape of the car is further of a function of air inlets to cool all the moving parts. Once all that is done, you can think of the form, getting just the right balance of smooth curves and straight lines.</p>\n<p>Future cars are likely to move toward aerolumps. Drag is always the enemy of cars, doubly so for anything seeking efficiency. But the form needed to accommodate moving parts (read: combutions engines and their support infrastructure) will go away. You&rsquo;re left with just a bubble holding the passengers. Not inspiring.</p>\n<p>The sound of future cars is the sound of air running over the car and tires meeting the road. You may hear the occassional whine of an electric motor, perhaps an artifical soundtrack inspired by old combustion engines. No more growls, burps, and high-rev screams.</p>\n<p>When all this sorts out, some companies will have a more interesting product due to their use of technology. A lot of companies will have a more boring but practical product. We will surely say, &ldquo;they don&rsquo;t make them like they used to&rdquo; because literally, of course, they won&rsquo;t.</p>\n<p>But what will we find to love about how cars are built and function? Will that fade as a historical note while we revel in the agency a personal car brings without some of the external costs of highways, parking lots, and petrofuels?</p>\n",
				"content_text": "To me, a great car is equal part shape, technology, sound, and history. It seems like the future of cars is all technology at the expertise of all other factors. What will it mean to love cars over the next ten years?\n\nA well shaped car is defined by function. A long hood accommodates an engine running the length of the car and not between the wheels. Aerodynamic surfaces, not too many please, keep the car pressed to the road. The shape of the car is further of a function of air inlets to cool all the moving parts. Once all that is done, you can think of the form, getting just the right balance of smooth curves and straight lines.\n\nFuture cars are likely to move toward aerolumps. Drag is always the enemy of cars, doubly so for anything seeking efficiency. But the form needed to accommodate moving parts (read: combutions engines and their support infrastructure) will go away. You're left with just a bubble holding the passengers. Not inspiring.\n\nThe sound of future cars is the sound of air running over the car and tires meeting the road. You may hear the occassional whine of an electric motor, perhaps an artifical soundtrack inspired by old combustion engines. No more growls, burps, and high-rev screams.\n\nWhen all this sorts out, some companies will have a more interesting product due to their use of technology. A lot of companies will have a more boring but practical product. We will surely say, \"they don't make them like they used to\" because literally, of course, they won't.\n\nBut what will we find to love about how cars are built and function? Will that fade as a historical note while we revel in the agency a personal car brings without some of the external costs of highways, parking lots, and petrofuels?\n",
				"date_published": "2017-02-23T09:53:48-07:00",
				"url": "https://therealadam.com/2017/02/23/what-is-the.html",
				"tags": ["Pop Culture","Cars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/22/levels-of-musical.html",
				"title": "Levels of musical genius",
				"content_html": "<p>I often think about what kind of unique musical talent some performer I enjoy possesses. A few examples:</p>\n<!-- raw HTML omitted -->\n<p>The connection amongst these individuals is more than playing their instruments or writing their songs. They&rsquo;re working a level above that, whether it&rsquo;s Tom Petty and Jimmy Page making fine-tuned rock or J-Dilla, Prince, and Merrill Garbus micromanaging a subgenre into existence. I&rsquo;m a little envious of that level of musical acumen.</p>\n",
				"content_text": "I often think about what kind of unique musical talent some performer I enjoy possesses. A few examples:\n\n<ul>\n    <li>J-Dilla was <a href=\"https://en.wikipedia.org/wiki/Neo_soul\">at the center of many groups</a> doing amazing things creating an exciting moment in time, but at the same time was a <a href=\"https://www.theguardian.com/music/2011/jan/27/j-dilla-suite-ma-dukes\">master composer</a> himself</li>\n    <li>Prince or Quincy Jones were often running multiple performers and groups, serving as sort of the well from which their respective musical ideas came from</li>\n    <li>Tom Petty isn't particularly gifted technically and doesn't write ground-breaking songs but is very, very good at working within a specific form and genre, one of the best in that space</li>\n    <li>Jimmy Page is not musically the best or most innovative, but very adept at the style he created for himself, is technically a good guitarist</li>\n    <li>Pete Townsend holds a group together, is the glue that leads a group of virtuosos, somehow the master creator and craftsperson who runs the group with a solid hand without making it all about him</li>\n    <li>Brian Wilson plays a whole ensemble, a studio as an instrument, micromanaging every detail to produce a sublime musical whole; Bruce Springsteen is close to this</li>\n    <li>Bob Dylan or Leonard Cohen are excellent wordsmiths who get great results when the music around them is also pretty good</li>\n    <li>Annie Clark is a guitar-shred-meister who runs with the avant-alt mantle set forth by The Talking Heads</li>\n    <li>Merrill Garbus builds amazing lo-fi layered music of incredible stylistic range that sounds right at home on the festival circuit</li>\n</ul>\n\nThe connection amongst these individuals is more than playing their instruments or writing their songs. They're working a level above that, whether it's Tom Petty and Jimmy Page making fine-tuned rock or J-Dilla, Prince, and Merrill Garbus micromanaging a subgenre into existence. I'm a little envious of that level of musical acumen.\n",
				"date_published": "2017-02-22T10:43:51-07:00",
				"url": "https://therealadam.com/2017/02/22/levels-of-musical.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/21/four-parks-one.html",
				"title": "Four parks, one day",
				"content_html": "<p>In January, Courtney and I went to Disney World for her birthday. We bought an annual pass last year, so we&rsquo;ve <!-- raw HTML omitted -->literally <!-- raw HTML omitted -->been a few times over the past year. This time &lsquo;round, Courney wanted to visit all four parks in one day. Our Official Rules were we had to ride two rides (or see a show and do a ride), drink a boozy drink, and eat a dessert in each park. We made it!</p>\n<p>We had a few other days to enjoy the park at a more leisurely pace. We did a Safari tour at the Animal Kingdom resort, which afforded opportunities for giraffe selfies. I got to take lots of pictures and enjoy Epcot and Tomorrowland, my favorites. Along the way, we ate a bunch of ice cream and sang along with &ldquo;Let It Go&rdquo; nearly every day.</p>\n<p>As ever, a magical time.</p>\n<p>[gallery ids=&ldquo;4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061&rdquo; type=&ldquo;rectangular&rdquo;]</p>\n",
				"content_text": "In January, Courtney and I went to Disney World for her birthday. We bought an annual pass last year, so we've <em>literally </em>been a few times over the past year. This time 'round, Courney wanted to visit all four parks in one day. Our Official Rules were we had to ride two rides (or see a show and do a ride), drink a boozy drink, and eat a dessert in each park. We made it!\n\nWe had a few other days to enjoy the park at a more leisurely pace. We did a Safari tour at the Animal Kingdom resort, which afforded opportunities for giraffe selfies. I got to take lots of pictures and enjoy Epcot and Tomorrowland, my favorites. Along the way, we ate a bunch of ice cream and sang along with \"Let It Go\" nearly every day.\n\nAs ever, a magical time.\n\n[gallery ids=\"4040,4041,4042,4043,4044,4045,4046,4047,4048,4049,4050,4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,4061\" type=\"rectangular\"]\n",
				"date_published": "2017-02-21T13:24:00-07:00",
				"url": "https://therealadam.com/2017/02/21/four-parks-one.html",
				"tags": ["Pop Culture","Disney"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/20/protect-the-beginners.html",
				"title": "Protect the beginner's mind",
				"content_html": "<p>Someone joins your team. They have a <!-- raw HTML omitted -->beginner&rsquo;s mind<!-- raw HTML omitted --> about your project and culture.</p>\n<p>Take a person with beginner&rsquo;s mind, tell them about how things have always been, how they got that way, and insist we just try to keep that status quo? That&rsquo;s a shame.</p>\n<p>When you harness a beginner&rsquo;s mind, you have a short window to make the most of their new perspective. After a while, it becomes the team or culture&rsquo;s perspective. Opportunity lost.</p>\n<p>Put a person with beginner&rsquo;s mind in a room with someone who knows All the Reasons. If they survive, you have just created a ton of learning for both people.</p>\n<p>Protect the beginner&rsquo;s mind. Listen to it. Act on it.</p>\n",
				"content_text": "Someone joins your team. They have a <a href=\"https://en.wikipedia.org/wiki/Shoshin\">beginner's mind</a> about your project and culture.\n\nTake a person with beginner's mind, tell them about how things have always been, how they got that way, and insist we just try to keep that status quo? That's a shame.\n\nWhen you harness a beginner's mind, you have a short window to make the most of their new perspective. After a while, it becomes the team or culture's perspective. Opportunity lost.\n\nPut a person with beginner's mind in a room with someone who knows All the Reasons. If they survive, you have just created a ton of learning for both people.\n\nProtect the beginner's mind. Listen to it. Act on it.\n",
				"date_published": "2017-02-20T10:28:56-07:00",
				"url": "https://therealadam.com/2017/02/20/protect-the-beginners.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/16/the-right-way.html",
				"title": "The right way and the practical way",
				"content_html": "<p>Brent Simmons, <!-- raw HTML omitted -->Reason Number 33,483 to Hate Programming<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>My nature is to take path #1. It is so hard for me to take path #2. I have the utmost respect who can work on sprawling, modern software and stay on path #2. But path #1, always pulling me in and sending me down rabbit holes.</p>\n<p>Sometimes I wonder which of these paths got me to where I am in my career. Others, I wonder if I <!-- raw HTML omitted -->think<!-- raw HTML omitted --> I&rsquo;m a everything-the-right-way person but <!-- raw HTML omitted -->really<!-- raw HTML omitted --> I&rsquo;m a responsible-and-professional-tradeoffs person.</p>\n<p>A brain&rsquo;s a weird place to live.</p>\n",
				"content_text": "Brent Simmons, <a href=\"http://inessential.com/2015/02/20/reason_number_33_483_to_hate_programming\">Reason Number 33,483 to Hate Programming</a>:\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">Or I could have the superclass expose the appIsTerminating property in its header file, so that the subclass could see it. This also sucks, because a controller class has no business exposing its own copy of global application state.</span></p>\n<p class=\"p1\"><span class=\"s1\">In the end, though, that’s what I did. (Along with a comment that the property was there for subclasses.)</span></p>\n<p class=\"p1\"><span class=\"s1\">It reminds me that there are two competing values:</span></p>\n\n<ol>\n    <li class=\"p1\">\n<p class=\"p1\"><span class=\"s1\">Do everything the right way every time.</span></p>\n</li>\n    <li class=\"p1\">\n<p class=\"p1\"><span class=\"s1\">Make responsible and professional decisions about time and expenses and benefits and drawbacks.</span></p>\n</li>\n</ol>\n</blockquote>\n\nMy nature is to take path #1. It is so hard for me to take path #2. I have the utmost respect who can work on sprawling, modern software and stay on path #2. But path #1, always pulling me in and sending me down rabbit holes.\n\nSometimes I wonder which of these paths got me to where I am in my career. Others, I wonder if I <em>think</em> I'm a everything-the-right-way person but <em>really</em> I'm a responsible-and-professional-tradeoffs person.\n\nA brain's a weird place to live.\n",
				"date_published": "2017-02-16T15:21:18-07:00",
				"url": "https://therealadam.com/2017/02/16/the-right-way.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/15/contrast-nyc-and.html",
				"title": "Contrast NYC and SF",
				"content_html": "<p>Dallas and Austin are the cities I&rsquo;ve spent my life in. I&rsquo;ve spent maybe three weeks of my life, total, in San Francisco and New York City. They&rsquo;re similar in that SF and NYC are both a Whole Other Thing in comparison to my Texan expectations. Indeed, they&rsquo;re global cities operating at an entirely different order of magnitude.</p>\n<p>It&rsquo;s long puzzled me why I find NYC less intimidating and strange than SF. I&rsquo;m starting to think its the attitudes. Walking through either town, I frequently suspect that I&rsquo;m Doing It Wrong, from where to eat to where to sleep to how to use the subway.</p>\n<p>In NYC, I suspect the natives are looking on as I struggle to hail a cab or catch a train, but they are silent in their snickering about me doing it wrong.</p>\n<p>SF feels much more in your face, eager to tell you &ldquo;You have done it wrong and you should feel bad&rdquo;, from the subway systems to the tech bubble.</p>\n<p>San Francisco very much remains a frontier town. You move there to make your fortune, to burn bright and &ldquo;compress your career into several years&rdquo;. It&rsquo;s at the same time fractured by law (the city has three different transit systems, all using different tokens last time I visited) and lawless (Uber and Airbnb in particular are about landgrabs before the law can catch up with technology). It&rsquo;s at once a global city and embarrassingly self-centered.</p>\n<p>In summary, I guess I just like Texas a lot better. Even after our awful lawmakers.</p>\n",
				"content_text": "Dallas and Austin are the cities I've spent my life in. I've spent maybe three weeks of my life, total, in San Francisco and New York City. They're similar in that SF and NYC are both a Whole Other Thing in comparison to my Texan expectations. Indeed, they're global cities operating at an entirely different order of magnitude.\n\nIt's long puzzled me why I find NYC less intimidating and strange than SF. I'm starting to think its the attitudes. Walking through either town, I frequently suspect that I'm Doing It Wrong, from where to eat to where to sleep to how to use the subway.\n\nIn NYC, I suspect the natives are looking on as I struggle to hail a cab or catch a train, but they are silent in their snickering about me doing it wrong.\n\nSF feels much more in your face, eager to tell you \"You have done it wrong and you should feel bad\", from the subway systems to the tech bubble.\n\nSan Francisco very much remains a frontier town. You move there to make your fortune, to burn bright and \"compress your career into several years\". It's at the same time fractured by law (the city has three different transit systems, all using different tokens last time I visited) and lawless (Uber and Airbnb in particular are about landgrabs before the law can catch up with technology). It's at once a global city and embarrassingly self-centered.\n\nIn summary, I guess I just like Texas a lot better. Even after our awful lawmakers.\n",
				"date_published": "2017-02-15T12:13:05-07:00",
				"url": "https://therealadam.com/2017/02/15/contrast-nyc-and.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/14/framework-and-library.html",
				"title": "Framework and Library people",
				"content_html": "<p>By unscientific survey, I think many developers would prefer to work in a &ldquo;framework world&rdquo; where many decisions of principle and organization are passed down by a vendor or architecture team. Think Rails/Django/Laravel for backends, Ember/Elm for frontends, Unity for games. These are the Framework people.</p>\n<p>Fewer developers would prefer to create their own world, building up tools and libraries to suit. They select a few first principles and build their own world. They&rsquo;re the bebop jazz musician, eschewing big band gigs and music people can dance to to create their own intellectual world. These are the Library people.</p>\n<p>I&rsquo;m a Framework person. The allure of Library people sometimes tempts me after I look at a beautifully-restored car or a well-structured song. But constructing a library world is thankless and not particularly high leverage, unless you succeed in creating something for framework people. Weird, eh?</p>\n",
				"content_text": "By unscientific survey, I think many developers would prefer to work in a \"framework world\" where many decisions of principle and organization are passed down by a vendor or architecture team. Think Rails/Django/Laravel for backends, Ember/Elm for frontends, Unity for games. These are the Framework people.\n\nFewer developers would prefer to create their own world, building up tools and libraries to suit. They select a few first principles and build their own world. They're the bebop jazz musician, eschewing big band gigs and music people can dance to to create their own intellectual world. These are the Library people.\n\nI'm a Framework person. The allure of Library people sometimes tempts me after I look at a beautifully-restored car or a well-structured song. But constructing a library world is thankless and not particularly high leverage, unless you succeed in creating something for framework people. Weird, eh?\n",
				"date_published": "2017-02-14T11:48:01-07:00",
				"url": "https://therealadam.com/2017/02/14/framework-and-library.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/13/execution-and-idea.html",
				"title": "Execution and idea in Frontierland",
				"content_html": "<p>It&rsquo;s commonly held, and pretty much true, that ideas are shallow and execution is depth. That is, the former is nothing without lots and lots of the latter.</p>\n<p>Let&rsquo;s set aside how &ldquo;execution over ideas&rdquo; is used as a bludgeon for a moment. I think there&rsquo;s possibly a case where &ldquo;execution <!-- raw HTML omitted -->AND<!-- raw HTML omitted --> idea&rdquo; is a viable recipe for success.</p>\n<p>If you&rsquo;re in a Wild West, converting the minimal version of the idea to an executed offering can be all you need to succeed. Temporarily.</p>\n<p>If you&rsquo;re always moving from emerging market to emerging market, you&rsquo;re betting not on your ability to execute, but your ability to identify the next market. You&rsquo;re OK with fast followers building on your idea, iterating on it, and establishing themselves as the market matures. That&rsquo;s OK, because you&rsquo;ve already moved on to the next market.</p>\n<p>So the risk here isn&rsquo;t execution, but idea/market selection. When you&rsquo;re first, it&rsquo;s slightly OK to ship with a product that will be viewed as laughable once the market is mature. 75% idea, 25% execution.</p>\n<p>When you&rsquo;re second, seventh, or seventeenth, you had better execute on the idea, the business, and the culture you build. It&rsquo;s 95% execution, 5% idea.</p>\n",
				"content_text": "It's commonly held, and pretty much true, that ideas are shallow and execution is depth. That is, the former is nothing without lots and lots of the latter.\n\nLet's set aside how \"execution over ideas\" is used as a bludgeon for a moment. I think there's possibly a case where \"execution <em>AND</em> idea\" is a viable recipe for success.\n\nIf you're in a Wild West, converting the minimal version of the idea to an executed offering can be all you need to succeed. Temporarily.\n\nIf you're always moving from emerging market to emerging market, you're betting not on your ability to execute, but your ability to identify the next market. You're OK with fast followers building on your idea, iterating on it, and establishing themselves as the market matures. That's OK, because you've already moved on to the next market.\n\nSo the risk here isn't execution, but idea/market selection. When you're first, it's slightly OK to ship with a product that will be viewed as laughable once the market is mature. 75% idea, 25% execution.\n\nWhen you're second, seventh, or seventeenth, you had better execute on the idea, the business, and the culture you build. It's 95% execution, 5% idea.\n",
				"date_published": "2017-02-13T10:50:00-07:00",
				"url": "https://therealadam.com/2017/02/13/execution-and-idea.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/09/empathy-required.html",
				"title": "Empathy Required",
				"content_html": "<p>Nearly fourteen years ago, I graduated college and found my first full-time, non-apprentice-y job writing code. When I wrote code, these were the sorts of things I worried about:</p>\n<!-- raw HTML omitted -->\n<p>Today, I know a lot more things. I did some things right and a lot of things wrong. Now when I write code, these are the sorts of things I worry about:</p>\n<!-- raw HTML omitted -->\n<p>Half of those concerns are about empathy. They&rsquo;re only a sampling of all the things I&rsquo;ve learned I should care about as I write code, but I think the ratio holds up. As I get better and better at programming, as my career proceeds, I need more empathy towards my future self and my teammates.</p>\n<p>Further, that empathy needs to extend towards those who are less experienced or haven&rsquo;t learned the precise things I&rsquo;ve learned. What works for me, the solutions that are obvious to me, the problems to steer clear of, none of that is in someone else&rsquo;s head. I can&rsquo;t give them a book, wait three weeks, and expect them to share my strengths and wisdoms.</p>\n<p>That means, when I advise those who listen or steer a team that allows me to steer it, I have to make two camps happy. On one hand, I have to make a decision that is true to what I think is important and prudent. On the other hand, I have to lay out guidelines that lead the listener or teammate towards what I think is important or prudent without micromanagement, strict rules, and other forms of negative reinforcement.</p>\n<p>It&rsquo;s so easy, for me, to just hope that everyone is like me and work under that assumption. But it&rsquo;s much better, and highly worthwhile, to figure out how to help friends and teammates to level up on their own. It requires a whole lot of empathy, and the discipline to use it instead of impatience. <!-- raw HTML omitted -->Worth it.<!-- raw HTML omitted --></p>\n",
				"content_text": "Nearly fourteen years ago, I graduated college and found my first full-time, non-apprentice-y job writing code. When I wrote code, these were the sorts of things I worried about:\n\n<ul>\n    <li>Where is the code I should change?</li>\n    <li>Is this the right change?</li>\n    <li>What are the database tables I need to manipulate?</li>\n    <li>Who should I talk to before I put this code in production?</li>\n</ul>\n\nToday, I know a lot more things. I did some things right and a lot of things wrong. Now when I write code, these are the sorts of things I worry about:\n\n<ul>\n    <li>Am I backing myself into a corner by writing this?</li>\n    <li>Why was the code I'm looking at written this way and what strategy should I use to change it?</li>\n    <li>Will this code I just wrote be easy to understand and modify the next time I see it? When a teammate sees it?</li>\n    <li>Should I try to improve this code's design or performance more, or ship it?</li>\n</ul>\n\nHalf of those concerns are about empathy. They're only a sampling of all the things I've learned I should care about as I write code, but I think the ratio holds up. As I get better and better at programming, as my career proceeds, I need more empathy towards my future self and my teammates.\n\nFurther, that empathy needs to extend towards those who are less experienced or haven't learned the precise things I've learned. What works for me, the solutions that are obvious to me, the problems to steer clear of, none of that is in someone else's head. I can't give them a book, wait three weeks, and expect them to share my strengths and wisdoms.\n\nThat means, when I advise those who listen or steer a team that allows me to steer it, I have to make two camps happy. On one hand, I have to make a decision that is true to what I think is important and prudent. On the other hand, I have to lay out guidelines that lead the listener or teammate towards what I think is important or prudent without micromanagement, strict rules, and other forms of negative reinforcement.\n\nIt's so easy, for me, to just hope that everyone is like me and work under that assumption. But it's much better, and highly worthwhile, to figure out how to help friends and teammates to level up on their own. It requires a whole lot of empathy, and the discipline to use it instead of impatience. <em>Worth it.</em>\n",
				"date_published": "2017-02-09T11:23:34-07:00",
				"url": "https://therealadam.com/2017/02/09/empathy-required.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/08/copypasta-youre-the.html",
				"title": "Copypasta, you're the worst pasta",
				"content_html": "<p>Copypasta. It&rsquo;s the worst. &ldquo;I need something like this code here, I&rsquo;ll just drop it over there where I need it. Maybe change a few things.&rdquo; Only you can prevent headdesks!</p>\n<p>It&rsquo;s not really possible, in my experience, to make it easier to use code through methods and functions than to just copy what you need and start changing it. No amount of encapsulation or patterns is easier than a pasteboard.</p>\n<p>Perhaps, copypasta&rsquo;s natural predator is a well-informed code review. There are tools, like flay, that can detect some kinds of code duplication.</p>\n<p>But for the most part, it&rsquo;s a battle of dilligence.</p>\n<p>(Ed. I found this in my draft folder from <!-- raw HTML omitted -->four years ago<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Copypasta; copypasta never changes.<!-- raw HTML omitted -->)</p>\n",
				"content_text": "Copypasta. It's the worst. \"I need something like this code here, I'll just drop it over there where I need it. Maybe change a few things.\" Only you can prevent headdesks!\n\nIt's not really possible, in my experience, to make it easier to use code through methods and functions than to just copy what you need and start changing it. No amount of encapsulation or patterns is easier than a pasteboard.\n\nPerhaps, copypasta's natural predator is a well-informed code review. There are tools, like flay, that can detect some kinds of code duplication.\n\nBut for the most part, it's a battle of dilligence.\n\n(Ed. I found this in my draft folder from <em>four years ago</em>. <a href=\"https://www.youtube.com/watch?v=f0vGpXPGFZY\">Copypasta; copypasta never changes.</a>)\n",
				"date_published": "2017-02-08T10:19:35-07:00",
				"url": "https://therealadam.com/2017/02/08/copypasta-youre-the.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/07/through-mocks-and.html",
				"title": "Through mocks and back",
				"content_html": "<p>A problem with double/stub/mock libraries is that they don&rsquo;t often fail in a total manner. They don&rsquo;t snap like a pencil when they&rsquo;re used improperly. Instead, when you use them unwisely, they lay in waiting. At an inopportune time, they leap out.</p>\n<p>Change an internal API method name or argument list and your poorly conceived doubles will moan. Rearrange the relationship between classes, and your overly-specific stubs won&rsquo;t work anymore.</p>\n<p>At some point, I felt pretty handy with mocks. Then I wrote a bunch of brittle mocks and decided I needed to go back to square one. I&rsquo;m through the &ldquo;just avoid mocks&rdquo; phase, and now I use them sparingly.</p>\n<p>Favor a better API in the code under test, then hand-coded fakes, then stubbed out methods, before finally falling back to a mock. Someone, possibly yourself, will thank you later.</p>\n",
				"content_text": "A problem with double/stub/mock libraries is that they don't often fail in a total manner. They don't snap like a pencil when they're used improperly. Instead, when you use them unwisely, they lay in waiting. At an inopportune time, they leap out.\n\nChange an internal API method name or argument list and your poorly conceived doubles will moan. Rearrange the relationship between classes, and your overly-specific stubs won't work anymore.\n\nAt some point, I felt pretty handy with mocks. Then I wrote a bunch of brittle mocks and decided I needed to go back to square one. I'm through the \"just avoid mocks\" phase, and now I use them sparingly.\n\nFavor a better API in the code under test, then hand-coded fakes, then stubbed out methods, before finally falling back to a mock. Someone, possibly yourself, will thank you later.\n",
				"date_published": "2017-02-07T09:15:27-07:00",
				"url": "https://therealadam.com/2017/02/07/through-mocks-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/06/stevie-wonder-for.html",
				"title": "Stevie Wonder, for our times of need",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p class=\"p1\">Tim Carmody writing for Kottke.org, <a href=\"http://kottke.org/17/02/stevie-wonder-and-the-radical-politics-of-love\">Stevie Wonder and the radical politics of love</a>:</p>\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\"><i>Songs in the Key of Life</i> tries to reconcile the reality of the post-Nixon era — the pain that even though the enemy is gone, the work is not done and the world has not been transformed — with an inclusive hope that it one day will be, and that faith, hope, and love are still possible.</span></p>\n<p class=\"p1\"><span class=\"s1\">It’s what makes the album such a magnificent achievement. But I’m not there. I don’t know when I will be. So for now I’m keeping <i>Songs In the Key of Life</i> on the shelf. An unopened bottle of champagne for a day I may never see. But I’d like to.</span></p>\n</blockquote>\n\n<p class=\"p1\">On three of Stevie Wonder's best albums, his political writing, and how he bridges saying something and making a good song.</p>\n\n<p class=\"p1\">I cannot wait to listen to <em>Songs in the Key of Life</em> again.</p>\n",
				"date_published": "2017-02-06T09:47:16-07:00",
				"url": "https://therealadam.com/2017/02/06/stevie-wonder-for.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/02/how-disney-pulls.html",
				"title": "How Disney pulls me in",
				"content_html": "<p>Dave Rupert, <!-- raw HTML omitted -->Disneyland and the Character Machine<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The level of detail is amazing, completely intentional, and interconnected. You can&rsquo;t see Tomorrowland from Fantasyland because that would take you out of the moment. You can ask Ana from <!-- raw HTML omitted -->Frozen<!-- raw HTML omitted --> about her favorite chocolate because she loves chocolate in the movie.</p>\n<p>More than a theme park, Disneyland and Disney World are movie-like experiences you can walk around in, immersed in the joy and excitement of the setting and story.</p>\n",
				"content_text": "Dave Rupert, <a href=\"https://daverupert.com/2017/01/disneyland-the-character-machine/\">Disneyland and the Character Machine</a>:\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">In October my family took a trip to Disneyland. I couldn’t help but be infected by the magic of Disneyland that allows you to feel young at heart and compells you to wear mouse ears on your head. Walking mile after mile through the park it’s very clear this magic has been painstakingly created and preserved by paying the utmost attention to detail.</span></p>\nThere’s magic in paying attention to detail, it’s the slight of hand that helps seamlessly preserve the illusion. At Disney, not only is the illusion preserved, you’re encouraged to take part through cosplay and interacting with your favorite characters. This makes you not just an observer, but also a participant in the ritual.</blockquote>\n\nThe level of detail is amazing, completely intentional, and interconnected. You can't see Tomorrowland from Fantasyland because that would take you out of the moment. You can ask Ana from <i>Frozen</i> about her favorite chocolate because she loves chocolate in the movie.\n\nMore than a theme park, Disneyland and Disney World are movie-like experiences you can walk around in, immersed in the joy and excitement of the setting and story.\n",
				"date_published": "2017-02-02T09:28:36-07:00",
				"url": "https://therealadam.com/2017/02/02/how-disney-pulls.html",
				"tags": ["Pop Culture","Disney"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/02/01/does-an-unadvertised.html",
				"title": "Does an unadvertised extension point even exist?",
				"content_html": "<p>There was an extension point, but I missed it.</p>\n<p>I was adding functionality to a class. I needed to add something that seemed a little different, but not too far afield, from what the existing code was doing. So I came up with a good name, wrote a method, and went about my day.</p>\n<p>A few weeks later, trying to understand an obscure path through this particular class, I found the extension point I should have been using. On one hand, eureka! On the other hand, why didn’t I notice this in the first place?</p>\n<p>Did I not consider the <!-- raw HTML omitted -->open/closed principle<!-- raw HTML omitted --> enough? Perhaps my “modification” sense should have tingled, sending me to create a new object to encapsulate the behavior with.</p>\n<p>Was the extension point <!-- raw HTML omitted -->hidden by indirection<!-- raw HTML omitted -->? Perhaps the change going into an ActiveRecord model through me off; I was doing as you’d normally do in a model. I wasn’t expecting <!-- raw HTML omitted -->another<!-- raw HTML omitted --> layer of abstraction.</p>\n<p>Were my <!-- raw HTML omitted -->changes too scattered<!-- raw HTML omitted --> amongst many files? I had modifications in a half-dozen files, plus their tests. It’s possible I was juggling too many things.</p>\n<p>Probably it’s all of these things. Lesson learned: when <!-- raw HTML omitted -->I<!-- raw HTML omitted --> get to feeling clever and add a handy extension point to make the next person’s job easier, <!-- raw HTML omitted -->advertise<!-- raw HTML omitted --> that extension point and <!-- raw HTML omitted -->make it clear this is probably where they want to make their change<!-- raw HTML omitted -->.</p>\n",
				"content_text": "There was an extension point, but I missed it.\n\nI was adding functionality to a class. I needed to add something that seemed a little different, but not too far afield, from what the existing code was doing. So I came up with a good name, wrote a method, and went about my day.\n\nA few weeks later, trying to understand an obscure path through this particular class, I found the extension point I should have been using. On one hand, eureka! On the other hand, why didn’t I notice this in the first place?\n\nDid I not consider the <strong>open/closed principle</strong> enough? Perhaps my “modification” sense should have tingled, sending me to create a new object to encapsulate the behavior with.\n\nWas the extension point <strong>hidden by indirection</strong>? Perhaps the change going into an ActiveRecord model through me off; I was doing as you’d normally do in a model. I wasn’t expecting <em>another</em> layer of abstraction.\n\nWere my <strong>changes too scattered</strong> amongst many files? I had modifications in a half-dozen files, plus their tests. It’s possible I was juggling too many things.\n\nProbably it’s all of these things. Lesson learned: when <em>I</em> get to feeling clever and add a handy extension point to make the next person’s job easier, <em>advertise</em> that extension point and <em>make it clear this is probably where they want to make their change</em>.\n",
				"date_published": "2017-02-01T19:27:05-07:00",
				"url": "https://therealadam.com/2017/02/01/does-an-unadvertised.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/26/perhaps-theres-a.html",
				
				"content_html": "<p>Perhaps there&rsquo;s a benign explanation for Paul Ryan appearing to have <!-- raw HTML omitted -->cut off his phones<!-- raw HTML omitted -->. Anecdotally, it does not seem GOP Congresscritters are putting much effort into their voicemails or phone lines. I called my representative, Lamar Smith, yesterday afternoon, incensed that <!-- raw HTML omitted -->he had suggested we listen to Trump and not the media<!-- raw HTML omitted -->. Both his DC and Austin voicemails were full. I was able to get through this morning and spoke with a staffer who was dismissive but polite.</p>\n<p>This practice of neglecting voicemails and only dismissively answering phones during office hours is appalling. The <!-- raw HTML omitted -->job<!-- raw HTML omitted --> of our Congress is to represent us. They cannot do that job if they aren&rsquo;t taking every voicemail, phone, and email into account. Very rarely do I get the feeling Congress wants to even <!-- raw HTML omitted -->appear<!-- raw HTML omitted --> they are doing their job.</p>\n<p>If I didn&rsquo;t answer my work email, I&rsquo;d lose my job. But Congresspeople don&rsquo;t lose their jobs except for during an election or certain kinds of partisan maneuverings.</p>\n<p>Fire Congress anyway. I&rsquo;ve started with the phones and a whole lot of pent-up frustration. Maybe <!-- raw HTML omitted -->the infernal hell of fax machines is next<!-- raw HTML omitted -->?</p>\n",
				"content_text": "Perhaps there's a benign explanation for Paul Ryan appearing to have <a href=\"https://twitter.com/davonmagwood/status/824677260372430848\">cut off his phones</a>. Anecdotally, it does not seem GOP Congresscritters are putting much effort into their voicemails or phone lines. I called my representative, Lamar Smith, yesterday afternoon, incensed that <a href=\"https://www.washingtonpost.com/politics/federal_government/house-science-chairman-get-news-from-trump-not-media/2017/01/25/15172576-e330-11e6-a419-eefe8eff0835_story.html?utm_term=.d202b59d3fe0\">he had suggested we listen to Trump and not the media</a>. Both his DC and Austin voicemails were full. I was able to get through this morning and spoke with a staffer who was dismissive but polite.\n\nThis practice of neglecting voicemails and only dismissively answering phones during office hours is appalling. The <em>job</em> of our Congress is to represent us. They cannot do that job if they aren't taking every voicemail, phone, and email into account. Very rarely do I get the feeling Congress wants to even <em>appear</em> they are doing their job.\n\nIf I didn't answer my work email, I'd lose my job. But Congresspeople don't lose their jobs except for during an election or certain kinds of partisan maneuverings.\n\nFire Congress anyway. I've started with the phones and a whole lot of pent-up frustration. Maybe <a href=\"https://twitter.com/mikeracanelli/status/824718627593019393\">the infernal hell of fax machines is next</a>?\n",
				"date_published": "2017-01-26T17:38:50-07:00",
				"url": "https://therealadam.com/2017/01/26/perhaps-theres-a.html",
				"tags": ["The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/22/the-tty-demystified.html",
				
				"content_html": "<p><!-- raw HTML omitted -->The TTY demystified<!-- raw HTML omitted -->. Learn you an arcane computing history, terminals, shells, UNIX, and even more arcanery! Terminal emulators are about the most reliable, versatile tools in my not-so-modern computing toolkit. It&rsquo;s nice to know a little more about how they work, besides &ldquo;lots of magic ending in -TY&rdquo;, e.g. teletypes, pseudo-terminals, session groups, etc.</p>\n",
				"content_text": "<a href=\"http://www.linusakesson.net/programming/tty/\">The TTY demystified</a>. Learn you an arcane computing history, terminals, shells, UNIX, and even more arcanery! Terminal emulators are about the most reliable, versatile tools in my not-so-modern computing toolkit. It's nice to know a little more about how they work, besides \"lots of magic ending in -TY\", e.g. teletypes, pseudo-terminals, session groups, etc.\n",
				"date_published": "2017-01-22T16:37:56-07:00",
				"url": "https://therealadam.com/2017/01/22/the-tty-demystified.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/08/clinton-dreisbacha-favorite.html",
				
				"content_html": "<p>Clinton Dreisbach: <!-- raw HTML omitted -->A favorite development tool: direnv<!-- raw HTML omitted -->. I&rsquo;ve previously used <!-- raw HTML omitted -->direnv<!-- raw HTML omitted --> to manage per-project environment variables. It&rsquo;s easy to set up and use for this. I highly recommend it! But, I&rsquo;d never thought of using it to define per-project shell aliases as Clinton does. Smart!</p>\n",
				"content_text": "Clinton Dreisbach: <a href=\"http://www.dreisbach.us/blog/a-favorite-development-tool-direnv/\">A favorite development tool: direnv</a>. I've previously used <code>direnv</code> to manage per-project environment variables. It's easy to set up and use for this. I highly recommend it! But, I'd never thought of using it to define per-project shell aliases as Clinton does. Smart!\n",
				"date_published": "2017-01-08T15:07:52-07:00",
				"url": "https://therealadam.com/2017/01/08/clinton-dreisbacha-favorite.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/07/our-laws-are.html",
				"title": "Our laws are here, they just aren't equally practiced yet",
				"content_html": "<p>That thing where institutions like the FBI are prohibited by law from meddling with presidential elections, and then the FBI meddled multiple times. We&rsquo;re just going to let that slide? Seems like it!</p>\n<p>The point is not there was one big injustice, which there was. The point is that justice has been distributed unevenly through your history. Outcomes favored by those in power but obtained illegally have long been effectively legal. Those out of power have always felt the full brunt of the law, and even worse.</p>\n<p>The inequality and imperfection by which our law has always been practiced. That&rsquo;s the lesson.</p>\n",
				"content_text": "That thing where institutions like the FBI are prohibited by law from meddling with presidential elections, and then the FBI meddled multiple times. We're just going to let that slide? Seems like it!\n\nThe point is not there was one big injustice, which there was. The point is that justice has been distributed unevenly through your history. Outcomes favored by those in power but obtained illegally have long been effectively legal. Those out of power have always felt the full brunt of the law, and even worse.\n\nThe inequality and imperfection by which our law has always been practiced. That's the lesson.\n",
				"date_published": "2017-01-07T14:23:24-07:00",
				"url": "https://therealadam.com/2017/01/07/our-laws-are.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/04/journalism-for-people.html",
				"title": "Journalism for people, not power",
				"content_html": "<p>Journalism is trying very hard to do better, but still failing America. Media is covering <!-- raw HTML omitted -->politics<!-- raw HTML omitted --> and not “<!-- raw HTML omitted -->We, the people<!-- raw HTML omitted -->”.</p>\n<p>Take the coverage of the Republican attempt to neuter congressional oversight and subsequent retreat amidst tremendous scrutiny. Coverage typically read “Donald Trump tweeted about this and by the way a ton of people called their congressperson.” The coverage is focused on what a person in power says. A fascination with celebrity and power.</p>\n<p>It’s not focused on the readers, or the people who bear the actions of politicians. Certainly not the disadvantaged who can’t even keep up with politics because they have neither a) the money for a newspaper subscription or b) the time to follow it all between multiple jobs and possibly a family.</p>\n<p>It’s focused on what politicians are <!-- raw HTML omitted -->saying<!-- raw HTML omitted --> the people want. It’s easy to get a politician to talk about this. That’s part of their job now, skating the public discourse towards the laws <!-- raw HTML omitted -->they<!-- raw HTML omitted --> want to pass.</p>\n<p>It’s focused on what think tanks want to talk about. Those talking heads on TV and think pieces on the opinion pages? It’s easy to get those people to talk because they’re paid to do those things by giant lobbies and interest groups. They’re paid to get in front of people and tell them what laws they should want.</p>\n<p>Journalism should counteract these extensions of the corporate state. When a politician, funded by a lobby, says “the people want affordable health care”, a print or television journalist should say “and here’s what three people not involved in politics actually said”. Maybe they’ll agree with their politicians, maybe they won’t!</p>\n<p>When a politician says “we should lower taxes on the top tax bracket”, media should follow up with that that means. Who exactly gets that tax break? Will actually benefit other people? What do people who don’t benefit from that tax break gain or lose because of it.</p>\n<p>The next news cycle will come up, the politicians will say one thing. The truth and tradeoffs will reflect another truth. The journalists will go out there and talk about the tradeoffs and what people think now. And <!-- raw HTML omitted -->then<!-- raw HTML omitted --> maybe we’ll get a more educated society.</p>\n<p>Likely this means the sports and entertainment pages have to subsidize the political coverage. Or we need to start recognizing pieces stuffed with quotes from think tanks and politicians as “advertorial” and not news.</p>\n<p>Regardless, political journalism as zero-sum entertainment has to go.</p>\n",
				"content_text": "Journalism is trying very hard to do better, but still failing America. Media is covering <em>politics</em> and not “<em>We, the people</em>”.\n\nTake the coverage of the Republican attempt to neuter congressional oversight and subsequent retreat amidst tremendous scrutiny. Coverage typically read “Donald Trump tweeted about this and by the way a ton of people called their congressperson.” The coverage is focused on what a person in power says. A fascination with celebrity and power.\n\nIt’s not focused on the readers, or the people who bear the actions of politicians. Certainly not the disadvantaged who can’t even keep up with politics because they have neither a) the money for a newspaper subscription or b) the time to follow it all between multiple jobs and possibly a family.\n\nIt’s focused on what politicians are <em>saying</em> the people want. It’s easy to get a politician to talk about this. That’s part of their job now, skating the public discourse towards the laws <em>they</em> want to pass.\n\nIt’s focused on what think tanks want to talk about. Those talking heads on TV and think pieces on the opinion pages? It’s easy to get those people to talk because they’re paid to do those things by giant lobbies and interest groups. They’re paid to get in front of people and tell them what laws they should want.\n\nJournalism should counteract these extensions of the corporate state. When a politician, funded by a lobby, says “the people want affordable health care”, a print or television journalist should say “and here’s what three people not involved in politics actually said”. Maybe they’ll agree with their politicians, maybe they won’t!\n\nWhen a politician says “we should lower taxes on the top tax bracket”, media should follow up with that that means. Who exactly gets that tax break? Will actually benefit other people? What do people who don’t benefit from that tax break gain or lose because of it.\n\nThe next news cycle will come up, the politicians will say one thing. The truth and tradeoffs will reflect another truth. The journalists will go out there and talk about the tradeoffs and what people think now. And <em>then</em> maybe we’ll get a more educated society.\n\nLikely this means the sports and entertainment pages have to subsidize the political coverage. Or we need to start recognizing pieces stuffed with quotes from think tanks and politicians as “advertorial” and not news.\n\nRegardless, political journalism as zero-sum entertainment has to go.\n",
				"date_published": "2017-01-04T18:38:02-07:00",
				"url": "https://therealadam.com/2017/01/04/journalism-for-people.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/03/i-love-overproduced.html",
				"title": "I love overproduced music",
				"content_html": "<p>It seems like some folks don’t like music with a lot of studio work. Overproduced, they call it. Maybe this is a relic of the days when producers weren’t a creative force on par with the actual performers and artists.</p>\n<p>I don’t know, because <!-- raw HTML omitted -->I love overproduced music<!-- raw HTML omitted -->. Phil Spector, “Wall of Sound”? Bring it. Large band efforts like “Sir Duke”, “You’re not from Texas”, or “Good Vibrations”? Love it. Super-filtered drum sound? Gotta have it.</p>\n<p>It probably has everything to do with, at one point, wanting to pursue a career as a double bassist in symphony orchestras. The pieces I loved the most were the big Romantic tone poems and symphonies with a chorus. Hundreds of people, dozens of unique parks, all playing at the same time, often loudly. It’s the essence of overproduced.</p>\n<!-- raw HTML omitted -->\n<p>Here’s a curious thing. When I hear “Wouldn’t it be nice?” in my head, it’s much bigger and Wagnerian than it is on <!-- raw HTML omitted -->Pet Sounds<!-- raw HTML omitted -->. The pedal tone is bigger and more prominent, the first note after the guitar intro is <!-- raw HTML omitted -->massive<!-- raw HTML omitted -->. Maybe I’m just projecting my interpretation onto the song.</p>\n<p>Contrast to “Good Vibrations”. There’s always more going on than I remember. Vocal parts, instruments. Sooooo good.</p>\n<p>Outside of Brian Wilson, I’ve noticed Jeff Lynne is amongst “the overproducers”. Especially, apparently, how he thins out drum sounds. <!-- raw HTML omitted -->Love it<!-- raw HTML omitted -->. Have I ever told you <!-- raw HTML omitted -->how much I dislike the sound of an raw snare drum?<!-- raw HTML omitted --></p>\n",
				"content_text": "It seems like some folks don’t like music with a lot of studio work. Overproduced, they call it. Maybe this is a relic of the days when producers weren’t a creative force on par with the actual performers and artists.\n\nI don’t know, because <strong>I love overproduced music</strong>. Phil Spector, “Wall of Sound”? Bring it. Large band efforts like “Sir Duke”, “You’re not from Texas”, or “Good Vibrations”? Love it. Super-filtered drum sound? Gotta have it.\n\nIt probably has everything to do with, at one point, wanting to pursue a career as a double bassist in symphony orchestras. The pieces I loved the most were the big Romantic tone poems and symphonies with a chorus. Hundreds of people, dozens of unique parks, all playing at the same time, often loudly. It’s the essence of overproduced.\n\n<hr />\n\nHere’s a curious thing. When I hear “Wouldn’t it be nice?” in my head, it’s much bigger and Wagnerian than it is on <em>Pet Sounds</em>. The pedal tone is bigger and more prominent, the first note after the guitar intro is <strong>massive</strong>. Maybe I’m just projecting my interpretation onto the song.\n\nContrast to “Good Vibrations”. There’s always more going on than I remember. Vocal parts, instruments. Sooooo good.\n\nOutside of Brian Wilson, I’ve noticed Jeff Lynne is amongst “the overproducers”. Especially, apparently, how he thins out drum sounds. <strong>Love it</strong>. Have I ever told you <a href=\"https://therealadam.com/2013/05/18/the-downsides-of-live-music/\">how much I dislike the sound of an raw snare drum?</a>\n",
				"date_published": "2017-01-03T10:00:00-07:00",
				"url": "https://therealadam.com/2017/01/03/i-love-overproduced.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/02/turns-out-ruby.html",
				"title": "Turns out Ruby is great for scripting!",
				"content_html": "<p>Earlier last year, I gave myself two challenges:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Of course, I was almost immediately stymied on the second one:</p>\n<p>[code lang=text]\nsudo dtruss -t write ruby -e &quot;puts 'hi!'&quot;\nPassword:</p>\n<p>dtrace: failed to execute ruby: dtrace cannot control executables signed with restricted entitlements\n[/code]</p>\n<p><!-- raw HTML omitted -->dtruss<!-- raw HTML omitted --> is the dtrace-powered macOS-equivalent of <!-- raw HTML omitted -->strace<!-- raw HTML omitted -->. It is very cool when it works. But. It turns out Apple has a thing that protects users from code injection hijinks, which makes dtrace not work. You can <!-- raw HTML omitted -->turn it off<!-- raw HTML omitted --> but that requires hijinks of its own.</p>\n<!-- raw HTML omitted -->\n<p>I <!-- raw HTML omitted -->did<!-- raw HTML omitted --> end up troubleshooting some production problems via <!-- raw HTML omitted -->strace<!-- raw HTML omitted --> and <!-- raw HTML omitted -->lsof<!-- raw HTML omitted -->. That was fun, very educational, and slightly helpful. Would do again.</p>\n<p>I did <!-- raw HTML omitted -->not<!-- raw HTML omitted --> end up using <!-- raw HTML omitted -->gdb<!-- raw HTML omitted --> to poke inside any Ruby programs. On the whole, this is probably for the better.</p>\n<!-- raw HTML omitted -->\n<p>I was more successful in using Ruby as a <!-- raw HTML omitted -->gasp<!-- raw HTML omitted --> scripting language. I gave myself some principles for writing Ruby automation:</p>\n<!-- raw HTML omitted -->\n<p>These were good principles.</p>\n<!-- raw HTML omitted -->\n<p>At first I tried writing Ruby scripts as command suites via <!-- raw HTML omitted -->sub<!-- raw HTML omitted -->. <!-- raw HTML omitted -->sub<!-- raw HTML omitted --> is a really cool idea, very easy to start with, makes discovery of functionality easy for others, and Just Works. You should try it some time!</p>\n<p>That said, often I didn’t need anything fancy. Just run a few commands. Sometimes I even wrote those with bash!</p>\n<p>But if I needed to do something less straightforward, I used template like this:</p>\n<p>[code lang=text]\n#!/usr/bin/env ruby</p>\n<p>HELP = &lt;&lt;-HELP\ntest # Run the test suite\ntest ci # Run test with CI options enabled\ntest acceptance # Run acceptance tests (grab a coffee&hellip;.)\nHELP</p>\n<p>module Test\nmodule_function</p>\n<p>def test\n<code>rspec spec</code>\nend</p>\n<h1 id=\"-more-methods-for-each-subcommand\">&hellip; more methods for each subcommand</h1>\n<p>end</p>\n<p>if __FILE == $0\ncmd = ARGV.first</p>\n<p>case cmd\nwhen &quot;ci&quot;\nTest.ci</p>\n<h1 id=\"-a-block-for-each-subcommand\">&hellip; a block for each subcommand</h1>\n<p>else\nTest.test\nend\nend\n[/code]</p>\n<p>This was a good, friction-eliminating starting skeleton.</p>\n<!-- raw HTML omitted -->\n<p>The template I settled on eliminated the friction of starting something new. I’d write down the subcommands or workflow I imagined I needed and get started. I wrote several scripts, delete or consolidated a few of them after a while, and still use a few of them daily.</p>\n<p>If you’re using a “scripting” language to build apps and have never tried using it to “script” things I “recommend” you try it!</p>\n",
				"content_text": "Earlier last year, I gave myself two challenges:\n\n<ul>\n<li>write automation scripts in Ruby (instead of giving up on writing them in shell)</li>\n<li>use system debugging tools (strace, lsof, gdb, etc.) more often to figure out why programs are behaving some way</li>\n</ul>\n\n<hr />\n\nOf course, I was almost immediately stymied on the second one:\n\n[code lang=text]\nsudo dtruss -t write ruby -e &quot;puts &#039;hi!&#039;&quot;\nPassword:\n\ndtrace: failed to execute ruby: dtrace cannot control executables signed with restricted entitlements\n[/code]\n\n<code>dtruss</code> is the dtrace-powered macOS-equivalent of <code>strace</code>. It is very cool when it works. But. It turns out Apple has a thing that protects users from code injection hijinks, which makes dtrace not work. You can <a href=\"http://internals.exposed/blog/dtrace-vs-sip.html\">turn it off</a> but that requires hijinks of its own.\n\n<hr />\n\nI <em>did</em> end up troubleshooting some production problems via <code>strace</code> and <code>lsof</code>. That was fun, very educational, and slightly helpful. Would do again.\n\nI did <em>not</em> end up using <code>gdb</code> to poke inside any Ruby programs. On the whole, this is probably for the better.\n\n<hr />\n\nI was more successful in using Ruby as a <em>gasp</em> scripting language. I gave myself some principles for writing Ruby automation:\n\n<ul>\n<li>only use core/standard library; no gem requires, no bundles, etc.</li>\n<li>thus, shell out to programs likely to be available, e.g. <code>curl</code></li>\n<li>if a script starts to get involved, add subcommands</li>\n<li>don’t worry about Ruby’s (weird-to-me) flags for emulating sed and awk; stick to the IRB-friendly stuff I’m used to</li>\n</ul>\n\nThese were good principles.\n\n<hr />\n\nAt first I tried writing Ruby scripts as command suites via <a href=\"https://github.com/basecamp/sub\">sub</a>. <code>sub</code> is a really cool idea, very easy to start with, makes discovery of functionality easy for others, and Just Works. You should try it some time!\n\nThat said, often I didn’t need anything fancy. Just run a few commands. Sometimes I even wrote those with bash!\n\nBut if I needed to do something less straightforward, I used template like this:\n\n[code lang=text]\n#!/usr/bin/env ruby\n\nHELP = &lt;&lt;-HELP\ntest # Run the test suite\ntest ci # Run test with CI options enabled\ntest acceptance # Run acceptance tests (grab a coffee....)\nHELP\n\nmodule Test\nmodule_function\n\ndef test\n`rspec spec`\nend\n\n# ... more methods for each subcommand\n\nend\n\nif __FILE == $0\ncmd = ARGV.first\n\ncase cmd\nwhen &quot;ci&quot;\nTest.ci\n# ... a block for each subcommand\nelse\nTest.test\nend\nend\n[/code]\n\nThis was a good, friction-eliminating starting skeleton.\n\n<hr />\n\nThe template I settled on eliminated the friction of starting something new. I’d write down the subcommands or workflow I imagined I needed and get started. I wrote several scripts, delete or consolidated a few of them after a while, and still use a few of them daily.\n\nIf you’re using a “scripting” language to build apps and have never tried using it to “script” things I “recommend” you try it!\n",
				"date_published": "2017-01-02T08:43:00-07:00",
				"url": "https://therealadam.com/2017/01/02/turns-out-ruby.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2017/01/01/tinkers-are-a.html",
				"title": "Tinkers are a quantity game, not a quality game",
				"content_html": "<p>I spend too much time fretting about what to build my side projects and tinkers with. On the one hand, that’s because side projects and tinkers are <!-- raw HTML omitted -->precisely<!-- raw HTML omitted --> for playing with things I normally wouldn’t get a chance to use. On the other hand, it’s often dumb because the tinker isn’t about learning a new technology or language.</p>\n<p>It’s about learning. And making stuff. Obsessing over the qualities of the build materials is besides the point. It’s not a Quality game, it’s a Quantity game.</p>\n<p>Now if you’ll excuse me I need to officiate a nerd horserace between Rust, Elm, and Elixir.</p>\n",
				"content_text": "I spend too much time fretting about what to build my side projects and tinkers with. On the one hand, that’s because side projects and tinkers are <em>precisely</em> for playing with things I normally wouldn’t get a chance to use. On the other hand, it’s often dumb because the tinker isn’t about learning a new technology or language.\n\nIt’s about learning. And making stuff. Obsessing over the qualities of the build materials is besides the point. It’s not a Quality game, it’s a Quantity game.\n\nNow if you’ll excuse me I need to officiate a nerd horserace between Rust, Elm, and Elixir.\n",
				"date_published": "2017-01-01T18:34:39-07:00",
				"url": "https://therealadam.com/2017/01/01/tinkers-are-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/12/31/jobs-not-adventures.html",
				"title": "Jobs, not adventures",
				"content_html": "<p>Earlier this year, after working at LivingSocial for four years, I switched things up and started at ShippingEasy. I didn’t make much of it at the time. I feel like too much is made of it these days.</p>\n<p><!-- raw HTML omitted -->These are jobs, not adventures.<!-- raw HTML omitted --></p>\n<p>It has, thankfully, become cliché to get excited about the next adventure. Instead, I’m going to flip the script and tell you about my LivingSocial “adventure”.</p>\n<!-- raw HTML omitted -->\n<p>Sadly, there was no fairy tale ending. About a third of the people I worked with ended up leaving before I did. Another third were laid off in the nth round of layoffs just after I left. The other third made it all the way through to Groupon’s acquisition of LivingSocial.</p>\n<p>It was not a happy ending or a classic adventure. It <!-- raw HTML omitted -->was<!-- raw HTML omitted --> an interesting, quirky tale.</p>\n",
				"content_text": "Earlier this year, after working at LivingSocial for four years, I switched things up and started at ShippingEasy. I didn’t make much of it at the time. I feel like too much is made of it these days.\n\n<strong>These are jobs, not adventures.</strong>\n\nIt has, thankfully, become cliché to get excited about the next adventure. Instead, I’m going to flip the script and tell you about my LivingSocial “adventure”.\n\n<ul>\n<li>Once upon a time I joined a team with all the promise in the world</li>\n<li>And as a sharp person I’d meet there told me, the grass is always greenish-brown, no matter how astroturf-green it seems from the outset</li>\n<li>I wrestled a monolith (two, depending on how you count)</li>\n<li>I joined a team, attempted to reimplement Heroku, and fell quite a bit short</li>\n<li>I wandered a bit, fighting little skirmishes with the monolith and pulling services out of it</li>\n<li>I ended up in light management, helping the people taking the monolith head on</li>\n<li>I gradually wandered up to an architectural tower, but tried my best not to line it in ivory</li>\n<li>I had good days where stuff got done in the tower</li>\n<li>And I had days where I feng shui’d the tower without really moving the ball forward</li>\n<li>In April, it was time for me to hand the keys to the tower over to other sharp folks and spread what I’ve learned elsewhere</li>\n<li>In the end, I worked with a lot of smart and wonderful people at LivingSocial.</li>\n</ul>\n\nSadly, there was no fairy tale ending. About a third of the people I worked with ended up leaving before I did. Another third were laid off in the nth round of layoffs just after I left. The other third made it all the way through to Groupon’s acquisition of LivingSocial.\n\nIt was not a happy ending or a classic adventure. It <em>was</em> an interesting, quirky tale.\n",
				"date_published": "2016-12-31T17:47:08-07:00",
				"url": "https://therealadam.com/2016/12/31/jobs-not-adventures.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/12/28/fascinating-mechanical-stories.html",
				"title": "Fascinating mechanical stories",
				"content_html": "<p>I already wrote about <!-- raw HTML omitted -->cars as appliances or objects<!-- raw HTML omitted -->, but I found this earlier germ of the idea in my drafts:</p>\n<!-- raw HTML omitted -->\n<p>The weird thing about e.g. BMW, Porsche, or Ferrari is how much enthusiasts know about them. The history, the construction, the internal model numbers, <!-- raw HTML omitted -->the stories<!-- raw HTML omitted -->. I suspect you can tell a prestige BMW owner from an enthusiast BMW owner if they can tell you the internal model number of their car.</p>\n<!-- raw HTML omitted -->\n<p>My first thought, when I came across this, was this is a pretty good bit of projection and rationalization on my part ;) But it’s not hard to look into the fandom of any of those ostensibly-prestige brands like BMW or Porsche and find communities that refer to BMWs not as 3- or 5-series but as E90s or E34s (mine is an F30) and Porsches as 986 or 996 instead of the 911 marketing number. So I’m at least a little right about this!</p>\n<p>I will never experience driving the majority of cars out there. I may never know how an old BMW compares to a newer one or properly hear an old Ferrari V-12. I <!-- raw HTML omitted -->can<!-- raw HTML omitted --> partake of the enthusiasm about their history, engineering, and idiosyncrasies. That’s the big attraction for me: the <!-- raw HTML omitted -->stories<!-- raw HTML omitted -->.</p>\n",
				"content_text": "I already wrote about <a href=\"https://therealadam.com/2016/09/24/automotive-enthusiasm-and-pragmatism/\">cars as appliances or objects</a>, but I found this earlier germ of the idea in my drafts:\n\n<blockquote>\n  There’s an in-betweenish bracket where prestige, social signaling, or bells and whistles count a bit more. The Prius and Tesla are social signals. Some folks get a Lexus, Acura, Infiniti, BMW, Mercedes-Benz, etc. for the prestige more than the bells and whistles.\n\n  The weird thing about e.g. BMW, Porsche, or Ferrari is how much enthusiasts know about them. The history, the construction, the internal model numbers, <em>the stories</em>. I suspect you can tell a prestige BMW owner from an enthusiast BMW owner if they can tell you the internal model number of their car.\n</blockquote>\n\nMy first thought, when I came across this, was this is a pretty good bit of projection and rationalization on my part ;) But it’s not hard to look into the fandom of any of those ostensibly-prestige brands like BMW or Porsche and find communities that refer to BMWs not as 3- or 5-series but as E90s or E34s (mine is an F30) and Porsches as 986 or 996 instead of the 911 marketing number. So I’m at least a little right about this!\n\nI will never experience driving the majority of cars out there. I may never know how an old BMW compares to a newer one or properly hear an old Ferrari V-12. I <em>can</em> partake of the enthusiasm about their history, engineering, and idiosyncrasies. That’s the big attraction for me: the <em>stories</em>.\n",
				"date_published": "2016-12-28T13:57:33-07:00",
				"url": "https://therealadam.com/2016/12/28/fascinating-mechanical-stories.html",
				"tags": ["Pop Culture","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/11/28/the-lesser-known.html",
				"title": "The lesser known vapors and waves",
				"content_html": "<p>There&rsquo;s a thing going on in music with all the vapors and chills and waves. I&rsquo;m not entirely sure what it is, yet. Even after reading this excellent survey <!-- raw HTML omitted -->of the various vaporwave subgen<!-- raw HTML omitted -->res, I&rsquo;m still not sure what it is. But it&rsquo;s very synth-y, a little sample-y, and very much what you&rsquo;d expect to hear in a hip, contemporary hotel lobby.</p>\n",
				"content_text": "There's a thing going on in music with all the vapors and chills and waves. I'm not entirely sure what it is, yet. Even after reading this excellent survey <a href=\"https://daily.bandcamp.com/2016/11/21/vaporwave-genres-list/\">of the various vaporwave subgen</a>res, I'm still not sure what it is. But it's very synth-y, a little sample-y, and very much what you'd expect to hear in a hip, contemporary hotel lobby.\n",
				"date_published": "2016-11-28T16:53:48-07:00",
				"url": "https://therealadam.com/2016/11/28/the-lesser-known.html",
				"tags": ["Music","Pop Culture","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/11/27/connective-blogging-tissue.html",
				"title": "Connective blogging tissue, then and now",
				"content_html": "<p>I miss the blogging scene circa 2001-2006. This was an era of near-peak enthusiasm for me. One of those moments where a random rock was turned over and what lay underneath was fascinating, positive, energizing, captivating, and led me to a better place in my life and career.</p>\n<p>As is noted by many notable bloggers, those days are gone. Blogs are not quite what they used to be. People, lots of them!, do social media differently now.</p>\n<p>Around 2004, amidst the decline of peer-to-peer technologies, I had a hunch that decentralized technology was going to lose out to centralization. Lo and behold, Friendster then MySpace then Facebook then Twitter made this real. People, I think, will always look to a Big Name first and look to run their own infrastructure nearly last.</p>\n<p>In light of that, I still think <!-- raw HTML omitted -->the lost infrastructure of social media<!-- raw HTML omitted --> is worth considering. As we stare down the barrel of a US administration that is likely far less benevolent with its use of an enormous propaganda and surveillance mechanism, should we swim upstream of the ease of centralization and decentralize again?</p>\n<p>Consider this chart identifying community and commercially run infrastructure that used to exist and what has, in some cases, succeeded it:</p>\n<p>[caption id=&ldquo;attachment_3832&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;796&rdquo;]<!-- raw HTML omitted --> Connective tissue, then and now[/caption]</p>\n<p>I look over that chart and think, yeah a lot of this would be cool to build again.</p>\n<p>Would people gravitate towards it? Maybe.</p>\n<p>Could it help pop filter bubbles, social sorting, fake news and trust relationships? Doesn’t seem worth doing if it can’t.</p>\n<p>Do people want to run their identity separate of the Facebook/Twitter/LinkedIn behemoth? I suspect what we saw as a blog back then is now a “pro-sumer” application, a low cost way for writers, analysts, and creatives to establish themselves.</p>\n<p>Maybe Twitter and Facebook are the perfect footprint for someone who just wants to air some steam about their boss, politics, or a fellow parent? It’s OK if people want to express their personality and opinions in someone else’s walled garden. I think what we learned in 2016 is that the walled gardens are more problematic than merely commercialism, though.</p>\n<p>That seems pessimistic. And maybe missing the point. You can’t bring back the 2003-6 heyday of blogging a decade later. You have to make something else. It has to fit the contemporary needs and move us forward. It has to again capture the qualities of fascinating, positive, energizing, captivating, and leading to a better place.</p>\n<p>I hope we figure it out and have another great idea party.</p>\n",
				"content_text": "I miss the blogging scene circa 2001-2006. This was an era of near-peak enthusiasm for me. One of those moments where a random rock was turned over and what lay underneath was fascinating, positive, energizing, captivating, and led me to a better place in my life and career.\n\nAs is noted by many notable bloggers, those days are gone. Blogs are not quite what they used to be. People, lots of them!, do social media differently now.\n\nAround 2004, amidst the decline of peer-to-peer technologies, I had a hunch that decentralized technology was going to lose out to centralization. Lo and behold, Friendster then MySpace then Facebook then Twitter made this real. People, I think, will always look to a Big Name first and look to run their own infrastructure nearly last.\n\nIn light of that, I still think <a href=\"https://medium.com/@anildash/the-lost-infrastructure-of-social-media-d2b95662ccd3#.y7nb4kz2u\">the lost infrastructure of social media</a> is worth considering. As we stare down the barrel of a US administration that is likely far less benevolent with its use of an enormous propaganda and surveillance mechanism, should we swim upstream of the ease of centralization and decentralize again?\n\nConsider this chart identifying community and commercially run infrastructure that used to exist and what has, in some cases, succeeded it:\n\n[caption id=\"attachment_3832\" align=\"alignnone\" width=\"796\"]<img class=\"alignnone size-full wp-image-3832\" src=\"https://therealadam.com/uploads/2024/312f9f314f.jpg\" alt=\"Connective tissue, then and now\" width=\"796\" height=\"475\" /> Connective tissue, then and now[/caption]\n\nI look over that chart and think, yeah a lot of this would be cool to build again.\n\nWould people gravitate towards it? Maybe.\n\nCould it help pop filter bubbles, social sorting, fake news and trust relationships? Doesn’t seem worth doing if it can’t.\n\nDo people want to run their identity separate of the Facebook/Twitter/LinkedIn behemoth? I suspect what we saw as a blog back then is now a “pro-sumer” application, a low cost way for writers, analysts, and creatives to establish themselves.\n\nMaybe Twitter and Facebook are the perfect footprint for someone who just wants to air some steam about their boss, politics, or a fellow parent? It’s OK if people want to express their personality and opinions in someone else’s walled garden. I think what we learned in 2016 is that the walled gardens are more problematic than merely commercialism, though.\n\nThat seems pessimistic. And maybe missing the point. You can’t bring back the 2003-6 heyday of blogging a decade later. You have to make something else. It has to fit the contemporary needs and move us forward. It has to again capture the qualities of fascinating, positive, energizing, captivating, and leading to a better place.\n\nI hope we figure it out and have another great idea party.\n",
				"date_published": "2016-11-27T14:06:00-07:00",
				"url": "https://therealadam.com/2016/11/27/connective-blogging-tissue.html",
				"tags": ["Build"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/11/14/on-recent-mercedesbenz.html",
				"title": "On recent Mercedes-Benz dashboard designs",
				"content_html": "<p>Mercedes (is it ok if I call you MB?), I think we need to talk. You’re doing great in Formula 1, congratulations on that! That said, you’ve gone in a weird direction with your passenger car dashboards. I suspect there are five different teams competing to win with these dashboards and I don’t think anyone, especially this car enthusiast, is winning overall.</p>\n<p>Here’s your current entry-level SUV, the GLA. If my eye is correct, this is one of your more dated dash designs:</p>\n<p>[caption id=&ldquo;attachment_3827&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;634&rdquo;]<!-- raw HTML omitted --> All the buttons![/caption]</p>\n<p>Back in the day, I think, you had someone on staff at MB whose primary job was to make sure your dashboards had at least 25 buttons on them. This was probably a challenging job before the advent of the in-car cellular phone. However, once those became common, that was 12 easy buttons if you just throw a dial pad onto the dash. And you did!</p>\n<p>So it’s easy to identify this as an older design from the dozens  (43) of buttons. But the age of this design also shows from the LCD. One, it’s somewhat small. Two, and more glaringly, you simply tacked the LCD onto the dashboard. What happened here? Did you run out of time?</p>\n<p>I think you can do better. The eyeball vents are nice though!</p>\n<p>Now let’s look at a slightly more modern, and much further upscale, design. Your AMG GT coupe:</p>\n<p>[caption id=&ldquo;attachment_3828&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;673&rdquo;]<!-- raw HTML omitted --> All the suede[/caption]</p>\n<p>OK so you lost most of the buttons in favor of <!-- raw HTML omitted -->bigger, chunkier<!-- raw HTML omitted --> buttons. That’s good! You also made a little scoop in the dash for the LCD. That’s progress, but the placement still feels awkward. I know that’s where all your luxury car friends put the LCD now, but you’re so dominant in F1, maybe you can do better here too?</p>\n<p>Can we take a moment to talk about the interactions a little? Your take on the rotary control is a little weird. You’ve got one, and it’s got a little hand rest on top of it. That seems good. But then the hand rest is also a touch interface for scribbling letters? Seems weird! I’ve never used that, but I’m a little skeptical.</p>\n<p>Next, you’ve gone through some weird stuff with your shifters. You had a really lovely gated shifter on the S-class couple as long ago as the early 90’s! Lately you’ve tried steering column shifters, and now it seems you’ve settled on a soap-shaped chunk of metal that you move up and down to change directions and put it in park. I feel like you should give up the physical shifter thing and just go with (you’re gonna like this) more buttons.</p>\n<p>My parting thought on the GT’s interior is this: width. Your designs impart a sense of tremendous girth in the dash, making the car feel bigger. We’ll come back to that immediately…</p>\n<p>Finally, one of your most recent designs, the E-class sedan:</p>\n<p>[caption id=&ldquo;attachment_3829&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;867&rdquo;]<!-- raw HTML omitted --> All the pixels![/caption]</p>\n<p>Again with a regal sense of width. Personally, I don’t like it. It makes your car seem like a giant sofa.</p>\n<p>You are making great progress on reducing the number of buttons. Again, kudos.</p>\n<p>OK, clearly you got a great deal on LCD panels. Plus, an almost equally good deal on eyeball vents. Good for you!</p>\n<p>Also you put an analog clock on the dash. So that’s nice.</p>\n<p>I don’t think we’re going to like this giant piece of software and glass thing for very long. Did you see <!-- raw HTML omitted -->Her<!-- raw HTML omitted -->? There are hardly any displays in it. All the computers are somehow <!-- raw HTML omitted -->inhabited<!-- raw HTML omitted --> by the characters, either by talking to them or interacting within a projection. Why take one of your classic instrument clusters, make that an LCD, and occasionally project information onto the windshield if the driver or passenger needs to see it there? Just a thought!</p>\n<p>I’m a little split on the design of your wheel there. It’s nice that technically it’s a 3-spoke design but really, if you count, it’s 4 spokes. The lamest number of spokes. Perhaps with the split you were trying to add more negative space and perhaps evoke a very old, SL-like 2-spoke design? That’s a nice gesture, but I think you missed here. Surely you could engineer a straight-up 2-spoke wheel?</p>\n<p>In summary:</p>\n<!-- raw HTML omitted -->\n<p>Hope that helps!</p>\n",
				"content_text": "Mercedes (is it ok if I call you MB?), I think we need to talk. You’re doing great in Formula 1, congratulations on that! That said, you’ve gone in a weird direction with your passenger car dashboards. I suspect there are five different teams competing to win with these dashboards and I don’t think anyone, especially this car enthusiast, is winning overall.\n\nHere’s your current entry-level SUV, the GLA. If my eye is correct, this is one of your more dated dash designs:\n\n[caption id=\"attachment_3827\" align=\"alignnone\" width=\"634\"]<img class=\"alignnone size-full wp-image-3827\" src=\"https://therealadam.com/uploads/2024/597cb5b00a.jpg\" alt=\"All the buttons!\" width=\"634\" height=\"221\" /> All the buttons![/caption]\n\nBack in the day, I think, you had someone on staff at MB whose primary job was to make sure your dashboards had at least 25 buttons on them. This was probably a challenging job before the advent of the in-car cellular phone. However, once those became common, that was 12 easy buttons if you just throw a dial pad onto the dash. And you did!\n\nSo it’s easy to identify this as an older design from the dozens  (43) of buttons. But the age of this design also shows from the LCD. One, it’s somewhat small. Two, and more glaringly, you simply tacked the LCD onto the dashboard. What happened here? Did you run out of time?\n\nI think you can do better. The eyeball vents are nice though!\n\nNow let’s look at a slightly more modern, and much further upscale, design. Your AMG GT coupe:\n\n[caption id=\"attachment_3828\" align=\"alignnone\" width=\"673\"]<img class=\"alignnone size-full wp-image-3828\" src=\"https://therealadam.com/uploads/2024/ab532700b6.jpg\" alt=\"All the suede\" width=\"673\" height=\"353\" /> All the suede[/caption]\n\nOK so you lost most of the buttons in favor of <strong>bigger, chunkier</strong> buttons. That’s good! You also made a little scoop in the dash for the LCD. That’s progress, but the placement still feels awkward. I know that’s where all your luxury car friends put the LCD now, but you’re so dominant in F1, maybe you can do better here too?\n\nCan we take a moment to talk about the interactions a little? Your take on the rotary control is a little weird. You’ve got one, and it’s got a little hand rest on top of it. That seems good. But then the hand rest is also a touch interface for scribbling letters? Seems weird! I’ve never used that, but I’m a little skeptical.\n\nNext, you’ve gone through some weird stuff with your shifters. You had a really lovely gated shifter on the S-class couple as long ago as the early 90’s! Lately you’ve tried steering column shifters, and now it seems you’ve settled on a soap-shaped chunk of metal that you move up and down to change directions and put it in park. I feel like you should give up the physical shifter thing and just go with (you’re gonna like this) more buttons.\n\nMy parting thought on the GT’s interior is this: width. Your designs impart a sense of tremendous girth in the dash, making the car feel bigger. We’ll come back to that immediately…\n\nFinally, one of your most recent designs, the E-class sedan:\n\n[caption id=\"attachment_3829\" align=\"alignnone\" width=\"867\"]<img class=\"alignnone size-full wp-image-3829\" src=\"https://therealadam.com/uploads/2024/5c1db76cc8.jpg\" alt=\"All the pixels!\" width=\"867\" height=\"405\" /> All the pixels![/caption]\n\nAgain with a regal sense of width. Personally, I don’t like it. It makes your car seem like a giant sofa.\n\nYou are making great progress on reducing the number of buttons. Again, kudos.\n\nOK, clearly you got a great deal on LCD panels. Plus, an almost equally good deal on eyeball vents. Good for you!\n\nAlso you put an analog clock on the dash. So that’s nice.\n\nI don’t think we’re going to like this giant piece of software and glass thing for very long. Did you see <em>Her</em>? There are hardly any displays in it. All the computers are somehow <em>inhabited</em> by the characters, either by talking to them or interacting within a projection. Why take one of your classic instrument clusters, make that an LCD, and occasionally project information onto the windshield if the driver or passenger needs to see it there? Just a thought!\n\nI’m a little split on the design of your wheel there. It’s nice that technically it’s a 3-spoke design but really, if you count, it’s 4 spokes. The lamest number of spokes. Perhaps with the split you were trying to add more negative space and perhaps evoke a very old, SL-like 2-spoke design? That’s a nice gesture, but I think you missed here. Surely you could engineer a straight-up 2-spoke wheel?\n\nIn summary:\n\n<ul>\n<li>fewer buttons, less noticeable screens, more seamless interactions</li>\n<li>a few retro design elements (eyeball vents, analog clocks) are great, too many is too much</li>\n<li>reduce your five design teams (screens, buttons, wheels, interactions, A/C) down to two: driving interactions and auxiliary interactions</li>\n</ul>\n\nHope that helps!\n",
				"date_published": "2016-11-14T10:00:00-07:00",
				"url": "https://therealadam.com/2016/11/14/on-recent-mercedesbenz.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/11/12/mutual-benefit.html",
				"title": "Mutual Benefit",
				"content_html": "<p>Leaders of business and thought have been putting out statements showing unity or acceptance of Donald Trump’s election. I feel this is normalizing what has just happened to this country and therefore these statements are awful.</p>\n<p>If I were a captain of industry or leader of thought, I’d use this statement and encourage everyone else to do the same:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Mutual benefit.<!-- raw HTML omitted --> It’s so easy to draft laws and make changes that benefit everyone. It takes nothing away from me if Black Lives Matter. Pricing the cost of pollution into the gas for my car means there’s an incentive for me to use less and what I do use pays for the negative effects of using it. Letting a gay couple marry or someone change their gender takes nothing away from my marriage or identity.</p>\n<p>We will not let Trump do as he’s said to our neighbors and our country. If he wishes to change course for the better now, fine. Otherwise, we will refuse to allow Trump-style business and rhetoric to become business-as-normal in our country.</p>\n",
				"content_text": "Leaders of business and thought have been putting out statements showing unity or acceptance of Donald Trump’s election. I feel this is normalizing what has just happened to this country and therefore these statements are awful.\n\nIf I were a captain of industry or leader of thought, I’d use this statement and encourage everyone else to do the same:\n\n<blockquote>\n  As a private citizen, Mr. Trump has said and done numerous things which are indefensible and which we as a country cannot endorse or accept. While we regret that he’s been elected, as he transitions to life as a public servant, we are willing to consider his actions and act together when they are mutually beneficial to all of our customers, employees, partners, and the greater public. In any case where there is a conflict of benefit, we shall stand opposed to Mr. Trump as is our duty based on the founding principles of this nation.\n</blockquote>\n\n<strong>Mutual benefit.</strong> It’s so easy to draft laws and make changes that benefit everyone. It takes nothing away from me if Black Lives Matter. Pricing the cost of pollution into the gas for my car means there’s an incentive for me to use less and what I do use pays for the negative effects of using it. Letting a gay couple marry or someone change their gender takes nothing away from my marriage or identity.\n\nWe will not let Trump do as he’s said to our neighbors and our country. If he wishes to change course for the better now, fine. Otherwise, we will refuse to allow Trump-style business and rhetoric to become business-as-normal in our country.\n",
				"date_published": "2016-11-12T10:42:05-07:00",
				"url": "https://therealadam.com/2016/11/12/mutual-benefit.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/10/25/the-least-bad.html",
				"title": "The least bad solution",
				"content_html": "<p>Sometimes I look over the options and constraints to choose something suboptimal. I have to pick the least-bad solution.</p>\n<p>I recently chose a least-bad way to write a test. In a Rails app, the most sensible thing to solve my problem was something like this:</p>\n<p>[code lang=text]\ndef propagate_from_child_to_parent\nmodel_parents.find_each(&amp;:do_a_sideeffect)\nend\n[/code]</p>\n<p>In the test, I ended up having to write this assertion</p>\n<p>[code lang=text]\nexpect_any_instance_of(ModelParents).to receive(:do_a_sideeffect)\n[/code]</p>\n<p>This kind of stub and assertion is clearly a smell. But, consider the alternatives:</p>\n<!-- raw HTML omitted -->\n<p>In the end, it felt like the shady mock+assertion was the best choice. Using that particular assertion says “slow down and pay attention, a special thing is happening here”. It’s not something I want to do every time, but it was the least bad solution in this context.</p>\n",
				"content_text": "Sometimes I look over the options and constraints to choose something suboptimal. I have to pick the least-bad solution.\n\nI recently chose a least-bad way to write a test. In a Rails app, the most sensible thing to solve my problem was something like this:\n\n[code lang=text]\ndef propagate_from_child_to_parent\n  model_parents.find_each(&amp;:do_a_sideeffect)\nend\n[/code]\n\nIn the test, I ended up having to write this assertion\n\n[code lang=text]\nexpect_any_instance_of(ModelParents).to receive(:do_a_sideeffect)\n[/code]\n\nThis kind of stub and assertion is clearly a smell. But, consider the alternatives:\n\n<ul>\n<li>stub out the child model object under so that <code>find_each</code> returns a stub object that I can make sure <code>do_a_sideffect</code> is called on</li>\n<li>try to hack around ActiveRecords associations so it returns the same object as I inject in my test</li>\n<li>seek out some other result of <code>do_a_sideeffect</code> that I could assert on</li>\n</ul>\n\nIn the end, it felt like the shady mock+assertion was the best choice. Using that particular assertion says “slow down and pay attention, a special thing is happening here”. It’s not something I want to do every time, but it was the least bad solution in this context.\n",
				"date_published": "2016-10-25T09:00:00-07:00",
				"url": "https://therealadam.com/2016/10/25/the-least-bad.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/10/20/wanted-state-machines.html",
				"title": "Wanted: state machines in the language",
				"content_html": "<p>Our programming languages are often structured around the problem domain of compilers and the archaic (for most of us) task of converting things people understand to a thing the computer can execute.</p>\n<p>Why don’t our languages have deeper support for the ways we reason about problem domains or the ways we struggle to reason. For example, why aren’t state machines and checking their sanity (or marking their unsoundness) a thing in pretty much any language?</p>\n<p>The unhelpful answer is “because you can write a state machine in library code”. Which leads me to ask, why don’t we have popular state machine clones? Why is there no xUnit or Sinatra of state machines that is widely cloned to fresh and exciting languages?</p>\n<p>The cynical answer is “because many programmers don’t want to think that hard”. The optimistic answer is that there’s room for someone to capture this problem space as well as xUnit did for programmer testing or Sinatra did for turning URL-like strings into method calls. You could be famous!</p>\n",
				"content_text": "Our programming languages are often structured around the problem domain of compilers and the archaic (for most of us) task of converting things people understand to a thing the computer can execute.\n\nWhy don’t our languages have deeper support for the ways we reason about problem domains or the ways we struggle to reason. For example, why aren’t state machines and checking their sanity (or marking their unsoundness) a thing in pretty much any language?\n\nThe unhelpful answer is “because you can write a state machine in library code”. Which leads me to ask, why don’t we have popular state machine clones? Why is there no xUnit or Sinatra of state machines that is widely cloned to fresh and exciting languages?\n\nThe cynical answer is “because many programmers don’t want to think that hard”. The optimistic answer is that there’s room for someone to capture this problem space as well as xUnit did for programmer testing or Sinatra did for turning URL-like strings into method calls. You could be famous!\n",
				"date_published": "2016-10-20T14:29:04-07:00",
				"url": "https://therealadam.com/2016/10/20/wanted-state-machines.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/10/17/van-halen-ranked.html",
				"title": "Van Halen ranked, atypically",
				"content_html": "<p>Best songs that David Lee Roth talks over:</p>\n<!-- raw HTML omitted -->\n<p>Coincidentally, best use of Van Halen songs in film:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Best songs that David Lee Roth talks over:\n\n<ul>\n<li>\"Hot for Teacher\"</li>\n<li>\"Panama\"</li>\n<li>\"Everybody Wants Some\"</li>\n</ul>\n\nCoincidentally, best use of Van Halen songs in film:\n\n<ul>\n<li>\"Hot for Teacher\" in the strip club scene of <em>Varsity Blues</em></li>\n<li>\"Panama\" in the joyriding/donuts scene of <em>Superbad</em></li>\n<li>\"Everybody Wants Some\" in the Hummer scene of <em>Zombieland</em></li>\n</ul>\n",
				"date_published": "2016-10-17T19:47:01-07:00",
				"url": "https://therealadam.com/2016/10/17/van-halen-ranked.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/10/09/bon-iver-discovers.html",
				"title": "Bon Iver discovers the Option key on his Mac",
				"content_html": "<p>[caption id=&ldquo;attachment_3815&rdquo; align=&ldquo;alignnone&rdquo; width=&ldquo;213&rdquo;]<!-- raw HTML omitted --> Someone just discovered all the weird glyphs you can make if you hold the option key and type random stuff![/caption]</p>\n<p><!-- raw HTML omitted -->22, A Million<!-- raw HTML omitted -->, quick thoughts:</p>\n<!-- raw HTML omitted -->\n<p>So what genre <!-- raw HTML omitted -->is<!-- raw HTML omitted --> this album? Neo-electro-ambient-folk-jam? Either way, it works!</p>\n",
				"content_text": "[caption id=\"attachment_3815\" align=\"alignnone\" width=\"213\"]<img class=\"alignnone size-full wp-image-3815\" src=\"https://therealadam.com/uploads/2024/0ae508b5a9.jpg\" alt=\"Someone just discovered all the weird glyphs you can make if you hold the option key and type random stuff!\" width=\"213\" height=\"539\" /> Someone just discovered all the weird glyphs you can make if you hold the option key and type random stuff![/caption]\n\n<em>22, A Million</em>, quick thoughts:\n\n<ul>\n<li>first track has a very Tune-Yards drums thing going</li>\n<li>second track has a very <em>808s &amp; Heartbreak</em> thing</li>\n<li>a few tracks in: each track is like Bon Iver doing someone else’s track from the past ten years, but with emo autotune</li>\n<li>I like the background piano/horn tracks on “29 #Strafford APTS”</li>\n<li>feels like the track sequencing demonstrates thinking through emotional/tempo pacing 👍</li>\n<li>I really like the use of pseudo-sax harmony e.g. “&#095;&#095;&#095;&#095;45&#095;&#095;&#095;&#095;&#095;”; slightly Ornette Coleman-esque</li>\n<li>I like how a lot of the individual parts don’t fit together exactly right, but it still works</li>\n</ul>\n\nSo what genre <em>is</em> this album? Neo-electro-ambient-folk-jam? Either way, it works!\n",
				"date_published": "2016-10-09T11:00:00-07:00",
				"url": "https://therealadam.com/2016/10/09/bon-iver-discovers.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/10/08/my-first-car.html",
				
				"content_html": "<!-- raw HTML omitted -->\n<p>My first car. Except not right-hand drive. 1989 Honda Accord. And it was not nearly so clean, or grey. But you could fit a double bass in the front seat! Pretty practical for my high school needs.</p>\n",
				"content_text": "<img class=\"alignnone size-full wp-image-3806\" src=\"https://therealadam.com/uploads/2024/ba3bc9ce52.jpg\" alt=\"tumblr_oe7br9uhal1roi5yvo1_1280\" width=\"1280\" height=\"864\" />\n\nMy first car. Except not right-hand drive. 1989 Honda Accord. And it was not nearly so clean, or grey. But you could fit a double bass in the front seat! Pretty practical for my high school needs.\n",
				"date_published": "2016-10-08T09:55:36-07:00",
				"url": "https://therealadam.com/2016/10/08/my-first-car.html",
				"tags": ["Pop Culture","Eye Candy","Image"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/09/28/on-the-albums.html",
				"title": "On the albums of The Clash",
				"content_html": "<p>Passing thoughts on the discography of The Clash that is not <!-- raw HTML omitted -->London Calling<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>This has been 🔥 takes.</p>\n",
				"content_text": "Passing thoughts on the discography of The Clash that is not <em>London Calling</em>:\n\n<ul>\n<li><a href=\"http://brianbailey.me\">Brian</a> and I had a conversation that randomly veered onto the Clash which prompted to me to listen to all of their studio albums</li>\n<li>I have listened to <em>London Calling</em> a few times before, and recall some story about its producer encouraging them to go broader with the album so as to reach a wider audience; basically that it’s not much like their other albums</li>\n<li>I enjoy <em>London Calling</em>, but I’m not sure what to expect from a categorical English punk band</li>\n<li>I like the punk <a href=\"https://en.wikipedia.org/wiki/DIY_ethic\">ethos of don’t wait for permission and build it yourself</a></li>\n<li>I <em>strongly</em> dislike when punk music is simplistic shouting</li>\n<li>Enough about me, let’s talk about the music</li>\n<li>I was pleasantly surprised!</li>\n<li>Their early albums don’t sound like the learned to play their instruments an hour before they started recording</li>\n<li>They probably listened to music outside of their genre even before <em>London Calling</em> 👍</li>\n<li>The albums after <em>London Calling</em> sound like they were trying to walk a line between keeping to their punk/ish origins and exploring integrating other genres into their sound</li>\n<li>I should mention that their “Guns On the Roof” is exactly the same riff as The Who’s “Can’t Explain”</li>\n<li>Would listen again!</li>\n</ul>\n\nThis has been 🔥 takes.\n",
				"date_published": "2016-09-28T13:00:00-07:00",
				"url": "https://therealadam.com/2016/09/28/on-the-albums.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/09/26/were-all-adults.html",
				"title": "We’re all adults here, but we’re not all mind readers",
				"content_html": "<p>My favorite advice on the topic of method visibility (i.e. public vs. private) comes from Python creator Guido van Rossum. It goes something like “we’re all adults here” and says it’s not really a necessary thing for compilers/runtimes to hide methods from specific callers. Don’t go mucking around in other object’s implementations. I still think that’s mostly right.</p>\n<p><!-- raw HTML omitted -->Except<!-- raw HTML omitted -->, coming up to speed on a new code base is vastly easier when there’s some delineation of the waterline between an object’s public API which it expects other objects to use and its private implementation which it does not. It tells me a) the private methods are open for change and refactoring and b) below the private “waterline”, don’t bother going any deeper when spelunking to figure out how this program works.</p>\n<p>In a new or strange codebase, every little bit of tractability helps.</p>\n",
				"content_text": "My favorite advice on the topic of method visibility (i.e. public vs. private) comes from Python creator Guido van Rossum. It goes something like “we’re all adults here” and says it’s not really a necessary thing for compilers/runtimes to hide methods from specific callers. Don’t go mucking around in other object’s implementations. I still think that’s mostly right.\n\n<em>Except</em>, coming up to speed on a new code base is vastly easier when there’s some delineation of the waterline between an object’s public API which it expects other objects to use and its private implementation which it does not. It tells me a) the private methods are open for change and refactoring and b) below the private “waterline”, don’t bother going any deeper when spelunking to figure out how this program works.\n\nIn a new or strange codebase, every little bit of tractability helps.\n",
				"date_published": "2016-09-26T10:00:00-07:00",
				"url": "https://therealadam.com/2016/09/26/were-all-adults.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/09/24/automotive-enthusiasm-and.html",
				"title": "Automotive enthusiasm and pragmatism",
				"content_html": "<p>A few years ago, I was re-infected with enthusiasm for cars. I came upon <!-- raw HTML omitted --><!-- raw HTML omitted -->One Car to Do It All<!-- raw HTML omitted --><!-- raw HTML omitted --> and found a new reason to obsess over cars.</p>\n<p>I read <!-- raw HTML omitted -->Car and Driver<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Road and Track<!-- raw HTML omitted --> as a teenager. I was excited by the agency that cars bring (who isn’t?). It was a fun thing for me to nerd out about: technical specifications , comparing feature lists, and of course benchmarks! There was also a slight bit of romance to automotive journalism, ostensibly all writers traveling the country (or world) driving neat cars in beautiful places, often quite quickly.</p>\n<p>Now, I’m taken by the history of specific manufacturers and how older models of cars became the current models. The technology and coordination needed to produce the modern car appeals to my technological side. The shape of cars new and old is a fun subjective conversation (e.g. are exterior about form or function?).</p>\n<!-- raw HTML omitted -->\n<p>Most people do not view cars this way. They are automotive pragmatists. They want a car like they want a refrigerator or washing machine. The car is an appliance. It takes you from where you are to where you want to go without drama, in a modicum of comfort. The quality of the steering feedback, the particulars of the engine, or the predecessor of the car from two decades ago are nothing. The optimization is all around cost of ownership and utility.</p>\n<p>(For the sake of symmetry I feel compelled to write another couple paragraphs on automotive pragmatism. But, there’s really nothing else to say. It’s pragmatic through and through.)</p>\n<!-- raw HTML omitted -->\n<p>A curious thing happens when my car enthusiasm interacts with pragmatic car owners. Some of them will encourage me to talk about my enthusiasm. Mostly, it seems a little awkward, as though they’re afraid I somehow experience cars in a better way than they do. This is totally not the case, I can’t even really drive a stick!</p>\n<p>In a way its not actually that curious. Car enthusiasm and the cars enthusiasts own correlate highly with elitism, which <!-- raw HTML omitted -->is by definition<!-- raw HTML omitted --> intimidating. But it does make me wish I had a shorthand for “I drive this car because its interesting to me, but I won’t judge your car, now tell me what <!-- raw HTML omitted -->you’re<!-- raw HTML omitted --> enthusiastic about that <!-- raw HTML omitted -->I<!-- raw HTML omitted --> don’t understand”.</p>\n",
				"content_text": "A few years ago, I was re-infected with enthusiasm for cars. I came upon <a href=\"http://petrolicious.com/one-car-to-do-it-all-jack-olsen-s-911\"><em>One Car to Do It All</em></a> and found a new reason to obsess over cars.\n\nI read <em>Car and Driver</em> and <em>Road and Track</em> as a teenager. I was excited by the agency that cars bring (who isn’t?). It was a fun thing for me to nerd out about: technical specifications , comparing feature lists, and of course benchmarks! There was also a slight bit of romance to automotive journalism, ostensibly all writers traveling the country (or world) driving neat cars in beautiful places, often quite quickly.\n\nNow, I’m taken by the history of specific manufacturers and how older models of cars became the current models. The technology and coordination needed to produce the modern car appeals to my technological side. The shape of cars new and old is a fun subjective conversation (e.g. are exterior about form or function?).\n\n<hr />\n\nMost people do not view cars this way. They are automotive pragmatists. They want a car like they want a refrigerator or washing machine. The car is an appliance. It takes you from where you are to where you want to go without drama, in a modicum of comfort. The quality of the steering feedback, the particulars of the engine, or the predecessor of the car from two decades ago are nothing. The optimization is all around cost of ownership and utility.\n\n(For the sake of symmetry I feel compelled to write another couple paragraphs on automotive pragmatism. But, there’s really nothing else to say. It’s pragmatic through and through.)\n\n<hr />\n\nA curious thing happens when my car enthusiasm interacts with pragmatic car owners. Some of them will encourage me to talk about my enthusiasm. Mostly, it seems a little awkward, as though they’re afraid I somehow experience cars in a better way than they do. This is totally not the case, I can’t even really drive a stick!\n\nIn a way its not actually that curious. Car enthusiasm and the cars enthusiasts own correlate highly with elitism, which <em>is by definition</em> intimidating. But it does make me wish I had a shorthand for “I drive this car because its interesting to me, but I won’t judge your car, now tell me what <em>you’re</em> enthusiastic about that <em>I</em> don’t understand”.\n",
				"date_published": "2016-09-24T08:39:36-07:00",
				"url": "https://therealadam.com/2016/09/24/automotive-enthusiasm-and.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/09/17/here-comes-graphql.html",
				"title": "Here comes GraphQL",
				"content_html": "<p>GraphQL is gaining purchase outside of the JavaScript communities and this seems like a pretty good thing. Shopify and GitHub have jumped on board. <!-- raw HTML omitted -->Absinthe<!-- raw HTML omitted --> (Elixir) and <!-- raw HTML omitted -->graphql-ruby<!-- raw HTML omitted --> have caught my attention, though I haven’t had an opportunity to tinker with them yet.</p>\n<p>That said, I like that GraphQL (and JSON API) let service developers focus on exposing a specific data model and optimizing access to it rather than taking a side quest through REST API design. For application developers, building screens and interactions with the data they need defined inline seems like a big win for contextual understanding.</p>\n<p>As ever, the risk of using any kind of mapping layer, whether its objects and relational data or JSON object graphs to downstream service calls, is creating a naive, one to one mapping that create awkwardness and inefficiency.</p>\n",
				"content_text": "GraphQL is gaining purchase outside of the JavaScript communities and this seems like a pretty good thing. Shopify and GitHub have jumped on board. <a href=\"http://absinthe-graphql.org\">Absinthe</a> (Elixir) and <a href=\"https://github.com/rmosolgo/graphql-ruby\">graphql-ruby</a> have caught my attention, though I haven’t had an opportunity to tinker with them yet.\n\nThat said, I like that GraphQL (and JSON API) let service developers focus on exposing a specific data model and optimizing access to it rather than taking a side quest through REST API design. For application developers, building screens and interactions with the data they need defined inline seems like a big win for contextual understanding.\n\nAs ever, the risk of using any kind of mapping layer, whether its objects and relational data or JSON object graphs to downstream service calls, is creating a naive, one to one mapping that create awkwardness and inefficiency.\n",
				"date_published": "2016-09-17T17:58:51-07:00",
				"url": "https://therealadam.com/2016/09/17/here-comes-graphql.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/08/20/weaponized-jerks.html",
				"title": "Weaponized jerks",
				"content_html": "<p>For a long time, the Central Intelligence Agency has had <!-- raw HTML omitted -->a guide to wrecking an organization by doing a few weird tricks at meetings<!-- raw HTML omitted -->. It recently came to light, and took hold as a meme, that this is the reality many people (non-spies) experience in their actual work life. Basically, some people work with weaponized jerks.</p>\n<p>Which leads me to wonder, did the CIA <!-- raw HTML omitted -->invent<!-- raw HTML omitted --> these tactics, or did they <!-- raw HTML omitted -->discover<!-- raw HTML omitted --> them? Were they sitting around, talking about how big of a jerk John is at meetings and how he’s causing the Communists to win? And then they said to themselves, “hey, what if we had low-level agents just be like John?!”</p>\n<p>And thus, the CIA made the world just a little bit less great.</p>\n",
				"content_text": "For a long time, the Central Intelligence Agency has had <a href=\"https://www.cia.gov/news-information/featured-story-archive/2012-featured-story-archive/simple-sabotage.html\">a guide to wrecking an organization by doing a few weird tricks at meetings</a>. It recently came to light, and took hold as a meme, that this is the reality many people (non-spies) experience in their actual work life. Basically, some people work with weaponized jerks.\n\nWhich leads me to wonder, did the CIA <em>invent</em> these tactics, or did they <em>discover</em> them? Were they sitting around, talking about how big of a jerk John is at meetings and how he’s causing the Communists to win? And then they said to themselves, “hey, what if we had low-level agents just be like John?!”\n\nAnd thus, the CIA made the world just a little bit less great.\n",
				"date_published": "2016-08-20T07:27:12-07:00",
				"url": "https://therealadam.com/2016/08/20/weaponized-jerks.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/08/14/refactor-the-cow.html",
				"title": "Refactor the cow paths",
				"content_html": "<p>Ron Jeffries, <!-- raw HTML omitted -->Refactoring &ndash; Not on the backlog!<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Check out his drawings, telling the story of a project evolving from a clear lawn to one overwhelmed with brush. Once your project is overwhelmed with code slowing you down, don’t burn it down. Jeffries says we should instead use whatever work is next to do enabling refactorings to make the project work happens. Since locality is such a strong force in software, it’s likely that refactoring will help the next bit of project work. Repeat several times and a new golden path emerges through your software.</p>\n<p>In other words, don’t reach for a new master plan when the effort to change your software goes up. Pave the cow paths through whatever work you’re doing!</p>\n",
				"content_text": "Ron Jeffries, <a href=\"http://ronjeffries.com/xprog/articles/refactoring-not-on-the-backlog/\">Refactoring -- Not on the backlog!</a>\n\n<blockquote>\nSimples! We take the next feature that we are asked to build, and instead of detouring around all the weeds and bushes, we take the time to clear a path through some of them. Maybe we detour around others. We improve the code where we work, and ignore the code where we don&#039;t have to work. We get a nice clean path for some of our work. Odds are, we&#039;ll visit this place again: that&#039;s how software development works.\n</blockquote>\n\nCheck out his drawings, telling the story of a project evolving from a clear lawn to one overwhelmed with brush. Once your project is overwhelmed with code slowing you down, don’t burn it down. Jeffries says we should instead use whatever work is next to do enabling refactorings to make the project work happens. Since locality is such a strong force in software, it’s likely that refactoring will help the next bit of project work. Repeat several times and a new golden path emerges through your software.\n\nIn other words, don’t reach for a new master plan when the effort to change your software goes up. Pave the cow paths through whatever work you’re doing!\n",
				"date_published": "2016-08-14T12:51:18-07:00",
				"url": "https://therealadam.com/2016/08/14/refactor-the-cow.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/08/13/losing-the-scent.html",
				"title": "Losing the scent, acquiring the taste",
				"content_html": "<p>When I didn&rsquo;t drink coffee, the thing I enjoyed about coffee was the smell. It has a really great aroma. Unlike popcorn!</p>\n<p>Now that I do drink coffee, I don&rsquo;t notice the smell as much. I have to stop myself to take notice of it. That&rsquo;s sort of a bummer.</p>\n<p>I&rsquo;m acclimated to coffee. I love drinking it, and tasting it. But, I wish I could drink coffee, regularly, and still smell it.</p>\n",
				"content_text": "When I didn't drink coffee, the thing I enjoyed about coffee was the smell. It has a really great aroma. Unlike popcorn!\n\nNow that I do drink coffee, I don't notice the smell as much. I have to stop myself to take notice of it. That's sort of a bummer.\n\nI'm acclimated to coffee. I love drinking it, and tasting it. But, I wish I could drink coffee, regularly, and still smell it.\n",
				"date_published": "2016-08-13T11:37:51-07:00",
				"url": "https://therealadam.com/2016/08/13/losing-the-scent.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/08/01/getting-around-together.html",
				"title": "Getting around, together",
				"content_html": "<p><!-- raw HTML omitted -->Riding the Rails: Celebrating Trains and Subway Commuter Life<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>For a brief window of several months, ten years ago, I rode the Dallas light rail to work. It was exactly as quoted. It was when I read, when I reflected on the world or just the day gone past. I often miss it.</p>\n<!-- raw HTML omitted -->\n<p>Even more, I wish <!-- raw HTML omitted -->everyone<!-- raw HTML omitted --> had to partake of public transit. We spend too much time in our bubbles. Our offices, homes, social networks, and cars isolate us from each other. Perhaps we wouldn’t find ourself in this strange election cycle if people from different backgrounds and circumstances had to spend twenty minutes with each other several days a week.</p>\n<p>Taking polluting cars off the road, reshaping our communities, greater safety, it’s all secondary to me. Growing our empathy with one weird trick to see each other and relate is the outcome I find most intriguing to good public transit.</p>\n",
				"content_text": "<a href=\"https://blog.longreads.com/2016/07/25/trains-subway-commuter-life/\">Riding the Rails: Celebrating Trains and Subway Commuter Life</a>:\n\n<blockquote>\nTrain time is essential time, and rail travel isn’t strictly pragmatic. For many, the commute is their only time to read, think, and zone out.\n</blockquote>\n\nFor a brief window of several months, ten years ago, I rode the Dallas light rail to work. It was exactly as quoted. It was when I read, when I reflected on the world or just the day gone past. I often miss it.\n\n<blockquote>\n&#8230;as Jacquelin Cangro writes in The Subway Chronicles, the “New York Subway is a microcosm of world culture. The train is the great equalizer. When the doors close, all of us — black or white, Sephardic or Catholic, Chinese or Indian — are going together, and no one will arrive any faster or in better style.”\n</blockquote>\n\nEven more, I wish <em>everyone</em> had to partake of public transit. We spend too much time in our bubbles. Our offices, homes, social networks, and cars isolate us from each other. Perhaps we wouldn&#8217;t find ourself in this strange election cycle if people from different backgrounds and circumstances had to spend twenty minutes with each other several days a week.\n\nTaking polluting cars off the road, reshaping our communities, greater safety, it&#8217;s all secondary to me. Growing our empathy with one weird trick to see each other and relate is the outcome I find most intriguing to good public transit.\n",
				"date_published": "2016-08-01T19:42:04-07:00",
				"url": "https://therealadam.com/2016/08/01/getting-around-together.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/07/12/a-bold-futureretro.html",
				"title": "A bold, future-retro Audi dash",
				"content_html": "<p>I’m officially intrigued by the <!-- raw HTML omitted -->Audi TT<!-- raw HTML omitted --> and R8 going with no center display. The look is retro and functional. Will it annoy passengers, or do passengers who want to change the radio or see the map even matter in those cars? Worth noting that the 2016 A4 has the same display for the instrument cluster <!-- raw HTML omitted -->and<!-- raw HTML omitted --> a giant center display.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Another cool design detail: the A/C controls are on the center of the eyeball vents. Pretty cool!</p>\n",
				"content_text": "I&#8217;m officially intrigued by the <a href=\"http://carinteriors.tumblr.com/post/132545988416/2015-audi-tts\">Audi TT</a> and R8 going with no center display. The look is retro and functional. Will it annoy passengers, or do passengers who want to change the radio or see the map even matter in those cars? Worth noting that the 2016 A4 has the same display for the instrument cluster <em>and</em> a giant center display.\n\n<figure>\n<img src=\"uploads/2024/844dd40b87.jpg\" alt=\"2015 Audi TTS\" />\n\n<figcaption>2015 Audi TTS</figcaption>\n\n</figure>\n\nAnother cool design detail: the A/C controls are on the center of the eyeball vents. Pretty cool!\n",
				"date_published": "2016-07-12T06:35:28-07:00",
				"url": "https://therealadam.com/2016/07/12/a-bold-futureretro.html",
				"tags": ["Pop Culture","Eye Candy"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/06/26/our-current-political.html",
				"title": "Our current political Trolley Problem",
				"content_html": "<p>As self-driving cars inch closer to a daily reality, the <!-- raw HTML omitted -->Trolley Problem<!-- raw HTML omitted --> seems to have entered our lexicon. In short, should a self-driving computer choose to avoid hitting a bunch of people and kill its single occupant as a result? Turns out people expect the car to protect the greater good second and their own skin first.</p>\n<p>Maybe out our current political environment of unfettered gun violence, climate change, Trump-lead racism, Brexit-fueled xenophobia, and general apprehension about losing what we thought we’d earned are a kind of longer-term but still serious Trolley Problem. Would you vote to improve society at large even if it meant taking yourself down a ego/prestige/money notch?</p>\n<p>Well when I put it that way, things seem pretty bleak!</p>\n<p>I happened across an Alan Kay essay, <!-- raw HTML omitted -->Enlightened Imagination for Citizens<!-- raw HTML omitted -->, and it kinda helped me get through that bleakness. Some highlights:</p>\n<!-- raw HTML omitted -->\n<p>Regarding our inability to reason about dynamic systems:</p>\n<!-- raw HTML omitted -->\n<p>On acting now instead of acquiring a perfect answer or solution:</p>\n<!-- raw HTML omitted -->\n<p>Perhaps the solution is to get ourselves representatives that excel at reasoning and legislation instead of politics and fundraising?</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "As self-driving cars inch closer to a daily reality, the <a href=\"http://motherboard.vice.com/read/people-want-autonomous-cars-to-protect-the-greater-good-but-only-after-them\">Trolley Problem</a> seems to have entered our lexicon. In short, should a self-driving computer choose to avoid hitting a bunch of people and kill its single occupant as a result? Turns out people expect the car to protect the greater good second and their own skin first.\n\nMaybe out our current political environment of unfettered gun violence, climate change, Trump-lead racism, Brexit-fueled xenophobia, and general apprehension about losing what we thought we’d earned are a kind of longer-term but still serious Trolley Problem. Would you vote to improve society at large even if it meant taking yourself down a ego/prestige/money notch?\n\nWell when I put it that way, things seem pretty bleak!\n\nI happened across an Alan Kay essay, <a href=\"http://worrydream.com/EnlightenedImaginationForCitizens/\">Enlightened Imagination for Citizens</a>, and it kinda helped me get through that bleakness. Some highlights:\n\n<blockquote>In a raging flood, a man risks his life to save a swept away child, but two years earlier he voted against strengthening the levee whose breaching caused the flood. During an epidemic people work tirelessly to help the stricken, but ignored elementary sanitation processes that could have prevented the outbreak. More astoundingly, as many as 200,000 Americans die each year from diseases spread by their own doctors who have been ignoring elementary sanitation (including simply washing their hands when needed), but who then work diligently to try to save the patients they have infected. Studies show that about 80% of Americans are “highly concerned” about climate change, yet this percentage drops to less than 20% when the issue is combined with what it will cost to actually deal with these changes.</blockquote>\n\nRegarding our inability to reason about dynamic systems:\n\n<blockquote>One of the reasons the consequences were not imagined is that our human commonsense tends to think of “stability” as something static, whereas in systems it is a dynamic process that can be fragile to modest changes. One way to imagine “stability” is to take a bottle and turn it upside down. If it is gently poked, it will return to its “stable position”. But a slightly more forceful poke will topple it. It is still a system, but has moved into a new dynamic stability, one which will take much more work to restore than required to topple it.</blockquote>\n\nOn acting now instead of acquiring a perfect answer or solution:\n\n<blockquote>When the costs of an imperfectly understood event are high or essentially irreversible, measures have to be taken even when perfect proofs are lacking. This idea is understood by most developed societies—and carried out in the form of levees and pumps, food and water stocks, etc.—but is nonetheless resisted by many of the voting public.</blockquote>\n\nPerhaps the solution is to get ourselves representatives that excel at reasoning and legislation instead of politics and fundraising?\n\n<blockquote>One of the reasons we are a republic with a democratic base is that the representatives can be selected to be “the best and the brightest” from the population as a whole (this was another early ideal for the great American experiment). We could argue that the current representatives are “all too representative”, but this is part of a slide in our political and social systems that needs to be shored up and improved. The idea of “national service” is now just a whisper, but it is what needs to be brought back into the forefront of what it means to be a citizen.</blockquote>\n",
				"date_published": "2016-06-26T14:04:26-07:00",
				"url": "https://therealadam.com/2016/06/26/our-current-political.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/06/19/a-few-qualities.html",
				"title": "A few qualities of mature developers",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p class=\"p1\">What is technical leadership? Per <a href=\"http://squeakyvessel.com/2015/05/12/mature-developers/\">Mature Developers</a>, it's a lot of things. My favorites:</p>\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">So one of the first and most important qualities of mature developers is they’re more often than not paying attention to what is going on around them. They’re deliberately taking their time to observe before proceeding (put succinctly as STOP; Stop, Take a breath, Observe, Proceed).</span></p>\n</blockquote>\n\n<p class=\"p1\">It is <strong>so hard</strong> for me to do the stop and breath part.</p>\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">Sharing the [technical] vision with other involved parties not only serves as a perfect opportunity for practicing one’s skills to explain deeply technical terms and circumstances with non-technical people. It also serves the purpose to validate the vision in terms of relevance to business value and other aspects.</span></p>\n</blockquote>\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">Assessing and understanding risks better puts them into a position where it’s also more likely they’ll actually take risks. Risks which, without the knowledge about business value and the bigger context, may look too big to be worthwhile. But not for mature developers who are able to see beyond the obvious risks and include more aspects into their judgement.</span></p>\n</blockquote>\n\n<p class=\"p1\">Managing risk, but not overmanaging it: also very difficult.</p>\n\n<p class=\"p1\">Previously: <a href=\"http://therealadam.com/2013/03/11/thoughts-on-being-a-senior-engineer/\">Thoughts on “Being a Senior Engineer”</a>.</p>\n",
				"date_published": "2016-06-19T15:02:16-07:00",
				"url": "https://therealadam.com/2016/06/19/a-few-qualities.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/06/18/i-love-when.html",
				"title": "I love when snares don't keep time",
				"content_html": "<p>In the majority of music you&rsquo;ll hear after 1960, the drummer does most of the time keeping with their snare. On 100% of Bruce Springsteen songs, time is kept <!-- raw HTML omitted -->entirely<!-- raw HTML omitted --> with the snare. I listen to <!-- raw HTML omitted -->a lot<!-- raw HTML omitted --> of The Boss; it&rsquo;s a little surprising when I don&rsquo;t here a consistent 1/3 or 2/4 snare keeping time.</p>\n<p>That makes the drumming on most jazz albums pretty delightful. For example, Cannonball Adderley, &ldquo;Games&rdquo; (Roy McCurdy on drums):</p>\n<p><a href=\"https://www.youtube.com/watch?v=C8PilszSFik\">www.youtube.com/watch</a></p>\n",
				"content_text": "In the majority of music you'll hear after 1960, the drummer does most of the time keeping with their snare. On 100% of Bruce Springsteen songs, time is kept <em>entirely</em> with the snare. I listen to <strong>a lot</strong> of The Boss; it's a little surprising when I don't here a consistent 1/3 or 2/4 snare keeping time.\n\nThat makes the drumming on most jazz albums pretty delightful. For example, Cannonball Adderley, \"Games\" (Roy McCurdy on drums):\n\n[www.youtube.com/watch](https://www.youtube.com/watch?v=C8PilszSFik)\n",
				"date_published": "2016-06-18T10:23:00-07:00",
				"url": "https://therealadam.com/2016/06/18/i-love-when.html",
				"tags": ["Music","Pop Culture","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/05/23/we-should-make.html",
				"title": "We should make jokes about tech millionaires",
				"content_html": "<p>I try not to respond to the bullshit in this world with &ldquo;this person is awful and they should feel awful”. Except for politicians. I try not to participate in witch hunts. I cope via jokes and satire.</p>\n<p>After making a few jokes about <!-- raw HTML omitted -->Paul Graham at RubyConf<!-- raw HTML omitted -->, a fellow asked me why I made fun of that poor kingmaker (not his words). In short, I think <!-- raw HTML omitted -->everyone<!-- raw HTML omitted --> should make jokes about multimillionaires, especially Paul Graham.\nHe&rsquo;s a celebrity-of-sorts, making the <!-- raw HTML omitted -->idea<!-- raw HTML omitted --> of Paul Graham completely open to satire and ridicule. My favorite such satire was a composite character from <!-- raw HTML omitted -->Silicon Valley<!-- raw HTML omitted --> who, due to the actor&rsquo;s passing, will sadly not recur on the show. So it&rsquo;s up to us, the unwashed internet people, to poke sticks in his platonic sides.</p>\n<p>The thing to illuminate is how past Paul Graham <!-- raw HTML omitted -->used<!-- raw HTML omitted --> to have the analytical and rational skills to tell when someone like <!-- raw HTML omitted -->current<!-- raw HTML omitted --> Paul Graham is acting a fool. Graham suffers from confirmation bias <!-- raw HTML omitted -->and<!-- raw HTML omitted --> billionaire bias. He thinks his rational skills are still sharp enough to help him write about extremely tricky and irrational topics like diversity or inequality and he thinks his monetary success makes him doubly qualified to write about these topics from his own first principles. In other words, Past Paul Graham should know enough to tell Current Paul Graham when he&rsquo;s out of his league.</p>\n<p>I feel Paul Graham is an example of the geeks-shall-inherit-the-world and corruption of money that is bullshit in this world and everyone should apply satire to him whenever possible.</p>\n",
				"content_text": "I try not to respond to the bullshit in this world with \"this person is awful and they should feel awful”. Except for politicians. I try not to participate in witch hunts. I cope via jokes and satire.\n\nAfter making a few jokes about <a href=\"https://www.youtube.com/watch?v=sn7prRGGp4Q\">Paul Graham at RubyConf</a>, a fellow asked me why I made fun of that poor kingmaker (not his words). In short, I think <em>everyone</em> should make jokes about multimillionaires, especially Paul Graham.\nHe's a celebrity-of-sorts, making the <em>idea</em> of Paul Graham completely open to satire and ridicule. My favorite such satire was a composite character from <em>Silicon Valley</em> who, due to the actor's passing, will sadly not recur on the show. So it's up to us, the unwashed internet people, to poke sticks in his platonic sides.\n\nThe thing to illuminate is how past Paul Graham <em>used</em> to have the analytical and rational skills to tell when someone like <em>current</em> Paul Graham is acting a fool. Graham suffers from confirmation bias <em>and</em> billionaire bias. He thinks his rational skills are still sharp enough to help him write about extremely tricky and irrational topics like diversity or inequality and he thinks his monetary success makes him doubly qualified to write about these topics from his own first principles. In other words, Past Paul Graham should know enough to tell Current Paul Graham when he's out of his league.\n\nI feel Paul Graham is an example of the geeks-shall-inherit-the-world and corruption of money that is bullshit in this world and everyone should apply satire to him whenever possible.\n",
				"date_published": "2016-05-23T06:55:10-07:00",
				"url": "https://therealadam.com/2016/05/23/we-should-make.html",
				"tags": ["Pop Culture","Comedy, haha"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/04/10/why-i-blog.html",
				"title": "Why I blog in bursts",
				"content_html": "<p>I write here in bursts. It confounds me as to what marks the beginning and end of those spikes. I have a few hunches:</p>\n<!-- raw HTML omitted -->\n<p>Also sometimes I’m not quite sure how to end a thought like this and I wonder if I should worry about that and then I decide to let it slide.</p>\n",
				"content_text": "I write here in bursts. It confounds me as to what marks the beginning and end of those spikes. I have a few hunches:\n\n<ul>\n<li>ambitions grow larger than my free time: it&#8217;s easier to hit publish on a self-contained thought than a connected series or magnum-opus essay</li>\n<li>intervention of life: work, vacation, various chores adults are expected to perform</li>\n<li>self-distraction: acting as a novelty junky rather than pushing one thing through to completion</li>\n<li>tweeting less: putting little thoughts into tweets means I&#8217;m driven to put slighly-not-little thoughts into blog posts</li>\n<li>reading less: reading interesting things drives me to (attempt to) write interesting things</li>\n<li>skipping record: I worry I&#8217;ve already had this thought and published it somewhere</li>\n</ul>\n\nAlso sometimes I&#8217;m not quite sure how to end a thought like this and I wonder if I should worry about that and then I decide to let it slide.\n",
				"date_published": "2016-04-10T15:21:00-07:00",
				"url": "https://therealadam.com/2016/04/10/why-i-blog.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/03/25/extra-ruby-chaining.html",
				"title": "Extra Ruby chaining, not that costly",
				"content_html": "<p>A few folks suggested I try lazy enumerables to make my <!-- raw HTML omitted -->extremely chained<!-- raw HTML omitted --> style practical. I was curious about the actual costs of my style, so it&rsquo;s time for <!-- raw HTML omitted -->lies and microbenchmarks<!-- raw HTML omitted -->! Turns out naively chaining a bunch of maps together isn&rsquo;t very costly, so go with that to start.</p>\n<p>Lazy came in much slower than consolidating the logic in one loop or chaining them without lazy. I thought, I must not have used lazy properly. Turns out, I&rsquo;m probably showing that laziness isn&rsquo;t well suited to iterating over collections without an early termination clause (e.g. a take, first, or find) and that for small collections (like an 87-line /etc/passwd), the cost of the lazy plumbing can noticeably outweigh the work done inside the loops. Thanks to <!-- raw HTML omitted -->Rein Heinrich for talking me<!-- raw HTML omitted --> to the bottom line!</p>\n",
				"content_text": "A few folks suggested I try lazy enumerables to make my <a href=\"http://therealadam.com/2016/03/23/one-idea-per-line/\">extremely chained</a> style practical. I was curious about the actual costs of my style, so it's time for <a href=\"https://gist.github.com/therealadam/e4bd2d028b995cffb4e8\">lies and microbenchmarks</a>! Turns out naively chaining a bunch of maps together isn't very costly, so go with that to start.\n\nLazy came in much slower than consolidating the logic in one loop or chaining them without lazy. I thought, I must not have used lazy properly. Turns out, I'm probably showing that laziness isn't well suited to iterating over collections without an early termination clause (e.g. a take, first, or find) and that for small collections (like an 87-line /etc/passwd), the cost of the lazy plumbing can noticeably outweigh the work done inside the loops. Thanks to <a href=\"https://twitter.com/therealadam/status/713456331517259777\">Rein Heinrich for talking me</a> to the bottom line!\n",
				"date_published": "2016-03-25T13:13:56-07:00",
				"url": "https://therealadam.com/2016/03/25/extra-ruby-chaining.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/03/23/one-idea-per.html",
				"title": "One idea per line",
				"content_html": "<p>Lately, I’m doing a weird thing when writing Ruby code. I’m trying to only put one idea or action per line. I’m not sure about it yet.</p>\n<p>Here’s what a method to fetch item-y things might look like:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>For the sake of comparison, here’s how I may have written that method a couple years ago:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I like that the pace of reading the first example is even. You don’t arrive upon some monster line of code that does a multiple things. You don’t have to unpack what’s happening in a situation where you’re calling <!-- raw HTML omitted -->f(g(h(some_args)))<!-- raw HTML omitted -->. It makes moving lines of code around much simpler because each one is only dependent on what comes before, and not what happens <!-- raw HTML omitted -->inside<!-- raw HTML omitted -->. It&rsquo;s a little easier to write a <!-- raw HTML omitted -->three-part method<!-- raw HTML omitted -->, which I really like.</p>\n<p>But still, I hesitate. My methods end up about 50% longer. Breaking up the <!-- raw HTML omitted -->Enumerable<!-- raw HTML omitted --> transformations into multiple loops instead of one loop doing a bunch of work is probably pretty slow. I have to come up with a lot of names (which is, I think a net good), some of which end up a little redundant.</p>\n<p>I’ll let you know how it goes. It may not even survive code review, who knows!</p>\n",
				"content_text": "Lately, I’m doing a weird thing when writing Ruby code. I’m trying to only put one idea or action per line. I’m not sure about it yet.\n\nHere’s what a method to fetch item-y things might look like:\n\n<pre><code>def fetch_items(options={})\n  limit = options.fetch(:limit)\n  timestamp = options.fetch(:timestamp)\n  paged_helper = PagedHelper\n  client = OurHttpClient\n\n  responses = paged_helper.\n    new(limit, timestamp).\n    fetch_pages { |params| client.get(params) }\n\n  responses.\n    map { |r| JSON.parse(r) }.\n    map { |h| ItemCollection.new(h) }.\n    map { |ic| ic.items }.\n    flatten\nend\n</code></pre>\n\nFor the sake of comparison, here’s how I may have written that method a couple years ago:\n\n<pre><code>def fetch_items(options={})\n  helper = PagedHelper.new(limit, timestamp)\n  responses = helper.fetch_pages { |params| OurHttpClient.get(params) }\n\n  responses.map { |r| ItemCollection.new(JSON.parse(r)).items }.flatten\nend\n</code></pre>\n\nI like that the pace of reading the first example is even. You don’t arrive upon some monster line of code that does a multiple things. You don’t have to unpack what’s happening in a situation where you’re calling <code>f(g(h(some_args)))</code>. It makes moving lines of code around much simpler because each one is only dependent on what comes before, and not what happens <em>inside</em>. It's a little easier to write a <a href=\"http://therealadam.com/2016/02/02/three-part-method/\">three-part method</a>, which I really like.\n\nBut still, I hesitate. My methods end up about 50% longer. Breaking up the <code>Enumerable</code> transformations into multiple loops instead of one loop doing a bunch of work is probably pretty slow. I have to come up with a lot of names (which is, I think a net good), some of which end up a little redundant.\n\nI’ll let you know how it goes. It may not even survive code review, who knows!\n",
				"date_published": "2016-03-23T08:00:00-07:00",
				"url": "https://therealadam.com/2016/03/23/one-idea-per.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/03/17/less-fancy.html",
				"title": "Less fancy",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p class=\"p1\"><span class=\"s1\">Programming is easier when you know how to stop solving 100 problems with 1 fancy thing and solve 100 problems with 20 plain things.</span></p>\n",
				"date_published": "2016-03-17T17:05:47-07:00",
				"url": "https://therealadam.com/2016/03/17/less-fancy.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/02/25/how-does-a.html",
				"title": "How does a bomber outlast a JS library?",
				"content_html": "<p>Ember is probably leading the JavaScript framework pack by <!-- raw HTML omitted -->supporting releases with security patches for slight more than a year<!-- raw HTML omitted -->. By comparison, there&rsquo;s a cottage industry of garages restoring and updating old Porsche sports cars then selling them for ridiculous prices. The USAF (the same one, curiously, that is spending $1.5 trillion on a useless jet, somehow) is going to use their largest strategic bomber, the B-52, for one hundred years.</p>\n<p>I&rsquo;m always thinking about Greg Borenstein&rsquo;s words when it comes to <!-- raw HTML omitted -->technology churn<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "Ember is probably leading the JavaScript framework pack by <a href=\"http://emberjs.com/blog/2016/02/25/announcing-embers-first-lts.html\">supporting releases with security patches for slight more than a year</a>. By comparison, there's a cottage industry of garages restoring and updating old Porsche sports cars then selling them for ridiculous prices. The USAF (the same one, curiously, that is spending $1.5 trillion on a useless jet, somehow) is going to use their largest strategic bomber, the B-52, for one hundred years.\n\nI'm always thinking about Greg Borenstein's words when it comes to <a href=\"https://twitter.com/atduskgreg/status/676467358500720640\">technology churn</a>:\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">The constant churn of web technologies hobbles the creation of timeless learning materials and continuity of knowledge across generations.</span></p>\n</blockquote>\n\n<p class=\"p1\">We should try harder on this.</p>\n",
				"date_published": "2016-02-25T11:13:31-07:00",
				"url": "https://therealadam.com/2016/02/25/how-does-a.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/02/09/code-that-resists.html",
				"title": "Code that resists",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p class=\"p1\"><span class=\"s1\">Kellan Elliott-McCrea, on the way <a href=\"http://laughingmeme.org/2016/01/10/towards-an-understanding-of-technical-debt/\">towards an understanding of technical debt</a>, catalogs the ways we end up with code that resists our efforts to change it:</span></p>\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\">Therefore the second common meaning of “technical debt” is the features of the codebase we encounter in our work that make it resist change. Examples of features that can make a codebase resist change include: poor modularization, poor documentation or poor test coverage. Just as easily though an abundance of modularization (and complexity) or an abundance documentation, and tests encoding the now the incorrect old behavior can apply a strong downward pressure on change.</span></p>\n<p class=\"p1\"><span class=\"s1\">A little discussed and poorly understood design goal for code is disposability. Given change, what design patterns can we follow that allow us to quickly expunge incorrect behavior from our codebase? Interestingly it is a much more tractable metric for measuring as opposed to more popular criteria like “elegance”. (a post for another day)</span></p>\n</blockquote>\n\n<p class=\"p1\">Put that in your thinker. Does something like Strategy or Adapter let you throw out whole classes when they prove unnecessary? Or is that so only when you luck out and chose the exact right axes of disposability? Does a microservice really let you discard codebases wholesale? Can maps and functions free you from intertwingled state and behavior or does it move the resistance somewhere else?</p>\n\n<p class=\"p1\">Grumpy, opinionated answers: possibly! Even more possibly! Meh. Very meh.</p>\n",
				"date_published": "2016-02-09T18:40:41-07:00",
				"url": "https://therealadam.com/2016/02/09/code-that-resists.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/02/08/tinkering-with-kinto.html",
				"title": "Tinkering with Kinto",
				"content_html": "<p>Here&rsquo;s a thing I want to experiment with. Short videos talking about what I&rsquo;m currently tinkering with. Here&rsquo;s one!</p>\n<p>[wpvideo lj3gGXFS]</p>\n<p>More notes in <!-- raw HTML omitted -->the repo<!-- raw HTML omitted -->, if you want to play along at home. Let me know what you think!</p>\n",
				"content_text": "Here's a thing I want to experiment with. Short videos talking about what I'm currently tinkering with. Here's one!\n\n[wpvideo lj3gGXFS]\n\nMore notes in <a href=\"https://github.com/therealadam/kinto-sketch\">the repo</a>, if you want to play along at home. Let me know what you think!\n",
				"date_published": "2016-02-08T19:51:49-07:00",
				"url": "https://therealadam.com/2016/02/08/tinkering-with-kinto.html",
				"tags": ["Uncategorized","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/02/02/three-part-method.html",
				"title": "Three part method",
				"content_html": "<p>I find methods/functions decomposed into three parts really satisfying. Consider a typical xUnit test:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Lately I’ve been structuring Rails controller similarly:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Clojure even has the <!-- raw HTML omitted -->let<!-- raw HTML omitted --> form which encourages this style:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I don’t think there’s anything inherently <!-- raw HTML omitted -->wrong<!-- raw HTML omitted --> if a method or function isn’t organized this way. But when I read code structured this way, it feels less like a bunch of random logic and more like a cohesive unit that someone put time into thinking through how someone might try to understand it later. The <!-- raw HTML omitted -->Rule of Three<!-- raw HTML omitted --> rules everything around us.</p>\n",
				"content_text": "I find methods/functions decomposed into three parts really satisfying. Consider a typical xUnit test:\n\n<pre><code>def test_grants_new_role\n  # setup\n  user = make_user\n  new_role = make_new_role\n\n  # behavior under test\n  user.add_role(new_role)\n\n  # assert results\n  assert_equal [new_role], user.roles\nend\n</code></pre>\n\nLately I’ve been structuring Rails controller similarly:\n\n<pre><code>def create\n  # Extract inputs/parameters from HTTP request\n  person_params = params.require(:person).permit(:name, :age)\n\n  # Invoke behavior encapsulated in a Plain(ish) Ruby object somewhere\n  user = UserService.create_user(person_params)\n\n  # Check the result and make some HTTP output\n  if user.persisted?\n    redirect_to user_path(user.id)\n  else\n    @user = user\n    render :new\n  end\nend\n</code></pre>\n\nClojure even has the <code>let</code> form which encourages this style:\n\n<pre><code>; annotated from clj-http\n; https://github.com/dakrone/clj-http/blob/master/src/clj_http/util.clj\n(defn gzip\n  \"Returns a gzip'd version of the given byte array.\"\n  [b]\n  (when b\n    ; set the table\n    (let [baos (ByteArrayOutputStream.)\n          gos  (GZIPOutputStream. baos)]\n\n      ; do the work and clean up\n      (IOUtils/copy (ByteArrayInputStream. b) gos)\n      (.close gos)\n\n      ; produce a result\n      (.toByteArray baos))))\n</code></pre>\n\nI don’t think there’s anything inherently <em>wrong</em> if a method or function isn’t organized this way. But when I read code structured this way, it feels less like a bunch of random logic and more like a cohesive unit that someone put time into thinking through how someone might try to understand it later. The <a href=\"https://en.wikipedia.org/wiki/Rule_of_three_(writing)\">Rule of Three</a> rules everything around us.\n",
				"date_published": "2016-02-02T13:51:15-07:00",
				"url": "https://therealadam.com/2016/02/02/three-part-method.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/30/my-favorite-beef.html",
				"title": "My favorite beef is O'Reilly vs. Graham",
				"content_html": "<p>Of all the pop culture beefs going on at the time of this writing (Meek vs. Drake, BoB vs. Neil deGrasse Tyson, Trump vs. Everyone), my favorite is now <!-- raw HTML omitted -->Tim O&rsquo;Reilly vs. Paul Graham on income inequality<!-- raw HTML omitted -->.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "Of all the pop culture beefs going on at the time of this writing (Meek vs. Drake, BoB vs. Neil deGrasse Tyson, Trump vs. Everyone), my favorite is now <a href=\"https://medium.com/the-wtf-economy/what-paul-graham-is-missing-about-inequality-a9f7e1613059#.yrk753wko\">Tim O'Reilly vs. Paul Graham on income inequality</a>.\n\n<blockquote>\n<p class=\"p1\"><span class=\"s1\"><i>When a startup doesn’t have an underlying business model that will eventually produce real revenues and profits, and the only way for its founders to get rich is to sell to another company or to investors, you have to ask yourself whether that startup is really just a financial instrument, not that dissimilar to the CDOs of the 2008 financial crisis — a way of extracting value from the economy without actually creating it.</i></span></p>\n</blockquote>\n\n<p class=\"p1\">This has always bugged me in particular. So few startups have an idea beyond \"get smart people together, maybe make something, hope that selling the team ends up profitable\". We need a much better word for \"speculative technology-focused company funded by speculation\".</p>\n",
				"date_published": "2016-01-30T19:38:03-07:00",
				"url": "https://therealadam.com/2016/01/30/my-favorite-beef.html",
				"tags": ["The System","Erudition","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/27/things-ive-noticed.html",
				
				"content_html": "<p>Things I&rsquo;ve noticed San Franciscans deeply despise:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Things I've noticed San Franciscans deeply despise:\n\n<ul>\n    <li>housing prices</li>\n    <li>nearby events that aren't actually held in San Francisco (e.g. the Super Bowl)</li>\n</ul>\n",
				"date_published": "2016-01-27T11:49:36-07:00",
				"url": "https://therealadam.com/2016/01/27/things-ive-noticed.html",
				"tags": ["Pop Culture","Comedy, haha","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/27/threaded-discussions-nope.html",
				"title": "Threaded discussions: nope nope nope",
				"content_html": "<p>Pet peeve #73: threaded discussions. You may have seen it in a <!-- raw HTML omitted -->Usenet reader<!-- raw HTML omitted --> or perhaps even your <!-- raw HTML omitted -->email<!-- raw HTML omitted -->. It may seem like a great way to manage a long conversation with multiple ideas and lines of discussion. OK, that’s fine, I think you’re wrong and looking at this a little too technically but it’s not forcing that perspective on anyone else so fine.</p>\n<p>I get peeved when its suggested that conversational tools like Twitter or Slack should implement threaded messages. <!-- raw HTML omitted -->Nope<!-- raw HTML omitted -->. You have now failed my secret test, please disembark from the pragmatic train.</p>\n<p>If a conversation requires threading, that conversation has already gone way off the rails.</p>\n<p>Two people talking about one thing and another two people talking about another thing in the same conversation is the <!-- raw HTML omitted -->definition<!-- raw HTML omitted --> of talking past each other. Why should our software enable that?</p>\n<p>If an email or chat ends up covering two important topics, e.g. whether to use solid or liquid fuel on a rocket <!-- raw HTML omitted -->and<!-- raw HTML omitted --> what color to paint the rocket, it was poorly written in the first place. A reasonable person can easily jump in and say “let’s talk about the fuel now and we can figure out the color later”.</p>\n<p>Bottom line: I think <!-- raw HTML omitted -->people can and <!-- raw HTML omitted -->should<!-- raw HTML omitted --><!-- raw HTML omitted --> handle breaking off side discussions on their own instead of trying to push weird hierarchy on participants.</p>\n",
				"content_text": "Pet peeve #73: threaded discussions. You may have seen it in a <a href=\"https://en.wikipedia.org/wiki/Unison_(Usenet_client)\">Usenet reader</a> or perhaps even your <a href=\"https://www.apple.com/osx/apps/#mail\">email</a>. It may seem like a great way to manage a long conversation with multiple ideas and lines of discussion. OK, that’s fine, I think you’re wrong and looking at this a little too technically but it’s not forcing that perspective on anyone else so fine.\n\nI get peeved when its suggested that conversational tools like Twitter or Slack should implement threaded messages. <strong>Nope</strong>. You have now failed my secret test, please disembark from the pragmatic train.\n\nIf a conversation requires threading, that conversation has already gone way off the rails.\n\nTwo people talking about one thing and another two people talking about another thing in the same conversation is the <em>definition</em> of talking past each other. Why should our software enable that?\n\nIf an email or chat ends up covering two important topics, e.g. whether to use solid or liquid fuel on a rocket <em>and</em> what color to paint the rocket, it was poorly written in the first place. A reasonable person can easily jump in and say “let’s talk about the fuel now and we can figure out the color later”.\n\nBottom line: I think <em>people can and <strong>should</strong></em> handle breaking off side discussions on their own instead of trying to push weird hierarchy on participants.\n",
				"date_published": "2016-01-27T07:16:00-07:00",
				"url": "https://therealadam.com/2016/01/27/threaded-discussions-nope.html",
				"tags": ["Expanded ideas","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/23/the-future-of.html",
				"title": "The future of programming is design, teaching, and empathy",
				"content_html": "<p>The <!-- raw HTML omitted -->Future Programming Manifesto<!-- raw HTML omitted --> starts with this header:</p>\n<!-- raw HTML omitted -->\n<p>OK, I’m on board!</p>\n<!-- raw HTML omitted -->\n<p>Perhaps we could describe the complexity of a technology in “bookshelves”? For example, in my second internship I met a <!-- raw HTML omitted -->CleearCase<!-- raw HTML omitted --> administrator whose office bookcase had one shelf devoted to SunOS, one shelf to Oracle, and the final shelf dedicated to ClearCase itself. How many bookcases for Ruby, Rails, JS, CSS, a database, and all the other stuff you need to know to put a CRUD app in your browser (not even deploy it to the web!)</p>\n<!-- raw HTML omitted -->\n<p>A weird thing about programmer is that those that rant endlessly about someone else’s complexity, layers, and haste are almost completely blind to the complexity, layers, and haste they make in an effort to set the world just so.</p>\n<!-- raw HTML omitted -->\n<p>What if more of programming was accessible as data manipulation (cf. spreadsheets, data files, JSX templates) instead of as logic and behavior (i.e. almost every programming language)?</p>\n<!-- raw HTML omitted -->\n<p>This reminds me of Developer Experience. “Developer experience” is a weird word right now, but it’s becoming table stakes for success. It’s a design discipline. It’s considering the form <!-- raw HTML omitted -->and<!-- raw HTML omitted --> function of code. It&rsquo;s the opposite of attempting to learn C ;)</p>\n<p>Long story short: we’re gonna need more empathy, more design skills, and more teaching skills to reach the next level of great programming languages and tools.</p>\n",
				"content_text": "The <a href=\"http://alarmingdevelopment.org/?p=893\">Future Programming Manifesto</a> starts with this header:\n\n<blockquote>Inessential complexity is the root of all evil</blockquote>\n\nOK, I’m on board!\n\n<blockquote>We should measure complexity as the cumulative cognitive effort to learn a technology from novice all the way to expert. One simple surrogate measure is the size of the documentation.</blockquote>\n\nPerhaps we could describe the complexity of a technology in “bookshelves”? For example, in my second internship I met a <a href=\"http://www-03.ibm.com/software/products/en/clearcase\">CleearCase</a> administrator whose office bookcase had one shelf devoted to SunOS, one shelf to Oracle, and the final shelf dedicated to ClearCase itself. How many bookcases for Ruby, Rails, JS, CSS, a database, and all the other stuff you need to know to put a CRUD app in your browser (not even deploy it to the web!)\n\n<blockquote>\n<ul>\n    <li>Maintaining compatibility increases complexity.</li>\n    <li>Technical debt increases complexity.</li>\n    <li>Most R&amp;D is incremental: it adds features and tools and layers. Simplification requires that we throw things away.</li>\n    <li>Computer Science rejects simplification as a result because it is subjective.</li>\n    <li>The Curse of Knowledge: experts are blind to the complexity they have laboriously mastered.</li>\n    <li>Rewarding programmers for their ability to handle complexity selects for those who love it.</li>\n    <li>Our gold-rush economy encourages greed and haste.</li>\n</ul>\n</blockquote>\n\nA weird thing about programmer is that those that rant endlessly about someone else’s complexity, layers, and haste are almost completely blind to the complexity, layers, and haste they make in an effort to set the world just so.\n\n<blockquote>We should work for end-users disenfranchised by lack of programming expertise. We should concentrate on their modest but ubiquitous needs rather than the high-end specialized problems addressed by most R&amp;D. We should take inspiration from end-user tools like spreadsheets and HyperCard. We should avoid the trap of designing for ourselves.</blockquote>\n\nWhat if more of programming was accessible as data manipulation (cf. spreadsheets, data files, JSX templates) instead of as logic and behavior (i.e. almost every programming language)?\n\n<blockquote>We are doing Design: using experience and judgement to make complex tradeoffs in order to satisfy qualitative human needs.</blockquote>\n\nThis reminds me of Developer Experience. “Developer experience” is a weird word right now, but it’s becoming table stakes for success. It’s a design discipline. It’s considering the form <em>and</em> function of code. It's the opposite of attempting to learn C ;)\n\nLong story short: we’re gonna need more empathy, more design skills, and more teaching skills to reach the next level of great programming languages and tools.\n",
				"date_published": "2016-01-23T12:07:41-07:00",
				"url": "https://therealadam.com/2016/01/23/the-future-of.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/22/bdfls-arent-community.html",
				"title": "BDFLs aren't community builders",
				"content_html": "<p>What if large open source projects appointed a community manager to handle things like codes of conduct and social spaces? Anecdotally, those who <!-- raw HTML omitted -->make<!-- raw HTML omitted --> large projects are often the worst at actually running a community. Even volunteer projects need management. Flat organizations will always be dominated by ad-hoc in-group politics. The internet we&rsquo;ve created thus far is allowing terrible people to outpace good people <!-- raw HTML omitted -->by a long shot<!-- raw HTML omitted -->.</p>\n",
				"content_text": "What if large open source projects appointed a community manager to handle things like codes of conduct and social spaces? Anecdotally, those who <em>make</em> large projects are often the worst at actually running a community. Even volunteer projects need management. Flat organizations will always be dominated by ad-hoc in-group politics. The internet we've created thus far is allowing terrible people to outpace good people <strong>by a long shot</strong>.\n",
				"date_published": "2016-01-22T14:50:34-07:00",
				"url": "https://therealadam.com/2016/01/22/bdfls-arent-community.html",
				"tags": ["Expanded ideas","The System","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/22/one-model-doesnt.html",
				"title": "One model doesn't fit all",
				"content_html": "<p>There are two kinds of developers in the world:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "There are two kinds of developers in the world:\n\n<ul>\n    <li><a href=\"http://outspeaking.com/words-of-technology/denormalize-data-at-business-boundaries.html\">those who realize data models aren’t monolithic</a> and use business boundaries to their advantage</li>\n    <li>those struggling with monolithic data models</li>\n</ul>\n",
				"date_published": "2016-01-22T13:43:34-07:00",
				"url": "https://therealadam.com/2016/01/22/one-model-doesnt.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/21/versioning-an-api.html",
				"title": "Versioning an API is a river delta of pain",
				"content_html": "<p>Slight rant: versioning a (REST) API inflicts upon you a confluence of factors that will lead to pain no matter what you do.</p>\n<p>You’re going to need to version things, which opens you to bikeshedding which True Scotsman approach to REST versioning you’ll use. Once you’ve expended tons of effort on how clients should specify which version they want (i.e. once you’ve just barely started), now you need to figure out how to make that work in your code. Which, after you’re done parsing the HTTP request (the easy part!), is almost certainly going to lead to some unruly layer(s) of indirection. At which point you’re going to hate life and never want to introduce another version ever again. And you won’t even be close to finished.</p>\n<p>I hope that, between <!-- raw HTML omitted -->JSON API<!-- raw HTML omitted --> and <!-- raw HTML omitted -->GraphQL<!-- raw HTML omitted -->, letting the client specify what they want ends up proving way better than relying on the server to carefully (or possibly carelessly) hand craft just the right data for the client.</p>\n",
				"content_text": "Slight rant: versioning a (REST) API inflicts upon you a confluence of factors that will lead to pain no matter what you do.\n\nYou’re going to need to version things, which opens you to bikeshedding which True Scotsman approach to REST versioning you’ll use. Once you’ve expended tons of effort on how clients should specify which version they want (i.e. once you’ve just barely started), now you need to figure out how to make that work in your code. Which, after you’re done parsing the HTTP request (the easy part!), is almost certainly going to lead to some unruly layer(s) of indirection. At which point you’re going to hate life and never want to introduce another version ever again. And you won’t even be close to finished.\n\nI hope that, between <a href=\"http://jsonapi.org\">JSON API</a> and <a href=\"https://facebook.github.io/graphql/\">GraphQL</a>, letting the client specify what they want ends up proving way better than relying on the server to carefully (or possibly carelessly) hand craft just the right data for the client.\n",
				"date_published": "2016-01-21T14:53:50-07:00",
				"url": "https://therealadam.com/2016/01/21/versioning-an-api.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/20/i-am-a.html",
				"title": "I am a unique snowflake",
				"content_html": "<p>Every software person is as special and unique as they think they are. But things go weird, in my experience, when I try to express my snowflakeness in production code. If I want to be weird or try something new, I should at least do it in a side/passion/mastery project. Even better: hobbies!</p>\n",
				"content_text": "Every software person is as special and unique as they think they are. But things go weird, in my experience, when I try to express my snowflakeness in production code. If I want to be weird or try something new, I should at least do it in a side/passion/mastery project. Even better: hobbies!\n",
				"date_published": "2016-01-20T10:10:25-07:00",
				"url": "https://therealadam.com/2016/01/20/i-am-a.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2016/01/19/rails-doctrine-and.html",
				"title": "Rails doctrine and Kremlinology",
				"content_html": "<p>Long story short, Rails now has a nicely written <!-- raw HTML omitted -->Doctrine<!-- raw HTML omitted --> that delineates the principles that motivate tradeoffs the framework makes. Any Rails developer can benefit from understanding this and coding <!-- raw HTML omitted -->with<!-- raw HTML omitted --> the framework as much as possible.</p>\n<p>Short story long: I&rsquo;ve been trying to mentally track this for a while via something I call DHHology. It&rsquo;s where I follow <!-- raw HTML omitted -->@dhh<!-- raw HTML omitted --> and try to piece togther blog posts, tweets, code snippets haphazardly shared, and keynotes to build a mental model for what working with the grain of Rails looks like when you get past a small app.</p>\n<p>It&rsquo;s a lot like <!-- raw HTML omitted -->Kremlinology<!-- raw HTML omitted -->, &ldquo;the study and analysis of the politics and policies of Russia&rdquo;.</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s a bit of a stretch, but I think the same kind of &ldquo;between the lines&rdquo; thinking helps to understand Rails. Of course, sometimes I&rsquo;m wrong, but <!-- raw HTML omitted -->so were the Kremlinologists<!-- raw HTML omitted -->. On the other hand, there was that one time I got DHH and Gary Bernhardt to kind of agree on Twitter, so that&rsquo;s nice!</p>\n",
				"content_text": "Long story short, Rails now has a nicely written <a href=\"http://rubyonrails.org/doctrine\">Doctrine</a> that delineates the principles that motivate tradeoffs the framework makes. Any Rails developer can benefit from understanding this and coding <em>with</em> the framework as much as possible.\n\nShort story long: I've been trying to mentally track this for a while via something I call DHHology. It's where I follow <a href=\"https://twitter.com/dhh\">@dhh</a> and try to piece togther blog posts, tweets, code snippets haphazardly shared, and keynotes to build a mental model for what working with the grain of Rails looks like when you get past a small app.\n\nIt's a lot like <a href=\"https://en.wikipedia.org/wiki/Kremlinology\">Kremlinology</a>, \"the study and analysis of the politics and policies of Russia\".\n\n<blockquote>\n  During the Cold War, lack of reliable information about the country forced Western analysts to \"read between the lines\" and to use the tiniest tidbits, such as the removal of portraits, the rearranging of chairs, positions at the reviewing stand for parades in Red Square, the choice of capital or small initial letters in phrases such as \"First Secretary\", the arrangement of articles on the pages of the party newspaper Pravda and other indirect signs to try to understand what was happening in internal Soviet politics.\n</blockquote>\n\nIt's a bit of a stretch, but I think the same kind of \"between the lines\" thinking helps to understand Rails. Of course, sometimes I'm wrong, but <a href=\"https://en.wikipedia.org/wiki/Mikoyan-Gurevich_MiG-25#Western_intelligence_and_the_MiG-25\">so were the Kremlinologists</a>. On the other hand, there was that one time I got DHH and Gary Bernhardt to kind of agree on Twitter, so that's nice!\n",
				"date_published": "2016-01-19T20:07:03-07:00",
				"url": "https://therealadam.com/2016/01/19/rails-doctrine-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/11/12/software-design-always.html",
				"title": "Software design, always on the wrong foot",
				"content_html": "<p>Software design has probably been broken from the start. The earliest business software, machine language encoded to punch cards, was more about fiddling registers and managing memory locations than doing arithmetic or implementing business logic. Even after you fast forward to Unix and compiled languages, software is still more about managing heap memory and arcane details like file or error pointers than it is about business logic.</p>\n<p>Fast forward again to the first web apps and it seems like there’s an opportunity to put business logic in the center and the incidental complexity of the computer on the outsides. Alas, when web apps took off, most of their logic was written in scripting languages which often trade organizing code along boundaries for the thrill of just getting stuff done. Sometimes I don’t think we’ve outgrown that urge.</p>\n<p>Software design has <!-- raw HTML omitted -->always<!-- raw HTML omitted --> started off on the wrong foot. Maybe we know better now, maybe we’re as lost as ever. Perhaps in the future I will only <!-- raw HTML omitted -->feign<!-- raw HTML omitted --> surprise when I come across working software that is not exactly ideal on the inside.</p>\n",
				"content_text": "Software design has probably been broken from the start. The earliest business software, machine language encoded to punch cards, was more about fiddling registers and managing memory locations than doing arithmetic or implementing business logic. Even after you fast forward to Unix and compiled languages, software is still more about managing heap memory and arcane details like file or error pointers than it is about business logic.\n\nFast forward again to the first web apps and it seems like there&#8217;s an opportunity to put business logic in the center and the incidental complexity of the computer on the outsides. Alas, when web apps took off, most of their logic was written in scripting languages which often trade organizing code along boundaries for the thrill of just getting stuff done. Sometimes I don&#8217;t think we&#8217;ve outgrown that urge.\n\nSoftware design has <em>always</em> started off on the wrong foot. Maybe we know better now, maybe we&#8217;re as lost as ever. Perhaps in the future I will only <em>feign</em> surprise when I come across working software that is not exactly ideal on the inside.\n",
				"date_published": "2015-11-12T07:15:05-07:00",
				"url": "https://therealadam.com/2015/11/12/software-design-always.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/11/05/specific-purposeful-emails.html",
				"title": "Specific, purposeful emails are great",
				"content_html": "<p>When I’m emailing with teammates, I try to do them a few favors.</p>\n<p>I make my purpose <!-- raw HTML omitted -->clear, specific, and up front<!-- raw HTML omitted -->. I often write the whole email, figure out the real purpose, and then move it into the very first sentence <!-- raw HTML omitted -->and<!-- raw HTML omitted --> subject line. I’m a little pessimistic, so I figure I’ve got three sentences, tops, to persuade someone to read an email. They are way more likely to retain at least part of my meaning if there are bullet soundbites for those unlikely to read past the first paragraph. When I want to get down to details, it all goes “under the fold” of the soundbites.</p>\n<p>If at all possible, <!-- raw HTML omitted -->I don’t want to generate Yet Another Meeting<!-- raw HTML omitted -->. I’ve been in too many meetings that could have been an email. Need to update me on a project? Write it out. Have a simple question to ask? Write it out. Have a complex question to ask? Boil it down to three simple ones, write it out. Need to explore an idea? That’s closer to requiring a meeting! Want to talk about something that requires the sophistication of reading faces and vocal inflections? That requires a meeting, go ahead and schedule one!</p>\n<p>What I try to avoid, at all costs, is to throw a bunch of random datapoints or ideas together without drawing a conclusion. Some of the most frustrating emails I’ve read ended with <!-- raw HTML omitted -->“Thoughts?”<!-- raw HTML omitted -->. If I’m going to email someone, I’m going to ask a specific question or make a specific point. Ending with “thoughts?” leaves it up to the recipient to <!-- raw HTML omitted -->guess<!-- raw HTML omitted --> what the sender wants from the them and <!-- raw HTML omitted -->then<!-- raw HTML omitted --> respond in kind.</p>\n<p>Don’t ramble, don’t use a meeting when an email will suffice, do make conclusions and do ask specific questions. I will send you email hugs to thank you for respecting my time.</p>\n",
				"content_text": "When I&#8217;m emailing with teammates, I try to do them a few favors.\n\nI make my purpose <strong>clear, specific, and up front</strong>. I often write the whole email, figure out the real purpose, and then move it into the very first sentence <em>and</em> subject line. I&#8217;m a little pessimistic, so I figure I&#8217;ve got three sentences, tops, to persuade someone to read an email. They are way more likely to retain at least part of my meaning if there are bullet soundbites for those unlikely to read past the first paragraph. When I want to get down to details, it all goes &#8220;under the fold&#8221; of the soundbites.\n\nIf at all possible, <strong>I don&#8217;t want to generate Yet Another Meeting</strong>. I&#8217;ve been in too many meetings that could have been an email. Need to update me on a project? Write it out. Have a simple question to ask? Write it out. Have a complex question to ask? Boil it down to three simple ones, write it out. Need to explore an idea? That&#8217;s closer to requiring a meeting! Want to talk about something that requires the sophistication of reading faces and vocal inflections? That requires a meeting, go ahead and schedule one!\n\nWhat I try to avoid, at all costs, is to throw a bunch of random datapoints or ideas together without drawing a conclusion. Some of the most frustrating emails I&#8217;ve read ended with <strong>&#8220;Thoughts?&#8221;</strong>. If I&#8217;m going to email someone, I&#8217;m going to ask a specific question or make a specific point. Ending with &#8220;thoughts?&#8221; leaves it up to the recipient to <em>guess</em> what the sender wants from the them and <em>then</em> respond in kind.\n\nDon&#8217;t ramble, don&#8217;t use a meeting when an email will suffice, do make conclusions and do ask specific questions. I will send you email hugs to thank you for respecting my time.\n",
				"date_published": "2015-11-05T07:43:21-07:00",
				"url": "https://therealadam.com/2015/11/05/specific-purposeful-emails.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/08/21/easy-steps-to.html",
				"title": "Easy steps to programming language commitment",
				"content_html": "<p>Feel pressured by other developers telling you that your programming language of choice is old, bad, or that you should feel bad? Apply this heuristic:</p>\n<!-- raw HTML omitted -->\n<p>Don’t let the hype of people with different brains or different problems get you down.</p>\n",
				"content_text": "Feel pressured by other developers telling you that your programming language of choice is old, bad, or that you should feel bad? Apply this heuristic:\n\n<ul>\n<li>Try different programming languages until you find one that best fits your brain and the problems you want to solve</li>\n<li>Use that langauge for everything you can</li>\n<li>When a language comes along that fits your brain or your problems even better, switch to that one, ad infinitum</li>\n</ul>\n\nDon&#8217;t let the hype of people with different brains or different problems get you down.\n",
				"date_published": "2015-08-21T09:17:02-07:00",
				"url": "https://therealadam.com/2015/08/21/easy-steps-to.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/08/15/code-needs-boundaries.html",
				"title": "Code needs boundaries, but not too many",
				"content_html": "<p>Let’s talk about boundaries in programs. I need them, otherwise programs grow increasingly inscrutable and impossible to change. A lack of boundaries is nearly as bad as spaghetti code; i.e. it’s really bad.</p>\n<p>But, too many boundaries can also make a program inscrutable. To the absurd, a program composed entirely of black boxes each of a single narrow function and behavior is all indirection. Indirection is a cost I pay when I introduce boundaries, e.g. “Your princess is in another castle.” I want to have just the right number of boundaries; not too few, not too many.</p>\n<p>Further, I want to avoid establishing the wrong boundaries if I can. Boundaries are hard to move around; creating them is an implicit act of making some kinds of changes <!-- raw HTML omitted -->more<!-- raw HTML omitted --> difficult. Awkward boundaries make it difficult to write correct code; hurried developers will yield to the temptation to circumvent the boundary. If you do manage to identify an awkward boundary and correct it, you’ll have some temporary churn in your program while you rejigger the boundary and the code on <!-- raw HTML omitted -->both<!-- raw HTML omitted --> sides of it.</p>\n<p>On the other hand, the right boundaries are wonderful. They create leverage for the developers working on both sides of the boundaries. They get more done, only needing to know about the boundary and not what lies on the other side. Establishing good boundaries is the first step towards encapsulation and abstraction.</p>\n<p>We used to make boundaries from packages and libraries. Now we have added out-of-process services, message passing, and infrastructure as boundaries. This will probably turn out as a net benefit, but right now we’re chasing novelty, blog posts, and conference talks at the expense of increased complexity. We aren’t really “engineering” our boundaries.</p>\n<p>Creating boundaries too eagerly increases the odds of imposing the wrong boundaries and churning on said boundaries. Creating boundaries too lazily imposes a high cost of change to create those boundaries once you discover them and accept the implementation challenge.</p>\n<p>My favorite kind of boundary is a <!-- raw HTML omitted -->bounded context<!-- raw HTML omitted -->. Its a wonderful epiphany that we don’t all have to agree on the precise definition of words and responsibilities if we can agree where the fences (boundaries) go.</p>\n<p><!-- raw HTML omitted -->Gary Bernhardt has nice things to say about boundaries<!-- raw HTML omitted -->. If you like this, you’ll love his ideas.</p>\n",
				"content_text": "Let&#8217;s talk about boundaries in programs. I need them, otherwise programs grow increasingly inscrutable and impossible to change. A lack of boundaries is nearly as bad as spaghetti code; i.e. it&#8217;s really bad.\n\nBut, too many boundaries can also make a program inscrutable. To the absurd, a program composed entirely of black boxes each of a single narrow function and behavior is all indirection. Indirection is a cost I pay when I introduce boundaries, e.g. &#8220;Your princess is in another castle.&#8221; I want to have just the right number of boundaries; not too few, not too many.\n\nFurther, I want to avoid establishing the wrong boundaries if I can. Boundaries are hard to move around; creating them is an implicit act of making some kinds of changes <em>more</em> difficult. Awkward boundaries make it difficult to write correct code; hurried developers will yield to the temptation to circumvent the boundary. If you do manage to identify an awkward boundary and correct it, you&#8217;ll have some temporary churn in your program while you rejigger the boundary and the code on <em>both</em> sides of it.\n\nOn the other hand, the right boundaries are wonderful. They create leverage for the developers working on both sides of the boundaries. They get more done, only needing to know about the boundary and not what lies on the other side. Establishing good boundaries is the first step towards encapsulation and abstraction.\n\nWe used to make boundaries from packages and libraries. Now we have added out-of-process services, message passing, and infrastructure as boundaries. This will probably turn out as a net benefit, but right now we&#8217;re chasing novelty, blog posts, and conference talks at the expense of increased complexity. We aren&#8217;t really &#8220;engineering&#8221; our boundaries.\n\nCreating boundaries too eagerly increases the odds of imposing the wrong boundaries and churning on said boundaries. Creating boundaries too lazily imposes a high cost of change to create those boundaries once you discover them and accept the implementation challenge.\n\nMy favorite kind of boundary is a <a href=\"http://martinfowler.com/bliki/BoundedContext.html\">bounded context</a>. Its a wonderful epiphany that we don&#8217;t all have to agree on the precise definition of words and responsibilities if we can agree where the fences (boundaries) go.\n\n<a href=\"https://www.destroyallsoftware.com/talks/boundaries\">Gary Bernhardt has nice things to say about boundaries</a>. If you like this, you&#8217;ll love his ideas.\n",
				"date_published": "2015-08-15T11:43:03-07:00",
				"url": "https://therealadam.com/2015/08/15/code-needs-boundaries.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/08/05/thats-a-question.html",
				"title": "That's a question",
				"content_html": "<p>In a technical conversation, I love to hear this: “that’s a good question!” Now we are going to talk about something we might have otherwise missed. Later we will look back at a potential crisis averted.</p>\n<p>I groan (inside) when I hear: “that’s an interesting question!” Someone is about to bloviate, philosophize, or otherwise derail the conversation. Later, we will reflect on time poorly spent.</p>\n<p>I may have a weird, grumpy relationship with technical conversations.</p>\n",
				"content_text": "In a technical conversation, I love to hear this: &#8220;that&#8217;s a good question!&#8221; Now we are going to talk about something we might have otherwise missed. Later we will look back at a potential crisis averted.\n\nI groan (inside) when I hear: &#8220;that&#8217;s an interesting question!&#8221; Someone is about to bloviate, philosophize, or otherwise derail the conversation. Later, we will reflect on time poorly spent.\n\nI may have a weird, grumpy relationship with technical conversations.\n",
				"date_published": "2015-08-05T06:11:00-07:00",
				"url": "https://therealadam.com/2015/08/05/thats-a-question.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/19/lifes-easy-mode.html",
				"title": "Life's Easy Mode",
				"content_html": "<p>This morning I walked a half mile, not too far, to a neighborhood coffee shop. I had two breakfast tacos and a sweet-flavored latte.</p>\n<p>I can choose to walk, and take a Sunday morning (really, a whole weekend) to myself because I went to college, fooled around with computers a bunch, and happened upon a time of tremendous income growth for people who fooled around with computers a lot.</p>\n<p>On the way, I walked down a well-maintained and safe sidewalk in an neighborhood in the middle of teardowns and gentrification. At one point, a small branch had grown over the sidewalk. Not big enough to walk around entirely, just the right size to push away.</p>\n<p>But then, like a miracle, the wind blew just so and pushed the branch out of my way. It was like nature’s automatic sliding door.</p>\n<p>Seems that’s a pretty good way of summing up the Easy Mode of Life that is being a professional white guy.</p>\n",
				"content_text": "This morning I walked a half mile, not too far, to a neighborhood coffee shop. I had two breakfast tacos and a sweet-flavored latte.\n\nI can choose to walk, and take a Sunday morning (really, a whole weekend) to myself because I went to college, fooled around with computers a bunch, and happened upon a time of tremendous income growth for people who fooled around with computers a lot.\n\nOn the way, I walked down a well-maintained and safe sidewalk in an neighborhood in the middle of teardowns and gentrification. At one point, a small branch had grown over the sidewalk. Not big enough to walk around entirely, just the right size to push away.\n\nBut then, like a miracle, the wind blew just so and pushed the branch out of my way. It was like nature&#8217;s automatic sliding door.\n\nSeems that&#8217;s a pretty good way of summing up the Easy Mode of Life that is being a professional white guy.\n",
				"date_published": "2015-07-19T09:06:05-07:00",
				"url": "https://therealadam.com/2015/07/19/lifes-easy-mode.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/16/doubt-mongering.html",
				"title": "Doubt mongering",
				"content_html": "<p>Doubt mongering. It’s a thing that happens because egos are fragile. Some doubts I’ve heard or uttered myself in the past month:<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>They’re FUD and they work off cognitive biases. When someone’s trying to vent, angle into a conversation, or show how smart they are, doubt mongering can happen.</p>\n<p>Some of us are more prone to doubt mongering than others. <!-- raw HTML omitted -->I’m<!-- raw HTML omitted --> probably more prone to it than I realize. Writing this is making me cringe inside a little.</p>\n<p>What irks me is that I often have to pause to separate the doubt mongering from the little bit of insight inside of it.</p>\n<p>Say we’re talking about Swagger, for example. Most human endeavors are flawed. It’s perfectly legitimate to say “not all uses of IDLs have succeeded” and “let’s learn from past experience”. That’s a useful insight!</p>\n<p>But it’s <!-- raw HTML omitted -->not okay<!-- raw HTML omitted --> to do so in a way that takes the energy out of the conversation. It’s not okay do so in a way makes someone feel less smart for suggesting something. It’s not okay to derail. Don’t be a <!-- raw HTML omitted -->gumption trap<!-- raw HTML omitted -->.</p>\n<p>I <!-- raw HTML omitted -->still<!-- raw HTML omitted --> have to remind myself to <!-- raw HTML omitted -->Yes, And<!-- raw HTML omitted --> conversations that need a historical context. This isn’t a silver bullet and has its own nuances of application, but at least it’s not a Hard No. It preserves the energy and gumption in a group, rather than sapping it.</p>\n",
				"content_text": "Doubt mongering. It&#8217;s a thing that happens because egos are fragile. Some doubts I&#8217;ve heard or uttered myself in the past month:</p>\n\n<ul>\n<li>That sounds like building a dependency manager, and look how great those are in JavaScript!</li>\n<li>Swagger is an IDL and I had bad experiences with IDLs when using SOAP and/or Thrift so we probably shouldn&#8217;t use Swagger.</li>\n<li>Microservices sound like microkernels, and that never took off.</li>\n</ul>\n\nThey&#8217;re FUD and they work off cognitive biases. When someone&#8217;s trying to vent, angle into a conversation, or show how smart they are, doubt mongering can happen.\n\nSome of us are more prone to doubt mongering than others. <em>I&#8217;m</em> probably more prone to it than I realize. Writing this is making me cringe inside a little.\n\nWhat irks me is that I often have to pause to separate the doubt mongering from the little bit of insight inside of it.\n\nSay we&#8217;re talking about Swagger, for example. Most human endeavors are flawed. It&#8217;s perfectly legitimate to say &#8220;not all uses of IDLs have succeeded&#8221; and &#8220;let&#8217;s learn from past experience&#8221;. That&#8217;s a useful insight!\n\nBut it&#8217;s <em>not okay</em> to do so in a way that takes the energy out of the conversation. It&#8217;s not okay do so in a way makes someone feel less smart for suggesting something. It&#8217;s not okay to derail. Don&#8217;t be a <a href=\"https://en.wikipedia.org/wiki/Gumption_trap\">gumption trap</a>.\n\nI <em>still</em> have to remind myself to <a href=\"https://www.youtube.com/watch?v=DTi3nJe6-vs\">Yes, And</a> conversations that need a historical context. This isn&#8217;t a silver bullet and has its own nuances of application, but at least it&#8217;s not a Hard No. It preserves the energy and gumption in a group, rather than sapping it.\n",
				"date_published": "2015-07-16T15:27:06-07:00",
				"url": "https://therealadam.com/2015/07/16/doubt-mongering.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/15/nasa-robots-everywhere.html",
				"title": "NASA: robots everywhere! Military: nuke the moon!",
				"content_html": "<p>NASA (2014 funding: $17 billion) has sent man to the moon and robots all over the solar system. The military (2015 funding: unfathomable) wanted to <!-- raw HTML omitted -->nuke the moon<!-- raw HTML omitted -->. Maybe we could throw more cash at NASA and less at the military industrial complex?</p>\n",
				"content_text": "NASA (2014 funding: $17 billion) has sent man to the moon and robots all over the solar system. The military (2015 funding: unfathomable) wanted to <a href=\"https://en.wikipedia.org/wiki/Project_A119\">nuke the moon</a>. Maybe we could throw more cash at NASA and less at the military industrial complex?\n",
				"date_published": "2015-07-15T07:51:18-07:00",
				"url": "https://therealadam.com/2015/07/15/nasa-robots-everywhere.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/15/what-about-event.html",
				"title": "What about event sourcing?",
				"content_html": "<p>I was chatting about <!-- raw HTML omitted -->Event Sourced<!-- raw HTML omitted --> data models with a pal last week. He is really taken by the idea and excited that perhaps its a “next big thing” in data modeling. Regretfully, I have an adverse reaction to “next big thing” thinking and pointed out that Event Sourced data models are more complex than the equivalent third-normal form data model. Thus, I said, tooling and education need to set in before Event Sourcing could achieve broad impact.</p>\n<p>(Before I proceed, I need to put forth a lament of vocabulary. Events, in this context, are not fine-grained language constructs like in a continuation-passing-style asynchronous system. They are business events, a sale or page impression, or technical events, a request or cache hit. These are not callbacks.)</p>\n<p>That said, there’s a few strings to pull from Event Sourcing that seem like possible trends:</p>\n<!-- raw HTML omitted -->\n<p>In particular, the case for synchronization is when things started clicking for me. Hat tip to <!-- raw HTML omitted -->David Nolen’s talk on Om Next<!-- raw HTML omitted --> (start at 17:12) for this. As we continue building native and mobile web apps that are frequently disconnected, we may need an additional tool to augment resource-based workflows. In the same way that perhaps Event Sourcing is something we build as an extension of third-normal form data models, I’ll bet event logs as APIs will pop up more often. But we may see event logs entirely usurping resource workflows. Why implement consuming a log <!-- raw HTML omitted -->and<!-- raw HTML omitted --> implementing updates via REST when you could write a log <!-- raw HTML omitted -->producer<!-- raw HTML omitted --> and ship new events off to the server?</p>\n<p>The developer impedance mismatch I’m finding with message logs is request-reply thinking. There’s a temptation to recreate REST semantics in Kafka topics. If a consumer fails to process a message, does it stop processing entirely, skip the message, discard the message? Does it notify another consumer via a separate topic, or does it phone home to its developers via an error notification? I haven’t found a satisfying answer to this, but I suspect its a matter of time, education, and tooling.</p>\n",
				"content_text": "I was chatting about <a href=\"http://martinfowler.com/eaaDev/EventSourcing.html\">Event Sourced</a> data models with a pal last week. He is really taken by the idea and excited that perhaps its a &#8220;next big thing&#8221; in data modeling. Regretfully, I have an adverse reaction to &#8220;next big thing&#8221; thinking and pointed out that Event Sourced data models are more complex than the equivalent third-normal form data model. Thus, I said, tooling and education need to set in before Event Sourcing could achieve broad impact.\n\n(Before I proceed, I need to put forth a lament of vocabulary. Events, in this context, are not fine-grained language constructs like in a continuation-passing-style asynchronous system. They are business events, a sale or page impression, or technical events, a request or cache hit. These are not callbacks.)\n\nThat said, there&#8217;s a few strings to pull from Event Sourcing that seem like possible trends:\n\n<ul>\n<li><strong>Integration via event logs</strong> using something like Kafka. The low hanging fruit is to replace background jobs with messages on a Kafka stream. The next step is to think about messaging as reading from a database&#8217;s replication log.</li>\n<li><strong>Intermediate storage of historical event records in Hadoop.</strong> Once applications are publishing messages on changes to their data, you can slurp up each topic (one per domain model) into a Hadoop table. Then&#8230;</li>\n<li><strong>ETL of event logs in place of some messaging/REST integrations.</strong> Instead of querying another system or implementing a topic consumer, periodically query the event data in Hadoop. Transform it if necessary and load it into another application&#8217;s database. LinkedIn has <a href=\"https://github.com/linkedin/camus\">extensive</a> <a href=\"https://github.com/linkedin/databus\">tooling</a> for this and it seems like they have done their homework.</li>\n<li><strong>Data and databases modeled around the passage of time.</strong> Event Sourcing is sort of like introducing the notion of accounting to database records. We can go a step further and model our data such that we can travel forward or back in time, not just recalculate from the past. Git has a model of time. <a href=\"http://www.datomic.com\">Datomic</a> is modeled on time.</li>\n<li><strong>Event Sourcing as an extension of third-normal form.</strong> We still need normalized data models, and we still need the migration, ORM, and reporting tooling built on top of them. Event Sourcing gives us an additional facet to our data. Now, instead of just having the data model, we have the <em>causality</em> that created it. (If you&#8217;re curious, probably the enabling technology for storing all that causality is the diminishing cost of storage, adoption of append-only data structures, and data warehouses.)</li>\n<li><strong>Synchronization streams instead of REST for disconnected clients.</strong> When you store the events that brought data to where it is, and you have a total ordering on those events, you can keep disconnected applications up to date by sending them the events they&#8217;ve missed. This is way better than clever logic for querying the central database to update state without squashing local state. Hand-wavy analogy: think Git instead of SQLite (both are wonderful software).</li>\n</ul>\n\nIn particular, the case for synchronization is when things started clicking for me. Hat tip to <a href=\"https://www.youtube.com/watch?v=ByNs9TG30E8\">David Nolen&#8217;s talk on Om Next</a> (start at 17:12) for this. As we continue building native and mobile web apps that are frequently disconnected, we may need an additional tool to augment resource-based workflows. In the same way that perhaps Event Sourcing is something we build as an extension of third-normal form data models, I&#8217;ll bet event logs as APIs will pop up more often. But we may see event logs entirely usurping resource workflows. Why implement consuming a log <em>and</em> implementing updates via REST when you could write a log <em>producer</em> and ship new events off to the server?\n\nThe developer impedance mismatch I&#8217;m finding with message logs is request-reply thinking. There&#8217;s a temptation to recreate REST semantics in Kafka topics. If a consumer fails to process a message, does it stop processing entirely, skip the message, discard the message? Does it notify another consumer via a separate topic, or does it phone home to its developers via an error notification? I haven&#8217;t found a satisfying answer to this, but I suspect its a matter of time, education, and tooling.\n",
				"date_published": "2015-07-15T06:21:26-07:00",
				"url": "https://therealadam.com/2015/07/15/what-about-event.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/14/encapsulation-is-a.html",
				"title": "Encapsulation is a tradeoff too",
				"content_html": "<p>Better understand <!-- raw HTML omitted -->Encapsulation<!-- raw HTML omitted -->. I can’t 😍 this article enough:</p>\n<!-- raw HTML omitted -->\n<p>Useless datapoint: my personal maximum is around three thousand lines of code, or 4–6 weeks of clean-slate effort.</p>\n<p>So maybe I need to start encapsulating once I reach that limit?</p>\n<!-- raw HTML omitted -->\n<p>This has been bugging me for a while. Encapsulation is treated as an unquestionable good by many developers. To question encapsulation is to adopt the opposite, that design isn’t worthwhile.</p>\n<p>But it’s a tradeoff! Introducing encapsulation incurs a temporary increase in the net complexity of a system. Over the course of a tactical refactoring of methods and classes, the increased complexity is only observable by one or two developers doing the work.</p>\n<p>But, if services are encapsulation (they are!), then rearranging the pieces will leave you paying for the increased complexity for days, weeks, months. Now the encapsulation takes on real costs: the risk of completing it, the burden of explaining to others what you’re doing, etc. That encapsulation better be worth it and not just a hunch!</p>\n<!-- raw HTML omitted -->\n<p>My experience is that encapsulation, if it happens at all, starts off shallow. Real encapsulation, where a developer can treat it as a black box, never needing to peak inside to understand the mechanisms or in/out problems, is rare. It takes the best designers of software to achieve it.</p>\n<p>We should all be so bold as to attempt building encapsulations of that quality, but not so proud to think that we succeed at it even half the time.</p>\n<!-- raw HTML omitted -->\n<p>I feel like prefactoring a program or architecture only increases the complexity growth rate of small systems. A dominant factor in complexity is communication and coordination cost. If you start off with ten classes instead of three, or three services instead of one, you haven’t tripled your complexity, you’ve squared it (or worse).</p>\n<p>I’m all for minimal solutions and fighting to keep things small, but not <!-- raw HTML omitted -->at the cost of incurring large coordination overhead<!-- raw HTML omitted -->.</p>\n<!-- raw HTML omitted -->\n<p>Emphasis mine. In a successful system, size and complexity are nearly unavoidable. Almost every “best practice” and “leading edge approach” we know of is contextual and expresses trade-offs. Thus I’m left agreeing that the unsatisfying, hand-wavy craft of “careful, dedicated, disciplined work” is the principle most likely to generate code that’s improves (rather than regresses) over its lifetime.</p>\n",
				"content_text": "Better understand <a href=\"http://theprogrammersparadox.blogspot.com/2015/06/encapsulation.html?m=1\">Encapsulation</a>. I can&#8217;t 😍 this article enough:\n\n<blockquote>\nAn individual programmer has fixed limits on how quickly they can build up instructions and later on how quickly they can correct problems. A highly-effective team can support and extend a much larger code base than the sum of its individuals, but eventually the complexity will grow beyond their abilities. There is always some physical maximum after which the work becomes excessively error prone or consistently slower or both. There is no getting around complexity, it is a fundamental limitation on scale.\n</blockquote>\n\nUseless datapoint: my personal maximum is around three thousand lines of code, or 4&#8211;6 weeks of clean-slate effort.\n\nSo maybe I need to start encapsulating once I reach that limit?\n\n<blockquote>\nTo get the most out of encapsulation, the contents of the box must do something significantly more than just trivially implement an interface. That is, boxing off something simple is essentially negative, given that the box itself is a bump in complexity. To actually reduce the overall complexity, enough sub-complexity must be hidden away to make the box itself worth the effort.\n</blockquote>\n\nThis has been bugging me for a while. Encapsulation is treated as an unquestionable good by many developers. To question encapsulation is to adopt the opposite, that design isn&#8217;t worthwhile.\n\nBut it&#8217;s a tradeoff! Introducing encapsulation incurs a temporary increase in the net complexity of a system. Over the course of a tactical refactoring of methods and classes, the increased complexity is only observable by one or two developers doing the work.\n\nBut, if services are encapsulation (they are!), then rearranging the pieces will leave you paying for the increased complexity for days, weeks, months. Now the encapsulation takes on real costs: the risk of completing it, the burden of explaining to others what you&#8217;re doing, etc. That encapsulation better be worth it and not just a hunch!\n\n<blockquote>\nFor example, one could write a new layer on top of a technology like sockets and call it something like &#8216;connections&#8217;, but unless this new layer really encapsulates enough underlying complexity, like implementing a communications protocol and a data transfer format, then it has hurt rather than helped. It is &#8216;shallow&#8217;. What this means is that for any useful encapsulation, it must hide a significant amount of complexity, thus there should be plenty of code and data buried inside of the box that is no longer necessary to know outside of it. It should not leak out any of this knowledge. So a connection that seamlessly synchronizes data between two parties (how? We don&#8217;t know) correctly removes a chunk of knowledge out of the upper levels of the system. And it does it in a way that it is clear and easy to triage problems as being &#8216;in&#8217; or &#8216;out&#8217; of the box.\n</blockquote>\n\nMy experience is that encapsulation, if it happens at all, starts off shallow. Real encapsulation, where a developer can treat it as a black box, never needing to peak inside to understand the mechanisms or in/out problems, is rare. It takes the best designers of software to achieve it.\n\nWe should all be so bold as to attempt building encapsulations of that quality, but not so proud to think that we succeed at it even half the time.\n\n<blockquote>\nIn little programs, encapsulation isn&#8217;t really necessary, it might help but there just isn&#8217;t enough overall complexity to worry about. Once the system grows however, it approaches the threshold really fast. Fast enough that many software developers ignore it until it is way too late, and then the costs of correcting the code becomes unmanageable.\n</blockquote>\n\nI feel like prefactoring a program or architecture only increases the complexity growth rate of small systems. A dominant factor in complexity is communication and coordination cost. If you start off with ten classes instead of three, or three services instead of one, you haven&#8217;t tripled your complexity, you&#8217;ve squared it (or worse).\n\nI&#8217;m all for minimal solutions and fighting to keep things small, but not <em>at the cost of incurring large coordination overhead</em>.\n\n<blockquote>\n<strong>To build big systems, you need to build up a huge and extremely complex code base</strong>. To keep it manageable you need to keep it heavily organized, but you also need to carve out chunks of it that have been done and dusted for the moment, so that you can focus your current efforts on moving the work forward. <strong>There are no short-cuts available in software development that won&#8217;t harm a project, just a lot of very careful, dedicated, disciplined work that when done correctly, helps towards continuing the active lifespan of the code.</strong>\n</blockquote>\n\nEmphasis mine. In a successful system, size and complexity are nearly unavoidable. Almost every &#8220;best practice&#8221; and &#8220;leading edge approach&#8221; we know of is contextual and expresses trade-offs. Thus I&#8217;m left agreeing that the unsatisfying, hand-wavy craft of &#8220;careful, dedicated, disciplined work&#8221; is the principle most likely to generate code that&#8217;s improves (rather than regresses) over its lifetime.\n",
				"date_published": "2015-07-14T14:52:58-07:00",
				"url": "https://therealadam.com/2015/07/14/encapsulation-is-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/13/bridging-design-and.html",
				"title": "Bridging design and development with data",
				"content_html": "<p>Programming <!-- raw HTML omitted -->and designing<!-- raw HTML omitted --> with <!-- raw HTML omitted -->Pure UI<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>This pulls together three threads:</p>\n<!-- raw HTML omitted -->\n<p>Medium-term bet: Facebook, through tools like React(-Native), continues to <!-- raw HTML omitted -->push tasks that were previously outside of “text editors”<!-- raw HTML omitted -->, such as visual design and animations, <!-- raw HTML omitted -->into things-resembling-code via the function-of-state paradigm<!-- raw HTML omitted --> that React is sneaking into people’s brains.</p>\n<p>(Also, the use of a fixed-width font in the page design there is 💯)</p>\n",
				"content_text": "Programming <em>and designing</em> with <a href=\"http://rauchg.com/2015/pure-ui/\">Pure UI</a>:\n\n<blockquote>\nThe process involved, among other things, creating a new UI, ditching the dependency on Flash in favor of HTML5 and introducing new functionality&#8230;The particular way in which I implemented it led me to some interest insights around the growing convergence of the designer and programmer roles&#8230;The fundamental idea I want to discuss is the definition of an application’s UI as a pure function of application state.\n</blockquote>\n\nThis pulls together three threads:\n\n<ul>\n<li>that design and development are duals in a deep way</li>\n<li>thinking in data structures is useful even if you aren&#8217;t using gobs of parenthesis (i.e. Lisp)</li>\n<li>removing resistance to experimenting with software behavior, in this case by describing behavior with data structures instead of conditionals in code, yields good things (see also Bret Victor)</li>\n</ul>\n\nMedium-term bet: Facebook, through tools like React(-Native), continues to <strong>push tasks that were previously outside of &#8220;text editors&#8221;</strong>, such as visual design and animations, <strong>into things-resembling-code via the function-of-state paradigm</strong> that React is sneaking into people&#8217;s brains.\n\n(Also, the use of a fixed-width font in the page design there is 💯)\n",
				"date_published": "2015-07-13T12:02:03-07:00",
				"url": "https://therealadam.com/2015/07/13/bridging-design-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/07/12/microservices-in-context.html",
				"title": "Microservices in context",
				"content_html": "<p><!-- raw HTML omitted -->An interview with John Allspaw<!-- raw HTML omitted -->, on Etsy infrastructure and operations:</p>\n<!-- raw HTML omitted -->\n<p>When you have a conversation that unnecessarily paints the discussion as, “Are you micro-services or are you a monolith?” then it wipes away all of the context-specificity. Which you actually have no real way of talking inspecifics.</p>\n<!-- raw HTML omitted -->\n<p>Compared to the previous buzzword, SOA, what does microservices mean? As far I can tell, its two things:</p>\n<!-- raw HTML omitted -->\n<p>Context-specificity is the important part. I’ve been reading David Byrne’s <!-- raw HTML omitted --><!-- raw HTML omitted -->How Music Works<!-- raw HTML omitted --><!-- raw HTML omitted --> and he spends the first chapter entirely on how the performance venue (a savannah, a noisy club, an austere concert hall) puts its mark on the music that is performed there (percussion oriented, loud and compressed, or quiet and precise).</p>\n<p>In architecture, context is also king. Building and <!-- raw HTML omitted -->deploying<!-- raw HTML omitted --> services is different at Heroku, Netflix, Facebook, and the place where you work. You can build services of varying size and complexity anywhere on any stack. What the team, culture, and organization prefers is the real determinant.</p>\n<p>I find it useful to read about other people’s service architectures to learn what works elsewhere. Even better if they describe the context they built that service architecture in. But <!-- raw HTML omitted -->it is always foolish cargo-culting to attempt to replicate another team’s architecture without the team and organizational context in which it was born<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"https://medium.com/s-c-a-l-e/microservices-monoliths-and-laser-nail-guns-how-etsy-finds-the-right-focus-in-a-sea-of-cf718a92dc90\">An interview with John Allspaw</a>, on Etsy infrastructure and operations:\n\n<blockquote>\nFor example, a good friend of mine runs and has run an electronic trading exchange. You could imagine his goals and constraints when designing an electronic trading exchange are very different than, say, Facebook. Facebook might be very different architecturally because they have different constraints than Amazon. And Amazon might be different than even Etsy.\n\nWhen you have a conversation that unnecessarily paints the discussion as, “Are you micro-services or are you a monolith?” then it wipes away all of the context-specificity. Which you actually have no real way of talking inspecifics.\n</blockquote>\n\nCompared to the previous buzzword, SOA, what does microservices mean? As far I can tell, its two things:\n\n<ul>\n<li>A Rorschach test. What do you see in this buzzword? What does it <em>say to you</em>?</li>\n<li>A signaling mechanism. I&#8217;m most likely to hear about microservices from those trying to distinguish themselves from <em>those other people</em> who write code that doesn&#8217;t share their values.</li>\n</ul>\n\nContext-specificity is the important part. I&#8217;ve been reading David Byrne&#8217;s <a href=\"http://www.amazon.com/How-Music-Works-David-Byrne/dp/1938073533/ref=sr_1_1?ie=UTF8&amp;qid=1436719822&amp;sr=8-1&amp;keywords=how+music+works\"><em>How Music Works</em></a> and he spends the first chapter entirely on how the performance venue (a savannah, a noisy club, an austere concert hall) puts its mark on the music that is performed there (percussion oriented, loud and compressed, or quiet and precise).\n\nIn architecture, context is also king. Building and <em>deploying</em> services is different at Heroku, Netflix, Facebook, and the place where you work. You can build services of varying size and complexity anywhere on any stack. What the team, culture, and organization prefers is the real determinant.\n\nI find it useful to read about other people&#8217;s service architectures to learn what works elsewhere. Even better if they describe the context they built that service architecture in. But <strong>it is always foolish cargo-culting to attempt to replicate another team&#8217;s architecture without the team and organizational context in which it was born</strong>.\n",
				"date_published": "2015-07-12T09:57:43-07:00",
				"url": "https://therealadam.com/2015/07/12/microservices-in-context.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/06/30/when-we-model.html",
				"title": "When we model",
				"content_html": "<p>I’ve observed a few levels of modeling (i.e. thinking about a problem and describing it in concepts plus data structures) that software developers do in the wild:</p>\n<!-- raw HTML omitted -->\n<p>A structural model is what happens in a “just ship it” culture. If you’re lucky, you might start thinking about an operational model as you convert that just-ship-it app into an ecosystem of services connected by APIs and messaging.</p>\n<p>Any of these models could poof into existence at a higher level. That is, a team could pop out an operational or deep model of a system on their first try. This is even more likely if it’s their second or third take on a problem domain.</p>\n<p>Some ideas for kinds of even-higher level modeling that high-functioning teams perform: error-case modeling, coordinated system modeling, social modeling, migration modeling.</p>\n<p>And, let’s not even speak of metamodeling :P</p>\n",
				"content_text": "I&#8217;ve observed a few levels of modeling (i.e. thinking about a problem and describing it in concepts plus data structures) that software developers do in the wild:\n\n<ul>\n<li><strong>structural modeling</strong>, describe structure of the problem domain and represent that directly in code, probably using the concepts that your ORM or data layer provide</li>\n<li><strong>operational modeling</strong>, evolving a structural model to include models of the operations and workflows that interact with the structural models</li>\n<li><strong>deep modeling</strong>, evolving an operational model to include language that describes how the model, problem domain, and solution domain interact and describe each other</li>\n</ul>\n\nA structural model is what happens in a &#8220;just ship it&#8221; culture. If you&#8217;re lucky, you might start thinking about an operational model as you convert that just-ship-it app into an ecosystem of services connected by APIs and messaging.\n\nAny of these models could poof into existence at a higher level. That is, a team could pop out an operational or deep model of a system on their first try. This is even more likely if it&#8217;s their second or third take on a problem domain.\n\nSome ideas for kinds of even-higher level modeling that high-functioning teams perform: error-case modeling, coordinated system modeling, social modeling, migration modeling.\n\nAnd, let&#8217;s not even speak of metamodeling :P\n",
				"date_published": "2015-06-30T19:19:43-07:00",
				"url": "https://therealadam.com/2015/06/30/when-we-model.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/05/28/word-processors-still.html",
				"title": "Word processors, still imitating typewriters",
				"content_html": "<p>Right after we finish ridding the world of &ldquo;floppy-disk-to-save&rdquo; icons, I propose we remove this bit of obtuse skeumorphism from the default view in word processors like Google Docs:</p>\n<p>[caption id=&ldquo;attachment_3570&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;660&rdquo;]<!-- raw HTML omitted --> Who uses this anymore?[/caption]</p>\n<p>I vaguely remember using one of these to adjust margins and such on a real typewriter once. Its possible I used one to eek out an extra page in a school report during junior high. Since then? Wasted screen space!</p>\n<p>Act like a modern device, word processors. Hide that stuff in a menu somewhere!</p>\n",
				"content_text": "Right after we finish ridding the world of \"floppy-disk-to-save\" icons, I propose we remove this bit of obtuse skeumorphism from the default view in word processors like Google Docs:\n\n[caption id=\"attachment_3570\" align=\"aligncenter\" width=\"660\"]<img class=\"wp-image-3570 size-large\" src=\"https://therealadam.com/uploads/2024/14e37e9087.jpg\" alt=\"the margin setting thingy on a typewriter\" width=\"660\" height=\"35\" /> Who uses this anymore?[/caption]\n\nI vaguely remember using one of these to adjust margins and such on a real typewriter once. Its possible I used one to eek out an extra page in a school report during junior high. Since then? Wasted screen space!\n\nAct like a modern device, word processors. Hide that stuff in a menu somewhere!\n",
				"date_published": "2015-05-28T13:13:30-07:00",
				"url": "https://therealadam.com/2015/05/28/word-processors-still.html",
				"tags": ["Pop Culture","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/05/27/ideas-for-twittering.html",
				"title": "Ideas for Twittering better",
				"content_html": "<p>When it comes to Twitter, things can get out of hand fast. Setting aside the hostile environment some people face when they participate in Twitter (which is setting aside a doozy!), it helps to have a few defense mechanism for what is appearing in your stream.</p>\n<p>Most importantly, I evaluate each potential follow by the rule of &ldquo;smart and happy&rdquo;. Which doesn&rsquo;t mean smart, angry people are automatically off the list. But, they have to show a really unique intelligence to get past my emotional filter. I made a graphic to boil down my &ldquo;should follow?&rdquo; decision:</p>\n<p>[caption id=&ldquo;attachment_3566&rdquo; align=&ldquo;aligncenter&rdquo; width=&ldquo;235&rdquo;]<!-- raw HTML omitted --> How to decide to follow someone on Twitter.[/caption]</p>\n<p>Non-brilliant and happy? Probably in! Brilliant and happy? Probably in! Smart with a little bit of edge? Maybe. Just angry? No thanks.</p>\n<p>Information overload, confirmation bias, and overwhelming negativity are also handy things to manage. I do a few things to keep my head above water and a not-too-dismal outlook on life:</p>\n<!-- raw HTML omitted -->\n<p>I hope one of these ideas can help you Twitter better!</p>\n",
				"content_text": "When it comes to Twitter, things can get out of hand fast. Setting aside the hostile environment some people face when they participate in Twitter (which is setting aside a doozy!), it helps to have a few defense mechanism for what is appearing in your stream.\n\nMost importantly, I evaluate each potential follow by the rule of \"smart and happy\". Which doesn't mean smart, angry people are automatically off the list. But, they have to show a really unique intelligence to get past my emotional filter. I made a graphic to boil down my \"should follow?\" decision:\n\n[caption id=\"attachment_3566\" align=\"aligncenter\" width=\"235\"]<img class=\"size-medium wp-image-3566\" src=\"https://therealadam.com/uploads/2024/e8076d55a4.jpg\" alt=\"How to decide to follow someone on Twitter.\" width=\"235\" height=\"300\" /> How to decide to follow someone on Twitter.[/caption]\n\nNon-brilliant and happy? Probably in! Brilliant and happy? Probably in! Smart with a little bit of edge? Maybe. Just angry? No thanks.\n\nInformation overload, confirmation bias, and overwhelming negativity are also handy things to manage. I do a few things to keep my head above water and a not-too-dismal outlook on life:\n\n<ul>\n    <li>Don't worry about keeping up. It's impossible. That's OK!</li>\n    <li>When I have stuff that needs doing, shut it down. The tweets will go on without me.</li>\n    <li>Follow people with a perspective different from your own.</li>\n    <li>Keep a private list for high signal-to-noise follows. Good friends and people whose ideas I don't want to miss end up here.</li>\n    <li>But follow a lot more people as a firehose of interesting and diverse voices.</li>\n    <li>When on vacation: don't even care about Twitter. Disconnect as much as possible.</li>\n</ul>\n\nI hope one of these ideas can help you Twitter better!\n",
				"date_published": "2015-05-27T14:38:45-07:00",
				"url": "https://therealadam.com/2015/05/27/ideas-for-twittering.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/05/26/everybody-wants-to.html",
				"title": "\"Everybody Wants to Rule the World\", too much of its time",
				"content_html": "<p>I really dislike “Everybody Wants to Rule the World” by Tears for Fears because it’s a perfectly written song that sounds exactly like the year it was recorded, 1985. Five years earlier, it would have sounded mildly seventies-ish and been great. Five years later and it would have had a little more grit and sound very <!-- raw HTML omitted -->late<!-- raw HTML omitted --> eighties.</p>\n<p>What I&rsquo;m saying is, if I could un-invent certain musical sounds, the bass on that track would appear on the list.</p>\n",
				"content_text": "I really dislike “Everybody Wants to Rule the World” by Tears for Fears because it’s a perfectly written song that sounds exactly like the year it was recorded, 1985. Five years earlier, it would have sounded mildly seventies-ish and been great. Five years later and it would have had a little more grit and sound very <em>late</em> eighties.\n\nWhat I'm saying is, if I could un-invent certain musical sounds, the bass on that track would appear on the list.\n",
				"date_published": "2015-05-26T18:35:59-07:00",
				"url": "https://therealadam.com/2015/05/26/everybody-wants-to.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/05/26/hype-curve-superpositions.html",
				"title": "Hype curve superpositions",
				"content_html": "<p>It seems, these days, that technologies can exist in multiple phases of the hype curve, simultaneously. Two data points I read this weekend:</p>\n<!-- raw HTML omitted -->\n<p>In short, I strongly disagree with both of these opinions. But I think that&rsquo;s not the useful datapoint here. The takeaway is that both viewpoints can exist simultaneously, in their own context, and not be entirely wrong.</p>\n",
				"content_text": "It seems, these days, that technologies can exist in multiple phases of the hype curve, simultaneously. Two data points I read this weekend:\n\n<ul>\n<li>Node, which I personally place somewhere between \"trough of disallusionment\" and \"plateau of productivity\", is in the \"exceptional exuberance\" phase for the author of <a href=\"http://www.richardrodger.com/monolithic-nodejs\">Monolithic Node.js</a></li>\n<li>Ruby, which I personally place in the \"plateau of productivity\" phase is in the \"trough of disallusionment\" for the author of <a href=\"http://hawkins.io/2015/05/the-ruby-community-the-next-version/\">The Ruby Community: The Next Version</a></li>\n</ul>\n\nIn short, I strongly disagree with both of these opinions. But I think that's not the useful datapoint here. The takeaway is that both viewpoints can exist simultaneously, in their own context, and not be entirely wrong.\n",
				"date_published": "2015-05-26T09:49:05-07:00",
				"url": "https://therealadam.com/2015/05/26/hype-curve-superpositions.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/05/09/raising-all-boats.html",
				"title": "Raising all boats",
				"content_html": "<p>It’s easy to complain about PHP. For instance, why didn’t they choose ☃ as their namespace resolution operator?! As a developer with lofty opinions, I’m not a big fan of PHP. To me, it’s an argument against allowing accretion to determine the design of a system. I don’t think it’s controversial to call the PHP language, core library, and ecosystem “inconsistent” and “a matter of curious histories”. A language feature here, a library function there, year over year, and you’ve got a “quaint” design. Yes, those are scare-quotes.</p>\n<p>Whenever I feel a big rant about PHP shortcomings approaching, I try remember a few important facets of its success:</p>\n<!-- raw HTML omitted -->\n<p>Fast forward to today. PHP is still doing fine, though lots of people switched to Ruby or Python many moons ago, depending on personality type. And lots of those have since moved on to other things. The technology hype curve is an overlapping, ongoing thing.</p>\n<!-- raw HTML omitted -->\n<p>Of those that switched, many ended up with JavaScript, in the guise of browser-side frameworks or server-side Node (and its ilk). I think there’s a huge opportunity here. JS is not without flaws, like PHP. But its sort of backed into really broad reach. Embedded, games, applications, mobile, probably more that I don’t even know about. That could make it compelling for an even less math-y demographic of people building stuff with computers.</p>\n<p>And yet, there is no single JS community. There’s browser people, there’s server people. The future may hold mobile, gaming, and device people. That creates dissonance and some uphill battles.</p>\n<p>But maybe that’s the really cool part. The JavaScript <!-- raw HTML omitted -->communities<!-- raw HTML omitted --> will have to slog uphill a bit to make accessible the previously intimidating domains of mobile apps, games, and embedded software. And that could raise the boat for people who aren’t building web apps but <!-- raw HTML omitted -->could<!-- raw HTML omitted --> be building software.</p>\n",
				"content_text": "It&#8217;s easy to complain about PHP. For instance, why didn&#8217;t they choose ☃ as their namespace resolution operator?! As a developer with lofty opinions, I&#8217;m not a big fan of PHP. To me, it&#8217;s an argument against allowing accretion to determine the design of a system. I don&#8217;t think it&#8217;s controversial to call the PHP language, core library, and ecosystem &#8220;inconsistent&#8221; and &#8220;a matter of curious histories&#8221;. A language feature here, a library function there, year over year, and you&#8217;ve got a &#8220;quaint&#8221; design. Yes, those are scare-quotes.\n\nWhenever I feel a big rant about PHP shortcomings approaching, I try remember a few important facets of its success:\n\n<ul>\n<li>PHP made programming web applications accessible to lot of people for whom writing CGIs with Perl, Python or Java servlets was overwhelming. <em>Myself included!</em></li>\n<li>You <em>still</em> can&#8217;t beat the simplicity of PHP&#8217;s deployment model: acquire commodity web hosting, upload source files, and done.</li>\n<li>Due to its accessibility and ease of deployment, a whole new kind of person started building stuff with code. Jason Kottke called part of this <a href=\"http://kottke.org/09/02/the-new-liberal-arts\">Liberal Arts 2.0</a>. Less mathy programming, more craftsy.</li>\n</ul>\n\nFast forward to today. PHP is still doing fine, though lots of people switched to Ruby or Python many moons ago, depending on personality type. And lots of those have since moved on to other things. The technology hype curve is an overlapping, ongoing thing.\n\n<hr>\n\nOf those that switched, many ended up with JavaScript, in the guise of browser-side frameworks or server-side Node (and its ilk). I think there&#8217;s a huge opportunity here. JS is not without flaws, like PHP. But its sort of backed into really broad reach. Embedded, games, applications, mobile, probably more that I don&#8217;t even know about. That could make it compelling for an even less math-y demographic of people building stuff with computers.\n\nAnd yet, there is no single JS community. There&#8217;s browser people, there&#8217;s server people. The future may hold mobile, gaming, and device people. That creates dissonance and some uphill battles.\n\nBut maybe that&#8217;s the really cool part. The JavaScript <em>communities</em> will have to slog uphill a bit to make accessible the previously intimidating domains of mobile apps, games, and embedded software. And that could raise the boat for people who aren&#8217;t building web apps but <em>could</em> be building software.\n",
				"date_published": "2015-05-09T08:41:33-07:00",
				"url": "https://therealadam.com/2015/05/09/raising-all-boats.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/04/25/functions-about-nothing.html",
				"title": "Functions about nothing",
				"content_html": "<p>The tricky thing about decomposing code into abstractions is you end up with &ldquo;functions about nothing&rdquo;. You&rsquo;ve probably seen on of these: a method or function with really vague names glommed into a utility or enumerations junk drawer. It&rsquo;s probably innocuous, but as you&rsquo;re reading code, it takes you out of your flow and forces you to think in the abstract instead of the concrete.</p>\n<p>It&rsquo;s easy to guess how these things happen. Successive refactoring iterations end up pulling business logic into a pile of predicates and side-effects and separate pile of abstractions. We feel pretty good ourselves at the end of the refactoring and write a fancy blog post about it!</p>\n<p>The rub is when we come back to read the code later. Its easy to find the abstraction first and get side-tracked by figuring out why it exists, the context in which it was created, and when we might use it again. This is better than predicates and side-effects interwoven. But it&rsquo;s still a problem.</p>\n<p>I don&rsquo;t have a salve for this. I just wanted to put the phrase &ldquo;functions about nothing&rdquo; on the internet. [SLAP BASS OUTRO RIFF PLAYS HERE]</p>\n",
				"content_text": "The tricky thing about decomposing code into abstractions is you end up with \"functions about nothing\". You've probably seen on of these: a method or function with really vague names glommed into a utility or enumerations junk drawer. It's probably innocuous, but as you're reading code, it takes you out of your flow and forces you to think in the abstract instead of the concrete.\n\nIt's easy to guess how these things happen. Successive refactoring iterations end up pulling business logic into a pile of predicates and side-effects and separate pile of abstractions. We feel pretty good ourselves at the end of the refactoring and write a fancy blog post about it!\n\nThe rub is when we come back to read the code later. Its easy to find the abstraction first and get side-tracked by figuring out why it exists, the context in which it was created, and when we might use it again. This is better than predicates and side-effects interwoven. But it's still a problem.\n\nI don't have a salve for this. I just wanted to put the phrase \"functions about nothing\" on the internet. [SLAP BASS OUTRO RIFF PLAYS HERE]\n",
				"date_published": "2015-04-25T12:42:11-07:00",
				"url": "https://therealadam.com/2015/04/25/functions-about-nothing.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/04/22/missing-the-big.html",
				"title": "Missing the big picture for the iterations",
				"content_html": "<p>I.</p>\n<p>Driving in Italy is totally unlike driving in America. For one thing, there are very often <!-- raw HTML omitted -->no lane markers<!-- raw HTML omitted -->. Occasionally a 1.5 lane road is shared by two cars moving in opposite directions. Even if there were lane markers, it’s doubtful Italian drivers would heed them. Italian traffic flows like water, always looking for shortcuts, ways to squeeze through, and running around temporary obstacles. For an American, driving in a big Italian city is a white-knuckle affair.</p>\n<p>My conjecture is that the unspoken rule of Italian drivers is “never break stride”. Ease in and out of lanes, blend in at traffic circles. There’s almost a body language to Italian driving by which you can tell when someone is going to merge into your lane, when a motorbike may swerve in front of you, or when a tiny delivery van is going to blow past you on a two-lane road.</p>\n<p>II.</p>\n<p><!-- raw HTML omitted -->Start with the result.<!-- raw HTML omitted --> I find myself mired in optimizing for short-term results that I can incrementally build upon. This is a fine tactic, especially when getting started. It’s a nice way to show progress quickly and keep making progress when rhythm matters.</p>\n<p>But, it’s a tactic. To make a musical analogy, it’s how you write a song, not how you write a whole album. At some point I need a strategy, a bigger idea. I need a result in mind.</p>\n<p>III.</p>\n<p>I love to tinker with new technology. The grass is <!-- raw HTML omitted -->always<!-- raw HTML omitted --> greener with new langauges, libraries, tools, etc. I’ve learned a lot this way, and kept up with the times. I’ve got lots of surface-level experience with lots of things. But increasingly I want more experience with deeply accomplishing or understanding something.</p>\n<p>IV.</p>\n<p>Driving in Italy was extremely jarring for me at first. It closely resembled chaos. Eventually, I got used to it, at small and medium scales. (<!-- raw HTML omitted -->But never drive in Rome/Milan<!-- raw HTML omitted -->). Now, I sort of miss driving in Italy, at least the good parts. I miss the freedom to overtake other drivers without having to swerve through lanes, and I miss not stopping at traffic signals any time there’s an intersection.</p>\n<p>Maybe this is a reminder, for me, that getting out of my routine (American driving) isn’t so bad. Worth the initial shock. Maybe my routines, my tactics, my tool/library/langauge novelty seeking, were helping me along as much as constraining me.</p>\n<p>Maybe the big picture result, not the iteration, is <!-- raw HTML omitted -->the thing<!-- raw HTML omitted --> and how you get there (highly ordered American driving or seemingly unordered Italian driving) is of less consequence.</p>\n",
				"content_text": "I.\n\nDriving in Italy is totally unlike driving in America. For one thing, there are very often <strong>no lane markers</strong>. Occasionally a 1.5 lane road is shared by two cars moving in opposite directions. Even if there were lane markers, it&#8217;s doubtful Italian drivers would heed them. Italian traffic flows like water, always looking for shortcuts, ways to squeeze through, and running around temporary obstacles. For an American, driving in a big Italian city is a white-knuckle affair.\n\nMy conjecture is that the unspoken rule of Italian drivers is &#8220;never break stride&#8221;. Ease in and out of lanes, blend in at traffic circles. There&#8217;s almost a body language to Italian driving by which you can tell when someone is going to merge into your lane, when a motorbike may swerve in front of you, or when a tiny delivery van is going to blow past you on a two-lane road.\n\nII.\n\n<a href=\"http://whenihavetime.com/2015/04/10/start-with-the-result/\">Start with the result.</a> I find myself mired in optimizing for short-term results that I can incrementally build upon. This is a fine tactic, especially when getting started. It&#8217;s a nice way to show progress quickly and keep making progress when rhythm matters.\n\nBut, it&#8217;s a tactic. To make a musical analogy, it&#8217;s how you write a song, not how you write a whole album. At some point I need a strategy, a bigger idea. I need a result in mind.\n\nIII.\n\nI love to tinker with new technology. The grass is <em>always</em> greener with new langauges, libraries, tools, etc. I&#8217;ve learned a lot this way, and kept up with the times. I&#8217;ve got lots of surface-level experience with lots of things. But increasingly I want more experience with deeply accomplishing or understanding something.\n\nIV.\n\nDriving in Italy was extremely jarring for me at first. It closely resembled chaos. Eventually, I got used to it, at small and medium scales. (<a href=\"http://jalopnik.com/a-beginners-guide-to-the-insanity-of-driving-in-italy-1693068609\">But never drive in Rome/Milan</a>). Now, I sort of miss driving in Italy, at least the good parts. I miss the freedom to overtake other drivers without having to swerve through lanes, and I miss not stopping at traffic signals any time there&#8217;s an intersection.\n\nMaybe this is a reminder, for me, that getting out of my routine (American driving) isn&#8217;t so bad. Worth the initial shock. Maybe my routines, my tactics, my tool/library/langauge novelty seeking, were helping me along as much as constraining me.\n\nMaybe the big picture result, not the iteration, is <em>the thing</em> and how you get there (highly ordered American driving or seemingly unordered Italian driving) is of less consequence.\n",
				"date_published": "2015-04-22T03:47:48-07:00",
				"url": "https://therealadam.com/2015/04/22/missing-the-big.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/03/02/aliens-through-the.html",
				"title": "Aliens through the eyes of boys",
				"content_html": "<p>On <!-- raw HTML omitted -->screening Aliens for a slumber party of 11 year old boys<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I love works of culture that bisect their genre. There were symphonies before Beethoven, and symphonies after Beethoven. There were comedies before <!-- raw HTML omitted -->Animal House<!-- raw HTML omitted --> and comedies after <!-- raw HTML omitted -->Animal House<!-- raw HTML omitted -->. For action and sci-fi action movies, there were movies before <!-- raw HTML omitted -->Die Hard<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Aliens<!-- raw HTML omitted -->, and there are movies after.</p>\n<p>In all of these cases, the pieces after are a wholly better ballgame because the piece bisecting the genre changed it so completely.</p>\n",
				"content_text": "On <a href=\"http://www.rogerebert.com/mzs/watching-aliens-for-the-first-time-again-with-a-bunch-of-kids\">screening Aliens for a slumber party of 11 year old boys</a>:\n\n<blockquote>\"I like the way this looks,\" one said. \"It's futuristic but it's old school. It's almost steampunk.\" \"This is like Team Fortress 2,\" another remarked. \"Dude, shut up, this was made like 20 years before Team Fortress 2,\" said the kid next to him. \"This is, like, every science fiction movie ever made,\" another said, as Ripley operated the power loader for the first time. </blockquote>\n\nI love works of culture that bisect their genre. There were symphonies before Beethoven, and symphonies after Beethoven. There were comedies before <em>Animal House</em> and comedies after <em>Animal House</em>. For action and sci-fi action movies, there were movies before <em>Die Hard</em> and <em>Aliens</em>, and there are movies after.\n\nIn all of these cases, the pieces after are a wholly better ballgame because the piece bisecting the genre changed it so completely.\n",
				"date_published": "2015-03-02T09:14:10-07:00",
				"url": "https://therealadam.com/2015/03/02/aliens-through-the.html",
				"tags": ["Pop Culture","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/03/01/its-not-your.html",
				"title": "It's not your fault if your tools confuse you",
				"content_html": "<!-- raw HTML omitted -->\n<p>The whole point of a framework is that you trade one or more axes of freedom in how you structure your program so that you can move faster writing the meaningful (unique) part of that program. To wit, the first definition I learned of a framework goes something like:<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Most programs would have a boring <!-- raw HTML omitted -->main()<!-- raw HTML omitted --> anyway, so this is a great tradeoff in most cases.</p>\n<p>And yet:</p>\n<!-- raw HTML omitted -->\n<p>Where we end up is that I notice people complaining about frameworks. I think most of these are proxy complaints about someone else choosing a framework they have to live with. To their credit, some complainers are actively trying to make a better thing too. Kudos to them. To the idle complainers: cut it out.</p>\n<!-- raw HTML omitted -->\n<p>RSpec and minitest are both frameworks in the sense that your entry point is a special class with special methods. RSpec is more frameworky in that you don’t actually write classes or methods. You use a language-y DSL to define test cases that share some aspect of scope. You can go pretty crazy in this manner. Or you can not go crazy, RSpec accomodates either style.</p>\n<p>Lately I’ve been wrestling with test cases written using at least three kinds of RSpec scope and it’s driving me a little crazy. They look something like this:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>If scoping is about answering the question “what methods are available to me on this line of code”, this code seems to have four kinds of scope:</p>\n<!-- raw HTML omitted -->\n<p>It is at this point I try and take my own medicine and make a constructive observation rather than yelling “this sucks and someone should feel bad about it!” into the wind (i.e. Twitter).</p>\n<!-- raw HTML omitted -->\n<p>I didn’t like RSpec at first (circa 2008), then I really liked it (circa 2010), and now I’m sort of ambivalent. The question of what RSpec exists to solve has evolved too. At first it was “hey, BDD!” and then it was a less underscore-y way to build tests and now I think it’s a tool for writing tests in a style that some prefer and some don’t. In short, the Ruby community is figuring this out and kind of storming through the awkward parts.</p>\n<p>That awkward part is how I think my example test came to be so unclear. Without doing a deep archaeological dig on the code, I’m guessing this code had three phases:</p>\n<!-- raw HTML omitted -->\n<p>I don’t blame RSpec for any of these phases. You can easily swap out the names of libraries and concepts for any other language or library and find a similar story buried in any chunk of code that’s been around for more than a year and worked on by more than one person. It’s a thing that happens to code. I’m not even sure people should feel bad about it. Mindful of cleaning it up over time, yes. Throw it all in the bin and start over, no.</p>\n<p>My first temptation is to say that using <!-- raw HTML omitted -->it<!-- raw HTML omitted --> one-liners is a smell. They are nice to scan through but tricky to write and trickier still to change. But I can see where a series of well-intentioned code changes compresses many structurally similar test cases down to nearly-declarative (nearly!) one-liners without much duplicate typing. I can imagine a high-functioning team writing their own matchers, carefully using one-liners, and succeeding. So this one is a word of warning and not a smell.</p>\n<p>The real smell, I think, is that its really easy to have very different scopes adjacent to each other in an RSpec test file. Further, not all scope-introducing constructs look the same! <!-- raw HTML omitted -->describe/context<!-- raw HTML omitted --> introduce one kind of scope, <!-- raw HTML omitted -->it<!-- raw HTML omitted --> introdues another kind of scope, <!-- raw HTML omitted -->let/subject/before<!-- raw HTML omitted --> introduce three similar but different kinds of scope, and <!-- raw HTML omitted -->expects/is_expected<!-- raw HTML omitted --> look the same but have different scopes as well.</p>\n<p>Even smellier is that I’m making this list from an empirical understanding and not by examining the implementation or experimenting with reduced test cases.</p>\n<!-- raw HTML omitted -->\n<p>I’m probably going to leave that code alone. Wait for a muse to strike at the same time I need to make wholesale changes.</p>\n<p>People who use RSpec should feel fine about themselves. People who contributed to RSpec should feel great about themselves. People who struggle with figuring out scope in RSpec should take solace that the best of us find this stuff confusing and frustrating at times. Developers not in one of these camps should take my advice, globals are bad but a bunch of weird scoping is not great either. Everyone else can smile and nod.</p>\n",
				"content_text": "<h1>I. Pet Peeve #43: Complaining About Frameworks</h1>\n\nThe whole point of a framework is that you trade one or more axes of freedom in how you structure your program so that you can move faster writing the meaningful (unique) part of that program. To wit, the first definition I learned of a framework goes something like:</p>\n\n<blockquote>\nA framework is a library that takes over the <code>main()</code> function of your program and provides a higher-level entry point for calling your code.\n</blockquote>\n\nMost programs would have a boring <code>main()</code> anyway, so this is a great tradeoff in most cases.\n\nAnd yet:\n\n<ul>\n<li>Some programs aren&#8217;t boring.</li>\n<li>Some programs demand more control.</li>\n<li>Some developers crave choice and accept the burden of picking each library and choosing how to wire them together.</li>\n<li>There&#8217;s a bit of a hero complex about rolling your own framework from libraries.</li>\n</ul>\n\nWhere we end up is that I notice people complaining about frameworks. I think most of these are proxy complaints about someone else choosing a framework they have to live with. To their credit, some complainers are actively trying to make a better thing too. Kudos to them. To the idle complainers: cut it out.\n\n<h1>2. I complain about a framework</h1>\n\nRSpec and minitest are both frameworks in the sense that your entry point is a special class with special methods. RSpec is more frameworky in that you don&#8217;t actually write classes or methods. You use a language-y DSL to define test cases that share some aspect of scope. You can go pretty crazy in this manner. Or you can not go crazy, RSpec accomodates either style.\n\nLately I&#8217;ve been wrestling with test cases written using at least three kinds of RSpec scope and it&#8217;s driving me a little crazy. They look something like this:\n\n<pre><code>describe &quot;POST /something&quot; do\n  before do\n    @thingy = somethings(:alices)\n    post :something, thingy: thingy\n  end\n\n  it { expects(assigns[:something].attributes).to eq(@thingy) }\n  it { is_expected.to render(:created) }\n  it { is_expected.to respond_with(:json) }\nend\n</code></pre>\n\nIf scoping is about answering the question &#8220;what methods are available to me on this line of code&#8221;, this code seems to have four kinds of scope:\n\n<ol>\n<li>Inside the <code>describe</code> block, we can call RSpec methods</li>\n<li>Inside the <code>before</code> block we can call RSpec expectations and rspec-rails controller methods (but that is implicit!)</li>\n<li>Inside the <code>it</code> blocks we can call RSpec expectations</li>\n<li>When we call <code>is_expected</code>, we can reference&#8230;I&#8217;m not sure at all</li>\n</ol>\n\nIt is at this point I try and take my own medicine and make a constructive observation rather than yelling &#8220;this sucks and someone should feel bad about it!&#8221; into the wind (i.e. Twitter).\n\n<h1>3. What&#8217;s an RSpec for?</h1>\n\nI didn&#8217;t like RSpec at first (circa 2008), then I really liked it (circa 2010), and now I&#8217;m sort of ambivalent. The question of what RSpec exists to solve has evolved too. At first it was &#8220;hey, BDD!&#8221; and then it was a less underscore-y way to build tests and now I think it&#8217;s a tool for writing tests in a style that some prefer and some don&#8217;t. In short, the Ruby community is figuring this out and kind of storming through the awkward parts.\n\nThat awkward part is how I think my example test came to be so unclear. Without doing a deep archaeological dig on the code, I&#8217;m guessing this code had three phases:\n\n<ol>\n<li>Originally written according to the RSpec vogue at the time, which was to use <code>it</code> one-liners as forcing function on the constraint that tests should have only one assertion (Which in retrospect I think is a rule about the functionality of the method under test and <em>not</em> a guideline about how to write tests. This isn&#8217;t the first time developers have adhered to the letter of the rule and missed the spirit entirely).</li>\n<li>Use the amazingly great <code>transpec</code> tool to translate RSpec 2.x style to RSpec 3.x style without having to spend months carefully transitioning a large test suite from one API to another. Mostly this works out great, but you get some awkward translation, like the <code>is_expected</code> part.</li>\n<li>Use the newer RSpec 3.x style <code>expect</code> syntax for assertions, introducing two ways to say the same thing with the intended long-term benefit of using the clearer <code>expect</code> style everywhere.</li>\n</ol>\n\nI don&#8217;t blame RSpec for any of these phases. You can easily swap out the names of libraries and concepts for any other language or library and find a similar story buried in any chunk of code that&#8217;s been around for more than a year and worked on by more than one person. It&#8217;s a thing that happens to code. I&#8217;m not even sure people should feel bad about it. Mindful of cleaning it up over time, yes. Throw it all in the bin and start over, no.\n\nMy first temptation is to say that using <code>it</code> one-liners is a smell. They are nice to scan through but tricky to write and trickier still to change. But I can see where a series of well-intentioned code changes compresses many structurally similar test cases down to nearly-declarative (nearly!) one-liners without much duplicate typing. I can imagine a high-functioning team writing their own matchers, carefully using one-liners, and succeeding. So this one is a word of warning and not a smell.\n\nThe real smell, I think, is that its really easy to have very different scopes adjacent to each other in an RSpec test file. Further, not all scope-introducing constructs look the same! <code>describe/context</code> introduce one kind of scope, <code>it</code> introdues another kind of scope, <code>let/subject/before</code> introduce three similar but different kinds of scope, and <code>expects/is_expected</code> look the same but have different scopes as well.\n\nEven smellier is that I&#8217;m making this list from an empirical understanding and not by examining the implementation or experimenting with reduced test cases.\n\n<h1>What are you gonna do about it?</h1>\n\nI&#8217;m probably going to leave that code alone. Wait for a muse to strike at the same time I need to make wholesale changes.\n\nPeople who use RSpec should feel fine about themselves. People who contributed to RSpec should feel great about themselves. People who struggle with figuring out scope in RSpec should take solace that the best of us find this stuff confusing and frustrating at times. Developers not in one of these camps should take my advice, globals are bad but a bunch of weird scoping is not great either. Everyone else can smile and nod.\n",
				"date_published": "2015-03-01T17:21:45-07:00",
				"url": "https://therealadam.com/2015/03/01/its-not-your.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/02/26/organize-your-gemfile.html",
				"title": "Organize your Gemfile by function and coupling",
				"content_html": "<p>Most Gemfiles I see are either unordered (just throw new gems in, wherever!) or alphabetically ordered. A while back, I reordered the Sifter Gemfile, ordering by difficulty of removing the dependency and grouping by functional area. Thus organized, it came out a bit like this:</p>\n<!-- raw HTML omitted -->\n<p>This organization makes it easy to know where to add a new dependency. More importantly, we can better understand how <!-- raw HTML omitted -->much<!-- raw HTML omitted --> we depend on a gem and the level of effort to remove it if we need to.</p>\n",
				"content_text": "Most Gemfiles I see are either unordered (just throw new gems in, wherever!) or alphabetically ordered. A while back, I reordered the Sifter Gemfile, ordering by difficulty of removing the dependency and grouping by functional area. Thus organized, it came out a bit like this:\n\n<ul>\n    <li>Framework: Rails, Rack, the mysql2 driver, JSON, Rake. We will basically use these forever.</li>\n    <li>Gems for our vendors: Postmark, Braintree, Skylight, Bugsnag. We'll use these as long as we're using their respective service.</li>\n    <li>Partner integratons: GitHub, OmniAuth, etc. Most of these aren't maintained by the partner, and we'd have to drop the integration to drop the gem.</li>\n    <li>Extensions: jquery-rails, delayed-job, will_paginate, etc. We could stop using these if we cared a lot, but we're pretty committed to them.</li>\n    <li>File uploading: carrierwave, fog, wand, rmagick. We'd have to overhaul our file attachment support if we wanted to remove these.</li>\n    <li>Sphinx support: thinking-sphinx and ts-delayed-delta. We'd have to overhaul our search to remove these.</li>\n    <li>Admin: bootstrap, etc. Things we could easily remove next time we overhaul our admin, which isn't really a big deal if we decide to.</li>\n    <li>Gems for building assets: jquery-ui-rails, therubyracer, execjs, coffee-rails, sass, compass, etc. We'd have to remove uses of the underlying tool (CoffeeScript, SCSS, etc.) if we wanted to drop one of these.</li>\n    <li>Development gems: pry, ffaker, byebug, better_errors, spring, rack-mini-profiler. We can switch these out if we want.</li>\n    <li>Testing gems: rspec-rails, capybara, etc. Again, if we change tools we can change these.</li>\n    <li>Deployment: capistrano. This could go in the framework section, seems unlikely we'd overhaul our deploy scripts away from Capistrano.</li>\n</ul>\n\nThis organization makes it easy to know where to add a new dependency. More importantly, we can better understand how <em>much</em> we depend on a gem and the level of effort to remove it if we need to.\n",
				"date_published": "2015-02-26T20:00:11-07:00",
				"url": "https://therealadam.com/2015/02/26/organize-your-gemfile.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/02/19/programming-advice-for.html",
				"title": "Programming advice for a younger me",
				"content_html": "<p>How to get better at programming without even programming:</p>\n<!-- raw HTML omitted -->\n<p>Bonus: be a kind person.</p>\n",
				"content_text": "How to get better at programming without even programming:\n\n<ol>\n<li>Accept, in your heart and mind, that the languages, libraries, and tools that you use to write programs may not be good for other people, other teams, or other problems.</li>\n<li>Search for deeper understanding of approaches to programming that seem strange or incorrect to you. Don't look for wrongness in what someone else is doing or what you're thinking.</li>\n<li>You will come across scenarios that challenge principles 1) and 2). When you do, say what you can to help but err on the side of not making things worse; let go of what you can't control.</li>\n</ol>\n\nBonus: be a kind person.\n",
				"date_published": "2015-02-19T10:39:48-07:00",
				"url": "https://therealadam.com/2015/02/19/programming-advice-for.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/02/11/leadership-pick-a.html",
				"title": "Leadership, pick a size",
				"content_html": "<p>Like fast food or coffee at Starbucks, maybe team leadership comes in three sizes.</p>\n<p><!-- raw HTML omitted -->Extra large leadership<!-- raw HTML omitted -->. “This is what you’re doing. Make it happen, let me know when it’s done.” The old school, top-down approach. This is what I thought all management was like many moons ago. In my experience this is only useful when people need to think only about what they’re doing, not why they’re doing it or how they do it. Leadership sets the work, lays out the exact process for doing that work, and closely monitors the work as its done. See also: <!-- raw HTML omitted -->Taylorism<!-- raw HTML omitted -->.</p>\n<p><!-- raw HTML omitted -->Large leadership<!-- raw HTML omitted -->. “Here are some things that need doing. Do one of them, keep me posted.” This is where I think cohesive teams of knowledge workers should aim to be. Leadership lays out the tasks to be done, makes the work to do clear, and gets out of the way. Luckily this is a lot more frequent lately, but probably not so much in part-time labor. Leadership still monitors the flow of work, but not overtly as in Taylorism.</p>\n<p><!-- raw HTML omitted -->Medium leadership<!-- raw HTML omitted -->. “Do what you think is most important. Let me know how to remove obstacles.” I suspect most leaders really <!-- raw HTML omitted -->want<!-- raw HTML omitted --> to get here, but are constrained, imagined or in reality, by some organizational detail. It’s definitely where <!-- raw HTML omitted -->I<!-- raw HTML omitted --> want to be in leadership style. High trust in the team, high trust in the leadership. Lots of unicorn dust.</p>\n<p>Oddly enough, I think some teams and projects require large leadership and some require medium leadership. Some people want a little structure to their work, some projects require well-defined milestones to rally around. Other people can effectively guide themselves to useful outcomes, other projects are less about the milestone and more about the journey.</p>\n",
				"content_text": "Like fast food or coffee at Starbucks, maybe team leadership comes in three sizes.\n\n<strong>Extra large leadership</strong>. &#8220;This is what you&#8217;re doing. Make it happen, let me know when it&#8217;s done.&#8221; The old school, top-down approach. This is what I thought all management was like many moons ago. In my experience this is only useful when people need to think only about what they&#8217;re doing, not why they&#8217;re doing it or how they do it. Leadership sets the work, lays out the exact process for doing that work, and closely monitors the work as its done. See also: <a href=\"http://en.wikipedia.org/wiki/Scientific_management\">Taylorism</a>.\n\n<strong>Large leadership</strong>. &#8220;Here are some things that need doing. Do one of them, keep me posted.&#8221; This is where I think cohesive teams of knowledge workers should aim to be. Leadership lays out the tasks to be done, makes the work to do clear, and gets out of the way. Luckily this is a lot more frequent lately, but probably not so much in part-time labor. Leadership still monitors the flow of work, but not overtly as in Taylorism.\n\n<strong>Medium leadership</strong>. &#8220;Do what you think is most important. Let me know how to remove obstacles.&#8221; I suspect most leaders really <em>want</em> to get here, but are constrained, imagined or in reality, by some organizational detail. It&#8217;s definitely where <em>I</em> want to be in leadership style. High trust in the team, high trust in the leadership. Lots of unicorn dust.\n\nOddly enough, I think some teams and projects require large leadership and some require medium leadership. Some people want a little structure to their work, some projects require well-defined milestones to rally around. Other people can effectively guide themselves to useful outcomes, other projects are less about the milestone and more about the journey.\n",
				"date_published": "2015-02-11T21:28:44-07:00",
				"url": "https://therealadam.com/2015/02/11/leadership-pick-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/01/31/pick-one-novelty.html",
				"title": "Pick one novelty per project",
				"content_html": "<p>My pal <!-- raw HTML omitted -->Brandon Hays<!-- raw HTML omitted --> and I are fond of noting that projects have a very limited tolerance for the risk of picking a novel technology or approach. Thus, they should <!-- raw HTML omitted -->intentionally<!-- raw HTML omitted --> choose <!-- raw HTML omitted -->one<!-- raw HTML omitted --> thing to break ground on: database, language, domain model, testing methodology, design paradigm, etc.</p>\n<p>Turns out, that’s sort of a thing in social psychology too:</p>\n<!-- raw HTML omitted -->\n<p>Turns out this is strongly related to leadership, group expectations, and conformism. That explains a lot of my experience. Those most interested in trying novel approaches are often those who let expectations and conformism take a backseat to trying something new or breaking the mold.</p>\n<p>I don’t think this is necessarily good or bad; it’s fine and healthy for a project to choose to vary from the norm in some way. Even better, manage those variances so if things don’t go to plan, you can back them out and keep rolling. But, it doesn’t hurt to consider varying in ways that are likely to yield more “credits” amongst your team.</p>\n",
				"content_text": "My pal <a href=\"http://brandonhays.com/blog/\">Brandon Hays</a> and I are fond of noting that projects have a very limited tolerance for the risk of picking a novel technology or approach. Thus, they should <em>intentionally</em> choose <em>one</em> thing to break ground on: database, language, domain model, testing methodology, design paradigm, etc.\n\nTurns out, that&#8217;s sort of a thing in social psychology too:\n\n<blockquote>\n<a href=\"https://en.wikipedia.org/wiki/Idiosyncrasy_credit\">Idiosyncrasy credit</a> is a concept in social psychology that describes an individual&#8217;s capacity to acceptably deviate from group expectations. Idiosyncrasy credits are increased (earned) each time an individual conforms to a group&#8217;s expectations, and decreased (spent) each time an individual deviates from a group&#8217;s expectations.\n</blockquote>\n\nTurns out this is strongly related to leadership, group expectations, and conformism. That explains a lot of my experience. Those most interested in trying novel approaches are often those who let expectations and conformism take a backseat to trying something new or breaking the mold.\n\nI don&#8217;t think this is necessarily good or bad; it&#8217;s fine and healthy for a project to choose to vary from the norm in some way. Even better, manage those variances so if things don&#8217;t go to plan, you can back them out and keep rolling. But, it doesn&#8217;t hurt to consider varying in ways that are likely to yield more &#8220;credits&#8221; amongst your team.\n",
				"date_published": "2015-01-31T16:14:32-07:00",
				"url": "https://therealadam.com/2015/01/31/pick-one-novelty.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/01/29/teach-people-to.html",
				"title": "Teach people to magnify their mind, not write code",
				"content_html": "<p><!-- raw HTML omitted -->Coding is not the new literacy<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>That is, it&rsquo;s not enough to write a loop in Ruby, a class in Java, or use a channel in Go. You&rsquo;ve got to learn way more &ldquo;material&rdquo; than that: how to run your code in an application server, how to store rows in a database, how to deploy all your code to another machine. And then: how to have good taste, how to correct oversight, how to avoid bugs! And then, worst of all: knowing all the little miniutae like platform bugs, slow code paths, unstable code, dependency hell.</p>\n<p>We shouldn&rsquo;t put that upon people just because that&rsquo;s how most programmers interact with computers. We should keep looking to help folks leverage systems as part of their work, not learn how to build systems to leverage systems to do their work.</p>\n<p>Hence, the ending:</p>\n<!-- raw HTML omitted -->\n<p>We&rsquo;ve succeeded in magnifying our voices with computers. I like forward to standing back and looking with wonder at how much we&rsquo;ve magnified our minds.</p>\n",
				"content_text": "<a href=\"http://www.chris-granger.com/2015/01/26/coding-is-not-the-new-literacy/\">Coding is not the new literacy</a>:\n\n<blockquote>When we say that coding is the new literacy, we're arguing that wielding a pencil and paper is the old one. Coding, like writing, is a mechanical act. All we've done is upgrade the storage medium. Writing if statements and for loops is straightforward to teach people, but it doesn't make them any more capable. Just like writing, we have to know how to solidify our thoughts and get them out of our head. In the case of programming though, if we manage to do that in a certain way, a computer can do more than just store them. It can compute with them.</blockquote>\n\nThat is, it's not enough to write a loop in Ruby, a class in Java, or use a channel in Go. You've got to learn way more \"material\" than that: how to run your code in an application server, how to store rows in a database, how to deploy all your code to another machine. And then: how to have good taste, how to correct oversight, how to avoid bugs! And then, worst of all: knowing all the little miniutae like platform bugs, slow code paths, unstable code, dependency hell.\n\nWe shouldn't put that upon people just because that's how most programmers interact with computers. We should keep looking to help folks leverage systems as part of their work, not learn how to build systems to leverage systems to do their work.\n\nHence, the ending:\n\n<blockquote>Alan Kay did a talk at OOPSLA in 1997 titled \"The computer revolution hasn't happened yet,\" in which he argued that we haven't realized the potential that computers can provide for us. Eighteen years later, I still agree with him - it hasn't happened yet. And teaching people how to loop over a list won't make it happen either. To realize the potential of computers, we have to focus on the fundamental skills that allow us to harness external computation. We have to create a new generation of tools that allow us to express our models without switching professions and a new generation of modelers who wield them.</blockquote>\n\nWe've succeeded in magnifying our voices with computers. I like forward to standing back and looking with wonder at how much we've magnified our minds.\n",
				"date_published": "2015-01-29T15:28:49-07:00",
				"url": "https://therealadam.com/2015/01/29/teach-people-to.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/01/26/when-software-loses.html",
				"title": "When software loses its hair",
				"content_html": "<p><!-- raw HTML omitted -->Software&rsquo;s Receding Hairline<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>A comb-over is a local maximum for improving baldness. You can&rsquo;t really escape baldness of your head. You <!-- raw HTML omitted -->can<!-- raw HTML omitted --> escape a local maximum in your software, if you&rsquo;re thoughtful about managing tradeoffs between product progress and technical progress.</p>\n<p>It would have been better if you hadn&rsquo;t gone bald in the first place though. Same with software!</p>\n<p>(Analogies are just great. Thanks for this one, Reginald.)</p>\n",
				"content_text": "<a href=\"http://raganwald.com/2011/09/09/softwares-receding-hairline.html\">Software's Receding Hairline</a>:\n\n<blockquote>This is interesting, because the mechanism of growing a comb-over applies to software development. A comb-over is the accumulation of years of deciding that today is not the day to change things. A comb-over is the result of years of procrastination, years of decisions that seem right when you’re in a hurry to get ready for work but in retrospect one of those days should have included a trip to the barber and a bold decision to accept your baldness or take some other action as you saw fit.</blockquote>\n\nA comb-over is a local maximum for improving baldness. You can't really escape baldness of your head. You <em>can</em> escape a local maximum in your software, if you're thoughtful about managing tradeoffs between product progress and technical progress.\n\nIt would have been better if you hadn't gone bald in the first place though. Same with software!\n\n(Analogies are just great. Thanks for this one, Reginald.)\n",
				"date_published": "2015-01-26T19:33:56-07:00",
				"url": "https://therealadam.com/2015/01/26/when-software-loses.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2015/01/25/new-pro-bowl.html",
				"title": "New Pro Bowl selection explainer",
				"content_html": "<p><!-- raw HTML omitted -->Pro Bowl rosters selected by Michael Irvin and Cris Carter<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>In other words, they took the one thing fans can control about the sport, choosing the team in the game that means nothing, and gave that responsibility back to millionaires.</p>\n<p>Besides the dozens of other terrible things about the NFL, this is the most NFL thing I&rsquo;ve heard all week.</p>\n",
				"content_text": "<a href=\"http://www.sbnation.com/nfl/2014/12/23/7443209/pro-bowl-rosters-nfl-2015\">Pro Bowl rosters selected by Michael Irvin and Cris Carter</a>:\n\n<blockquote>Last year, the NFL did away with the AFC vs. NFC format and began using \"captains\" to oversee a fantasy draft to fill out the teams. In 2014, Jerry Rice and Deion Sanders were the honorary captains, with this year's choices being Hall of Fame receivers Michael Irvin and Cris Carter.</blockquote>\n\nIn other words, they took the one thing fans can control about the sport, choosing the team in the game that means nothing, and gave that responsibility back to millionaires.\n\nBesides the dozens of other terrible things about the NFL, this is the most NFL thing I've heard all week.\n",
				"date_published": "2015-01-25T20:42:10-07:00",
				"url": "https://therealadam.com/2015/01/25/new-pro-bowl.html",
				"tags": ["Pop Culture","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/12/25/sometimes.html",
				"title": "Sometimes",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<ol>\n<li>Sometimes you go on a writing slump. Usually, just throwing something at the wall is how you undo that.</li>\n<li>Sometimes you notice that a lot of your writing can end up in platitudes and that deepens your slump. We regret the error, those responsible have been sacked.</li>\n<li>Sometimes you get kinda caught up in learning, tinkering, and enjoying things and forget to write. That&#039;s ok!</li>\n</ol>\n",
				"date_published": "2014-12-25T12:19:52-07:00",
				"url": "https://therealadam.com/2014/12/25/sometimes.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/11/08/months-is-a.html",
				"title": "18 months is a smelly interval",
				"content_html": "<p>18 months is a dangerous window, when it comes to building a product. It&rsquo;s far enough in the future that it seems like you could deliver an ambitious idea within a year and a half. But it&rsquo;s a long enough timeline that one is tempted to skip the necessary contemplation, dividing-and-conquering, and hypothetical thinking that the planning process forces on you.</p>\n<p>As it happens, 18 months is 540 days. 540 degrees is one and a half revolutions. As in, you started a revolution, but ended up regressing.</p>\n<p>Saddest trombone. Be wary of anything that promises to happen in 18 months. It&rsquo;s the &ldquo;epic handwaving&rdquo; of project management.</p>\n",
				"content_text": "18 months is a dangerous window, when it comes to building a product. It's far enough in the future that it seems like you could deliver an ambitious idea within a year and a half. But it's a long enough timeline that one is tempted to skip the necessary contemplation, dividing-and-conquering, and hypothetical thinking that the planning process forces on you.\n\nAs it happens, 18 months is 540 days. 540 degrees is one and a half revolutions. As in, you started a revolution, but ended up regressing.\n\nSaddest trombone. Be wary of anything that promises to happen in 18 months. It's the \"epic handwaving\" of project management.\n",
				"date_published": "2014-11-08T14:38:36-07:00",
				"url": "https://therealadam.com/2014/11/08/months-is-a.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/11/06/dining-at-the.html",
				"title": "Dining at the source code buffet",
				"content_html": "<p>Let me start with <!-- raw HTML omitted -->a quote from wonderful person James Edward Gray II<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I’ve had great success with this approach as well. I probably read the majority of Rails, the source of every RubyGem I used, and chunks of Ruby’s standard library in my first few years of working with Ruby. I picked up new tricks, figured out how things worked, and got myself out of a lot of tricky corners by reading code.</p>\n<p>That we can do this is, to me, the real wonder of working with an open source stack. If I’m curious, I can dig into the framework, language, database, compiler, and operating system I’m using. If something goes weird, I can dig into it. I probably won’t end up changing or fixing anything below my app in the stack, but the ability to peel back the layers is a huge deal.</p>\n<p>Given the choice of digging into why software sometimes goes weird and complaining or giving up, always chose digging into the source to see what’s going on.</p>\n<p>When you work with open source software, you can always chose to figure out what&rsquo;s going on around your app. Eating at the source code buffet is awesome!</p>\n",
				"content_text": "Let me start with <a href=\"https://twitter.com/JEG2/status/530125829070938112\">a quote from wonderful person James Edward Gray II</a>:\n\n<blockquote>\nOne of my favorite techniques for really learning a new language is to read the core API like a good novel. I’m a hit at parties!\n</blockquote>\n\nI&#8217;ve had great success with this approach as well. I probably read the majority of Rails, the source of every RubyGem I used, and chunks of Ruby&#8217;s standard library in my first few years of working with Ruby. I picked up new tricks, figured out how things worked, and got myself out of a lot of tricky corners by reading code.\n\nThat we can do this is, to me, the real wonder of working with an open source stack. If I&#8217;m curious, I can dig into the framework, language, database, compiler, and operating system I&#8217;m using. If something goes weird, I can dig into it. I probably won&#8217;t end up changing or fixing anything below my app in the stack, but the ability to peel back the layers is a huge deal.\n\nGiven the choice of digging into why software sometimes goes weird and complaining or giving up, always chose digging into the source to see what&#8217;s going on.\n\nWhen you work with open source software, you can always chose to figure out what's going on around your app. Eating at the source code buffet is awesome!\n",
				"date_published": "2014-11-06T20:34:17-07:00",
				"url": "https://therealadam.com/2014/11/06/dining-at-the.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/30/megaprojects-megacool.html",
				"title": "Megaprojects: megacool",
				"content_html": "<p><!-- raw HTML omitted -->Megaproject<!-- raw HTML omitted -->. It’s a cool word. It’s an even cooler <!-- raw HTML omitted -->list-of-pages on Wikipedia<!-- raw HTML omitted -->. I’ve only worked on projects limited to tens or dozens of people. The human and geographical scale of some of these endeavors just blows my mind. The coordination and planning required for something like the <!-- raw HTML omitted -->Boeing 747<!-- raw HTML omitted --> or<!-- raw HTML omitted --> Apollo program<!-- raw HTML omitted --> is beyond my comprehension. (OK, maybe I’m still really into aerospace; I <!-- raw HTML omitted -->did<!-- raw HTML omitted --> go to Space Camp. Twice.)</p>\n<p>I would love to be a fly on the wall of the meeting where it’s decided to go ahead with a project that will be visible from quite some height above the earth like <!-- raw HTML omitted -->Denver International Airport<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Walt Disney World<!-- raw HTML omitted -->. That’s a pretty huge commitment. I waffle for weeks when I decide I’m going to buy a new car!</p>\n<p>If those don’t whet your appetite, perhaps <!-- raw HTML omitted -->speculative megastructures<!-- raw HTML omitted --> are more your speed? <!-- raw HTML omitted -->Trans-global highways<!-- raw HTML omitted -->! And of course, Dyson spheres, ringworlds, et cetera.</p>\n<p>It’s good to remind myself that occasionally, human kind is capable of building really great stuff.</p>\n",
				"content_text": "<a href=\"https://en.wikipedia.org/wiki/Megaproject\">Megaproject</a>. It&#8217;s a cool word. It&#8217;s an even cooler <a href=\"https://en.wikipedia.org/wiki/List_of_megaprojects\">list-of-pages on Wikipedia</a>. I&#8217;ve only worked on projects limited to tens or dozens of people. The human and geographical scale of some of these endeavors just blows my mind. The coordination and planning required for something like the <a href=\"https://en.wikipedia.org/wiki/Boeing_747\">Boeing 747</a> or<a href=\"https://en.wikipedia.org/wiki/Apollo_program\"> Apollo program</a> is beyond my comprehension. (OK, maybe I&#8217;m still really into aerospace; I <em>did</em> go to Space Camp. Twice.)\n\nI would love to be a fly on the wall of the meeting where it&#8217;s decided to go ahead with a project that will be visible from quite some height above the earth like <a href=\"https://en.wikipedia.org/wiki/Denver_International_Airport\">Denver International Airport</a> or <a href=\"https://en.wikipedia.org/wiki/Walt_Disney_World\">Walt Disney World</a>. That&#8217;s a pretty huge commitment. I waffle for weeks when I decide I&#8217;m going to buy a new car!\n\nIf those don&#8217;t whet your appetite, perhaps <a href=\"https://en.wikipedia.org/wiki/Megastructure\">speculative megastructures</a> are more your speed? <a href=\"https://en.wikipedia.org/wiki/Intercontinental_and_transoceanic_fixed_links#Trans_Global_Highway\">Trans-global highways</a>! And of course, Dyson spheres, ringworlds, et cetera.\n\nIt&#8217;s good to remind myself that occasionally, human kind is capable of building really great stuff.\n",
				"date_published": "2014-10-30T19:28:10-07:00",
				"url": "https://therealadam.com/2014/10/30/megaprojects-megacool.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/29/is-snl-trending.html",
				"title": "Is SNL trending up?",
				"content_html": "<p>Has SNL been getting worse? <!-- raw HTML omitted -->Viewer ratings say, nope<!-- raw HTML omitted -->. If anything, it&rsquo;s becoming more consistent and slightly better. Previously: <!-- raw HTML omitted -->how to understand SNL<!-- raw HTML omitted -->. Always: <!-- raw HTML omitted -->nostalgia bias<!-- raw HTML omitted -->.</p>\n<p>(BTW, know how yes/no question headlines are always answered no? But this one is yes? LOL.)</p>\n",
				"content_text": "Has SNL been getting worse? <a href=\"http://graphtv.kevinformatics.com/tt0072562\">Viewer ratings say, nope</a>. If anything, it's becoming more consistent and slightly better. Previously: <a href=\"http://therealadam.com/2013/04/01/how-to-understand-saturday-night-live/\">how to understand SNL</a>. Always: <a href=\"http://en.wikipedia.org/wiki/Rosy_retrospection\">nostalgia bias</a>.\n\n(BTW, know how yes/no question headlines are always answered no? But this one is yes? LOL.)\n",
				"date_published": "2014-10-29T19:44:05-07:00",
				"url": "https://therealadam.com/2014/10/29/is-snl-trending.html",
				"tags": ["Pop Culture","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/27/sam-stephenson-understated.html",
				"title": "Sam Stephenson, understated and excellent",
				"content_html": "<p>I’ve enjoyed Sam Stephenson’s work for a long time. Even before “sheesh”, the <!-- raw HTML omitted -->most polite dismantling of an over-privileged open source user<!-- raw HTML omitted -->, Sam’s work has been top notch. <!-- raw HTML omitted -->Prototype<!-- raw HTML omitted --> is the library that made JavaScript palatable and learnable for me. <!-- raw HTML omitted -->pow<!-- raw HTML omitted --> and <!-- raw HTML omitted -->rbenv<!-- raw HTML omitted -->, in concert with ruby-build, are a lovely simplification of the weird problem of maintaining Ruby development environments.</p>\n<p>The thing that pulls it all together, I think, is how well suited his solutions to diverse problems are. There aren’t a bunch of moving parts. Prototype was very much a library, and not a framework. His code is very much <!-- raw HTML omitted -->of the tool<!-- raw HTML omitted -->, playing well in the environment, be it Ruby, CoffeeScript, or even shell scripts. rbenv, ruby-build, and pow all play to the strength of bash and Node rather than trying to extend them to become something they’re not.</p>\n<p>I was tempted to say his work is minimalistic. On second thought, I think it’s understated. Look at his <!-- raw HTML omitted -->website<!-- raw HTML omitted --> or <!-- raw HTML omitted -->photostream<!-- raw HTML omitted -->. The quality of just enough, but not too much, isn’t luck. It’s Sam Stephenson’s calling card. I love it.</p>\n",
				"content_text": "I&#8217;ve enjoyed Sam Stephenson&#8217;s work for a long time. Even before &#8220;sheesh&#8221;, the <a href=\"https://github.com/basecamp/pow/issues/452#issuecomment-59448995\">most polite dismantling of an over-privileged open source user</a>, Sam&#8217;s work has been top notch. <a href=\"https://github.com/sstephenson/prototype\">Prototype</a> is the library that made JavaScript palatable and learnable for me. <a href=\"https://github.com/basecamp/pow\">pow</a> and <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a>, in concert with ruby-build, are a lovely simplification of the weird problem of maintaining Ruby development environments.\n\nThe thing that pulls it all together, I think, is how well suited his solutions to diverse problems are. There aren&#8217;t a bunch of moving parts. Prototype was very much a library, and not a framework. His code is very much <em>of the tool</em>, playing well in the environment, be it Ruby, CoffeeScript, or even shell scripts. rbenv, ruby-build, and pow all play to the strength of bash and Node rather than trying to extend them to become something they&#8217;re not.\n\nI was tempted to say his work is minimalistic. On second thought, I think it&#8217;s understated. Look at his <a href=\"http://sstephenson.us\">website</a> or <a href=\"https://www.flickr.com/photos/sstephenson/\">photostream</a>. The quality of just enough, but not too much, isn&#8217;t luck. It&#8217;s Sam Stephenson&#8217;s calling card. I love it.\n",
				"date_published": "2014-10-27T19:57:21-07:00",
				"url": "https://therealadam.com/2014/10/27/sam-stephenson-understated.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/21/vacation-disposable-and.html",
				"title": "Vacation, disposable, and calm computing",
				"content_html": "<!-- raw HTML omitted -->\n<p>Let me talk about vacation computing. The prime directive of vacation computing is that you should compute on vacation as little as possible. Neglect your email, abandon your social mediums. Don’t do the things you normally do, regardless of how computery your regular work is.</p>\n<p>From there, it follows that your vacation computer should basically not be a computer. That means smartphones, tablets, and book readers are the only options. But smartphones are pretty much synonymous with social media, so they aren’t really viable as a vacation computer (though you probably want it anyway because they’re a superpower). Tablets are nearly computers now, so that’s not viable either.</p>\n<p>It follows that a book reader is the only acceptable vacation computer.</p>\n<!-- raw HTML omitted -->\n<p>Let me talk about disposable computing now. We put a lot of important stuff on our computers these days. Important passwords, legal documents, email, family pictures, private pictures, computer games, purchased and bespoke music, Hollywood and home video, etc. Sometimes those computers are in our pockets, sometimes they’re on our laps and coffee tables, and occasionally you might still find them on our desks!</p>\n<p>For the drama and heartbreak that can occur when we lose these computers, we take astoundingly bad care of them. We don’t back them up, we reuse passwords. A moment without wireless networking is <!-- raw HTML omitted -->the worst<!-- raw HTML omitted --> and yet we don’t take steps to prevent even more dramatic losses due to password breaches and storage failure.</p>\n<p>Given all of this, a computer is made better by making it a disposable object. Backup your data, and backup your backups. Practice good password habits as much as possible so your accounts are isolated and somewhat disposable. Know your gameplan and what happens to your stuff if your computer or backups fall into a lava pit.</p>\n<!-- raw HTML omitted -->\n<p>Knowing about vacation and disposable computing, I’m led to an odd and dissonant conclusion: an e-ink Kindle is the perfect computer. It does not do work, it does not social media. You can take it through airport security without any extra steps, which feels a little perverse and seems a bit surreal. It does not interrupt, it does not beep or blorp, it just barely displays text. As modern computers go, it’s basically useless.</p>\n<p>But. You can read on it. And reading is so wonderful. And you can put stress aside. A Kindle gets wet? Not a big deal. Drop a Kindle? Not a big deal. Try to use it by the pool, out in nature, out in weather, out where the internet does not go? Not a big deal. Lose your Kindle? Buy another one, it costs a fraction of all your other computers.</p>\n<p>The one scenario where you will find yourself absolutely screwed with a Kindle is when you have to enter text. Logging into Amazon or a wireless network for the first time? That’s a bad time.</p>\n<p>In every other respect, the Kindle is a computer that does nothing to increase your stress level. That’s pretty remarkable today. Let’s make more calm computing devices, ok?</p>\n",
				"content_text": "<h2>1</h2>\n\nLet me talk about vacation computing. The prime directive of vacation computing is that you should compute on vacation as little as possible. Neglect your email, abandon your social mediums. Don&#8217;t do the things you normally do, regardless of how computery your regular work is.\n\nFrom there, it follows that your vacation computer should basically not be a computer. That means smartphones, tablets, and book readers are the only options. But smartphones are pretty much synonymous with social media, so they aren&#8217;t really viable as a vacation computer (though you probably want it anyway because they&#8217;re a superpower). Tablets are nearly computers now, so that&#8217;s not viable either.\n\nIt follows that a book reader is the only acceptable vacation computer.\n\n<h2>2</h2>\n\nLet me talk about disposable computing now. We put a lot of important stuff on our computers these days. Important passwords, legal documents, email, family pictures, private pictures, computer games, purchased and bespoke music, Hollywood and home video, etc. Sometimes those computers are in our pockets, sometimes they&#8217;re on our laps and coffee tables, and occasionally you might still find them on our desks!\n\nFor the drama and heartbreak that can occur when we lose these computers, we take astoundingly bad care of them. We don&#8217;t back them up, we reuse passwords. A moment without wireless networking is <em>the worst</em> and yet we don&#8217;t take steps to prevent even more dramatic losses due to password breaches and storage failure.\n\nGiven all of this, a computer is made better by making it a disposable object. Backup your data, and backup your backups. Practice good password habits as much as possible so your accounts are isolated and somewhat disposable. Know your gameplan and what happens to your stuff if your computer or backups fall into a lava pit.\n\n<h2>3</h2>\n\nKnowing about vacation and disposable computing, I&#8217;m led to an odd and dissonant conclusion: an e-ink Kindle is the perfect computer. It does not do work, it does not social media. You can take it through airport security without any extra steps, which feels a little perverse and seems a bit surreal. It does not interrupt, it does not beep or blorp, it just barely displays text. As modern computers go, it&#8217;s basically useless.\n\nBut. You can read on it. And reading is so wonderful. And you can put stress aside. A Kindle gets wet? Not a big deal. Drop a Kindle? Not a big deal. Try to use it by the pool, out in nature, out in weather, out where the internet does not go? Not a big deal. Lose your Kindle? Buy another one, it costs a fraction of all your other computers.\n\nThe one scenario where you will find yourself absolutely screwed with a Kindle is when you have to enter text. Logging into Amazon or a wireless network for the first time? That&#8217;s a bad time.\n\nIn every other respect, the Kindle is a computer that does nothing to increase your stress level. That&#8217;s pretty remarkable today. Let&#8217;s make more calm computing devices, ok?\n",
				"date_published": "2014-10-21T18:08:33-07:00",
				"url": "https://therealadam.com/2014/10/21/vacation-disposable-and.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/07/apple-disney-and.html",
				"title": "Apple, Disney, and obsession",
				"content_html": "<p>People in technology disproportionately like to comment on Apple’s products and business. Outside of technology, there are just as many folks who love to obsess over Disney’s theme parks. Based on my friend networks, I’d wager that for every person who obsesses over Apple’s keynotes, there’s a Disney enthusiast keeping up on special events and the best way to enjoy the theme parks.<!-- raw HTML omitted --></p>\n<p>The connection that strikes me is that both of these companies pay more attention to details than their competitors. Apple’s competitors throw software and hardware at the wall like spaghetti, hoping it will stick. Disney’s competitors rename their rides to match the blockbusters of summer. By comparison, Apple makes a big deal about the fit and finish of their hardware (let’s not talk about that camera though!) and has a coherent story about how all their products fit together into a useful landscape. Disney carefully arranges their parks to keep the guests in a cohesive movie world and pays attention to the little details that enhance or optimize the experience.</p>\n<p>I could make some value judgement here about how attention to detail is more profitable, better design, better engineering, or whatever. I suspect all of those are true, but it’s not what excites me about Apple or Disney. When I read about changes to Disney’s theme parks or Apple’s keynotes, I’m excited that there are companies, quite large and successful ones, that are connecting lot of dots in an intriguing way. They’re extracting delight from large scale complexity. <!-- raw HTML omitted -->Megaprojects<!-- raw HTML omitted --> are nifty and often enhance humanity, but they’re mostly out of touch or sight. It’s nice that some of us can experience and enjoy these commercial projects of vast scale and quality execution.</p>\n",
				"content_text": "People in technology disproportionately like to comment on Apple&#8217;s products and business. Outside of technology, there are just as many folks who love to obsess over Disney&#8217;s theme parks. Based on my friend networks, I&#8217;d wager that for every person who obsesses over Apple&#8217;s keynotes, there&#8217;s a Disney enthusiast keeping up on special events and the best way to enjoy the theme parks.</p>\n\nThe connection that strikes me is that both of these companies pay more attention to details than their competitors. Apple&#8217;s competitors throw software and hardware at the wall like spaghetti, hoping it will stick. Disney&#8217;s competitors rename their rides to match the blockbusters of summer. By comparison, Apple makes a big deal about the fit and finish of their hardware (let&#8217;s not talk about that camera though!) and has a coherent story about how all their products fit together into a useful landscape. Disney carefully arranges their parks to keep the guests in a cohesive movie world and pays attention to the little details that enhance or optimize the experience.\n\nI could make some value judgement here about how attention to detail is more profitable, better design, better engineering, or whatever. I suspect all of those are true, but it&#8217;s not what excites me about Apple or Disney. When I read about changes to Disney&#8217;s theme parks or Apple&#8217;s keynotes, I&#8217;m excited that there are companies, quite large and successful ones, that are connecting lot of dots in an intriguing way. They&#8217;re extracting delight from large scale complexity. <a href=\"http://en.wikipedia.org/wiki/Megaproject\">Megaprojects</a> are nifty and often enhance humanity, but they&#8217;re mostly out of touch or sight. It&#8217;s nice that some of us can experience and enjoy these commercial projects of vast scale and quality execution.\n",
				"date_published": "2014-10-07T18:25:49-07:00",
				"url": "https://therealadam.com/2014/10/07/apple-disney-and.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/10/03/multiplication-over-management.html",
				"title": "Multiplication over management",
				"content_html": "<p>When a developer becomes a manager, <!-- raw HTML omitted -->It&rsquo;s not a promotion, it&rsquo;s a career change<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Your job is not to be an engineer. Your job is not to be a manager. Your job is to <!-- raw HTML omitted -->be a multiplier<!-- raw HTML omitted -->.<!-- raw HTML omitted --></p>\n<p>Don&rsquo;t miss the section on how we undervalue non-technical skills. It&rsquo;s not unlike developing software, it&rsquo;s just that your levers are people and processes instead of software and data centers. See also, <!-- raw HTML omitted -->Managing Humans<!-- raw HTML omitted -->.</p>\n",
				"content_text": "When a developer becomes a manager, <a href=\"http://fractio.nl/2014/09/19/not-a-promotion-a-career-change/\">It's not a promotion, it's a career change</a>:\n\n<blockquote>If you want to do your leadership job effectively, you will be exercising a vastly different set of skills on a daily basis to what you are exercising as an engineer. Skills you likely haven't developed and are unaware of.\n\nYour job is not to be an engineer. Your job is not to be a manager. Your job is to <a href=\"https://www.youtube.com/watch?v=jGPrU15GuSw\">be a multiplier</a>.</blockquote>\n\nDon't miss the section on how we undervalue non-technical skills. It's not unlike developing software, it's just that your levers are people and processes instead of software and data centers. See also, <a href=\"http://www.managinghumans.com\">Managing Humans</a>.\n",
				"date_published": "2014-10-03T07:27:24-07:00",
				"url": "https://therealadam.com/2014/10/03/multiplication-over-management.html",
				"tags": ["Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/29/how-to-succeed.html",
				"title": "How to succeed at Rails by trying",
				"content_html": "<p>I think most teams, probably 90% of them, should start <!-- raw HTML omitted -->and stick with<!-- raw HTML omitted --> Rails conventions. Intelligently apply design principles, watch out for coupling that’s not worthwhile, carefully add dependencies when you must, sure. But don’t worry too much about erecting a wall between your app and Rails, building microservices, or whatever fashion dictates when you run <!-- raw HTML omitted -->rails new<!-- raw HTML omitted -->.</p>\n<p>That said, I don’t think strict adherence to Rails’ opinions is the <!-- raw HTML omitted -->only<!-- raw HTML omitted --> way to succeed when using Ruby to build for the web. You can adopt the principles of Rails’ opinions, e.g. use code over configuration to fight boilerplate or reduce the number of choices developers need to make by curating some libraries. You could document those principles and invest in new teammates by mentoring them up on your framework and tools.</p>\n<p>Actually, you should do that anyway! But there are reasons you may not be able to do that: the team is too junior, time is tight, you need to explore new technical ground in other areas of the project. If that sounds like your team, you will benefit a lot from letting Rails do much of the tool-building, principle-seeking, and training for you.</p>\n",
				"content_text": "I think most teams, probably 90% of them, should start <em>and stick with</em> Rails conventions. Intelligently apply design principles, watch out for coupling that’s not worthwhile, carefully add dependencies when you must, sure. But don’t worry too much about erecting a wall between your app and Rails, building microservices, or whatever fashion dictates when you run <code>rails new</code>.\n\nThat said, I don’t think strict adherence to Rails’ opinions is the <em>only</em> way to succeed when using Ruby to build for the web. You can adopt the principles of Rails’ opinions, e.g. use code over configuration to fight boilerplate or reduce the number of choices developers need to make by curating some libraries. You could document those principles and invest in new teammates by mentoring them up on your framework and tools.\n\nActually, you should do that anyway! But there are reasons you may not be able to do that: the team is too junior, time is tight, you need to explore new technical ground in other areas of the project. If that sounds like your team, you will benefit a lot from letting Rails do much of the tool-building, principle-seeking, and training for you.\n",
				"date_published": "2014-09-29T20:03:32-07:00",
				"url": "https://therealadam.com/2014/09/29/how-to-succeed.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/28/the-wolf-moves.html",
				"title": "The wolf moves fast...",
				"content_html": "<p><!-- raw HTML omitted -->The Wolf<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>See also, <!-- raw HTML omitted -->The Grinder<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://randsinrepose.com/archives/the-wolf/\">The Wolf</a>:\n\n<blockquote>The Wolf moves fast because he or she is able to avoid the encumbering necessities of a group of people building at scale. This avoidance of most things process related combined with exceptional engineering ability allows them to move at speed which makes them unusually productive. It’s this productivity that the rest of the team can… smell. It’s this scent of pure productivity that allows them to further skirt documentation, meetings, and annual reviews.</blockquote>\n\nSee also, <a href=\"http://therealadam.com/2012/06/15/the-grinder/\">The Grinder</a>.\n",
				"date_published": "2014-09-28T16:48:46-07:00",
				"url": "https://therealadam.com/2014/09/28/the-wolf-moves.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/23/how-waterparks-became.html",
				"title": "How waterparks became a thing",
				"content_html": "<p><!-- raw HTML omitted -->The Men Who Built the Great American Waterpark<!-- raw HTML omitted -->, a roaring tale about the fellows who created the notion of a park for water attractions, from Wet and Wild to my personal favorite place on earth, Schlitterbahn. Told as is typical of the slightly nerdy, slightly narrative Grantland form.</p>\n",
				"content_text": "<a href=\"http://grantland.com/features/the-wet-stuff-verruckt-waterslide-schlitterbahn/\">The Men Who Built the Great American Waterpark</a>, a roaring tale about the fellows who created the notion of a park for water attractions, from Wet and Wild to my personal favorite place on earth, Schlitterbahn. Told as is typical of the slightly nerdy, slightly narrative Grantland form.\n",
				"date_published": "2014-09-23T17:34:38-07:00",
				"url": "https://therealadam.com/2014/09/23/how-waterparks-became.html",
				"tags": ["The System","Erudition","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/23/welltuned-judgement.html",
				"title": "Well-tuned judgement",
				"content_html": "<p><!-- raw HTML omitted -->Lessons From A Lifetime Of Being A Programmer<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I’ve taken this one seriously in the past, almost aways tinkering with languages, databases, frameworks, etc. I think it’s served me up to a point, expanding my mind and learning different ways to do to things.</p>\n<p>The problem is I’ve reached the point of diminishing returns. I could go learn a stack-based language like Factor, or bend my brain around a oddly shaped database like Datomic. I’m not sure it would make me much better as a developer and leader of software teams.</p>\n<p>Instead, the steamroller I think I need to keep ahead of is practice. Given a problem, what are three different solutions? What are their tradeoffs? Which approaches seem nice on paper, or in a blog post, but don’t work out a few hours down the road?</p>\n<p>To wit:</p>\n<!-- raw HTML omitted -->\n<p>Well-tuned judgement is where I’m hoping to go next. Part of that is experience, knowing the forces and tradeoffs that apply to the possible solutions. Part of that is the ability to communicate it with teammates, sometimes face-to-face and sometimes asychronously. The really challenging part is letting your teammates run with the result of that judgement and collaboration.</p>\n<p>A good developer makes good decisions for their own implementation; a great developer helps the whole team implement good decisions.</p>\n",
				"content_text": "<a href=\"http://thecodist.com/article/lessons_from_a_lifetime_of_being_a_programmer\">Lessons From A Lifetime Of Being A Programmer</a>:\n\n<blockquote>Never stop learning, the technology steamroller is right behind you waiting for you to stop.</blockquote>\n\nI’ve taken this one seriously in the past, almost aways tinkering with languages, databases, frameworks, etc. I think it’s served me up to a point, expanding my mind and learning different ways to do to things.\n\nThe problem is I’ve reached the point of diminishing returns. I could go learn a stack-based language like Factor, or bend my brain around a oddly shaped database like Datomic. I’m not sure it would make me much better as a developer and leader of software teams.\n\nInstead, the steamroller I think I need to keep ahead of is practice. Given a problem, what are three different solutions? What are their tradeoffs? Which approaches seem nice on paper, or in a blog post, but don’t work out a few hours down the road?\n\nTo wit:\n\n<blockquote>This isn’t obvious to everyone, but the ability to see something new, or see what others are doing, or to compare multiple ways of doing something and then pick the best option for you, your team, your project or even your company is incredibly valuable. Most people I’ve seen are not very good at this. Most leaders are really terrible at this. It’s easy to just do what someone tells you you should do or something you read in a blog or just do what everyone else is doing. It’s much more difficult to look at things from all sides and your needs and pick something that seems to be best at that point. Of course you have to make some decision, people are often paralyzed by having to evaluate which often leads to picking something random or following the herd.</blockquote>\n\nWell-tuned judgement is where I’m hoping to go next. Part of that is experience, knowing the forces and tradeoffs that apply to the possible solutions. Part of that is the ability to communicate it with teammates, sometimes face-to-face and sometimes asychronously. The really challenging part is letting your teammates run with the result of that judgement and collaboration.\n\nA good developer makes good decisions for their own implementation; a great developer helps the whole team implement good decisions.\n",
				"date_published": "2014-09-23T09:31:32-07:00",
				"url": "https://therealadam.com/2014/09/23/welltuned-judgement.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/21/commercialeering.html",
				"title": "Commercialeering",
				"content_html": "<p>Things you might hear in commercials/promotions for software and beer:</p>\n<p>“The first 96-calorie Pilsner”\n“Invented the smooth-pour top”\n“Next-generation build system”\n“The database that beats the CAP theorem”</p>\n<p>American software and beer, much innovation, many hands waving. Solutioneering!</p>\n",
				"content_text": "Things you might hear in commercials/promotions for software and beer:\n\n“The first 96-calorie Pilsner”\n“Invented the smooth-pour top”\n“Next-generation build system”\n“The database that beats the CAP theorem”\n\nAmerican software and beer, much innovation, many hands waving. Solutioneering!\n",
				"date_published": "2014-09-21T12:09:51-07:00",
				"url": "https://therealadam.com/2014/09/21/commercialeering.html",
				"tags": ["Pop Culture","Comedy, haha","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/11/sportsball-deciphered-ii.html",
				"title": "Sportsball Deciphered (II)",
				"content_html": "<p>It’s Thursday. Sadly enough, this year, that means there’s football on. We’re far from <!-- raw HTML omitted -->peak<!-- raw HTML omitted --> football, but it’s getting closer. Prepare yourself, and tell your kids of the days when Sunday was a special day because no other day had real football. Now, on to more no-nonsense, jargon-free definitions of football jargon.<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>A <!-- raw HTML omitted -->Hail Mary<!-- raw HTML omitted --> is the most desperate offensive play. If you’re doing poorly, the end is near, and you need a miracle, your Hail Mary effort is the low-odds, high reward manuever to save the day.</p>\n<p>You start executing your plan with the <!-- raw HTML omitted -->snap<!-- raw HTML omitted -->.</p>\n<p>If someone inappropriately prevents someone else from doing their job, you could say they have committed <!-- raw HTML omitted -->pass interference<!-- raw HTML omitted -->.</p>\n<p>If you’re not making progress forwards or backwards in your plan, and are instead moving laterally, you may have <!-- raw HTML omitted -->gone sideways<!-- raw HTML omitted -->.</p>\n<p>If you want to commend a teammate for doing well, and you’re comfortable around them, you might give them an <!-- raw HTML omitted -->ass slap<!-- raw HTML omitted -->, but be careful; everyone watching will notice it and wonder things.</p>\n<p>Coaching in the NFL is now sufficiently complicated that coaches often have a list of plays that resembles a laminated <!-- raw HTML omitted -->take-out menu<!-- raw HTML omitted --> in-hand at all times on the sideline. This is addition to the radio headset that makes them look like they’re working the drive-through at your local burger joint.</p>\n<p>A strategy that involves taking medium-to-high reward, low probability chances all the time is not too dissimilar from <!-- raw HTML omitted -->always passing the ball<!-- raw HTML omitted -->. If you were instead going for lower reward but higher probability tactics, you’d be <!-- raw HTML omitted -->always running the ball<!-- raw HTML omitted -->.</p>\n<p>If you run out of chances and don’t even succeed at a small incremental goal, you’ll have to <!-- raw HTML omitted -->punt<!-- raw HTML omitted -->. The other team will get a chance and hopefully you’ll get to try again, but your tactical progress will probably be reset.</p>\n<p>A strategy that emphasizes protecting against big losses over smaller losses is not unlike a <!-- raw HTML omitted -->nickel defense<!-- raw HTML omitted -->.</p>\n<p>If you fail to protect the leader, you have given up a <!-- raw HTML omitted -->sack<!-- raw HTML omitted -->.</p>\n<!-- raw HTML omitted -->\n<p>For more, revisit <!-- raw HTML omitted -->Part I<!-- raw HTML omitted -->.</p>\n",
				"content_text": "It&#8217;s Thursday. Sadly enough, this year, that means there&#8217;s football on. We&#8217;re far from <em>peak</em> football, but it&#8217;s getting closer. Prepare yourself, and tell your kids of the days when Sunday was a special day because no other day had real football. Now, on to more no-nonsense, jargon-free definitions of football jargon.</p>\n\n<hr>\n\nA <strong>Hail Mary</strong> is the most desperate offensive play. If you&#8217;re doing poorly, the end is near, and you need a miracle, your Hail Mary effort is the low-odds, high reward manuever to save the day.\n\nYou start executing your plan with the <strong>snap</strong>.\n\nIf someone inappropriately prevents someone else from doing their job, you could say they have committed <strong>pass interference</strong>.\n\nIf you&#8217;re not making progress forwards or backwards in your plan, and are instead moving laterally, you may have <strong>gone sideways</strong>.\n\nIf you want to commend a teammate for doing well, and you&#8217;re comfortable around them, you might give them an <strong>ass slap</strong>, but be careful; everyone watching will notice it and wonder things.\n\nCoaching in the NFL is now sufficiently complicated that coaches often have a list of plays that resembles a laminated <strong>take-out menu</strong> in-hand at all times on the sideline. This is addition to the radio headset that makes them look like they&#8217;re working the drive-through at your local burger joint.\n\nA strategy that involves taking medium-to-high reward, low probability chances all the time is not too dissimilar from <strong>always passing the ball</strong>. If you were instead going for lower reward but higher probability tactics, you&#8217;d be <strong>always running the ball</strong>.\n\nIf you run out of chances and don&#8217;t even succeed at a small incremental goal, you&#8217;ll have to <strong>punt</strong>. The other team will get a chance and hopefully you&#8217;ll get to try again, but your tactical progress will probably be reset.\n\nA strategy that emphasizes protecting against big losses over smaller losses is not unlike a <strong>nickel defense</strong>.\n\nIf you fail to protect the leader, you have given up a <strong>sack</strong>.\n\n<hr>\n\nFor more, revisit <a href=\"http://therealadam.com/2014/09/06/sportsball-deciphered/\">Part I</a>.\n",
				"date_published": "2014-09-11T18:37:34-07:00",
				"url": "https://therealadam.com/2014/09/11/sportsball-deciphered-ii.html",
				"tags": ["Pop Culture","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/10/vegas-americastarbucks-playground.html",
				"title": "Vegas, America/Starbuck's playground",
				"content_html": "<p>I&rsquo;m going to Vegas this weekend with my wife on a real vacation where we&rsquo;re going to do as little as possible. Not run around Disney World all day, not drive up and down the southern California coast. Based on this little bit of research, I can&rsquo;t wait.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I'm going to Vegas this weekend with my wife on a real vacation where we're going to do as little as possible. Not run around Disney World all day, not drive up and down the southern California coast. Based on this little bit of research, I can't wait.\n\n<img class=\"aligncenter size-full wp-image-3475\" src=\"http://therealadam.com/wp-content/uploads/2014/09/classyvegas.png\" alt=\"Three Starbucks facing each other\" width=\"275\" height=\"227\" />\n",
				"date_published": "2014-09-10T08:34:59-07:00",
				"url": "https://therealadam.com/2014/09/10/vegas-americastarbucks-playground.html",
				"tags": ["Pop Culture","Comedy, haha","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/09/put-the-phone.html",
				"title": "Put. The phone. Down.",
				"content_html": "<p>Nick Quaranto has <!-- raw HTML omitted -->Too many streams<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I don’t.<!-- raw HTML omitted --></p>\n<p>Nick&rsquo;s conclusion, in short, is to put the phone down. There will always be too many things seeking your attention. You can never Read the Whole Internet. You can only hope to mark it as unread and go on with your life. Hence, just put the phone down.</p>\n<p>I came across this little trick where you <!-- raw HTML omitted -->get all the stuff you tinker with off your phone&rsquo;s home screen<!-- raw HTML omitted -->. All functional apps, no social networks, no web, no mail, nothing that&rsquo;s going to grab your attention. Software calmness, per se. I&rsquo;ve done it for a week and love it so far. I highly recommend it, if you have the means.</p>\n",
				"content_text": "Nick Quaranto has <a href=\"http://quaran.to/blog/2014/09/08/too-many-streams/\">Too many streams</a>:\n\n<blockquote>There’s just too many things to pay attention to. I get questioned pretty frequently about this: how do you pay attention to nearly 1,500 people on your Twitter timeline? Here’s an easy answer:\n\nI don’t.</blockquote>\n\nNick's conclusion, in short, is to put the phone down. There will always be too many things seeking your attention. You can never Read the Whole Internet. You can only hope to mark it as unread and go on with your life. Hence, just put the phone down.\n\nI came across this little trick where you <a href=\"https://medium.com/life-hacks/my-year-with-a-distraction-free-iphone-and-how-to-start-your-own-experiment-6ff74a0e7a50\">get all the stuff you tinker with off your phone's home screen</a>. All functional apps, no social networks, no web, no mail, nothing that's going to grab your attention. Software calmness, per se. I've done it for a week and love it so far. I highly recommend it, if you have the means.\n",
				"date_published": "2014-09-09T07:23:52-07:00",
				"url": "https://therealadam.com/2014/09/09/put-the-phone.html",
				"tags": ["Pop Culture","Nerdery","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/08/conservation-of-complexity.html",
				"title": "Conservation of complexity",
				"content_html": "<p>You can&rsquo;t fight the <!-- raw HTML omitted -->Law of conservation of complexity<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Turns out one of my criticisms of microservices and microlibraries is a law. A LAW PEOPLE, YOUR ARGUMENT IS INVALID. Hilarious narcissism aside, keep an eye out for practices whose tradeoffs don't fit inside the depth of reasoning a blog post (like this one!) afford. Turning monoliths into services begets operational challenges. Microlibraries beget choices and wiring things up. Maybe the former is your thing, maybe it's the latter. Tradeoffs happen!</p>\n",
				"content_text": "You can't fight the <a href=\"http://en.m.wikipedia.org/wiki/Law_of_conservation_of_complexity\">Law of conservation of complexity</a>:\n\n<blockquote>\nThe law of conservation of complexity in human–computer interaction states that every application has an inherent amount of complexity that cannot be removed or hidden. Instead, it must be dealt with, either in product development or in user interaction.\n</blockquote>\n\nTurns out one of my criticisms of microservices and microlibraries is a law. A LAW PEOPLE, YOUR ARGUMENT IS INVALID. Hilarious narcissism aside, keep an eye out for practices whose tradeoffs don&#039;t fit inside the depth of reasoning a blog post (like this one!) afford. Turning monoliths into services begets operational challenges. Microlibraries beget choices and wiring things up. Maybe the former is your thing, maybe it&#039;s the latter. Tradeoffs happen!\n",
				"date_published": "2014-09-08T18:11:55-07:00",
				"url": "https://therealadam.com/2014/09/08/conservation-of-complexity.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/06/executables-deciphered.html",
				"title": "Executables deciphered",
				"content_html": "<p>What's inside a compiled Hello, World program? Julia Evans is on that. <!-- raw HTML omitted -->How to read an executable<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I thought I had a rough grasp of how executables worked, and I still learned things. I love this format too. Julia Evans writes these fearless, curious posts about the deeply mysterious underpinnings of our computers and I learn a lot every time. More like this, please!</p>\n",
				"content_text": "What&#039;s inside a compiled Hello, World program? Julia Evans is on that. <a href=\"http://jvns.ca/blog/2014/09/06/how-to-read-an-executable/\">How to read an executable</a>:\n\n<blockquote>\nExecutable file formats are regular file formats that you can understand. I’ll explain some simple tools to start! We’ll working on Linux, with ELF binaries. (binaries are kind of the definition of platform-specific, so this is all platform-specific.)\n</blockquote>\n\nI thought I had a rough grasp of how executables worked, and I still learned things. I love this format too. Julia Evans writes these fearless, curious posts about the deeply mysterious underpinnings of our computers and I learn a lot every time. More like this, please!\n",
				"date_published": "2014-09-06T12:35:33-07:00",
				"url": "https://therealadam.com/2014/09/06/executables-deciphered.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/06/sportsball-deciphered.html",
				"title": "Sportsball deciphered",
				"content_html": "<p>It’s September and football season is upon us. Thus, I will soon annoy the snot out of people who say “sportsball” and generally ignore sports. Some will be able to mute me on Twitter and avoid most of the annoyance. Others, however, work with me on teams and will have to put up with the times when I slip and work a football metaphor in to the process of software development.</p>\n<p>What follows is a glossary of things I may say that are football and/or sports related and a simple explanation of what they are. I’ve omitted what the term means in football so you don’t have to learn any sportsball if you don’t want to!</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Move the goalposts<!-- raw HTML omitted --> is when you change the rules so it’s easier for you to achieve your goal. It’s like how Captain Kirk solves the Kobayashi Maru test. (<!-- raw HTML omitted -->Ed. <!-- raw HTML omitted -->David Romerstein<!-- raw HTML omitted --> pointed out that moving the goal posts often means someone constantly changing the parameters of success such that it&rsquo;s impossible to <!-- raw HTML omitted --><!-- raw HTML omitted -->succeed. Beware!)<!-- raw HTML omitted --></p>\n<p>A <!-- raw HTML omitted -->lead blocker<!-- raw HTML omitted --> is someone who precedes a person trying to get something done and removes impediments to their goal.</p>\n<p>If you start doing something before the official start time, or you start doing it and then have to stop and start over almost immediately, it’s a <!-- raw HTML omitted -->false start<!-- raw HTML omitted -->.</p>\n<p>If you fully succeed in the task at hand, you have scored a <!-- raw HTML omitted -->touchdown<!-- raw HTML omitted -->.</p>\n<p>A <!-- raw HTML omitted -->penalty flag<!-- raw HTML omitted -->, or just flag, is thrown when you break the rules.</p>\n<p>If you force so many mistakes on your adversary that they run out of room to retreat, you have scored a <!-- raw HTML omitted -->safety<!-- raw HTML omitted -->.</p>\n<p>If you’re doing really well, and you don’t mind giving up a few small victories to get closer to winning the overall game, you are running a <!-- raw HTML omitted -->prevent<!-- raw HTML omitted --> defense.</p>\n<p>You might attempt to <!-- raw HTML omitted -->run out the clock<!-- raw HTML omitted --> if you’re winning and want to use a strategically conservative plan until the game is over and won.</p>\n<p>A <!-- raw HTML omitted -->blitz<!-- raw HTML omitted --> is an aggressive plan to overwhelm by speed and force. Just like the blitzkrieg, but with less actual war.</p>\n<p>The <!-- raw HTML omitted -->draw<!-- raw HTML omitted --> is about the simplest tactic you can apply on offense. You rely on one person to get the job done and everyone else supports them.</p>\n<p>A <!-- raw HTML omitted -->read option<!-- raw HTML omitted --> is one of the most complicated offensive tactics where you prepare multiple different strategies and the leader choses which one to execute at the last possible moment depending on what they see in the situation they face.</p>\n<!-- raw HTML omitted -->\n<p>More definitions coming soon! Leave a comment if there’s a sportsball term you’ve always wondered about and want a no-nonsense answer.</p>\n",
				"content_text": "It’s September and football season is upon us. Thus, I will soon annoy the snot out of people who say “sportsball” and generally ignore sports. Some will be able to mute me on Twitter and avoid most of the annoyance. Others, however, work with me on teams and will have to put up with the times when I slip and work a football metaphor in to the process of software development.\n\nWhat follows is a glossary of things I may say that are football and/or sports related and a simple explanation of what they are. I’ve omitted what the term means in football so you don’t have to learn any sportsball if you don’t want to!\n\n<hr />\n\n<strong>Move the goalposts</strong> is when you change the rules so it’s easier for you to achieve your goal. It’s like how Captain Kirk solves the Kobayashi Maru test. (<em>Ed. <a href=\"https://twitter.com/dromerstein\">David Romerstein</a> pointed out that moving the goal posts often means someone constantly changing the parameters of success such that it's impossible to </em><i>succeed. Beware!)</i>\n\nA <strong>lead blocker</strong> is someone who precedes a person trying to get something done and removes impediments to their goal.\n\nIf you start doing something before the official start time, or you start doing it and then have to stop and start over almost immediately, it’s a <strong>false start</strong>.\n\nIf you fully succeed in the task at hand, you have scored a <strong>touchdown</strong>.\n\nA <strong>penalty flag</strong>, or just flag, is thrown when you break the rules.\n\nIf you force so many mistakes on your adversary that they run out of room to retreat, you have scored a <strong>safety</strong>.\n\nIf you’re doing really well, and you don’t mind giving up a few small victories to get closer to winning the overall game, you are running a <strong>prevent</strong> defense.\n\nYou might attempt to <strong>run out the clock</strong> if you’re winning and want to use a strategically conservative plan until the game is over and won.\n\nA <strong>blitz</strong> is an aggressive plan to overwhelm by speed and force. Just like the blitzkrieg, but with less actual war.\n\nThe <strong>draw</strong> is about the simplest tactic you can apply on offense. You rely on one person to get the job done and everyone else supports them.\n\nA <strong>read option</strong> is one of the most complicated offensive tactics where you prepare multiple different strategies and the leader choses which one to execute at the last possible moment depending on what they see in the situation they face.\n\n<hr />\n\nMore definitions coming soon! Leave a comment if there’s a sportsball term you’ve always wondered about and want a no-nonsense answer.\n",
				"date_published": "2014-09-06T11:45:41-07:00",
				"url": "https://therealadam.com/2014/09/06/sportsball-deciphered.html",
				"tags": ["Pop Culture","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/03/make-systems-from.html",
				"title": "Make systems from goals",
				"content_html": "<p><!-- raw HTML omitted -->Use systems to get where you’re going, not goals:<!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Applies to personal life, biz, programming, hobby, whatever. Use goals to figure out what systems you need in place, then get habits and systems going to make those goals, or something better, happen.</p>\n<p>Yet another way you can use your skills as a developer to construct a system that really solves the problem, and not a symptom of the problem!</p>\n",
				"content_text": "<a href=\"http://www.dilbert.com/blog/entry/goals_vs_systems/\">Use systems to get where you&#8217;re going, not goals:</a></p>\n\n<blockquote>\nMy problem with goals is that they are limiting. Granted, if you focus on one particular goal, your odds of achieving it are better than if you have no goal. But you also miss out on opportunities that might have been far better than your goal. Systems, however, simply move you from a game with low odds to a game with better odds. With a system you are less likely to miss one opportunity because you were too focused on another. With a system, you are always scanning for any opportunity.\n</blockquote>\n\nApplies to personal life, biz, programming, hobby, whatever. Use goals to figure out what systems you need in place, then get habits and systems going to make those goals, or something better, happen.\n\nYet another way you can use your skills as a developer to construct a system that really solves the problem, and not a symptom of the problem!\n",
				"date_published": "2014-09-03T18:27:56-07:00",
				"url": "https://therealadam.com/2014/09/03/make-systems-from.html",
				"tags": ["Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/02/microservices-for-grumpy.html",
				"title": "Microservices for grumpy old men and women",
				"content_html": "<p>Microservices? I’m not entirely sure what they are. The term seems to exist on all parts of the <!-- raw HTML omitted -->hype cycle<!-- raw HTML omitted --> simultaneously. It’s on the ascent of excitement, the descent of disillusionment, and the plateau of productivity for different people, simultaneously. Some folks know exactly what it means, others know entirely nothing about what it means. <!-- raw HTML omitted -->Weirdness ensues<!-- raw HTML omitted -->. <!-- raw HTML omitted -->People talk past each other<!-- raw HTML omitted -->.</p>\n<p>It’s a mess. Grumpy old man mode is in full force. (FWIW, I am the grumpy old man in this metaphor. I can not speak to the stature of Fowler or Feathers at this time.)</p>\n<p>If I’m pessimistic, I nod along with Michael Feathers. He’s on to something when he observes the use of <!-- raw HTML omitted -->microservices as a blunt weapon against failures of encapsulation<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Microservices become SOLID principles<!-- raw HTML omitted --> using units of deployment and even teams as a barrier between concerns. I feel that’s rather draconian.</p>\n<p>If I’m optimistic, I cite Martin Fowler. To his credit, Fowler is doing the best work sifting through the noise and sensibly <!-- raw HTML omitted -->organizing what microservices might, in fact, be about<!-- raw HTML omitted -->. They’re <!-- raw HTML omitted -->probably not distributed objects<!-- raw HTML omitted -->, if you do it right. But you should understand the details, lest you get swallowed by the novelty and forget to realize the benefits. <!-- raw HTML omitted -->Make sure you’re tall enough for the ride<!-- raw HTML omitted --> your operations team is about to endure.</p>\n<p>I get the feeling that radical approaches to working with Rails and microservices are tilting at the same windmill. You won’t fix the human tendency to build complicated structures with more software. Employing more buckets, or smaller buckets, in which to put your software doesn’t solve it either. You need a human factor to jump in and say “Hey, this is complicated! It might even be <!-- raw HTML omitted -->essentially<!-- raw HTML omitted --> complex. Let’s manage that complexity.” If you’re <!-- raw HTML omitted -->actively<!-- raw HTML omitted --> managing complexity, microservices or monoliths, Rails way or your own way, microservices and decoupling are a lot more of a detail than a foundational principle.</p>\n",
				"content_text": "Microservices? I&#8217;m not entirely sure what they are. The term seems to exist on all parts of the <a href=\"http://en.wikipedia.org/wiki/Hype_cycle\">hype cycle</a> simultaneously. It&#8217;s on the ascent of excitement, the descent of disillusionment, and the plateau of productivity for different people, simultaneously. Some folks know exactly what it means, others know entirely nothing about what it means. <a href=\"https://www.exponential.io/blog/nodeday-2014-you-only-need-100-lines-of-javascript\">Weirdness ensues</a>. <a href=\"http://highscalability.com/blog/2014/7/28/the-great-microservices-vs-monolithic-apps-twitter-melee.html\">People talk past each other</a>.\n\nIt&#8217;s a mess. Grumpy old man mode is in full force. (FWIW, I am the grumpy old man in this metaphor. I can not speak to the stature of Fowler or Feathers at this time.)\n\nIf I&#8217;m pessimistic, I nod along with Michael Feathers. He&#8217;s on to something when he observes the use of <a href=\"https://michaelfeathers.silvrback.com/microservices-and-the-failure-of-encapsulaton\">microservices as a blunt weapon against failures of encapsulation</a>. <a href=\"https://michaelfeathers.silvrback.com/microservices-until-macro-complexity\">Microservices become SOLID principles</a> using units of deployment and even teams as a barrier between concerns. I feel that&#8217;s rather draconian.\n\nIf I&#8217;m optimistic, I cite Martin Fowler. To his credit, Fowler is doing the best work sifting through the noise and sensibly <a href=\"http://martinfowler.com/articles/microservices.html\">organizing what microservices might, in fact, be about</a>. They&#8217;re <a href=\"http://martinfowler.com/articles/distributed-objects-microservices.html\">probably not distributed objects</a>, if you do it right. But you should understand the details, lest you get swallowed by the novelty and forget to realize the benefits. <a href=\"http://martinfowler.com/bliki/MicroservicePrerequisites.html\">Make sure you&#8217;re tall enough for the ride</a> your operations team is about to endure.\n\nI get the feeling that radical approaches to working with Rails and microservices are tilting at the same windmill. You won&#8217;t fix the human tendency to build complicated structures with more software. Employing more buckets, or smaller buckets, in which to put your software doesn&#8217;t solve it either. You need a human factor to jump in and say &#8220;Hey, this is complicated! It might even be <strong>essentially</strong> complex. Let&#8217;s manage that complexity.&#8221; If you&#8217;re <em>actively</em> managing complexity, microservices or monoliths, Rails way or your own way, microservices and decoupling are a lot more of a detail than a foundational principle.\n",
				"date_published": "2014-09-02T16:45:32-07:00",
				"url": "https://therealadam.com/2014/09/02/microservices-for-grumpy.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/09/01/jerry-jones-slightly.html",
				"title": "Jerry Jones: slightly human, mostly Faustian",
				"content_html": "<p>The best thing you will read about Jerry Jones this year. Slightly humanizing, even. <!-- raw HTML omitted -->What Jerry Jones wants, he cannot have<!-- raw HTML omitted -->:<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>The owner of the Dallas Cowboys is his own worst enemy. His general manager, Jerry Jones, is able to make decisions good enough to prevent the team from sinking too far. He is not, however, able to make the decisions needed to return the team to legitimate contender status.</p>\n<p>If you somehow made it this far without knowing much about football, let me clarify. Jerry Jones <!-- raw HTML omitted -->is<!-- raw HTML omitted --> Jerry Jones. Owner <!-- raw HTML omitted -->and<!-- raw HTML omitted --> general manager. Everyone who has watched football for more than a few years knows that Jones’ ego is what prevents him from separating the wildly successful owner Jones from the wildly sub-par manager Jones. And yet: it never happens.</p>\n<p>That said, it does sound like somewhat Faustian fun to hang out with Jones, as the ESPN reporter who wrote this piece did. On the one hand, it’s obvious that a billionaire is using his considerable resources to come off as a reasonable, alright dude. On the other hand, he stands on the side of not renaming the Washington football team, so you know that Jones is subtly awful in ways he can’t even begin to wrap his brain around.</p>\n",
				"content_text": "The best thing you will read about Jerry Jones this year. Slightly humanizing, even. <a href=\"http://espn.go.com/espn/feature/story/_/id/11420510/dallas-cowboys-owner-jerry-jones-wants-known-football-man\">What Jerry Jones wants, he cannot have</a>:</p>\n\n<blockquote>\nI&#8217;ve never wanted anything as much as I want to win the next Super Bowl.\n</blockquote>\n\nThe owner of the Dallas Cowboys is his own worst enemy. His general manager, Jerry Jones, is able to make decisions good enough to prevent the team from sinking too far. He is not, however, able to make the decisions needed to return the team to legitimate contender status.\n\nIf you somehow made it this far without knowing much about football, let me clarify. Jerry Jones <em>is</em> Jerry Jones. Owner <em>and</em> general manager. Everyone who has watched football for more than a few years knows that Jones&#8217; ego is what prevents him from separating the wildly successful owner Jones from the wildly sub-par manager Jones. And yet: it never happens.\n\nThat said, it does sound like somewhat Faustian fun to hang out with Jones, as the ESPN reporter who wrote this piece did. On the one hand, it&#8217;s obvious that a billionaire is using his considerable resources to come off as a reasonable, alright dude. On the other hand, he stands on the side of not renaming the Washington football team, so you know that Jones is subtly awful in ways he can&#8217;t even begin to wrap his brain around.\n",
				"date_published": "2014-09-01T14:46:46-07:00",
				"url": "https://therealadam.com/2014/09/01/jerry-jones-slightly.html",
				"tags": ["Pop Culture","Sportsball!","Link","goodread"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/08/17/thought-quality.html",
				"title": "Thought + Quality",
				"content_html": "<p>Oliver Reichenstein, <!-- raw HTML omitted -->Putting Thought Into Things<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Each advance in how I build software is lead by finding some way I defer or avoid thinking and correcting that shortcoming. In doing so, I find myself a little more opinionated, a little more specific about what really matters in making software and what is dressing.</p>\n<p>Put more thought into what I build. Always think about what constitutes <!-- raw HTML omitted -->The Quality<!-- raw HTML omitted --> for the kind of software I want to build. Seek to avoid the tech vogue in search of deeper quality and thought. I&rsquo;m far from mastering any of these disciplines, but the results so far are promising.</p>\n<p><!-- raw HTML omitted -->Get thee to thy hammock!<!-- raw HTML omitted --></p>\n",
				"content_text": "Oliver Reichenstein, <a href=\"http://ia.net/blog/putting-thought-into-things/\">Putting Thought Into Things</a>:\n\n<blockquote>Quality — as in “fitness for purpose” — lives in the structure of a product. A lack of quality is a lack of structure, and a lack of structure is, ultimately, a lack of thought. One does not find a solid structure by following some simple method. We deepen the structure by deepening our thought on the product. Our role as designers is to put thought into things.</p></blockquote>\n\n<p>I've noticed I do the worst, as a developer, when I'm using tools and methodology to avoid thinking. Not entirely sure how to solve this problem, write some tests and commit whatever makes them green. Troubleshoot by tinkering with commenting code out, trying different incantations, pasting snippets found on the internet.\n\nEach advance in how I build software is lead by finding some way I defer or avoid thinking and correcting that shortcoming. In doing so, I find myself a little more opinionated, a little more specific about what really matters in making software and what is dressing.\n\nPut more thought into what I build. Always think about what constitutes <a href=\"http://c2.com/cgi/wiki?QualityWithoutaName\">The Quality</a> for the kind of software I want to build. Seek to avoid the tech vogue in search of deeper quality and thought. I'm far from mastering any of these disciplines, but the results so far are promising.\n\n<a href=\"http://data-sorcery.org/2010/12/29/hammock-driven-dev/\">Get thee to thy hammock!</a>\n",
				"date_published": "2014-08-17T15:06:09-07:00",
				"url": "https://therealadam.com/2014/08/17/thought-quality.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/08/10/when-developers-design.html",
				"title": "When Developers Design",
				"content_html": "<p>I see lots of “should designers code?” articles and introductions to coding for designers. I see far less interest in the converse. So what’s a designer think? Cap Watkins, a designer; <!-- raw HTML omitted -->Should Engineers Design?<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>There’s so much to designing that isn’t about choosing colors, fonts, producing icons, or drawing. Developers can, and should, get involved in how the applications works, how copy guides the user through workflows, when to prompt about invalid data and when to fix it automatically, and how to help users through interactions. That’s design!</p>\n<p>To wit:</p>\n<!-- raw HTML omitted -->\n<p>Developers often don’t even realize they’re designing when they’re building libraries and tools for other developers. Writing a good README so developers know why your project is awesome and how to use it? That’s design. Sweating the details of an OO or REST API? That’s design. Opting to remove a feature or solve two problems with one feature? That’s design!</p>\n<p><!-- raw HTML omitted -->The design was in us the whole time, and we didn’t even know it!<!-- raw HTML omitted --></p>\n<p>I leave you with this excellent wisdom:</p>\n<!-- raw HTML omitted -->\n<p>Here’s a fun thing I do that you should try: when you read articles about design, squint a little bit and pretend it’s about designing programs. You might find something you want to try the next time you sit down to work on some code.</p>\n",
				"content_text": "I see lots of “should designers code?” articles and introductions to coding for designers. I see far less interest in the converse. So what’s a designer think? Cap Watkins, a designer; <a href=\"http://blog.capwatkins.com/should-engineers-design\">Should Engineers Design?</a>:\n\n<blockquote>\n<p class=\"excerpt\">If you think design is 100% about creating “design artifacts”, I’d say your scope is too narrow and has the potential to stunt your personal and professional growth.</p>\n</blockquote>\n\nThere’s so much to designing that isn’t about choosing colors, fonts, producing icons, or drawing. Developers can, and should, get involved in how the applications works, how copy guides the user through workflows, when to prompt about invalid data and when to fix it automatically, and how to help users through interactions. That’s design!\n\nTo wit:\n\n<blockquote>\n<p class=\"excerpt\">Throughout my entire career I’ve had engineering partners deep in the design process with me. I show them sketches, bounce ideas off of them, have whiteboarding sessions to figure out what we’re going to do. I trust engineers I work with to let me know when something seems confusing, when there’s an edge case I haven’t thought of and to push on my ideas to find where they break and help me make them even better.</p>\n</blockquote>\n\nDevelopers often don’t even realize they’re designing when they’re building libraries and tools for other developers. Writing a good README so developers know why your project is awesome and how to use it? That’s design. Sweating the details of an OO or REST API? That’s design. Opting to remove a feature or solve two problems with one feature? That’s design!\n\n<em>The design was in us the whole time, and we didn’t even know it!</em>\n\nI leave you with this excellent wisdom:\n\n<blockquote>When you look at design as a process and not an artifact, everyone on your team becomes a designer. We have different areas of expertise and skill, no doubt, but the product experience belongs to every member of the team. The more familiar you are with each other’s responsibilities, the more you’re able to participate with and help each other out when needed.</blockquote>\n\nHere’s a fun thing I do that you should try: when you read articles about design, squint a little bit and pretend it’s about designing programs. You might find something you want to try the next time you sit down to work on some code.\n",
				"date_published": "2014-08-10T12:57:07-07:00",
				"url": "https://therealadam.com/2014/08/10/when-developers-design.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/08/06/how-rails-fits.html",
				"title": "How Rails fits into the front-end",
				"content_html": "<p>Is Rails well positioned for where the web (on all devices) is going? Pal <!-- raw HTML omitted -->Dave Copeland asked that on Twitter<!-- raw HTML omitted -->. Turns out I had plenty of opinions!</p>\n<!-- raw HTML omitted -->\n<p>If, tomorrow, I <!-- raw HTML omitted -->did<!-- raw HTML omitted --> have to build a Rails app whose web experience was crucial, I’d be as conservative as possible with my library choices. I’d stick with the oldest, boring-est, best-tested JS and CSS tools until it wasn’t feasible anymore.</p>\n",
				"content_text": "Is Rails well positioned for where the web (on all devices) is going? Pal <a href=\"https://twitter.com/davetron5000/status/496773153230962688\">Dave Copeland asked that on Twitter</a>. Turns out I had plenty of opinions!\n\n<ul>\n    <li>I buy into the notion that the majority of applications don’t need much special in the way of browser-side functionality. <a href=\"https://signalvnoise.com/posts/3697-server-generated-javascript-responses\">SJR</a>, a little bit of CoffeeScript, and SCSS will do you fine.</li>\n    <li>For the rare team building ambitious applications, an opinionated framework like Rails is probably the last thing you want. Ambitious applications, perhaps by definition, are going to cut against the grain in one or more places. An opinionated framework is only going to get in the way of the opinions that make the application ambitious in the first place.</li>\n    <li>The web is in a weird place. I think it’s a somewhat risky environment to build for browsers right now. The combinatorial explosion of devices and browsers means that you’re almost certainly giving some non-trivial class of user a suboptimal or buggy experience. Choosing where to spend your effort seems like a non-fun process.</li>\n    <li>There isn’t a high-quality, well supported, well conceived ecosystem that currently exists for browsers. Rails and iOS both succeeded with a combination of smart conception, (mostly) excellent execution, and supportive communities or vendors. Front-end technologies are deeply splintered right now.</li>\n    <li>I suspect there’s no opportunity for Rails to crown a winner in this space until the Cambrian explosion of JavaScript and CSS practice coalesce into something coherent that most developers can relate to and execute.</li>\n    <li>But, if I had to wager, my money is on Rails choosing Ember as a default choice. This would happen on the <em>trailing</em> edge of fashion though, in the same way that jQuery didn’t become the default for Rails until long after jQuery became the go-to choice for most front-end developers.</li>\n    <li>Even if the Rails core team <em>could</em> pick a winner on the leading edge of fashion, I don’t think it would work out. The Rails core team has much less experience with the front-end than the back-end. Historically, the choices have been OK (CoffeeScript turned out well, Prototype+Scriptaculous was an excellent early choice) with a recent trend towards provoking wild disagreement (e.g. CoffeeScript and Turbolinks).</li>\n    <li>I think a lot of this comes down to Sprockets’ ability to gracefully grow to support front-end practice. It already does a pretty good job. Adding better support for browser components (e.g. Bower) would be good, as well as keeping up with SVG, web fonts and other somewhat special asset types.</li>\n</ul>\n\nIf, tomorrow, I <em>did</em> have to build a Rails app whose web experience was crucial, I’d be as conservative as possible with my library choices. I’d stick with the oldest, boring-est, best-tested JS and CSS tools until it wasn’t feasible anymore.\n",
				"date_published": "2014-08-06T18:50:39-07:00",
				"url": "https://therealadam.com/2014/08/06/how-rails-fits.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/08/05/a-ruby-hash.html",
				"title": "A Ruby hash, Luxury Touring Edition",
				"content_html": "<p><!-- raw HTML omitted -->map.rb<!-- raw HTML omitted -->, quality software by Ara T. Howard:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->m = Map.new</p>\n<p>m[:a] = 0\nm[:b] = 1\nm[:c] = 2</p>\n<p>p m.keys #=&gt; [&lsquo;a&rsquo;,&lsquo;b&rsquo;,&lsquo;c&rsquo;] ### always ordered!\np m.values #=&gt; [0,1,2] ### always ordered!</p>\n<p>m = Map(:foo =&gt; {:bar =&gt; 42})\ns = m.struct # maps can give back clever little struct objects\np s.foo.bar #=&gt; 42\n<!-- raw HTML omitted --></p>\n<p>I like little tactical improvements to the Ruby standard library that give it a slightly more modern feel.</p>\n",
				"content_text": "<a href=\"https://github.com/ahoward/map\">map.rb</a>, quality software by Ara T. Howard:\n\n<blockquote>the awesome ruby container you've always wanted: a string/symbol indifferent ordered hash that works in all rubies</blockquote>\n\n<code>m = Map.new\n\nm[:a] = 0\nm[:b] = 1\nm[:c] = 2\n\np m.keys #=&gt; ['a','b','c'] ### always ordered!\np m.values #=&gt; [0,1,2] ### always ordered!\n\nm = Map(:foo =&gt; {:bar =&gt; 42})\ns = m.struct # maps can give back clever little struct objects\np s.foo.bar #=&gt; 42\n</code>\n\nI like little tactical improvements to the Ruby standard library that give it a slightly more modern feel.\n",
				"date_published": "2014-08-05T07:39:23-07:00",
				"url": "https://therealadam.com/2014/08/05/a-ruby-hash.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/08/04/its-always-been.html",
				"title": "It's Always Been This Way...Huh?",
				"content_html": "<p>I’ve been programming, as a full-time job, for more than ten years. I started doing Ruby, and Rails, nearly ten years ago. I’ve been at LivingSocial for a two and a half years now. If you add these numbers up you will find that I am, improbably, an old hand.</p>\n<p>As I try to explain and contextualize our organization, technology, and culture inside LivingSocial, I often catch myself delicately dancing around saying “it’s always been this way”. It sucks to hear this. It’s easy for this to sound like a deflection. “Don’t worry yourself, just accept it and let me get back to whatever I was doing before you asked that foolish question.” Crawl back to your desk and grind away.</p>\n<p>Beginner’s mind is <!-- raw HTML omitted -->crucial<!-- raw HTML omitted --> and <!-- raw HTML omitted -->fleeting<!-- raw HTML omitted -->, so every person new to our communities and teams are invaluable. I want to extract as much information about how we’re confusing or mired in our legacy of stupidity. A beginner’s mind can help us improve our organizations, but only when it’s open and the experts aren’t marked as institutional damage to route around instead of engage with.</p>\n<p>So I’m explaining organizational history and I find myself hand waving around “it’s always been this way, bask in despair!” At this point I (try to) profusely apologize and restart my explanation or answer. I need to get at that beginner’s mind before it becomes jaded in foregone conclusions.</p>\n<p>But sometimes I don’t stop. I forget. I get wrapped up in accurately and concisely explaining <!-- raw HTML omitted -->how<!-- raw HTML omitted --> it got this way and <!-- raw HTML omitted -->why<!-- raw HTML omitted --> it’s this way. I forget to actually answer the question or suggest how it might be made better.</p>\n<p>Allow me apologize to everyone out there on the internet. Sometimes it might seem like I’m saying “it’s always been this way”, but really I got so wrapped up in giving a vigorous history lesson that I lost my train of thought. It might help to restate the question. I’m an old hand, after all, with a frail brain.</p>\n",
				"content_text": "I’ve been programming, as a full-time job, for more than ten years. I started doing Ruby, and Rails, nearly ten years ago. I’ve been at LivingSocial for a two and a half years now. If you add these numbers up you will find that I am, improbably, an old hand.\n\nAs I try to explain and contextualize our organization, technology, and culture inside LivingSocial, I often catch myself delicately dancing around saying “it’s always been this way”. It sucks to hear this. It’s easy for this to sound like a deflection. “Don’t worry yourself, just accept it and let me get back to whatever I was doing before you asked that foolish question.” Crawl back to your desk and grind away.\n\nBeginner’s mind is <em>crucial</em> and <em>fleeting</em>, so every person new to our communities and teams are invaluable. I want to extract as much information about how we’re confusing or mired in our legacy of stupidity. A beginner’s mind can help us improve our organizations, but only when it’s open and the experts aren’t marked as institutional damage to route around instead of engage with.\n\nSo I’m explaining organizational history and I find myself hand waving around “it’s always been this way, bask in despair!” At this point I (try to) profusely apologize and restart my explanation or answer. I need to get at that beginner’s mind before it becomes jaded in foregone conclusions.\n\nBut sometimes I don’t stop. I forget. I get wrapped up in accurately and concisely explaining <em>how</em> it got this way and <em>why</em> it’s this way. I forget to actually answer the question or suggest how it might be made better.\n\nAllow me apologize to everyone out there on the internet. Sometimes it might seem like I’m saying “it’s always been this way”, but really I got so wrapped up in giving a vigorous history lesson that I lost my train of thought. It might help to restate the question. I’m an old hand, after all, with a frail brain.\n",
				"date_published": "2014-08-04T18:00:22-07:00",
				"url": "https://therealadam.com/2014/08/04/its-always-been.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/05/26/microsofts-orleans-a.html",
				"title": "Microsoft's Orleans, a good ideas",
				"content_html": "<p>I came up in the days when Microsoft and Linux were mortal enemies. Back when “Borg Bill Gates” was the icon for stories about MS on Slashdot. Back when Slashdot was <!-- raw HTML omitted -->the<!-- raw HTML omitted --> cutting edge.</p>\n<p>Thus, I’m always slightly surprised when I come across some really solid work done by Microsoft. The people at Microsoft are capable of really great work, but it often doesn’t escape The System in place between the hands on keyboards and the public face of the company.</p>\n<p>Microsoft Research, in particular, produces surprisingly good research papers. The <!-- raw HTML omitted -->recent paper on Orleans<!-- raw HTML omitted --> is a great example.</p>\n<p>Orleans is an opinionated “virutalized” actor framework MS developed that runs on their .NET and Azure frameworks:</p>\n<!-- raw HTML omitted -->\n<p>Implementing Orleans instead of a three-tier (web, app, DB) system allowed them to eliminate the need for a caching layer once they reached scale. Actors encapsulate state and caching thereof instead.</p>\n<!-- raw HTML omitted -->\n<p>Orleans is currently in use in the Halo 4 presence and statistics services. I bet you’ll see clones and shallow carbon copies of these ideas in a language or conference near you. Read the paper, it’s quite accessible as distributed systems papers go. There are some nice ideas in there.</p>\n<p><!-- raw HTML omitted -->Ed. Let me know if you like reading notes on papers I&rsquo;ve read. I&rsquo;d like to do it more often if folks find it useful.<!-- raw HTML omitted --></p>\n",
				"content_text": "I came up in the days when Microsoft and Linux were mortal enemies. Back when &#8220;Borg Bill Gates&#8221; was the icon for stories about MS on Slashdot. Back when Slashdot was <em>the</em> cutting edge.\n\nThus, I&#8217;m always slightly surprised when I come across some really solid work done by Microsoft. The people at Microsoft are capable of really great work, but it often doesn&#8217;t escape The System in place between the hands on keyboards and the public face of the company.\n\nMicrosoft Research, in particular, produces surprisingly good research papers. The <a href=\"http://research.microsoft.com/pubs/210931/orleans-msr-tr-2014-41.pdf\">recent paper on Orleans</a> is a great example.\n\nOrleans is an opinionated &#8220;virutalized&#8221; actor framework MS developed that runs on their .NET and Azure frameworks:\n\n<ul>\n<li>The design is single-threaded, small timemeslices, no preemption; not unlike Go&#8217;s goroutines (when considered on only one host)</li>\n<li>Orleans has its own runtime for activating, deactivating, locating, and dispatching to actors</li>\n<li>Semantics end up looking like a combination of queue-workers, actors, and Promise-based systems</li>\n</ul>\n\nImplementing Orleans instead of a three-tier (web, app, DB) system allowed them to eliminate the need for a caching layer once they reached scale. Actors encapsulate state and caching thereof instead.\n\n<ul>\n<li>Virtualized actors become analogous to virtual memory, raising the level of abstraction programmers can work at</li>\n<li>Virtualized actors don&#8217;t require management by operators or developers; failure and load-balancing behavior is managed by the runtime instead of prior specification</li>\n<li>Currently implements at-least-once message semantics, which works for developers; considering added only-once message delivery</li>\n</ul>\n\nOrleans is currently in use in the Halo 4 presence and statistics services. I bet you&#8217;ll see clones and shallow carbon copies of these ideas in a language or conference near you. Read the paper, it&#8217;s quite accessible as distributed systems papers go. There are some nice ideas in there.\n\n<em>Ed. Let me know if you like reading notes on papers I've read. I'd like to do it more often if folks find it useful.</em>\n",
				"date_published": "2014-05-26T15:42:50-07:00",
				"url": "https://therealadam.com/2014/05/26/microsofts-orleans-a.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/05/20/unpacking-railsconf.html",
				"title": "Unpacking RailsConf 2014",
				"content_html": "<p>RailsConf 2014 having wrapped up a few weeks ago, now seems like a good time to try and unpack what I saw, heard, and talked to others about. Bear in mind I skipped RailsConf 2013 (but I&rsquo;ve been to all the others), so I may construe something as new that I simply missed last year.</p>\n<p>I&rsquo;m going to break it down, as is my puzzle-solving wont, by technology and people.</p>\n<!-- raw HTML omitted -->\n<p>Lots of people are excited about a few central topics.</p>\n<p><!-- raw HTML omitted -->JavaScript<!-- raw HTML omitted -->. They want to build ambitious apps, with Ember, Lineman, and other tools. Developers seem somewhat concerned that building apps this way is swimming upstream. Or that it&rsquo;s early days and things are changing quickly. Or they think it&rsquo;s awesome to work in a growing field. It&rsquo;s all of those things.</p>\n<p><!-- raw HTML omitted -->Service-oriented Architecture<!-- raw HTML omitted -->. I went to talks about extracting services, designing services, implementing authentication/authorization across services, and how to write the client side of your various services. The talks felt like they were past the &ldquo;look at this novel thing!&rdquo; phase and into the &ldquo;well here&rsquo;s the nitty gritty&rdquo; phase. I didn&rsquo;t happen upon any sessions of the &ldquo;here&rsquo;s how this thing punched me in the face!&rdquo; sort, which is the kind of thing I, personally, want to learn about right now.</p>\n<p><!-- raw HTML omitted -->Getting outside of Rails<!-- raw HTML omitted -->. Beyond SOA, some folks are going off the golden path and finding some success. I attended one good talk on adopting ideas from Domain Driven Design and hexagonal architecture. I found Ernie Miller&rsquo;s ideas about how he&rsquo;s worked with Rails' flaws interesting, even though I often didn&rsquo;t agree.</p>\n<!-- raw HTML omitted -->\n<p>The conference started with David&rsquo;s keynote throwing barbs at the attitude some people display towards TDD (an ambiguous acryonym to start with). Many speakers opened with, in my opinion vapid, jokes about this. Other people seemed to take personal offense that TDD might not be everything. These reactions were, I found, not particularly interesting. The more interesting ones were those who found it as a challenge to consider how they build applications, either through taste and intuition or through reasoning and engineering.</p>\n<p>There&rsquo;s always, at least in conversations I find myself in, some question of where Rails is now. Relative to other technologies, is it a leader, a follower, a player, a has-been? Every year, it&rsquo;s more of a safe assumption that Rails is a given, that it&rsquo;s not going to up and disappear. Still, there&rsquo;s a desire to keep it fresh, avoid stagnation, and above all avoid becoming the demons (J2EE, .NET, PHP, etc.) that people used before Rails. A lot of this discussion seems to be happening around the size and frameworkness of Rails. There has always been pockets of interest around things that are smaller than Rails (like Sinatra, ROM, etc.) More interesting, there is some defense of largeness now, especially in the context of Ember. This is the most interesting, and at times tedious, debate, for me personally.</p>\n<p>The attendance of RailsConf continues to grow more diverse. The inclusiveness efforts of the organizers and community at large seem to be bearing fruit. I saw more ladies and more minorities than I have at any conference of this size. Further, the crowd felt less startup-centric than years past. Plenty of folks from startups, sure, but also people at different kinds of businesses: small, big, hardware, software, commerce, marketing, non-profit, etc. What&rsquo;s more, it was easier than ever to find myself in a conversation with people not entirely like myself. That&rsquo;s a quite good thing.</p>\n<!-- raw HTML omitted -->\n<p>Lots of people are concerned about Rails, its community, and such. There&rsquo;s a vibe, not unlike 2008 or 2009 when some were seeking other ways to build Ruby web apps, that perhaps the framework, the community, and the leaders thereof don&rsquo;t have all the answers. That may sound damning, but it&rsquo;s a pretty healthy attitude. The problems developers face and the way we build our programs are, as ever, changing as we&rsquo;re building them. The tension is out there, but having been through most of a technology hype cycle with Rails, I&rsquo;m not worried that the community won&rsquo;t find the resolution of that tension.</p>\n",
				"content_text": "RailsConf 2014 having wrapped up a few weeks ago, now seems like a good time to try and unpack what I saw, heard, and talked to others about. Bear in mind I skipped RailsConf 2013 (but I've been to all the others), so I may construe something as new that I simply missed last year.\n\nI'm going to break it down, as is my puzzle-solving wont, by technology and people.\n\n<h2>Technology</h2>\n\nLots of people are excited about a few central topics.\n\n<strong>JavaScript</strong>. They want to build ambitious apps, with Ember, Lineman, and other tools. Developers seem somewhat concerned that building apps this way is swimming upstream. Or that it's early days and things are changing quickly. Or they think it's awesome to work in a growing field. It's all of those things.\n\n<strong>Service-oriented Architecture</strong>. I went to talks about extracting services, designing services, implementing authentication/authorization across services, and how to write the client side of your various services. The talks felt like they were past the \"look at this novel thing!\" phase and into the \"well here's the nitty gritty\" phase. I didn't happen upon any sessions of the \"here's how this thing punched me in the face!\" sort, which is the kind of thing I, personally, want to learn about right now.\n\n<strong>Getting outside of Rails</strong>. Beyond SOA, some folks are going off the golden path and finding some success. I attended one good talk on adopting ideas from Domain Driven Design and hexagonal architecture. I found Ernie Miller's ideas about how he's worked with Rails' flaws interesting, even though I often didn't agree.\n\n<h2>People</h2>\n\nThe conference started with David's keynote throwing barbs at the attitude some people display towards TDD (an ambiguous acryonym to start with). Many speakers opened with, in my opinion vapid, jokes about this. Other people seemed to take personal offense that TDD might not be everything. These reactions were, I found, not particularly interesting. The more interesting ones were those who found it as a challenge to consider how they build applications, either through taste and intuition or through reasoning and engineering.\n\nThere's always, at least in conversations I find myself in, some question of where Rails is now. Relative to other technologies, is it a leader, a follower, a player, a has-been? Every year, it's more of a safe assumption that Rails is a given, that it's not going to up and disappear. Still, there's a desire to keep it fresh, avoid stagnation, and above all avoid becoming the demons (J2EE, .NET, PHP, etc.) that people used before Rails. A lot of this discussion seems to be happening around the size and frameworkness of Rails. There has always been pockets of interest around things that are smaller than Rails (like Sinatra, ROM, etc.) More interesting, there is some defense of largeness now, especially in the context of Ember. This is the most interesting, and at times tedious, debate, for me personally.\n\nThe attendance of RailsConf continues to grow more diverse. The inclusiveness efforts of the organizers and community at large seem to be bearing fruit. I saw more ladies and more minorities than I have at any conference of this size. Further, the crowd felt less startup-centric than years past. Plenty of folks from startups, sure, but also people at different kinds of businesses: small, big, hardware, software, commerce, marketing, non-profit, etc. What's more, it was easier than ever to find myself in a conversation with people not entirely like myself. That's a quite good thing.\n\n<hr />\n\nLots of people are concerned about Rails, its community, and such. There's a vibe, not unlike 2008 or 2009 when some were seeking other ways to build Ruby web apps, that perhaps the framework, the community, and the leaders thereof don't have all the answers. That may sound damning, but it's a pretty healthy attitude. The problems developers face and the way we build our programs are, as ever, changing as we're building them. The tension is out there, but having been through most of a technology hype cycle with Rails, I'm not worried that the community won't find the resolution of that tension.\n",
				"date_published": "2014-05-20T09:09:39-07:00",
				"url": "https://therealadam.com/2014/05/20/unpacking-railsconf.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/03/29/a-chunk-of.html",
				"title": "A chunk of paper",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->So I’m in rehearsals for a comedic musical. I love comedy. I&rsquo;m very &ldquo;meh&rdquo; about musicals; I don&rsquo;t know much about them. I like combining familiar and strange things, so it&rsquo;s great so far.</p>\n<p>I carry a big chunk of paper around what has the lines written on it. Some of the pages are typed, some of them are photocopies of the script from the original production in 1995. It&rsquo;s held together with brads. It&rsquo;s completely archaic.</p>\n<p>The director is kind of a &ldquo;most interesting man in the world&rdquo; kind of character. Mixed in with a little bit of the least organized person in the world.</p>\n<p>We have yet to receive the actual music for this musical. We learned the closing song for act one last night. The whole song has fewer than ten words in it.</p>\n<p>Basically, this is the opposite of all the computer things I do and it’s just about perfect.</p>\n",
				"content_text": "<a href=\"http://therealadam.com/wp-content/uploads/2014/03/20140328-172728.jpg\"><img src=\"http://therealadam.com/wp-content/uploads/2014/03/20140328-172728.jpg\" alt=\"20140328-172728.jpg\" class=\"alignnone size-full\" /></a><br /><br />So I’m in rehearsals for a comedic musical. I love comedy. I'm very \"meh\" about musicals; I don't know much about them. I like combining familiar and strange things, so it's great so far.\n\nI carry a big chunk of paper around what has the lines written on it. Some of the pages are typed, some of them are photocopies of the script from the original production in 1995. It's held together with brads. It's completely archaic.\n\nThe director is kind of a \"most interesting man in the world\" kind of character. Mixed in with a little bit of the least organized person in the world.\n\nWe have yet to receive the actual music for this musical. We learned the closing song for act one last night. The whole song has fewer than ten words in it.\n\nBasically, this is the opposite of all the computer things I do and it’s just about perfect.\n",
				"date_published": "2014-03-29T09:41:15-07:00",
				"url": "https://therealadam.com/2014/03/29/a-chunk-of.html",
				"tags": ["Pop Culture","Comedy, haha"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/03/29/businesses-can-empathy.html",
				"title": "Businesses can empathy too",
				"content_html": "<p><!-- raw HTML omitted -->Building an Ethical Business<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The post is about applying empathy to the core values of a business, how it shapes the actions and culture of the institution. But it’s a reminder empathy is about people, and how they experience you, your team, or your employer.</p>\n<p>Follow up reminder: <!-- raw HTML omitted -->empathy is your most important skill<!-- raw HTML omitted -->. I&rsquo;d go further than saying it&rsquo;s a skill; those I&rsquo;ve met with outstanding empathy basically have superpowers.</p>\n",
				"content_text": "<a href=\"http://www.paperplanes.de/2014/3/27/building-an-ethical-business.html\">Building an Ethical Business</a>:\n\n<blockquote>Empathy is sometimes described as a personal trait, but it’s a skill, a skill that can be learned, that can be honed, and that can be instilled as a core value of a company.</blockquote>\n\nThe post is about applying empathy to the core values of a business, how it shapes the actions and culture of the institution. But it’s a reminder empathy is about people, and how they experience you, your team, or your employer.\n\nFollow up reminder: <a href=\"http://chadfowler.com/blog/2014/01/19/empathy/\">empathy is your most important skill</a>. I'd go further than saying it's a skill; those I've met with outstanding empathy basically have superpowers.\n",
				"date_published": "2014-03-29T09:15:22-07:00",
				"url": "https://therealadam.com/2014/03/29/businesses-can-empathy.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/03/28/about-version-numbers.html",
				"title": "About version numbers",
				"content_html": "<p>Conjecture: thinking about releasing software versions to users/partners/the public in dotted version numbers, e.g. &ldquo;1.0, 2.1, 5.3&rdquo; is a symptom of misshaped thinking. This line of thinking seems framed by the notion that only a dozen major versions will ever be released. Certainly, some software works that way: shrink-wrap software, video game consoles, etc.. Most notably, dotted release versions are very useful for software used to build software.</p>\n<p>However, its increasingly true that software doesn&rsquo;t really work until it reaches &ldquo;version&rdquo; two-hundred something. But maybe that&rsquo;s another problematic frame of thinking&hellip;</p>\n",
				"content_text": "Conjecture: thinking about releasing software versions to users/partners/the public in dotted version numbers, e.g. \"1.0, 2.1, 5.3\" is a symptom of misshaped thinking. This line of thinking seems framed by the notion that only a dozen major versions will ever be released. Certainly, some software works that way: shrink-wrap software, video game consoles, etc.. Most notably, dotted release versions are very useful for software used to build software.\n\nHowever, its increasingly true that software doesn't really work until it reaches \"version\" two-hundred something. But maybe that's another problematic frame of thinking...\n",
				"date_published": "2014-03-28T11:54:07-07:00",
				"url": "https://therealadam.com/2014/03/28/about-version-numbers.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/03/27/englishlike-programming-languages.html",
				"title": "English-like programming languages, like, yuck",
				"content_html": "<p>Glenn Vanderburg on <!-- raw HTML omitted -->teaching developer how to use Ruby testing APIs<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve never liked English-like APIs either. Consider that AppleScript is, bizarrely, completely unusable by people who know how to program in <!-- raw HTML omitted -->any <!-- raw HTML omitted -->other programming language.</p>\n<p>If you think unpack &ldquo;It&rsquo;s just English&rdquo; a bit, it&rsquo;s easy to see why you should run away screaming from anything describing itself as being English-like in a good way. English is a human language riddled with inconsistencies. Many, if not most, English speakers learned it when they were young and the brain is almost useless for anything that <!-- raw HTML omitted -->isn&rsquo;t<!-- raw HTML omitted --> language acquisition. Those who have learned English later in life become literate through lots of work, a healthy dose of necessity, and probably several years where their English was good enough for humans to understand but utterly confusing to a computer.</p>\n<p>Just say &ldquo;false&rdquo; to &ldquo;It&rsquo;s just English&rdquo;, coders!</p>\n",
				"content_text": "Glenn Vanderburg on <a href=\"https://gist.github.com/glv/9794089\">teaching developer how to use Ruby testing APIs</a>:\n\n<blockquote>For example: I hate it when APIs (or languages, or whatever) are presented as \"it's just English!\" That doesn't give anyone anything useful to work with; it's just trying to allay fears, and it replaces a mythical danger (the thing people are afraid of simply because it's unknown) with a real danger: you're telling them they don't need to learn anything, when in fact the opposite is true.</blockquote>\n\nI've never liked English-like APIs either. Consider that AppleScript is, bizarrely, completely unusable by people who know how to program in <em>any </em>other programming language.\n\nIf you think unpack \"It's just English\" a bit, it's easy to see why you should run away screaming from anything describing itself as being English-like in a good way. English is a human language riddled with inconsistencies. Many, if not most, English speakers learned it when they were young and the brain is almost useless for anything that <em>isn't</em> language acquisition. Those who have learned English later in life become literate through lots of work, a healthy dose of necessity, and probably several years where their English was good enough for humans to understand but utterly confusing to a computer.\n\nJust say \"false\" to \"It's just English\", coders!\n",
				"date_published": "2014-03-27T09:02:25-07:00",
				"url": "https://therealadam.com/2014/03/27/englishlike-programming-languages.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/03/26/pancake-publishing.html",
				"title": "Pancake publishing",
				"content_html": "<p>I&rsquo;m currently jazzed by the idea of <!-- raw HTML omitted -->full stack writing<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>All the pancakes.<!-- raw HTML omitted --></p>\n<p>Love the breakfast food metaphor! Hi&rsquo;s tools and community integration seem pretty nifty. That said, the break down of inspire, capture, write, converse is what I can&rsquo;t get out of my head. I don&rsquo;t think you need special tools to approach it with that breakdown. WordPress, Jekyll, Medium, whatever. Always be writing, publish small ideas frequently (a thing I need to do more often!), develop the ideas that stick in your head or that lead to great conversations, repeat. Don&rsquo;t let the layout of your blog template or the name of the tool limit your writing. It&rsquo;s an easy mental trap to fall for!</p>\n",
				"content_text": "I'm currently jazzed by the idea of <a href=\"https://hi.co/moments/q4oi5i68\">full stack writing</a>:\n\n<blockquote>Hi is what we call a “full stack” writing and publishing platform. Just what is a writing stack? Capture. Write. Publish. is our summary of it, but really it breaks down into five parts:\n<ul>\n    <li>Sudden inspiration!</li>\n    <li>Capture</li>\n    <li>Draft</li>\n    <li>Publish</li>\n    <li>Converse</li>\n</ul>\nSome platforms provide tools for parts of the stack. Hi gives you tools for the full stack.\n\nAll the pancakes.</blockquote>\n\nLove the breakfast food metaphor! Hi's tools and community integration seem pretty nifty. That said, the break down of inspire, capture, write, converse is what I can't get out of my head. I don't think you need special tools to approach it with that breakdown. WordPress, Jekyll, Medium, whatever. Always be writing, publish small ideas frequently (a thing I need to do more often!), develop the ideas that stick in your head or that lead to great conversations, repeat. Don't let the layout of your blog template or the name of the tool limit your writing. It's an easy mental trap to fall for!\n",
				"date_published": "2014-03-26T13:42:39-07:00",
				"url": "https://therealadam.com/2014/03/26/pancake-publishing.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/02/27/find-your-principles.html",
				"title": "Find your principles for editing programs",
				"content_html": "<p>Some folks from GitHub sprung the <!-- raw HTML omitted -->Atom text editor<!-- raw HTML omitted --> on the internet yesterday. Releasing a product into a market defined by saturation, settling for brokenness, and zero-cost alternatives is a bold move. I applaud them for jumping into it. I’m eager to see where they end up, both product-wise and technically.</p>\n<p>If you’re wondering whether Atom is the right thing for you, it might help you to know I went through a sort of quest several years ago to decide what was vital to me when editing text:</p>\n<!-- raw HTML omitted -->\n<p>Writing these, thinking deeply about the kinds of problems I did and did not want to solve with my text editor and what that meant for my workflow, was exciting. I learned a lot about finding my own principles.</p>\n<p>I ended up, to my great surprise, choosing Vim. Most importantly, that decision stuck. I haven’t gazed upon the possibly greener grasses of other text editors since I committed to my principles and workflow. Whether it turns out Atom is your thing or not, thinking about the principles of how you want to work with computer programs is a thing you might benefit from.</p>\n",
				"content_text": "Some folks from GitHub sprung the <a href=\"https://atom.io\">Atom text editor</a> on the internet yesterday. Releasing a product into a market defined by saturation, settling for brokenness, and zero-cost alternatives is a bold move. I applaud them for jumping into it. I’m eager to see where they end up, both product-wise and technically.\n\nIf you’re wondering whether Atom is the right thing for you, it might help you to know I went through a sort of quest several years ago to decide what was vital to me when editing text:\n\n<ul>\n    <li><a href=\"http://therealadam.com/2010/04/26/those-who-think-with-their-fingers/\">Those Who Think With Their Fingers</a></li>\n    <li><a href=\"http://therealadam.com/2010/05/12/a-brief-survey-of-the-history-of-editing-programs/\">A Brief Survey of the History of Editing Programs</a></li>\n    <li><a href=\"http://therealadam.com/2010/06/28/the-cadence-and-flow-of-editing-programs/\">The Cadence and Flow of Editing Programs</a></li>\n    <li><a href=\"http://therealadam.com/2010/05/23/a-personal-journey-in-editing-programs/\">A Personal Journey in Editing Programs</a></li>\n    <li><a href=\"http://therealadam.com/2010/06/22/breaking-my-habits-for-editing-programs/\">Breaking My Habits For Editing Programs</a></li>\n</ul>\n\nWriting these, thinking deeply about the kinds of problems I did and did not want to solve with my text editor and what that meant for my workflow, was exciting. I learned a lot about finding my own principles.\n\nI ended up, to my great surprise, choosing Vim. Most importantly, that decision stuck. I haven’t gazed upon the possibly greener grasses of other text editors since I committed to my principles and workflow. Whether it turns out Atom is your thing or not, thinking about the principles of how you want to work with computer programs is a thing you might benefit from.\n",
				"date_published": "2014-02-27T09:57:51-07:00",
				"url": "https://therealadam.com/2014/02/27/find-your-principles.html",
				"tags": ["Uncategorized","on-editing-programs"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/02/26/counterpoint-rails-and.html",
				"title": "Counterpoint: Rails and instance variables",
				"content_html": "<p>A great thing about writing is that it focuses and sharpens one’s thoughts. The great thing about writing in public is that your thoughts, when passed through the brains of others, sometimes yield even better thoughts. The greatest thing about writing is when you hit publish feeling confident about your position and end up with your opinion flipped once the conversation is over.</p>\n<p>So it went with <!-- raw HTML omitted -->A tale of two Rails view<!-- raw HTML omitted --> that a few hours after I’d published it, my mind was changed.</p>\n<p>On the one hand, you can take a <!-- raw HTML omitted -->permissive stance on views<!-- raw HTML omitted --> and ivars. <!-- raw HTML omitted -->Dave Copeland nicely laid this idea out<!-- raw HTML omitted -->. If you are <!-- raw HTML omitted -->responsible<!-- raw HTML omitted --> about minimizing sharing ivars between actions and views, you have a chance. In this case, that means sharing one or two ivars, no more. Placing a little trust in your fellow developers lets you put off the day when you need to isolate state behind helper methods or other restrictive abstractions.</p>\n<p>On the other hand, you can take a <!-- raw HTML omitted -->contractual stance on views<!-- raw HTML omitted --> and require all data passing between actions and view to do so through a specific object. Tony Pitale’s <!-- raw HTML omitted -->SimplestView<!-- raw HTML omitted --> does just this. It unifies views and partials into one name, “templates”, and then provides backing objects (somewhat confusingly called views). Actions create the backing objects and templates consume them. Nothing can leak through, no hunting down the origin of an ivar needed in this template but not yet defined in that one.</p>\n<p>Somewhere in the middle are ideas about building a bridge between the action and the view. One could use <!-- raw HTML omitted -->responds_with<!-- raw HTML omitted --> as said bridge, but, for me, that felt like it played better with APIs than traditional views<!-- raw HTML omitted -->[1]<!-- raw HTML omitted -->. A possible middle ground is to use something like <!-- raw HTML omitted -->decent_exposure<!-- raw HTML omitted -->, or this <!-- raw HTML omitted -->interesting spin on it by Nathan Ladd<!-- raw HTML omitted -->. I like that Nathan’s approach is basically sugar over the pattern of encapsulating action state behind controller helper methods which are shared between views. I’ve been using the helper method approach so far, but it’s a little awkward to test and confusing for those used to sharing ivars.</p>\n<p>If you’re sick of the baby <!-- raw HTML omitted -->and<!-- raw HTML omitted --> the bath water, you might find a more extreme approach interesting. <!-- raw HTML omitted -->Focused Controller<!-- raw HTML omitted --> and <!-- raw HTML omitted -->poniard<!-- raw HTML omitted --> do away with Rails conventions entirely. You still write controllers, but how you load data and model actions is entirely different. Personally, these are interesting sources of ideas. I’m not sure I’d jump on them for a production application.</p>\n<p>Of all these approaches, I’m most intrigued by SimplestView. It seems like the Minimum Viable Departure from Rails conventions that could possibly solve the problem of sharing state and defining a contract on that state. That said, I’m likely to try Dave Copeland’s approach first. I like that it’s about talking with teammates, reviewing each other’s work, and making smart decisions. <!-- raw HTML omitted -->I’m finding that no amount of framework is as good at helping people write good code as review, feedback, and iteration.<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "A great thing about writing is that it focuses and sharpens one’s thoughts. The great thing about writing in public is that your thoughts, when passed through the brains of others, sometimes yield even better thoughts. The greatest thing about writing is when you hit publish feeling confident about your position and end up with your opinion flipped once the conversation is over.\n\nSo it went with <a href=\"http://therealadam.com/2014/02/09/a-tale-of-two-rails-views/\">A tale of two Rails view</a> that a few hours after I’d published it, my mind was changed.\n\nOn the one hand, you can take a <strong>permissive stance on views</strong> and ivars. <a href=\"http://www.naildrivin5.com/blog/2014/02/09/a-defense-of-ivars-in-rails-controllers.html\">Dave Copeland nicely laid this idea out</a>. If you are <em>responsible</em> about minimizing sharing ivars between actions and views, you have a chance. In this case, that means sharing one or two ivars, no more. Placing a little trust in your fellow developers lets you put off the day when you need to isolate state behind helper methods or other restrictive abstractions.\n\nOn the other hand, you can take a <strong>contractual stance on views</strong> and require all data passing between actions and view to do so through a specific object. Tony Pitale’s <a href=\"http://growingdevs.com/refactoring-rails-views-with-simplest-view.html\">SimplestView</a> does just this. It unifies views and partials into one name, “templates”, and then provides backing objects (somewhat confusingly called views). Actions create the backing objects and templates consume them. Nothing can leak through, no hunting down the origin of an ivar needed in this template but not yet defined in that one.\n\nSomewhere in the middle are ideas about building a bridge between the action and the view. One could use <code>responds_with</code> as said bridge, but, for me, that felt like it played better with APIs than traditional views<a class=\"footnote\" id=\"fnref-1\" title=\"see footnote\" href=\"1\">[1]</a>. A possible middle ground is to use something like <a href=\"http://decentexposure.info\">decent_exposure</a>, or this <a href=\"https://gist.github.com/ntl/8904880\">interesting spin on it by Nathan Ladd</a>. I like that Nathan’s approach is basically sugar over the pattern of encapsulating action state behind controller helper methods which are shared between views. I’ve been using the helper method approach so far, but it’s a little awkward to test and confusing for those used to sharing ivars.\n\nIf you’re sick of the baby <em>and</em> the bath water, you might find a more extreme approach interesting. <a href=\"https://github.com/jonleighton/focused_controller\">Focused Controller</a> and <a href=\"https://github.com/xaviershay/poniard\">poniard</a> do away with Rails conventions entirely. You still write controllers, but how you load data and model actions is entirely different. Personally, these are interesting sources of ideas. I’m not sure I’d jump on them for a production application.\n\nOf all these approaches, I’m most intrigued by SimplestView. It seems like the Minimum Viable Departure from Rails conventions that could possibly solve the problem of sharing state and defining a contract on that state. That said, I’m likely to try Dave Copeland’s approach first. I like that it’s about talking with teammates, reviewing each other’s work, and making smart decisions. <strong>I’m finding that no amount of framework is as good at helping people write good code as review, feedback, and iteration.</strong>\n\n<div class=\"footnotes\">\n\n<hr />\n\n<ol>\n    <li id=\"fn-1\">I know it <em>works</em> with normal views, but I didn’t like that it nudged me down the path of using conditionals. YMMV. <a class=\"reversefootnote\" title=\"return to article\" href=\"1\"> ↩</a></li>\n</ol>\n</div>\n",
				"date_published": "2014-02-26T10:06:38-07:00",
				"url": "https://therealadam.com/2014/02/26/counterpoint-rails-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/02/09/a-tale-of.html",
				"title": "A tale of two Rails views",
				"content_html": "<p>Why do I prefer to avoid referencing instance variables in view?</p>\n<p>I needed to clarify this personal principle to a teammate recently. It was one of those things I&rsquo;ve internalized so strongly that it was initially difficult for me to do so; one of those things that have become so true to me that teaching someone else about it requires getting past the &ldquo;well, obviously it&rsquo;s the best, that&rsquo;s why&rdquo; phase of mental tantrum.</p>\n<!-- raw HTML omitted -->\n<p>An entirely made-up, possibly oversimplified Rails view fragment:</p>\n<!-- raw HTML omitted -->\n<p>This is a by-the-book Rails view. Set an ivar in an action, use it in views (and helpers), you&rsquo;re done, get back to thinking about building product.</p>\n<p>It&rsquo;s easy to iterate with this. It&rsquo;s easy to see data &ldquo;passed&rdquo;<!-- raw HTML omitted --><!-- raw HTML omitted -->1<!-- raw HTML omitted --><!-- raw HTML omitted --> into the view by scanning for the <!-- raw HTML omitted -->@<!-- raw HTML omitted --> sigil; your editor probably does this already. It&rsquo;s easy to move markup around in templates with a simple cut-paste.</p>\n<p>If you stick with ivars long enough, you&rsquo;re going to end up with two kinds of misadventures.</p>\n<p>Most commonly, you&rsquo;ll wonder why <!-- raw HTML omitted -->@user<!-- raw HTML omitted --> is nil for some view or edge case. Maybe you forgot a filter or didn&rsquo;t set it in an action? Backend developers are sometimes equipped with the curiosity and knowledge to fix this themselves. For front-end developers or those new to the system, this kind of error is basically &ldquo;womp-womp sad music go interrupt someone who can help you&rdquo;.</p>\n<p>This leads to the second misadventure: where did this <!-- raw HTML omitted -->@user<!-- raw HTML omitted --> thing come from<!-- raw HTML omitted --><!-- raw HTML omitted -->2<!-- raw HTML omitted --><!-- raw HTML omitted -->? Maybe it was set in a helper, or a filter, or an action? Well now you&rsquo;ve painted yourself into a weak spot of a language like Ruby. Your tools probably can&rsquo;t point you directly at the line of code where a variable came into being. You can do some clever grep&rsquo;ing around<!-- raw HTML omitted --><!-- raw HTML omitted -->3<!-- raw HTML omitted --><!-- raw HTML omitted -->, probably. At best, you know the system well enough to get to the right file and find it, or there&rsquo;s some convention you can use to intuit where it might be set.</p>\n<!-- raw HTML omitted -->\n<p>Of course this way is better, right?</p>\n<!-- raw HTML omitted -->\n<p>Well, not initially. Already you have to pick a good name for a method because you&rsquo;re probably going to use it all over the place. Then you have to find a good place to put that method: on a helper method? on a helper object? on a model?, i.e. now you&rsquo;re making decisions, which is a thing Rails tries to shield you from wherever possible. Personally, I find naming things quite entertaining and hardly one of the hardest problems in computer science<!-- raw HTML omitted --><!-- raw HTML omitted -->4<!-- raw HTML omitted --><!-- raw HTML omitted -->.</p>\n<p>A marginal benefit comes from reducing the entry points that the name <!-- raw HTML omitted -->current_user<!-- raw HTML omitted --> came to be a thing in this view: it&rsquo;s a method name, a local variable, or a view-local variable passed into the template<!-- raw HTML omitted --><!-- raw HTML omitted -->5<!-- raw HTML omitted --><!-- raw HTML omitted -->. Thus the search space for &ldquo;where did this thing come from&rdquo; is way smaller for typical Rails templates and manageably smaller for unreasonable Rails templates.</p>\n<p>This way pays off once the application gets past the point where new code tidily fits into models, views, controllers, or helpers. At that point, you need objects, messages, and experience at building with objects and messages (successes, stalemates, and abject failures)<!-- raw HTML omitted --><!-- raw HTML omitted -->6<!-- raw HTML omitted --><!-- raw HTML omitted -->. If you&rsquo;re competent at messages (i.e. method calls) in Ruby, you can at this point experience a &ldquo;this is Unix, I know this!&quot;<!-- raw HTML omitted --><!-- raw HTML omitted -->7<!-- raw HTML omitted --><!-- raw HTML omitted --> moment and work with this method call like you would any other method/function invocation in a computer program.</p>\n<p>Making this investment into a method call yields another long-term benefit: simplicity in experimentation and testing<!-- raw HTML omitted --><!-- raw HTML omitted -->8<!-- raw HTML omitted --><!-- raw HTML omitted -->. I can poke at helper methods and helper objects in a Rails console without breaking a sweat. If that feedback loop doesn&rsquo;t get the job done, I can write tests against helpers and (some) controller methods to iterate on figuring out why something doesn&rsquo;t work the way I think it should.</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s amazing that blogging about programming is so popular. Programming involves a lot of tradeoffs. Tradeoffs make for wordy articles that don&rsquo;t leave you thinking &ldquo;yeah, those other guys are SOOOO WRONG&rdquo; or &ldquo;YEAHHHH I&rsquo;m so right&rdquo;.</p>\n<p>If I&rsquo;ve written this properly, hopefully you felt both of those feelings. Maybe you reminisced about a day when you thought view ivars were great and then regretted it. Perhaps it&rsquo;s easier to see why you&rsquo;d start an app or feature off using ivars and then refactor them to method calls later.</p>\n<p>With instance variables in views, as with many other grey areas of Rails, the most useful long view is this: <!-- raw HTML omitted -->you&rsquo;re always right, and you&rsquo;re always wrong, it just depends on which &ldquo;you&rdquo; (past you, present you, legacy project you, greenfield project you) is being observed<!-- raw HTML omitted -->.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "Why do I prefer to avoid referencing instance variables in view?\n\nI needed to clarify this personal principle to a teammate recently. It was one of those things I've internalized so strongly that it was initially difficult for me to do so; one of those things that have become so true to me that teaching someone else about it requires getting past the \"well, obviously it's the best, that's why\" phase of mental tantrum.\n\n<hr />\n\nAn entirely made-up, possibly oversimplified Rails view fragment:\n\n<pre>&lt;p&gt;Hi, my name is &lt;%= @user.name %&gt;&lt;/p&gt;</pre>\n\nThis is a by-the-book Rails view. Set an ivar in an action, use it in views (and helpers), you're done, get back to thinking about building product.\n\nIt's easy to iterate with this. It's easy to see data \"passed\"<sup id=\"fnref-3345-1\"><a href=\"#fn-3345-1\" rel=\"footnote\">1</a></sup> into the view by scanning for the <code>@</code> sigil; your editor probably does this already. It's easy to move markup around in templates with a simple cut-paste.\n\nIf you stick with ivars long enough, you're going to end up with two kinds of misadventures.\n\nMost commonly, you'll wonder why <code>@user</code> is nil for some view or edge case. Maybe you forgot a filter or didn't set it in an action? Backend developers are sometimes equipped with the curiosity and knowledge to fix this themselves. For front-end developers or those new to the system, this kind of error is basically \"womp-womp sad music go interrupt someone who can help you\".\n\nThis leads to the second misadventure: where did this <code>@user</code> thing come from<sup id=\"fnref-3345-2\"><a href=\"#fn-3345-2\" rel=\"footnote\">2</a></sup>? Maybe it was set in a helper, or a filter, or an action? Well now you've painted yourself into a weak spot of a language like Ruby. Your tools probably can't point you directly at the line of code where a variable came into being. You can do some clever grep'ing around<sup id=\"fnref-3345-3\"><a href=\"#fn-3345-3\" rel=\"footnote\">3</a></sup>, probably. At best, you know the system well enough to get to the right file and find it, or there's some convention you can use to intuit where it might be set.\n\n<hr />\n\nOf course this way is better, right?\n\n<pre>&lt;p&gt;Hi, my name is &lt;%= current_user.name %&gt;&lt;/p&gt;</pre>\n\nWell, not initially. Already you have to pick a good name for a method because you're probably going to use it all over the place. Then you have to find a good place to put that method: on a helper method? on a helper object? on a model?, i.e. now you're making decisions, which is a thing Rails tries to shield you from wherever possible. Personally, I find naming things quite entertaining and hardly one of the hardest problems in computer science<sup id=\"fnref-3345-4\"><a href=\"#fn-3345-4\" rel=\"footnote\">4</a></sup>.\n\nA marginal benefit comes from reducing the entry points that the name <code>current_user</code> came to be a thing in this view: it's a method name, a local variable, or a view-local variable passed into the template<sup id=\"fnref-3345-7\"><a href=\"#fn-3345-7\" rel=\"footnote\">5</a></sup>. Thus the search space for \"where did this thing come from\" is way smaller for typical Rails templates and manageably smaller for unreasonable Rails templates.\n\nThis way pays off once the application gets past the point where new code tidily fits into models, views, controllers, or helpers. At that point, you need objects, messages, and experience at building with objects and messages (successes, stalemates, and abject failures)<sup id=\"fnref-3345-5\"><a href=\"#fn-3345-5\" rel=\"footnote\">6</a></sup>. If you're competent at messages (i.e. method calls) in Ruby, you can at this point experience a \"this is Unix, I know this!\"<sup id=\"fnref-3345-6\"><a href=\"#fn-3345-6\" rel=\"footnote\">7</a></sup> moment and work with this method call like you would any other method/function invocation in a computer program.\n\nMaking this investment into a method call yields another long-term benefit: simplicity in experimentation and testing<sup id=\"fnref-3345-8\"><a href=\"#fn-3345-8\" rel=\"footnote\">8</a></sup>. I can poke at helper methods and helper objects in a Rails console without breaking a sweat. If that feedback loop doesn't get the job done, I can write tests against helpers and (some) controller methods to iterate on figuring out why something doesn't work the way I think it should.\n\n<hr />\n\nIt's amazing that blogging about programming is so popular. Programming involves a lot of tradeoffs. Tradeoffs make for wordy articles that don't leave you thinking \"yeah, those other guys are SOOOO WRONG\" or \"YEAHHHH I'm so right\".\n\nIf I've written this properly, hopefully you felt both of those feelings. Maybe you reminisced about a day when you thought view ivars were great and then regretted it. Perhaps it's easier to see why you'd start an app or feature off using ivars and then refactor them to method calls later.\n\nWith instance variables in views, as with many other grey areas of Rails, the most useful long view is this: <em>you're always right, and you're always wrong, it just depends on which \"you\" (past you, present you, legacy project you, greenfield project you) is being observed</em>.\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn-3345-1\">\nI'm not using \"passed\" as scare quotes here. Rails' choice to take ivars from actions and teleport them into views is oft villified, but I find it more useful to think of them as something that just is. They are incredibly useful at first, but some developers will long for an explicit contract (i.e. a parameter list) between action and view.&#160;<a href=\"#fnref-3345-1\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-2\">\nIf you're an object design enthusiast, functional programming aficionado, or Rails contrarian you may be crafting an amazing retort about sharing state in weird ways at this point. Please review the previous footnote. Yes, you're basically right. No, that's not going to change how Rails works.&#160;<a href=\"#fnref-3345-2\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-3\">\nRegexes, two problems, etc.&#160;<a href=\"#fnref-3345-3\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-4\">\nActual hard problems in computer science: systems connected by unreliable (i.e. any) network, laws and regulations written by humans, working with money.&#160;<a href=\"#fnref-3345-4\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-7\">\nWhen it comes to variables in Rails templates, a short guide by Adam Keys; method names: friend, ivars: foe, local variables: foe, view-local variables (passed via <code>render</code> explicitly or by the framework): both!&#160;<a href=\"#fnref-3345-7\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-5\">\nThis is the concise version of a seems-really-important-to-me idea I need to express in more words. Remind me to write this, should I forget about it, internet!&#160;<a href=\"#fnref-3345-5\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-6\">\nWhat up, <a href=\"http://www.imdb.com/name/nm0000611/?ref_=tt_cl_t8\">Ariana Richards</a>?&#160;<a href=\"#fnref-3345-6\" rev=\"footnote\">&#8617;</a>\n</li>\n\n<li id=\"fn-3345-8\">\nYou knew the testing thing was coming, didn't you? I mean it's like Chekov said about guns in stories: if method calls are mentioned in the first act, you have to mention TDD in the last act. If you headdesk'd, consider that you might be annoyed by TDD because you keep giving yourself a head injury when it's mentioned.&#160;<a href=\"#fnref-3345-8\" rev=\"footnote\">&#8617;</a>\n</li>\n\n</ol>\n</div>\n",
				"date_published": "2014-02-09T09:42:15-07:00",
				"url": "https://therealadam.com/2014/02/09/a-tale-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/01/28/rockets-and-startups.html",
				"title": "Rockets and startups",
				"content_html": "<p>A venture-funded startup is sort of like a space program. Space programs don&rsquo;t build airplanes that fly in flat, predictable, safe trajectories. They shouldn&rsquo;t be concerned with doing something pedestrian. Space programs should be concerned with doing something very unusual, perhaps unnatural.</p>\n<p>Like a space program, a funded startup is equal parts propaganda and collection of great minds. During the first few rounds of financing, a startup is completely unlike an actual business. It&rsquo;s all growth: technical growth, metrics growth, mindshare growth, operational growth, staff growth. It&rsquo;s about gathering smart, driven people and making something new without the confines of traditional market forces. It&rsquo;s about showing that new thing off to the world, making everyone think that they either really need to have it or that they&rsquo;re behind in the race to make something like it.</p>\n<p>Startups, like space programs, take a bunch of volatile materials and apply them to make an impossible climb. Quite often, those materials explode on the pad or in the first couple minutes of flight. Sometimes all the systems work together, months of effort by teams coordinated by a few masterminds, and the startup or spaceship gets off the ground.</p>\n<p>Even if the startup or spaceship survives it&rsquo;s first minutes, most of it is discarded as it ascends. A Saturn V weighed millions of pounds on the launch pad; what returns to Earth weight thousands of pounds in the end. Systems are built, used, and discarded many times over. Depending on a startup&rsquo;s exit, what remains is only one of many ideas or systems built over time, sometimes an idea expressed in the heads of a few key people.</p>\n<p>Space programs are great. Startups are great. Keep in mind that they are wholly unlike more commonplace human endeavors and you&rsquo;ll be fine.</p>\n",
				"content_text": "A venture-funded startup is sort of like a space program. Space programs don't build airplanes that fly in flat, predictable, safe trajectories. They shouldn't be concerned with doing something pedestrian. Space programs should be concerned with doing something very unusual, perhaps unnatural.\n\nLike a space program, a funded startup is equal parts propaganda and collection of great minds. During the first few rounds of financing, a startup is completely unlike an actual business. It's all growth: technical growth, metrics growth, mindshare growth, operational growth, staff growth. It's about gathering smart, driven people and making something new without the confines of traditional market forces. It's about showing that new thing off to the world, making everyone think that they either really need to have it or that they're behind in the race to make something like it.\n\nStartups, like space programs, take a bunch of volatile materials and apply them to make an impossible climb. Quite often, those materials explode on the pad or in the first couple minutes of flight. Sometimes all the systems work together, months of effort by teams coordinated by a few masterminds, and the startup or spaceship gets off the ground.\n\nEven if the startup or spaceship survives it's first minutes, most of it is discarded as it ascends. A Saturn V weighed millions of pounds on the launch pad; what returns to Earth weight thousands of pounds in the end. Systems are built, used, and discarded many times over. Depending on a startup's exit, what remains is only one of many ideas or systems built over time, sometimes an idea expressed in the heads of a few key people.\n\nSpace programs are great. Startups are great. Keep in mind that they are wholly unlike more commonplace human endeavors and you'll be fine.\n",
				"date_published": "2014-01-28T17:20:43-07:00",
				"url": "https://therealadam.com/2014/01/28/rockets-and-startups.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/01/18/grow-and-cultivate.html",
				"title": "Grow and cultivate",
				"content_html": "<p>Adding new functionality to software is really exciting. I love poking around the edges of a system, figuring out what&rsquo;s going on, and looking for that &ldquo;obvious&rdquo; place where the first change should happen. But sometimes, it&rsquo;s hard to know if I&rsquo;m making the right change. <!-- raw HTML omitted -->How Should This Work?<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Even if you code test first, you can make a mess of a system. What you end up with is a system that moves from local maximum to local maximum while the time of the test suite grows unbounded. There are worse things that could happen, but no one&rsquo;s going to jot this one down as a &ldquo;best practice&rdquo; either.</p>\n<p>The counterforce to this temptation is the red-green-refactor cycle. Look at how the system works and figure out how the next bit of work might change how the system works. Refactor to simplify the act of making a change, or make the change and refactor afterwards to a better design.</p>\n<p>Software can grow by accretion, but it stays malleable when the team culture is one that balances continuous growth with continuous cultivation of good design.</p>\n",
				"content_text": "Adding new functionality to software is really exciting. I love poking around the edges of a system, figuring out what's going on, and looking for that \"obvious\" place where the first change should happen. But sometimes, it's hard to know if I'm making the right change. <a href=\"http://blog.codeclimate.com/blog/2014/01/16/how-should-this-work-an-object-design-epiphany/?utm_source=Code+Climate&amp;utm_campaign=dba51ff382-newsletter-AA-2014-01-15&amp;utm_medium=email&amp;utm_term=0_672a7f5529-dba51ff382-307389705\">How Should This Work?</a>\n\n<blockquote>\n  The temptation when changing an existing system is to implement the desired behavior within the structure of the current abstractions. Repeat this without adjustment, and you’ll quickly end up contorting existing concepts or working around legacy behaviors. Conditionals pile up, and shotgun surgery becomes standard operating procedure.\n</blockquote>\n\nEven if you code test first, you can make a mess of a system. What you end up with is a system that moves from local maximum to local maximum while the time of the test suite grows unbounded. There are worse things that could happen, but no one's going to jot this one down as a \"best practice\" either.\n\nThe counterforce to this temptation is the red-green-refactor cycle. Look at how the system works and figure out how the next bit of work might change how the system works. Refactor to simplify the act of making a change, or make the change and refactor afterwards to a better design.\n\nSoftware can grow by accretion, but it stays malleable when the team culture is one that balances continuous growth with continuous cultivation of good design.\n",
				"date_published": "2014-01-18T16:41:29-07:00",
				"url": "https://therealadam.com/2014/01/18/grow-and-cultivate.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/01/03/currently-provoking-my.html",
				"title": "Currently provoking my thought",
				"content_html": "<p><!-- raw HTML omitted -->The worst NFL announcers, by the numbers<!-- raw HTML omitted --> (via <!-- raw HTML omitted -->Kottke<!-- raw HTML omitted -->). Obviously, this is my jam. To my surprise, Phil Simms didn&rsquo;t come in last. Simms is a real conundrum; I think he&rsquo;s great on <!-- raw HTML omitted -->Inside the NFL<!-- raw HTML omitted -->, but on live TV he shows frequent ignorance of how NFL games work. <!-- raw HTML omitted -->Apparently a lot of people don&rsquo;t like Aikman as an announcer; I think he&rsquo;s tolerable. I&rsquo;m surprised Daryl Johnston&rsquo;s FOX team didn&rsquo;t show well; I guess Siragusa brings them down something awful.<!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->Mapping Place Pins<!-- raw HTML omitted -->. The extended story of how the city guide feature on Pinterest came to be. Having worked on the edges of stuff like this in my Gowalla days, this was an intriguing read. Even if you haven&rsquo;t worked on a location product, stick around and read it for the behind-the-scenes details and the loving treatment of how an idea becomes a product.</p>\n<p><!-- raw HTML omitted -->Architecture and Agility: Married, Divorced, or Just Good Friends?<!-- raw HTML omitted --> It starts here&hellip;</p>\n<!-- raw HTML omitted -->\n<p>&hellip;and ends with thinking about the intersection of making things, designing things, and working with people in a different way: holistically. People don&rsquo;t write great code on schedule because of architecture and process. Architecture and process are what help people learn and create faster. Once a team is learning quickly and creating effectively, <!-- raw HTML omitted -->then<!-- raw HTML omitted --> they can write great code and ship it predictably.</p>\n",
				"content_text": "<a href=\"http://www.sportsonearth.com/article/66008790\">The worst NFL announcers, by the numbers</a> (via <a href=\"http://kottke.org/13/12/the-best-and-worst-nfl-announcers\">Kottke</a>). Obviously, this is my jam. To my surprise, Phil Simms didn't come in last. Simms is a real conundrum; I think he's great on <em>Inside the NFL</em>, but on live TV he shows frequent ignorance of how NFL games work. <span style=\"line-height:1.55;\">Apparently a lot of people don't like Aikman as an announcer; I think he's tolerable. I'm surprised Daryl Johnston's FOX team didn't show well; I guess Siragusa brings them down something awful.</span>\n\n<a href=\"http://creative.pinterest.com/features/place-pins/\">Mapping Place Pins</a>. The extended story of how the city guide feature on Pinterest came to be. Having worked on the edges of stuff like this in my Gowalla days, this was an intriguing read. Even if you haven't worked on a location product, stick around and read it for the behind-the-scenes details and the loving treatment of how an idea becomes a product.\n\n<a href=\"http://www.infoq.com/articles/architecture-and-agility-good-friends\">Architecture and Agility: Married, Divorced, or Just Good Friends?</a> It starts here...\n\n<blockquote>Does agile development need architecture? Does architecture need agile development? Is it possible to even answer these questions without a polarizing debate typified more by caricature and entrenched cultural views than by clear definitions and open reasoning—a debate more closely resembling two monologues streaming past each other than a dialogue?</blockquote>\n\n...and ends with thinking about the intersection of making things, designing things, and working with people in a different way: holistically. People don't write great code on schedule because of architecture and process. Architecture and process are what help people learn and create faster. Once a team is learning quickly and creating effectively, <em>then</em> they can write great code and ship it predictably.\n",
				"date_published": "2014-01-03T08:21:35-07:00",
				"url": "https://therealadam.com/2014/01/03/currently-provoking-my.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2014/01/01/stop-me-if.html",
				"title": "Stop me if you've heard this one",
				"content_html": "<p>Lately, I find myself stopping to make sure I haven&rsquo;t previously written the thing I&rsquo;m currently writing. For starters, I have a horrible method for moving things out of my &ldquo;I should finish this idea&rdquo; folder into the &ldquo;I wrote about this idea!&rdquo; folder. It doesn&rsquo;t help that I often draft articles in my head while I run, shower, or do chores and then forget that I had the thought. It&rsquo;s kind of a mess in here.</p>\n<p>Assuming that I slip up and write the idea down twice, hopefully it&rsquo;s in a way that doesn&rsquo;t look like I&rsquo;m plagiarizing myself. Is it weird to write about the same thing multiple times, if it&rsquo;s nearly the same idea?</p>\n<p>I hate repeating myself, telling the same stories over and over.  &ldquo;Have I told you this one before?&rdquo; is a frequent prologue to great stories. But is it necessary? Hearing a mediocre story twice is slightly painful, but hearing a great story twice is no chore at all.</p>\n<p>If I keep writing an idea, coming back to it, maybe there&rsquo;s something important there? Perhaps it&rsquo;s still bouncing around in my brain for a reason. I haven&rsquo;t fully wrapped my head around it, or articulated the idea in a way I find satisfying and essential.</p>\n<p>This is a personal website; the line between &ldquo;just play the hits&rdquo; and &ldquo;stop trying to make fetch happen&rdquo; doesn&rsquo;t have to be so strong here as it would on, say, the New York Times. So, stop me if I write about an idea so much I run it into the ground. It&rsquo;s just that I&rsquo;m trying to get it out of my head in the right way.</p>\n",
				"content_text": "Lately, I find myself stopping to make sure I haven't previously written the thing I'm currently writing. For starters, I have a horrible method for moving things out of my \"I should finish this idea\" folder into the \"I wrote about this idea!\" folder. It doesn't help that I often draft articles in my head while I run, shower, or do chores and then forget that I had the thought. It's kind of a mess in here.\n\nAssuming that I slip up and write the idea down twice, hopefully it's in a way that doesn't look like I'm plagiarizing myself. Is it weird to write about the same thing multiple times, if it's nearly the same idea?\n\nI hate repeating myself, telling the same stories over and over.  \"Have I told you this one before?\" is a frequent prologue to great stories. But is it necessary? Hearing a mediocre story twice is slightly painful, but hearing a great story twice is no chore at all.\n\nIf I keep writing an idea, coming back to it, maybe there's something important there? Perhaps it's still bouncing around in my brain for a reason. I haven't fully wrapped my head around it, or articulated the idea in a way I find satisfying and essential.\n\nThis is a personal website; the line between \"just play the hits\" and \"stop trying to make fetch happen\" doesn't have to be so strong here as it would on, say, the New York Times. So, stop me if I write about an idea so much I run it into the ground. It's just that I'm trying to get it out of my head in the right way.\n",
				"date_published": "2014-01-01T08:58:03-07:00",
				"url": "https://therealadam.com/2014/01/01/stop-me-if.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/30/the-joy-of.html",
				"title": "The joy of finishing",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote>Then, the finish. Stain. Wipe. Wait. Stain. Wipe. Wait. Sand. Wipe. Stain. Wipe. Wait. Check. Seal. Wait. Sand. Wipe. Seal. Wait. Sand. Seal. Wait. And that's if everything goes according to plan.</blockquote>\n<a href=\"http://orderedlist.com/blog/finishing/\">Finishing</a>. It's about woodworking. Or everything.  Or sometimes an essay about furniture is just an essay about furniture.\n",
				"date_published": "2013-12-30T12:06:17-07:00",
				"url": "https://therealadam.com/2013/12/30/the-joy-of.html",
				"tags": ["Uncategorized","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/29/let-the-right.html",
				"title": "Let the right something in",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>A lot of truisms will tell you that quality is the important thing and quantity is secondary. But perhaps there are all sorts of cases where that&rsquo;s not entirely true.</p>\n<p>Mozart wrote way more music than Beethoven; Beethoven&rsquo;s was more sophisticated but their bodies of work are considered on the same level. There are way more episodes of <!-- raw HTML omitted -->Law and Order<!-- raw HTML omitted --> and all its spin-offs than <!-- raw HTML omitted -->Breaking Bad<!-- raw HTML omitted -->; one made more money, one gathered more acclaim.</p>\n<p>Rather than deciding to pursue quality over quantity, perhaps it&rsquo;s better to:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<h1><span style=\"color:#2b2b2b;font-family:Lato, sans-serif;font-size:16px;font-weight:400;line-height:1.5;\">There will always be more somethings we want to do than we have time to do. Right? Maybe.</span></h1>\n\n<ol>\n    <li>A lot of the right somethings can add up to a great thing, even if the somethings aren't of the highest quality or express the biggest idea.</li>\n    <li>A lot of the wrong somethings aren't that interesting, unless your work is generally of great enough import that historians take an interest in it.</li>\n    <li>A lot of the wrong somethings may not add up to much at all and are unlikely to attract the interest of historians.</li>\n    <li>If you don't care about whether something's great, you can produce a lot of somethings.</li>\n    <li>If you don't care if something expresses a big idea, you can produce a lot of somethings.</li>\n</ol>\n\nA lot of truisms will tell you that quality is the important thing and quantity is secondary. But perhaps there are all sorts of cases where that's not entirely true.\n\nMozart wrote way more music than Beethoven; Beethoven's was more sophisticated but their bodies of work are considered on the same level. There are way more episodes of <em>Law and Order</em> and all its spin-offs than <em>Breaking Bad</em>; one made more money, one gathered more acclaim.\n\nRather than deciding to pursue quality over quantity, perhaps it's better to:\n\n<ul>\n    <li>Choose your somethings with care</li>\n    <li>Execute on the idea central to those somethings</li>\n    <li>Produce as many somethings as possible without hating the quality of your work</li>\n</ul>\n",
				"date_published": "2013-12-29T10:13:40-07:00",
				"url": "https://therealadam.com/2013/12/29/let-the-right.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/26/not-that-kind.html",
				"title": "Not that kind of log",
				"content_html": "<p>First, read all of this excellent distillation of distributed systems by Jay Kreps,  <!-- raw HTML omitted -->The Log: What every software engineer should know about real-time data&rsquo;s unifying abstraction<!-- raw HTML omitted -->. Now, consider this.</p>\n<p>There&rsquo;s a moment, when you&rsquo;re building services and web APIs, when you think you&rsquo;ve pretty much got it under control. You&rsquo;ve got an endpoint for every query, a resource for every workflow. All the use-cases seem to be under control. And then, the question appears:</p>\n<p>&ldquo;How can I get access to all the updates to all the data? You know, for [REASONS].&rdquo;</p>\n<p>For APIs exposed to external developers over the web, this is where you&rsquo;d reach for <!-- raw HTML omitted -->web hooks<!-- raw HTML omitted --> or <!-- raw HTML omitted -->PubSubHubbub<!-- raw HTML omitted -->. It&rsquo;s not the best solution, but it works. If you&rsquo;re building an internal system, you could  use the same approaches, or&hellip;you could build a log.</p>\n<p>No not that kind of log. <!-- raw HTML omitted -->An event log, like LinkedIn did with Kafka for their internal systems<!-- raw HTML omitted -->. Every time your data model changes, every create, update, or delete, you drop an event with all the metadata related to the change. The event goes into some kind of single-producer, multiple consumer queue. Then all the clients that want to know about all the changes to all the things can read events off the queue and do whatever it is they need to for those important REASONS.</p>\n<p>If you find this intriguing, this is a lot like replication in database systems. Definitely read LinkedIn&rsquo;s article on this, and definitely read up on how your database of choice handles replication. And if you&rsquo;ve built this before and have a good answer to initially populating &ldquo;replicas&rdquo; of a database, let me know; I haven&rsquo;t come up with anything better than &ldquo;just rsync it&rdquo;.</p>\n",
				"content_text": "First, read all of this excellent distillation of distributed systems by Jay Kreps,  <a href=\"http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\">The Log: What every software engineer should know about real-time data's unifying abstraction</a>. Now, consider this.\n\nThere's a moment, when you're building services and web APIs, when you think you've pretty much got it under control. You've got an endpoint for every query, a resource for every workflow. All the use-cases seem to be under control. And then, the question appears:\n\n\"How can I get access to all the updates to all the data? You know, for [REASONS].\"\n\nFor APIs exposed to external developers over the web, this is where you'd reach for <a href=\"http://en.wikipedia.org/wiki/Webhook\">web hooks</a> or <a href=\"https://code.google.com/p/pubsubhubbub/\">PubSubHubbub</a>. It's not the best solution, but it works. If you're building an internal system, you could  use the same approaches, or...you could build a log.\n\nNo not that kind of log. <a href=\"http://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\">An event log, like LinkedIn did with Kafka for their internal systems</a>. Every time your data model changes, every create, update, or delete, you drop an event with all the metadata related to the change. The event goes into some kind of single-producer, multiple consumer queue. Then all the clients that want to know about all the changes to all the things can read events off the queue and do whatever it is they need to for those important REASONS.\n\nIf you find this intriguing, this is a lot like replication in database systems. Definitely read LinkedIn's article on this, and definitely read up on how your database of choice handles replication. And if you've built this before and have a good answer to initially populating \"replicas\" of a database, let me know; I haven't come up with anything better than \"just rsync it\".\n",
				"date_published": "2013-12-26T10:28:00-07:00",
				"url": "https://therealadam.com/2013/12/26/not-that-kind.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/24/dear-sync-diary.html",
				"title": "Dear Sync Diary",
				"content_html": "<p>Brent Simmons is keeping a diary as he works through implementing sync for <!-- raw HTML omitted -->Vesper<!-- raw HTML omitted -->, an iOS note-taking app. Building this sort of thing isn&rsquo;t easy; cf. it took Cultured Code multiple years to implement it for Things. Thus it&rsquo;s pretty neat that Simmons is breaking it down into understandable chunks:</p>\n<!-- raw HTML omitted -->\n<p>If you think you need to implement a synchronization system for your application, try to find a shortcut so that you don&rsquo;t. If you can&rsquo;t find a shortcut, you could do worse than starting with these notes.</p>\n",
				"content_text": "Brent Simmons is keeping a diary as he works through implementing sync for <a href=\"http://vesperapp.co\">Vesper</a>, an iOS note-taking app. Building this sort of thing isn't easy; cf. it took Cultured Code multiple years to implement it for Things. Thus it's pretty neat that Simmons is breaking it down into understandable chunks:\n\n<ul>\n    <li><a href=\"http://inessential.com/2013/10/01/vesper_sync_diary_1\">Syncing Tags</a>, on reasoning about identity in your data model</li>\n    <li><a href=\"http://inessential.com/2013/11/05/vesper_sync_diary_3_immutability_del\">Immutability, Deleting, and Calculated Properties</a>, on tackling deleted data, aka the hardest kind of write in a distributed system</li>\n    <li><a href=\"http://inessential.com/2013/11/12/vesper_sync_diary_5_sync_tokens_and_e\">Sync tokens and efficiency</a>, on converting your system into an event log</li>\n    <li><a href=\"http://inessential.com/2013/11/13/vesper_sync_diary_6_merging_notes\">Merging Notes</a>, on sync semantics and dealing with clocks</li>\n</ul>\n\nIf you think you need to implement a synchronization system for your application, try to find a shortcut so that you don't. If you can't find a shortcut, you could do worse than starting with these notes.\n",
				"date_published": "2013-12-24T14:16:15-07:00",
				"url": "https://therealadam.com/2013/12/24/dear-sync-diary.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/23/tony-romo-media.html",
				"title": "Tony Romo media circuses over the years",
				"content_html": "<p>2011: should not have thrown that pass\n2012: should not have allowed that pass to be tipped and intercepted\n2013: should not have allowed his back to become herniated\n2014: should not have gone back for that last donut</p>\n<p>The Romo singularity is nigh! Soon Romo&rsquo;s every facial expression will trigger wild fluctuations in betting lines. Prepare yourself.</p>\n",
				"content_text": "2011: should not have thrown that pass\n2012: should not have allowed that pass to be tipped and intercepted\n2013: should not have allowed his back to become herniated\n2014: should not have gone back for that last donut\n\nThe Romo singularity is nigh! Soon Romo's every facial expression will trigger wild fluctuations in betting lines. Prepare yourself.\n",
				"date_published": "2013-12-23T16:26:23-07:00",
				"url": "https://therealadam.com/2013/12/23/tony-romo-media.html",
				"tags": ["Pop Culture","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/19/this-is-how.html",
				"title": "This is how you chalkboard",
				"content_html": "<p><a href=\"https://vimeo.com/82253916\">vimeo.com/82253916</a></p>\n<p>By pal <!-- raw HTML omitted -->Brandon Keepers<!-- raw HTML omitted -->, who I had no idea had that kind of talent. Well done!</p>\n",
				"content_text": "[vimeo.com/82253916](https://vimeo.com/82253916)\n\nBy pal <a href=\"http://opensoul.org\">Brandon Keepers</a>, who I had no idea had that kind of talent. Well done!\n",
				"date_published": "2013-12-19T20:46:54-07:00",
				"url": "https://therealadam.com/2013/12/19/this-is-how.html",
				"tags": ["Pop Culture","Eye Candy","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/18/toot-a-horn.html",
				"title": "Toot a horn while you test",
				"content_html": "<p>Someone make me a thing that plays horn samples as my test suite runs. Every time a test or assertion finishes, toot the horn sample. A fast suite would sound like Phil Spector&rsquo;s <!-- raw HTML omitted -->Wall of Sound<!-- raw HTML omitted --> (i.e. awesome), a slow one would sound like a grade school marching band (i.e. kill it with fire).</p>\n",
				"content_text": "Someone make me a thing that plays horn samples as my test suite runs. Every time a test or assertion finishes, toot the horn sample. A fast suite would sound like Phil Spector's <a href=\"http://en.wikipedia.org/wiki/Wall_of_sound\">Wall of Sound</a> (i.e. awesome), a slow one would sound like a grade school marching band (i.e. kill it with fire).\n",
				"date_published": "2013-12-18T07:02:10-07:00",
				"url": "https://therealadam.com/2013/12/18/toot-a-horn.html",
				"tags": ["Pop Culture","Comedy, haha","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/17/give-me-all.html",
				"title": "Give me all your Blackbird stories",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote>The Blackbird had outrun nearly 4,000 missiles, not once taking a scratch from enemy fire.</blockquote>\nApparently its sister plane, the A-12, <a href=\"http://gizmodo.com/302164/secret-a+12-spy-plane-officially-unveiled-at-cias-headquarters-no-x+men-found-inside\">was not so lucky</a>. I will always be a sucker for <a href=\"http://www.vfp62.com/SR-71.html\">SR-71 stories</a>, no matter how many times I may have heard them before.\n",
				"date_published": "2013-12-17T18:52:25-07:00",
				"url": "https://therealadam.com/2013/12/17/give-me-all.html",
				"tags": ["The System","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/16/team-superpowers-invest.html",
				"title": "Team superpowers: invest early, reap often",
				"content_html": "<p><!-- raw HTML omitted -->Startup Engineering Team Super Powers<!-- raw HTML omitted -->. You want all of these. Well-considered investments in tooling and conventions can pay out handsomely, and daily, if you put it in place sooner than later.</p>\n",
				"content_text": "<a title=\"Startup Engineering Team Super Powers\" href=\"http://technology.stitchfix.com/blog/2013/12/10/startup-engineering-team-super-powers/\">Startup Engineering Team Super Powers</a>. You want all of these. Well-considered investments in tooling and conventions can pay out handsomely, and daily, if you put it in place sooner than later.\n",
				"date_published": "2013-12-16T12:30:32-07:00",
				"url": "https://therealadam.com/2013/12/16/team-superpowers-invest.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/15/aliens-ate-my.html",
				"title": "Aliens ate my program's state",
				"content_html": "<p>So, Adam from a few years ago, you think you can build a distributed system?</p>\n<p>Designing a concurrent system, one that runs across multiple processors using shared memory threads, is difficult because someone can move your cheese. One moment you&rsquo;ve got food on your plate, and the next moment it&rsquo;s on someone else&rsquo;s plate.</p>\n<p>Designing distributed systems, one that runs across multiple computers over networks that occasionally do weird things, is difficult because you can&rsquo;t assume that the message will get through. One moment you&rsquo;re telling your friend about an awesome new album and the next moment they don&rsquo;t even know who you are anymore.</p>\n<p>In both scenarios, you can&rsquo;t assume the simplest case. You have to discard Occam&rsquo;s razor; it&rsquo;s entirely possible a perfectly devious alien is tinkering with your system, swallowing messages or preventing threads from running. For every operation in your system, you have to ask yourself what could go wrong and how will my system deal with that?</p>\n<p>The first jarring thing about these sorts of problems is that you&rsquo;re probably not using a framework. There are libraries to help you with logging, instrumentation, storage, coordination, and low-level primitives. There aren&rsquo;t a lot of well-curated collections of opinions expressed as code. There&rsquo;s no Rails, no Play, no Django, no Cocoa. There&rsquo;s hardly even a Sinatra, a Celery, a JDBC.</p>\n<p>That means you&rsquo;re going to be designing, for real. Drawing on whiteboard, building prototypes and proofs of concepts. Getting feedback from as many smart people as you can corner. Questioning your assumptions, reading everything you can find on the topic. Looking for tradeoffs that decrease risk and simplify your problem domain.</p>\n<p>Accept that you&rsquo;re unlikely to ever get it entirely right. Those who are really good at it are more like Scotty than Spock. They&rsquo;re surrounded by levers and measurements, tweaking and rebuilding the system as they go. It&rsquo;s a fun puzzle!</p>\n",
				"content_text": "So, Adam from a few years ago, you think you can build a distributed system?\n\nDesigning a concurrent system, one that runs across multiple processors using shared memory threads, is difficult because someone can move your cheese. One moment you've got food on your plate, and the next moment it's on someone else's plate.\n\nDesigning distributed systems, one that runs across multiple computers over networks that occasionally do weird things, is difficult because you can't assume that the message will get through. One moment you're telling your friend about an awesome new album and the next moment they don't even know who you are anymore.\n\nIn both scenarios, you can't assume the simplest case. You have to discard Occam's razor; it's entirely possible a perfectly devious alien is tinkering with your system, swallowing messages or preventing threads from running. For every operation in your system, you have to ask yourself what could go wrong and how will my system deal with that?\n\nThe first jarring thing about these sorts of problems is that you're probably not using a framework. There are libraries to help you with logging, instrumentation, storage, coordination, and low-level primitives. There aren't a lot of well-curated collections of opinions expressed as code. There's no Rails, no Play, no Django, no Cocoa. There's hardly even a Sinatra, a Celery, a JDBC.\n\nThat means you're going to be designing, for real. Drawing on whiteboard, building prototypes and proofs of concepts. Getting feedback from as many smart people as you can corner. Questioning your assumptions, reading everything you can find on the topic. Looking for tradeoffs that decrease risk and simplify your problem domain.\n\nAccept that you're unlikely to ever get it entirely right. Those who are really good at it are more like Scotty than Spock. They're surrounded by levers and measurements, tweaking and rebuilding the system as they go. It's a fun puzzle!\n",
				"date_published": "2013-12-15T14:55:13-07:00",
				"url": "https://therealadam.com/2013/12/15/aliens-ate-my.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/14/nshipster-rainbow-bar.html",
				"title": "NSHipster rainbow bar",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>My favorite design touch in the Gowalla apps was the rainbow bar. Small wonder that fellow Gowalla alumni Mattt Thompson included one on the landing page for his collection of NSHipster essays that you can now buy as an eBook with cash money. <!-- raw HTML omitted -->Ed. apparently all the Gumroad pages have a rainbow bar. Mattt&rsquo;s still awesome.<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"https://gumroad.com/l/nshipster\"><img class=\"size-full\" alt=\"NSHipster Rainbow bar\" src=\"http://therealadam.com/wp-content/uploads/2013/12/nshipster-rainbow.png\" /></a>\n\nMy favorite design touch in the Gowalla apps was the rainbow bar. Small wonder that fellow Gowalla alumni Mattt Thompson included one on the landing page for his collection of NSHipster essays that you can now buy as an eBook with cash money. <em>Ed. apparently all the Gumroad pages have a rainbow bar. Mattt's still awesome.</em>\n",
				"date_published": "2013-12-14T13:13:11-07:00",
				"url": "https://therealadam.com/2013/12/14/nshipster-rainbow-bar.html",
				"tags": ["Uncategorized","Image","rainbowbar"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/12/database-rivalry-in.html",
				"title": "Database rivalry in the Valley",
				"content_html": "<p>A couple years ago, Google released an embeddedable key-value database called <!-- raw HTML omitted -->LevelDB<!-- raw HTML omitted -->. There <!-- raw HTML omitted -->was<!-- raw HTML omitted --> <!-- raw HTML omitted -->much<!-- raw HTML omitted --> <!-- raw HTML omitted -->rejoicing<!-- raw HTML omitted -->. Recently, Facebook released their fork of LevelDB, <!-- raw HTML omitted -->RocksDB<!-- raw HTML omitted -->. There&rsquo;s <!-- raw HTML omitted -->a slide deck comparing the two<!-- raw HTML omitted -->, but the amusing part is the &ldquo;our way is better!&rdquo; subtext. A little bit of Valley rivalry there. You can also learn a lot of interesting tidbits about the design of modern, high-performance database systems from the <!-- raw HTML omitted -->Architecture Guide<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Table Format<!-- raw HTML omitted --> documentation of RocksDB.</p>\n<p>Say what you will about tiny, highly-targeted ads. To some extent they are subsidizing a lot of interesting technology development and the open sourcing thereof.</p>\n",
				"content_text": "A couple years ago, Google released an embeddedable key-value database called <a href=\"http://code.google.com/p/leveldb/\">LevelDB</a>. There <a href=\"http://docs.basho.com/riak/latest/ops/advanced/backends/leveldb/\">was</a> <a href=\"https://github.com/jmhodges/levigo\">much</a> <a href=\"https://github.com/search?q=leveldb&amp;ref=cmdform\">rejoicing</a>. Recently, Facebook released their fork of LevelDB, <a href=\"http://rocksdb.org\">RocksDB</a>. There's <a href=\"http://rocksdb.org/intro.pdf\">a slide deck comparing the two</a>, but the amusing part is the \"our way is better!\" subtext. A little bit of Valley rivalry there. You can also learn a lot of interesting tidbits about the design of modern, high-performance database systems from the <a href=\"https://github.com/facebook/rocksdb/wiki/Rocksdb-Architecture-Guide\">Architecture Guide</a> and <a href=\"https://github.com/facebook/rocksdb/wiki/Rocksdb-table-format\">Table Format</a> documentation of RocksDB.\n\nSay what you will about tiny, highly-targeted ads. To some extent they are subsidizing a lot of interesting technology development and the open sourcing thereof.\n",
				"date_published": "2013-12-12T18:15:28-07:00",
				"url": "https://therealadam.com/2013/12/12/database-rivalry-in.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/12/07/the-false-bad.html",
				"title": "The false bad guy",
				"content_html": "<p>A pet peeve, in writing and thinking: introducing a false antagonist to create tension in a story. This is rampant in tech writing. Apple vs. Google, Ive vs. Forestall, Rails vs. Django, Ember vs. Angular, etc. But there&rsquo;s no there, there. It&rsquo;s only filling space.</p>\n<p>I would love to have Ernest Hemingway weigh in on introducing a bad guy where one isn&rsquo;t needed. I suspect there would be a lot of cursing involved.</p>\n",
				"content_text": "A pet peeve, in writing and thinking: introducing a false antagonist to create tension in a story. This is rampant in tech writing. Apple vs. Google, Ive vs. Forestall, Rails vs. Django, Ember vs. Angular, etc. But there's no there, there. It's only filling space.\n\nI would love to have Ernest Hemingway weigh in on introducing a bad guy where one isn't needed. I suspect there would be a lot of cursing involved.\n",
				"date_published": "2013-12-07T13:44:28-07:00",
				"url": "https://therealadam.com/2013/12/07/the-false-bad.html",
				"tags": ["Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/11/20/objectoriented-relativism.html",
				"title": "Object-oriented relativism",
				"content_html": "<p><!-- raw HTML omitted -->When a Method Can Do Nothing<!-- raw HTML omitted -->, Michael Feathers:</p>\n<!-- raw HTML omitted -->\n<p>Here&rsquo;s a sports metaphor: the Dallas Cowboys are a widely disliked sports team, for various reasons. If I was from <!-- raw HTML omitted -->anywhere<!-- raw HTML omitted --> but Dallas, it would be &ldquo;not cool&rdquo; to count myself one a fan. But being from Dallas, I have an entirely different view on the Cowboys and can safely watch their mostly mediocre performances with occasional memories of greatness, safe from scorn.</p>\n<p>I find that holding that tension in my head is important when talking to sports fans. It&rsquo;s the same with OO: you haven&rsquo;t read the books, watched the presentations, or worked the exercises I have. We&rsquo;re on different pages, but we need to talk about the same code and how to structure it. There&rsquo;s a tension between my understanding of OO and the next person, but it&rsquo;s not a barrier. We have to get our language straight before we can talk about language!</p>\n<p>In short, we have to establish what city in OO-land we&rsquo;re from before we can effectively talk about OO.</p>\n",
				"content_text": "<a href=\"https://michaelfeathers.silvrback.com/when-it-s-okay-for-a-method-to-do-nothing\">When a Method Can Do Nothing</a>, Michael Feathers:\n<blockquote>If polymorphism means anything at all, it means that the object is in charge. We send it a message and it is up to it to decide what to do. That's core to OO and part of Alan Kay's original view of objects - that they are all about messaging. That said, it is not the dominant view today.</blockquote>\nThe majority of this article is on working with/around conditionals using intention-revealing method names or null objects. Yet, this paragraph smacked me in the face with \"oh, yeah, obviously!\". Lots of people view the moving parts in object-oriented languages as ways to group and share functionality. But to people who talk about OO a lot, read the history books, read the pattern books, know what SOLID is, etc. it's an entirely different thing.\n\nHere's a sports metaphor: the Dallas Cowboys are a widely disliked sports team, for various reasons. If I was from <em>anywhere</em> but Dallas, it would be \"not cool\" to count myself one a fan. But being from Dallas, I have an entirely different view on the Cowboys and can safely watch their mostly mediocre performances with occasional memories of greatness, safe from scorn.\n\nI find that holding that tension in my head is important when talking to sports fans. It's the same with OO: you haven't read the books, watched the presentations, or worked the exercises I have. We're on different pages, but we need to talk about the same code and how to structure it. There's a tension between my understanding of OO and the next person, but it's not a barrier. We have to get our language straight before we can talk about language!\n\nIn short, we have to establish what city in OO-land we're from before we can effectively talk about OO.\n",
				"date_published": "2013-11-20T09:24:51-07:00",
				"url": "https://therealadam.com/2013/11/20/objectoriented-relativism.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/11/19/designing-technological-empowerment.html",
				"title": "Designing technological empowerment",
				"content_html": "<p><!-- raw HTML omitted -->Applied Discovery<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Reminder: if you tilt your head just so, developers do a lot of design activities too.</p>\n",
				"content_text": "<a href=\"http://irondavy.quora.com/Applied-Discovery-Presentation-from-Build-2013?srid=ui&amp;share=1\">Applied Discovery</a>:\n<blockquote>What future are we building, given that we play a role in such an important process?</blockquote>\nOn the role designers play, what they do as careers progress, and how design can positively enhance the world.\n\nReminder: if you tilt your head just so, developers do a lot of design activities too.\n",
				"date_published": "2013-11-19T08:34:41-07:00",
				"url": "https://therealadam.com/2013/11/19/designing-technological-empowerment.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/11/09/friday-at-a.html",
				"title": "Friday at a Mexican restaurant",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->\n<!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>Could be any Mexican restaurant. Could be any Friday. This one seemed special to me.</p>\n",
				"content_text": "<a href=\"http://therealadam.com/wp-content/uploads/2013/11/20131109-124843.jpg\"><img src=\"http://therealadam.com/wp-content/uploads/2013/11/20131109-124843.jpg\" alt=\"20131109-124843.jpg\" class=\"alignnone size-full\" /></a>\n<br /><br />\n\nCould be any Mexican restaurant. Could be any Friday. This one seemed special to me.\n",
				"date_published": "2013-11-09T11:50:21-07:00",
				"url": "https://therealadam.com/2013/11/09/friday-at-a.html",
				"tags": ["Pop Culture","Eye Candy","Image"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/11/03/currently-intriguing-me.html",
				"title": "Currently intriguing me",
				"content_html": "<p>A channel, a sewer, Alabama, and a sunset walk into a bar:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "A channel, a sewer, Alabama, and a sunset walk into a bar:\n<ul>\n\t<li>A <a href=\"https://github.com/majek/lua-channels/blob/master/lua-channels.lua\">Lua implementation</a> of Go-style coroutines and channels, inspired by a <a href=\"http://swtch.com/libtask/channel.c\">channel implementation</a> by <a href=\"http://swtch.com/~rsc/\">Russ Cox</a>, who is a major contributor to Plan 9 and Go</li>\n\t<li>The <a href=\"http://www.vanityfair.com/politics/2013/10/new-york-city-underground-subway-danger\">infrastructure underneath New York City</a>, sewers, subways, the whole shebang</li>\n\t<li><a href=\"https://vimeo.com/13569924\">“Alabama”</a> by John Coltrane, a jazz cadenza</li>\n\t<li>Sunsets, as always</li>\n</ul>\nWhat’s intriguing you, dear reader?\n",
				"date_published": "2013-11-03T15:46:36-07:00",
				"url": "https://therealadam.com/2013/11/03/currently-intriguing-me.html",
				"tags": ["Curated","The System","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/11/01/breakfast-cannot-wait.html",
				"title": "Breakfast cannot wait, Prince",
				"content_html": "<p><a href=\"http://rd.io/x/QFWiK0EK7-8/\">rd.io/x/QFWiK0E&hellip;</a></p>\n<p>Look, Prince, I&rsquo;m not sure if I can agree with you regarding &ldquo;Breakfast Can Wait&rdquo;. Cereal? Toast? English Muffins? Sure, those things can wait. Migas? Pancakes? Bacon? These things cannot wait. And don&rsquo;t get me started on eggs; wait too long and delicious eggs can go rubbery and gross all too quickly.</p>\n",
				"content_text": "[rd.io/x/QFWiK0E...](http://rd.io/x/QFWiK0EK7-8/)\n\nLook, Prince, I'm not sure if I can agree with you regarding \"Breakfast Can Wait\". Cereal? Toast? English Muffins? Sure, those things can wait. Migas? Pancakes? Bacon? These things cannot wait. And don't get me started on eggs; wait too long and delicious eggs can go rubbery and gross all too quickly.\n",
				"date_published": "2013-11-01T14:56:26-07:00",
				"url": "https://therealadam.com/2013/11/01/breakfast-cannot-wait.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/31/a-path-through.html",
				"title": "A path through Enumerable",
				"content_html": "<p>In Cocoa, you can poke inside object graphs (and more!) using dotted strings:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Hey, did you notice that Objective-C sprouted some really handy literals for arrays and dictionaries lately? One could reasonably extrapolate that Apple has an interest in not breaking people’s fingers when they build for iOS and OS X.</p>\n<p>There are libraries, e.g. <!-- raw HTML omitted -->Hashie<!-- raw HTML omitted -->, that make uniform access into object graphs, like you might get from an API response, as close to idiomatic Ruby as you probably want. Key paths, as implemented in Cocoa’s Key-Value Coding APIs, takes a different approach, using strings to define paths to traverse an object graph. I don’t really like “string programming”, but it’s an interesting approach, so let’s see where it takes us. Let’s add something like “key paths” to Ruby!</p>\n<!-- raw HTML omitted -->\n<p>Enumerable is an awesome thing about Ruby. Let’s build key path traversal on top of that. The goal is something close to the Objective-C snippet above:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Turns out this isn’t hard to implement, even with a little error handling thrown in:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>OK, first off, did you realize that <!-- raw HTML omitted -->SimpleDelegator<!-- raw HTML omitted --> makes it <!-- raw HTML omitted -->ridiculously<!-- raw HTML omitted --> easy to wrap objects with extra behavior? <!-- raw HTML omitted -->It sure does!<!-- raw HTML omitted --> Second, you could easily write this with a while loop or even a simple <!-- raw HTML omitted -->each<!-- raw HTML omitted -->, but why have local variables hanging around when you could use <!-- raw HTML omitted -->inject<!-- raw HTML omitted --> instead?!<!-- raw HTML omitted -->[1]<!-- raw HTML omitted --> Third, this has more conditionals than I’d like, but it fits within 80 columns<!-- raw HTML omitted -->[2]<!-- raw HTML omitted --> so I’ll take it.</p>\n<!-- raw HTML omitted -->\n<p>I’ve got this code, based on a whim. I’m not even sure it’s a good idea. Maybe it is!</p>\n<!-- raw HTML omitted -->\n<p>Maybe it sucks?</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I can’t really tell you, definitively, if you should try this or not. I’ve barely even used KVC in Cocoa! It’s a nifty idea, though, and it’s pretty rad that you can implement something like it in Ruby so trivially.</p>\n<p>Now you know!</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "In Cocoa, you can poke inside object graphs (and more!) using dotted strings:\n\n<pre><code> NSDictionary *bestOfBeatles = @{@\"paul\": @{@\"beatles\": @\"Hey Jude\", @\"solo\": @\"Jet\"}};\n\nNSString *solo = [bestOfBeatles valueForKeyPath:@\"paul.solo\"];\nNSLog(@\"Paul's Best solo song is: %@\", solo);\n</code></pre>\n\nHey, did you notice that Objective-C sprouted some really handy literals for arrays and dictionaries lately? One could reasonably extrapolate that Apple has an interest in not breaking people’s fingers when they build for iOS and OS X.\n\nThere are libraries, e.g. <a href=\"hashie\">Hashie</a>, that make uniform access into object graphs, like you might get from an API response, as close to idiomatic Ruby as you probably want. Key paths, as implemented in Cocoa’s Key-Value Coding APIs, takes a different approach, using strings to define paths to traverse an object graph. I don’t really like “string programming”, but it’s an interesting approach, so let’s see where it takes us. Let’s add something like “key paths” to Ruby!\n\n<h2>Hark, an implementation</h2>\n\nEnumerable is an awesome thing about Ruby. Let’s build key path traversal on top of that. The goal is something close to the Objective-C snippet above:\n\n<pre><code> best_beatles = KVC.new({\"paul\" =&gt; {\"beatles\" =&gt; \"Hey, Jude\", \"solo\" =&gt; \"Jet\"}})\nsolo = best_beatles.for_path(\"paul.solo\")\nputs \"Paul's best solo song is: #{solo}\"\n</code></pre>\n\nTurns out this isn’t hard to implement, even with a little error handling thrown in:\n\n<pre><code>require 'delegate'\n\nclass KVC &lt; SimpleDelegator\n\n  def for_path(path)\n    segments = path.split('.')\n\n    segments.inject(self) do |value, s|\n      if !value.respond_to?(:has_key?)\n        raise ArgumentError.new(\"Expected #{value} to respond to has_key?\")\n      end\n\n      if value.has_key?(s)\n        value[s]\n      else\n        raise KeyError.new(\"Missing key #{s}\")\n      end\n    end\n  end\n\nend\n</code></pre>\n\nOK, first off, did you realize that <code>SimpleDelegator</code> makes it <em>ridiculously</em> easy to wrap objects with extra behavior? <strong>It sure does!</strong> Second, you could easily write this with a while loop or even a simple <code>each</code>, but why have local variables hanging around when you could use <code>inject</code> instead?!<a class=\"footnote\" id=\"fnref-1\" title=\"see footnote\" href=\"1\">[1]</a> Third, this has more conditionals than I’d like, but it fits within 80 columns<a class=\"footnote\" id=\"fnref-2\" title=\"see footnote\" href=\"2\">[2]</a> so I’ll take it.\n\n<h2>The pros and cons of using key paths</h2>\n\nI’ve got this code, based on a whim. I’m not even sure it’s a good idea. Maybe it is!\n\n<ul>\n    <li>It’s simpler to specify a traversal into a deep object graph with a string than with a bunch of key lookups or method chains. It’s slightly clearer too.</li>\n    <li>“Selector APIs”, like XPath or jQuery’s extensions to CSS, are an idea many developers have already wrapped their head around. I wouldn’t want to go anywhere near the complexity of those APIs, but an opinionated set of operations on an object graph might not get too complex.</li>\n</ul>\n\nMaybe it sucks?\n\n<ul>\n    <li>Enumerable is pretty great, why wouldn’t you use that?</li>\n    <li>Programming by banging strings together is terrible.</li>\n</ul>\n\n<h2>Judgement</h2>\n\nI can’t really tell you, definitively, if you should try this or not. I’ve barely even used KVC in Cocoa! It’s a nifty idea, though, and it’s pretty rad that you can implement something like it in Ruby so trivially.\n\nNow you know!\n\n<div class=\"footnotes\">\n\n<hr />\n\n<ol>\n    <li id=\"fn-1\">I realize this is a point of contention in the Seattle.rb ranks <a class=\"reversefootnote\" title=\"return to article\" href=\"1\"> ↩</a></li>\n    <li id=\"fn-2\">Forgive me now, Seattle.rb? <a class=\"reversefootnote\" title=\"return to article\" href=\"2\"> ↩</a></li>\n</ol>\n</div>\n",
				"date_published": "2013-10-31T09:28:53-07:00",
				"url": "https://therealadam.com/2013/10/31/a-path-through.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/30/football-rules-not.html",
				"title": "Football rules: not hard, even for the defense",
				"content_html": "<p>The NFL is going through an awkward transition from laissez-faire bloodsport to something&hellip;less bloodsport-y. Players-turned analysts often rush to the side of the &ldquo;victimized&rdquo; defensive players who are now faced with&hellip;rules. It&rsquo;s pretty dumb, on both sides:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The NFL is going through an awkward transition from laissez-faire bloodsport to something...less bloodsport-y. Players-turned analysts often rush to the side of the \"victimized\" defensive players who are now faced with...rules. It's pretty dumb, on both sides:\n<ul>\n\t<li>It's not like these players learned different rules in high-school and college. Tackling is the same from age 12 onwards: you put your arms around a guy and pull him to the ground. Knocking a guy off his feet is just an impressive but dangerous form of bad tackling.</li>\n\t<li>Defensive players already learn complicated blitzing and coverage schemes. To suppose they can't figure out how to hit a guy only between the knees and shoulders is a bit cynical.</li>\n\t<li>All that defensive players do is react. React to a block, react to a ball-carrier cutting, react to a pass. Adding circumstances under which you can't clock another play is only a marginal increase to their rule-bound duties.</li>\n\t<li>Football is always changing. New offenses, new defenses, new rules, new schemes, etc. Slightly changing how tackling works isn't going to turn football into badminton.</li>\n\t<li>Players know what they're getting into in the short term: possible injuries. Not as many know what they're getting into on the long term: the possibility of being a zombie.</li>\n\t<li>Some former-players have gone on to lead productive lives. Others have not, and a few have taken their own life rather than go on with the one football left them. Survivor bias is not a reason for inaction.</li>\n</ul>\nI think football can turn into something less about violence and more about strategy and skill, but only if those on the outside help those on the inside instead of helping those seeking the untenable status quo.\n",
				"date_published": "2013-10-30T12:53:20-07:00",
				"url": "https://therealadam.com/2013/10/30/football-rules-not.html",
				"tags": ["Pop Culture","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/29/let-me-help.html",
				"title": "Let me help you, computer DJ",
				"content_html": "<p>I look forward to the day when machine learning can differentiate between “don&rsquo;t play this song because it is awful” from “ don&rsquo;t play this song because I’ve heard this it a thousand times” (e.g. &ldquo;Superfreak&rdquo;, &ldquo;Rapper&rsquo;s Delight&rdquo;, &ldquo;Come as you are&rdquo;). Related, I&rsquo;d love a way to tell the machine learning &ldquo;if you are ever stumped about what to play next, it&rsquo;s always OK to slip this song in&rdquo; (e.g. &ldquo;Wouldn&rsquo;t it be nice&rdquo;, &ldquo;Summertime Blues&rdquo;, &ldquo;Izzo (H.O.V.A)&rdquo;, &ldquo;Overture to Samson and Delilah&rdquo;).</p>\n",
				"content_text": "I look forward to the day when machine learning can differentiate between “don't play this song because it is awful” from “ don't play this song because I’ve heard this it a thousand times” (e.g. \"Superfreak\", \"Rapper's Delight\", \"Come as you are\"). Related, I'd love a way to tell the machine learning \"if you are ever stumped about what to play next, it's always OK to slip this song in\" (e.g. \"Wouldn't it be nice\", \"Summertime Blues\", \"Izzo (H.O.V.A)\", \"Overture to Samson and Delilah\").\n",
				"date_published": "2013-10-29T16:09:02-07:00",
				"url": "https://therealadam.com/2013/10/29/let-me-help.html",
				"tags": ["Music","Pop Culture","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/29/quit-your-desk.html",
				"title": "Quit your desk",
				"content_html": "<p><!-- raw HTML omitted -->Things I&rsquo;ve quit doing at my desk<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The big idea from that article, burning a hole in my head, is that we should step away from our desks when we&rsquo;re not working (for me, telling computers to do things). Thinking can happen on a walk, standing outside, or in the shower. Socializing can happen from the couch or mobile device. Procrastinating by reading, surfing, social networking, etc. can happen anywhere.</p>\n<p>Once I freed my mind from the idea that I&rsquo;m only working the moments my butt is in a chair at a desk in front of a computer, my work improved and my life got better. Quit your desk and find out for yourself.</p>\n",
				"content_text": "<a href=\"http://justinjackson.ca/i-quit-my-desk/\">Things I've quit doing at my desk</a>:\n<blockquote>Many writers maintain a <a href=\"http://www.apartmenttherapy.com/famous-small-offthegrid-worksp-140587\">private writing hut</a>. The hut has one purpose: it’s the place they go to write. They don’t do anything else there. Once they can’t write any more, they go do something else. I think we need to think of our desks in the same way: these are places where we get work done.</blockquote>\nI like my desk, but I know the hours I can sit at it and get work done before fatigue sets in are finite. I try to mix in standing at our bar-height dining table, sitting on the couch (most recently, with three dogs), working from coffee shops and occasionally sitting on the front or back porch.\n\nThe big idea from that article, burning a hole in my head, is that we should step away from our desks when we're not working (for me, telling computers to do things). Thinking can happen on a walk, standing outside, or in the shower. Socializing can happen from the couch or mobile device. Procrastinating by reading, surfing, social networking, etc. can happen anywhere.\n\nOnce I freed my mind from the idea that I'm only working the moments my butt is in a chair at a desk in front of a computer, my work improved and my life got better. Quit your desk and find out for yourself.\n",
				"date_published": "2013-10-29T09:27:48-07:00",
				"url": "https://therealadam.com/2013/10/29/quit-your-desk.html",
				"tags": ["Curated","Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/24/its-all-made.html",
				"title": "It's all made of maths",
				"content_html": "<p>Math: humans mostly have a love/hate relationship with it. And yet, even if you&rsquo;re challenged by the continuous maths like myself, it&rsquo;s hard to argue that there isn&rsquo;t something magical to seeing the commonplace of our world in mathematical terms.</p>\n<p><a href=\"https://vimeo.com/77330591\">vimeo.com/77330591</a></p>\n",
				"content_text": "Math: humans mostly have a love/hate relationship with it. And yet, even if you're challenged by the continuous maths like myself, it's hard to argue that there isn't something magical to seeing the commonplace of our world in mathematical terms.\n\n[vimeo.com/77330591](https://vimeo.com/77330591)\n",
				"date_published": "2013-10-24T16:39:44-07:00",
				"url": "https://therealadam.com/2013/10/24/its-all-made.html",
				"tags": ["Curated","The System","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/21/coffee-and-other.html",
				"title": "Coffee and other warmups",
				"content_html": "<p>Making a cup of coffee sometimes helps me prepare for the process of solving puzzles with computers. Something about choosing AeroPress, French press, Chemex, or Clever; heating the water to 212F or 200F; medium-fine, medium, or coarse grinding of the beans. The weighing and grinding of the beans, boiling the water, rinsing the filter, pouring the water, waiting, pouring more water, agitating, pressing the coffee, discarding the filter and grinds. Now I&rsquo;m left with a cup that I made for myself. A minor victory for the day.</p>\n<p>All sorts of things require warm-ups. Stretching, air-squatting, or a quick jog lets my body know it&rsquo;s almost time to exert itself. Word association or playing little games tells my brain it&rsquo;s time to improvise.</p>\n<p>Updating some documentation. A tiny, superficial refactoring or layout change to some code. Drawing a picture in my notebook. Making some coffee. That&rsquo;s how I know it&rsquo;s time to solve puzzles.</p>\n",
				"content_text": "Making a cup of coffee sometimes helps me prepare for the process of solving puzzles with computers. Something about choosing AeroPress, French press, Chemex, or Clever; heating the water to 212F or 200F; medium-fine, medium, or coarse grinding of the beans. The weighing and grinding of the beans, boiling the water, rinsing the filter, pouring the water, waiting, pouring more water, agitating, pressing the coffee, discarding the filter and grinds. Now I'm left with a cup that I made for myself. A minor victory for the day.\n\nAll sorts of things require warm-ups. Stretching, air-squatting, or a quick jog lets my body know it's almost time to exert itself. Word association or playing little games tells my brain it's time to improvise.\n\nUpdating some documentation. A tiny, superficial refactoring or layout change to some code. Drawing a picture in my notebook. Making some coffee. That's how I know it's time to solve puzzles.\n",
				"date_published": "2013-10-21T07:27:14-07:00",
				"url": "https://therealadam.com/2013/10/21/coffee-and-other.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/20/off-my-grid.html",
				"title": "Off my grid",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p style=\"text-align:center;\"><img class=\" aligncenter\" alt=\"Off my grid\" src=\"http://therealadam.com/wp-content/uploads/2013/10/img_1090.jpg\" width=\"5027\" height=\"2337\" /></p>\nCourtney regularly drives an hour southwest of Austin, past Dripping Springs, to practice dog agility at a barn her friend rents. It's amazingly quiet once you get past the city, past the backroads, and out into the hills and trees. It was an overcast evening when I went with her so the sunset was a no-show. Yet, the serenity and variety of it wasn't lost on me.\n",
				"date_published": "2013-10-20T12:38:58-07:00",
				"url": "https://therealadam.com/2013/10/20/off-my-grid.html",
				"tags": ["Expanded ideas","texas","Image"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/19/reads-for-your.html",
				"title": "Reads for your weekends",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>That what I&#8217;ve read today and greatly enjoyed:</p>\n\n<ul>\n<li><a href=\"http://www.theatlantic.com/magazine/archive/2002/03/1491/2445/\">1491</a>, on rethinking what America looked like before Europeans arrived. Has a delightful sci-fi twist: large parts of the Amazon rainforest could be a human effort, not simply nature. The notion that what many of us consider wilderness might be due to the human hand has tricky ramifications for the tension between preservation and development.</li>\n<li><a href=\"http://www.nytimes.com/2013/10/13/opinion/sunday/the-end-of-the-nation-state.html\">The End of the Nation State</a> asks, what if we&#8217;re already forming the structures that come after large-scale states?</li>\n<li><a href=\"http://www.wired.com/business/2011/10/stephenson-innovation-starvation/\">Innovation Starvation</a>, Neal Stephenson on the reasons why we aren&#8217;t building big, awesome things like we did in the sixties or seventies.</li>\n<li><a href=\"http://seriouspony.com/blog/2013/10/4/presentation-skills-considered-harmful\">Presentation Skills Considered Harmful</a>, Kathy Sierra argues that it isn&#8217;t a good performer that makes a presentation good, it&#8217;s a presenter focused on the skills, needs, and experience of the <em>audience</em> that makes it good.</li>\n<li><a href=\"http://frankchimero.com/blog/2013/09/the-inferno-of-independence/\">The Inferno of Independence</a>, Frank Chimero on the tensions of what it means to be an independent creator of words, music, software, etc. The tensions and misconceptions are worth considering, even if you don&#8217;t consider your work &#8220;indie&#8221;.</li>\n<li><a href=\"https://github.com/path/FastImageCache\">FastImageCache</a>, an iOS open source library for quickly storing and rendering images, has an intriguing explanation of why displaying many images on mobile devices is hard and how they&#8217;ve worked around it to deliver a smooth user experience.</li>\n</ul>\n",
				"date_published": "2013-10-19T14:25:50-07:00",
				"url": "https://therealadam.com/2013/10/19/reads-for-your.html",
				"tags": ["The System","Erudition"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/12/ignorance-pros-and.html",
				"title": "Ignorance: pros and cons",
				"content_html": "<p>We can often, but not always, choose to ignore those on the internet, on TV, and in our lives with different ideas, philosophies, or opinions about the world. Whether intentional or accidental, this is ignorance.</p>\n<p>Ignorance is handy because it can keep us sane. We can&rsquo;t know all the things or have all the experiences. We all value things based on our own experiences and learnings. We cross-reference that with our ego and emotions and come up with our &ldquo;truths&rdquo;. Conflicting &ldquo;truths&rdquo; can hurt, and so we only let some kinds of them in and trim our lives to exclude the others. This is helpful for reducing stress and making for more happy days.</p>\n<p>It&rsquo;s not great though, because it isolates us from seeing more of the world and understanding it more clearly. Many media fights/beefs/arguments are rooted in conflicting &ldquo;truths&rdquo; and collisions of ignorance. You ignore the value of a supportive government, I ignore the value of maximum personal liberty, and boom! we&rsquo;re arguing. We&rsquo;re not getting things done.</p>\n<p>Personally, that arguing is stressful. I&rsquo;d rather not get worked up about politics, governance, and technical minutiae if at all possible. Therefore, I selectively engage in ignorance. I try to double check my assumptions and ignorance occasionally; I find ignorance is a useful <!-- raw HTML omitted -->tactic<!-- raw HTML omitted -->, not a long-term <!-- raw HTML omitted -->strategy<!-- raw HTML omitted -->.</p>\n<p>If you could imagine a world where empathy ruled and everyone possessed a superpower for compromise, you might see a world where ignorance isn&rsquo;t so much of a problem and amazing things can get done. Oh, what a fantastic, science-fiction world!</p>\n<p>Ignorance is bliss <!-- raw HTML omitted -->and<!-- raw HTML omitted --> that which prevents us from achieving really big things. Use your ignorance carefully and with consideration.</p>\n",
				"content_text": "We can often, but not always, choose to ignore those on the internet, on TV, and in our lives with different ideas, philosophies, or opinions about the world. Whether intentional or accidental, this is ignorance.\n\nIgnorance is handy because it can keep us sane. We can't know all the things or have all the experiences. We all value things based on our own experiences and learnings. We cross-reference that with our ego and emotions and come up with our \"truths\". Conflicting \"truths\" can hurt, and so we only let some kinds of them in and trim our lives to exclude the others. This is helpful for reducing stress and making for more happy days.\n\nIt's not great though, because it isolates us from seeing more of the world and understanding it more clearly. Many media fights/beefs/arguments are rooted in conflicting \"truths\" and collisions of ignorance. You ignore the value of a supportive government, I ignore the value of maximum personal liberty, and boom! we're arguing. We're not getting things done.\n\nPersonally, that arguing is stressful. I'd rather not get worked up about politics, governance, and technical minutiae if at all possible. Therefore, I selectively engage in ignorance. I try to double check my assumptions and ignorance occasionally; I find ignorance is a useful <em>tactic</em>, not a long-term <em>strategy</em>.\n\nIf you could imagine a world where empathy ruled and everyone possessed a superpower for compromise, you might see a world where ignorance isn't so much of a problem and amazing things can get done. Oh, what a fantastic, science-fiction world!\n\nIgnorance is bliss <em>and</em> that which prevents us from achieving really big things. Use your ignorance carefully and with consideration.\n",
				"date_published": "2013-10-12T15:27:04-07:00",
				"url": "https://therealadam.com/2013/10/12/ignorance-pros-and.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/10/04/peyton-manning-boringly.html",
				"title": "Peyton Manning, boringly awesome or awesomely boring?",
				"content_html": "<p><!-- raw HTML omitted -->The best thing you&rsquo;ll read about football today<!-- raw HTML omitted -->. Peyton Manning is what happens when a guy with the attention to detail of an accountant is also proficient at throwing a football and making snap decisions. Manning also looks like he could give you excellent tips on cutting your hedge or fixing that one toilet.</p>\n<p>This is why Peyton is my favorite Manning.</p>\n",
				"content_text": "<a href=\"http://www.grantland.com/story/_/id/9761407/quarterback-peyton-manning-37\">The best thing you'll read about football today</a>. Peyton Manning is what happens when a guy with the attention to detail of an accountant is also proficient at throwing a football and making snap decisions. Manning also looks like he could give you excellent tips on cutting your hedge or fixing that one toilet.\n\nThis is why Peyton is my favorite Manning.\n",
				"date_published": "2013-10-04T11:41:20-07:00",
				"url": "https://therealadam.com/2013/10/04/peyton-manning-boringly.html",
				"tags": ["Pop Culture","Sportsball!","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/09/25/draw-your-software.html",
				"title": "Draw your software",
				"content_html": "<p><!-- raw HTML omitted -->Better Code Design through Pictures<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://gaslight.co/blog/better-code-design-through-pictures\">Better Code Design through Pictures</a>:\n<blockquote>Looking at a picture like this reveals so much that is missing when only looking at Emacs or Vim. Classes that violate the Single Responsibility Principle may become obvious because they’re related to too many other classes. Cyclical dependencies might be identified. Even class names may be brought into question. These discoveries are not very obvious when writing code, but they were remarkably obvious once we threw the structure up on the whiteboard.</blockquote>\nI almost always have some kind of notebook and pen by my side so that I can doodle words and shapes. Having a whiteboard nearby is even better.\n",
				"date_published": "2013-09-25T15:21:05-07:00",
				"url": "https://therealadam.com/2013/09/25/draw-your-software.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/09/24/happy-birthday-mr.html",
				"title": "Happy Birthday, Mr. The Boss!",
				"content_html": "<p>How to celebrate the 64th birthday of Bruce Springsteen, “The Boss”, if you’re new to this curious American phenomenon:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "How to celebrate the 64th birthday of Bruce Springsteen, “The Boss”, if you’re new to this curious American phenomenon:\n<ul>\n\t<li>If you’re totally new to his music, start with <a href=\"http://rd.io/x/QFWiPkD6Rg/\"><em>Born to Run</em></a>; there is no better album.</li>\n\t<li>If you’re a little familiar with his music, hit <a href=\"http://rd.io/x/QFWiPkc7mg/\"><em>The River</em></a> or <a href=\"http://rd.io/x/QFWiPkDy2A/\"><em>The Wild, the Innocent, and the E Street Shuffle</em></a>; there’s tons of great stuff hidden here.</li>\n\t<li>If you’re familiar with the Boss’ repetoire, you’ve gotta hit a live album; the <a href=\"http://rd.io/x/QFWiPkfyCw/\">compliation of performances from 1975–89</a> is my favorite right now.</li>\n</ul>\nYou want to listen to at least one of these albums because there is <em>no one</em> who better combines the story of America with its music than Bruce Springsteen. If all you know of his work is “Born in the USA”, you got some educatin’ to do!\n",
				"date_published": "2013-09-24T10:19:55-07:00",
				"url": "https://therealadam.com/2013/09/24/happy-birthday-mr.html",
				"tags": ["Music","Pop Culture","misc:bruce-springsteen"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/09/22/find-the-classes.html",
				"title": "Find the classes lurking in your ActiveRecord models",
				"content_html": "<p><!-- raw HTML omitted -->This advice<!-- raw HTML omitted --> is going on a year old, but it&rsquo;s still some of the best around. If you&rsquo;ve got ungainly ActiveRecord objects that are doing way more than abstracting your data model, you are missing classes in the design of your application. Chances are, one of the objects Bryan describes here is what you might want to extract.</p>\n",
				"content_text": "<a href=\"http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/\">This advice</a> is going on a year old, but it's still some of the best around. If you've got ungainly ActiveRecord objects that are doing way more than abstracting your data model, you are missing classes in the design of your application. Chances are, one of the objects Bryan describes here is what you might want to extract.\n",
				"date_published": "2013-09-22T11:51:23-07:00",
				"url": "https://therealadam.com/2013/09/22/find-the-classes.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/09/07/developers-are-weird.html",
				"title": "Developers are weird with words",
				"content_html": "<p>Naming things is hard. Witness things that developers have named and then struggle to explain because words and people are weird:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Naming things is hard. Witness things that developers have named and then struggle to explain because words and people are weird:\n<ul>\n\t<li>TDD sounds like it's about testing, but it's really a design technique.</li>\n\t<li>BDD sounds like it's about what code does, but it's really a communication discipline.</li>\n\t<li>Outside-in development sounds like a way to discover the design of software, but it's really a technique for building software using a fractal todo list.</li>\n</ul>\nBonus developer weirdness not about words: If you can't decompose an idea into a todo list, you've got an initiative, not a project. Be afraid, keep digging at the idea until you can make it a todo list.\n",
				"date_published": "2013-09-07T09:26:18-07:00",
				"url": "https://therealadam.com/2013/09/07/developers-are-weird.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/09/03/twice-the-podcast.html",
				"title": "Twice the podcast listening",
				"content_html": "<p>I like to listen to podcasts and screencasts at two or three times the recorded speed. The application I use (<!-- raw HTML omitted -->Instacast<!-- raw HTML omitted -->) does this with pitch correction, a feature that&rsquo;s probably built into iOS at this juncture. In short, I can listen to a thirty minute podcast in ten to fifteen minutes and they only sound funny when music plays. I do mean funny; listen to Radiohead&rsquo;s &ldquo;Creep&rdquo; at 3x speed and it comes out downright chipper.</p>\n<p>Our brains can process speech at these accelerated rates just fine. In fact, when I listen to some of my favorite podcasters in &ldquo;real&rdquo; time, they sound like they&rsquo;re thinking really hard and speaking slowly, or that they&rsquo;re flat-out drunk. The interesting bit is when an accelerated speaker has an accent or when there is radio interference with the FM transmitter I use in the car. At this point, all bets are off and I have to slow the podcast down or listen when the signal is better.</p>\n<p>The bottom line is that, empirically, human speech has built-in redundancy. We tend to speak at a rate that, if you miss some sounds, you can probably still make out the words. Further, the space in-between words is probably filled with our own thoughts anyway; we only listen part of the time we&rsquo;re listening.</p>\n<p>Nifty things, our brains are.</p>\n",
				"content_text": "I like to listen to podcasts and screencasts at two or three times the recorded speed. The application I use (<a title=\"http://vemedio.com/products/instacast3\" href=\"http://vemedio.com/products/instacast3\">Instacast</a>) does this with pitch correction, a feature that's probably built into iOS at this juncture. In short, I can listen to a thirty minute podcast in ten to fifteen minutes and they only sound funny when music plays. I do mean funny; listen to Radiohead's \"Creep\" at 3x speed and it comes out downright chipper.\n\nOur brains can process speech at these accelerated rates just fine. In fact, when I listen to some of my favorite podcasters in \"real\" time, they sound like they're thinking really hard and speaking slowly, or that they're flat-out drunk. The interesting bit is when an accelerated speaker has an accent or when there is radio interference with the FM transmitter I use in the car. At this point, all bets are off and I have to slow the podcast down or listen when the signal is better.\n\nThe bottom line is that, empirically, human speech has built-in redundancy. We tend to speak at a rate that, if you miss some sounds, you can probably still make out the words. Further, the space in-between words is probably filled with our own thoughts anyway; we only listen part of the time we're listening.\n\nNifty things, our brains are.\n",
				"date_published": "2013-09-03T15:28:22-07:00",
				"url": "https://therealadam.com/2013/09/03/twice-the-podcast.html",
				"tags": ["Expanded ideas","brains","Aside","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/17/on-music-mostly.html",
				"title": "On music, mostly",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>You know how sometimes, everything is clicking and you've just got it? Some people call it flow. On Thursday, I was in a quiping flow. You may have witnessed it on Twitter. I thought it would be fun to try and weave it into a coherent narrative, so here we go.</p>\n\n<p>Sara Flemming started a new blog about digging into the technical mysteries she comes across as she works. It is, brilliantly, titled <a href=\"http://dotsara.github.io\" title=\"http://dotsara.github.io\">Visiting All The Turtles</a>.</p>\n\n<p>Upon seeing a press photo of Adele, I had an epiphany. As an SAT analogy, Achilles Heel is probably about like Adele's eyelashes. All of her singing powers come from those lashes.</p>\n\n<p>There's not many ways to connect Brian Wilson and Axl Rose, except that they both worked on an album for more than a decade, managed to finish it, and missed the moment when it would have been a huge deal. That said, Brian Wilson's album <em>Smile</em> is way better and about as genius as you'd expect. It's better to be a follow-up to <em>Pet Sounds</em> than a follow-up to <em>Use Your Illusion</em>, even though that's my favorite Guns 'n Roses album (haters?).</p>\n\n<p>It's easier to draw a connection between Igor Stravinsky and Brian Wilson. Listen to the former's ballets or the latter's albums (not the surf songs) and you'll always find something strange going on. A flute trill where it doesn't make sense, a honking bass clarinet, a bizarre harmony. It's fantastic.</p>\n\n<p>As you can tell, Brian Wilson is a kind of my jam lately. It would be a shame if that guy doesn't have the opportunity to make all the music that is bouncing around in his head.</p>\n<p>I've never actually been around someone “vaping”, but I'm pretty sure I don't like it based on the name alone. Because that word will never get mispronounced or misheard in a booze joint. Great job, tobacco industry!</p>\n<p>On contemporary indie/rock music. No value judgement, just an observation of the way it is:</p>\n<blockquote><p>A one. A two. A one two three four.</p>\n<p></p>\n<p><em>hits play on drum machine</em></p></blockquote>\n<p>Semi-related: I am so glad 7-string guitars are (mostly) no longer a thing.</p>\n<p>Tinkering with coffee plus condensed milk has brought my iced coffee game <em>way</em> up. I highly recommend it, if you have the means. Just be prepared to stir, a lot.</p>\n<p>To wrap it up, on some other music I've enjoyed and thought a bit about lately:</p>\n<blockquote><p>Ben Folds taps into pathos. Bruce Springsteen taps into the American Dream. Dave Grohl taps into the part of us that just wants to turn it up.</p></blockquote>\n<p>Listen to suit.</p>\n",
				"date_published": "2013-08-17T09:51:46-07:00",
				"url": "https://therealadam.com/2013/08/17/on-music-mostly.html",
				"tags": ["Expanded ideas","Aside","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/16/of-programming-is.html",
				"title": "20% of programming is duh",
				"content_html": "<p>Sometimes I think 20% of programming is staring at a problem for thirty minutes and thinking there must be a really simple solution right in front of me and then, eureka and then, duh.</p>\n<p>Note that it sometimes takes multiple sittings to reach that simple solution. Last night, for example, no eureka. Step away, try again, repeat. Brains are weird.</p>\n",
				"content_text": "Sometimes I think 20% of programming is staring at a problem for thirty minutes and thinking there must be a really simple solution right in front of me and then, eureka and then, duh.\n\nNote that it sometimes takes multiple sittings to reach that simple solution. Last night, for example, no eureka. Step away, try again, repeat. Brains are weird.\n",
				"date_published": "2013-08-16T06:20:16-07:00",
				"url": "https://therealadam.com/2013/08/16/of-programming-is.html",
				"tags": ["Uncategorized","Status"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/14/oh-the-complexities.html",
				"title": "Oh, the complexities you'll know",
				"content_html": "<p>Carried complexity is the bane of your application. When you add something to software, you incur the cost of doing the work plus the risk that the change will break something in already deployed versions of the software. But you also <!-- raw HTML omitted -->possibly<!-- raw HTML omitted --> incur the cost of understanding that addition later, probably in the context of other additions, and then trying to figure out what&rsquo;s broken, slow, or needs to change to add this other new thing.</p>\n<p>Software developers are most adept at identifying and resisting complexity when it comes from the product or business guys. Adding this feature will take a few days, fixing this bug will take a few hours, generating that report will take a week. This change might sound good for getting that new customer, but the way it interacts with the other features will confuse lots of people in the long run.</p>\n<p>You&rsquo;ve probably thought or said all of these things in the past.</p>\n<p>It&rsquo;s important to realize we put it upon ourselves too. Are there two ways of solving the same problem in your project, team, or organization? Are you migrating from one framework/queue/architecture to another? Those are complexities that you are carrying around in your head. They aren&rsquo;t inherently bad, but they are costly, and it is important to weigh the pros and cons before you commit to them. When you choose to incur complexity, make sure it&rsquo;s buying you something and not just shuffling the bits around a little bit.</p>\n",
				"content_text": "Carried complexity is the bane of your application. When you add something to software, you incur the cost of doing the work plus the risk that the change will break something in already deployed versions of the software. But you also <em>possibly</em> incur the cost of understanding that addition later, probably in the context of other additions, and then trying to figure out what's broken, slow, or needs to change to add this other new thing.\n\nSoftware developers are most adept at identifying and resisting complexity when it comes from the product or business guys. Adding this feature will take a few days, fixing this bug will take a few hours, generating that report will take a week. This change might sound good for getting that new customer, but the way it interacts with the other features will confuse lots of people in the long run.\n\nYou've probably thought or said all of these things in the past.\n\nIt's important to realize we put it upon ourselves too. Are there two ways of solving the same problem in your project, team, or organization? Are you migrating from one framework/queue/architecture to another? Those are complexities that you are carrying around in your head. They aren't inherently bad, but they are costly, and it is important to weigh the pros and cons before you commit to them. When you choose to incur complexity, make sure it's buying you something and not just shuffling the bits around a little bit.\n",
				"date_published": "2013-08-14T18:35:39-07:00",
				"url": "https://therealadam.com/2013/08/14/oh-the-complexities.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/13/confidence-despite-evolving.html",
				"title": "Confidence despite evolving systems",
				"content_html": "<p>Facing risk by <!-- raw HTML omitted -->instrumenting the hell out of it<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Facing risk by <a href=\"http://laughingmeme.org/2013/08/08/paths-to-production-confidence-part-1-of-n/\">instrumenting the hell out of it</a>:\n<blockquote>Software development is a complex system existing as it does at the intersection of people, systems, good intentions, confused and changing goals, and overly literal state machines. Past behavior isn’t always an indication of future behavior, and humans are terrible at reasoning about complex systems. As such we’re unlikely to know or have good visibility into whether we’ve reached a steady state and our hypotheses are likely to be wrong. In this uncertain and complex environment we initiate change only when the cost of not making a change overcomes the fear of making it.</blockquote>\nFirst in a series on how Etsy writes, deploys, and operates changing software without The Fear. Thanks for writing this stuff down, Kellan!\n",
				"date_published": "2013-08-13T14:48:11-07:00",
				"url": "https://therealadam.com/2013/08/13/confidence-despite-evolving.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/13/problems-as-everchanging.html",
				"title": "Problems as ever-changing mazes",
				"content_html": "<p>Problems, puzzles, startups as <!-- raw HTML omitted -->dynamic mazes<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Problems, puzzles, startups as <a href=\"http://cdixon.org/2013/08/04/the-idea-maze/\">dynamic mazes</a>:\n<blockquote>just running to the entrance of (say) the “movies/music/filesharing/P2P” maze or the “photosharing” maze without any sense for the history of the industry, the players in the maze, the casualties of the past, and the technologies that are likely to move walls and change assumptions</blockquote>\nI love this idea about thinking of solving systems as though they were an ever-changing maze, with history (fallen players) embedded within the system. Doubly so when you extend the metaphor to solutions that route around one problem to brazenly take on another problem. If this had a further extension to football playcalling, it would be perfect.\n",
				"date_published": "2013-08-13T07:43:17-07:00",
				"url": "https://therealadam.com/2013/08/13/problems-as-everchanging.html",
				"tags": ["Curated","Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/12/refactor-for-value.html",
				"title": "Refactor for value over cleanliness",
				"content_html": "<p>Practice <!-- raw HTML omitted -->Responsible Refactoring<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Practice <a href=\"http://www.naildrivin5.com/blog/2013/08/08/responsible-refactoring.html\">Responsible Refactoring</a>:\n<blockquote>When cleaning up the code <em>enables you to work faster</em> for a task you aren’t dreaming up but <em>actually have at hand</em>, refactoring is the way to go.</blockquote>\nDave Copeland makes the point that refactoring without a value-added change (feature, improvement, bug fix, optimization, etc.) is a losing proposition. By the numbers, he's absolutely right. Further, I've found that probably half of the refactorings I'm <em>convinced</em> are necessary aren't as simple or useful as I thought once I get an hour into them. Despite all that, keep doing <a href=\"http://www.youtube.com/watch?v=J4dlF0kcThQ\">therapeutic refactorings</a> for practice and to keep your spirits up.\n",
				"date_published": "2013-08-12T16:42:51-07:00",
				"url": "https://therealadam.com/2013/08/12/refactor-for-value.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/09/finishing-software-aint.html",
				"title": "Finishing software ain't easy",
				"content_html": "<p>When I start work on a project, whether for personal or professional purposes, I have a sense that I need to devote myself to it. That I should figure out how to make it the best it can be, I should only commit the best codes to it; it should be an exemplary piece of work.</p>\n<p>On the one hand, this is taking pride in my work, and that’s good! On the other hand, this is ownership, and that’s a little problematic.</p>\n<p>The problem with ownership is it leads to irrational decisions. There’s always one more improvement I could make, because this is the thing I own. There is little bit of scope I could add, because I can make this thing really good (at least in my head). There’s one more bug to fix (inexplicably, in my head).</p>\n<p>What I’m finding all this points to is, <!-- raw HTML omitted -->finishing is hard<!-- raw HTML omitted -->. It’s easy to start a project. It’s challenging to get it out there, and get people to use it. It’s really hard to get it to the point where it’s running itself, you can delegate its operation to others, or it doesn’t need further work.</p>\n<p>So that’s a thing I’m trying to figure out. <!-- raw HTML omitted -->Developing.<!-- raw HTML omitted --></p>\n",
				"content_text": "When I start work on a project, whether for personal or professional purposes, I have a sense that I need to devote myself to it. That I should figure out how to make it the best it can be, I should only commit the best codes to it; it should be an exemplary piece of work.\n\nOn the one hand, this is taking pride in my work, and that&#8217;s good! On the other hand, this is ownership, and that&#8217;s a little problematic.\n\nThe problem with ownership is it leads to irrational decisions. There&#8217;s always one more improvement I could make, because this is the thing I own. There is little bit of scope I could add, because I can make this thing really good (at least in my head). There&#8217;s one more bug to fix (inexplicably, in my head).\n\nWhat I&#8217;m finding all this points to is, <strong>finishing is hard</strong>. It&#8217;s easy to start a project. It&#8217;s challenging to get it out there, and get people to use it. It&#8217;s really hard to get it to the point where it&#8217;s running itself, you can delegate its operation to others, or it doesn&#8217;t need further work.\n\nSo that&#8217;s a thing I&#8217;m trying to figure out. <em>Developing.</em>\n",
				"date_published": "2013-08-09T08:20:17-07:00",
				"url": "https://therealadam.com/2013/08/09/finishing-software-aint.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/07/improv-perspectives-on.html",
				"title": "Improv perspectives on changing code",
				"content_html": "<p>In the last improv class I took, we spent a lot of time focusing on four kinds of scenes that appear in improv with astonishing frequency:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "In the last improv class I took, we spent a lot of time focusing on four kinds of scenes that appear in improv with astonishing frequency:\n<ul>\n\t<li>Straight/absurd: A character has a strange perspective on the world, another points out the absurdities in what they're saying and encourages them to say even more absurd things.</li>\n\t<li>Peas in a pod: Two characters who are very similar in demeanor, perspective, or motivation interact with each other.</li>\n\t<li>Alternate reality: Two characters inhabit a world notably different from ours; maybe gravity is no longer a thing or it's entirely normal to wear ketchup as formal wear.</li>\n\t<li>Real: Two players interact with each other mostly as themselves, bringing their own personalities and perspectives to the scene.</li>\n</ul>\nI noticed that, when faced with a puzzle to solve, such as code to write, these kinds of perspectives often pop up too:\n<ul>\n\t<li>Peas in a pod: take some code that already exists in an app, clone it somewhere else and make it do something slightly different. Extract the boilerplate and ship it.</li>\n\t<li>Real: the code around the functionality I need to change, improve, or add to is already just fine (I probably wrote it or have an awesome team); I just code like I code.</li>\n\t<li>Straight/absurd: the code I'm working on has good parts and bad parts; if at all possible I make my changes in the good parts or figure out how to make a new good part for my changes to live in.</li>\n\t<li>Alternate reality: the code I'm working with is utterly bizarre and strange; I have to make lots of tactical decisions about how to make progress while bringing some level of sanity to it.</li>\n</ul>\nSee also: <a href=\"http://laughingmeme.org/2013/05/25/not-novels-improv-comedy/\">Novels, Yes And Improv Comedy</a>.\n",
				"date_published": "2013-08-07T19:39:33-07:00",
				"url": "https://therealadam.com/2013/08/07/improv-perspectives-on.html",
				"tags": ["Expanded ideas","writings","improv"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/05/the-simple-problem.html",
				"title": "The simple problem inside the complex one",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>A sophisticated solution to a complex problem is fun to find. Its even fun when someone else finds the solution and thoroughly writes it down.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Despite the thrill of recognition for tackling a big complex problem, I find it's more practical to seek the simple problem lurking in and around the big problem. Not all tricky problems are complex. Some are presented in a complex way, some are complex because of restrictions that are easily worked around, and some are complex because of an adjoining social problem. Find the simple problem, or the social problem, and solve that instead. It often works for <em>me</em>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>My favorite kind of solution is one where the solver has taken a problem with a big surface area, found the core of the problem that is 80% of what people care about having solved, and then solved that tiny subproblem. If you want to see masters of this approach, check out the works of <a href=\"https://github.com/bmizerany/\">Blake Mizerany</a> and <a href=\"https://github.com/ryandotsmith\">Ryan Smith</a>.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-08-05T19:57:33-07:00",
				"url": "https://therealadam.com/2013/08/05/the-simple-problem.html",
				"tags": ["Uncategorized","Aside","writings","simplicity"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/08/03/technology-thats-not.html",
				"title": "Technology that's not a startup",
				"content_html": "<p>Here&rsquo;s a nice story on technology that isn&rsquo;t startups: <!-- raw HTML omitted -->Unhappy truckers and other algorithmic problems<!-- raw HTML omitted -->. Logistic networks are a technology, just like smartphones. They make our world way better, but they do so invisibly and at a slower pace than the churn of mobile apps, web frameworks, and startups. But they&rsquo;re still solving problems, moving the needle. They&rsquo;re just, possibly, less obsessed with technology tribalism and fashion. Some days, that seems like a pretty useful space to find oneself in.</p>\n",
				"content_text": "Here's a nice story on technology that isn't startups: <a href=\"http://nautil.us/issue/3/in-transit/unhappy-truckers-and-other-algorithmic-problems\">Unhappy truckers and other algorithmic problems</a>. Logistic networks are a technology, just like smartphones. They make our world way better, but they do so invisibly and at a slower pace than the churn of mobile apps, web frameworks, and startups. But they're still solving problems, moving the needle. They're just, possibly, less obsessed with technology tribalism and fashion. Some days, that seems like a pretty useful space to find oneself in.\n",
				"date_published": "2013-08-03T09:16:18-07:00",
				"url": "https://therealadam.com/2013/08/03/technology-thats-not.html",
				"tags": ["Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/07/24/i-dont-have.html",
				"title": "I don't have time to not teach",
				"content_html": "<p>It wasn&rsquo;t long ago that other developers not knowing the things I know was really frustrating. &ldquo;How could they not know this?!&rdquo; I thought that I didn&rsquo;t have time nor should I be expected to train other developers. If I could learn all this stuff, they can too. <!-- raw HTML omitted -->(Older, wiser Adam: younger, more naive Adam was very wrong!)<!-- raw HTML omitted --></p>\n<p>At some point, my perspective on this did a complete turnaround. Now I&rsquo;m eager to teach other developers things they don&rsquo;t know. The major benefit is, now they know the things I know! A side benefit is now I know the thing better because I had to teach it.</p>\n<p>I was completely wrong when I thought I didn&rsquo;t have time to teach. Turns out, I don&rsquo;t have time to not teach other developers the things I think are important.</p>\n",
				"content_text": "It wasn't long ago that other developers not knowing the things I know was really frustrating. \"How could they not know this?!\" I thought that I didn't have time nor should I be expected to train other developers. If I could learn all this stuff, they can too. <em>(Older, wiser Adam: younger, more naive Adam was very wrong!)</em>\n\nAt some point, my perspective on this did a complete turnaround. Now I'm eager to teach other developers things they don't know. The major benefit is, now they know the things I know! A side benefit is now I know the thing better because I had to teach it.\n\nI was completely wrong when I thought I didn't have time to teach. Turns out, I don't have time to not teach other developers the things I think are important.\n",
				"date_published": "2013-07-24T18:58:11-07:00",
				"url": "https://therealadam.com/2013/07/24/i-dont-have.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/07/16/overtime-means-your.html",
				"title": "Overtime means your business is hurting",
				"content_html": "<p><!-- raw HTML omitted -->Overtime is Morphine<!-- raw HTML omitted -->, Ernie Miller:</p>\n<!-- raw HTML omitted -->\n<p>If your business, or the one you work at, requires regular heroics, consider that it is a broken system. Luckily, software developers are well equipped with mental routines for diagnosing and patching broken systems. Time to hack the organization.</p>\n",
				"content_text": "<a href=\"http://erniemiller.org/2013/07/16/overtime-is-morphine/\">Overtime is Morphine</a>, Ernie Miller:\n<blockquote>A developer who is truly concerned about the health of his or her company also must be careful to ensure the \"patient\" isn't developing an unhealthy dependency on their heroics, allowing the company to limp along without experiencing the pain that should accompany unwise choices. Pain is how we learn to avoid repeating mistakes.</blockquote>\nI've seen too many developers put in a heroic effort, only to repeat it the next day, sometimes without sleeping in. That's \"killing the patient\", to extend Ernie's metaphor. It's not the natural state of a business to notice the human cost it might have. The people inside the business have to assess that cost and do something about controlling it.\n\nIf your business, or the one you work at, requires regular heroics, consider that it is a broken system. Luckily, software developers are well equipped with mental routines for diagnosing and patching broken systems. Time to hack the organization.\n",
				"date_published": "2013-07-16T07:36:37-07:00",
				"url": "https://therealadam.com/2013/07/16/overtime-means-your.html",
				"tags": ["Curated","Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/28/scala-and-clojure.html",
				"title": "Scala and Clojure in terms of city building",
				"content_html": "<p>The Scala folks are building newer, better cities on top of older cities, which is how things really work (e.g. Paris, Rome, Boston, etc.). The Clojure folks are building Dyson spheres in space, which is a little ambitious and maybe not entirely realistic.</p>\n<p>That said, sometimes wouldn&rsquo;t you rather live in a sci-fi fantasy world rather than on top of layer after layer of archaeology?</p>\n",
				"content_text": "The Scala folks are building newer, better cities on top of older cities, which is how things really work (e.g. Paris, Rome, Boston, etc.). The Clojure folks are building Dyson spheres in space, which is a little ambitious and maybe not entirely realistic.\n\nThat said, sometimes wouldn't you rather live in a sci-fi fantasy world rather than on top of layer after layer of archaeology?\n",
				"date_published": "2013-06-28T13:41:19-07:00",
				"url": "https://therealadam.com/2013/06/28/scala-and-clojure.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/28/tools-for-software.html",
				"title": "Tools for software in the large",
				"content_html": "<p>When software becomes successful, software often becomes large. More features, more support systems, more infrastructure, more people, etc. Therefore, software &ldquo;in the large&rdquo; seems like a good problem to solve: how can you work at the same pace with one person, one application, and one server when you reach a hundred people, ten applications and a thousand servers?</p>\n<p>Right now, I think the only tool we have for reducing the overhead of large systems and organizations is language. Frameworks and libraries can help make larger applications plausible, but they don&rsquo;t resist the forces that make a large application hard to work with. Tooling and process, like source control or CI, only help us keep large software going; they don&rsquo;t slow us down on the path to producing huge software.</p>\n<p>Better programming languages make it <!-- raw HTML omitted -->possible<!-- raw HTML omitted --> to produce software that does more things in a more concise statement. To some extent better &ldquo;API language&rdquo; makes that possible too, but it relies on the power of the host language.</p>\n<p>Am I overlooking other tools that make software in the large a manageable endeavor?</p>\n",
				"content_text": "When software becomes successful, software often becomes large. More features, more support systems, more infrastructure, more people, etc. Therefore, software \"in the large\" seems like a good problem to solve: how can you work at the same pace with one person, one application, and one server when you reach a hundred people, ten applications and a thousand servers?\n\nRight now, I think the only tool we have for reducing the overhead of large systems and organizations is language. Frameworks and libraries can help make larger applications plausible, but they don't resist the forces that make a large application hard to work with. Tooling and process, like source control or CI, only help us keep large software going; they don't slow us down on the path to producing huge software.\n\nBetter programming languages make it <em>possible</em> to produce software that does more things in a more concise statement. To some extent better \"API language\" makes that possible too, but it relies on the power of the host language.\n\nAm I overlooking other tools that make software in the large a manageable endeavor?\n",
				"date_published": "2013-06-28T07:17:46-07:00",
				"url": "https://therealadam.com/2013/06/28/tools-for-software.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/17/less-beautiful-code.html",
				"title": "Less beautiful code, more code that works in production",
				"content_html": "<p>Developers should care and feed for their systems, especially when they&rsquo;re in production. Alerting, logging, and metrics are the tools you need. Further, you need to use actual production errors as a feedback loop to push you to write more fault tolerant code.</p>\n<p>I&rsquo;ve struggled with that part in the past. It&rsquo;s tempting to think I can just code along, building beautiful code. Beautiful code is entirely different from production code. Handling errors, timeouts, partial failures, logging, instrumentation: it&rsquo;s not exactly design pattern stuff. To wit:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Developers should care and feed for their systems, especially when they're in production. Alerting, logging, and metrics are the tools you need. Further, you need to use actual production errors as a feedback loop to push you to write more fault tolerant code.\n\nI've struggled with that part in the past. It's tempting to think I can just code along, building beautiful code. Beautiful code is entirely different from production code. Handling errors, timeouts, partial failures, logging, instrumentation: it's not exactly design pattern stuff. To wit:\n<blockquote>Fault-tolerant code is ugly. It requires conditionals. It won’t look like code in programming books, screencasts, or blog entries. This is the way it has to be, I’m sorry.</blockquote>\n<a href=\"http://naildrivin5.com/blog/2013/06/16/production-is-all-that-matters.html\">Production is all that matters.</a> Highly intelligent words from Dave Copeland. The beauty of code, as it appears in my text editor, is not as important as how it works when it runs on servers. New mantra!\n",
				"date_published": "2013-06-17T15:22:38-07:00",
				"url": "https://therealadam.com/2013/06/17/less-beautiful-code.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/13/uncertainty-feedback-confidence.html",
				"title": "Uncertainty, feedback, confidence, a happy ending",
				"content_html": "<p>Yesterday, I wanted to setup a quick feedback loop for writing some production code. But, I wasn&rsquo;t entirely sure what that code should look like. Further, I hadn&rsquo;t worked in the code base for several months, so I wasn&rsquo;t sure how the new code would need to interact with other objects.</p>\n<p>This is a scenario that often gets me in trouble. I end up spending too much time contemplating how things might be without the feedback of what&rsquo;s possible and plausible.</p>\n<p>What I ended up doing:</p>\n<!-- raw HTML omitted -->\n<p>Give this a try some time. It&rsquo;s a great confidence booster.</p>\n",
				"content_text": "Yesterday, I wanted to setup a quick feedback loop for writing some production code. But, I wasn't entirely sure what that code should look like. Further, I hadn't worked in the code base for several months, so I wasn't sure how the new code would need to interact with other objects.\n\nThis is a scenario that often gets me in trouble. I end up spending too much time contemplating how things might be without the feedback of what's possible and plausible.\n\nWhat I ended up doing:\n<ul>\n\t<li>Start a new test case for the code. I hardly know what it should do, so I ended up with <code>it \"should do things\"</code>.</li>\n\t<li>Write the kind of code I would run in a REPL to get started writing the production code. This was a service client, so I did things like setup a connection, invoke a request, and handle a response.</li>\n\t<li>Write a test assertion about what I <em>think</em> the side-effect or result of the production code should be. For this service client, I wanted to make sure a useful thing was returned.</li>\n\t<li>Run the test, see it fail, learn some things about the REPL-y code I wrote. Since I'm writing Ruby, my feedback rate goes way up here. Running a single test, which I can do with a keystroke in my editor, is way faster than switching over to an IRB, reloading code, and finding the right incantation to run again.</li>\n\t<li>Iterate on the code in the test case until I have something that passes. Think, type, feedback. Observe, orient, decide, act. Coding is fun.</li>\n\t<li>Once I have passing code, start rearranging so its closer to what I want as actual production code. Replace dummy values with real ones. Figure out how to remove any cheats I may have put in place for expediency.</li>\n\t<li>Once I know what the messages are, extract them into helper methods on the test case class. Now I'm starting to do actual design. After each change, I run the tests. If I break the test, I go back and fix it before I proceed. This is Legitimate Refactoring. Feels good.</li>\n\t<li>Once I know what the objects are, I go ahead and create their file in the production code, move the code out of the test and into the production code, and make sure the original test still passes. Now I switch back to a more typical test-driven design cycle; write a test case, watch it fail, make it pass, refactor, repeat.</li>\n</ul>\nThis is sort of like the <a title=\"http://www.threeriversinstitute.org/HitEmHighHitEmLow.html\" href=\"http://www.threeriversinstitute.org/HitEmHighHitEmLow.html\">Saff Squeeze</a>, but for exploratory coding rather than defect isolation. It kept me from spinning my wheels on design and organization before I even knew what the forces are that affect said design and organization. It also makes a new, strange, or messy code base less intimidating; I can incrementally integrate with the existing code as I'm ready to dive further into it.\n\nGive this a try some time. It's a great confidence booster.\n",
				"date_published": "2013-06-13T07:21:49-07:00",
				"url": "https://therealadam.com/2013/06/13/uncertainty-feedback-confidence.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/07/use-what-you.html",
				"title": "Use what you got",
				"content_html": "<p><!-- raw HTML omitted -->How Shopify scales Rails<!-- raw HTML omitted --> was one of my favorite talks at <!-- raw HTML omitted -->Big Ruby<!-- raw HTML omitted -->. Therein, John Duff talks through what Shopify&rsquo;s Rails stack looks like and why it works for them. What impressed me most was that Shopify has been running basically the same stack since they started. Ruby, Rails, MySQL, Memcached. They added Redis in for queuing at one point.</p>\n<p>I&rsquo;m so easily tempted and fascinated by The New Shiny, it&rsquo;s refreshing to read about a shop getting by with The Old Trusted instead. There&rsquo;s a lot to be said for using solid, well-known tools for as much as you can and working with the strengths and weaknesses those tools afford you. It&rsquo;s a lot closer to craftsmanship than the temptation of science fiction New Shiny tools, and less likely to turn your guts inside out when something goes sideways.</p>\n",
				"content_text": "<a href=\"http://www.confreaks.com/videos/2303-bigruby2013-how-shopify-scales-rails\">How Shopify scales Rails</a> was one of my favorite talks at <a href=\"http://www.bigrubyconf.com\">Big Ruby</a>. Therein, John Duff talks through what Shopify's Rails stack looks like and why it works for them. What impressed me most was that Shopify has been running basically the same stack since they started. Ruby, Rails, MySQL, Memcached. They added Redis in for queuing at one point.\n\nI'm so easily tempted and fascinated by The New Shiny, it's refreshing to read about a shop getting by with The Old Trusted instead. There's a lot to be said for using solid, well-known tools for as much as you can and working with the strengths and weaknesses those tools afford you. It's a lot closer to craftsmanship than the temptation of science fiction New Shiny tools, and less likely to turn your guts inside out when something goes sideways.\n",
				"date_published": "2013-06-07T08:01:17-07:00",
				"url": "https://therealadam.com/2013/06/07/use-what-you.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/06/05/when-i-complain.html",
				"title": "When I complain instead of solve",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Pet peeve 74: whenever I slip and focus on <em>complaining about who and what</em> instead of thinking about <strong>how and why</strong> <strong>to solve the problem</strong>. This is doubly frustrating because I enjoy solving puzzles (i.e. problems) more than I enjoy annoying people.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's so, so easy to kvetch. It feels good. But, it's more productive to figure out why the problem happened and how to solve it (or break the problem down to solvable subproblems).</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Being human: it's tricky.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-06-05T09:28:14-07:00",
				"url": "https://therealadam.com/2013/06/05/when-i-complain.html",
				"tags": ["Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/29/my-rite-of.html",
				"title": "My Rite of Spring overfloweth",
				"content_html": "<p>Today&rsquo;s the hundredth anniversary of premier of hometown favorite Igor Stravinsky&rsquo;s <!-- raw HTML omitted -->Rite of Spring<!-- raw HTML omitted -->. The National Public Radios are all over this. <!-- raw HTML omitted -->NPR Music<!-- raw HTML omitted --> and <!-- raw HTML omitted -->WQXR<!-- raw HTML omitted --> are collecting a bunch of articles they&rsquo;ve done in the run-up to the anniversary. My favorites: <!-- raw HTML omitted -->a visualization of the score<!-- raw HTML omitted --> and a <!-- raw HTML omitted -->list of essential recordings<!-- raw HTML omitted -->. The latter features this amazing image of Stravinsky, which I&rsquo;ve already posted twice today and will continue posting it until it just doesn&rsquo;t feel right anymore.</p>\n<p>[caption id=&quot;&quot; align=&ldquo;aligncenter&rdquo; width=&ldquo;312&rdquo;]<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --> Indeed, Igor Stravinsky will be on that suit and tie.[/caption]</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Today's the hundredth anniversary of premier of hometown favorite Igor Stravinsky's <em>Rite of Spring</em>. The National Public Radios are all over this. <a href=\"http://www.npr.org/blogs/deceptivecadence/182844159/rite-of-spring\">NPR Music</a> and <a href=\"http://www.wqxr.org/#station=q2!/series/rite-spring-fever/\">WQXR</a> are collecting a bunch of articles they've done in the run-up to the anniversary. My favorites: <a href=\"http://www.npr.org/blogs/deceptivecadence/2013/05/27/186461168/watch-a-mind-blowing-visualization-of-the-rite-of-spring\">a visualization of the score</a> and a <a href=\"http://www.wqxr.org/#station=q2!/series/rite-spring-fever/\">list of essential recordings</a>. The latter features this amazing image of Stravinsky, which I've already posted twice today and will continue posting it until it just doesn't feel right anymore.\n\n[caption id=\"\" align=\"aligncenter\" width=\"312\"]<a href=\"http://therealadam.com/wp-content/uploads/2013/05/2strav.jpg\"><img class=\" wp-image \" id=\"i-2962\" alt=\"Igor Stravinsky in a giant coat, a hat, and sunglasses\" src=\"http://therealadam.com/wp-content/uploads/2013/05/2strav.jpg?w=390\" width=\"312\" height=\"312\" /></a> Indeed, Igor Stravinsky will be on that suit and tie.[/caption]\n<p style=\"text-align:left\">If you're playing along today, <a href=\"http://www.wqxr.org/#station=q2!/series/rite-spring-fever/\">WQXR is streaming twenty-four hours of nothing but the Rite</a>. Highly recommended, if you have the means.</p>\n",
				"date_published": "2013-05-29T11:19:25-07:00",
				"url": "https://therealadam.com/2013/05/29/my-rite-of.html",
				"tags": ["Music","Pop Culture","stravinsky"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/29/entropy-and-antientropy.html",
				"title": "Entropy and anti-entropy on your codebase",
				"content_html": "<p><!-- raw HTML omitted -->Entropy and Evolution of a Codebase<!-- raw HTML omitted --> goes well with <!-- raw HTML omitted -->Your Application is on Fire<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>If you haven&rsquo;t read Michael Nygard&rsquo;s <!-- raw HTML omitted --><!-- raw HTML omitted -->Release It<!-- raw HTML omitted --><!-- raw HTML omitted -->, you&rsquo;re missing out on a lot of great stories and useful ideas on how to maintain production software.</p>\n",
				"content_text": "<a href=\"http://thinkrelevance.com/blog/2013/05/21/entropy-and-evolution-of-a-codebase\">Entropy and Evolution of a Codebase</a> goes well with <a title=\"Your application is on fire\" href=\"http://therealadam.com/2013/05/27/your-application-is-on-fire/\">Your Application is on Fire</a>:\n<blockquote>If you imagine the modules in a codebase like cells in a Game of Life automaton, you could see cells fading from healthy blue to sickly red, then transmitting their disease elsewhere. Very occasionally, you’ll see a cell or cluster of cells brightening to health as a developer restructures that area. Mostly, the codebase will decay until it must be discarded or rewritten.</blockquote>\nMichael Nygard reflects on changes that increase and decrease the entropy of an application, what tends to introduce those changes, arrives at this wonderful metaphor for the thinking about the health of an application over time, and then offers several ways to manage entropy in a codebase. This is one that will stick in your head for a while.\n\nIf you haven't read Michael Nygard's <a href=\"http://pragprog.com/book/mnee/release-it\"><em>Release It</em></a>, you're missing out on a lot of great stories and useful ideas on how to maintain production software.\n",
				"date_published": "2013-05-29T06:36:00-07:00",
				"url": "https://therealadam.com/2013/05/29/entropy-and-antientropy.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/28/sandis-rules.html",
				"title": "Sandi's Rules",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>One day, <a href=\"https://sandimetz.com\">Sandi Metz</a> was pressed by a team she was working with to produce a simple set of rules that would lead to better code quality. After consideration, she came up with the following surprisingly numerical guidelines: </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:list -->\n<ul><!-- wp:list-item -->\n<li>classes can't grow beyond one hundred lines of code</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>methods can't grow beyond five lines of code</li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>methods can only take four parameters (hash options count), </li>\n<!-- /wp:list-item -->\n\n<!-- wp:list-item -->\n<li>controllers can only send one message to one object.</li>\n<!-- /wp:list-item --></ul>\n<!-- /wp:list -->\n\n<!-- wp:paragraph -->\n<p>What emerges from these rules is a pretty pragmatic lens on how to practice object oriented design with Ruby and Rails without falling into the tarpit of radical approaches. You don't end up needing to worry about fast tests, decoupling from the framework, presenter, conductors, mediators, adapters, ad nauseum.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>More critically, you aren't beset with decision fatigue. You don't have to survey the landscape of helper gems and bolt-on approaches to writing Rails applications. You can start with the way Rails wants you to write applications: logic and data encapsulated in models, behavior encapsulated in controller actions, easy sharing of data between actions and views with instance variables, etc.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":2950,\"style\":{\"color\":[]}} -->\n<figure class=\"wp-block-image aligncenter\"><img src=\"http://therealadam.com/wp-content/uploads/2013/05/edgy.png\" alt=\"A wingding\" class=\"wp-image-2950\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>You start with what Rails wants; when you find yourself violating one of Sandi's rules, <em>then</em> you apply design and refactoring techniques. If a model does too much, extract common behaviors into an encapsulated object. If a controller action knows about too many things, move that into an object and call it from the action. You can go a <em>really long way</em> using only the <a href=\"http://www.refactoring.com/catalog/replaceMethodWithMethodObject.html\">Replace Method with Method Object</a> refactoring until you get to Kent Beck's notion of a <a href=\"http://c2.com/ppr/wiki/WikiPagesAboutRefactoring/ComposedMethod.html\">Composed Method</a>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That bears repeating. In big letters.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><strong style=\"font-size: 150%\">Most Rails applications can be made better by relentless application of Method Object and Composed Method.</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><a href=\"http://robots.thoughtbot.com/post/50655960596/sandi-metz-rules-for-developers\">Thoughtbot has written about what this looks like as it emerges</a>. It doesn't have to involve a lot of pattern names, new frameworks, framework asceticism or half-baked conventions. You write classes and methods when needed. When they get too big, you refactor, rinse, and repeat.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":2950} -->\n<figure class=\"wp-block-image aligncenter\"><img src=\"http://therealadam.com/wp-content/uploads/2013/05/edgy.png\" alt=\"A wingding\" class=\"wp-image-2950\" /></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Sandi's book, <a href=\"http://www.amazon.com/gp/product/0321721330/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=chamaxwoo-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321721330\">Practical Object Oriented Design with Ruby</a>, is great not because it covers new territory or casts a new light on the subjects of object oriented programming and Ruby. It's great because it shows how to work with the tools provided by OO and Ruby. It's great because it shows how to go from less-good code to more-good code.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's <em>really</em> great because it's short and easy to read. This is the book that enthusiastic, \"enlightened\" programmers can hand to the less energetic to help them understand how to write better code. They can do so without worrying that the book is hard to understand or a beast to read. It's as close to a magic pill for clue enhancement as anyone has yet come.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-05-28T08:16:38-07:00",
				"url": "https://therealadam.com/2013/05/28/sandis-rules.html",
				"tags": ["Uncategorized","people:sandi-metz"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/27/your-application-is.html",
				"title": "Your application is on fire",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<h2>Six easy pieces on thinking about sustainable code</h2>\n\n<p>Your application is on fire. Something is consuming it, a process converting fresh and shiny code into rigid, opaque legacy code.</p>\n\n<p>Seriously, your applications is on fire. You should look into it.</p>\n\n<p>Are you going to fight the fire? Will you keep throwing logs into it, hoping that you can corner it at some point down the line? Do you draw a line in the sand and start containing the fire and eventually suffocating it?</p>\n\n<hr />\n<p>The fire is every change you make to your application in haste. The fire is every design decision that is bolted onto one part of the application without care for how it fits into another part of the application. The fire is every stopgap put in place to fix a short-term problem that isn't revisited once the short-term has elapsed.</p>\n\n<p>Once time is not  the <em>most</em> critical concern, you stop and think about how to make the application better in the long term. You consider what worked about the stop-gap solution, how to design your application with care, how to iterate on improving the architecture of your application.</p>\n\n<p>You fight the fire by trading time for quality. Knowing how to solve your problems, knowing what is important about your application and what is consequential, you start to express a design. You write down principles that worked for you and write down an architecture that joins the principles and the design in the middle. That's where your application lives, once it's not on fire.</p>\n\n<hr />\n<p>The reason green field software projects are appealing is that they aren't on fire. A green field is lush with possibility, without the constraint of decisions already made. More so, a green field is not bound by decisions implicitly accepted but never considered.</p>\n\n<p>The unconsidered decision is how the fire starts. A class here, a subsystem there. Soon you've got a system but no design, emergent or otherwise. You've got a ball of mud, but the mud is on fire.</p>\n\n<p>That fire is sustained by every time you bolt something else on. It's sustained by implementing the feature or fixing the bug without care for the program as a whole. It's fed by making progress without making care.</p>\n\n<hr />\n<p>The fire is warm, but eventually it will consume your application. No one wants to work on the burnt out wrecks inside of it. </p>\n\n<p>Everyone can smell it, but no one wants to go near it. Firewalls are erected, teams establish practices that allow them to avoid working on or near the fire. </p>\n\n<p>So it burns on.</p>\n\n<hr />\n<p>One day, you decide enough is enough. No more fuel on the fire. Every change to the application has to meet standards: does this make the code better, does this make the design better? This <em>here</em> is the design; adhere to the why's, use your creativity for the what's and how's.</p>\n\n<p>That day is the day you start thinking for the long term. In the language of economics, its when you internalize external costs. You accept that the cost of maintaining this application is worthwhile, so you should mitigate that cost, optimizing input effort for output value.</p>\n\n<p>You can't maximize cost by just getting the work done. You can't maximize value by building grand structures. You optimize cost for value by continuously making decisions that mitigate or reduce the fire.</p>\n\n<hr />\n<p>Internal combustion engines are made of fire. Despite being powered by flame, combustion engines are pretty mundane things. They became mundane because they have a design and a standard of engineering that contains that fire, harnesses it, and turns it into a mechanism for converting fuel into energy.</p>\n\n<p>When do we harness and focus our code, instead of letting it burn inefficiently and out of control? The moment we do is when we stop being firefighters and start being the wizards we set out to be when we started writing software.</p>\n",
				"date_published": "2013-05-27T12:20:18-07:00",
				"url": "https://therealadam.com/2013/05/27/your-application-is.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/22/what-makes-longevity.html",
				"title": "What makes longevity?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A joke for a late-night variety show monologue may only be funny for one day (e.g. a joke about a celebrity). A newspaper article may lose relevance in days or weeks. A TV show might feel dated a couple years after its run ends (e.g. most problems on Seinfeld could be solved with a smartphone). Computer programs don't fare well over time either (though there are exceptions).</p>\n\n<p>The best songs demonstrate better longevity. Beethoven and Bob Dylan still work today. There will always be something amazing about \"Good Vibrations\", at least to the trained ear.</p>\n\n<p>Even the rap trope of yelling the year the song was recorded has a timeless quality to it; it serves as a marker for the state of affairs. \"Nineteen eighty nine!\" is the first thing shouted in Public Enemy's \"Fight the Power\", marking the historical context for what Chuck D is about to tell us.</p>\n\n<hr />\n<p>Why is this? I suspect it underlies the act of making music. Besides hit factory music, i.e. ear worms you hear on the radio, a musician's goal is to make something expressive. Expressiveness often leads to qualities that give a piece endurance; timelessness, nostalgia, high quality. Expressiveness is less often an objective for jokes, headline journalism, or television.</p>\n\n<p>That enduring quality, it's tricky. It happens in film, television, and books too. But, for me, there's something about music that has a more direct <em>emotional</em> connection. They vibrate my ear drum and work their way directly to a part of my brain containing \"the feels\". I hear a good song and I'm immediately thinking about why I enjoy it so much, what makes it so good, or when I heard that song and connected it to an experience.</p>\n\n<p>Maybe that's why music is such a big deal in our culture. Really, really good music connects in a way beyond \"haha that's funny\" jokes or \"huh, that's interesting\" writing.</p>\n\n<hr />\n<p>Is it possible to write expressive non-fiction or an enduring computer program? It seems like the answer is yes, but the answers are outliers. Hofstader's <em>Godel, Escher, Bach</em> and Knuth's TeX come to mind. For every GEB or TeX, there are thousands of less interesting works.</p>\n\n<p>Further, the qualities of an enduring, expressive, and yet functional work seem somewhat at odds with the pragmatics of the daily act of writing or programming. A lot more perfectionism, experimentation, and principle goes into these works than the typical news article or application.</p>\n\n<p>And yet, for every \"Good Vibrations\", there's probably a thousand commercial jingles composed, elevator tunes licensed, ringtones purchased, and bar bands playing \"Brickhouse\" yet again. Perhaps music is just as prone to longevity as writing, film, or programming but has a far longer timeline on which its easier to see what <em>really</em> worked. In fifty years perhaps, if we're lucky, we'll start to learn what is really amazing in film and software.</p>\n",
				"date_published": "2013-05-22T08:36:39-07:00",
				"url": "https://therealadam.com/2013/05/22/what-makes-longevity.html",
				"tags": ["Music","Pop Culture","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/18/the-downsides-of.html",
				"title": "The downsides of live music",
				"content_html": "<p>I am a giant music nerd. I listen to a ton of music, I think about music a lot, and I often seek out new music via Twitter and Rdio (🪦RIP). Besides a dislike for showtunes and reggae, I’m a pretty broad listener.</p>\n<p>Yet, it is exceedingly rare that I seek out live music. When I do, I’m that concert goer who is only buying tickets for long-established acts. In the past several years, I’ve seen Paul McCartney, Ray Wylie Hubbard, Lucinda Williams, Steely Dan, Ben Folds, and Ryan Adams. The youngest of these started their career twenty years ago.</p>\n<p>What’s up with that? Well, I (mostly) don’t like live music. I’ve got reasons.</p>\n<!-- raw HTML omitted -->\n<p>The reasons that performances at live music venues don&rsquo;t start on time come down to selfishness. The performers didn&rsquo;t arrive on time, the stage wasn&rsquo;t set up in time. Worse, these have a knock-on effect. Once a performance is behind, it only gets <!-- raw HTML omitted -->more<!-- raw HTML omitted --> behind. There&rsquo;s no shortening the break between bands or reducing the time between doors opening and the first band playing.</p>\n<p>Which brings us to the most inane reason live music is not on time: selling beer. &ldquo;Doors open at 8 PM&rdquo; almost universally means that you can walk in at 8 PM, but you can count on not seeing any live music until 9 PM. The opening act for the opening act is the selling of booze. I&rsquo;ve got better ways to spend my time than standing around for an hour staking out a spot just so the venue can sell beer.</p>\n<!-- raw HTML omitted -->\n<p>Thank you, venues with seats, and thank you, crowds that don&rsquo;t feel the need to show their enthusiasm by standing upright. You make live music a much more civil, enjoyable experience.</p>\n<!-- raw HTML omitted -->\n<p>I salute events that eschew the opening act and cut straight to the main performer. Give the people what they want.</p>\n<!-- raw HTML omitted -->\n<p>Beyond the personal discomfort, there&rsquo;s nothing about loudness that makes music better. If everything is loud, nothing is loud. Sustained loudness is boring.</p>\n<p>Short bouts of loudness; that&rsquo;s interesting. The juxtaposition of the opening arpeggios of &ldquo;Wouldn&rsquo;t It Be Nice&rdquo; with the wall-of-sound that follows is really nice. The way &ldquo;Thunder Road&rdquo; or <!-- raw HTML omitted -->Bolero<!-- raw HTML omitted --> grow into something loud and great is what makes them interesting. The amazing loudness of the opening of <!-- raw HTML omitted -->Also Sprach Zarahustra<!-- raw HTML omitted --> contrasted with the nearly non-existent quietness of the second movement is genius.</p>\n<p>Don&rsquo;t turn it up because you can. Turn it up because you mean it.</p>\n<!-- raw HTML omitted -->\n<p>This is problematic for two reasons. First off, drums are really loud in the hands of an enthusiastic player. Often quite a bit louder than your typical amplifier. Thus, it&rsquo;s guaranteed you&rsquo;re going to hear a lot more drums than guitars, horns, strings, or vocals at a live music event. I take that back; I guarantee you that you will not be able to hear strings at any music club you ever go to, but I&rsquo;ll come back to that.</p>\n<p>The more problematic aspect of a drum kit is you&rsquo;re going to hear <!-- raw HTML omitted -->raw drums<!-- raw HTML omitted --> when you go to a live music event. Very little microphone tricks or equalizer cleverness; the drums may not even be isolated. That means the snare is going to sound like a can of beans getting hit with a stick. The toms will sound like someone banging on an empty box. The cymbals are going to sound like a mad person beating on pots and pans.</p>\n<p>If you&rsquo;re anything like me, you&rsquo;re not going to enjoy them drums.</p>\n<!-- raw HTML omitted -->\n<p>Assuming that clubs don&rsquo;t exist merely to move booze (not a big leap in reasoning, I know), I don&rsquo;t understand how this is the situation. If you want to be a part of a music scene, a good sound system and someone who can operate it seems like par for the course.</p>\n<p>I am happy to note that, if you&rsquo;re lame like me and only go to see performers who have been around the block dozens of times, you&rsquo;re going to have a much better listening experience. Less prominent musicians are starting to tour with just one accompanying performer and that person is not playing a drum kit. The A-list performers have really good drummers (Paul McCartney&rsquo;s drummer is a blast to watch) and the sound engineers on the tour are <!-- raw HTML omitted -->excellent<!-- raw HTML omitted -->. This makes for a far more enjoyable, balanced sound.</p>\n<!-- raw HTML omitted -->\n<p>I do enjoy watching very talented performers do their thing. Someone who mixes music with a good stage show or interesting banter between songs is fun to watch. The Rolling Stones are interesting to watch because Mick Jagger is such a good showman, Charlie Watts seems so apathetic, and Keith Richards is, well, Keef. I&rsquo;ve really enjoyed seeing Hayes Carll and Lyle Lovett because the stories they tell are great and their banter between songs is amusing.</p>\n<p>Genres I <!-- raw HTML omitted -->don&rsquo;t<!-- raw HTML omitted --> know how to make are also fascinating. Hip-hop is not a thing I really know how to make, so that&rsquo;s fun. Jazz and classical can be fun because I know how they work but didn&rsquo;t reach the level where I could <!-- raw HTML omitted -->really<!-- raw HTML omitted --> make it. My new rule is, whenever <!-- raw HTML omitted -->Rite of Spring<!-- raw HTML omitted --> is performed, I need to be there; it&rsquo;s relatively short (about forty minutes), really awesome, and I&rsquo;m certain I would not be able to perform it with an orchestra without ruining it for everyone else.</p>\n<!-- raw HTML omitted -->\n<p>Maybe I&rsquo;m doing it wrong. Perhaps my heuristics for trying to time a concert so I arrive as the opening act is finishing require tweaking. I should definitely remember to bring earplugs more often. It&rsquo;s entirely possible I&rsquo;m just a grumpy guy.</p>\n<p>But: I&rsquo;m not the guy who tells you about the hippest new musical thing. I&rsquo;m probably not the guy who&rsquo;s going to catch your favorite band. I&rsquo;m the guy who goes to see Paul McCartney out of reverence and because my wife and I both like him. I&rsquo;m the guy who listens to an album as a long-form idea. I&rsquo;m the guy who wants to understand the history and creation of a thing. That&rsquo;s just the nerd I am: I understand music over time, not over the course of an evening.</p>\n<p><!-- raw HTML omitted -->Ed. this originally ran in <!-- raw HTML omitted -->The Internet Todo List for Enthusiastic Readers<!-- raw HTML omitted -->. You should check that out. It was pointed out that I&rsquo;m a bit of an old man. In spirit, this is absolutely true. Also worth noting: I&rsquo;m going to see Paul McCartney again this week, so I must not <!-- raw HTML omitted -->entirely<!-- raw HTML omitted --> hate live music. Human inconsistencies, eh?<!-- raw HTML omitted --></p>\n",
				"content_text": "I am a giant music nerd. I listen to a ton of music, I think about music a lot, and I often seek out new music via Twitter and Rdio (🪦RIP). Besides a dislike for showtunes and reggae, I’m a pretty broad listener.\n\nYet, it is exceedingly rare that I seek out live music. When I do, I’m that concert goer who is only buying tickets for long-established acts. In the past several years, I’ve seen Paul McCartney, Ray Wylie Hubbard, Lucinda Williams, Steely Dan, Ben Folds, and Ryan Adams. The youngest of these started their career twenty years ago.\n\nWhat’s up with that? Well, I (mostly) don’t like live music. I’ve got reasons.\n<h3>Performances don't start on time</h3>\nHaving performed in jazz bands, orchestras, stand-up showcases, and improv shows, I've come to accept as axiom that performances won't start on time. There are good reasons for this. Everyone wants to get as many people into the seats as possible to make the show better, to improve the audience experience, or simply to make an extra buck.\n\nThe reasons that performances at live music venues don't start on time come down to selfishness. The performers didn't arrive on time, the stage wasn't set up in time. Worse, these have a knock-on effect. Once a performance is behind, it only gets <em>more</em> behind. There's no shortening the break between bands or reducing the time between doors opening and the first band playing.\n\nWhich brings us to the most inane reason live music is not on time: selling beer. \"Doors open at 8 PM\" almost universally means that you can walk in at 8 PM, but you can count on not seeing any live music until 9 PM. The opening act for the opening act is the selling of booze. I've got better ways to spend my time than standing around for an hour staking out a spot just so the venue can sell beer.\n<h3>Standing for a couple hours sucks</h3>\nWhether it's standing in line for a roller coaster or waiting through beer-time, an opening act, and the changing of the stage, standing around is the worst. Fatigue and boredom set in; you're taken out of the experience of enjoying music played in front of a lot of people. Sore feet and knees do not an enjoyable listening experience make.\n\nThank you, venues with seats, and thank you, crowds that don't feel the need to show their enthusiasm by standing upright. You make live music a much more civil, enjoyable experience.\n<h3>Crowds of people are the worst</h3>\nSuppose you get a good room, with good sound, and a great performer. You've still got to tend to the other people in the room. The drunk heckler, the people calling out songs, the tall person blocking your view. That's all <em>after</em> you stood in line to get in, waited to go to the bathroom, or put out of mind the guy who lit up next to you.\n<h3>Opening acts</h3>\nOpening acts. They're a necessary but inconsistent evil. Sometimes you'll see a really good one. One of the best bands I saw at a Dallas radio station \"festival\" was on the third stage. One of the worst bands I ever saw was an opener that was sufficiently uncertain of their own skills that the majority of the between-song banter was insults at the audience and counter-heckling gone bad.\n\nI salute events that eschew the opening act and cut straight to the main performer. Give the people what they want.\n<h3>It’s too loud</h3>\nI don’t know why, but live music is universally an assault on my ear drums. I've been at concerts where I could feel the music moving <em>inside</em> my pants. That seems a bit excessive.\n\nBeyond the personal discomfort, there's nothing about loudness that makes music better. If everything is loud, nothing is loud. Sustained loudness is boring.\n\nShort bouts of loudness; that's interesting. The juxtaposition of the opening arpeggios of \"Wouldn't It Be Nice\" with the wall-of-sound that follows is really nice. The way \"Thunder Road\" or <em>Bolero</em> grow into something loud and great is what makes them interesting. The amazing loudness of the opening of <em>Also Sprach Zarahustra</em> contrasted with the nearly non-existent quietness of the second movement is genius.\n\nDon't turn it up because you can. Turn it up because you mean it.\n<h3>Drums are a lie</h3>\nLet's talk about the actual music again. In particular, drums. Drums, my friend, are a lie. They do not sound like you think they do. What you hear on the radio and on albums are the results of trained sound engineers using microphone and equalizer tricks to make drums sound decent.\n\nThis is problematic for two reasons. First off, drums are really loud in the hands of an enthusiastic player. Often quite a bit louder than your typical amplifier. Thus, it's guaranteed you're going to hear a lot more drums than guitars, horns, strings, or vocals at a live music event. I take that back; I guarantee you that you will not be able to hear strings at any music club you ever go to, but I'll come back to that.\n\nThe more problematic aspect of a drum kit is you're going to hear <em>raw drums</em> when you go to a live music event. Very little microphone tricks or equalizer cleverness; the drums may not even be isolated. That means the snare is going to sound like a can of beans getting hit with a stick. The toms will sound like someone banging on an empty box. The cymbals are going to sound like a mad person beating on pots and pans.\n\nIf you're anything like me, you're not going to enjoy them drums.\n<h3>It sounds terrible</h3>\nDrums are not the only problematic instrument. In my experience, most clubs have very poor sound. Even if it's not too loud, the mix is wrong, you can't hear the melody, you can't hear the singing, or the overall sound is distorted.\n\nAssuming that clubs don't exist merely to move booze (not a big leap in reasoning, I know), I don't understand how this is the situation. If you want to be a part of a music scene, a good sound system and someone who can operate it seems like par for the course.\n\nI am happy to note that, if you're lame like me and only go to see performers who have been around the block dozens of times, you're going to have a much better listening experience. Less prominent musicians are starting to tour with just one accompanying performer and that person is not playing a drum kit. The A-list performers have really good drummers (Paul McCartney's drummer is a blast to watch) and the sound engineers on the tour are <em>excellent</em>. This makes for a far more enjoyable, balanced sound.\n<h3>There's little mystery</h3>\nThis one is rather personal, though I've spoken with musicians who feel the same way. If you know how to make music, watching the performance of music can be boring. A song that you can listen to and quickly pick up the structure and details of isn't all that exciting. Even if it is, you can see the musicians enjoying the performance of the song and just <em>wish</em> you were up there playing and not down here watching.\n\nI do enjoy watching very talented performers do their thing. Someone who mixes music with a good stage show or interesting banter between songs is fun to watch. The Rolling Stones are interesting to watch because Mick Jagger is such a good showman, Charlie Watts seems so apathetic, and Keith Richards is, well, Keef. I've really enjoyed seeing Hayes Carll and Lyle Lovett because the stories they tell are great and their banter between songs is amusing.\n\nGenres I <em>don't</em> know how to make are also fascinating. Hip-hop is not a thing I really know how to make, so that's fun. Jazz and classical can be fun because I know how they work but didn't reach the level where I could <em>really</em> make it. My new rule is, whenever <em>Rite of Spring</em> is performed, I need to be there; it's relatively short (about forty minutes), really awesome, and I'm certain I would not be able to perform it with an orchestra without ruining it for everyone else.\n\n<hr />\n\nMaybe I'm doing it wrong. Perhaps my heuristics for trying to time a concert so I arrive as the opening act is finishing require tweaking. I should definitely remember to bring earplugs more often. It's entirely possible I'm just a grumpy guy.\n\nBut: I'm not the guy who tells you about the hippest new musical thing. I'm probably not the guy who's going to catch your favorite band. I'm the guy who goes to see Paul McCartney out of reverence and because my wife and I both like him. I'm the guy who listens to an album as a long-form idea. I'm the guy who wants to understand the history and creation of a thing. That's just the nerd I am: I understand music over time, not over the course of an evening.\n\n<em>Ed. this originally ran in <a href=\"http://therealadam.com/the-internet-todo-list-for-enthusiastic-readers/\">The Internet Todo List for Enthusiastic Readers</a>. You should check that out. It was pointed out that I'm a bit of an old man. In spirit, this is absolutely true. Also worth noting: I'm going to see Paul McCartney again this week, so I must not <em>entirely</em> hate live music. Human inconsistencies, eh?</em>\n",
				"date_published": "2013-05-18T08:38:30-07:00",
				"url": "https://therealadam.com/2013/05/18/the-downsides-of.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/05/01/learning-from-a.html",
				"title": "Learning from a dropped refactoring",
				"content_html": "<p>You don’t have to deploy every bit of code you write. In fact, it’s pretty healthy if you throw away some of the code you write before you even <!-- raw HTML omitted -->think<!-- raw HTML omitted --> about committing it.</p>\n<p>Case in point: I sat down to refactor some <!-- raw HTML omitted -->Sifter<!-- raw HTML omitted --> code this weekend. I wanted to experiment with an idea about how Rails apps should be organized. I moved some code around, stepped back, and decided the idea behind my refactoring wasn’t sufficiently well cooked and stashed it instead of committing it.</p>\n<!-- raw HTML omitted -->\n<p>I think that one can follow SOLID principles without radically decoupling your app from Rails and especially ActiveRecord. Instead, you let AR objects do what they’re good at: representing data. You push behavior, as much as possible, out into objects. What you should end up with is a handful of models that encapsulate the tables in your database and a bunch of classes that encapsulate the <!-- raw HTML omitted -->logic<!-- raw HTML omitted --> and behavior of your application; whether these classes live in <!-- raw HTML omitted -->app/models<!-- raw HTML omitted --> or somewhere else is a matter of personal taste.</p>\n<p>My goal is to extract an object that encapsulates user authentication behavior; a class that is mostly concerned with conditions and telling other objects to do things. I extracted a class focused on “remember me” session behavior. It looked something like this:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Then, for compatibility, I added this to the model:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>The principles I’m following are thus:</p>\n<!-- raw HTML omitted -->\n<p>Further, using <!-- raw HTML omitted -->delegate<!-- raw HTML omitted --> means the <!-- raw HTML omitted -->User<!-- raw HTML omitted --> model’s API surface area isn’t actually reduced. Granted, this is a stopgap measure. I should really hunt down all invocations of the delegated method and convert them to use <!-- raw HTML omitted -->UserAuthentication<!-- raw HTML omitted --> instead.</p>\n<p>At this point, it feels like my refactoring isn’t making forward progress. I’ve rearranged things a bit, but I don’t think I’ve made the code that much better.</p>\n<!-- raw HTML omitted -->\n<p>As I alluded earlier, I decided to stash this refactoring for later contemplation. Maybe next time I should start from the callers of the APIs I want to refactor and drive the changes from there. Perhaps my conjecture about decoupling ActiveRecord data from application behavior needs tuning.</p>\n<p>I beat the “ship lots of stuff!” drum a lot, but I’m happy with this result. Learning to strike the balance between shipping the first thing you type out and the thing your future self won’t hate is an undervalued skill. It takes practice, and that’s just what I did here. Plus, I parleyed it into a blog post. <!-- raw HTML omitted -->Everyone wins<!-- raw HTML omitted -->!</p>\n",
				"content_text": "You don’t have to deploy every bit of code you write. In fact, it’s pretty healthy if you throw away some of the code you write before you even <em>think</em> about committing it.\n\nCase in point: I sat down to refactor some <a href=\"https://sifterapp.com\">Sifter</a> code this weekend. I wanted to experiment with an idea about how Rails apps should be organized. I moved some code around, stepped back, and decided the idea behind my refactoring wasn’t sufficiently well cooked and stashed it instead of committing it.\n\n<hr />\n\nI think that one can follow SOLID principles without radically decoupling your app from Rails and especially ActiveRecord. Instead, you let AR objects do what they’re good at: representing data. You push behavior, as much as possible, out into objects. What you should end up with is a handful of models that encapsulate the tables in your database and a bunch of classes that encapsulate the <em>logic</em> and behavior of your application; whether these classes live in <code>app/models</code> or somewhere else is a matter of personal taste.\n\nMy goal is to extract an object that encapsulates user authentication behavior; a class that is mostly concerned with conditions and telling other objects to do things. I extracted a class focused on “remember me” session behavior. It looked something like this:\n<pre><code>class UserAuthentication &lt; Struct.new(:user)\n\n  def remember_token?\n    user.remember_expires_at.present? &amp;&amp; (Time.now.utc &lt; user.remember_expires_at)\n  end\n\n  def remember_me(offset=10.years)\n    time = offset.from_now.utc\n    user.touch_remember_token(time) unless remember_token?\n  end\n\n  def forget_me\n    user.clear_remember_token!\n  end\n\nend</code></pre>\nThen, for compatibility, I added this to the model:\n<pre><code>  def authentication\n    UserAuthentication.new(self)\n  end\n\n  delegate :remember_token?, :remember_me, :forget_me, to: :authentication</code></pre>\nThe principles I’m following are thus:\n<ul>\n \t<li>Don’t expose AR’s API to collaborators. Therefore, <code>UserAuthentication</code> must call methods on <code>User</code> rather than directly update attributes and save records.</li>\n \t<li>Encapsulate behavior in non-model classes. Therefore, <code>User</code> shouldn’t know when or how to manipulate “remember me” data, only expose an API that handles the mechanics.</li>\n</ul>\nThe result: now my extracted class, <code>UserAuthentication</code> has meaning, but doesn’t really <em>own</em> any behavior. It’s a bit envious of the <code>User</code> model. That “envy” hints that its behavior really should live in the model.\n\nFurther, using <code>delegate</code> means the <code>User</code> model’s API surface area isn’t actually reduced. Granted, this is a stopgap measure. I should really hunt down all invocations of the delegated method and convert them to use <code>UserAuthentication</code> instead.\n\nAt this point, it feels like my refactoring isn’t making forward progress. I’ve rearranged things a bit, but I don’t think I’ve made the code that much better.\n\n<hr />\n\nAs I alluded earlier, I decided to stash this refactoring for later contemplation. Maybe next time I should start from the callers of the APIs I want to refactor and drive the changes from there. Perhaps my conjecture about decoupling ActiveRecord data from application behavior needs tuning.\n\nI beat the “ship lots of stuff!” drum a lot, but I’m happy with this result. Learning to strike the balance between shipping the first thing you type out and the thing your future self won’t hate is an undervalued skill. It takes practice, and that’s just what I did here. Plus, I parleyed it into a blog post. <strong>Everyone wins</strong>!\n",
				"date_published": "2013-05-01T07:47:55-07:00",
				"url": "https://therealadam.com/2013/05/01/learning-from-a.html",
				"tags": ["Uncategorized","refactoring"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/22/what-i-wish.html",
				"title": "What I wish I'd known about rewrites",
				"content_html": "<p>I can&rsquo;t say enough good things about <!-- raw HTML omitted -->How to Survive a Ground-Up Rewrite Without Losing Your Sanity<!-- raw HTML omitted -->. Having been party to a few projects like this, a lot of this advice rings true to me. Let me quote you the good parts!</p>\n<!-- raw HTML omitted -->\n<p>You must identify the <!-- raw HTML omitted -->business<!-- raw HTML omitted --> value of the rewrite:</p>\n<!-- raw HTML omitted -->\n<p>The danger of unicorn rewrites:</p>\n<!-- raw HTML omitted -->\n<p>Delivering value incrementally is of the greatest importance:</p>\n<!-- raw HTML omitted -->\n<p>But &ldquo;big bang&rdquo; incremental delivery is accidental waterfall:</p>\n<!-- raw HTML omitted -->\n<p>Always keep failure on the table:</p>\n<!-- raw HTML omitted -->\n<p>I <!-- raw HTML omitted -->really<!-- raw HTML omitted --> wish I&rsquo;d thought of applying &ldquo;The Shrink Ray&rdquo;, an idea borrowed from <!-- raw HTML omitted -->Kellan Elliot-McCrea<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Engineer your migration scripts as idempotent, repeatable machines. You&rsquo;re going to run them <!-- raw HTML omitted -->a lot<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Finally, you should fear rewrites, but developing the skill to pull them off is huge:</p>\n<!-- raw HTML omitted -->\n<p>Whenever I talk to people with monolithic applications, slow-running test suites, and an urge to do something drastic, I want to mind-meld the ideas above into their brains. You can turn code around, but it takes time, patience, and a culture of relentless improvement and quality to make it happen.</p>\n",
				"content_text": "I can't say enough good things about <a href=\"http://onstartups.com/tabid/3339/bid/97052/Screw-You-Joel-Spolsky-We-re-Rewriting-It-From-Scratch.aspx\">How to Survive a Ground-Up Rewrite Without Losing Your Sanity</a>. Having been party to a few projects like this, a lot of this advice rings true to me. Let me quote you the good parts!\n\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2013/04/burndown.png\" alt=\"Burndown\" border=\"0\" width=\"500\" height=\"250\" /></div>\n\nYou must identify the <em>business</em> value of the rewrite:\n\n<p><blockquote>The key to fixing the \"developers will cry less\" thing is to identify, specifically, what the current, crappy system is holding you back from doing. E.g. are you not able to pass a security audit? Does the website routinely fall over in a way that customers notice? Is there some sexy new feature you just can't add because the system is too hard to work with? Identifying that kind of specific problem both means you're talking about something observable by the rest of the business, and also that you're in a position to make smart tradeoffs when things blow up (as they will).</blockquote></p>\n\nThe danger of unicorn rewrites:\n\n<p><blockquote>For the Unhappy Rewrite, the biz value wasn't perfectly clear. And, thus, as often happens in that case, everyone assumed that, in the bright, shiny world of the New System, all their own personal pet peeves would be addressed. The new system would be faster! It would scale better! The front end would be beautiful and clever and new! It would bring our customers coffee in bed and read them the paper.</blockquote></p>\n\nDelivering value incrementally is of the greatest importance:\n\n<p><blockquote>Over my career, I've come to place a really strong value on figuring out how to break big changes into small, safe, value-generating pieces. It's a sort of meta-design -- designing the process of gradual, safe change.</blockquote></p>\n\nBut \"big bang\" incremental delivery is accidental waterfall:\n\n<blockquote><p>False incrementalism is breaking a large change up into a set of small steps, but where none of those steps generate any value on their own. E.g. you first write an entire new back end (but don't hook it up to anything), and then write an entire new front end (but don't launch it, because the back end doesn't have the legacy data yet), and then migrate all the legacy data. It's only after all of those steps are finished that you have anything of any value at all.</p></blockquote>\n\nAlways keep failure on the table:\n\n<p><blockquote>If a 3-month rewrite is economically rational, but a 13-month one is a giant loss, you'll generate a lot value by realizing which of those two you're actually facing.</blockquote></p>\n\nI <em>really</em> wish I'd thought of applying \"The Shrink Ray\", an idea borrowed from <a href=\"http://laughingmeme.org\">Kellan Elliot-McCrea</a>:\n\n<p><blockquote>We have a pattern we call shrink ray. It's a graph of how much the old system is still in place. Most of these run as cron jobs that grep the codebase for a key signature. Sometimes usage is from wire monitoring of a component. Sometimes there are leaderboards. There is always a party when it goes to zero. A big party.</blockquote></p>\n\nEngineer your migration scripts as idempotent, repeatable machines. You're going to run them <em>a lot</em>:\n\n<p><blockquote>Basically, treat your migration code as a first class citizen. It will save you a lot of time in the long run.</blockquote></p>\n\nFinally, you should fear rewrites, but developing the skill to pull them off is huge:\n\n<p><blockquote>I want to wrap up by flipping this all around -- if you learn to approach your rewrites with this kind of ferocious, incremental discipline, you can tackle incredibly hard problems without fear.</blockquote></p>\n\nWhenever I talk to people with monolithic applications, slow-running test suites, and an urge to do something drastic, I want to mind-meld the ideas above into their brains. You can turn code around, but it takes time, patience, and a culture of relentless improvement and quality to make it happen.\n",
				"date_published": "2013-04-22T07:40:19-07:00",
				"url": "https://therealadam.com/2013/04/22/what-i-wish.html",
				"tags": ["Uncategorized","rewrites"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/12/look-up-every.html",
				"title": "Look up every once in a while!",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Sometimes, I feel conditioned never to look beyond the first ten feet of the earth. Watch where you're going, don't run into things, avoid being eaten by bears. Modern life!</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"align\":\"center\",\"id\":2918,\"sizeSlug\":\"large\",\"className\":\"size-full wp-image-2918\"} -->\n<figure class=\"wp-block-image aligncenter size-large size-full wp-image-2918\"><img src=\"uploads/2024/60acb244c8.jpg\" alt=\"A Texas sunset\" class=\"wp-image-2918\" /><figcaption class=\"wp-element-caption\">I see stuff like this out my office window every day. Be jealous.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When I remind myself to look up, there’s so much great stuff. Trees, antennae, water towers, buildings. Airplanes, birds, superheroes. Never mind the visual pollution of smoke, contrails, and billboards. Nifty things, natural and man-made.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Clouds in particular are nifty. They’re almost always changing, even if you look at the same patch of sky. They have pleasing shapes, and just a little bit of texture. Simple pleasure, clouds are.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>And sunsets! Hooo boy, those are great. I thought they were overrated for a long time, but boy was I wrong. Colors, dynamics, fading off into darkness. I'm pretty sure sunsets invented the word \"poetic\".</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p><em>Ed. This originally appeared in my <a href=\"http://tinyletter.com/therealadam\">Internet Todo List for Enthusiastic Thinkers</a> (defunct as of 2023). It's an email thing you can (could) subscribe to. When you do (did), good things come came) to you, often via email. It's free, and it bears no shilling for other people.</em></p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-04-12T07:46:25-07:00",
				"url": "https://therealadam.com/2013/04/12/look-up-every.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/11/exemplary-documentation-size.html",
				"title": "Exemplary documentation: size and purpose",
				"content_html": "<p>There&rsquo;s a lot to say about programmer-focused software documentation. It&rsquo;s more crucial than many developers think, so it is often neglected. Even when its not neglected, it&rsquo;s often an after-thought. I&rsquo;ve noticed there are three kinds of documentation I&rsquo;m interested in.</p>\n<p>When I first come across some software, I want <!-- raw HTML omitted -->short and focused examples<!-- raw HTML omitted --> of how I can use it for my own purposes. I&rsquo;m not looking for a lot of theory or exposition; show me the benefit. If I can&rsquo;t <!-- raw HTML omitted -->quickly<!-- raw HTML omitted --> see how the software works and makes my life easier, I&rsquo;m very likely to discard it. In other words, I want shorter, &ldquo;tweet-sized&rdquo; documentation that sells me on the sizzle right away.</p>\n<!-- raw HTML omitted -->\n<p>If I come back to some software, I often want to <!-- raw HTML omitted -->learn the whole thing in one sitting<!-- raw HTML omitted -->. I want a longer document that I can read through in a <!-- raw HTML omitted -->serial<!-- raw HTML omitted --> fashion to learn most or all of the concepts and details about using the code. It should cover the domain ideas of the software, the individual APIs, and how it all works together to make something. To continue the metaphor, I want a well-written, &ldquo;Instapaper-length&rdquo; document worthy of reading in a comfy chair.</p>\n<!-- raw HTML omitted -->\n<p>After I start using something, I will often want to return to it to <!-- raw HTML omitted -->remember<!-- raw HTML omitted --> how to do specific things or to <!-- raw HTML omitted -->figure out<!-- raw HTML omitted --> if a task is possible at all. This is when I lean most on traditional API documentation. One to three paragraphs, easily searched are the ideal here. Kind of like the &ldquo;Tumblr-post&rdquo; of documentation.</p>\n<p>I&rsquo;ve yet to find all three of these qualities in the documentation for a single piece of software. Finding that software has done a really good job at one of them is delight enough. I can&rsquo;t imagine how excited the world, at large, would be if something were to have all three. There would be a lot of rejoicing.</p>\n",
				"content_text": "There's a lot to say about programmer-focused software documentation. It's more crucial than many developers think, so it is often neglected. Even when its not neglected, it's often an after-thought. I've noticed there are three kinds of documentation I'm interested in.\n\nWhen I first come across some software, I want <strong>short and focused examples</strong> of how I can use it for my own purposes. I'm not looking for a lot of theory or exposition; show me the benefit. If I can't <em>quickly</em> see how the software works and makes my life easier, I'm very likely to discard it. In other words, I want shorter, \"tweet-sized\" documentation that sells me on the sizzle right away.\n<div class=\"center\"><img class=\"aligncenter\" style=\"border: 0\" src=\"http://therealadam.com/wp-content/uploads/2013/04/rbenv-readme.png\" alt=\"rbenv's README\" width=\"400\" height=\"344\" border=\"0\" /></div>\n<a href=\"https://github.com/sstephenson/rbenv\">rbenv</a>'s old README is a good example. I can see from the screenshot what using rbenv looks like. The bullet points make it easy to know the specifics of what this software is about.\n\nIf I come back to some software, I often want to <strong>learn the whole thing in one sitting</strong>. I want a longer document that I can read through in a <em>serial</em> fashion to learn most or all of the concepts and details about using the code. It should cover the domain ideas of the software, the individual APIs, and how it all works together to make something. To continue the metaphor, I want a well-written, \"Instapaper-length\" document worthy of reading in a comfy chair.\n<div class=\"center\"><img class=\"aligncenter\" style=\"border: 0\" src=\"http://therealadam.com/wp-content/uploads/2013/04/backbone.png\" alt=\"Backbone.js homepage\" width=\"260\" height=\"678\" border=\"0\" /></div>\nThe <a href=\"http://documentcloud.github.io/backbone/\">Backbone.js</a> homepage is great at serving as a long-form read. It serves as a reference document and guide at the same time.\n\nAfter I start using something, I will often want to return to it to <strong>remember</strong> how to do specific things or to <strong>figure out</strong> if a task is possible at all. This is when I lean most on traditional API documentation. One to three paragraphs, easily searched are the ideal here. Kind of like the \"Tumblr-post\" of documentation.\n\nI've yet to find all three of these qualities in the documentation for a single piece of software. Finding that software has done a really good job at one of them is delight enough. I can't imagine how excited the world, at large, would be if something were to have all three. There would be a lot of rejoicing.\n",
				"date_published": "2013-04-11T18:40:27-07:00",
				"url": "https://therealadam.com/2013/04/11/exemplary-documentation-size.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/10/the-third-shift.html",
				"title": "The Third Shift",
				"content_html": "<p>In the days of industrial labor, many factories ran three shifts per day. Three eight-hour shifts per day keeps a factory fully utilized and some business major&rsquo;s spreadsheets happy. Luckily, for many of us, knowledge/thinking oriented businesses don&rsquo;t usually follow this paradigm. We&rsquo;re not (often) pressured to pick up a double shift, possibly freeing time to do useful things that we don&rsquo;t get paid for.</p>\n<p>For the ambitious (possible euphemism), this opens up an interesting opportunity: allocating the second shift to one&rsquo;s own projects. Writing that great book you&rsquo;ve got inside you, penciling a comic, running your Etsy business on the side, or bootstrapping that web app you&rsquo;re dreaming about all make a great fit for a second shift. Find time before or after your day job, and then aim for the sky.</p>\n<p>I found it easy to take this logic to the next level and think, well if two shifts works and I can make progress on <em>two</em> things, three shifts might work and then I can do <em>three</em> things! Wake up early, do something awesome. Work the nine to five, do awesome things. Take a couple hours in the evening, do even more awesome things. Seems good, right?</p>\n<p>Unfortunately, the third shift is a bandaid over too many projects and lead me to do lower quality work across the board.</p>\n<p>I need more physical rest and mental space than working on three things affords. Turning down an extra hour of sleep or the bleeping of an alarm clock is a hard bargain. One side project, as it turns out, is plenty.</p>\n<p>That said, the third shift <em>is</em> useful as a &ldquo;turbo button&rdquo; that I only press when I really mean it and used only for short-term projects that are important to whatever awesome thing I&rsquo;m trying to do. A couple weeks waking up early to bang out a presentation  or longer-form article are good. Sustaining that for a series of projects doesn&rsquo;t work for me.</p>\n<p>In short: ambition is great, but striking a balance with mental and physical rest is better.</p>\n",
				"content_text": "In the days of industrial labor, many factories ran three shifts per day. Three eight-hour shifts per day keeps a factory fully utilized and some business major's spreadsheets happy. Luckily, for many of us, knowledge/thinking oriented businesses don't usually follow this paradigm. We're not (often) pressured to pick up a double shift, possibly freeing time to do useful things that we don't get paid for.\n\nFor the ambitious (possible euphemism), this opens up an interesting opportunity: allocating the second shift to one's own projects. Writing that great book you've got inside you, penciling a comic, running your Etsy business on the side, or bootstrapping that web app you're dreaming about all make a great fit for a second shift. Find time before or after your day job, and then aim for the sky.\n\nI found it easy to take this logic to the next level and think, well if two shifts works and I can make progress on _two_ things, three shifts might work and then I can do _three_ things! Wake up early, do something awesome. Work the nine to five, do awesome things. Take a couple hours in the evening, do even more awesome things. Seems good, right?\n\nUnfortunately, the third shift is a bandaid over too many projects and lead me to do lower quality work across the board.\n\nI need more physical rest and mental space than working on three things affords. Turning down an extra hour of sleep or the bleeping of an alarm clock is a hard bargain. One side project, as it turns out, is plenty.\n\nThat said, the third shift _is_ useful as a \"turbo button\" that I only press when I really mean it and used only for short-term projects that are important to whatever awesome thing I'm trying to do. A couple weeks waking up early to bang out a presentation  or longer-form article are good. Sustaining that for a series of projects doesn't work for me.\n\nIn short: ambition is great, but striking a balance with mental and physical rest is better.\n",
				"date_published": "2013-04-10T20:13:33-07:00",
				"url": "https://therealadam.com/2013/04/10/the-third-shift.html",
				"tags": ["Expanded ideas","life","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/09/a-newsletter.html",
				"title": "A newsletter",
				"content_html": "<p>So I did this thing where I wrote a <!-- raw HTML omitted -->newsletter<!-- raw HTML omitted -->. I&rsquo;m going to do it again. The first iteration of this publication was a bit like a written late-night variety show. I wrote about interesting articles, or things that interested me. Each &ldquo;episode&rdquo; almost always closed with some kind of musically awesome thing I&rsquo;d found on the internet.</p>\n<p>The next iteration of this <!-- raw HTML omitted -->newsletter<!-- raw HTML omitted --> will be like a hand-delivered transmogrification of this weblog. I&rsquo;ll include links to the articles I thought were most special or had a surprising reception. I&rsquo;ll occasionally write &ldquo;commentary tracks&rdquo; on how an article came to be. Each edition will almost certainly end with a musical or pop culture find, because what fun is running a newsletter if I can&rsquo;t annoy you with my pop culture tastes?</p>\n<p>My hope is that you&rsquo;ll find this interesting. You can <!-- raw HTML omitted -->take a look at what I&rsquo;ve written previously<!-- raw HTML omitted --> and subscribe to this free internet email <!-- raw HTML omitted -->newsletter<!-- raw HTML omitted --> at your discretion. I think you might like it.</p>\n",
				"content_text": "So I did this thing where I wrote a <a href=\"http://tinyletter.com/therealadam\">newsletter</a>. I'm going to do it again. The first iteration of this publication was a bit like a written late-night variety show. I wrote about interesting articles, or things that interested me. Each \"episode\" almost always closed with some kind of musically awesome thing I'd found on the internet.\n\nThe next iteration of this <a href=\"http://tinyletter.com/therealadam\">newsletter</a> will be like a hand-delivered transmogrification of this weblog. I'll include links to the articles I thought were most special or had a surprising reception. I'll occasionally write \"commentary tracks\" on how an article came to be. Each edition will almost certainly end with a musical or pop culture find, because what fun is running a newsletter if I can't annoy you with my pop culture tastes?\n\nMy hope is that you'll find this interesting. You can <a href=\"http://tinyletter.com/therealadam/letters\">take a look at what I've written previously</a> and subscribe to this free internet email <a href=\"http://tinyletter.com/therealadam\">newsletter</a> at your discretion. I think you might like it.\n",
				"date_published": "2013-04-09T18:57:11-07:00",
				"url": "https://therealadam.com/2013/04/09/a-newsletter.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/08/web-design-for.html",
				"title": "Web design for busy coders",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>Here it is: I'm somewhere between horribly afraid and way-too-smart to seriously attempt front-end web work. Browsers are not the software whose bugs I am interested in knowing about.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>That said, putting information on the web that doesn't look like utter dross is a kind of required literacy in our field. While bravely dipping my toes back into the front-end waters, I recently found some great tricks. Rediscovered, probably, but I'm not sure where the idea originally came from.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Most important: <strong>design in greyscale</strong>. Color is hard and can lead to tinkering. My goal is to get in and out of the front-end bits quickly, so tinkering is the enemy. Greyscale is one dimensional, greatly simplifying matters. Give important information higher contrast and less important information (and \"chrome\") less contrast. Now you're done thinking about color.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Almost as important:<strong> use a fixed-with font</strong>. As a programmer, you look at them everyday, so it's a touchpoint of comfort. Pick a font you don't use in your editor all day, just so you can stare at something different for a while. Copy and paste a \"font stack\" from the aptly named <a title=\"http://cssfontstack.com\" href=\"http://cssfontstack.com\">fontstacks</a>. Make important things big and unimportant things small. Now you're done thinking about type.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to avoiding browser dragons, it seems, is to <strong>skip horizontal layout</strong>, i.e. pull quotes, text wrapped around images, etc. It's pretty easy to use CSS if you only run things down the left side of the page. <mark style=\"background-color:#fcb900\" class=\"has-inline-color\">All the depth and despair of CSS is in trying to get things to appear off the left margin</mark>. Don't do that. Leave it to people who know how browsers work and how to manage their gnarly bugs. Now you're done thinking about layout.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It's tempting to think you should make your code examples look really nice. Don't worry about it; highlighting code is of marginal value. You'll never be satisfied with how it looks. The human mind is capable of reading code without a rainbow spectrum of colors. Spend time on writing about the code, not on polishing the colors and how its highlighted.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>With all of those things out of the way, <mark style=\"background-color:#fcb900\" class=\"has-inline-color\">your way is clear to think about the really important things</mark>. What do you need to say, how do you structure the message, what do you leave out, how do you organize all the information? That's the essence of publishing on the web, not the accidental complexity of making things look interesting.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-04-08T18:58:50-07:00",
				"url": "https://therealadam.com/2013/04/08/web-design-for.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/03/the-gift-and.html",
				"title": "The gift and the curse of green-field projects",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>The \"green field\" in software is a gift and a curse. </p>\n\n<p>On the bright side, you have an opportunity to use the new-shiny. Past wrongs can be righted. You can move quickly, without worry about why some code exists, how it works, or whether you should care about it. Life is good.</p>\n\n<p>The peril I've found is that green field projects are by their nature isolated. They don't have a deployment or monitoring story. They don't spring forth fully integrated with other critical systems. The project probably hasn't proven itself as useful yet.</p>\n\n<p>Letting a green-field live in isolation too long is the root of lots of problems. I've experienced scope creep, confused expectations, and declining morale that all could have been avoided had I brought a green-field project \"into the fold\" sooner. But the whole point of a green field is that you don't integrate too soon, lest you spin your wheels on legacy things.</p>\n\n<p>Green field projects are fun and an often welcome change of pace from working within an existing system. However, succeeding on a green field project is just as hard, or harder, than succeeding with a legacy system. It's a different set of trade-offs that each developer has to get good at.</p>\n",
				"date_published": "2013-04-03T07:40:31-07:00",
				"url": "https://therealadam.com/2013/04/03/the-gift-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/02/hypermedia-chicken-web.html",
				"title": "Hypermedia chicken, web browser egg",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A lot of the hypermedia philosophy is centered around the idea that API clients should work a lot like web browsers and plain-old Hypertext Markup Language. They should follow hyperlinks, leverage media types, cache data when they can, and intelligently take advantage of the meaning of hyperlinks whenever possible.</p>\n\n<img src=\"http://therealadam.com/wp-content/uploads/2013/04/hypermediachickenegg.jpg?w=525\" alt=\"Good APIs require good services *and* good clients\" width=\"525\" height=\"173\" class=\"aligncenter size-large wp-image-2891\" />\n\n<p>The problem with that is, <strong>web browsers are way more capable than HTTP clients</strong> developers are using to build API clients with.</p>\n\n<p>Here are some things web browsers have become pretty good at:</p>\n\n<ul><li>GET and POST requests\n</li><li>Following links and redirects\n</li><li>Discovering data structures via HTML forms and submitting data using that schema\n</li><li>Using headers to negotiate content types\n</li><li>Caching data when possible and expiring those caches\n</li><li>Handling streaming data and chunked responses\n</li><li>A bunch of stuff I'm probably forgetting\n</li></ul>\n<p>Here are some things the HTTP client in your typical standard library are good at:</p>\n\n<ul><li>GET, POST, PUT, and DELETE requests\n</li><li>Following redirects (if you manage to set the right options)\n</li></ul>\n<p>What's at play here is a chicken and egg problem. Client developers can't build on hypermedia principles until they are working at the level of hypermedia abstractions. Arming them only with HTTP requests and the ability to choose their encoding and schema poison is too low level.</p>\n\n<p>Protocols like <a href=\"http://stateless.co/hal_specification.html\">HAL</a> or <a href=\"http://amundsen.com/media-types/collection/\">Collection+JSON</a> <em>could</em> light a path to solving this problem. Rather than dealing in pure data, services and consumers work with data annotated with hypermedia-like semantics for traversing data structures and creating new data. If these protocols can gain traction, it's \"simply\" a matter of getting HTTP clients into widespread use (read: standard libraries in stable releases of your-favorite-programming-language) that are as good at HTTP as web browsers are. At that point, API providers and API consumers could start using hypermedia principles to build APIs for those who aren't interested in the mechanics of hypermedia.</p>\n\n<p>Until then, it seems to me that putting hypermedia principles front-and-center is suboptimal. It's akin to telling someone who wants to use your website that they need to understand MVC patterns first. It's only going to discourage and confuse them. </p>\n",
				"date_published": "2013-04-02T07:31:01-07:00",
				"url": "https://therealadam.com/2013/04/02/hypermedia-chicken-web.html",
				"tags": ["Uncategorized","hypermedia"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/04/01/how-to-understand.html",
				"title": "How to understand Saturday Night Live",
				"content_html": "<p><!-- raw HTML omitted -->Saturday Night Live<!-- raw HTML omitted --> is a changing thing. It&rsquo;s not new like it was in the seventies, it&rsquo;s not a powerhouse like it was in the nineties, it may not be the training camp for NBC sitcoms anymore. Despite that, its still a big dog in the worlds of comedy and pop culture. Every time I hear or read &ldquo;<!-- raw HTML omitted -->SNL<!-- raw HTML omitted --> was better when…&rdquo;, I cringe a little. As far as I can tell, this isn&rsquo;t true.</p>\n<p>Everyone&rsquo;s got their favorite cast. Ferrell/Shannon/Sanz/Oteri, Fey/Poehler/Rudolph, Hartman/Carvey/Myers. It seems largely to depend on whenever you started watching SNL or when you were a teenager or in college. So when someone says &ldquo;SNL isn&rsquo;t relevant any more&rdquo;, I mentally substitute &ldquo;I liked SNL better with the cast I watched first.&rdquo;</p>\n<p>Over the years of watching and reading about SNL, I&rsquo;ve come to understand that the show is very much about the people on camera, but Lorne Michaels <!-- raw HTML omitted -->is<!-- raw HTML omitted --> the show. The only time the show has been in consistent decline was when Michaels wasn&rsquo;t around in the early eighties. For the past thirty years, claiming SNL was on the down seems to be more of a sport than a rational argument.</p>\n<p>Since Michaels' return, the show is subject to fractal cycles. Each night, some skits kill and some skits bomb. Generally, the front of the show is better than the back; if you stay tuned after &ldquo;Weekend Update&rdquo;, you should count yourself a long-time fan, willing to see some weird and/or flat skits, or asleep on the couch.</p>\n<p>If you zoom out to look at how a season flows, you&rsquo;ll again find shows that are really great and some that aren&rsquo;t. My theory is that this entirely depends on the quality of the host. A mediocre host seems to bring middling material out of the writers and performers. A good or high-profile host seems to bring good-but-not-great material and pretty good performances. One of the darling hosts, like Alec Baldwin and the more recent Jon Hamm, brings the A-game material from the writers and performers play up to the occasion.</p>\n<p>Interestingly, musical guests can bring a certain electricity too. Paul Rudd is a capable host, but pairing him with Paul McCartney led to a show that was pretty electric. I defy you to watch that episode and tell me SNL just isn&rsquo;t as good as it used to be.</p>\n<p>Zooming out to look at successive seasons, you see the same sort of up-and-down. Will Ferrell&rsquo;s first season was good, but not great. He definitely left at his sketch comedy peak, and the show was briefly weaker for it. But right on his heels came the Fey/Poehler/Rudolph powerhouse. There&rsquo;s an ebb and flow as casts come together, hammer out a few good seasons, and then move on to other stages.</p>\n<!-- raw HTML omitted -->\n<p>That&rsquo;s how I understand SNL. Perhaps I&rsquo;m seeing cognitive biases towards the show through my own cognitive biases. I think it&rsquo;s still a relevant benchmark of American pop culture.</p>\n",
				"content_text": "<em>Saturday Night Live</em> is a changing thing. It's not new like it was in the seventies, it's not a powerhouse like it was in the nineties, it may not be the training camp for NBC sitcoms anymore. Despite that, its still a big dog in the worlds of comedy and pop culture. Every time I hear or read \"<em>SNL</em> was better when…\", I cringe a little. As far as I can tell, this isn't true.\n\nEveryone's got their favorite cast. Ferrell/Shannon/Sanz/Oteri, Fey/Poehler/Rudolph, Hartman/Carvey/Myers. It seems largely to depend on whenever you started watching SNL or when you were a teenager or in college. So when someone says \"SNL isn't relevant any more\", I mentally substitute \"I liked SNL better with the cast I watched first.\"\n\nOver the years of watching and reading about SNL, I've come to understand that the show is very much about the people on camera, but Lorne Michaels <strong>is</strong> the show. The only time the show has been in consistent decline was when Michaels wasn't around in the early eighties. For the past thirty years, claiming SNL was on the down seems to be more of a sport than a rational argument.\n\nSince Michaels' return, the show is subject to fractal cycles. Each night, some skits kill and some skits bomb. Generally, the front of the show is better than the back; if you stay tuned after \"Weekend Update\", you should count yourself a long-time fan, willing to see some weird and/or flat skits, or asleep on the couch.\n\nIf you zoom out to look at how a season flows, you'll again find shows that are really great and some that aren't. My theory is that this entirely depends on the quality of the host. A mediocre host seems to bring middling material out of the writers and performers. A good or high-profile host seems to bring good-but-not-great material and pretty good performances. One of the darling hosts, like Alec Baldwin and the more recent Jon Hamm, brings the A-game material from the writers and performers play up to the occasion.\n\nInterestingly, musical guests can bring a certain electricity too. Paul Rudd is a capable host, but pairing him with Paul McCartney led to a show that was pretty electric. I defy you to watch that episode and tell me SNL just isn't as good as it used to be.\n\nZooming out to look at successive seasons, you see the same sort of up-and-down. Will Ferrell's first season was good, but not great. He definitely left at his sketch comedy peak, and the show was briefly weaker for it. But right on his heels came the Fey/Poehler/Rudolph powerhouse. There's an ebb and flow as casts come together, hammer out a few good seasons, and then move on to other stages.\n\n<hr />\n\nThat's how I understand SNL. Perhaps I'm seeing cognitive biases towards the show through my own cognitive biases. I think it's still a relevant benchmark of American pop culture.\n",
				"date_published": "2013-04-01T06:48:22-07:00",
				"url": "https://therealadam.com/2013/04/01/how-to-understand.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/25/context-is-data.html",
				"title": "Context is data to burst your bubbles",
				"content_html": "<p><!-- raw HTML omitted -->Designing with context<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Great design is built around people<!-- raw HTML omitted -->, not devices or software. Applying responsive design or native app UX is a tool, not a solution. Instead, we should design software that solves a problem for a real person (not a power-user or one of our colleagues) given the devices available to them <!-- raw HTML omitted -->and<!-- raw HTML omitted --> the context of use they&rsquo;re in.</p>\n<p>A high information density display is no good to a parent trying to get their kids out the door. Documentation based on video tutorials is no good for someone riding a bus. A developer troubleshooting a service bottleneck needs to know more than the average response time.</p>\n<p>As both designers of user experiences and developers of software, we need to <!-- raw HTML omitted -->get away from the desk and out amongst those we&rsquo;re building for<!-- raw HTML omitted -->. It&rsquo;s too easy to build for ourselves and our friends. We need to consider how others approach and use what we make. Armed with that context, we can <!-- raw HTML omitted -->design a solution for everyone<!-- raw HTML omitted -->, and not just those we share a bubble with.</p>\n",
				"content_text": "<a href=\"http://cennydd.co.uk/2013/designing-with-context\">Designing with context</a>:\n\n<p><blockquote>Context is a slippery topic that evades attempts to define it too tightly. Some definitions cover just the immediate surroundings of an interaction. But in the interwoven space-time of the web, context is no longer just about the here and now. Instead, context refers to the physical, digital, and social structures that surround the point of use.</blockquote></p>\n\n<strong>Great design is built around people</strong>, not devices or software. Applying responsive design or native app UX is a tool, not a solution. Instead, we should design software that solves a problem for a real person (not a power-user or one of our colleagues) given the devices available to them <em>and</em> the context of use they're in.\n\nA high information density display is no good to a parent trying to get their kids out the door. Documentation based on video tutorials is no good for someone riding a bus. A developer troubleshooting a service bottleneck needs to know more than the average response time.\n\nAs both designers of user experiences and developers of software, we need to <strong>get away from the desk and out amongst those we're building for</strong>. It's too easy to build for ourselves and our friends. We need to consider how others approach and use what we make. Armed with that context, we can <strong>design a solution for everyone</strong>, and not just those we share a bubble with.\n",
				"date_published": "2013-03-25T08:54:57-07:00",
				"url": "https://therealadam.com/2013/03/25/context-is-data.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/15/hyperthreading-illustrated.html",
				"title": "Hyperthreading illustrated",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<!-- wp:paragraph -->\n<p>I'm fond of saying hyperthreading is a lie. It's true though; a dual hyperthreaded core is nowhere near as awesome as a four real cores. That's more provocative than useful, so let me draw you some pictures.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you zoom way out, a single core, dual cores, and a single hyperthreaded core look like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"linkDestination\":\"custom\"} -->\n<figure class=\"wp-block-image\"><a href=\"http://therealadam.com/wp-content/uploads/2013/02/20130216-134550.jpg\"><img src=\"http://therealadam.com/wp-content/uploads/2013/02/20130216-134550.jpg\" alt=\"20130216-134550.jpg\" /></a></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Note how the hyperthreaded core is really a single core with an extra set of registers and instruction/stack pointers. The reason hyperthreading is a lie is <em>you can't actually run four processes, or even four threads, at the same time</em>. At best, you can run two threads with two others ready in the wings.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I'm a dilletante of processor architecture at best, but I think I can explain why chip designers would do this.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"linkDestination\":\"custom\"} -->\n<figure class=\"wp-block-image\"><a href=\"http://therealadam.com/wp-content/uploads/2013/02/20130216-134900.jpg\"><img src=\"http://therealadam.com/wp-content/uploads/2013/02/20130216-134900.jpg\" alt=\"20130216-134900.jpg\" /></a></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>My best guess as to why you would design and release a hyperthreaded core is to increase the number of instructions you can retire (i.e. mark as completely executed) per clock cycle. Instructions retired per cycle is one of the primary metrics processor architects use for judging a design.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The enemy of instructions retired per clock cycle is memory accesses and branch mispredictions. When a processor has to go access a cache line or worse, something out in main memory, it has nothing to do but wait. When a branch (i.e. a conditional or loop) is incorrectly speculatively executed (how awesome is it that processors start executing code paths before they even know if its the right thing to do?) they end up in the same predicament. Cache misses and branch mispredictions are at best a recipe for some overhead, and at worst a recipe for waiting around on main memory.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Hyperthreading attempts to solve this problem by keeping extra programs (threads or processes) waiting in the wings, ready to start executing as soon as another pauses due to needing something from main memory. This means our execution units, the things that actually do math and execute the logic of a program, are (almost) always utilized and retiring instructions. And that gets us to our happy place of a higher instructions retired per clock cycle.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Why not just throw more execution units in and have real cores ready to work? I'm not sure, there must be something about how modern processor pipelines work that I don't know which makes it too expensive to implement. That said, hyper threading (as I understand it) is a pretty clever hack for improving the efficiency of a processor.</p>\n<!-- /wp:paragraph -->\n",
				"date_published": "2013-03-15T07:58:19-07:00",
				"url": "https://therealadam.com/2013/03/15/hyperthreading-illustrated.html",
				"tags": ["Uncategorized","code:architecture","code:concurrency"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/14/textmates-beautiful-and.html",
				"title": "TextMate's beautiful and flawed extension mechanism",
				"content_html": "<p>This is about how TextMate&rsquo;s bundle mechanism was brilliant, but subtly flawed. However, to make that point, I need to drag you through a dichotomy of developer tools.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Ford identifies Maven and IDEs like Eclipse as tools that rely on contextual extension to get developer started with specific tasks very quickly. On the other hand, a composable tool exchange task-oriented focus for greater adaptability.</p>\n<!-- raw HTML omitted -->\n<p>And thus, the crux of the biscuit:</p>\n<!-- raw HTML omitted -->\n<p>Contextual tools are great right up to the point you hit the wall of the original developer&rsquo;s imagination. To proceed past that point requires a leap of one or two orders of magnitude in effort or complexity to achieve your goal which the original developer never intended.</p>\n<!-- raw HTML omitted -->\n<p>Ford wrote this as a follow-on to a piece Martin Fowler wrote about <!-- raw HTML omitted -->how one extends their text edior<!-- raw HTML omitted -->. It turns out that the extension models of popular text editors, such as VIM and Emacs, are more like composable systems than extension-based systems.</p>\n<p>All of this is a extremely elaborate setup for me to sing the praise of TextMate. Amongst the many things it got very right, TextMate brilliantly walked the line between a nerdy programmer&rsquo;s editor and an opinionated everyday tool for a wide range of developers. It did this by exposing its extension mechanism through two tools that every developer knows: scripts and regular expressions.</p>\n<p>To add functionality to TextMate, you make a bundle. A bundle is a convention for laying out a directory such that TextMate knows the difference between a template and a syntax definition through a convention. This works because developers know how to put things in the right folder. There were only ever five or so folders you needed to know about, so this was a simple mechanism that didn&rsquo;t become a burden.</p>\n<p>To tell TextMate how to parse a language and do nifty things like folding text, you wrote a bunch of regular expressions. If I recall, there were really only a few placeholders to wedge in these regular expressions. This worked great, as most languages, though the &ldquo;serious&rdquo; tools use lexers and parsers, are amenable to low-fidelity comprehension with a series of naive pattern matches. The downside was that languages that didn&rsquo;t look like C were sometimes odd to work with.</p>\n<p>In my opinion, the real beauty of TextMate&rsquo;s bundles was that all of the behavioral enhancement was handled with shell scripts. Plain-old Unix. You could write them in Ruby, Python, bash, JavaScript, whatever fit your fancy. As long as you could read environment variables and output text (or even HTML), you could make TextMate do new things. This led to an absolute explosion of functionality provided by the community. It was a great thing.</p>\n<!-- raw HTML omitted -->\n<p>Interestingly enough, TextMate is essentially a runtime for bundles. This is how VIM and Emacs are structured as well. TextMate just put a nicer interface around that bundle runtime. However, the way it did so was its downfall, at least for me.</p>\n<p>Recall, a few hundred words ago, the difference between composable and contextual extensions. A contextual extension is easy to get going, but comes up short when you imagine something the creator of the extension point didn&rsquo;t imagine. The phenomenal thing about TextMate was how well it chose the extension points and how much further those extension points took the program than what came before it. I&rsquo;d estimate that about 90% of what TextMate ever needed to do, you could do with bundles. But the cost to find that last 10%, it was brutal.</p>\n<p>Eventually, I bumped up against this limitation with TextMate. I wanted split windows, I wanted full-screen modes, I wanted better ctags integration. No one could add those (when TextMate wasn&rsquo;t open source, circa 2010) because they required writing Objective-C rather than using TextMate&rsquo;s extension mechanism. And so, I ended up on a different editor (<!-- raw HTML omitted -->after<!-- raw HTML omitted --> <!-- raw HTML omitted -->several<!-- raw HTML omitted --> <!-- raw HTML omitted -->months<!-- raw HTML omitted --> of <!-- raw HTML omitted -->wandering<!-- raw HTML omitted --> in a <!-- raw HTML omitted -->philosophical<!-- raw HTML omitted --> <!-- raw HTML omitted -->desert<!-- raw HTML omitted -->).</p>\n<!-- raw HTML omitted -->\n<p>If possible, you should choose a composable extension mechanism (a full-blown language, probably) and use that extension mechanism to implement your system, ala Vimscript/VIM and elisp/Emacs. If you can&rsquo;t do that, you can get most of the benefit by doing a plugin API, but you have to choose the extension points <!-- raw HTML omitted -->really, <!-- raw HTML omitted -->really<!-- raw HTML omitted --><!-- raw HTML omitted --> well.</p>\n",
				"content_text": "This is about how TextMate's bundle mechanism was brilliant, but subtly flawed. However, to make that point, I need to drag you through a dichotomy of developer tools.\n\n<h2>Composition vs. context in developer tools</h2>\n\n<p>What's the difference between a tool that developers work <em>with</em> and a tool developers often end up working against? Is there a useful distinction between tools that seem great at first, but end up loathed as time goes on? Neal Ford has ideas. <a href='http://nealford.com/memeagora/2013/01/22/why_everyone_eventually_hates_maven.html'>Why Everyone (Eventually) Hates (or Leaves) Maven</a>:</p>\n\n<p><blockquote>I defined two types of extensibility/programability abstractions prevalent in the development world: composable and contextual. Plug-in based architectures are excellent examples of the contextual abstraction. The plug-in API provides a plethora of data structures and other useful context developers inherit from or summon via already existing methods. But to use the API, a developer must understand what that context provides, and that understanding is sometimes expensive.\n</blockquote></p>\n\n<p><blockquote>Composable systems tend to consist of finer grained parts that are expected to be wired together in specific ways. Powerful exemplars of this abstraction show up in *-nix shells with the ability to chain disparate behaviors together to create new things.</blockquote></p>\n\nFord identifies Maven and IDEs like Eclipse as tools that rely on contextual extension to get developer started with specific tasks very quickly. On the other hand, a composable tool exchange task-oriented focus for greater adaptability.\n\n<p><blockquote>Contextual systems provide more scaffolding, better “out of the box” behavior, and contextual intelligence via that scaffolding. Thus, contextual systems tend to ease the friction of initial use by doing more for you. Huge global data structures sometimes hide behind inheritance in these systems, creating a huge footprint that shows up in derived extensions via their parents. Composable systems have less implicit behavior and initial ease of use but tend to provide more granular building blocks that lead to more eventual power.</blockquote></p>\n\nAnd thus, the crux of the biscuit:\n\n<p><blockquote>Contextual tools like Ant and Maven allow extension via a plug-in API, making extensions the original authors envisioned easy. However, trying to extend it in ways not designed into the API range in difficultly from hard to impossible...</blockquote></p>\n\nContextual tools are great right up to the point you hit the wall of the original developer's imagination. To proceed past that point requires a leap of one or two orders of magnitude in effort or complexity to achieve your goal which the original developer never intended.\n\n<h2>Bundles are beautiful</h2>\n\nFord wrote this as a follow-on to a piece Martin Fowler wrote about <a href=\"http://martinfowler.com/bliki/InternalReprogrammability.html\">how one extends their text edior</a>. It turns out that the extension models of popular text editors, such as VIM and Emacs, are more like composable systems than extension-based systems.\n\nAll of this is a extremely elaborate setup for me to sing the praise of TextMate. Amongst the many things it got very right, TextMate brilliantly walked the line between a nerdy programmer's editor and an opinionated everyday tool for a wide range of developers. It did this by exposing its extension mechanism through two tools that every developer knows: scripts and regular expressions.\n\nTo add functionality to TextMate, you make a bundle. A bundle is a convention for laying out a directory such that TextMate knows the difference between a template and a syntax definition through a convention. This works because developers know how to put things in the right folder. There were only ever five or so folders you needed to know about, so this was a simple mechanism that didn't become a burden.\n\nTo tell TextMate how to parse a language and do nifty things like folding text, you wrote a bunch of regular expressions. If I recall, there were really only a few placeholders to wedge in these regular expressions. This worked great, as most languages, though the \"serious\" tools use lexers and parsers, are amenable to low-fidelity comprehension with a series of naive pattern matches. The downside was that languages that didn't look like C were sometimes odd to work with.\n\nIn my opinion, the real beauty of TextMate's bundles was that all of the behavioral enhancement was handled with shell scripts. Plain-old Unix. You could write them in Ruby, Python, bash, JavaScript, whatever fit your fancy. As long as you could read environment variables and output text (or even HTML), you could make TextMate do new things. This led to an absolute explosion of functionality provided by the community. It was a great thing.\n\n<h2>Downfall</h2>\n\nInterestingly enough, TextMate is essentially a runtime for bundles. This is how VIM and Emacs are structured as well. TextMate just put a nicer interface around that bundle runtime. However, the way it did so was its downfall, at least for me.\n\nRecall, a few hundred words ago, the difference between composable and contextual extensions. A contextual extension is easy to get going, but comes up short when you imagine something the creator of the extension point didn't imagine. The phenomenal thing about TextMate was how well it chose the extension points and how much further those extension points took the program than what came before it. I'd estimate that about 90% of what TextMate ever needed to do, you could do with bundles. But the cost to find that last 10%, it was brutal.\n\nEventually, I bumped up against this limitation with TextMate. I wanted split windows, I wanted full-screen modes, I wanted better ctags integration. No one could add those (when TextMate wasn't open source, circa 2010) because they required writing Objective-C rather than using TextMate's extension mechanism. And so, I ended up on a different editor (<a href=\"http://therealadam.com/2010/04/30/who-are-we-that-make-software/\">after</a> <a href=\"http://therealadam.com/2010/04/26/those-who-think-with-their-fingers/\">several</a> <a href=\"http://therealadam.com/2010/05/12/a-brief-survey-of-the-history-of-editing-programs/\">months</a> of <a href=\"http://therealadam.com/2010/06/28/the-cadence-and-flow-of-editing-programs/\">wandering</a> in a <a href=\"http://therealadam.com/2010/05/23/a-personal-journey-in-editing-programs/\">philosophical</a> <a href=\"http://therealadam.com/2010/06/22/breaking-my-habits-for-editing-programs/\">desert</a>).\n\n<h2>The moral of the story</h2>\n\nIf possible, you should choose a composable extension mechanism (a full-blown language, probably) and use that extension mechanism to implement your system, ala Vimscript/VIM and elisp/Emacs. If you can't do that, you can get most of the benefit by doing a plugin API, but you have to choose the extension points <em>really, <strong>really</strong></em> well.\n",
				"date_published": "2013-03-14T11:00:27-07:00",
				"url": "https://therealadam.com/2013/03/14/textmates-beautiful-and.html",
				"tags": ["Uncategorized","on-editing-programs"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/14/austins-startup-vibe.html",
				"title": "Austin's startup vibe",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>In my few visits to San Francisco, I&rsquo;ve found that I cannot wrap my Texan brain around that town. Trying to really understand its startup culture with just a few visits to the city and Palo Alto is similarly folly. But I did notice the intensity that SF has. It&rsquo;s not a bad way to describe the town.</p>\n<p>That said, I think this is a pretty decent encapsulation of Austin. Austin is a slower town (slower even than Dallas) and revels in the variety of activities available to its people. The Austin tech community is more about smaller groups and individuals too. It&rsquo;s not (always) about aim-for-the-stars startups or working for large companies using large technology from large vendors. It&rsquo;s as much about a few people on a team or individuals hacking something out while enjoying their city, family, and friends.</p>\n<p>Obviously, I dig that a lot.</p>\n<p><!-- raw HTML omitted -->Update<!-- raw HTML omitted -->: I should mention that, while it&rsquo;s popular to write Austin off as a slacker town, there&rsquo;s a lot of people dedicated to their work and craft here. It&rsquo;s not all tacos and BBQ. The events I go to most often are frequented by people who using their evenings to learn something new or talk shop while they&rsquo;re <!-- raw HTML omitted -->making<!-- raw HTML omitted --> something. That is, I think, the most important factor of a startup community: the more people who are putting their evenings into making things, the more likely those things will end up awesome and grow into a business-like organism.</p>\n",
				"content_text": "<p>It's different from other towns. <a href='http://www.austingunter.com/2013/03/whats-the-difference-between-austin-and-san-francisco/'>What&#039;s the Difference between Austin and San Francisco?</a>:</p>\n\n<blockquote><p>Austin offers you more options, but greater variety means that, on the whole, Austinite’s don’t focus as intensely as in San Francisco.  Austin’s defining characteristic (part of it’s slacker culture) is a belief that intensity isn’t always the best thing. Austin believes in variety and moderation. This affects the startup community. Austin, the city, will let you pick and choose from its buffet line, and then admire the smorgasbord you put together. Your lifestyle is a work of art in Austin, and I think the culture rewards you for how you live as much as what you do, often moreso.</p></blockquote>\n\nIn my few visits to San Francisco, I've found that I cannot wrap my Texan brain around that town. Trying to really understand its startup culture with just a few visits to the city and Palo Alto is similarly folly. But I did notice the intensity that SF has. It's not a bad way to describe the town.\n\nThat said, I think this is a pretty decent encapsulation of Austin. Austin is a slower town (slower even than Dallas) and revels in the variety of activities available to its people. The Austin tech community is more about smaller groups and individuals too. It's not (always) about aim-for-the-stars startups or working for large companies using large technology from large vendors. It's as much about a few people on a team or individuals hacking something out while enjoying their city, family, and friends.\n\nObviously, I dig that a lot.\n\n<strong>Update</strong>: I should mention that, while it's popular to write Austin off as a slacker town, there's a lot of people dedicated to their work and craft here. It's not all tacos and BBQ. The events I go to most often are frequented by people who using their evenings to learn something new or talk shop while they're <em>making</em> something. That is, I think, the most important factor of a startup community: the more people who are putting their evenings into making things, the more likely those things will end up awesome and grow into a business-like organism.\n",
				"date_published": "2013-03-14T05:14:31-07:00",
				"url": "https://therealadam.com/2013/03/14/austins-startup-vibe.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/12/senior-vp-jeanluc.html",
				"title": "Senior VP Jean-Luc Picard, of the USS Enterprise (Alpha Quadrant division)",
				"content_html": "<p>If you&rsquo;re working from the Jean-Luc Picard book of management, a nice little Twitter account of Picard-esque tips on business and life, we can be friends. <!-- raw HTML omitted -->Consider<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->And<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>But I&rsquo;m not so sure about <!-- raw HTML omitted -->this one<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>If you&rsquo;re playing from home, the fictional characters that have most influenced my way of thinking are The Ghostbusters (all of them) and Jean-Luc Picard. I also learned everything I need to know about R&amp;B from The Blues Brothers.</p>\n",
				"content_text": "If you're working from the Jean-Luc Picard book of management, a nice little Twitter account of Picard-esque tips on business and life, we can be friends. <a href=\"https://twitter.com/PicardTips/status/311506040736858113\">Consider</a>:\n\n<blockquote>Picard management tip: Be willing to reevaluate your own behavior.</blockquote>\n\n<a href=\"https://twitter.com/PicardTips/status/311282489148731392\">And</a>:\n\n<blockquote>Picard diplomacy tip: Fighting about economic systems is just as nonsensical as fighting about religions.</blockquote>\n\nBut I'm not so sure about <a href=\"https://twitter.com/PicardTips/status/311142386510200833\">this one</a>:\n\n<blockquote>Picard management tip: Shave.</blockquote>\n\nIf you're playing from home, the fictional characters that have most influenced my way of thinking are The Ghostbusters (all of them) and Jean-Luc Picard. I also learned everything I need to know about R&amp;B from The Blues Brothers.\n",
				"date_published": "2013-03-12T15:16:39-07:00",
				"url": "https://therealadam.com/2013/03/12/senior-vp-jeanluc.html",
				"tags": ["Pop Culture","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/12/soundcloud-microservices-and.html",
				"title": "SoundCloud, micro-services, and software largeness",
				"content_html": "<p><!-- raw HTML omitted -->From a monolithic Ruby on Rails app to the JVM<!-- raw HTML omitted -->, how Soundcloud has transitioned to a hybrid approach with Ruby apps intermingling with Scala and Clojure apps. I think some of their idea of what is idiomatic Rails and how to operate Ruby are not exactly on center. But, their approach to the problem of a large Rails app is right on: break it up into &ldquo;micro-services&rdquo; that, if you don&rsquo;t like the code, you can rewrite quickly if necessary.</p>\n<p>Lest you fear this is yet another &ldquo;Rails doesn&rsquo;t scale!&rdquo; deck, they do make a key observation. &ldquo;Rails, PHP, etc. are a very good choice to start something&rdquo;. Once you get past &ldquo;starting&rdquo; and &ldquo;growing&rdquo; to &ldquo;successful and challenging&rdquo;, you&rsquo;ll face the same level of challenge no matter what you choose: Ruby or Java, MySQL or Riak. All the technologies we have today are challenged when they grow large.</p>\n<p>So don&rsquo;t let applications and services get large. Easy to say; hard, but worthwhile, to practice.</p>\n",
				"content_text": "<a href=\"http://www.slideshare.net/mobile/pcalcado/from-a-monolithic-ruby-on-rails-app-to-the-jvm\">From a monolithic Ruby on Rails app to the JVM</a>, how Soundcloud has transitioned to a hybrid approach with Ruby apps intermingling with Scala and Clojure apps. I think some of their idea of what is idiomatic Rails and how to operate Ruby are not exactly on center. But, their approach to the problem of a large Rails app is right on: break it up into \"micro-services\" that, if you don't like the code, you can rewrite quickly if necessary.\n\nLest you fear this is yet another \"Rails doesn't scale!\" deck, they do make a key observation. \"Rails, PHP, etc. are a very good choice to start something\". Once you get past \"starting\" and \"growing\" to \"successful and challenging\", you'll face the same level of challenge no matter what you choose: Ruby or Java, MySQL or Riak. All the technologies we have today are challenged when they grow large.\n\nSo don't let applications and services get large. Easy to say; hard, but worthwhile, to practice.\n",
				"date_published": "2013-03-12T07:47:08-07:00",
				"url": "https://therealadam.com/2013/03/12/soundcloud-microservices-and.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/11/those-who-make.html",
				"title": "Those Who Make, by hand",
				"content_html": "<p><!-- raw HTML omitted -->Those Who Make<!-- raw HTML omitted --> is a series about people who craft. Physical things, by hand, that don&rsquo;t come out the same every time. I love watching people make things, and I doubly love hearing their passion for whatever it is they&rsquo;re making. Even more enlightening, this is a very international series. It&rsquo;s not all hipster shops in San Francisco, Portland, and Brooklyn; it&rsquo;s everywhere.</p>\n<p>This is delightful stuff.</p>\n<p>[vimeo <a href=\"http://www.vimeo.com/58998157\">www.vimeo.com/58998157</a> w=500&amp;h=250]</p>\n<p>How coffee is made in a colorful shop in another country, shot in the &ldquo;Vimeo style&rdquo; (is this a thing?): that will <!-- raw HTML omitted -->always<!-- raw HTML omitted --> get me.</p>\n",
				"content_text": "<a href=\"https://vimeo.com/channels/thosewhomake/\">Those Who Make</a> is a series about people who craft. Physical things, by hand, that don't come out the same every time. I love watching people make things, and I doubly love hearing their passion for whatever it is they're making. Even more enlightening, this is a very international series. It's not all hipster shops in San Francisco, Portland, and Brooklyn; it's everywhere.\n\nThis is delightful stuff.\n\n[vimeo [www.vimeo.com/58998157](http://www.vimeo.com/58998157) w=500&amp;h=250]\n\nHow coffee is made in a colorful shop in another country, shot in the \"Vimeo style\" (is this a thing?): that will <em>always</em> get me.\n",
				"date_published": "2013-03-11T18:20:44-07:00",
				"url": "https://therealadam.com/2013/03/11/those-who-make.html",
				"tags": ["The System","Erudition"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/11/thoughts-on-being.html",
				"title": "Thoughts on \"Being a Senior Engineer\"",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer\" title=\"http://www.kitchensoap.com/2012/10/25/on-being-a-senior-engineer\">On Being a Senior Engineer</a> made the rounds late last year. Before I finished reading it, I felt it was pointing me down a path I hadn't realized was there but needed to go down. It's the kind of \"yes, this!\" writing that I often end up ineptly giving people a link to without the ability to explain why they should care or how amazing it is.</p>\n\n<p>I chewed on the original article for a few months, following the links, re-reading it. Basically, I'm trying to completely consume this idea of the responsibilities and abilities of a mature engineer. Below, a bunch of quotes that struck a chord with me and follow-up ideas.</p>\n\n<hr />\n<blockquote><p>I expect a “senior” engineer to be a mature engineer.</p></blockquote>\n\n<blockquote><p>Mature engineers seek out constructive criticism of their designs.</p></blockquote>\n\n<p>Here's an example of how I try to apply this: attempt to hold all the options (designs, causes, etc.) in your head. This is doubly important if you have identified a design or project plan as infeasible, but it appeals to those who <em>don't</em> have the whole thing in their head. Empathy and understanding of other points of view is crucial.</p>\n\n<blockquote><p>Being able to write a Bloom Filter in Erlang, or write multi-threaded C in your sleep is insufficient. None of that matters if no one wants to work with you.</p></blockquote>\n\n<p>A thousand times yes! I have often felt that internet culture lionizes those who are quick and merciless in cutting down those that don't agree or can't code as prodigiously as the original poster. A senior/mature engineer is not soley defined by typing the most code per day.</p>\n\n<blockquote><p>Be the engineer that everyone wants to work with.</p></blockquote>\n\n<p>Please, if you ever see me <em>not</em> being that engineer, tell me!</p>\n\n<blockquote><p>…they have a responsibility to others to make themselves interpredictable. In general, mature engineers are comfortable with working within some nonzero amount of uncertainty and risk.</p></blockquote>\n\n<p>This is from a section on making estimates. It's hard to make estimates, because they feel like binding contracts. If you're working with the right people, it's OK, they're <em>not</em> a contract. Make a guess and help others you work with understand the level of entropy involved in your project reaching a milestone at a specific date.</p>\n\n<blockquote><p>This code looks good, I’m proud of myself. I’ve asked other people to review it, and I’ve taken their feedback. Now: how long will it last before it’s rewritten? Once it’s in production, how will its execution affect resource usage? How much so I expect CPU/memory/disk/network to increase or decrease? Will others be able to understand this code? Am I making it as easy as I can for others to extend or introspect this work?</p></blockquote>\n\n<ol><li>The only time is runtime, but a lot of developers focus on the static, build-time properties of their code.\n</li><li>As a corollary, developers become the experts at the \"hypothetical\" of their code, and the ops team become the experts at the \"practical\" of their code. This isn't a good division of labor.\n</li></ol>\n<blockquote><p>Generosity of spirit is one of our core engineering values, but also a primary responsibility of our Staff Engineer position, a career-level position. These engineers spend the time to make sure that more junior or new engineers unfamiliar with the tech or processes we have not only understand what they are doing, but also why they are doing it.</p></blockquote>\n\n<p>I've found it challenging that I'm so far removed from the struggles of a junior developer that in some ways I don't even comprehend them anymore. Trying to help those who have come up through Hungry Academy, even just a little, has paid dividends in understanding \"junior\" programmers <em>and</em> more experienced developers who don't have <em>my</em> experiences.</p>\n\n<blockquote><p>They know that they work within a spectrum of ideal and non-ideal, and are OK with that. They are comfortable with it because they strive to make the ideal and non-ideal in a design explicit.</p></blockquote>\n\n<p>Again: hold all the things in your head, even though you take only one path. For now. It's <em>software</em> you can and <em>will</em> change your mind.</p>\n\n<p>Further: write software such that doing the right thing is easy, the wrong thing is hard, and amending the shortcomings is <em>possible</em> at a later time.</p>\n\n<blockquote><p>Being empathetic in this sense means having the ability to view the project from another person’s perspective and to take that into consideration into your own work.</p></blockquote>\n\n<p>Hold all the people, and their conflicting goals, in your head too. Isn't engineering fun?</p>\n\n<blockquote><p>…never go to your boss with a complaint about anything without at least one (ideally more than one) suggestion for a solution. Even demonstrating that you’ve tried working the problem on your own and came up empty-handed is better than an empty complaint.</p></blockquote>\n\n<p>There will always be things that suck. Complaining about them feels good! Proposing, advocating, and working on solutions is <em>better</em>.</p>\n\n<blockquote><p>The issue with cognitive biases is that we can be blissfully unaware of when we are interpreting data with our own brains in ways that defy empirical data, and can have a surprising effect on how we get work done and work on teams.</p></blockquote>\n\n<p>For every time I wonder what cognitive bias I'm currently exhibiting, I'm sure there's two more times when I have no idea. His list of biases is well worth reading into.</p>\n\n<p>Ten Commandments of Egoless Programming. Yes.</p>\n\n<blockquote><p>How people feel about technologies, technical decisions, and technical directions is just as important (if not more) than the facts about the details.</p></blockquote>\n\n<p>People are irrational. Work with it. People have scars learnt from bad experiences. Deal with it. Everyone has succeeded in different ways and made the right and wrong inferences from it. Listen when people talk and speak to what they are excited and concerned about.</p>\n",
				"date_published": "2013-03-11T06:31:31-07:00",
				"url": "https://therealadam.com/2013/03/11/thoughts-on-being.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/10/feynmans-mess-of.html",
				"title": "Feynman's mess of jiggling things",
				"content_html": "<p>Richard Feynman, in the process of explaining rubber bands:</p>\n<p>[youtube https://www.youtube.com/watch?v=baXv_5z7HVY&amp;w=420&amp;h=315]</p>\n<!-- raw HTML omitted -->\n<p>This simplification delights and amuses me. The great thing is its fractal truth: you can observe our lives at many levels and conclude that they are dynamic jiggling messes.</p>\n",
				"content_text": "Richard Feynman, in the process of explaining rubber bands:\n\n[youtube https://www.youtube.com/watch?v=baXv_5z7HVY&amp;w=420&amp;h=315]\n\n<blockquote>The world is a dynamic mess of jiggling things, if you look at it right!</blockquote>\n\nThis simplification delights and amuses me. The great thing is its fractal truth: you can observe our lives at many levels and conclude that they are dynamic jiggling messes.\n",
				"date_published": "2013-03-10T14:22:46-07:00",
				"url": "https://therealadam.com/2013/03/10/feynmans-mess-of.html",
				"tags": ["Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/04/the-rite-of.html",
				"title": "The Rite of March",
				"content_html": "<p><!-- raw HTML omitted -->INT. OFFICE:<!-- raw HTML omitted --> A team of enthusiastic young folk rush to get their “game changing” app ready for SXSW. A cacophony of phone calls, typing, and organizing swag.</p>\n<p><!-- raw HTML omitted -->EXT. PATIO:<!-- raw HTML omitted --> A team of folks that have done the SXSW ritual before look at their calendar, note it’s almost the middle of March, and shrug. They go back to drinking a tasty beverage and working at their own pace.</p>\n<p>[youtube=<a href=\"http://www.youtube.com/watch?v=oatJL7Trmys%5D\">www.youtube.com/watch</a></p>\n",
				"content_text": "<strong>INT. OFFICE:</strong> A team of enthusiastic young folk rush to get their “game changing” app ready for SXSW. A cacophony of phone calls, typing, and organizing swag.\n\n<strong>EXT. PATIO:</strong> A team of folks that have done the SXSW ritual before look at their calendar, note it’s almost the middle of March, and shrug. They go back to drinking a tasty beverage and working at their own pace.\n\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=oatJL7Trmys])\n",
				"date_published": "2013-03-04T14:31:15-07:00",
				"url": "https://therealadam.com/2013/03/04/the-rite-of.html",
				"tags": ["Comedy, haha"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/03/02/the-doubletap.html",
				"title": "The double-tap",
				"content_html": "<p>I use Alfred because I believe that my computer should be practically unusable to other people who try to use it. My goal is to put the things I use frequently close at hand. Conversely, the things I use rarely should be accessible without cluttering my most common workflows.</p>\n<p>Last week, I came up with a way to bring the two or three applications I use <!-- raw HTML omitted -->all the time<!-- raw HTML omitted --> very close to hand. Ladies and gentlemen, I present to you the double tap:</p>\n<!-- raw HTML omitted -->\n<p>Since I use VIM inside a terminal several hours a day, I want really quick access to iTerm 2. My thumb just happens to sit near the command key all day. Ergo, assigning a key to quickly switch to the terminal makes a lot of sense.</p>\n<p>But it gets even better! Alfred knows about double-taps of the control, alt, and command keys. So you can assign an application to each of those keys and <!-- raw HTML omitted -->really quickly<!-- raw HTML omitted --> switch back and forth between them. It&rsquo;s pretty rad.</p>\n<p>My experience is that this works exactly how I&rsquo;d want it to 80% of the time. A couple times a day, I will start to chord a different key combo and mysteriously end up in iTerm. It&rsquo;s not disruptive, just a little odd at first, and I keep going about my business.</p>\n<p>If you use Alfred with the Powerpack and love your keyboard, you should definitely start using double-taps.</p>\n",
				"content_text": "I use Alfred because I believe that my computer should be practically unusable to other people who try to use it. My goal is to put the things I use frequently close at hand. Conversely, the things I use rarely should be accessible without cluttering my most common workflows.\n\nLast week, I came up with a way to bring the two or three applications I use <em>all the time</em> very close to hand. Ladies and gentlemen, I present to you the double tap:\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2013/03/alfred.png\" alt=\"Alfred Preferences\" border=\"0\" width=\"894\" height=\"702\" /></div>\n\nSince I use VIM inside a terminal several hours a day, I want really quick access to iTerm 2. My thumb just happens to sit near the command key all day. Ergo, assigning a key to quickly switch to the terminal makes a lot of sense.\n\nBut it gets even better! Alfred knows about double-taps of the control, alt, and command keys. So you can assign an application to each of those keys and <em>really quickly</em> switch back and forth between them. It's pretty rad.\n\nMy experience is that this works exactly how I'd want it to 80% of the time. A couple times a day, I will start to chord a different key combo and mysteriously end up in iTerm. It's not disruptive, just a little odd at first, and I keep going about my business.\n\nIf you use Alfred with the Powerpack and love your keyboard, you should definitely start using double-taps.\n",
				"date_published": "2013-03-02T15:11:08-07:00",
				"url": "https://therealadam.com/2013/03/02/the-doubletap.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/02/24/computers-do-what.html",
				"title": "Computers do what we tell them to, except when we give up",
				"content_html": "<p>We tell ourselves, &ldquo;a computer only does what we tell it to.&rdquo; But, when it comes down to it, if we aren&rsquo;t getting the result we want out of the computer, we often give in and do whatever it is the <!-- raw HTML omitted -->computer<!-- raw HTML omitted --> wants us to do.</p>\n<p>I&rsquo;m fascinated by this phenomenon. Novices do it when they&rsquo;re confused, even a little afraid they may have done something wrong. Experts do it when they&rsquo;re frustrated and upset that the computer is preventing them from doing whatever it is they actually wanted to do.</p>\n<p>What&rsquo;s it say about our increasingly dependent relationship with computers? At what point do we give up on our own goal and do what the computer wants so we can make progress? Is it really computers we&rsquo;re giving into, or the dysfunction of the relationship between the designer, developer and the user of a computer?</p>\n<p>A maxim you could conduct your modern life by: <!-- raw HTML omitted -->beware technologists bearing a solution, lest it become another chore you have to tend to<!-- raw HTML omitted -->.</p>\n",
				"content_text": "We tell ourselves, \"a computer only does what we tell it to.\" But, when it comes down to it, if we aren't getting the result we want out of the computer, we often give in and do whatever it is the <em>computer</em> wants us to do.\n\nI'm fascinated by this phenomenon. Novices do it when they're confused, even a little afraid they may have done something wrong. Experts do it when they're frustrated and upset that the computer is preventing them from doing whatever it is they actually wanted to do.\n\nWhat's it say about our increasingly dependent relationship with computers? At what point do we give up on our own goal and do what the computer wants so we can make progress? Is it really computers we're giving into, or the dysfunction of the relationship between the designer, developer and the user of a computer?\n\nA maxim you could conduct your modern life by: <strong>beware technologists bearing a solution, lest it become another chore you have to tend to</strong>.\n",
				"date_published": "2013-02-24T11:34:10-07:00",
				"url": "https://therealadam.com/2013/02/24/computers-do-what.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/02/11/twitters-optimizations.html",
				"title": "Twitter's optimizations",
				"content_html": "<p>Data point: a few of the infrastructure pieces out of Twitter have been implemented in low-level, heavy metal C and they&rsquo;re optimizing on individual machines instead of architecture. Today, <!-- raw HTML omitted -->twitter/fatcache<!-- raw HTML omitted -->, a memcached-on-SSDs:</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s fascinating to observe Twitter&rsquo;s architectural growth from the outside. They quickly exceeded the capacity of typical MySQL setups, then of Ruby and Rails, then memcached alone. They&rsquo;ve got distributed filesystems, streaming distributed processing pipelines, and distributed databases. Now they&rsquo;re optimizing down to the utilization of their hardware, taking advantage of the memory-like latencies of SSDs. When you start caring about power and the size of your index entries, you&rsquo;ve reached a whole new level of Maslow&rsquo;s hierarchy of scaling.</p>\n<p>If trends continue and Twitter is a leader in how large-scale distributed systems are implemented, watch out. Twitter led many of us to Scala, ZooKeeper, and their own inventions like Storm and Finagle. Gird your programming and scaling fashion loins, because you’re about to learn a lot more about <!-- raw HTML omitted -->malloc<!-- raw HTML omitted -->, <!-- raw HTML omitted -->ERRNO<!-- raw HTML omitted -->, and processor architecture than you ever wanted to know!</p>\n",
				"content_text": "Data point: a few of the infrastructure pieces out of Twitter have been implemented in low-level, heavy metal C and they're optimizing on individual machines instead of architecture. Today, <a href='https://github.com/twitter/fatcache'>twitter/fatcache</a>, a memcached-on-SSDs:\n\n<blockquote>To understand why network connected SSD makes sense, it is important to understand the role distributed memory plays in large-scale web architecture. In recent years, terabyte-scale, distributed, in-memory caches have become a fundamental building block of any web architecture. In-memory indexes, hash tables, key-value stores and caches are increasingly incorporated for scaling throughput and reducing latency of persistent storage systems. However, power consumption, operational complexity and single node DRAM cost make horizontally scaling this architecture challenging. The current cost of DRAM per server increases dramatically beyond approximately 150 GB, and power cost scales similarly as DRAM density increases.</blockquote>\n\nIt's fascinating to observe Twitter's architectural growth from the outside. They quickly exceeded the capacity of typical MySQL setups, then of Ruby and Rails, then memcached alone. They've got distributed filesystems, streaming distributed processing pipelines, and distributed databases. Now they're optimizing down to the utilization of their hardware, taking advantage of the memory-like latencies of SSDs. When you start caring about power and the size of your index entries, you've reached a whole new level of Maslow's hierarchy of scaling.\n\nIf trends continue and Twitter is a leader in how large-scale distributed systems are implemented, watch out. Twitter led many of us to Scala, ZooKeeper, and their own inventions like Storm and Finagle. Gird your programming and scaling fashion loins, because you’re about to learn a lot more about <code>malloc</code>, <code>ERRNO</code>, and processor architecture than you ever wanted to know!\n",
				"date_published": "2013-02-11T16:03:23-07:00",
				"url": "https://therealadam.com/2013/02/11/twitters-optimizations.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/02/11/stella-by-starlight.html",
				"title": "Stella by Starlight",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>My latest weekend project, called <a href=\"http://rd.io/x/QFWiK0L2DgM\" title=\"http://rd.io/x/QFWiK0L2DgM\">\"Stella by Starlight\"</a> after a Charles Mingus recording, was to build an analytics-style dashboard for looking at random metrics and events generated by a faked-out backend. I started with these rules for myself:</p>\n\n<ul><li>Write every 30-60 minutes. If I don't keep myself honest in journaling this, I'll never get around to writing about it.\n</li><li>Use Scala for the backend service. More on this in a moment.\n</li><li>Learn D3.js. This is a primary goal of this exercise.\n</li><li>Maybe use Coffeescript. More on this too, below.\n</li></ul>\n\n<p>And now, my notes from periodic progress reports. I've annotated it with GitHub commits at each step; you can also peek at the <a href=\"https://github.com/therealadam/stella_by_starlight\">whole repo</a>.</p>\n\n<h1>Get started with Scalatra</h1>\n\n<p>Per my motivation to use Scala, I figured I'd start with <a href=\"http://scalatra.org\" title=\"http://scalatra.org\">Scalatra</a>. It integrates with Akka, which seems like a great thing, sticks pretty close to the Sinatra-style of web app construction, and seems like its probably approachable by a Scala beginner.</p>\n\n<p>Strike 1 is that you need to use this <a href=\"https://github.com/n8han/giter8/\" title=\"https://github.com/n8han/giter8/\">giter8</a> tool. Luckily, it's available via Homebrew, so it's not a blocker.</p>\n\n<p>Strike 2 is <a href=\"http://scalatra.org/2.2/guides/resources/coffeescript.html\" title=\"http://scalatra.org/2.2/guides/resources/coffeescript.html\">all the work</a> needed to setup a Coffeescript gizmo to work with Scalatra. I've been blocked on SBT-related stuff before, and the instructions don't match the style of SBT project that was generated by giter8.</p>\n\n<p>So I have a decision to make: should I plow forward with Scala and drop CoffeeScript or make a strategic retreat to the comfortable land of Ruby where there's probably a thing that will automatically compile CoffeeScript every time I hit a page?</p>\n\n<p>For this weekend, I'm going to tradeoff getting better with Scala instead of CoffeeScript. The latter's domain is browsers, a domain I have chosen not to optimize myself for.</p>\n\n<p>First commit: <a href=\"https://github.com/therealadam/stella_by_starlight/commit/8f025f450b8b14c921ec995811c4dd8603abf147\" title=\"https://github.com/therealadam/stella_by_starlight/commit/8f025f450b8b14c921ec995811c4dd8603abf147\">I have no idea what I'm doing</a>.</p>\n\n<h1>Boilerplates</h1>\n\n<p>With one decision down, I need to figure out what my first real milestone is. It seems like a spike/prototype project like this requires two setup steps before real work can begin:</p>\n\n<ul><li><strong>Put all the project boilerplate in place</strong>. Get the backend service running and responding to requests. Decide on any front-end boilerplate I'm going to use (Twitter bootstrap, et. al.) and put it where your server will hand it off to a browser.\n</li><li><strong>Get your feedback loop working.</strong> Make a trivial change to the backend app, make sure it appears in the front-end. Make a front-end change and make sure everything changes properly.\n</li></ul>\n<p>Once I've got these two nailed down, I'm ready to actually iterate on the idea in your head.</p>\n\n<p>I've got the Scalatra part of this working, and just fetched Bootstrap. Now I just need to get its boilerplate working and I can start actually working on an analytics dashboard.</p>\n\n<h1>Templates and cargo cults</h1>\n\n<p>So Scala can manipulate XML as a language-level thing. This is both terrifying and, in the case of emitting HTML inline within a Scalatra action, useful. But the limit of this is that not-quite-valid XML, but perfectly reasonable HTML, will cause your Scala program to flat-out not compile. Ergo, I decided it was time to bite the bullet and move my HTML bits into an actual template (<a href=\"https://github.com/therealadam/stella_by_starlight/commit/1284875ef0417157073226bc7f0737a91db31512\" title=\"https://github.com/therealadam/stella_by_starlight/commit/1284875ef0417157073226bc7f0737a91db31512\">commit</a>).</p>\n\n<p>That turned out to be pretty easy. Read the Scalate (Scalatra view templates) <a href=\"http://scalatra.org/2.2/guides/views/scalate.html#toc_257\" title=\"http://scalatra.org/2.2/guides/views/scalate.html#toc_257\">docs</a>, skim the actual Scalate <a href=\"http://scalate.fusesource.org/documentation/ssp-reference.html\" title=\"http://scalate.fusesource.org/documentation/ssp-reference.html\">docs</a> and you're mostly good to go. The only catch is that I had pre-generated HAML-style templates laying around which were causing a weird error about <code>title</code> not being defined. Once I figured out I had cruft laying around and killed it dead, all was pretty good.</p>\n\n<p>I cargo culted <a href=\"http://twitter.github.com/bootstrap/examples/marketing-narrow.html\" title=\"http://twitter.github.com/bootstrap/examples/marketing-narrow.html\">all</a> the CSS from a Twitter Bootstrap example and ended up with something decent looking. Note to past-self: HTML and CSS are terrible, but things like Bootstrap <em>will</em> make it reasonably possible to put up a decent-looking app quickly without needing a designer or browser-bug expert.</p>\n\n<p>The change loop for Scalatra is nice and quick when doing front-end work. The SBT feature that watches the filesystem for changes and automatically runs tasks on change is pretty handy and, IMO, a better place for that functionality than in something like Guard.</p>\n\n<h1>Let there be charts</h1>\n\n<p>Now I want to get Cubism in place. At first glance, I thought I was goinging against the grain here. Cubism has a slight tendency towards using Graphite or Cube as the metric source. However, the demo page for Cubism shows some charts using random data.</p>\n\n<p>Peeking at the source showed me the way to creating a data source that isn't pulling from Graphite or Cube (<a href=\"https://github.com/therealadam/stella_by_starlight/commit/63bcbb0b00f2bc6b81fcb79c9d2f11ddb1902171\" title=\"https://github.com/therealadam/stella_by_starlight/commit/63bcbb0b00f2bc6b81fcb79c9d2f11ddb1902171\">commit</a>). This saved me the effort of trying to reverse engineer the Graphite/Cube query APIs before I could make any progress at all.</p>\n\n<p>This points to an important lesson of prototyping: <strong>when in doubt, steal from the example</strong> that looks like what I want to do. It's totally OK to cargo-cult things into your system at this point. Later on, I can do it with software engineering and craftsmanship. In the present, I want to make progress on exploring my idea.</p>\n\n<h1>Random numbers as a service</h1>\n\n<p>Now I want to emit some random numbers via JSON from the service. This ended up being a not-so-tough journey into actual Scala. Turns out the <a href=\"http://scalatra.org/2.2/guides/formats/json.html\" title=\"http://scalatra.org/2.2/guides/formats/json.html\">JSON support in Scalatra</a> is pretty straight-forward. I had to take a side-trip through JodaTime, a library I'd heard about before but never worked with directly. Of course, that resulted in some temporary Maven confusion, but all was well in the end (<a href=\"https://github.com/therealadam/stella_by_starlight/commit/a208b97e295d705886405e1dd6bf811c13632f0f\" title=\"https://github.com/therealadam/stella_by_starlight/commit/a208b97e295d705886405e1dd6bf811c13632f0f\">commit</a>).</p>\n\n<p>I was pleased by how one can go about <a href=\"https://github.com/therealadam/stella_by_starlight/blob/a208b97e295d705886405e1dd6bf811c13632f0f/src/main/scala/stella/StellaServlet.scala#L28-L41\" title=\"https://github.com/therealadam/stella_by_starlight/blob/a208b97e295d705886405e1dd6bf811c13632f0f/src/main/scala/stella/StellaServlet.scala#L28-L41\">quickly emitting JSON from a Scalatra action</a>. What you do is write a case class (somewhat analogous to a Ruby struct, but with more tricks up it s sleeve) for the structure you're going to convert to JSON. Then you return one or more instances of that class from your action and the library handles the rest. All of this mostly made sense when I read the examples and converted it to my own thing, so I guess the basics of Scala are starting to stick. Happy!</p>\n\n<h1>Better random numbers, an attempt</h1>\n\n<p>I wanted to generate more realistic data from the service. I figured I would port the random metric generator from the Cubism example's JavaScript to Scala. This would make it easier for me to grok the timeline windowing scheme that Cubism uses.</p>\n\n<p>It ended up that porting this algorithm was a bit trickier than I thought. Oddly enough, you can paste the crux of the algorithm from JavaScript to Scala and it <em>looks</em> like valid Scala. However, doing so gave me compiler errors that took me a little while to work out. Basically, the algorithm expects to work with doubles, but the compiler infers integers if you specify any default value such as <code>start = 0</code>. Adding type annotations to declarations resolves all of this. With that worked out, making the Scala compiler happy was a little more obvious.</p>\n\n<p>It turned out that the Cubism example, as I cargo culted it, passes timestamp strings to the service. It was getting late and the first few things I tried to parse timestamps in Scala didn't work out, so I decided to call it there (<a href=\"https://github.com/therealadam/stella_by_starlight/commit/c2a8b7fa84e7b8ea7dfc062a39e693bd15857f46\" title=\"https://github.com/therealadam/stella_by_starlight/commit/c2a8b7fa84e7b8ea7dfc062a39e693bd15857f46\">embarrassingly broken commit</a>).</p>\n\n<h1>How'd I do?</h1>\n\n<p>On the bright side, I didn't get hung up on Maven dependencies, I roughed my way through the Scala type system, and I had a pleasant experience with Scalatra and Cubism. On the downside, I didn't get to streaming events to the browser from the server and I couldn't quite get random metrics flowing from the server into the browser.</p>\n\n<p>These weekend hacks are like that. I learn about things I expected to learn about and I learn about entirely different things too. I didn't expect to find myself pressing ahead with Scala, but doing so was an entirely different kind of educational fun than if I hadn't.</p>\n\n<p>The nice things about these weekend hacks is that they're just that; a hack over the weekend. It's not a big project that I am responsible for afterwards. But it's still enough progress that I can write about it here and share it on GitHub. That feels productive. Learning <em>plus</em> productivity feels really good!</p>\n",
				"date_published": "2013-02-11T08:16:20-07:00",
				"url": "https://therealadam.com/2013/02/11/stella-by-starlight.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/02/08/dont-isolate-yourself.html",
				"title": "Don't isolate yourself",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>As a remote developer, <strong>it's tempting to create an environment where all you do is focus</strong> on churning out the code you're paid to write. Minimal email distractions, no noise, meetings and chats only when you want it. Seems pretty ideal on paper!</p>\n\n<p>I've found the exact opposite. Checking out of a team like that, even if I'm fulfilling all my duties, robs me of valuable context. It's handy to know what other people are working on, when they're succeeding, and how they're learning from failures. It might not directly relate to my work, but it helps to <strong>stay aware of the environment into which your work fits</strong>.</p>\n\n<p>I recently \"turned on the floodgate\" for the development organization around me. In our GitHub install, I picked one or two projects from each development team to follow. Since most teams use a pull-request workflow, I get a few dozen emails per day that give me the chance to peek into the cadence of a team's work. This fills in context I miss in Campfire or your typical email broadcast.</p>\n\n<p><strong>My job as a developer <em>isn't</em> to know all the things</strong> going on; I'm not suggesting you keep close tabs on every project. Instead, I'm trying to keep my finger on the pulse of colleagues on other teams. I find myself better prepared to help them out and make my own projects fit in with where the organization as a whole needs to go.</p>\n",
				"date_published": "2013-02-08T09:06:36-07:00",
				"url": "https://therealadam.com/2013/02/08/dont-isolate-yourself.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/02/07/adams-law-of.html",
				"title": "Adam’s Law of Redis",
				"content_html": "<p><!-- raw HTML omitted -->No matter how many times you tell everyone to not use <!-- raw HTML omitted -->KEYS<!-- raw HTML omitted -->, there remains a non-empty set of people who think they can use <!-- raw HTML omitted -->KEYS<!-- raw HTML omitted -->.<!-- raw HTML omitted --></p>\n<p>You can&rsquo;t use <!-- raw HTML omitted --><!-- raw HTML omitted -->KEYS<!-- raw HTML omitted --><!-- raw HTML omitted --> because it has to look at <!-- raw HTML omitted -->every<!-- raw HTML omitted --> key in the database. Even if you use a prefix pattern to narrow the scope.</p>\n<p><!-- raw HTML omitted -->Don&rsquo;t use KEYS.<!-- raw HTML omitted --> If that means you need to redesign your schema, you have no choice but to redesign your schema.</p>\n",
				"content_text": "<strong>No matter how many times you tell everyone to not use <code>KEYS</code>, there remains a non-empty set of people who think they can use <code>KEYS</code>.</strong>\n\nYou can't use <a href=\"http://redis.io/commands/keys\"><code>KEYS</code></a> because it has to look at <em>every</em> key in the database. Even if you use a prefix pattern to narrow the scope.\n\n<strong>Don't use KEYS.</strong> If that means you need to redesign your schema, you have no choice but to redesign your schema.\n",
				"date_published": "2013-02-07T12:34:18-07:00",
				"url": "https://therealadam.com/2013/02/07/adams-law-of.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/28/thoughts-on-programming.html",
				"title": "Thoughts on (Programming) Scala",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>On a whim, I flew through <a href=\"http://shop.oreilly.com/product/9780596155964.do\"><em>Programming Scala</em></a> this weekend. I&#8217;ve had the book for a while, and actively tried to read it before. But this time, it stuck.</p>\n\n<p>All the ideas in Scala are fascinating for a language nerd. It&#8217;s the best instance I know of, so far, where ideas from object-oriented and functional programming are combined intentionally and at-scale to produce a language that developers are using on a day-to-day basis. For a language nerd like me, it&#8217;s fun to see how all those ideas play out together.</p>\n\n<p>That said, there is <em>a lot</em> of language lawyering. Having to write a chapter on scoping and public/protected/private rules in OO seems like a demoralizing thing for the authors to tackle. And all those hybrid OO/FP ideas come at a conceptual cost; it seems like there&#8217;s <em>a lot</em> to know. I&#8217;ve noted before that <a href=\"http://therealadam.com/2010/12/06/a-language-experiment-writ-large/\">I&#8217;m very interested to see how Scala does</a> in the marketplace of minds. It&#8217;s a very large language, but I think it&#8217;s large in a way that is already familiar to developers. So it could end up that Scala isn&#8217;t a great beginner language, but is fine for someone who already knows one FP and one OO language.</p>\n\n<p>I should note that this isn&#8217;t my first Scala rodeo. I&#8217;ve tried, at various times, to tinker and hack on little projects or simply to grok other people&#8217;s code. The blocker on these previous attempts is that I, personally, am sbt-challenged. Whenever I&#8217;ve tried to compile projects or add dependencies to my own, I end up in an sbt-shaped trough of disallusionment. Part of this is my ongoing war of attrition with Maven. Part of this is, well, I&#8217;m not sure yet. I should note that I can mostly make leiningen, also Maven-based, work. So it&#8217;s not <em>entirely</em> Maven&#8217;s fault.</p>\n\n<p>Most interesting to me is that Scala <em>could</em> have the versatility of Ruby, wherein one can grow a program from a script, to a message-based program, to a hybrid OO/functional system, to a multi-machine distributed program. You can&#8217;t say this about other JVM languages like Java or Clojure. The JVM is a gift and a curse. It makes Scala and Java impractical for scripts, due to startup time. But once your program is somewhat grown-up, Hotspot and the JVM&#8217;s excellent concurrency features come in quite handy.</p>\n\n<p>More specific to the book, it cleared up some ideas I&#8217;d previous found confusing:</p>\n\n<ul>\n<li>What&#8217;s a method call/operator overloading? It&#8217;s an object, a dot or space, and then a method/operator name.</li>\n<li>Implicit methods/views; if you declare methods with the <code>implicit</code> keyword and they have the right type signature, the compiler will use them to coerce objects to your own types, giving you many of the benefits of something like Ruby&#8217;s open classes</li>\n<li>How functions, maps, and ad-hoc data structures that are typical in Ruby map to actual types in Scala; lots of things get converted to <code>Function</code> and <code>Tuple</code> objects by the compiler, which makes sense when you think about it in an ML-ish everything-is-strongly-typed way.</li>\n<li>Internal DSLs feel weird, but parser combinators for external DSLs seems like it would be great.</li>\n<li>for-comprehensions; I guess I&#8217;ve read enough about them in Clojure now that they make sense in Scala. It&#8217;s worth noting that Scala&#8217;s for-comprehensions feel simpler than Clojure&#8217;s.</li>\n<li>Self-type annotations; I&#8217;ve seen this all over in Scala code and didn&#8217;t quite understand what was going on. It sure does have an odd name.</li>\n</ul>\n\n<p>And some things are still confusing to me:</p>\n\n<ul>\n<li>Type bounds, variance; when will I need these?</li>\n<li>Linearization of object hierarchies; rules, I don&#8217;t like learning them!</li>\n<li>Tail-calls/trampolines; the JVM makes this a headhurt.</li>\n<li>Path-dependent types; not sure when I&#8217;d really need this, but it&#8217;s good to know about.</li>\n<li>Anything that&#8217;s a band-aid over type-erasure; again, the JVM is sometimes a headhurt.</li>\n</ul>\n\n<p>I don&#8217;t have any projects that imminently need the things that Scala provides. Further, I think imposing Scala on a team that&#8217;s already succeeding at Ruby or Python is a stretch. You have to be in a place where you <em>really</em> need low, predictable latencies to accept the tradeoff of working with a much larger language. </p>\n\n<p>That said, it&#8217;s totally a reasonable choice as a way to get yourself onto the JVM; if Clojure isn&#8217;t your thing, Scala probably is. Even if neither are your thing, don&#8217;t be a wuss; read some code in either language and expand your mind to reduce your headhurt.</p>\n",
				"date_published": "2013-01-28T07:03:28-07:00",
				"url": "https://therealadam.com/2013/01/28/thoughts-on-programming.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/22/lessons-from-premature.html",
				"title": "Lessons from premature design",
				"content_html": "<p>Lessons from <!-- raw HTML omitted -->Premature Abstractions Illustrated<!-- raw HTML omitted -->. I&rsquo;ve run afoul of all three of these:</p>\n<!-- raw HTML omitted -->\n<p>Don’t let your technical solution influence your design decisions. It’s the tool that needs to fit the job, not the other way round.</p>\n<p>Don’t build abstractions as long as you have no proven idea on how the levels below that abstraction will look like.<!-- raw HTML omitted --></p>\n<p>I could have used an outside, trusted voice to gently reel me in if when I went off into the unproductive weeds. Someone to ask &ldquo;how will this help the team in two weeks?&rdquo;, someone to point out ideas that might be great but have only achieved greatness in my head. A person who is asking questions because they want me to succeed, not because they&rsquo;re trying to take me down a notch.</p>\n<p>I have rushed into implementing the first idea in my head. Sometimes I&rsquo;ve convinced myself that my first idea is the best, despite knowing I need to review it from more angles. I&rsquo;ve jumped into projects with a shiny new tool and a bunch of optimism, only to cut myself on a sharp edge later on.</p>\n<p>I&rsquo;ve built systems that look fine on their own, but don&rsquo;t fit into the puzzle around them. I&rsquo;ve isolated myself building up that system, afraid to figure out how to fit my system into the puzzle in a useful way. I&rsquo;ve used mocks and stubs to unintentionally isolate myself from the real system.</p>\n<p>Basically, these are all really good ways to paint yourself into a corner. It seems like being in a corner with a shiny new system/tool/abstraction would be nice. Unfortunately, my experience is that once you have to make sense of that abstraction in a team, things get dicey.</p>\n<p>It&rsquo;s dangerous to run a software project on your own! Take a friend.</p>\n",
				"content_text": "Lessons from <a href=\"http://jan.krutisch.de/en/2013/01/06/premature-extractions-illustrated.html\">Premature Abstractions Illustrated</a>. I've run afoul of all three of these:\n\n<blockquote>Make sure you have someone on the team or externally available that will keep the critical, outside look at the project, ready to scream and shout if things turn bad.\n\nDon’t let your technical solution influence your design decisions. It’s the tool that needs to fit the job, not the other way round.\n\nDon’t build abstractions as long as you have no proven idea on how the levels below that abstraction will look like.</blockquote>\n\nI could have used an outside, trusted voice to gently reel me in if when I went off into the unproductive weeds. Someone to ask \"how will this help the team in two weeks?\", someone to point out ideas that might be great but have only achieved greatness in my head. A person who is asking questions because they want me to succeed, not because they're trying to take me down a notch.\n\nI have rushed into implementing the first idea in my head. Sometimes I've convinced myself that my first idea is the best, despite knowing I need to review it from more angles. I've jumped into projects with a shiny new tool and a bunch of optimism, only to cut myself on a sharp edge later on.\n\nI've built systems that look fine on their own, but don't fit into the puzzle around them. I've isolated myself building up that system, afraid to figure out how to fit my system into the puzzle in a useful way. I've used mocks and stubs to unintentionally isolate myself from the real system.\n\nBasically, these are all really good ways to paint yourself into a corner. It seems like being in a corner with a shiny new system/tool/abstraction would be nice. Unfortunately, my experience is that once you have to make sense of that abstraction in a team, things get dicey.\n\nIt's dangerous to run a software project on your own! Take a friend.\n",
				"date_published": "2013-01-22T10:45:16-07:00",
				"url": "https://therealadam.com/2013/01/22/lessons-from-premature.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/14/semanticsempathy.html",
				"title": "Semantics/Empathy",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>People argue about words all the time. In the past two weeks, I've participated and watched as nerds unproductively tried to convince each other that they are incorrectly using the words <a href=\"https://github.com/twitter/bijection/issues/41\" title=\"https://github.com/twitter/bijection/issues/41\">bijection</a>, <a href=\"http://therealadam.com/2012/12/21/why-im-down-on-hypermedia-containers/\" title=\"http://therealadam.com/2012/12/21/why-im-down-on-hypermedia-containers/\">hypermedia</a>, and <a href=\"http://david.heinemeierhansson.com/2012/dependency-injection-is-not-a-virtue.html\" title=\"http://david.heinemeierhansson.com/2012/dependency-injection-is-not-a-virtue.html\">dependency injection</a>. Nerds easily fall into this trap because many of us are fascinated by knowledge, sharing that knowledge, and teaching that knowledge.</p>\n\n<p>Arguing about words is fun. Arguing about words is practically useless.</p>\n\n<h1>Semantics are good</h1>\n\n<p>Words are a tricky business. An overused, overloaded, or ambiguous word isn't particularly useful. \"Synergize\", \"web-scale\", or \"rockstar\" are mush words that don't convey much meaning anymore. It's tempting to think that encouraging others to be judicious in their use of words and mind the specific context and meaning of their statements could move the needle in making the world better.</p>\n\n<p>On the other hand, <strong>human interaction is fidgety</strong>. We all have differing experiences, so the way we <em>think</em> and <em>feel</em> about things can vary wildly. You might say \"we should pivot our business\", remembering the time you did so and took the company in a much better direction. I might hear you say \"pivot\" and think about all the abuses of the word in startup discourse or all the companies that have \"pivoted\" and still failed. Even though we are thinking of the same definition of \"pivot\", we are thinking different things.</p>\n\n<p><strong>Semantics are good for getting two people in the same mental ballpark</strong>. I can say \"web framework\" and expect you to know I'm not talking about dogs, tacos, coffee, or compilers. You and I may differ on what a web framework is and what it does, but at least we're both thinking of things that help developers build web-based applications. We may not be talking about the same thing, but we're close.</p>\n\n<p>This is why I think strong semantics are interesting, but not a silver bullet. Very <strong>rarely have I solved a problem by applying stronger semantics</strong> to the words used in the discussion of the problem. <em>Never</em> have I solved a problem by telling someone they are using the wrong semantics and that they should correct themselves.</p>\n\n<p>We can argue about words all we want, but it's not getting us any closer to solving the real problem. The problem we started talking about before we decided to have a side argument on the meaning of a word.</p>\n\n<h1>Empathy is better.</h1>\n\n<p>Empathy is a better tool. When someone misuses a word, I stop myself and think, \"OK, let's allow that one to slide. What are they really trying to say?\" Rarely does someone misuse a word on purpose. It's more likely they know it in a different context; discovering that context and matching it to your own is how the conversation moves forward.</p>\n\n<p>If you say \"we need to pivot our web  commerce company to a web framework consultancy\", I may not know precisely what you mean by \"pivot\", \"web framework\", or \"consultancy\" but <strong>I can get on the same page with you</strong>. You think we need to change directions and that some services-oriented business based on helping people build web applications is the way to move forward. Armed with that, I can ask you questions about why we need to change directions, what that web framework looks like, or how we would change ourselves to a services-oriented company. It's not as important that you get the words right; <strong>it's important that we find a way to talk about the same thing</strong>.</p>\n\n<p>Words are fun, but what's useful is to <strong>figure out what the other person is thinking or feeling</strong> and talk to that. Setting aside the tension of telling someone they're wrong, it's not productive. <strong>I'd rather talk about how we can make better</strong> programs or better understand our world than foible over the meanings of a few words.</p>\n\n<p><strong>Words are a lossy representation</strong>, they can't possibly ever connote the full meaning and nuance of any idea of interesting size. Don't get caught up in skirmishes about the marginally important details of semantics. Use words to show others what you're thinking and guide them towards your understanding of the problem and a proposed solution. </p>\n",
				"date_published": "2013-01-14T09:28:19-07:00",
				"url": "https://therealadam.com/2013/01/14/semanticsempathy.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/06/reflecting-on-ruby.html",
				"title": "Reflecting on Ruby releases",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Ruby 1.8 brought us a couple changes that made many kinds of metaprogramming easier, plus a whole bunch of library additions that made Ruby feel more \"grown up\". Without seeking external libraries, <strong>one could write Ruby to solve many problems developers face</strong> in commonplace jobs. I wasn't around for Ruby 1.6, but I've been thinking of Ruby 1.8 as a transition from \"better Perl or Java\" to \"better Smalltalk\".</p>\n\n<p>Ruby 1.9 brought us features that <strong>make some functional programming idioms easier</strong>. Lambdas, i.e. anonymous functions, require less syntax and are better defined. Enumerators make it possible to use features of Enumerable, itself a very functional-esque feature, in more places. Symbol-to-proc makes it easier to pass methods around as blocks, another FP-esque practice. I might say that Ruby 1.9 is the \"better MatzLisp\" version of Ruby.</p>\n\n<p>Ruby 2.0 is bringing us features that, on the surface, make it easier for Rails to extend the Ruby language via ActiveSupport. I think that's too shallow of a reading. The new tools in Ruby 2.0 (excepting the highly-controversial refinements) <strong>make it easier to cleanly add functionality to Ruby's core objects</strong> and library. Reducing the cost of extending the core make it possible for more libraries and applications to <em>judiciously</em> make high-leverage additions to the lower levels of Ruby. That seems like a pretty good thing.</p>\n\n<p>I can't find a source for this, but I could have sworn I once read that <strong>all programming is language design</strong>. It was probably related to Lisp, where you're arguably directly manipulating the AST much of the time. If the changes in Ruby 2.0 can take us closer to this level of program design, where we think more about building language up to the problem domain instead of objects and mechanism, sign me up.</p>\n",
				"date_published": "2013-01-06T08:23:58-07:00",
				"url": "https://therealadam.com/2013/01/06/reflecting-on-ruby.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/03/design-for-test.html",
				"title": "Design for test vs. design for API",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>How many design considerations are there in an almost trivial method? Let's look at two of them. Consider this code:</p>\n\n<pre><code>def publish!\n  self.update_attributes(created_at: Time.now)\nend</code>\n</pre>\n\n<p>If you've been studying OO design and the SOLID principles, using TDD as a practice to guide you towards those ideas, there's a missing piece here. The reference to <strong><code>Time</code> is a dependency that should be injected</strong>. In Ruby, it's really easy for us to fix that:</p>\n\n<pre><code>def publish!(time=Time.now)\n  self.update_attributes(created_at: time)\nend</code>\n</pre>\n\n<p>I suspect a lot of TDDers would instinctively write the above first, skipping the first version by force of habit. But, let's stop and think about what the drives us to want the second version.</p>\n\n<p>The strength of the second version is that it is <strong>designed for test</strong>. If we need to test how this model behaves when it is published at night, or on a leap day, or the day before Arbor Day, injecting the time object makes that easier.</p>\n\n<p>There are some other test-focused design direction this method could go. We could create our own object whose role is to hand out timestamps, which would allow us to reasonably stub out the time reference, instead of injecting it. I'll bet there are other approaches lurking out there as well. </p>\n\n<p>I want to look at another set of design considerations. I could design this code for testability, which often leads me to code that follows the SOLID principles which often leads me to decoupled code that is easier to change later. To many people, that's a good thing.</p>\n\n<p>However, there's another lens I can look through: <strong>API design</strong>. How does this method hold up as a piece of behavior that developers will leverage?</p>\n\n<p>Strictly speaking, the TDD'd version is a more complicated API. Even <strong>adding one optional parameter to a method carries \"mass\"</strong>. Consider documenting the parameter-less version:</p>\n\n<blockquote><p>Publishes the current post. The <code>created_at</code> timestamp is set to the current time. Returns the <code>created_at</code> timestamp.</p></blockquote>\n\n<p>For numbers sake, it's 40 words. More importantly, it reads linearly. Now let's look at the dependency-injected version:</p>\n\n<blockquote><p>Publishes the current post. By default, <code>created_at</code> is set to the current time. Optionally, callers may pass in a <code>Time</code> object, or any object that returns a <code>Time</code> object when sent the <code>now</code> message. The <code>created_at</code> column is set according to that <code>Time</code> value. Returns the value of the <code>created_at</code> timestamp.</p></blockquote>\n\n<p>This one is 54 words. That's not too many more, numerically, but notice that <strong>the explanation is no longer linear</strong>. There's a default, easy case where I don't care about the timestamp. Then there's a clever case where I do care about the timestamp. In real API documentation, I'd need to specify when and why I'd want to use that clever case and what it looks like.</p>\n\n<p>There's some further potential trouble lurking in this API. What if a caller passes in the wrong kind of <code>Time</code> object? What if sending the <code>now</code> message raises an exception? Those are important parts of the API too, both from a behavior specification perspective and when considering the user experience of using this API in code and possibly troubleshooting it when things go wrong.</p>\n\n<p>My point is, <strong>that optional argument is starting to look rather weighty</strong>. Adding the code is pretty trivial. The possible interactions with the optional argument and its support cost is where it gets expensive. Like many things, it's a trade-off.</p>\n\n<p>I won't claim to know which of these is better. Honestly, I think <strong>it comes down to a subjective view on what's important</strong>: test design, or API design. This is where I can't make a bold-sounding prognosis. I believe that design, even of code, is about deciding what to leave out. Everyone has to decide what to leave out for themselves.</p>\n",
				"date_published": "2013-01-03T10:32:01-07:00",
				"url": "https://therealadam.com/2013/01/03/design-for-test.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2013/01/01/declaring-coupling.html",
				"title": "Declaring coupling",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A lot of discussions on software design end up focusing on dependencies and coupling. In short, <strong>hell is dependencies</strong> and the couplings it produces. It's a tricky problem because its hard to look at some program text and see all of its dependencies; some of them require intelligence to recognize.</p>\n\n<p>In Ruby, we don't have very good ways to declare a class's dependencies and no ways ways to declare its couplings. We can describe a project's dependencies with a Gemfile or a file's dependencies with requires. The trick is that <strong>these specifications often explode in complexity</strong>. Requiring Ruby's thread library brings in some thread-safe data structures like queues and condition variables. Requiring ActiveRecord brings in a world of dependencies and causes a number of behavioral changes to Ruby that some consider impolite.</p>\n\n<p>In some tinkerings with Clojure this weekend, I was struck how the <code>ns</code> function is more effective at both declaring dependency and coupling and in restricting the possible distress those qualities may bring. Consider this snippet from my weekend project:</p>\n\n<pre><code>(ns hrq.routes\n</code>\n<code>  (:use compojure.core\n</code>\n<code>        hrq.core)\n</code>\n<code>  (:require [compojure.route :as route]\n</code>\n<code>            [compojure.handler :as handler]\n</code>\n<code>            [ring.middleware.params :as params]))\n</code>\n</pre>\n<p>I have pedantic quibbles with <code>ns</code>, but I like what's happening here. This file can <em>only</em> use the functions in <code>compojure.core</code> and <code>hrq.core</code> with no namespace qualifications. This file can <em>only</em> use the functions from <code>compojure.route</code>, <code>compojure.handler</code> and <code>ring.middleware.params</code> when they are qualified with the proper prefix. So now I have a very good idea of what code this particular file depends on and where I should look to find behavior that this file is subject to.</p>\n\n<p>To a lesser extent, I have a good <em>guess</em> about what state this file depends on. If there are dynamically scoped variables (pardon me if those are the wrong Clojure/Lisp words) in the dependencies declared for this file, I would need to care about them. If those files are pure behavior (i.e. referentially transparent pure functions), I have nothing to worry about.</p>\n\n<p>Clojure isn't perfect in this regard; it <strong>does allow mutations and state changes outside of functions</strong>. It's not strictly referentially transparent like Haskell is. The tradeoff is worthwhile, in my opinion. Admit some possible coupling in exchange for ease of building typical programs.</p>\n\n<p>I'm not sure that Clojure is <em>inherently</em> superior to Ruby in this regard. It's possibly a momentary cultural advantage, a reaction by those who were burned by expansive, implicit dependencies in Ruby and other languages. That said, it's a good example of Clojure’s considered separation of concerns solving problems that are quite thorny in other languages.</p>\n",
				"date_published": "2013-01-01T20:35:58-07:00",
				"url": "https://therealadam.com/2013/01/01/declaring-coupling.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/26/intermediate-variables-organizing.html",
				"title": "Intermediate variables, organizing OO, meeting Grinders half way",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I work with <a href=\"http://www.naildrivin5.com\">Dave Copeland</a> at LivingSocial, but not on the same team. Maybe someday I&#8217;ll fix that, but for now I learn a lot from his writings. Herein, a few things worth checking out yourself.</p>\n\n<p>If you ever need to read my code, you&#8217;ll eventually come to suspect <strong>I have a particular dislike for intermediate variables</strong>. You&#8217;ll come to suspect this through finding lots of uses of <code>inject</code> and <code>tap</code>, two Ruby methods not everyone is on good terms with. You can imagine I&#8217;d side with Dave on the subject of <a href=\"http://www.naildrivin5.com/blog/2012/06/22/tap-versus-intermediate-variables.html\">Tap versus intermediate variables</a>. You&#8217;d be right, but Dave says it so well, you should read his take on the joy of <code>tap</code>. He also shows how to annoy people with <code>tap</code>-like constructs in other languages. If you&#8217;re into combinators, Reg Braithwaite has written about <code>tap</code> in terms of <a href=\"https://github.com/raganwald/homoiconic/blob/master/2008-10-29/kestrel.markdown\">Kestrels</a>.</p>\n\n<p>I&#8217;ve been learning a lot about how to think about <strong>organizing a non-trivial object-oriented system</strong> this year. Gary Bernhardt is doing some fantastic work explaining a hybrid <a href=\"https://www.destroyallsoftware.com/screencasts/catalog/functional-core-imperative-shell\">imperative/object/functional system</a>. If you don&#8217;t have time to dive into Gary&#8217;s entire backlog (it&#8217;s worth it to find the time), Dave covers some similar ground describing <a href=\"http://www.naildrivin5.com/blog/2010/03/08/object-oriented-design.html\">the only four types of classes in your OO system</a>. Think of these as a post-hoc observation on how many systems seem to evolve; Record objects take root, Service objects reveal themselves (often intertwined amongst other objects), Builders are sprinkled throughout, and there are a few classes hanging out that you wish you&#8217;d made immutable. These are handy guides for thinking about and refactoring an existing design. That said, I think it would be overkill to start a design with these archetypes. Caveat: some developers will really dislike organizing a system this way; tread carefully.</p>\n\n<p>I&#8217;ve written about the virtues of <a href=\"http://weblog.therealadam.com/2012/06/15/the-grinder/\">The Grinder</a>. I know <strong>a lot of non-Grinders wish that the Grinder knew more about how to take the code they&#8217;ve made to work and improve it</strong> so that it is more malleable in the future. <a href=\"http://www.naildrivin5.com/blog/2012/10/05/making-it-right-technical-debt-vs-slop.html\">Making it Right: Technical Debt vs. Slop</a> sets out a good mindset on how this can happen. Think before you type, write a test, make it work, and then tidy it up with future malleability in mind. From there, non-Grinders need to meet Grinders in the middle is in shrinking the feedback cycle. When tests are too much effort to write or take too long to run, Grinders fall back to their old habits. When making it right involves too many intermediate steps with nothing to show for it, Grinders move on to the next thing. When a non-Grinder learn to be less precious with our work, or a Grinder learns to take a moment to round off the sharp corners on their work, you end up with a much stronger team. <a href=\"http://weblog.therealadam.com/2012/10/30/ruthlessness-and-fighting-for-it/\">Fight for it</a>.</p>\n",
				"date_published": "2012-12-26T14:39:17-07:00",
				"url": "https://therealadam.com/2012/12/26/intermediate-variables-organizing.html",
				"tags": ["Uncategorized","Aside","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/22/smiling-rappers.html",
				"title": "Smiling rappers",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->",
				"content_text": "<p style=\"text-align:left\">The rap game doesn't have to be all posturing and diss tracks. <a href=\"http://okayplayer.tumblr.com/post/36811210842/we-need-more-smiling-rappers-tbt-theroots\">We need more smiling rappers.</a></p>\n<p style=\"text-align:left\"><a href=\"http://okayplayer.tumblr.com/post/36811210842/we-need-more-smiling-rappers-tbt-theroots\"><img alt=\"\" src=\"http://therealadam.com/wp-content/uploads/2012/12/tumblr_me99ijpkgk1qm7fxao1_500.jpg\" /></a></p>\n<p style=\"text-align:left\"><!--more--></p>\n<p style=\"text-align:left\"><img class=\"alignnone\" alt=\"\" src=\"http://www.omega-level.net/wp-content/uploads/2012/09/jay-z-laugh-e1348848394860.jpg\" width=\"352\" height=\"211\" /><img class=\"alignnone\" alt=\"\" src=\"http://stevekaczynski.com/wp-content/uploads/2012/01/ICe-Cube-fishing-pole.jpg\" width=\"575\" height=\"356\" /></p>\n<p style=\"text-align:left\"> <img class=\"alignnone\" alt=\"\" src=\"http://20.media.tumblr.com/A2WlZa8ryjhtned1uyYC62Sqo1_500.jpg\" width=\"500\" height=\"525\" /></p>\n<p style=\"text-align:left\"><img class=\"alignnone\" alt=\"\" src=\"http://www2.pictures.zimbio.com/gi/HOT+97+Metro+PCS+5+Boro+Takeover+Tour+Wu+Massacre+jcevj2Wudljl.jpg\" width=\"594\" height=\"457\" /><img class=\"alignnone\" alt=\"\" src=\"http://www.bet.com/news/music/2011/05/09/ll-cool-j-rep-dismisses-allegations-of-transexual-encounter/_jcr_content/featuredMedia/newsitemimage.newsimage.dimg/050911-music-ll-cool-j-laughing.jpg\" width=\"628\" height=\"353\" /><img class=\"alignnone\" alt=\"\" src=\"http://therealadam.com/wp-content/uploads/2012/12/mosdef.jpg?w=194\" width=\"353\" height=\"545\" /></p>\n<p style=\"text-align:left\">OK, maybe one of those is not like the others, but, ya heard?</p>\n",
				"date_published": "2012-12-22T17:10:22-07:00",
				"url": "https://therealadam.com/2012/12/22/smiling-rappers.html",
				"tags": ["Music","Pop Culture","Curated","Image"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/21/why-im-down.html",
				"title": "Why I'm down on hypermedia containers",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>In response to my hypermedia opinions, <a href=\"http://stateless.co\">Mike Kelly</a> said:</p>\n\n<blockquote>\n  <p>These two seem to conflict: “In my opinion, abstract container formats aren’t useful.” and “Just use JSON”. People normally talk about “generic” media types, but they don’t have to a “container” at all, they can simply add conventions for linking. Having conventions for this stuff is useful because it allows us to build tooling around it, if everyone reinvents the wheel in their own way then we can’t build re-usable code. For a similar reason, “specifying your own custom MIME types” is not a good idea – there’s also the time cost associated with doing that. If you use something like hal+json you avoid that cost, and can concentrate on establishing your API’s workflows via link relations.</p>\n</blockquote>\n\n<p>The logic behind the madness goes like this: abstract containers aren&#8217;t solving a problem I currently have. Unfortunately, this means they create problems for me. In the end, I&#8217;m building an API to provide functionality, not as advocacy.</p>\n\n<p>As of summer 2012, there are ideas like HAL, JSON collections, etc. and specifications of those ideas. There are very few implementations. As a service provider, I wouldn&#8217;t actually get any benefit out of using those formats. The convention, within my own API, that fields ending in <code>_url</code> are links is sufficient. I&#8217;d actually end up net negative, because I&#8217;d have to explain how e.g. HAL works and support client developers seeking to understand how to work with it. Anyone building to my API would likely end up having to write their own HAL code, so they don&#8217;t benefit much either.</p>\n\n<p>I&#8217;ve decided to use JSON because providing an API that returns HTML and expects users to scrape it via selectors is extremely confusing to developers. Keep in mind, not everyone is savvy to the latest development trends. To them, an API means an HTTP service that returns XML or JSON. If I were to embrace HTML as a response type, I&#8217;m again stuck with explaining a new concept to client developers.</p>\n\n<p>If it&#8217;s not obvious yet, one of my main principles in adopting hypermedia is to avoid educating developers on hypermedia as much as possible. I&#8217;m in the game of providing a useful API, not a system that shows off the possibilities of hypermedia and how deeply committed I am to its theories.</p>\n\n<p>Finally, I&#8217;ve chosen to craft my own content types because I need some kind of contract with client developers that tells them what kind of data they can expect to see, plus some documentation that expresses that contract in a way that is easy for humans to understand. An RFC-style specification that states what a content type MUST/MAY/SHOULD include is exactly the right kind of abstraction. It allows me to update the specification with a version identifier and specify how each revision changes in terms of what data is available. Further, I found a content type the most tractable solution for specifying the input formats supported by PUT and POST endpoints. None of the abstract containers that existed as of August 2012 fit my needs for specifying links, structure, <em>and</em> how to submit data via <code>POST</code>/<code>PUT</code>/<code>PATCH</code>.</p>\n\n<p>Honestly, link traversal and machine-to-machine interaction are not the pain I&#8217;m feeling. What I want is the simplest possible API that allows potential client developers to understand what they can do via our API and how to do it. Further, I want it to be possible, even if it&#8217;s not magical or easy, to change the API in the future so I&#8217;m not constricted by its current design. I feel no need to apply all of the hypermedia principles to make something useful; I can cherrypick some of the hypermedia principles and still achieves the goal of an API that is stable but not set in stone.</p>\n",
				"date_published": "2012-12-21T08:50:59-07:00",
				"url": "https://therealadam.com/2012/12/21/why-im-down.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/20/hypermedia-opinions.html",
				"title": "Hypermedia opinions",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Through the Gowalla API, and now the <a href=\"https://sifterapp.com/developer\">Sifter</a> API, I&#8217;ve worked with a couple systems one could reasonably call a hypermedia API. Since <a href=\"http://37signals.com/svn/posts/3373-getting-hyper-about-hypermedia-apis\">smart</a> <a href=\"http://www.naildrivin5.com/blog/2012/12/20/dhh-on-hypermedia-hype.html\">people</a> are talking about them today, I feel compelled to throw in my two cents.</p>\n\n<p>A URL-based API alone <strong>won&#8217;t prevent breakage</strong>, as many point out. It won&#8217;t even prevent people from figuring out how to extract IDs and continue to bang URL strings together. I don&#8217;t know why creating URL strings is the security blanket of many API client developers, but it seems you can&#8217;t take it away from a few of them.</p>\n\n<p>That said, a URL-based API <strong>does make life easier</strong> for good actors. Client developers, especially the ones that can&#8217;t upgrade their deployed applications quickly, can sleep better knowing that the upstream API could change and their code won&#8217;t break. Service developers can rest easy knowing it&#8217;s not easy, but it is <em>possible</em> to change their URL structure if they need to.</p>\n\n<p>A hypermedia API means <strong>you can&#8217;t skip on documentation</strong>. In fact, it means you probably need <em>better</em> documentation. You&#8217;ll need to explain what each link in the API responses means (is <code>photos_url</code> the URL for my photos, or my friends&#8217; photos?) and what kind of data they can expect that URL to return (a photo object? a collection of photo objects? a user?) As I mentioned before, a lot of client developers don&#8217;t have their minds wired for hypermedia yet, so you&#8217;ll need a lot of examples for how they should build their clients.</p>\n\n<p>In my opinion, <strong>abstract container formats aren&#8217;t useful</strong>. Squeezing your application&#8217;s data into someone else&#8217;s data model is not a great place to live. That said, I do think specifying your own custom MIME types is a promising idea. You specify each of the content types in your API, RFC-style, and then provide examples of that data. Should you need to change your response formats, you update your RFC-style specification, adding a new field as a &#8220;MAY provide&#8221; type feature.</p>\n\n<p>The rub of this approach is that you can end up with <strong>an explosion of response-type handling code</strong> in your application. Again, it&#8217;s not that hypermedia principles make it easy, they just make it possible.</p>\n\n<p>I&#8217;ve seen some hypermedia APIs expressed as hypertext, using HTML and cleverness. I don&#8217;t see the benefit of this. <strong>Just use JSON</strong>, and maybe specify your own response types.</p>\n\n<p>The shortcoming in much of the hypermedia content out there is they focus on clients reading data and hand-wave over clients that need to create or update data. I can see why; I think that <strong>machine discoverable parameters are a tarpit</strong>. Trying to tell a client what fields the server will accept, what types are accepted, and then handle all the possible error flows is verbose and riddled with edge-cases. The way I&#8217;m solving this is to specify, in the documentation, which URLs clients can expect to <code>POST</code>/<code>PUT</code>/etc. data to and what content-type those URLs expect to receive. I&#8217;m pretty much doing the least hypermedia-ish thing possible, but I think that&#8217;s the correct choice right now.</p>\n\n<p>The great thing about the principles of hypermedia APIs and its discourse if a <strong>focus on workflows</strong>. The biggest mistake I&#8217;ve made in building APIs is in exposing a database instead of a service. No one cares what your table structure or domain model looks like. They want to fetch some data, preferably indexed in a way that is immediately useful to them, and maybe write some data back. When you look through this lens, API design starts to look a lot like UI design. It&#8217;s fun!</p>\n\n<p>You should <strong>read about hypermedia APIs</strong>, if only to challenge your thinking. It helped me a lot to do just that. Check out Steve Klabnik&#8217;s <a href=\"http://designinghypermediaapis.com\">Designing Hypermedia APIs</a>; it&#8217;s not perfect, but it makes a lot of these things easier to grasp.</p>\n\n<p>In the end, I think <strong>designing, building, and supporting a hypermedia API is hard</strong>. You may be better off with an RPC-over-HTTP, or ID-based REST design. The good news is you can benefit from an incremental application of the principles of hypermedia APIs; you don&#8217;t have to go all in before you get something out of it.</p>\n",
				"date_published": "2012-12-20T17:33:25-07:00",
				"url": "https://therealadam.com/2012/12/20/hypermedia-opinions.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/20/how-to-jerry.html",
				"title": "How to Jerry Seinfeld",
				"content_html": "<p>How Jerry Seinfeld writes a joke:</p>\n<p>[youtube <a href=\"http://www.youtube.com/watch?v=itWxXyCfW5s%5D\">www.youtube.com/watch</a></p>\n<p>Very different from how I approach it. But, I love knowing how much goes into his craft and the degree to which he is particular about how he does it.</p>\n",
				"content_text": "How Jerry Seinfeld writes a joke:\n\n[youtube [www.youtube.com/watch](http://www.youtube.com/watch?v=itWxXyCfW5s])\n\nVery different from how I approach it. But, I love knowing how much goes into his craft and the degree to which he is particular about how he does it.\n",
				"date_published": "2012-12-20T14:56:07-07:00",
				"url": "https://therealadam.com/2012/12/20/how-to-jerry.html",
				"tags": ["Comedy, haha","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/18/typing-code-examples.html",
				"title": "Typing code examples, it's like biking",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I love this bicycle metaphor. The slowness of biking engages my brain in an entirely different way than running or driving. Even the mechanical sounds are more pleasant; the consistent whirr of the chain is so much more calming than the revving up and down of a gasoline engine.</p>\n<p>The value of typing code holds very true for me; I usually get very little by simply reading code in books and articles. But when I take the time to type it in and actually try to run it, I struggle with it more (not all code examples are perfect) and get more out of it. You should give it a try.</p>\n",
				"content_text": "<p>If you want to learn from a piece of code, you should type it out, instead of just reading it. <a href='http://www.johndcook.com/blog/2012/12/18/the-value-of-typing-code/'>The value of typing code:</a></p>\n\n<blockquote><p>Typing code may be like riding a bicycle. I’m surprised how much more detail I see the first time I ride my bicycle over a road I’ve driven on, mostly because I’m moving slower but also because there’s an additional muscular dimension to the experience.</p></blockquote>\n\nI love this bicycle metaphor. The slowness of biking engages my brain in an entirely different way than running or driving. Even the mechanical sounds are more pleasant; the consistent whirr of the chain is so much more calming than the revving up and down of a gasoline engine.\n\nThe value of typing code holds very true for me; I usually get very little by simply reading code in books and articles. But when I take the time to type it in and actually try to run it, I struggle with it more (not all code examples are perfect) and get more out of it. You should give it a try.\n",
				"date_published": "2012-12-18T08:40:18-07:00",
				"url": "https://therealadam.com/2012/12/18/typing-code-examples.html",
				"tags": ["Curated","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/13/a-decentralized-web.html",
				"title": "A decentralized web is hard",
				"content_html": "<p><!-- raw HTML omitted -->The Web We Lost<!-- raw HTML omitted -->, on the web of ad-hoc, bottom-up social networks before the pendulum swung fully towards centralized networks like MySpace, then Friendster, and now Facebook, Twitter, and friends. I&rsquo;m glad Anil Dash is pointing out that great things were happening before social networks were massively financed operations and the delightful things that were different when people ran the system from the bottom up.</p>\n<p>Owning and operating your data is obviously better than letting someone trade on it. But, there are missing pieces for users:</p>\n<!-- raw HTML omitted -->\n<p>I don&rsquo;t think any of these are insurmountable. But, decentralization is hard! Can we pull it off? I&rsquo;d love to see it happen.</p>\n",
				"content_text": "<a href=\"http://feeds.dashes.com/~r/AnilDash/~3/vm6FBZoiTLk/the-web-we-lost.html\">The Web We Lost</a>, on the web of ad-hoc, bottom-up social networks before the pendulum swung fully towards centralized networks like MySpace, then Friendster, and now Facebook, Twitter, and friends. I'm glad Anil Dash is pointing out that great things were happening before social networks were massively financed operations and the delightful things that were different when people ran the system from the bottom up.\n\nOwning and operating your data is obviously better than letting someone trade on it. But, there are missing pieces for users:\n\n<ul>\n\t<li>Where do I host my corner of the social network? Putting content on the web without someone else to run it is still strictly nerd stuff.</li>\n\t<li>How do I find my friends? The advantage of a centralized network is its easy to make global observations, like analyzing social graphs for recommended links.</li>\n\t<li>What are the checks against bad actors? Comments and trackbacks were fantastic for weblogs, until spammers figured out how to turn them into toys for boosting pagerank.</li>\n</ul>\n\nI don't think any of these are insurmountable. But, decentralization is hard! Can we pull it off? I'd love to see it happen.\n",
				"date_published": "2012-12-13T21:47:53-07:00",
				"url": "https://therealadam.com/2012/12/13/a-decentralized-web.html",
				"tags": ["Curated","Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/12/wherein-i-heart.html",
				"title": "Wherein I heart Code Climate",
				"content_html": "<p>We&rsquo;ve had <!-- raw HTML omitted -->Sifter&rsquo;s<!-- raw HTML omitted --> repo hooked up to <!-- raw HTML omitted -->Code Climate<!-- raw HTML omitted --> for a couple months now and I&rsquo;m really loving it. Garrett and I have both found it <!-- raw HTML omitted -->fun<!-- raw HTML omitted --> to kill duplication or refactor away complex code. A decent test suite enables this, but Code Climate is very much the compass that points you right to the trouble spots. The <!-- raw HTML omitted -->Code Climate blog<!-- raw HTML omitted --> is a great read too, consistently featuring thought-provoking ideas on how to think about making better code.</p>\n<p>I love tools like <!-- raw HTML omitted -->flog<!-- raw HTML omitted --> and <!-- raw HTML omitted -->flay<!-- raw HTML omitted --> for quick smell detection. If you are like me and too lazy to configure CI and code metrics, Code Climate&rsquo;s easy setup and awesome trending are well worth a look.</p>\n",
				"content_text": "We've had <a href=\"http://sifterapp.com\">Sifter's</a> repo hooked up to <a href=\"https://codeclimate.com\">Code Climate</a> for a couple months now and I'm really loving it. Garrett and I have both found it <em>fun</em> to kill duplication or refactor away complex code. A decent test suite enables this, but Code Climate is very much the compass that points you right to the trouble spots. The <a href=\"http://blog.codeclimate.com\">Code Climate blog</a> is a great read too, consistently featuring thought-provoking ideas on how to think about making better code.\n\nI love tools like <a href=\"http://ruby.sadi.st/Flog.html\">flog</a> and <a href=\"http://ruby.sadi.st/Flay.html\">flay</a> for quick smell detection. If you are like me and too lazy to configure CI and code metrics, Code Climate's easy setup and awesome trending are well worth a look.\n",
				"date_published": "2012-12-12T20:52:35-07:00",
				"url": "https://therealadam.com/2012/12/12/wherein-i-heart.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/08/focusmode-considered-harmful.html",
				"title": "Focus-mode considered harmful",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>I have, at times, been a practitioner of turning off notifications, superfluous applications, and other distracting computer softwares so I could \"get things done\". Sometimes it works! However, I have come to suspect that perhaps it is obscuring a greater problem.</p>\n<p>I'm just not focused.</p>\n<p>Maybe my task is tedious, my project is poorly-defined, or I don’t have a thread to pull on in order to get started. Whichever it is, the world’s greatest distraction-free, focus-enhancing software isn’t going to fix it.</p>\n<p>What I really need is something imminent. A show-and-tell with my team, a milestone to deliver, an item to cross off a list, something to publish for the world. I need a goal and it really helps if I need to achieve it in the next few hours.</p>\n<p>Yesterday, I worked for a couple hours towards a show-and-tell with my team. I had Twitter, Campfire, and Rdio open. One or more of these are a possible distraction. But, I knew none of them was going to make my demo better, and so even though I flicked over to them occassionally, I flicked back immediately and got back to work.</p>\n<p>No one wants a deadline, but a date and an expectation can prove more useful than I had previously thought.</p>\n",
				"date_published": "2012-12-08T12:31:29-07:00",
				"url": "https://therealadam.com/2012/12/08/focusmode-considered-harmful.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/05/ideas-for-living.html",
				"title": "Ideas for living and creating differently",
				"content_html": "<p>Try thinking about living and creating a little differently today. <!-- raw HTML omitted -->Advice for beginners<!-- raw HTML omitted -->: push through the shortcomings of your early work until your ability catches up with your taste. Slow down, lead life at a slower <!-- raw HTML omitted -->pace<!-- raw HTML omitted --> every now and then, it&rsquo;s good for you. <!-- raw HTML omitted -->Stop telling us how much everything sucks<!-- raw HTML omitted -->; not everyone makes the same decisions and trade-offs you would when they create something.</p>\n",
				"content_text": "Try thinking about living and creating a little differently today. <a href='http://zenpencils.com/comic/90-ira-glass-advice-for-beginners/'>Advice for beginners</a>: push through the shortcomings of your early work until your ability catches up with your taste. Slow down, lead life at a slower <a href=\"http://warpspire.com/posts/pace/\">pace</a> every now and then, it's good for you. <a href=\"http://www.elezea.com/2012/12/maybe-it-doesnt-suck/\">Stop telling us how much everything sucks</a>; not everyone makes the same decisions and trade-offs you would when they create something.\n",
				"date_published": "2012-12-05T08:52:25-07:00",
				"url": "https://therealadam.com/2012/12/05/ideas-for-living.html",
				"tags": ["Curated","Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/03/hit-it-dont.html",
				"title": "Hit it, don't quit",
				"content_html": "<p><!-- raw HTML omitted -->How to be good at anything<!-- raw HTML omitted -->. In short: do it, get feedback, study how to improve, repeat.</p>\n<p>Something I&rsquo;ve found, through crossfit, is that if I have any strong suit it&rsquo;s not quitting. Seems trite now that I write it, but it occasionally helps to state the obvious.</p>\n<p>Once I&rsquo;ve decided an activity is worthwhile, I&rsquo;m pretty good at sticking with it no matter how silly I feel doing it. I&rsquo;m not the strongest, the fastest, or the best eater. I&rsquo;m not the smartest, the funniest, or the most charming. But I&rsquo;ve made progress in life by showing up every day and trying to do a little better than the previous day.</p>\n<p>The bottom line: pick a few things to do well, do them, and don&rsquo;t quit.</p>\n",
				"content_text": "<a href='http://scottberkun.com/2012/how-to-be-good-at-anything/'>How to be good at anything</a>. In short: do it, get feedback, study how to improve, repeat.\n\nSomething I've found, through crossfit, is that if I have any strong suit it's not quitting. Seems trite now that I write it, but it occasionally helps to state the obvious.\n\nOnce I've decided an activity is worthwhile, I'm pretty good at sticking with it no matter how silly I feel doing it. I'm not the strongest, the fastest, or the best eater. I'm not the smartest, the funniest, or the most charming. But I've made progress in life by showing up every day and trying to do a little better than the previous day.\n\nThe bottom line: pick a few things to do well, do them, and don't quit.\n",
				"date_published": "2012-12-03T09:21:24-07:00",
				"url": "https://therealadam.com/2012/12/03/hit-it-dont.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/12/01/you-cant-solve.html",
				"title": "You can't solve technical debt, you can only hope to contain it",
				"content_html": "<p><!-- raw HTML omitted -->Staring Down Technical Debt<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Systems tends toward disorder. Disorder is hard to reason about and risky to deal with, i.e. you&rsquo;re likely to avoid dealing with it at all. But, most successful products have a system with more technical debt than you&rsquo;d like at its center.</p>\n<p>Increasingly, I think that the only way to confront technical debt and complexity is to contain it. Languages and tools only seem to help at the margin. Rigorously splitting large, complex, debt-filled systems into smaller, proportionally complex and debt-filled systems is the way to gain traction.</p>\n<p><!-- raw HTML omitted -->You can&rsquo;t solve technical debt or essential complexity; you can only hope to contain it.<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href='http://michaelfeathers.typepad.com/michael_feathers_blog/2012/11/staring-down-technical-debt.html'>Staring Down Technical Debt</a>:\n\n<blockquote><p>Technical Debt is an interesting phrase.   We all have a sense of what it is instinctively, but we rarely want to think about it.  If we think about it too hard, we feel somewhat oppressed by entropy.  All systems tend to toward disorder and software systems are no different. The big question that we all face is what to do about it. </p></blockquote>\n\nSystems tends toward disorder. Disorder is hard to reason about and risky to deal with, i.e. you're likely to avoid dealing with it at all. But, most successful products have a system with more technical debt than you'd like at its center.\n\nIncreasingly, I think that the only way to confront technical debt and complexity is to contain it. Languages and tools only seem to help at the margin. Rigorously splitting large, complex, debt-filled systems into smaller, proportionally complex and debt-filled systems is the way to gain traction.\n\n<strong>You can't solve technical debt or essential complexity; you can only hope to contain it.</strong>\n",
				"date_published": "2012-12-01T15:05:18-07:00",
				"url": "https://therealadam.com/2012/12/01/you-cant-solve.html",
				"tags": ["Curated","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/29/needs-better-words.html",
				"title": "Needs better words",
				"content_html": "<p>How much easier would Haskell be if its vocabulary wasn&rsquo;t so deeply rooted in abstract mathematics? How many more people would immediately understand Cassandra if it just adopted the vernacular of row-oriented databases instead of overriding it with column-oriented semantics? Wouldn&rsquo;t the programming world be better if every language didn&rsquo;t call itself object-oriented?</p>\n<p>So many programmer-facing things could be better if they had better names for concepts. <!-- raw HTML omitted -->The power of good naming<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The cynical view is, we are actively confusing and inhibiting ourselves when we use names that are too short, not clear, or outright wrong. The optimistic view is that there&rsquo;s a progression we can take from not knowing what something should be named, to giving it an acceptable name, to using the naming process to discover better structures.</p>\n<p>If you ever hear me say something &ldquo;needs better words&rdquo;, it means that I think the idea is right but the labels are wrong. A philosophical dialog may ensue, where I struggle to discover what the essence of the idea is. The end goal is a word that is concise, has the right connotation, and whose meaning is obvious and accessible to as many audiences as possible.</p>\n<p>I <!-- raw HTML omitted -->love<!-- raw HTML omitted --> naming things.</p>\n",
				"content_text": "How much easier would Haskell be if its vocabulary wasn't so deeply rooted in abstract mathematics? How many more people would immediately understand Cassandra if it just adopted the vernacular of row-oriented databases instead of overriding it with column-oriented semantics? Wouldn't the programming world be better if every language didn't call itself object-oriented?\n\nSo many programmer-facing things could be better if they had better names for concepts. <a href='http://chrismdp.com/2012/09/the-power-of-good-naming/'>The power of good naming</a>:\n\n<blockquote>Characters are cheap, confusion is costly. Let’s not make things harder for the programmers who come after us. Remember, this is just as likely to be ourselves in a few months. Let’s avoid using a name like prj when project is only four characters more typing. Anything that reduces reading friction in our code is a good thing.</blockquote>\n\nThe cynical view is, we are actively confusing and inhibiting ourselves when we use names that are too short, not clear, or outright wrong. The optimistic view is that there's a progression we can take from not knowing what something should be named, to giving it an acceptable name, to using the naming process to discover better structures.\n\nIf you ever hear me say something \"needs better words\", it means that I think the idea is right but the labels are wrong. A philosophical dialog may ensue, where I struggle to discover what the essence of the idea is. The end goal is a word that is concise, has the right connotation, and whose meaning is obvious and accessible to as many audiences as possible.\n\nI <em>love</em> naming things.\n",
				"date_published": "2012-11-29T09:43:48-07:00",
				"url": "https://therealadam.com/2012/11/29/needs-better-words.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/28/the-qualities-of.html",
				"title": "The qualities of better code",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://www.naildrivin5.com/blog/2012/06/27/what-is-better-code.html'>What is &#039;better&#039; code?</a> Dave Copeland on the qualities readable, changeable code exhibits. Of the attributes he identifies, I think number of paths (ABC complexity) is the most important for reading code and fan-in/out is the most important thing to manage for easily changed code.</p>\n",
				"date_published": "2012-11-28T20:36:28-07:00",
				"url": "https://therealadam.com/2012/11/28/the-qualities-of.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/27/gimme-clarity.html",
				"title": "Gimme clarity",
				"content_html": "<p>Wise pal Brain Bailey, along the way to writing about Woody Allen, perfectly articulates my challenge in thinking about how a team should work:</p>\n<!-- raw HTML omitted -->\n<p>On the other hand, a clear goal with little freedom in how to achieve it produces uninspired work by dispirited people. The lack of freedom is experienced as a lack of trust and confidence. People in these environments will eventually seek out new places to work.<!-- raw HTML omitted --></p>\n<p>Personally, I oscillate between attributing failed projects to too much freedom or not enough freedom. It&rsquo;s not about that at all. It&rsquo;s about the balance of that freedom and clarity. If I&rsquo;m given freedom without clarity, I run off and invent something interesting but impractical. If I&rsquo;m given over-constrained clarity, I get discouraged.</p>\n<p>(Freedom is a funny thing on teams and projects. I have a lot more freedom than I usually think, but I&rsquo;m still very conservative in <!-- raw HTML omitted -->acting<!-- raw HTML omitted --> on that freedom.)</p>\n<p>I recently asked my team lead to give the team I&rsquo;m on a stronger direction in which to go. We already had most of the freedom we needed. We talked over how we could proceed as a team and came up with a direction that was useful for the other teams around us and not so far afield from our current momentum as to discourage us. My morale immediately doubled and I think our team did some good excellent work once we had that strong direction.</p>\n<p>Whether you&rsquo;re managing yourself, managing a team, or managing your manager, asking for clarity is a thing I you should do!</p>\n",
				"content_text": "Wise pal Brain Bailey, along the way to writing about Woody Allen, perfectly articulates my challenge in thinking about how a team should work:\n\n<blockquote>The combination of clarity and freedom is what makes work a joy; one without the other is where you find frustration. When you have great freedom, but an incomplete understanding of the goal, you’re likely to invest hours of effort in a futile attempt to hit a target you can’t see. You know this is the case when you see revisions requested again and again, or products that are perpetually delayed.\n\nOn the other hand, a clear goal with little freedom in how to achieve it produces uninspired work by dispirited people. The lack of freedom is experienced as a lack of trust and confidence. People in these environments will eventually seek out new places to work.</blockquote>\n\nPersonally, I oscillate between attributing failed projects to too much freedom or not enough freedom. It's not about that at all. It's about the balance of that freedom and clarity. If I'm given freedom without clarity, I run off and invent something interesting but impractical. If I'm given over-constrained clarity, I get discouraged.\n\n(Freedom is a funny thing on teams and projects. I have a lot more freedom than I usually think, but I'm still very conservative in <em>acting</em> on that freedom.)\n\nI recently asked my team lead to give the team I'm on a stronger direction in which to go. We already had most of the freedom we needed. We talked over how we could proceed as a team and came up with a direction that was useful for the other teams around us and not so far afield from our current momentum as to discourage us. My morale immediately doubled and I think our team did some good excellent work once we had that strong direction.\n\nWhether you're managing yourself, managing a team, or managing your manager, asking for clarity is a thing I you should do!\n",
				"date_published": "2012-11-27T08:28:48-07:00",
				"url": "https://therealadam.com/2012/11/27/gimme-clarity.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/26/the-feel-of.html",
				"title": "The feel of a commented program",
				"content_html": "<p>Opening a nicely documented source file is like opening a well-designed, nicely printed book. The main text is obvious, but the side-notes are there to help you when you aren&rsquo;t quite catching where the author goes or when the author wants you to go read up on something else for context.</p>\n<p>Opening a file that needs few comments is like opening a notebook. It&rsquo;s the raw form of an idea. A <!-- raw HTML omitted -->few<!-- raw HTML omitted --> people can pull this off, distilling a program down to its essence.</p>\n<p>Both are charming in their own way. The challenge is to know when you&rsquo;re producing a book and when you&rsquo;re writing in your notebook. Write for yourself first, then edit it up or down for the reader.</p>\n",
				"content_text": "Opening a nicely documented source file is like opening a well-designed, nicely printed book. The main text is obvious, but the side-notes are there to help you when you aren't quite catching where the author goes or when the author wants you to go read up on something else for context.\n\nOpening a file that needs few comments is like opening a notebook. It's the raw form of an idea. A <em>few</em> people can pull this off, distilling a program down to its essence.\n\nBoth are charming in their own way. The challenge is to know when you're producing a book and when you're writing in your notebook. Write for yourself first, then edit it up or down for the reader.\n",
				"date_published": "2012-11-26T14:17:01-07:00",
				"url": "https://therealadam.com/2012/11/26/the-feel-of.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/20/some-productivity-winners.html",
				"title": "Some productivity winners",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Three things that are making me more productive lately:</p>\n\n<ul>\n<li><strong>Pick a thing and do it</strong>. Whatever you want to accomplish today, do it immediately after you wake up. No social media, no food, nothing. Work on it for 30-60 minutes and then get on with your day. I&#8217;d mentioned this before, but I fell off the horse and needed to get back on.</li>\n<li><strong>No visible clocks</strong>. Not in menubars, not in toolbars, not on walls, not on screens. I totally perceive time in a different way when I&#8217;m don&#8217;t perceive each minute as it passes.</li>\n<li><strong>Pre-work pep talk</strong>. Before I sit down to do something, I talk myself through how I&#8217;m going to solve the problem, what the scope of this session is, or think through how I want to structure the thing I&#8217;m making. If I do this, I&#8217;m much more likely to stay on task, shrug off roadblocks, and avoid distracting myself.</li>\n</ul>\n\n<p>Go forth and crush it.</p>\n",
				"date_published": "2012-11-20T19:40:00-07:00",
				"url": "https://therealadam.com/2012/11/20/some-productivity-winners.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/10/sit-on-the.html",
				"title": "Sit on the fence between abstraction and practice",
				"content_html": "<p><!-- raw HTML omitted -->Theory and Practice<!-- raw HTML omitted --> is about a fence. It&rsquo;s tempting to steer all the way towards the abstract, academic side, or all the way towards cutthroat practical side. Some of the most intriguing, productive people I&rsquo;ve known sit on either side. Both sides like to accuse the other of not producing results, but that&rsquo;s subjective. An academic&rsquo;s results are wholly different from a practitioner&rsquo;s results.</p>\n<!-- raw HTML omitted -->\n<p>This is a really nice way of explaining why someone like Richard Feynman is awesome. He was equal parts discoverer and explainer (plus another equal part mischief). This is exactly the thing I aim to achieve when I write here, make code, or present at conferences. There&rsquo;s a whole bunch of ideas that aren&rsquo;t in practice but, presented and packaged properly, can help move a lot of practitioners forward while recognizing the work of academics and nudging them to keep working in that area.</p>\n<p>A lot of good things come out of connecting the people on opposite sides of the fence. Sitting on a fence isn&rsquo;t exactly graceful, but sometimes it&rsquo;s the only way to move ideas along. Don&rsquo;t be afraid to eschew purity or pride for progress.</p>\n",
				"content_text": "<a href='http://words.steveklabnik.com/theory-and-practice'>Theory and Practice</a> is about a fence. It's tempting to steer all the way towards the abstract, academic side, or all the way towards cutthroat practical side. Some of the most intriguing, productive people I've known sit on either side. Both sides like to accuse the other of not producing results, but that's subjective. An academic's results are wholly different from a practitioner's results.\n\n<blockquote>On occasion, you’ll run into someone who can actually explain complicated theory stuff to you in an accessible way. If you find someone like this, make sure to hold onto them closely, as they’re really rare. But they can help provide you with some insight that will really boost your productivity, without having to invest all the time in figuring out all that wankery that the priests of theory love.</blockquote>\n\nThis is a really nice way of explaining why someone like Richard Feynman is awesome. He was equal parts discoverer and explainer (plus another equal part mischief). This is exactly the thing I aim to achieve when I write here, make code, or present at conferences. There's a whole bunch of ideas that aren't in practice but, presented and packaged properly, can help move a lot of practitioners forward while recognizing the work of academics and nudging them to keep working in that area.\n\nA lot of good things come out of connecting the people on opposite sides of the fence. Sitting on a fence isn't exactly graceful, but sometimes it's the only way to move ideas along. Don't be afraid to eschew purity or pride for progress.\n",
				"date_published": "2012-11-10T13:10:56-07:00",
				"url": "https://therealadam.com/2012/11/10/sit-on-the.html",
				"tags": ["Curated","Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/08/get-in-my.html",
				"title": "Get in my ears, you dissonant chord",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://en.wikipedia.org/wiki/Petrushka_chord'>Petrushka chord</a>. Two major chords played a half-tone apart. So, it sounds good, except it sounds grating. It's a motif throughout Stravinsky's ballet <em>Petrouchka</em>. Ergo, like everything Stravinsky, get in my ears! <a href=\"http://rd.io/x/QFWiPkCV0Q\">Listen to it</a> and learn more about the chord from the awesome \"Feynman of classical music\" (I just made that up) Leonard Bernstein.</p>\n",
				"date_published": "2012-11-08T21:44:54-07:00",
				"url": "https://therealadam.com/2012/11/08/get-in-my.html",
				"tags": ["Music","Pop Culture","Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/06/dustin-curtis-recipe.html",
				"title": "Dustin Curtis' recipe for doing",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://dcurt.is/do'>Do.</a> Your short, sharp inspirational mantras for the week.</p>\n",
				"date_published": "2012-11-06T21:52:54-07:00",
				"url": "https://therealadam.com/2012/11/06/dustin-curtis-recipe.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/04/rubyconf-notes.html",
				"title": "RubyConf 2012 notes",
				"content_html": "<p>My notes, in a somewhat sketch-esque fashion, from RubyConf 2012. I hope they&rsquo;re useful and/or amusing to you!</p>\n<p>[gallery link=&ldquo;file&rdquo;]</p>\n",
				"content_text": "My notes, in a somewhat sketch-esque fashion, from RubyConf 2012. I hope they're useful and/or amusing to you!\n\n[gallery link=\"file\"]\n",
				"date_published": "2012-11-04T07:54:10-07:00",
				"url": "https://therealadam.com/2012/11/04/rubyconf-notes.html",
				"tags": ["Events"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/11/02/pop-discoveryrediscovery.html",
				"title": "Pop discovery/rediscovery",
				"content_html": "<p>Programming is like pop culture in the sense that Blondie gets reinvented every decade and every decade client-server computing is rediscovered. But it&rsquo;s also like pop culture in that every once in a while something radically new, like hip-hop or STM, appears and eventually is absorbed into the mainstream of the pop culture. I&rsquo;m ok with that.</p>\n",
				"content_text": "Programming is like pop culture in the sense that Blondie gets reinvented every decade and every decade client-server computing is rediscovered. But it's also like pop culture in that every once in a while something radically new, like hip-hop or STM, appears and eventually is absorbed into the mainstream of the pop culture. I'm ok with that.\n",
				"date_published": "2012-11-02T07:15:37-07:00",
				"url": "https://therealadam.com/2012/11/02/pop-discoveryrediscovery.html",
				"tags": ["Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/31/marginal-pennies-and.html",
				"title": "Marginal pennies and dollars",
				"content_html": "<p>The give a penny, take a penny jar is a logical conundrum. It is not, on its surface, a rational thing. I have no data, but I suspect very few people who put money into them are doing so because they plan on taking money out later. A bank is different from a give/take a penny jar.</p>\n<p>Personally, I put money in because I can and because I fancy myself <!-- raw HTML omitted -->not a jerk<!-- raw HTML omitted -->. The latter is what makes more rational sense. I put money in because it&rsquo;s utility to me is marginal, but the utility of feeling better about myself is non-marginal.</p>\n<p>In <!-- raw HTML omitted -->My Blue Heaven<!-- raw HTML omitted -->, Steve Martin plays a semi-reformed mobster in the witness protection program. He starts compiling a book of his truisms for living life. One is &ldquo;it&rsquo;s not so much tipping I believe in as over-tipping.&rdquo; His character does this partially because he&rsquo;s a little flashy, and partially, I think, because he has to be a likable protagonist.</p>\n<p>I&rsquo;d like to be a likable protagonist too, but I like over-tipping whenever possible for another reason. Pretty much anyone who works for tips is working really hard for every dollar they make. An extra dollar here or there is trivial to someone with a desk-job like myself, but less trivial to tip-earners who are technically paid less than minimum wage. An extra five or ten percent on a single tip won&rsquo;t change their life, but it probably doesn&rsquo;t hurt either.</p>\n<p>I like making people&rsquo;s day better with laughs and smiles, but I&rsquo;m not above buying a tiny fraction of a better day for someone else. Marginal pennies and dollars add up.</p>\n",
				"content_text": "The give a penny, take a penny jar is a logical conundrum. It is not, on its surface, a rational thing. I have no data, but I suspect very few people who put money into them are doing so because they plan on taking money out later. A bank is different from a give/take a penny jar.\n\nPersonally, I put money in because I can and because I fancy myself <em>not a jerk</em>. The latter is what makes more rational sense. I put money in because it's utility to me is marginal, but the utility of feeling better about myself is non-marginal.\n\nIn <em>My Blue Heaven</em>, Steve Martin plays a semi-reformed mobster in the witness protection program. He starts compiling a book of his truisms for living life. One is \"it's not so much tipping I believe in as over-tipping.\" His character does this partially because he's a little flashy, and partially, I think, because he has to be a likable protagonist.\n\nI'd like to be a likable protagonist too, but I like over-tipping whenever possible for another reason. Pretty much anyone who works for tips is working really hard for every dollar they make. An extra dollar here or there is trivial to someone with a desk-job like myself, but less trivial to tip-earners who are technically paid less than minimum wage. An extra five or ten percent on a single tip won't change their life, but it probably doesn't hurt either.\n\nI like making people's day better with laughs and smiles, but I'm not above buying a tiny fraction of a better day for someone else. Marginal pennies and dollars add up.\n",
				"date_published": "2012-10-31T10:20:51-07:00",
				"url": "https://therealadam.com/2012/10/31/marginal-pennies-and.html",
				"tags": ["Events","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/30/ruthlessness-and-fighting.html",
				"title": "Ruthlessness and fighting for it",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I dropped this in my drafts folder months ago and came back to it today. It&rsquo;s still something I need to hear. Get it working, and then ruthlessly edit and refactor until it&rsquo;s code that won&rsquo;t cause you to cringe when others bring it up.</p>\n<p>In improv and code, I&rsquo;ve recently come across the notion that there are things we need to <!-- raw HTML omitted -->fight<!-- raw HTML omitted --> for. Fight, not in the sense of conflict, but in the sense that there is an easy or natural way to do something, and then there is the way that maintains our sense of pride and quality. Not necessarily the &ldquo;right&rdquo; or high-minded way to do something, but the way that does not leave us feeling compromised as a creative person.</p>\n<p>Your homework is to write down the qualities important to you, the ones that make you proud of your work and happy to share it. Then work from this checklist every day:</p>\n<!-- raw HTML omitted -->\n<pre><code>&lt;li&gt;Decide whether it expresses your qualities.&lt;/li&gt;\n\n&lt;li&gt;If it does, ship it. If it doesn't, edit ruthlessly until it does.&lt;/li&gt;\n</code></pre>\n<!-- raw HTML omitted -->\n<p>Rinse/repeat/tell everyone about it.</p>\n",
				"content_text": "<p><a href='http://playswithfire.com/blog/2012/02/19/you-are-not-ruthless-enough/'>You Are Not Ruthless Enough</a>:</p>\n\n<blockquote>Being ruthless to yourself means every time you say “oh, I’ll just open up this internal bit over here…” use that moment to give yourself whatever negative feedback you need to go back and write the correct interface. Imagine the bugs you’ll get later. Give yourself a 12 volt shock through your chair. Picture the sleepless nights chasing down an issue that only happens for that one guy but it’s the guy who signs your paycheck.</blockquote>\n\nI dropped this in my drafts folder months ago and came back to it today. It's still something I need to hear. Get it working, and then ruthlessly edit and refactor until it's code that won't cause you to cringe when others bring it up.\n\nIn improv and code, I've recently come across the notion that there are things we need to <em>fight</em> for. Fight, not in the sense of conflict, but in the sense that there is an easy or natural way to do something, and then there is the way that maintains our sense of pride and quality. Not necessarily the \"right\" or high-minded way to do something, but the way that does not leave us feeling compromised as a creative person.\n\nYour homework is to write down the qualities important to you, the ones that make you proud of your work and happy to share it. Then work from this checklist every day:\n\n\n<ol>\n\t<li>Write the code, rehearse the scene, play the song, etc.</li>\n\n\t<li>Decide whether it expresses your qualities.</li>\n\n\t<li>If it does, ship it. If it doesn't, edit ruthlessly until it does.</li>\n\n</ol>\n\n\nRinse/repeat/tell everyone about it.\n",
				"date_published": "2012-10-30T19:26:50-07:00",
				"url": "https://therealadam.com/2012/10/30/ruthlessness-and-fighting.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/27/working-with-rubys.html",
				"title": "Working with Ruby's GVL",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://johnleach.co.uk/words/1245/visualising-the-ruby-global-vm-lock?utm_source=rubyweekly&#038;utm_medium=email'>Visualising the Ruby Global VM Lock</a>. A nice commit-by-commit look at how extensions for Ruby 1.9 work with the GVL, what that looks like as tests run, and how to release the GVL to allow for better parallelism.</p>\n",
				"date_published": "2012-10-27T13:59:38-07:00",
				"url": "https://therealadam.com/2012/10/27/working-with-rubys.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/26/a-pithy-take.html",
				"title": "A pithy take on development vs. operations",
				"content_html": "<p>The essential, face-palming difference between too many development teams and too many operations teams is thus:</p>\n<p><!-- raw HTML omitted -->Development<!-- raw HTML omitted -->: &ldquo;I know how it works, but I don&rsquo;t know how to make it work&rdquo;</p>\n<p><!-- raw HTML omitted -->Operations<!-- raw HTML omitted -->: &ldquo;I know how to make it work, but I don&rsquo;t know how it works&rdquo;</p>\n<p>Be the solution, friends.</p>\n",
				"content_text": "The essential, face-palming difference between too many development teams and too many operations teams is thus:\n\n<strong>Development</strong>: \"I know how it works, but I don't know how to make it work\"\n\n<strong>Operations</strong>: \"I know how to make it work, but I don't know how it works\"\n\nBe the solution, friends.\n",
				"date_published": "2012-10-26T14:10:19-07:00",
				"url": "https://therealadam.com/2012/10/26/a-pithy-take.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/25/how-ruby-io.html",
				"title": "How Ruby IO is formed",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://jstorimer.com/2012/09/25/ruby-io-buffers.html'>Ruby&#039;s IO Buffering And You!</a> Jesse Storimer screencasts his way through what happens when you read and write to files and sockets in Ruby, explaining the behavior and spelunking through Rubinius' implementation of IO. You'll learn stuff. If you want to learn even more stuff, check out Jesse's new book <a href=\"http://workingwithtcpsockets.com\">Working with TCP Sockets.</a> Jesse is fantastic at describing Unixy things concisely; you'll like it.</p>\n",
				"date_published": "2012-10-25T05:53:39-07:00",
				"url": "https://therealadam.com/2012/10/25/how-ruby-io.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/24/follow-the-smells.html",
				"title": "Follow the smells",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>It&#8217;s handy to know a lot about programming langauges, patterns, &#8220;best&#8221; practices, and anecdotal experience in applying those ideas. But premature application of ideas can lead to its own bad experiences and new anecdotal evidence. How can you apply ideas without falling into the premature architecture/optimization trap?</p>\n\n<p>Follow the smells.</p>\n\n<p>You know what a bad method looks like. You know what slow code looks like and how to find it. You can tell when a class is doing too many things. Follow those smells.</p>\n\n<p>Once you&#8217;ve smelled it, you&#8217;ve dealt it. <strong>Kidding!</strong></p>\n\n<p>Once you&#8217;ve found a culprit that is <em>imminently</em> making your life as a developer harder, you have to explain it to someone else. Tell them why it&#8217;s slow, badly coupled, or too much architecture. Once they&#8217;re convinced, <em>then</em> you can reach into that deep knowledge of languages, patterns, practices, and experience to fix the problem.</p>\n\n<p>You commit the code, push it to production, and do a happy dance. You&#8217;re not done.</p>\n\n<p>Now you need to share it. Write down what you did and share it with your team, lest the problem happen again. Show your co-workers how to find the problem elsewhere and quickly dispatch it.</p>\n\n<p>If you do it this way, you&#8217;re helping yourself three times:</p>\n\n<ol>\n<li>You fixed the original problem</li>\n<li>You showed your colleagues how to fix the problem or how to avoid creating the problem</li>\n<li>You showed your colleagues how to make measurable, if minor, progress in making your application better without the need for drastic projects</li>\n</ol>\n\n<p>Follow the smells. Fix the smell. Put the fix in everyone else&#8217;s brain. Repeat.</p>\n",
				"date_published": "2012-10-24T18:47:53-07:00",
				"url": "https://therealadam.com/2012/10/24/follow-the-smells.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/23/a-handful-of.html",
				"title": "A handful of useful project mantras",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>You could do a lot worse than following the heuristics set out by this <a href='http://gorban.org/post/32873465932/software-architecture-cheat-sheet'>Software Architecture cheat sheet</a>. The tip I need to follow more often is \"Is There Another Way\"; I frequently get way too caught up in my first idea, which is usually too simplistic or requires too much architecture. The tip I often try to guide people towards is \"What If I Didn't Have This Problem?\"; routing around problems or trying to reduce them to problems that require less code is a super-powerful judo chop.</p>\n",
				"date_published": "2012-10-23T08:54:47-07:00",
				"url": "https://therealadam.com/2012/10/23/a-handful-of.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/20/know-a-little.html",
				"title": "Know a little hardware",
				"content_html": "<p>Consider:</p>\n<!-- raw HTML omitted -->\n<pre><code>&lt;li&gt;&quot;People who are really serious about software should make their own hardware.&quot; Alan Kay, creator of Smalltalk, object-oriented programming, and many other things that are good in your software development life, said that.&lt;/li&gt;\n</code></pre>\n<!-- raw HTML omitted -->\n<p>I think Alan Kay&rsquo;s quote could be rewritten for modern times to say, &ldquo;Those who are really serious about large applications should make their own datacenters&rdquo;. Assembling hardware, putting it into racks, putting the racks into data centers, and building out your own data centers are the analog of building your own hardware for software service companies these days.</p>\n<p>You probably don&rsquo;t need expert-level knowledge of these disciplines to write software today (e.g. I know diddly-squat about how packets find their way through the modern internet). You will, however, have a leg up if you&rsquo;re aware of the possibilities and know how to take advantage of them. Even if you&rsquo;re building applications with modest capacity needs, knowing how to set up a failover database and when to pay for physical hardware instead of virtualized hosts is a thing that will make your customers and clients happy.</p>\n<p>More concisely: when it comes to running your software on hardware, one size does not fit all; know how and when to tailor your application to the hardware, no matter what size your application wears.</p>\n",
				"content_text": "Consider:\n\n<ol>\n\t<li><a href=\"http://www.wired.com/wiredenterprise/2012/10/ff-inside-google-data-center/all/\">Google's intricate and massive data center operations</a>, wherein Google is not only leading the pack in building distributed computing and database infrastructure, but building massive operations to run those systems.\n</li>\n\n\t<li>\"People who are really serious about software should make their own hardware.\" Alan Kay, creator of Smalltalk, object-oriented programming, and many other things that are good in your software development life, said that.</li>\n</ol>\n\nI think Alan Kay's quote could be rewritten for modern times to say, \"Those who are really serious about large applications should make their own datacenters\". Assembling hardware, putting it into racks, putting the racks into data centers, and building out your own data centers are the analog of building your own hardware for software service companies these days.\n\nYou probably don't need expert-level knowledge of these disciplines to write software today (e.g. I know diddly-squat about how packets find their way through the modern internet). You will, however, have a leg up if you're aware of the possibilities and know how to take advantage of them. Even if you're building applications with modest capacity needs, knowing how to set up a failover database and when to pay for physical hardware instead of virtualized hosts is a thing that will make your customers and clients happy.\n\nMore concisely: when it comes to running your software on hardware, one size does not fit all; know how and when to tailor your application to the hardware, no matter what size your application wears.\n",
				"date_published": "2012-10-20T15:52:12-07:00",
				"url": "https://therealadam.com/2012/10/20/know-a-little.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/18/a-kingdom-of.html",
				"title": "A kingdom of concerns",
				"content_html": "<p>When doing object-oriented programming and following SOLID principles, there is sometimes a concern that classes will proliferate and you end up with a <!-- raw HTML omitted -->Kingdom of Nouns<!-- raw HTML omitted -->.</p>\n<p>I find it more concerning when there is a proliferation of concepts. Too many layers, too many patterns, too many frameworks. The best designs I&rsquo;ve seen provide just one or two concepts that manage to tie everything together without breaking orthogonality.</p>\n<p>The great thing about Rails and Sinatra was that they boiled previously conceptually heavy domains down to a simpler, better set of ideas. In doing so, they move you up the hierarchy of needs, so to speak, and you still end up inventing your own concepts and nouns. More on that soon!</p>\n",
				"content_text": "When doing object-oriented programming and following SOLID principles, there is sometimes a concern that classes will proliferate and you end up with a <a href=\"http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html\">Kingdom of Nouns</a>.\n\nI find it more concerning when there is a proliferation of concepts. Too many layers, too many patterns, too many frameworks. The best designs I've seen provide just one or two concepts that manage to tie everything together without breaking orthogonality.\n\nThe great thing about Rails and Sinatra was that they boiled previously conceptually heavy domains down to a simpler, better set of ideas. In doing so, they move you up the hierarchy of needs, so to speak, and you still end up inventing your own concepts and nouns. More on that soon!\n",
				"date_published": "2012-10-18T17:19:42-07:00",
				"url": "https://therealadam.com/2012/10/18/a-kingdom-of.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/10/bitlys-nsq-has.html",
				"title": "bitly's nsq has some good ideas",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>It promotes distributed and decentralized topologies without single points of failure, enabling fault tolerance and high availability coupled with a reliable message delivery guarantee.</p>\n<!-- raw HTML omitted -->\n<p>No SPOFs and reliable message delivery, without relying on something like ZooKeeper, is a big claim. They have some novel approaches to these problems.</p>\n<p>First, they run an intermediary daemon, <!-- raw HTML omitted -->nsqlookupd<!-- raw HTML omitted -->, between the producers/consumers and the actual queues. These daemons monitor all the available queue servers and tell the clients what to connect to. No configuration of actual queue servers is known to applications. They then run multiple lookup daemons, which are stateless and don&rsquo;t need to agree with each other in order for the system to operate properly.</p>\n<p>Reliable message delivery is provided with at-least-once message delivery semantics. They require all consumers to de-duplicate messages or restrict their operations to idempotent operations. Not exactly legacy friendly, as many applications are coded with the assumption of a closed, one-shot world. But. Idempotence: I highly recommend it if you have the means.</p>\n<p>If you need to prevent losing messages due to the FBI stealing your servers, which is something you definitely need to account for, you can set up redundant pairs of servers and rely on deduplication/idempotence to make sure you&rsquo;re only processing messages once, even if you consume them multiple times.</p>\n<p>In summary: lots of good ideas here. Perhaps some of them could be applied to how people are using Resque?</p>\n",
				"content_text": "<p><a href='https://github.com/bitly/nsq'>bitly/nsq</a>:</p>\n\n<blockquote>\nNSQ is a realtime message processing system designed to operate at bitly's scale, handling billions of messages per day.\n\nIt promotes distributed and decentralized topologies without single points of failure, enabling fault tolerance and high availability coupled with a reliable message delivery guarantee.\n</blockquote>\n\nNo SPOFs and reliable message delivery, without relying on something like ZooKeeper, is a big claim. They have some novel approaches to these problems.\n\nFirst, they run an intermediary daemon, <code>nsqlookupd</code>, between the producers/consumers and the actual queues. These daemons monitor all the available queue servers and tell the clients what to connect to. No configuration of actual queue servers is known to applications. They then run multiple lookup daemons, which are stateless and don't need to agree with each other in order for the system to operate properly.\n\nReliable message delivery is provided with at-least-once message delivery semantics. They require all consumers to de-duplicate messages or restrict their operations to idempotent operations. Not exactly legacy friendly, as many applications are coded with the assumption of a closed, one-shot world. But. Idempotence: I highly recommend it if you have the means.\n\nIf you need to prevent losing messages due to the FBI stealing your servers, which is something you definitely need to account for, you can set up redundant pairs of servers and rely on deduplication/idempotence to make sure you're only processing messages once, even if you consume them multiple times.\n\nIn summary: lots of good ideas here. Perhaps some of them could be applied to how people are using Resque?\n",
				"date_published": "2012-10-10T21:11:02-07:00",
				"url": "https://therealadam.com/2012/10/10/bitlys-nsq-has.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/09/invent-the-right.html",
				"title": "Invent the right thing",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><em>You have to invent the right thing</em>. Some things you might invent:</p>\n<ol>\n<li><p>A solution to a problem. Nothing novel, just an answer for a question. Eg. any Rails/Django/etc. application.</p></li>\n<li><p>An application of some existing techonologies in a novel way. Eg. integrating a library to avoid inventing your own solution.</p></li>\n<li><p>An incrementally better, specific kind of mouse trap. Eg. building on top of existing infrastructure to solve a problem better than any existing solutions.</p></li>\n<li><p>An entirely new kind of mousetrap. Eg. building wholly new infrastructure because you face a high quality, unique problem that you are imminently required to solve.</p></li>\n</ol>\n<p>Inventing the wrong thing means you&#8217;re operating at the wrong level. If you&#8217;re too high, you&#8217;re spinning your wheels on problems you <em>hope</em> to have. If you&#8217;re too low, you&#8217;re spinning your wheels on building something that isn&#8217;t sufficient to solve your problems. If you&#8217;re at the right level, you&#8217;re mostly solving problems you actually face and not solving too my coincidental problems.</p>\n<p>This doesn&#8217;t mean new problems shouldn&#8217;t be tackled and new techonologies should not be invented. It applies mostly to reinventing wheels. That is, a project starts with level 1, not level 3 or 4. Apply a technology and improve it before you push the edge. In fact, you <em>must</em> push the limits of an extant technology before level 4 is the right answer. No skipping allowed.</p>\n<p>Don&#8217;t let imposter syndrome lead you to the wrong technology decision. I&#8217;ve tried to build at the wrong level in the past because I felt like I had to fit in with the level of what others working on larger systems were building. Wrong answer.</p>\n<p>It&#8217;s OK to build a scooter instead of a spaceship if all you need to do is go pick up the mail.</p>\n",
				"date_published": "2012-10-09T19:20:59-07:00",
				"url": "https://therealadam.com/2012/10/09/invent-the-right.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/03/a-better-shared.html",
				"title": "A better shared space",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Remote teams are hard. Not impossible hard, but running uphill hard. It&#8217;s hard because people are used to interacting face-to-face. Given the opportunity, they&#8217;ll interact with those around them rather than those in virtual spaces.</p>\n\n<p>The trick, I think, is to make a <em>better</em> shared space for a remote/local team than the <em>physically</em> shared space they already have. A space that is just as fluid, fun, and useful as a physical space and <strong>available anytime, everywhere</strong> is more compelling because it affords its occupants (aka team members) more hours in their day (no commuting, flexible hours) and permits all sorts of non-traditional work locations (coffee shops, trains, sofas at home, a summer trip to Europe).</p>\n\n<p>Decoupling work from location and time is a big deal. I hope more companies, in software and outside of it, attempt to solve it.</p>\n",
				"date_published": "2012-10-03T17:49:00-07:00",
				"url": "https://therealadam.com/2012/10/03/a-better-shared.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/10/01/i-got-clojure.html",
				"title": "I got Clojure stacks",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Here&#8217;s a Sunday afternoon hack. It&#8217;s a &#8220;stack&#8221; machine implemented in Clojure. I intended for it to be a stack machine, no airquotes, but I got it working and realized what I&#8217;d really built was a machine with two registers and instructions that treat those two registers as a stack. Pretty weird, but it&#8217;s not bad for a weekend hack.</p>\n\n<p>I&#8217;m going to break my little machine down, and highlight things that will feel refreshingly different to someone, like me, who has spent the past several years in object-oriented languages like Ruby. What follows is observations; I&#8217;m still very new to Clojure, despite familiarity with the concepts, so I&#8217;ll pass on making global judgements.</p>\n\n<h1>Data structures as programs as data</h1>\n\n<p>I&#8217;ve seen more than one Rubyist, myself included, say that code-as-data, a concept borrowed from Lisp&#8217;s syntax, is possible and regularly practiced in Ruby. DSLs and class-oriented little languages accomplish this, to some degree. In my experience, this metaprogramming is really happening at the class level, using the class to hold data that dynamic code parses to generate new behaviors.</p>\n\n<p>In contrast, Clojure, being a Lisp, programs really are data. To wit, this is the crux of my stack machine; the actual stack machine program is a Clojure data structure that in turn specifies some Clojure functions to execute:</p>\n\n<pre><code>    (def program\n      [['mpush 1]\n       ['mpush 2]\n       ['madd]\n       ['mpush 4]\n       ['msub]\n       ['mhalt]])\n\n    (run program)\n</code></pre>\n\n<p>If you&#8217;ve never looked at Clojure or Lisp code, just squint and I bet you&#8217;ll keep up. This snippet defines a global variable, of sorts, <code>program</code>, whose value is a list of lists (think Arrays) specifying the instructions in my stack machine program. In short, this program pushes two values on the stack, 1 and 2, adds them, pushes another value 4, subtracts 4 from the result of the addition, and then halts, which prints out the current state of the &#8220;stack&#8221; registers.</p>\n\n<p>I&#8217;ve got a function named <code>run</code> which takes all these instructions, does some Clojure things, then hands them off to instruction functions for execution.</p>\n\n<h1>Some familiar idioms</h1>\n\n<p>Let&#8217;s look at <code>run</code>. It&#8217;s really simple.</p>\n\n<pre><code>    (defn run [instructions]\n      (reduce execute initial-state instructions))\n</code></pre>\n\n<p>This function takes one argument, <code>instructions</code>, a Clojure collection (generally called a <code>seq</code>; this one in particular is a <code>vector</code>). Clojure has an amazing library of functions that operate on collections, just as Ruby has <code>Enumerable</code>. In fact, <code>reduce</code> in Clojure is the same idea as <code>inject</code> in Ruby (<code>reduce</code> is aliased to <code>inject</code> in Ruby!). The way I&#8217;m calling it says &#8220;iterate over a collection <code>instructions</code>, calling <code>execute</code> on each item; on the first iteration, use <code>initial-state</code> as the initial value of the accumulated collection&#8221;.</p>\n\n<p><code>initial-state</code> is another global variable whose value is a mapping (in Ruby, a hash) that maintains the state of the machine. It has two keys, <code>op-a</code> and <code>op-b</code>, representing my two stack-ish registers.</p>\n\n<pre><code>    (def initial-state\n      {:op-a nil :op-b nil})\n</code></pre>\n\n<p>Now you&#8217;d expect to find an <code>execute</code> function that takes a collection plus a value and generates a new version of the collection, just like Ruby&#8217;s <code>inject</code>. And here that function is:</p>\n\n<pre><code>    (defn execute [state inst]\n      (let [fun (ns-resolve *ns* (first inst))\n            params (rest inst)]\n        (apply fun [params state])))\n</code></pre>\n\n<p>This one might require extra squinting for eyes new to Clojure. <code>execute</code> takes two arguments, the current state of the stack machine, <code>state</code>, and the instruction to execute, <code>inst</code>. It then uses <code>let</code> to create local variables based on the values of function&#8217;s parameters. I use Clojure&#8217;s mechanism for turning a quoted variable name (quoting, in Lisp, means escaping a variable name so the interpreter doesn&#8217;t try to evaluate it) into a function reference. Because the instruction is of the form <code>[instruction-name arg arg arg ...]</code>, I use <code>first</code> and <code>rest</code> to split the instruction into the function name, bound to <code>fun</code> and argument list, bound to <code>params</code>.</p>\n\n<p>The meat of the function &#8220;applies&#8221; the function I extracted in the let block to the arguments I extracted out of the instruction. Think of <code>apply</code> like <code>send</code> in Ruby; it&#8217;s a way to call a function when you have a reference to it.</p>\n\n<p>The sharp reader would now start searching for a bunch of functions, each of which implements an instruction for our stack machine. And so&#8230;</p>\n\n<h1>Some boilerplate arrives</h1>\n\n<p>Here is the implementation for <code>mpush</code>, <code>madd</code>, and <code>mhalt</code>:</p>\n\n<pre><code>    (defn mpush [params state]\n      (let [a (state :op-a)\n            b (state :op-b)\n            v (first params)]\n        {:op-a v :op-b a}))\n\n    (defn madd [params state]\n      (let [a (state :op-a)\n            b (state :op-b)]\n        {:op-a (+ a b) :op-b nil}))\n\n    (defn mhalt [params state]\n      (println state))\n</code></pre>\n\n<p>Each instruction takes some arguments and the state of the machine. They do some work and return a new state of the stack machine. Easy, and oh-so-typically functional!</p>\n\n<p>These instructions are where I&#8217;d introduce something clever-ish in Ruby. That <code>let</code> where the register values are extracted feels really boilerplate-y. In Ruby, I know what I would do about that: a method taking a block, probably.</p>\n\n<p>I&#8217;m not sure how I&#8217;d clean this up in Clojure. A macro, a function abstraction? I leave it as an exercise to the reader, and to myself, to find something that involves less copypasta each time a new instruction is implemented.</p>\n\n<hr />\n\n<p>I found some pleasant surprises in this foray into Clojure:</p>\n\n<ul>\n<li>Building programs from bottom-up functions in a functional language is at least as satisfying as doing the same with a TDD loop in an object-oriented language. It is just a conducive to dividing a problem into quickly solved blocks and then putting the whole thing together. It does, however, lack a repeatable verification artifact as a secondary output.</li>\n<li>At first I was a little skeptical of the fact that Clojure mappings (hashes) can be treated as data structures, by passing them to functions, or as functions, by calling them using a key to extract as the parameter. In practice, this is a really awesome thing and it&#8217;s a nice way to write one&#8217;s own abstractions as well. There&#8217;s something to using higher-order functions more prevalently than Ruby does.</li>\n<li>The JVM startup isn&#8217;t quick in absolute terms, but at this point it&#8217;s faster than almost any Rails app, and many pure Ruby apps, to boot. Damning praise for the JVM and Ruby, but the take-away is I never felt distracted our out-of-flow due to waiting around on the JVM.</li>\n</ul>\n\n<p>Bottom line: there&#8217;s a lot to like in Clojure. It&#8217;s likely you&#8217;ll read about more forays into Clojure in this space.</p>\n",
				"date_published": "2012-10-01T08:50:33-07:00",
				"url": "https://therealadam.com/2012/10/01/i-got-clojure.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/22/faster-computer-program.html",
				"title": "Faster, computer program, kill kill!",
				"content_html": "<p>Making code faster requires insight into the particulars of how computers work. Processor instructions, hardware behavior, data structures, concurrency;  it&rsquo;s a lot of black art. Here&rsquo;s a few things to read on the forbidden lore of fast programs:</p>\n<p><!-- raw HTML omitted -->Fast interpreters are made of machine sympathy.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Implementing Fast Interpreters<!-- raw HTML omitted -->. What makes the Lua interpreter, and some JavaScript interpreters, so quick. Includes assembly and machine code details. Juicy!</p>\n<p><!-- raw HTML omitted -->Lockless data structures, the easy way.<!-- raw HTML omitted --> <!-- raw HTML omitted -->A Java lock-free data structures deep dive<!-- raw HTML omitted -->. How do those fancy java concurrent libraries work? Fancy processor instructions! Great deep dive.</p>\n<p><!-- raw HTML omitted -->Now is an interesting time to be a bottleneck<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Your bottleneck is dead.<!-- raw HTML omitted --> Hardware, particularly IO, is advancing such that bottlenecks in code are exposed. If you&rsquo;re running on physical hardware, especially if you have solid-state disks, your bottleneck is probably language-bound or CPU-bound code.</p>\n<p>Go forth, read a lot, measure twice (beware the red herrings!), and make faster programs!</p>\n",
				"content_text": "Making code faster requires insight into the particulars of how computers work. Processor instructions, hardware behavior, data structures, concurrency;  it's a lot of black art. Here's a few things to read on the forbidden lore of fast programs:\n\n<strong>Fast interpreters are made of machine sympathy.</strong> <a href=\"http://nominolo.blogspot.com/2012/07/implementing-fast-interpreters.html\">Implementing Fast Interpreters</a>. What makes the Lua interpreter, and some JavaScript interpreters, so quick. Includes assembly and machine code details. Juicy!\n\n<strong>Lockless data structures, the easy way.</strong> <a href=\"http://www.eecs.berkeley.edu/~pwendell/2012/08/13/java-lock-free-deepdive.html\">A Java lock-free data structures deep dive</a>. How do those fancy java concurrent libraries work? Fancy processor instructions! Great deep dive.\n\n<strong>Now is an interesting time to be a bottleneck</strong>. <a href=\"http://mailinator.blogspot.com/2012/08/your-bottleneck-is-dead-long-live-your.html\">Your bottleneck is dead.</a> Hardware, particularly IO, is advancing such that bottlenecks in code are exposed. If you're running on physical hardware, especially if you have solid-state disks, your bottleneck is probably language-bound or CPU-bound code.\n\nGo forth, read a lot, measure twice (beware the red herrings!), and make faster programs!\n",
				"date_published": "2012-09-22T09:48:20-07:00",
				"url": "https://therealadam.com/2012/09/22/faster-computer-program.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/13/when-to-sinatra.html",
				"title": "When to Sinatra, when to Rails",
				"content_html": "<p><!-- raw HTML omitted -->On Rails, Sinatra, and picking the right tool for the job<!-- raw HTML omitted -->. Pedro Belo, of Heroku fame, finds Rails is way better for pure-web apps and Sinatra is way better for pure-API apps. Most of it comes down to Rails has better tooling and Sinatra is better for scratching itches, which happens a lot more in APIs than applications. I&rsquo;m not ready to pronounce this the final word, but what he&rsquo;s saying lines up with much of my experience.</p>\n<p>That said, you can get pretty far with a Rails API by segregating it from your application. That is, your app controllers inherit from <!-- raw HTML omitted -->ApplicationController<!-- raw HTML omitted --> and your API controllers inherit from <!-- raw HTML omitted -->ApiController<!-- raw HTML omitted -->. This keeps the often wildly different needs of applications and APIs nice and distinct.</p>\n",
				"content_text": "<a href=\"http://pedro.herokuapp.com/past/2012/9/12/on_rails_sinatra_and_picking_the_right_tool_for_the_job/\">On Rails, Sinatra, and picking the right tool for the job</a>. Pedro Belo, of Heroku fame, finds Rails is way better for pure-web apps and Sinatra is way better for pure-API apps. Most of it comes down to Rails has better tooling and Sinatra is better for scratching itches, which happens a lot more in APIs than applications. I'm not ready to pronounce this the final word, but what he's saying lines up with much of my experience.\n\nThat said, you can get pretty far with a Rails API by segregating it from your application. That is, your app controllers inherit from <code>ApplicationController</code> and your API controllers inherit from <code>ApiController</code>. This keeps the often wildly different needs of applications and APIs nice and distinct.\n",
				"date_published": "2012-09-13T11:57:54-07:00",
				"url": "https://therealadam.com/2012/09/13/when-to-sinatra.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/11/common-sense-code.html",
				"title": "Common sense code checks",
				"content_html": "<p>Etsy&rsquo;s <!-- raw HTML omitted -->Static Analysis for PHP<!-- raw HTML omitted -->. This isn&rsquo;t as complicated as you might think. While Facebook&rsquo;s HipHop is used, and is quite sophisticated, a lot of this is just common sense. Trigger code reviews when oft-misused functions are used or when functions that involve security things are introduced.</p>\n<p>This stuff is great for an intern or new team member to get a quick win with. So next time you bring someone onto your team, why not turn them loose on these kinds of quick, big wins?</p>\n",
				"content_text": "Etsy's <a href=\"http://codeascraft.etsy.com/2012/08/10/static-analysis-for-php/\">Static Analysis for PHP</a>. This isn't as complicated as you might think. While Facebook's HipHop is used, and is quite sophisticated, a lot of this is just common sense. Trigger code reviews when oft-misused functions are used or when functions that involve security things are introduced.\n\nThis stuff is great for an intern or new team member to get a quick win with. So next time you bring someone onto your team, why not turn them loose on these kinds of quick, big wins?\n",
				"date_published": "2012-09-11T09:20:15-07:00",
				"url": "https://therealadam.com/2012/09/11/common-sense-code.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/10/designing-for-concurrency.html",
				"title": "Designing for Concurrency",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A lot is made about how difficult it is to write multi-threaded programs. No doubt, it <strong>is</strong> harder than writing a CRUD application or your own testing library. On the other hand, it&#8217;s not as difficult as writing a database or 3D graphics engine. The point is, it&#8217;s worth learning how to do. Skipping the hubris and knowing your program will have bugs that require discipline to track down is an enabling step to learning to write multithreaded programs.</p>\n\n<p>I haven&#8217;t seen much written about the <em>experience</em> of writing a concurrent program and how one <em>designs</em> classes and programs with the rules of concurrency in mind. So let&#8217;s look at what I&#8217;ve learned about designing threaded programs so far.</p>\n\n<p>The headline is this: <strong>only allow objects in consistent states</strong> and <strong>don&#8217;t rely on changing state unless you have to</strong>. Let&#8217;s first look at a class that does not embody those principles at all.</p>\n\n<pre><code>class Rectangle\n  attr_accessor :width, :height\n\n  def orientation\n    if width &gt; height\n      WIDE\n    else\n      TALL\n    end\n  end\n\n  WIDE = &quot;WIDE&quot;.freeze\n  TALL = &quot;TALL&quot;.freeze\nend\n</code></pre>\n\n<p>Just for fun, mentally review that code. What are the shortcomings, what could go wrong, what would you advise the writer to change?</p>\n\n<p>For our purposes, the first flaw is that new <code>Rectangle</code> objects are in an inconsistent state. If we create an object and immediately call <code>orientation</code>, bad things will happen. If you&#8217;re typing along at home:</p>\n\n<pre><code>begin\n  r = Rectangle.new\n  puts r.orientation\nrescue\n  puts &quot;whoops, inconsistent&quot;\nend\n</code></pre>\n\n<p>The second flaw is that our object allows bad data. We should not be able to do this:</p>\n\n<pre><code>r.width = 100\nr.height = -20\nputs r.orientation\n</code></pre>\n\n<p>Alas, we can. The third flaw is that we could accidentally share this object across threads and end up messing up the state in one threads because of logic in another thread. This sort of bug is really difficult to figure out, so designing our objects so it can&#8217;t happen is highly desirable. We want to make this sort of code safe:</p>\n\n<pre><code>r.height = 150\nputs r.orientation\n</code></pre>\n\n<p>When we modify <code>width</code> or <code>height</code> on a rectangle, we should get back an entirely new object.</p>\n\n<p>Let&#8217;s go about fixing each of these flaws.</p>\n\n<h2>Encapsulate object state with Tell, Don&#8217;t Ask</h2>\n\n<p>The first flaw in our <code>Rectangle</code> class is that it isn&#8217;t guaranteed to exist in a consistent state. We go through contortions to make sure our databases are consistent; we should do the same with our Ruby objects too. When an object is created, it should be ready to go. It should not be possible to create a new object that is inconsistent.</p>\n\n<p>Further, we can solve the second flaw by enforcing constraints on our objects. We use the &#8220;Tell, Don&#8217;t Ask&#8221; principle to ensure that when users of <code>Rectangle</code> change the object&#8217;s state, they don&#8217;t get direct access to the object&#8217;s state. Instead, they must pass through guards that protect our object&#8217;s state.</p>\n\n<p>All of that sounds fancy, but it really couldn&#8217;t be simpler. You&#8217;re probably already writing your Ruby classes this way:</p>\n\n<pre><code>class Rectangle\n  attr_reader :width, :height\n\n  def initialize(width, height)\n    @width, @height = width, height\n  end\n\n  def width=(w)\n    raise &quot;Negative dimensions are invalid&quot; if w &lt; 0\n    @width = w\n  end\n\n  def height=(h)\n    raise &quot;Negative dimensions are invalid&quot; if h &lt; 0\n    @height = h\n  end\n\n  def orientation\n    if width &gt; height\n      WIDE\n    else\n      TALL\n    end\n  end\n\nend\n</code></pre>\n\n<p>A lot of little things have changed in this class:</p>\n\n<ul>\n<li>The constructor now <em>requires</em> the width and height arguments. If you don&#8217;t know the width and height, you can&#8217;t create a valid rectangle, so why let anyone get confused and create a rectangle that doesn&#8217;t work? Our constructor now encodes and enforces this requirement.</li>\n<li>The <code>width=</code> and <code>height=</code> setters now enforce validation on the new values. If the constraints aren&#8217;t met, a rather blunt exception is raised. If everything is fine, the setters work just like they did in the old class.</li>\n<li>Because we&#8217;ve written our own setters, we use <code>attr_reader</code> instead of <code>attr_accessor</code>.</li>\n</ul>\n\n<p>With just a bit of code, a little explicitness here and there, we&#8217;ve now got a <code>Rectangle</code> whose failure potential is far smaller than the naive version. This is simply good design. Why wouldn&#8217;t you want a class that is designed not to silently blow up in your face?</p>\n\n<p>The crux of the biscuit for this article is that now we have an object with a narrower interface and an <em>explicit</em> interface. If we need to introduce a concurrency mechanism like locking or serialization (i.e. serial execution), we have some straight-forward places to do so. An explicit interface, specific messages an object responds to, opens up a world of good design consequences!</p>\n\n<h2>Lean towards immutability and value objects whenever possible</h2>\n\n<p>The third flaw in the naive <code>Rectangle</code> class is that it could accidentally be shared across threads, with possibly hard to detect consequences. We can get around that using a technique borrowed from Clojure and Erlang: immutable objects.</p>\n\n<pre><code>class Rectangle\n  attr_reader :width, :height\n\n  def initialize(width, height)\n    validate_width(width)\n    validate_height(height)\n    @width, @height = width, height\n  end\n\n  def validate_width(w)\n    raise &quot;Negative dimensions are invalid&quot; if w &lt; 0\n  end\n\n  def validate_height(h)\n    raise &quot;Negative dimensions are invalid&quot; if h &lt; 0\n  end\n\n  def set_width(w)\n    self.class.new(w, height)\n  end\n\n  def set_height(h)\n    self.class.new(width, h)\n  end\n\n  def orientation\n    if width &gt; height\n      WIDE\n    else\n      TALL\n    end\n  end\n\nend\n</code></pre>\n\n<p>This version of <code>Rectangle</code> further extracts the validation logic into separate methods so we can call it from the constructor and from the setters. But, look more closely at the setters. They do something you don&#8217;t often see in Ruby code. Instead of changing <code>self</code>, these setters create an entirely new <code>Rectangle</code> instance with new dimensions.</p>\n\n<p>The upside to this is, if you accidentally share an object across threads, any changes to the object will result in a new object owned by the thread that initiated the change. This means you don&#8217;t have to worry about locking around these <code>Rectangle</code>s; in practice, sharing is, at worst, copying.</p>\n\n<p>The downside to this side is you could end up with a proliferation of <code>Rectangle</code> objects in memory. This puts pressure on the Ruby GC, which might cause operational headaches further down the line. Clojure gets around this by using persistent data structures that are able to safely share their internal structures, reducing memory requirements. <a href=\"https://github.com/harukizaemon/hamster\">Hamster</a> is one attempt at bringing such &#8220;persistent&#8221; data structures to Ruby.</p>\n\n<p>Let&#8217;s think about object design some more. If you&#8217;ve read up on domain-driven design, you probably recognize that <code>Rectangle</code> is a value object. It doesn&#8217;t represent any particular rectangle. It binds a little bit of behavior to a domain concept our program uses.</p>\n\n<h1>That wasn&#8217;t so hard, now was it</h1>\n\n<p>I keep trying to tell people that, in some ways, writing multithreaded program is as simple as applying common object-oriented design principles. Build objects that are always in a sensible state, don&#8217;t allow twiddling that state without going through the object&#8217;s interface, use value objects when possible, and consider using immutable value objects if you&#8217;re starting from scratch.</p>\n\n<p>Following these principles drastically reduces the number of states you have to think about and thus makes it easier to reason about how the program will run with multiple threads and how to protect data with whatever form of lock is appropriate.</p>\n",
				"date_published": "2012-09-10T18:19:34-07:00",
				"url": "https://therealadam.com/2012/09/10/designing-for-concurrency.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/04/cardinal-sins.html",
				"title": "Cardinal sins",
				"content_html": "<!-- raw HTML omitted -->\n<p>On the other hand, consider how much fun it is to write compilers; their cardinal sin is to avoid conditionals or anything that would stall the processor pipeline. If that seems pedestrian, then consider the cardinal sin of a processor designer: don&rsquo;t do anything that will take longer than one clock cycle, or half a billionth of a second if you&rsquo;re keeping score at home.</p>\n",
				"content_text": "<blockquote>It is conceivable that a really good machine can learn our hash algorithm really well, but in the case of string hashing we still have to walk some memory to give us reasonable assurance of unique hash codes. So there's performance sin #1 violated: never read from memory.</blockquote>\n<a href=\"http://blog.headius.com/2012/09/avoiding-hash-lookups-in-ruby.html\">Avoiding Hash Lookups in a Ruby Implementation</a>, on the quest to eliminate the use of ad-hoc hashes inside JRuby. I love that the cardinal sin of a runtime is to avoid memory reads. It makes avoiding random database lookups in web applications look like a walk in the park.\n\nOn the other hand, consider how much fun it is to write compilers; their cardinal sin is to avoid conditionals or anything that would stall the processor pipeline. If that seems pedestrian, then consider the cardinal sin of a processor designer: don't do anything that will take longer than one clock cycle, or half a billionth of a second if you're keeping score at home.\n",
				"date_published": "2012-09-04T08:41:37-07:00",
				"url": "https://therealadam.com/2012/09/04/cardinal-sins.html",
				"tags": ["Curated","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/02/three-application-growth.html",
				"title": "Three application growth stories",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>First you grow your application, then you grow your organization, and then you get down to the metal and eek out all the performance you can.</p>\n\n<p><a href=\"http://backstage.soundcloud.com/2012/08/evolution-of-soundclouds-architecture/\">Evolution of SoundCloud&#8217;s Architecture</a>, this is how you grow an application without eating the elephant too soon. I would love to send this back to Adam from two years ago. Note that they ended up using RabbitMQ as a <em>broker</em> instead of Resque as a <em>job</em> queue. This nuanced position put them in a pretty nice place, architecturally.</p>\n\n<p><a href=\"https://speakerdeck.com/u/jnunemaker/p/addicted-to-stable\">Addicted to Stable</a> is equal parts &#8220;hey, you should automate things and use graphs/monitoring to tell you when things break&#8221; and &#8220;look at all of GitHub&#8217;s nifty internal tools&#8221;. Even though I&#8217;ve seen the latter a few times already, I like my pal John Nunemaker&#8217;s peak into how it all comes together.</p>\n\n<p><a href=\"http://www.slideshare.net/eonnen/high-performance-network-programming-on-the-jvm-oscon-2012\">High Performance Network Programming on the JVM</a> explains how to choose network programming libraries for the JVM, some pro&#8217;s and con&#8217;s to know about, and lays out a nice conceptual model for building network services. Seems like this is where you want to start once you reach the point where your application needs to serve tens of thousands of client <em>concurrently</em>.</p>\n\n<p>I&#8217;m going to keep posting links like these until, some day, I feel like I&#8217;m actually doing it right. Until then, stand on other people&#8217;s shoulders, learn from experience.</p>\n",
				"date_published": "2012-09-02T14:51:56-07:00",
				"url": "https://therealadam.com/2012/09/02/three-application-growth.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/09/01/my-inner-dialog.html",
				"title": "My inner dialog while coding",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted -->I&rsquo;m a bit of a sailor when I&rsquo;m wrangling my own creations.<!-- raw HTML omitted --></p>\n",
				"content_text": "<img src=\"http://therealadam.com/wp-content/uploads/2012/09/iterm.png\" alt=\"My inner dialog while coding\" class=\"size-full wp-image-2402\" /><p>I'm a bit of a sailor when I'm wrangling my own creations.</p>\n",
				"date_published": "2012-09-01T17:42:55-07:00",
				"url": "https://therealadam.com/2012/09/01/my-inner-dialog.html",
				"tags": ["Uncategorized","Image"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/31/hello-you-beautiful.html",
				"title": "Hello, you beautiful fixed-width font",
				"content_html": "<p><!-- raw HTML omitted -->Pitch<!-- raw HTML omitted -->. Not quite a programmer&rsquo;s font, but holy cow is it gorgeous.</p>\n<p>I love the thought put into this type; the creator actually tried to recreate the artifacts of type created by physically striking paper. Turned out that took away from the font, but it&rsquo;s delightful that he went that deep in considering what a fixed-width font should <!-- raw HTML omitted -->feel<!-- raw HTML omitted --> like.</p>\n<p>The history of fixed-width, typewriter-esque fonts is fantastic too. Even if you&rsquo;re not typography-curious like myself, you should read the whole thing and not just look at the fantastic specimens.</p>\n",
				"content_text": "<a href=\"http://klim.co.nz/blog/pitch-design-information/\">Pitch</a>. Not quite a programmer's font, but holy cow is it gorgeous.\n\nI love the thought put into this type; the creator actually tried to recreate the artifacts of type created by physically striking paper. Turned out that took away from the font, but it's delightful that he went that deep in considering what a fixed-width font should <em>feel</em> like.\n\nThe history of fixed-width, typewriter-esque fonts is fantastic too. Even if you're not typography-curious like myself, you should read the whole thing and not just look at the fantastic specimens.\n",
				"date_published": "2012-08-31T20:56:53-07:00",
				"url": "https://therealadam.com/2012/08/31/hello-you-beautiful.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/28/one-part-mechanics.html",
				"title": "One part mechanics, one part science",
				"content_html": "<p>One black-and-white perspective on building software is that part of it is about mechanics and part of it is about science. The mechanics part is about wiring things up, composing smaller solutions into bigger ones, and solving any problems that arise in the process. The science part is taking problems that don&rsquo;t fit well into the existing mechanisms and making a new mechanism that identifies and solves all the right puzzles.</p>\n<p>You could look at visual and interaction design in the same way. The mechanical part is about using the available assets and mechanisms to create a visual, interactive experience on screens that humans interact with. The science is about solving a problem using ideas that people already understand or creating an idea that teaches people how to solve a problem.</p>\n<p>The mechanical case is about knowing tools, when to use them, and how they interact with each other. The scientific case is about holding lots of state and puzzle in your head and thinking about how computers or people will interact with the system.</p>\n<p>I&rsquo;ve observed that people end up all long the spectrum. Some specialize on mechanics, others on science. The rare case that can work adeptly on both sides, even if they&rsquo;re not the best at either discipline, is really fun to watch.</p>\n",
				"content_text": "One black-and-white perspective on building software is that part of it is about mechanics and part of it is about science. The mechanics part is about wiring things up, composing smaller solutions into bigger ones, and solving any problems that arise in the process. The science part is taking problems that don't fit well into the existing mechanisms and making a new mechanism that identifies and solves all the right puzzles.\n\nYou could look at visual and interaction design in the same way. The mechanical part is about using the available assets and mechanisms to create a visual, interactive experience on screens that humans interact with. The science is about solving a problem using ideas that people already understand or creating an idea that teaches people how to solve a problem.\n\nThe mechanical case is about knowing tools, when to use them, and how they interact with each other. The scientific case is about holding lots of state and puzzle in your head and thinking about how computers or people will interact with the system.\n\nI've observed that people end up all long the spectrum. Some specialize on mechanics, others on science. The rare case that can work adeptly on both sides, even if they're not the best at either discipline, is really fun to watch.\n",
				"date_published": "2012-08-28T13:38:59-07:00",
				"url": "https://therealadam.com/2012/08/28/one-part-mechanics.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/24/know-a-feedback.html",
				"title": "Know a feedback loop",
				"content_html": "<p>TDD is one way to create a feedback loop for building your application. <!-- raw HTML omitted -->Spiking code out and then stabilizing it is another<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>TDD helps me a lot when I have an idea what the problem looks like. Spiking out a prototype and backfilling tests helps me when I don&rsquo;t know what the problem looks like.</p>\n<p>You&rsquo;re possibly different in how you approach problems. If you&rsquo;re flying more by the seat of your pants, or you aren&rsquo;t including the composition and organization of the code in your feedback loop, I will probably insist you work on something that isn&rsquo;t in the core layers of the application. That&rsquo;s cool though; as long as you have <!-- raw HTML omitted -->any feedback loop<!-- raw HTML omitted --> that will nudge you towards better discovering and solving the core problem, we&rsquo;re cool.</p>\n",
				"content_text": "TDD is one way to create a feedback loop for building your application. <a href=\"http://lizkeogh.com/2012/06/24/beyond-test-driven-development/\">Spiking code out and then stabilizing it is another</a>:\n\n<blockquote><p>For most people, TDD is a mechanism for discovery and learning. For some of us, if we can write an example in our heads, our biggest areas of learning probably lie elsewhere. Since ignorance is the constraint in our system, and we’re not ignorant about much that TDD can teach us, skipping TDD allows us to go faster. This isn’t true of everything. Occasionally the feedback is on some complex piece of business logic. Every time I’ve tried to do that without TDD it’s stung me, so I’m getting better at working out when to do it, and when it’s OK to skip it.</p></blockquote>\n\nTDD helps me a lot when I have an idea what the problem looks like. Spiking out a prototype and backfilling tests helps me when I don't know what the problem looks like.\n\nYou're possibly different in how you approach problems. If you're flying more by the seat of your pants, or you aren't including the composition and organization of the code in your feedback loop, I will probably insist you work on something that isn't in the core layers of the application. That's cool though; as long as you have <em>any feedback loop</em> that will nudge you towards better discovering and solving the core problem, we're cool.\n",
				"date_published": "2012-08-24T08:22:49-07:00",
				"url": "https://therealadam.com/2012/08/24/know-a-feedback.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/21/constructive-teamwork-is.html",
				"title": "Constructive teamwork is made of empathy",
				"content_html": "<p>We nerds are trained from an early age to argue on the internet, hone our logical skills, and engage with people based on data instead of empathy.</p>\n<p><a href=\"http://twitter.com/gotascii/status/221230540756492288\">twitter.com/gotascii/&hellip;</a></p>\n<p>It&rsquo;s so hard to divorce reason, emotion, and making progress on a project. Letting a logical inconsistency go is harder than forcing someone to see the flaw in their reasoning. Getting angry or worked-up feels more powerful than a supportive attitude. There are so many disasters to avoid, it&rsquo;s hard to not to force everyone to listen to all the things you&rsquo;ve been burned by previously and how you want to avoid them at all costs.</p>\n<p>Take a deep breath. Fire up your empathy muscles. Figure out how to say &ldquo;yes&rdquo; to the work of your teammates while using your experience to guide that work to an even better place. This is what they call &ldquo;constructive teamwork&rdquo;.</p>\n",
				"content_text": "We nerds are trained from an early age to argue on the internet, hone our logical skills, and engage with people based on data instead of empathy.\n\n[twitter.com/gotascii/...](http://twitter.com/gotascii/status/221230540756492288)\n\nIt's so hard to divorce reason, emotion, and making progress on a project. Letting a logical inconsistency go is harder than forcing someone to see the flaw in their reasoning. Getting angry or worked-up feels more powerful than a supportive attitude. There are so many disasters to avoid, it's hard to not to force everyone to listen to all the things you've been burned by previously and how you want to avoid them at all costs.\n\nTake a deep breath. Fire up your empathy muscles. Figure out how to say \"yes\" to the work of your teammates while using your experience to guide that work to an even better place. This is what they call \"constructive teamwork\".\n",
				"date_published": "2012-08-21T19:50:18-07:00",
				"url": "https://therealadam.com/2012/08/21/constructive-teamwork-is.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/17/futures-features-and.html",
				"title": "Futures, Features, and the Enterprise-D",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>A future is a financial instrument (a thing you invest in) where you commit to paying a price today to receive something tomorrow. The price could go up or down tomorrow, but you&#8217;re locked into today&#8217;s price. Price goes up, you profit; price goes down, you eat the difference.</p>\n\n<p>A feature is a thing that software does. For our purposes, we&#8217;ll say it&#8217;s also work that enables a feature: setting up CI, writing tests, refactoring code, adding documentation, etc. The general idea behind software development is that you should gain more time <em>using</em> a feature than the time you spent <em>implementing</em> it.</p>\n\n<p>The <em>Enterprise-D</em> is a fictional space ship in the <em>Star Trek: The Next Generation</em> universe. It can split into <em>two</em> spaceships and is pretty well armed for a ship with an exploratory mission.</p>\n\n<hr />\n\n<p>Today, Geordi and Worf (middle management) are recalibrating the forward sensor array. It takes them most of the day, but they get the job done. Captain Picard is studying ancient pan-flutes of the iron-age Vulcan era. Data (an android), as an experiment on his positronic net, is trying to learn how to tell an Aristocrat joke.</p>\n\n<p>Tomorrow, in a series of events no one could predict, our friends find themselves in a tense situation with a Romulan <em>Bird of Prey</em>. Luckily, Worf detected it minutes before it decloaked, thanks to the work he and Geordi had performed the day before. This particular <em>Bird of Prey</em> is carrying ancient Romulan artifacts dating back to their own iron age. Amazingly, Picard is able to save the day by translating the inscriptions, which aren&#8217;t too different from Vulcan pan-flutes, and prevents an ancient doomsday weapon from consuming the <em>Bird of Prey</em> and <em>Enterprise</em> alike.</p>\n\n<p>Data&#8217;s Aristocrat joke is never used. That&#8217;s good, because this is a family show.</p>\n\n<hr />\n\n<p>Our friends on the <em>Enterprise</em> are savvy investors who look at their efforts in terms of risk and reward. They each invest time today into an activity (an instrument, in financial terms) which they may or may not use tomorrow. We can say that if they end up using the instrument, it pays off. We can then measure the pay-off of that instrument by assigning a value to the utility of that instrument. If the value of the instrument exceeds the time they invested in &#8220;acquiring&#8221; it, there is a profit.</p>\n\n<p>Geordi and Worf&#8217;s investment was clearly a profit-bearing endeavor. Few other uses of their time, such as aligning the warp crystals or practicing Klingon combat moves, could have detected an invisible ship before it uninvisibles itself. In Wall Street terms, Geordi and Worf are getting the fat bonus and bottle of Bollinger champagne.</p>\n\n<p>Picard&#8217;s investment seems less clear cut. It did come in handy in this particular case, but it probably wasn&#8217;t the only activity that would have saved the day. He could have belted out some Shakespeare or delegated to one of his officers to reconfigure the deflector dish. We&#8217;ll mark Picard as even for the day.</p>\n\n<p>Data totally blew this one. His Aristocrat joke went unused. Even if he had used it, the best outcome would be that it&#8217;s a lame, sterile groaner that only ends up on a DVD extras reel. Data is in the red.</p>\n\n<p>In terms of futures, we can say that the price of working on the foward sensor array went up, the price of pan-flute research was largely unchanged, and the price of Aristocrat jokes plummeted. Our friends on the <em>Enterprise</em> implicitly decided what risks are the most important to them and hedged against three of them. Some of them even came out ahead!</p>\n\n<hr />\n\n<p>I&#8217;m working on software. Today, I can choose to do things on that software. I could 1) start on adding a new feature, 2) shore up the test suite, or 3) get CI setup and all-green. Respectively, these are futures addressing 1) the risk of losing money due to missing functionality, 2) losing money because adding features takes too long to get right, or 3) losing money because things are broken or not communicated in a timely manner.</p>\n\n<p>Like our <em>Enterprise</em> episode, it&#8217;s hard to value these futures. If I deliver the feature tomorrow and it generates more money than the time I put into implementing, testing, and deploying the code, we&#8217;re looking at a clear profit. Revenue minus expense equals profit, grossly speaking.</p>\n\n<p>Shoring up the test suite might make another feature easier to implement. It might give me confidence in moving code around to facilitate. It could tell me when I&#8217;ve broken some code, or some code is poorly designed and holding me back. But, these values are super hard to quantify. Did I save two hours on some feature because I spent one hour on the test suite yesterday? Tricky question!</p>\n\n<p>Chore-ish tasks, like standing up a CI server or centralizing logs, are even harder to quantify. Either one of these tasks <em>could</em> save hours and days of wasted time due to missed communication or troubleshooting an opaque system. Or, they <em>might not pay off at all</em> for weeks and months.</p>\n\n<hr />\n\n<p>I&#8217;m going to start writing down what I worked on every day, guess how many hours I spent on it, and then revisit each task weekly or monthly to guess if it paid out. Maybe I&#8217;ll develop an intuition for risk and reward for the things I work on. Maybe I&#8217;ll just end up with a mess of numbers. Almost certainly, I will seem pretty bookish and weird for tracking these sorts of things.</p>\n\n<p>You should look bookish and weird too. Let me know what you find. I&#8217;ll write up whatever we figure out. Maybe there&#8217;s something to this whole &#8220;finance&#8221; thing besides nearly wrecking the global economy!</p>\n",
				"date_published": "2012-08-17T08:29:01-07:00",
				"url": "https://therealadam.com/2012/08/17/futures-features-and.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/15/the-testdriven-astronaut.html",
				"title": "The test-driven astronaut",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://gmoeck.github.com/2012/07/09/dont-make-your-code-more-testable.html'>Don&#039;t Make Your Code &quot;More Testable&quot;</a>, make the design of your program better. Snappy test suites are all the vogue, but that misses the point of even writing tests: create a feedback loop to know when your program works and when your program is organized well. Listen carefully to the whispers in your code; if you're spending all your time writing tests or shuffling code instead of adding features, improving features, or shipping features then you're falling to the siren song of the test-driven astronaut.</p>\n",
				"date_published": "2012-08-15T06:47:20-07:00",
				"url": "https://therealadam.com/2012/08/15/the-testdriven-astronaut.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/13/simplicators-for-sanity.html",
				"title": "Simplicators for sanity",
				"content_html": "<p>For those rainy days when integrating with a not-entirely sane system is getting you down:</p>\n<!-- raw HTML omitted -->\n<p>The Simplicator is a component that lives <!-- raw HTML omitted -->outside<!-- raw HTML omitted --> the architecture of your system. It exports a sane interface to your system. You test it separately from your system. Its only purpose in life is to deal with the insanity of others.</p>\n<p>Hell is other people&rsquo;s systems; QED this is a heavenly idea.</p>\n",
				"content_text": "For those rainy days when integrating with a not-entirely sane system is getting you down:\n\n<blockquote>A <a href=\"http://www.natpryce.com/articles/000785.html\">Simplicator</a> introduces a new seam into the system that did not exist when the service's byzantine API was used directly. As well helping us test the system, I've noticed that this seam is ideal for monitoring and regularing our systems' use of external services. If a widely supported protocol is used, we can do this with off-the-shelf components.</blockquote>\n\nThe Simplicator is a component that lives <em>outside</em> the architecture of your system. It exports a sane interface to your system. You test it separately from your system. Its only purpose in life is to deal with the insanity of others.\n\nHell is other people's systems; QED this is a heavenly idea.\n",
				"date_published": "2012-08-13T09:00:42-07:00",
				"url": "https://therealadam.com/2012/08/13/simplicators-for-sanity.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/08/02/smelly-obsessions.html",
				"title": "Smelly obsessions",
				"content_html": "<p><!-- raw HTML omitted -->Get Rid of That Code Smell - Primitive Obsession<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Rails developers can fall into another kind of obsession: framework obsession. Rails gives you folders for models, views, controllers, etc. Everything has to be one of those. Logic is shoehorned into models instead of put in objects unrelated to persistence. Controller methods and helpers grow huge with conditionals and accreted behavior.</p>\n<p>This is partially an education and advocacy problem. Luckily, folks like Avdi Grimm, Corey Haines, Gary Bernhardt, and Steve Klabnik, amongst others, are spreading the word of how to use object oriented principles to design Rails applications without obsessing over the constructs in the Rails framework.</p>\n<p>The second part is practice. Once you&rsquo;ve educated yourself and bought into the notion that a Rails app isn&rsquo;t all Rails classes, you&rsquo;ve got to practice and struggle with the concepts. It won&rsquo;t be pretty the first time; at least, it wasn&rsquo;t for me. But with time, I&rsquo;ve come to feel far better about how I design applications using both Rails principles and object-oriented principles.</p>\n",
				"content_text": "<a href=\"http://solnic.eu/2012/06/25/get-rid-of-that-code-smell-primitive-obsession.html\">Get Rid of That Code Smell - Primitive Obsession</a>:\n\n<blockquote>Think about it this way: would you use a string to represent a date? You could, right? Just create a string, let’s say \"2012-06-25\" and you’ve got a date! Well, no, not really – it’s a string. It doesn’t have semantics of a date, it’s missing a lot of useful methods that are available in an instance of Date class. You should definitely use Date class and that’s probably obvious for everybody. This is exactly what Primitive Obsession smell is about.</blockquote>\n\nRails developers can fall into another kind of obsession: framework obsession. Rails gives you folders for models, views, controllers, etc. Everything has to be one of those. Logic is shoehorned into models instead of put in objects unrelated to persistence. Controller methods and helpers grow huge with conditionals and accreted behavior.\n\nThis is partially an education and advocacy problem. Luckily, folks like Avdi Grimm, Corey Haines, Gary Bernhardt, and Steve Klabnik, amongst others, are spreading the word of how to use object oriented principles to design Rails applications without obsessing over the constructs in the Rails framework.\n\nThe second part is practice. Once you've educated yourself and bought into the notion that a Rails app isn't all Rails classes, you've got to practice and struggle with the concepts. It won't be pretty the first time; at least, it wasn't for me. But with time, I've come to feel far better about how I design applications using both Rails principles and object-oriented principles.\n",
				"date_published": "2012-08-02T07:57:59-07:00",
				"url": "https://therealadam.com/2012/08/02/smelly-obsessions.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/26/how-to-think.html",
				"title": "How to think about organizing folders: don't.",
				"content_html": "<p><!-- raw HTML omitted -->Mountain Lion’s New File System<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>A well-considered essay on the non-recursive design of folders in iCloud, how people think about organizing documents, the emotions of organizing documents, and how it comes together in an app like iCloud. Great reading.</p>\n",
				"content_text": "<a href=\"http://informationarchitects.net/blog/mountain-lions-new-file-system/\">Mountain Lion’s New File System</a>:\n\n<blockquote>Folders tend to grow deeper and deeper. As soon as we have more than a handful of notions, or (beware!) more than one hierarchical level of notions, it gets hard for most brains to build a mental model of that information architecture. While it is common to have several hierarchy levels in applications and file systems, they actually don’t work very well. We are just not smart enough to deal with notional pyramids. Trying to picture notional systems with several levels is like thinking three moves ahead in chess. Everybody believes that they can, but only a few skilled people really can do it. If you doubt this, prove me wrong by telling me what is in each file menu in your browser…</blockquote>\n\nA well-considered essay on the non-recursive design of folders in iCloud, how people think about organizing documents, the emotions of organizing documents, and how it comes together in an app like iCloud. Great reading.\n",
				"date_published": "2012-07-26T12:04:13-07:00",
				"url": "https://therealadam.com/2012/07/26/how-to-think.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/17/a-romantic-comedy.html",
				"title": "A romantic comedy: OO and FP",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>My magic ball predicts that OO and FP are going to take something of a &#8220;romantic comedy&#8221; path of evolution. </p>\n\n<p><strong>Act I.</strong> OO and FP are introduced at dinner parties and they could not seem more dissimilar and hilarious arguments ensue. No one goes home together. Despite the initial miss, the end of Act I finds OO and FP separately talking to friends about how they want the same things.</p>\n\n<p><strong>Act II.</strong> OO and FP run into each other at the coffee shop, and then again at the gym. OO is reading a book on ideas that FP loves. One of their friends invites them both to a bar, they get a little sauced and end up making out a bit. OO starts wearing FP&#8217;s jacket around town, even finding it a little comfortable. Towards the end of Act II, OO and FP are a bonfide thing, both borrowing ideas from each other. It&#8217;s pretty cute.</p>\n\n<p><strong>Act III.</strong> Open with a fight between OO and FP. It seems they just can&#8217;t come to agree on some important topic like mutability or the nature of behavior and state. Unfortunate and emotional words are uttered. The internet is abuzz with talk of the drama. They go back to their respective friends and rant about the shortcomings of the other. But, late at night, OO finds that not having FP around is less awesome than having FP around. OO cooks up a cooky plan to get FP back into their life. Hilarity, and a little awkwardness ensue. In the end, FP and OO go great together and we end with a montage of &#8220;everyone lived happily after&#8221; and see a clip that alludes to an OO/FP baby on the way.</p>\n\n<p>If you&#8217;re playing at home, we&#8217;re already in Act II. Ruby and Python borrow various ideas on iteration from FP languages. We might be towards the end of Act II; Scala is very much wearing ML&#8217;s jacket around town. Surely there will be fallout at some point, someone ranting about how OO FP hybrids are too large, too poorly designed, too complicated, etc. The dust will settle, and someone will build an even better OO FP hybrid. Act III will play repeatedly until no one thinks of languages as OO FP hybrids, they just think of them as another language.</p>\n\n<p>Then something different from OO or FP will become obviously useful and this whole romantic comedy will play again. It&#8217;s the way of Hollywood, and the way of software development. Everything old is new again; everything new is old again. Rinse, repeat.</p>\n",
				"date_published": "2012-07-17T17:49:22-07:00",
				"url": "https://therealadam.com/2012/07/17/a-romantic-comedy.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/12/rediscovery-oo-and.html",
				"title": "Rediscovery: OO and FP",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I&#8217;ve noticed some of the sharpest developers I know are doing one or both of these things:</p>\n\n<ul>\n<li><p><strong>Rediscovering object oriented design</strong>. Practicing evolving a design, often driven by the pain points illuminated by automated tests. Thinking about coupling and cohesion. Trying to encapsulate the right behaviors and find decide which principles are the most appropriate to the languages and systems they&#8217;re using.</p></li>\n<li><p><strong>Rediscovering functions</strong>. Applying functional programming to everyday programming problems. Using the features of functional languages as an advantage to build concurrent and distributed systems. Finding the differences in functional design and writing more idiomatic code.</p></li>\n</ul>\n\n<p>The first is a cyclical thing. It happened in Java, it happened in .NET, it&#8217;s happening in Ruby now. People come to a language for what makes it different, write a lot of stuff, and keep bumping into the same problems. They (re-)discover OO, start refactoring things and shaping their systems differently. Some people dig it, others dismiss it as too much effort or ceremony. A new thing comes along, and it all happens again.</p>\n\n<p>The second is harder for me to read. I&#8217;ve spent a fair amount of time studying FP, though I have yet to apply it to production software. Despite that, I have come across a lot of good ideas that are already part of the code I work with daily, or that I wish was part of the code I work with. FP has good answers to composing systems, reasoning about state, and handling concurrency. It has often suffered from a lack of pragmatism, overly dense literature, and rough tooling. The ideas are worth stealing, even if they haven&#8217;t broadly succeeded.</p>\n\n<p>Both of these trends are crucial to moving the practice of software development forward. We need to keep rediscovering and sharpening old ideas whilst experimenting with new ideas to find out which ones are good and which ones less so.</p>\n",
				"date_published": "2012-07-12T09:56:50-07:00",
				"url": "https://therealadam.com/2012/07/12/rediscovery-oo-and.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/10/three-kinds-of.html",
				"title": "Three kinds of distributed systems",
				"content_html": "<p><!-- raw HTML omitted -->Little-d distributed systems<!-- raw HTML omitted -->: the accidental sort. You built a program, it ran on one server. Then you added a database, some caches, perhaps a job worker somewhere. Whoops, you made a distributed system! Almost everything works this way now.</p>\n<p><!-- raw HTML omitted -->Big-D distributed systems<!-- raw HTML omitted -->: you read the Dynamo paper, maybe some Lamport papers too, and you set out to build on the principles set forth by those who have researched the topic. This is mostly open source distributed databases, but other systems surely fall under this category.</p>\n<p><!-- raw HTML omitted -->Ph.D distributed systems<!-- raw HTML omitted -->: you went to a top CS school, you ended up working with a distributed systems professor, and you wrote a system. You then graduated, ended up at Google, Facebook, Amazon, etc. and ended up writing more distributed systems, on a team of even more Ph.D&rsquo;s.</p>\n<p>If you&rsquo;re building a little-d distributed system, study the patterns in the Big-D distributed systems. If you&rsquo;re building a Big-D distributed, study what the Ph. D guys are writing. If you&rsquo;re a Ph. D distributed system guy, please, write in clear and concise language! No one knows or cares what all the little greek symbols are, they just want to know what works, what doesn&rsquo;t work, and why.</p>\n",
				"content_text": "<strong>Little-d distributed systems</strong>: the accidental sort. You built a program, it ran on one server. Then you added a database, some caches, perhaps a job worker somewhere. Whoops, you made a distributed system! Almost everything works this way now.\n\n<strong>Big-D distributed systems</strong>: you read the Dynamo paper, maybe some Lamport papers too, and you set out to build on the principles set forth by those who have researched the topic. This is mostly open source distributed databases, but other systems surely fall under this category.\n\n<strong>Ph.D distributed systems</strong>: you went to a top CS school, you ended up working with a distributed systems professor, and you wrote a system. You then graduated, ended up at Google, Facebook, Amazon, etc. and ended up writing more distributed systems, on a team of even more Ph.D's.\n\nIf you're building a little-d distributed system, study the patterns in the Big-D distributed systems. If you're building a Big-D distributed, study what the Ph. D guys are writing. If you're a Ph. D distributed system guy, please, write in clear and concise language! No one knows or cares what all the little greek symbols are, they just want to know what works, what doesn't work, and why.\n",
				"date_published": "2012-07-10T17:40:37-07:00",
				"url": "https://therealadam.com/2012/07/10/three-kinds-of.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/05/protect-that-state.html",
				"title": "Protect that state: locks, monitors, and atomics",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>You need to protect a piece of data, like a counter or an output stream, from getting garbled by multiple threads.</p>\n\n<p>Three choices, hot shot:</p>\n\n<ul>\n<li>Explicit locks (aka mutexes): acquire a lock around the &#8220;critical\n section&#8221;, munge the data, release the lock. You have to manage the lock\n yourself. Multiple threads accessing the lock will not run concurrently\n anymore.</li>\n<li>Implicit locks (aka monitors): annotate methods that modify important\n data. The monitor library manages the lock for you. Threads still serialize\n around the lock, reducing concurrency.</li>\n<li>Atomic objects (aka compare-and-swap): use data structures that take\n advantage of runtime or processor semantics to guarantee that competing\n threads never interfere with each other. No locks! Much less serializing!\n Not broadly applicable, but I highly recommend them when you have the\n means.</li>\n</ul>\n\n<h2 id=\"mutexesakalockclassic\">Mutexes, aka lock &#8220;classic&#8221;</h2>\n\n<p>Mutexes are the lowest level of locks, at least in Ruby. They are the ur-locks, the most primitive of locks; everything is built on top of them. With any luck, you won&#8217;t ever need to use them directly, but it helps knowing how they work.</p>\n\n<p>Eighty percent of what you need to know is <code>synchronize</code>. You create a lock, and then you use it to protect a piece of code that would go sideways if multiple threads hit it at the exact same time. Here&#8217;s a little class that locks around printing to standard output:</p>\n\n<pre><code>class Output\n\n  def initialize\n    @lock = Mutex.new\n  end\n\n  def log(msg)\n    @lock.synchronize { puts msg }\n  end\n\nend\n</code></pre>\n\n<p>Using <code>Output#log</code> instead of <code>puts</code> will prevent the output of your multithreaded program from getting jumbled and confused by everyone writing to <code>stdout</code> at the same time. You could manually <code>lock</code> and <code>unlock</code> a Mutex if you had special needs.</p>\n\n<h2 id=\"letstalkcounters\">Let&#8217;s talk counters</h2>\n\n<p>For the next couple examples, we&#8217;re going to implement a counter. Multiple threads will update said counter, so it needs to protect itself. Here&#8217;s how we use the counter:</p>\n\n<pre><code>    require 'thread'\n\n    CORES=2\n    ITERS=1_000\n\n    threads = CORES.times.map do |n|\n      Thread.new do\n        ITERS.times do |i|\n          out.log(&quot;Thread #{n}: Iteration: #{i} Counter: #{counter.value}&quot;) if i % 100 == 0\n          counter.incr\n        end\n      end\n    end\n\n    threads.each(&amp;:join)\n    p counter.value\n</code></pre>\n\n<p>My Macbook Air has two <em>real</em> cores (don&#8217;t believe the hype!) and we&#8217;ll increment the counter a thousand times in each thread. Every hundred times through the loop, we&#8217;ll show some progress. At the end, we <code>join</code> each thread and then print the value of our counter. If all goes well, it will be <code>CORES * ITERS</code>.</p>\n\n<p>All would <em>not</em> go well with this naive implementation:</p>\n\n<pre><code>class WildCounter\n\n  def initialize\n    @counter = 0\n  end\n\n  def incr\n    @counter = @counter + 1\n  end\n\n  def value\n    @counter\n  end\n\nend\n</code></pre>\n\n<p>If two threads execute <code>incr</code> at the same time, they will misread <code>@counter</code> or unintentionally overwrite a perfectly good value that was incremented behind their back.</p>\n\n<p>We could protect this counter with a mutex, but I want to show you two other ways to go about it.</p>\n\n<h2 id=\"monitorsakaintrinsiclocks\">Monitors, aka intrinsic locks</h2>\n\n<p>Turns out, a well-designed class will tend to isolate state changes to a few methods. These &#8220;tell, don&#8217;t ask&#8221; methods are what you&#8217;ll likely end up locking. It would be pretty rad if you could just wrap a lock around the whole method without having to create variables and do a bunch of typing, don&#8217;t you think?</p>\n\n<p>Those are a thing! They&#8217;re called monitors. You can read a bunch of academic stuff about them, but the crux of the biscuit is, a monitor is a lock around an entire instance of an object. You then declare methods that can only execute when that lock is held. Here&#8217;s a counter that uses a monitor:</p>\n\n<pre><code>require 'monitor'\n\nclass MonitorCounter\n\n  def initialize\n    @counter = 0\n    # No idea why this doesn't work inside the class declaration\n    extend(MonitorMixin)\n  end\n\n  def incr\n    synchronize { @counter = @counter + 1 }\n  end\n\n  def value\n    @counter\n  end\nend\n</code></pre>\n\n<p>It doesn&#8217;t look too much different from our naive counter. In the constructor, we extend Ruby&#8217;s <code>MonitorMixin</code>, which imbues this class with a lock and a <code>synchronize</code> method to protect mutator methods. (Ed. if anyone knows why the <code>extend</code> has to happen in the constructor instead of in the class declaration, I&#8217;m extremely stumped as to why!)</p>\n\n<p>In <code>incr</code>, where we do the dirty work of updating the counter, all we need to do is put the actual logic inside a <code>synchronize</code> block. This ensures that only thread may execute this method on any given object instance at a time. Two threads could increment two counters safely, but if those two threads want to increment the same counter, they have to take turns.</p>\n\n<p>A brief note on terminology: many Java concurrency texts refer to monitors as &#8220;intrinsic&#8221; locks because, in Java, they are part of every object. Mutexes are referred to as &#8220;extrinsic&#8221; locks because they aren&#8217;t tightly associated with any particular object instance.</p>\n\n<h2 id=\"atomicsakawowthatsclever\">Atomics, aka &#8220;wow that&#8217;s clever!&#8221;</h2>\n\n<p>It turns out that, in some cases, you can skip locks altogether. Amazing, right?! </p>\n\n<p>Unfortunately, Ruby doesn&#8217;t have core support for atomic objects. Fortunately, <a href=\"https://github.com/headius/ruby-atomic\">Charles Nutter&#8217;s <code>atomic</code> library</a> provides just that. It exploits operations provided by the underlying platform (the JVM in the case of JRuby, atomic compare-and-swap operations on Intel in the case of Rubinius) to implement objects that are guaranteed to update within one processor clock cycle. These operations work by taking two parameters, the old value and the new value; if the current value matches the old value, it&#8217;s safe to update it to the new value. If it doesn&#8217;t match, the operation fails and you have to try again.</p>\n\n<p>Phew! Now you know a lot about atomic processor operations.</p>\n\n<p>&#8220;Show me right now, Adam!&#8221; you say. Much obliged.</p>\n\n<pre><code>require 'atomic'\n\nclass AtomicCounter\n\n  def initialize\n    @counter = ::Atomic.new(0)\n  end\n\n  def incr\n    @counter.update { |v| v + 1 }\n  end\n\n  def value\n    @counter.value\n  end\n\nend\n</code></pre>\n\n<p>Luckily, <code>Atomic</code> encapsulates all the business of comparing and swapping and knowing about how to use atomic instructions. It maintains the value of the object internally and handles all the swapping logic for you. Call <code>update</code>, change the object in the block, and go on with your life. No locks necessary!</p>\n\n<p>If that doesn&#8217;t make you love modern computer hardware, you are a programmer who does not know joy.</p>\n\n<h2 id=\"treadcarefully\">Tread carefully</h2>\n\n<p>Congratulations, you are now somewhat conversant on the topic of locking in concurrent Ruby programs. You know what the tools are, but, unfortunately, I haven&#8217;t the space to educate you on all the ways you are now equipped to shoot yourself in the foot. If you&#8217;re curious, you can read up on deadlock, livelock, starvation, priority inversion, and all the failure cases for dead processes left holding a lock.</p>\n\n<p>The principle I try to follow, when I&#8217;m presented with a problem that needs locking, is to ask if I can work around the need for locking somehow. Could I use a Queue or atomic? Could I isolate this state in one thread and obviate the need for the lock? Is this state really necessary at all?</p>\n\n<p>To anti-quote <em>Ferris Buehler&#8217;s Day Off</em>, when it comes to adding locks, &#8220;I highly unrecommend it, if you have the means&#8221;.</p>\n",
				"date_published": "2012-07-05T08:11:40-07:00",
				"url": "https://therealadam.com/2012/07/05/protect-that-state.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/07/02/future-lies.html",
				"title": "Future lies",
				"content_html": "<p>It&rsquo;s easy to delude yourself when writing software. Do these tests really describe what the application does? Does the documentation really describe how the system works now? Is this comment an accurate assertion on the state of affairs in the application?</p>\n<p>My experience is that there&rsquo;s little to solve this problem besides discipline. Always double check that you haven&rsquo;t invalidated something that was written down in the margins. If there&rsquo;s a way to encode something in code instead of prose, do it.</p>\n<p>Vigilance against future-lies is an ever-mindful challenge.</p>\n",
				"content_text": "It's easy to delude yourself when writing software. Do these tests really describe what the application does? Does the documentation really describe how the system works now? Is this comment an accurate assertion on the state of affairs in the application?\n\nMy experience is that there's little to solve this problem besides discipline. Always double check that you haven't invalidated something that was written down in the margins. If there's a way to encode something in code instead of prose, do it.\n\nVigilance against future-lies is an ever-mindful challenge.\n",
				"date_published": "2012-07-02T07:03:25-07:00",
				"url": "https://therealadam.com/2012/07/02/future-lies.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/27/too-eager-to.html",
				"title": "Too eager to add code",
				"content_html": "<p>I&rsquo;m a little too eager to add code. If there&rsquo;s <!-- raw HTML omitted -->a mess that needs refurbishing<!-- raw HTML omitted -->, rather than refactoring, I&rsquo;m too quick to create a parallel world that is nice and tidy like I&rsquo;d like it. Problem is, I don&rsquo;t come back to the code in want of refurbishing enough. I <!-- raw HTML omitted -->know<!-- raw HTML omitted --> I should rejigger it to use the new shiny bits. For some reason, call it inertia, I don&rsquo;t.</p>\n<p>This is a shot across my own bow. Prefer refactoring to refurbishing. Prefer refurbishing to jumping into something new. Prefer shipping code to all of the previous tactics.</p>\n",
				"content_text": "I'm a little too eager to add code. If there's <a href=\"http://devblog.avdi.org/2012/06/25/every-day-in-every-way/\">a mess that needs refurbishing</a>, rather than refactoring, I'm too quick to create a parallel world that is nice and tidy like I'd like it. Problem is, I don't come back to the code in want of refurbishing enough. I <em>know</em> I should rejigger it to use the new shiny bits. For some reason, call it inertia, I don't.\n\nThis is a shot across my own bow. Prefer refactoring to refurbishing. Prefer refurbishing to jumping into something new. Prefer shipping code to all of the previous tactics.\n",
				"date_published": "2012-06-27T20:46:50-07:00",
				"url": "https://therealadam.com/2012/06/27/too-eager-to.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/26/gaining-traction-for.html",
				"title": "Gaining traction for businesses new and old",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<blockquote><p>People want to see action and progress, no matter how small. They want to hear about milestones and rave reviews. Even if you’re not adding new users and customers rapidly, you can still show momentum within the company and product. And if product updates aren’t forthcoming, hopefully you can be forthcoming about why. There are many different ways to make and measure progress, the point is to share them with your community regularly.</p></blockquote>\n\n<p><a href='http://brianbailey.me/traction'>Traction</a> by pal Brian Bailey. He's talking about how to get a new app off the ground, but this applies to any kind of business. Communication is winning.</p>\n",
				"date_published": "2012-06-26T15:29:32-07:00",
				"url": "https://therealadam.com/2012/06/26/gaining-traction-for.html",
				"tags": ["Curated","Expanded ideas","Quote"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/26/surround-yourself-with.html",
				"title": "\"Surround yourself with beautiful software\"",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='https://speakerdeck.com/u/kneath/p/building-an-army-of-robots'>Building an army of robots</a>, Kyle Kneath on GitHub's internal tools. The closing line of this deck is \"Surround yourself with beautiful software\". One of the most compelling things I've looked at this year.</p>\n",
				"date_published": "2012-06-26T07:47:55-07:00",
				"url": "https://therealadam.com/2012/06/26/surround-yourself-with.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/20/etsys-rules-of.html",
				"title": "Etsy's rules of distributed systems",
				"content_html": "<p><!-- raw HTML omitted -->Architecting for change<!-- raw HTML omitted -->. Complex systems and change:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I&rsquo;d have thought all the useful things to say about Etsy were said, at this point, but I&rsquo;d have thought wrong!</p>\n<p>There&rsquo;s a good saying about designing distributed systems that goes something like &ldquo;avoid it as long as possible&rdquo;. I think these three guidelines are worth adding to that saying. Iterate, examine, repeat. Don&rsquo;t make big, tricky changes. In fact, large change you can&rsquo;t recover from are nearly impossible to make anyway, so route around them entirely.</p>\n<p>The last bit, &ldquo;promote learning&rdquo;, is great too. I follow distributed systems and database designers on Twitter and see tons of great papers and ideas in the exchange. More than that, always teach your teammates about the distributed systems you&rsquo;re building. The more they know about the design and constraints of the system you&rsquo;re making, the easier it is for them to work with those systems. If you can&rsquo;t teach someone to use your system, you probably don&rsquo;t understand it well enough.</p>\n",
				"content_text": "<a href=\"http://www.slideshare.net/kellan/architecting-for-change-qconnyc-2012/\">Architecting for change</a>. Complex systems and change:\n\n<blockquote><ol>\n\t<li>Distributed systems are inherently complex. </li>\n\t<li>The outcome of change in complex systems is hard to predict.</li>\n\t<li>The outcome of small, frequent, measurable changes are easier to predict, easier to recover from, and promote learning.</li>\n\n</ol>\n</blockquote>\n\nI'd have thought all the useful things to say about Etsy were said, at this point, but I'd have thought wrong!\n\nThere's a good saying about designing distributed systems that goes something like \"avoid it as long as possible\". I think these three guidelines are worth adding to that saying. Iterate, examine, repeat. Don't make big, tricky changes. In fact, large change you can't recover from are nearly impossible to make anyway, so route around them entirely.\n\nThe last bit, \"promote learning\", is great too. I follow distributed systems and database designers on Twitter and see tons of great papers and ideas in the exchange. More than that, always teach your teammates about the distributed systems you're building. The more they know about the design and constraints of the system you're making, the easier it is for them to work with those systems. If you can't teach someone to use your system, you probably don't understand it well enough.\n",
				"date_published": "2012-06-20T13:27:52-07:00",
				"url": "https://therealadam.com/2012/06/20/etsys-rules-of.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/19/thread-safety-in.html",
				"title": "Thread safety in Rails, explained!",
				"content_html": "<p>Read up on <!-- raw HTML omitted -->Thread<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Queue<!-- raw HTML omitted --> and ready for more multi-threaded Ruby reading? <!-- raw HTML omitted -->Aaron Patterson has written up how the thread safe option works in Rails<!-- raw HTML omitted --> and some tradeoffs involved in removing the option and making thread safety the default. It&rsquo;s not as complicated as you might think!</p>\n<p>The only rub I can see is that, as far as I can tell, he&rsquo;s talking about making this the default for production mode. Making it the default for development mode isn&rsquo;t tenable if you want to keep class reloading around, which almost everyone does. It&rsquo;s just a hunch, but running without thread-safety in development seems weird when its the default in production. But, some teams run YARV in development and JRuby in production, so maybe I&rsquo;m just making up things to worry about.</p>\n",
				"content_text": "Read up on <code>Thread</code> and <code>Queue</code> and ready for more multi-threaded Ruby reading? <a href=\"http://tenderlovemaking.com/2012/06/18/removing-config-threadsafe.html\">Aaron Patterson has written up how the thread safe option works in Rails</a> and some tradeoffs involved in removing the option and making thread safety the default. It's not as complicated as you might think!\n\nThe only rub I can see is that, as far as I can tell, he's talking about making this the default for production mode. Making it the default for development mode isn't tenable if you want to keep class reloading around, which almost everyone does. It's just a hunch, but running without thread-safety in development seems weird when its the default in production. But, some teams run YARV in development and JRuby in production, so maybe I'm just making up things to worry about.\n",
				"date_published": "2012-06-19T13:42:22-07:00",
				"url": "https://therealadam.com/2012/06/19/thread-safety-in.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/19/getting-started-with.html",
				"title": "Getting started with Ruby Concurrency using two simple classes",
				"content_html": "<p>Building a concurrent system isn’t as hard as they say it is. What it boils down to is, you can’t program by coincidence. Here’s a list of qualities in a strong developer:</p>\n<!-- raw HTML omitted -->\n<p>Today, I want to give you a starting point for tinkering with and understanding concurrent programs, particularly in modern Ruby (JRuby and Rubinius 2.0).</p>\n<!-- raw HTML omitted -->\n<p>If process concurrency is the only available trick, running a Resque-style job queue works. But now that thread concurrency is viable with Ruby, we can look at handling these same kind of jobs in-process instead of externally. At the cost of some additional code and additional possible states in our process, we save all sorts of operational complexity.</p>\n<!-- raw HTML omitted -->\n<p>def call(message)\nputs message\nend</p>\n<p>end\n<!-- raw HTML omitted --><!-- raw HTML omitted -->\nSimple enough. Now let’s make this thing actually work!</p>\n<!-- raw HTML omitted -->\n<p>module Work\n@queue = Queue.new\n@n_threads = 2\n@workers = []\n@running = true</p>\n<p>Job = Struct.new(:worker, :params)\n<!-- raw HTML omitted --><!-- raw HTML omitted -->\nFirst off, we pull in <!-- raw HTML omitted -->thread<!-- raw HTML omitted -->, which gives us <!-- raw HTML omitted -->Thread<!-- raw HTML omitted --> and our new best friend, <!-- raw HTML omitted -->Queue<!-- raw HTML omitted -->. We also need <!-- raw HTML omitted -->timeout<!-- raw HTML omitted --> so we have a way to interrupt methods that block.</p>\n<p>Then we define our global work queue, aptly named <!-- raw HTML omitted -->Work<!-- raw HTML omitted -->. It’s got a modest amount of state: a queue to store pending work on, a parameter for the number of threads (I went with two since my MacBook Air has two <!-- raw HTML omitted -->real<!-- raw HTML omitted --> cores), an array to keep track of the worker threads, and a flag that indicates whether the work queue should keep running.</p>\n<p>Finally, we define a little job object, because schlepping data around inside a library with a hash is suboptimal. Data that represents a concept deserves a name and some structure!</p>\n<!-- raw HTML omitted -->\n<p>def start\n@workers = @n_threads.times.map { Thread.new { process_jobs } }\nend\n<!-- raw HTML omitted --><!-- raw HTML omitted -->\nThis is the heart of the API. Note the use of <!-- raw HTML omitted -->module_function<!-- raw HTML omitted --> with no arguments; this makes all the following methods attach to the module object like class methods. This saves us the tedium of typing <!-- raw HTML omitted -->self.some_method<!-- raw HTML omitted --> all the time. Happy fingers!</p>\n<p>Users of <!-- raw HTML omitted -->Work<!-- raw HTML omitted --> will add new jobs with <!-- raw HTML omitted -->enqueue<!-- raw HTML omitted -->, just like Resque. It’s a lot simpler in our case, though, because we never have to cross process boundaries. No marshaling, no problem.</p>\n<p>Once the queue is loaded up (or even if it’s not), users then call <!-- raw HTML omitted -->start<!-- raw HTML omitted -->. This fires up a bunch of threads and starts processing jobs. We need to keep track of those threads for later, so we toss them into a module instance variable.</p>\n<!-- raw HTML omitted -->\n<p>More importantly, <!-- raw HTML omitted -->@queue.pop<!-- raw HTML omitted --> will block, forever, if the queue is empty. That makes it easy for us to avoid hogging the CPU fruitlessly looking for new work. It does, however, mean we need to wrap the pop operation in a timeout, so that we can eventually get back to our loop and do some housekeeping.</p>\n<p>Housekeeping task the first, run that job. This looks almost just like the code you’ll find inside Resque workers. Create a new instance of the class that handles this job, invoke our <!-- raw HTML omitted -->call<!-- raw HTML omitted --> interface, pass the job params on. Easy!</p>\n<p>Housekeeping task the second, see if the worker should keep running. If the <!-- raw HTML omitted -->@running<!-- raw HTML omitted --> flag is still set, we’re good to continue consuming work off the queue. If not, something has signaled that it’s time to wrap up.</p>\n<!-- raw HTML omitted -->\n<p>def stop\n@running = false\n@workers.each(&amp;:join)\nend</p>\n<p>end\n<!-- raw HTML omitted --><!-- raw HTML omitted -->\nShutting down our work queue is a matter of draining any pending jobs and then closing out the running threads. <!-- raw HTML omitted -->drain<!-- raw HTML omitted --> is a little oddly named. It doesn’t actually do the draining, but it does block until the queue is drained. We use it as a precondition for calling <!-- raw HTML omitted -->stop<!-- raw HTML omitted -->, which tells all the workers to finish the job they’ve got and then exit their processing loop. We then call <!-- raw HTML omitted -->Thread#join<!-- raw HTML omitted --> to shutdown the worker threads.</p>\n<!-- raw HTML omitted -->\n<h1 id=\"process-jobs-in-another-threads\">Process jobs in another thread(s)</h1>\n<p>Work.start</p>\n<h1 id=\"block-until-all-jobs-are-processed\">Block until all jobs are processed</h1>\n<p>Work.drain</p>\n<h1 id=\"stop-the-workers\">Stop the workers</h1>\n<p>Work.stop\n<!-- raw HTML omitted --><!-- raw HTML omitted -->\nCreate work, start our workers, block until they finish, and then stop working. Not too bad for fifty lines of code.</p>\n<!-- raw HTML omitted -->\n<p>What I hope I’ve demonstrated today is that concurrent programming, even in Ruby with all its implementation shortcomings, is approachable. To wit:</p>\n<!-- raw HTML omitted -->\n<p>I hope you see the ease with which we can get started doing concurrent Ruby programming by learning just two new classes. Don’t fear the threads, friend!&lt;/</p>\n",
				"content_text": "Building a concurrent system isn’t as hard as they say it is. What it boils down to is, you can’t program by coincidence. Here’s a list of qualities in a strong developer:\n<ul>\n\t<li>Comfort in thinking about the state(s) of their program</li>\n\t<li>Studies and understands the abstractions one or two layers above and below their program</li>\n\t<li>Listens to the design forces on their code</li>\n</ul>\nHappily, that’s all you need to get started writing code running in multiple threads. You don’t need a graduate degree, mathematical tricks, a specially-ordained language, or membership in the cult of writing concurrent programs.\n\nToday, I want to give you a starting point for tinkering with and understanding concurrent programs, particularly in modern Ruby (JRuby and Rubinius 2.0).\n<h2 id=\"workqueuesout-of-processandin-process\">Work queues, out-of-process and in-process</h2>\nLots of apps use a queue to get stuff done. Throw jobs on a queue, spin up a bunch of processes, run a job worker in those processes. Simple, right? Well, not entirely. You’ve got to store those jobs somewhere, make sure pulling jobs out of it won’t lose critical work, run worker processes somewhere, restart them if they fail, make sure they don’t leak memory, etc. Writing that first bit of code is easy, but deploying it ends up being a little costly.\n\nIf process concurrency is the only available trick, running a Resque-style job queue works. But now that thread concurrency is viable with Ruby, we can look at handling these same kind of jobs in-process instead of externally. At the cost of some additional code and additional possible states in our process, we save all sorts of operational complexity.\n<h3 id=\"babysfirstworkqueue\">Baby’s first work queue</h3>\nResque is a great abstraction. Let’s see if we can build something like it. Here’s how we’ll add jobs to our in-process queue:\n<pre><code>Work.enqueue(EchoJob, \"I am doing work!\")\n</code></pre>\nAnd this is how we’ll define a worker. Note that I’ve gone with <code>call</code> instead of <code>perform</code>, because that is my wont lately.\n<pre><code>class EchoJob\n\n  def call(message)\n    puts message\n  end\n\nend\n</code></pre>\nSimple enough. Now let’s make this thing actually work!\n<h3 id=\"humblebeginnings\">Humble beginnings</h3>\n<pre><code>require 'thread'\nrequire 'timeout'\n\nmodule Work\n  @queue = Queue.new\n  @n_threads = 2\n  @workers = []\n  @running = true\n\n  Job = Struct.new(:worker, :params)\n</code></pre>\nFirst off, we pull in <code>thread</code>, which gives us <code>Thread</code> and our new best friend, <code>Queue</code>. We also need <code>timeout</code> so we have a way to interrupt methods that block.\n\nThen we define our global work queue, aptly named <code>Work</code>. It’s got a modest amount of state: a queue to store pending work on, a parameter for the number of threads (I went with two since my MacBook Air has two <em>real</em> cores), an array to keep track of the worker threads, and a flag that indicates whether the work queue should keep running.\n\nFinally, we define a little job object, because schlepping data around inside a library with a hash is suboptimal. Data that represents a concept deserves a name and some structure!\n<h3 id=\"apublicapiappears\">A public API appears</h3>\n<pre><code>  module_function\n  def enqueue(worker, *params)\n    @queue &lt;;&lt;; Job.new(worker, params)\n  end\n\n  def start\n    @workers = @n_threads.times.map { Thread.new { process_jobs } }\n  end\n</code></pre>\nThis is the heart of the API. Note the use of <code>module_function</code> with no arguments; this makes all the following methods attach to the module object like class methods. This saves us the tedium of typing <code>self.some_method</code> all the time. Happy fingers!\n\nUsers of <code>Work</code> will add new jobs with <code>enqueue</code>, just like Resque. It’s a lot simpler in our case, though, because we never have to cross process boundaries. No marshaling, no problem.\n\nOnce the queue is loaded up (or even if it’s not), users then call <code>start</code>. This fires up a bunch of threads and starts processing jobs. We need to keep track of those threads for later, so we toss them into a module instance variable.\n<h3 id=\"thecruxofthebiscuit\">The crux of the biscuit</h3>\n<pre><code>  def process_jobs\n    while @running\n      job = nil\n      Timeout.timeout(1) do\n        job = @queue.pop\n      end\n      job.worker.new.call(*job.params)\n    end\n  end\n</code></pre>\nHere’s the heart of this humble little work queue. It’s easiest to look at this one from the inside out. The crux of the biscuit is popping off the queue. For one thing, this is thread-safe, so two workers can pop off the queue at the same time and get different jobs back.\n\nMore importantly, <code>@queue.pop</code> will block, forever, if the queue is empty. That makes it easy for us to avoid hogging the CPU fruitlessly looking for new work. It does, however, mean we need to wrap the pop operation in a timeout, so that we can eventually get back to our loop and do some housekeeping.\n\nHousekeeping task the first, run that job. This looks almost just like the code you’ll find inside Resque workers. Create a new instance of the class that handles this job, invoke our <code>call</code> interface, pass the job params on. Easy!\n\nHousekeeping task the second, see if the worker should keep running. If the <code>@running</code> flag is still set, we’re good to continue consuming work off the queue. If not, something has signaled that it’s time to wrap up.\n<h3 id=\"shuttingdown\">Shutting down</h3>\n<pre><code>  def drain\n    loop do\n      break if @queue.empty?\n      sleep 1\n    end\n  end\n\n  def stop\n    @running = false\n    @workers.each(&amp;:join)\n  end\n\nend\n</code></pre>\nShutting down our work queue is a matter of draining any pending jobs and then closing out the running threads. <code>drain</code> is a little oddly named. It doesn’t actually do the draining, but it does block until the queue is drained. We use it as a precondition for calling <code>stop</code>, which tells all the workers to finish the job they’ve got and then exit their processing loop. We then call <code>Thread#join</code> to shutdown the worker threads.\n<h3 id=\"alltogethernow\">All together now</h3>\nThis is how we use our cute little work queue:\n<pre><code>10.times { |n| Work.enqueue(EchoJob, \"I counted to #{n}\") }\n\n# Process jobs in another thread(s)\nWork.start\n\n# Block until all jobs are processed\nWork.drain\n\n# Stop the workers\nWork.stop\n</code></pre>\nCreate work, start our workers, block until they finish, and then stop working. Not too bad for fifty lines of code.\n<h2 id=\"thatwasnttoohard\">That wasn’t too hard</h2>\nA lot is made about how the difficulty of concurrent programming. “Oh, the locks, oh the error cases!” they cry. Maybe it is trickier. But it’s not rocket science hard. Hell, it’s not even monads and contravariance hard.\n\nWhat I hope I’ve demonstrated today is that concurrent programming, even in Ruby with all its implementation shortcomings, is approachable. To wit:\n<ul>\n\t<li>Ruby has a great API for working with threads themselves. You call <code>Thread.new</code> and pass it some code to run in a thread. Done!</li>\n\t<li>Ruby’s <code>Queue</code> class is threadsafe and a great tool for coordinating concurrent programs. You can get pretty far without thinking about locks with a queue. Push things onto it from one thread, pull things off from another. Block on a queue until you get the signal you’re waiting for. It’s a lovely little abstraction.</li>\n\t<li>It’s easy to tinker with concurrency. You don’t have to write a giant program or have exotic problems to take advantage of Ruby for concurrency.</li>\n</ul>\nAll that said, as I was writing this post up, some shortcomings in this example script jumped out at me. Output from the workers can appear out of order (classic concurrent program challenge), we can drain the queue while new work is still arriving (easily solved, but not with queues) and sleep loops (like in <code>drain</code>) are inelegant. If you want to read ahead, locks and latches are the droids you’re looking for.\n\nI hope you see the ease with which we can get started doing concurrent Ruby programming by learning just two new classes. Don’t fear the threads, friend!&lt;/\n",
				"date_published": "2012-06-18T23:42:24-07:00",
				"url": "https://therealadam.com/2012/06/19/getting-started-with.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/17/chronologic-a-piece.html",
				"title": "Chronologic, a piece of software history",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>It&#8217;s long past time to call <a href=\"https://github.com/therealadam/chronologic\">Chronologic</a> a project at it&#8217;s end-of-life. About a year ago, it went into serious use as the storage system for social timelines in Gowalla. About six months ago, the Gowalla servers were powered down; no epilogue was written. In my work since then, I haven&#8217;t had the need for storing timelines and I haven&#8217;t been using Cassandra much at all. So, what purpose can Chronologic serve now that it&#8217;s not actively moving bits around in production?</p>\n\n<h2 id=\"aprettyokrubycassandraexampleapplication\">A pretty OK Ruby/Cassandra example application</h2>\n\n<p>If you&#8217;re curious about how to use Cassandra with Ruby, Chronologic is probably an excellent starting point. This is doubly so if you&#8217;re interested in building your own indexes or using the lower-level driver API instead of CQL. If you&#8217;re interested in the latest and greatest in Cassandra schema design, which you should be, Chronologic won&#8217;t help you learn how to use CQL, secondary indexes, or composite columns.</p>\n\n<p>Chronologic is also an acceptable take on building service-oriented, distributed systems with Ruby. It is a good demonstration of a layered, if not particularly OO, architecture. That test suite is fast, and that was nice.</p>\n\n<h2 id=\"asourceofsoftwarearchaeology\">A source of software archaeology</h2>\n\n<p>Chronologic started out as a vacation hack that <a href=\"http://www.scottraymond.net/\">Scott Raymond</a> put together in the winter of 2010. I picked it up and soft launched parts of it in early 2011. As Gowalla went into a drastic product push in the summer of 2011, the development of Chronologic accelerated drastically. A couple other developers started making contributions as Chronologic become a bigger factor in how we built our application and API.</p>\n\n<p>Within the branches and commits, you can probably see design decisions come and go. Dumb bugs discovered and fixed. Sophisticated bugs instrumented, fixes attempted, final solutions triumphantly committed. An ambitious software historian might even glean the pace of development within the Gowalla team and infer the emotional rollercoaster of a big product push through the tone and pace of commits to Chronologic.</p>\n\n<h2 id=\"anepilogueforchronologic\">An epilogue for Chronologic</h2>\n\n<p>I&#8217;m a little sad that Chronologic couldn&#8217;t become a more general thing useful to a lot of people. I&#8217;m a lot sad that, by the time Gowalla was winding down, I was sufficiently burnt out that I wanted little to do with the Chronologic code. All that said, I&#8217;m very glad that Scott Raymond encouraged me to work on it and that the team at Gowalla worked with me as I blundered through building my first distributed, high-volume system. It was stressful and challenging, but I&#8217;m proud of the work I did and what I learned.</p>\n",
				"date_published": "2012-06-17T09:40:24-07:00",
				"url": "https://therealadam.com/2012/06/17/chronologic-a-piece.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/15/the-grinder.html",
				"title": "The Grinder",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>As teams grow and specialize, I&#8217;ve noticed people tend to take on characters that I see over and over. Archetypes that seem to go beyond one project and apply to each team I work on over time. Today I want to talk about one of those archetypes: the <strong>Grinder</strong>.</p>\n\n<p>The Grinder isn&#8217;t the smartest or most skilled guy on your team. They don&#8217;t write the prettiest code, they aren&#8217;t up-to-date on the state of the art, and the way they use tools can seem simplistic. Often, The Grinder doesn&#8217;t even push working code; there are often tiny bugs lurking, or even syntax errors. They push or deploy this code perhaps dozens of times a day. At first glance, The Grinder is a Terrifying Problem.</p>\n\n<p>What sets The Grinder apart from your garden variety mediocre developer is that The Grinder is an expert at making progress. They move rapidly, they upset things, and then they get it working. The Grinder is an indispensable part of your team because they&#8217;re a bit cutthroat. They&#8217;re not worrying about the coolest new tech or design approaches the intelligensia are raving about. They&#8217;re just thinking, &#8220;how do I get this into production, get feedback, and get on with the next thing?&#8221;</p>\n\n<p>The Grinder is an indispensable part of your team because they balance out the thinkers and worriers. While they&#8217;re asking &#8220;can we?&#8221; and &#8220;should we?&#8221; the Grinder is just getting it done. Grinders expand the realm of possibility by taking a journey of a thousand steps. They don&#8217;t invent a jetpack or hoverboard first; they just go with what they have.</p>\n\n<p>The Grinders I&#8217;ve known are typically humble, kind people. They know how to operate their tools to get stuff done, and that&#8217;s mostly good enough for them. They&#8217;re not opposed to hearing about new techniques, but they want to know how it&#8217;s going to help them push code out faster. They are not particularly phased by brainy tech that appeals to novelty.</p>\n\n<p>Pair a Grinder with a thinker who values how their skills complement each other and you can make a ton of progress without making a huge mess. A team of all Grinders would eventually burn itself out. Grinders stop when the feature is done, not when the day is over or their brain is out of gas. Grinders need thinkers to encourage them to regulate their work pace and to help them understand how to make rapid progress without coding themselves into a corner.</p>\n\n<p>It&#8217;s not hard to recognize the Grinder on your team; it&#8217;s likely even the non-technical people in the company know who they are and recognize their strengths. If you&#8217;re a thinker who is a little flabberghasted that the Grinder approach works, take some inspiration from how they do what they do and ship some stuff with them. </p>\n\n<p>If it&#8217;s late or the Grinder has been working long hours, tap them on the shoulder and tell them they do good work. Send them home so they can sustain it over weeks and months without running themselves down. A well-rested, excited Grinder is one of your team&#8217;s best assets.</p>\n",
				"date_published": "2012-06-15T08:26:05-07:00",
				"url": "https://therealadam.com/2012/06/15/the-grinder.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/14/acdc-writes-robust.html",
				"title": "AC/DC writes robust songs",
				"content_html": "<p>AC/DC writes songs that are fundamentally very strong. They aren&rsquo;t the most touching, artistically composed songs. But they&rsquo;re very solid songs. They hold together well, you can sing along, they don&rsquo;t ramble on longer than they should.</p>\n<p>How robust is AC/DC&rsquo;s songwriting?</p>\n<p>[youtube=<a href=\"http://www.youtube.com/watch?v=H1iR2Wi3u5o%5D\">www.youtube.com/watch</a></p>\n<p>You can throw bagpipes into one of their songs and it still holds up just fine. That&rsquo;s solid songwriting.</p>\n",
				"content_text": "AC/DC writes songs that are fundamentally very strong. They aren't the most touching, artistically composed songs. But they're very solid songs. They hold together well, you can sing along, they don't ramble on longer than they should.\n\nHow robust is AC/DC's songwriting?\n\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=H1iR2Wi3u5o])\n\nYou can throw bagpipes into one of their songs and it still holds up just fine. That's solid songwriting.\n",
				"date_published": "2012-06-14T11:19:51-07:00",
				"url": "https://therealadam.com/2012/06/14/acdc-writes-robust.html",
				"tags": ["Music","Pop Culture","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/12/they-cant-all.html",
				"title": "They can't all be winners",
				"content_html": "<p>My Tuesdays typically look like this: write/hack for my weblog, work, lunch, work, short run, and then hack with other Austin nerds at <!-- raw HTML omitted -->Houndstooth Coffee<!-- raw HTML omitted -->. As it happens, I did OK on the write/hack, awesome at my first work sprint, OK at my second work sprint, OK on my run, and I&rsquo;m currently kicking ass in my evening hacks on <!-- raw HTML omitted -->Sifter<!-- raw HTML omitted -->.</p>\n<p>They can&rsquo;t all be winners. If you&rsquo;ve got enough fires going, one is bound to get hot on any given day. Push through the little disappointments to reach those moments of awesomeness.</p>\n",
				"content_text": "My Tuesdays typically look like this: write/hack for my weblog, work, lunch, work, short run, and then hack with other Austin nerds at <a href=\"http://www.houndstoothcoffee.com/\">Houndstooth Coffee</a>. As it happens, I did OK on the write/hack, awesome at my first work sprint, OK at my second work sprint, OK on my run, and I'm currently kicking ass in my evening hacks on <a href=\"http://sifterapp.com\">Sifter</a>.\n\nThey can't all be winners. If you've got enough fires going, one is bound to get hot on any given day. Push through the little disappointments to reach those moments of awesomeness.\n",
				"date_published": "2012-06-12T19:44:07-07:00",
				"url": "https://therealadam.com/2012/06/12/they-cant-all.html",
				"tags": ["Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/10/the-forces-of.html",
				"title": "The forces of change on the US legislature",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>As of 2012, the major forces operating on the legislation of the US government are, unscientifically speaking:</p>\n\n<ul>\n<li>60% path dependence</li>\n<li>20% regulatory capture</li>\n<li>10% marginal progress</li>\n<li>9% political posturing</li>\n</ul>\n\n<p>Everything else, I&#8217;d guess, is a rounding error that fits in that last 1%.</p>\n\n<p><strong>Path dependence</strong>, in short, means that once you decide to do something, it&#8217;s difficult to unwind all the decisions that follow that original decision. Once you build a military-industrial complex, farm subsidy program, or medical program for the elderly, it becomes increasingly difficult to stop doing those things. You&#8217;re invested.</p>\n\n<p><strong>Regulatory capture</strong> is a phenomenon where a regulated industry, say telecom, becomes sufficiently cozy with the institutions regulating them that they can manipulate the regulators to ease the boundaries they must operate within, <em>or even impose rules making it difficult for new competitors to enter the industry</em>. To some extent, the prisoners run the asylum. Barring an extremely jarring event, like a financial emergency, the regulated can grow their profit margins, comfortable knowing that competitors are increasingly unlikely. More often, regulatory capture is about protecting the golden egg. Path dependence, in the form of subsidies and existing contracts, often goes hand-in-hand with regulatory capture.</p>\n\n<p><strong>Marginal progress</strong> is exactly what politicians are <em>not</em> rewarded for. They are rewarded for having strong ties to those with strong ties, for saying the right things, and staying out of the public eye. Politicians don&#8217;t enhance their career by doing what they tell their voters they seek to do.</p>\n\n<p><strong>Political posturing</strong> is what legislators are rewarded for. If they fail to accomplish what they&#8217;ve told voters they will do, they can always blameshift it away: not enough political will, distasteful political advesaries, more pressing problems elsewhere.</p>\n\n<p>This seems cynical, but I&#8217;ve got my reasons:</p>\n\n<ul>\n<li>I find it helps to understand the forces at play before you try to figure out what to invest optimism in.</li>\n<li>Understanding a system is the first step towards making meaningful changes within it.</li>\n</ul>\n\n<p>Actually, that&#8217;s a pretty good way to summarize my approach to understanding the systems of the world: understand the forces, learn the mechanisms, figure out how this system is interconnected to the other systems. The interconnections are the fun parts!</p>\n",
				"date_published": "2012-06-10T11:35:33-07:00",
				"url": "https://therealadam.com/2012/06/10/the-forces-of.html",
				"tags": ["The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/05/keep-your-application.html",
				"title": "Keep your application state out of your queue",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I&#8217;m going to pick on Resque here, since it&#8217;s nominally great and widely used. You&#8217;re probably using it in your application <em>right now</em>. Unfortunately, I need to tell you something <em>unsettling</em>.</p>\n\n<p><strong>¡DRAMA MUSIC!</strong></p>\n\n<p>There&#8217;s an outside chance your application is dropping jobs. The Resque worker process pulls a job off the queue, turns it into an object, and passes it to your class for processing. This handles the simple case beautifully. But failure cases are important, if tedious, to consider.</p>\n\n<p>What happens if there&#8217;s an exception in your processing code? <a href=\"https://github.com/lantins/resque-retry\">There&#8217;s a plugin for that</a>. What happens if you need to restart your Resque process while a job is processing? <a href=\"https://github.com/defunkt/resque#signals\">There&#8217;s a signal for that</a>. What if, between taking a job off the queue and fully processing it, the whole server disappears due to a network partition, hardware failure, or the FBI &#8220;borrowing&#8221; your rack?</p>\n\n<p><strong>¡DRAMA MUSIC!</strong></p>\n\n<p>Honestly, you shouldn&#8217;t treat Resque, or even Redis, like you would a relational or dynamo-style database. Redis, like memcached, is designed as a cache. You put things in it, you can get it out, really fast. Redis, like memcached, rarely falls over. But if it does, the remediation steps are manual. Redis currently doesn&#8217;t have a good High Availability setup (<a href=\"http://redis.io/topics/sentinel-spec\">it&#8217;s being contemplated</a>).</p>\n\n<p>Further, Resque assumes that clients will properly process <em>every</em> message they dequeue. This isn&#8217;t a bad assumption. Most systems work most of the time. But, if a Resque worker process fails, it&#8217;s not great. It will lose all of the message(s) held in memory, and the Redis instance that runs your Resque queues is none the wiser.</p>\n\n<p><strong>¡DRAMA MUSIC!</strong></p>\n\n<p>In my past usage of Resque, this isn&#8217;t that big of a deal. Most jobs aren&#8217;t business-critical. If the occasional image doesn&#8217;t get resized or a notification email doesn&#8217;t go out, life goes on. A little logging and data tweaking cures many ills.</p>\n\n<p>But, some jobs are business-critical. They need stronger semantics than Resque provides. The processing of those jobs, the state of that processing, is part of our application&#8217;s logic. We need to model those jobs in our application and store that state somewhere we can trust.</p>\n\n<p>I first became really aware of this problem, and a nice solution to it, listening to the <a href=\"http://rubyrogues.com/\">Ruby Rogues podcast</a>. Therein, one of the panelists advised everyone to model crucial processing as state machines. The jobs become the transitions from one model state to the next. You store the state alongside an appropriate model in your database. If a job should get dropped, it&#8217;s possible to scan the database for models that are in an inconsistent state and issue the job again.</p>\n\n<h2 id=\"examplefollows\">Example follows</h2>\n\n<p>Let&#8217;s work an example. For our imaginary application, comment notifications are <em>really</em> important. We want to make sure they get sent, come hell or high water. Here&#8217;s what our comment model looks like originally:</p>\n\n<pre><code>    class Comment\n\n      after_create :send_notification\n\n      def send_notification\n        Resque.enqueue(NotifyUser, self.user_id, self.id)\n      end\n\n    end\n</code></pre>\n\n<p>Now we&#8217;ll add a job to send that notification:</p>\n\n<pre><code>    class NotifyUser\n      @queue = :notify_user\n\n      def self.perform(user_id, comment_id)\n        # Load the user and comment, send a notification!\n      end\n\n    end\n</code></pre>\n\n<p>But, as I&#8217;ve pointed out with great drama, this code can drop jobs. Let&#8217;s throw that state machine in:</p>\n\n<pre><code>    class Comment\n      # We'll use acts-as-state-machine. It's a classic.\n      include AASM\n\n      # We store the state of sending this notification in the aptly named\n      # `notification_state` column. AASM gives us predicate methods to see if this\n      # model is in the `pending?` or `sent?` states and a `notification_sent!`\n      # method to go from one state to the next.\n      aasm :column =&gt; :notification_state do\n        state :pending, :initial =&gt; true\n        state :sent\n\n        event :notification_sent do\n          transitions :to =&gt; :sent, :from =&gt; [:pending]\n        end\n      end\n\n      after_create :send_notification\n\n      def send_notification\n        Resque.enqueue(NotifyUser, self.user_id, self.id)\n      end\n\n    end\n</code></pre>\n\n<p>Our notification has two states: pending, and sent. Our web app creates it in the pending state. After the job finishes, it will put it in the sent state.</p>\n\n<pre><code>    class NotifyUser\n      @queue = :notify_user\n\n      def self.perform(user_id, comment_id)\n        user    = User.find(user_id)\n        comment = Comment.find(comment_id)\n\n        user.notify_for(comment)\n        # Notification success! Update the comment's state.\n        comment.notification_sent!\n      end\n\n    end\n</code></pre>\n\n<p>This a good start for more reliably processing jobs. However, most jobs happen to handle the interaction between two systems. This notification is a great example. It integrates our application with a mail server or another service that handles our notifications. Talking to those things is probably something that isn&#8217;t tolerant to duplicate requests. If our process croaks between the time it tells the mail server to send and the time it updates the notification state in our database, we could accidentally process this notification twice. Back to square one?</p>\n\n<p><strong>¡DRAMA MUSIC!</strong></p>\n\n<p>Not quite. We can reduce our problem space once more by adding another state to our model.</p>\n\n<pre><code>    class Comment\n      include AASM\n\n      aasm :column =&gt; :notification_state do\n        state :pending, :initial =&gt; true\n        state :sending # We have attempted to send a notification\n        state :sent    # The notification succeeded\n        state :error   # Something is amiss :(\n\n        # This happens right before we attempt to send the notification\n        event :notification_attempted do\n          transitions :to =&gt; :sending, :from [:pending]\n        end\n\n        # We take this transition if an exception occurs\n        event :notification_error do\n          transitions :to =&gt; :error, :from =&gt; [:sending]\n        end\n\n        # When everything goes to plan, we take this transition\n        event :notification_sent do\n          transitions :to =&gt; :sent, :from =&gt; [:sending]\n        end\n\n      end\n\n      after_create :send_notification\n\n      def send_notification\n        Resque.enqueue(NotifyUser, self.user_id, self.id)\n      end\n\n    end\n</code></pre>\n\n<p>Now, when our job processes a notification, it first uses <code>notification_attempted</code>. Should this job fail, we&#8217;ll know which jobs we should look for in our logs. We could also get a little sneaky and monitor the number of jobs in this state if we think we&#8217;re bottlenecking around sending the actual notification. Once the job completes, we transition to the <code>sent</code> state. If anything goes wrong, we catch the exception and put the job in the <code>error</code> state. We definitely want to monitor this state and use the logs to figure out what went wrong, manually fix it, and perhaps write some code to fix bugs or add robustness.</p>\n\n<p>The <code>sending</code> state is entered when <em>at least one</em> worker has picked up a notification and tried to send the message. Should that worker fail in sending the message <em>or</em> updating the database, we will know. When trouble strikes, we&#8217;ll know we have two cases to deal with: notifications that haven&#8217;t been touched at all, and notifications that were attempted and <em>may</em> have succeeded. The former, we&#8217;ll handle by requeueing them. The latter, we&#8217;ll probably have to write a script to grep our mail logs and see if we successfully sent the message. (You are logging everything, centrally aggregating it, and know how to search it, right?)</p>\n\n<p>The truth is, the integration points between systems is a gnarly problem. You don&#8217;t so much solve the problem; you get really good at detecting and responding to edge cases. Thus is life in production. But losing jobs, we can make really good progress on that. Don&#8217;t worry about your low-value jobs; start with the really important ones, and weave the state of those jobs into the rest of your application. Some day, you&#8217;ll thank yourself for doing that.</p>\n",
				"date_published": "2012-06-05T08:51:06-07:00",
				"url": "https://therealadam.com/2012/06/05/keep-your-application.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/06/02/convincing-yourself-youre.html",
				"title": "Convincing yourself you’re not done",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Writer&#8217;s block gets all the attention. It robs the inspired and stunts the progress of those with a deadline to beat. It&#8217;s a starting problem.</p>\n\n<p>At some point, I learned all the tricks for overcoming the start, for getting past the blank canvas. Now, I find myself challenged by the converse. I have a finishing problem. I&#8217;m always convincing myself that I&#8217;m not done.</p>\n\n<p>How do I get a bunch of words to feel like a cohesive essay? What&#8217;s needed to ship this code? How do I get this awesome joke to fit into one little tweet?!</p>\n\n<p>It&#8217;s an ongoing challenge. Even if the essay, code, or joke I&#8217;m working on isn&#8217;t throwing me curveballs, my head can jump in and impose one. Not eloquent enough, has a potential bug, too obtuse. My brain can come up with any number of ways to convince me that I shouldn&#8217;t call the thing done.</p>\n\n<p>Here are some things I&#8217;ve been trying to outthink my brain:</p>\n\n<ul>\n<li>Before I sit down to make something, decide what the goal for the session is. Am I trying to get started, explore a new direction, edit or refactor something, or push through the details needed to finish?</li>\n<li>When I start something, outline it. What is the beginning, middle, and end of the thing? What is the result? What are the materials (example code, a demonstrative screenshot, a funny picture), and do I need to acquire or create them?</li>\n<li>Put up a little resistance when the temptation to start something new strikes. Consider whether it&#8217;s an exploration or a creation. Can I easily turn it into something I can publicize (on my weblog, GitHub, etc.), or is it an intermediate or even throwaway product?</li>\n</ul>\n\n<p>I&#8217;m not sure if any of these will prove reliable finishers. Your mileage may vary.</p>\n\n<p>Here&#8217;s my desktop folder. I shoved all my previously unfinished projects in another folder and wiped the slate clean. </p>\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2012/06/gameon.png\" alt=\"A cleanish slate. Game, on.\" border=\"0\" width=\"234\" height=\"282\" /></div><p>Game on.</p>\n",
				"date_published": "2012-06-02T21:05:02-07:00",
				"url": "https://therealadam.com/2012/06/02/convincing-yourself-youre.html",
				"tags": ["Expanded ideas","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/05/17/tables-and-lambdas.html",
				"title": "Tables and lambdas, a cure for smelly cases",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Lots of folks consider <code>case</code> expressions in Ruby a code smell. I&#8217;m not ready to write them off just yet, but I know a good replacement for some uses of <code>case</code> when I see it. Rad co-worker David Copeland&#8217;s <a href=\"http://www.naildrivin5.com/blog/2012/05/16/lookup-tables-with-lambdas.html\">Lookup Tables With Lambdas</a> is one of those replacements. For cases where a method takes a parameter, throws it into a <code>case</code>, and returns a value, I can replace all that lookup business with a hash lookup. To carry the metaphor through, the hash <em>is</em> the lookup table. Rad.</p>\n\n<p>Where it gets fun is when I need to do some kind of dynamic lookup in the hash. Normally I wouldn&#8217;t want to do that when the Ruby interpreter parses my hash literal. If I reach into my functional programming bag of tricks, I recall that lambdas can be used to defer evaluation. And that&#8217;s exactly what David recommends. If I&#8217;ve got database lookups or logic I need to embed in my tables, Ruby&#8217;s <code>lambda</code> comes to the rescue!</p>\n\n<p>This approach works great at the small-to-medium scale. That said, I always keep in mind that a bunch of methods manipulating a hash, using its keys as a convention, is an encapsulated, orthogonal object begging to happen. Remember, it&#8217;s Ruby; we can make our objects behave like hashes but still do OO- and test-driven design.</p>\n",
				"date_published": "2012-05-17T06:49:46-07:00",
				"url": "https://therealadam.com/2012/05/17/tables-and-lambdas.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/05/15/turns-out-i.html",
				"title": "Turns out I was wrong about RSpec subjects",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I was afraid that David Chelimsky was going to take away my toys! Consider, <a href=\"http://blog.davidchelimsky.net/2012/05/13/spec-smell-explicit-use-of-subject/\">explicit use of subject in RSpec considered a smell</a>:</p>\n\n<blockquote>\n<p>The problem with this example is that the word “subject” is not very intention revealing. That might not appear problematic in this small example because you can see the declaration on line 3 and the reference on line 6. But when this group grows to where you have to scroll up from the reference to find the declaration, the generic nature of the word “subject” becomes a hinderance to understanding and slows you down.</p>\n</blockquote>\n\n<p>I&#8217;m so guilty of using <code>subject</code> heavily. Even worse, I&#8217;ve been advocating it to others too. In my defense, it does lend a good deal of concision to specs and <em>seemed</em> like a golden path.</p>\n\n<p>Luckily, David isn&#8217;t taking away my toys. He&#8217;s got an even better recommendation: just use a method or <code>let</code> with a intention-revealing name. Here&#8217;s his example:</p>\n\n<pre><code>describe Article do\n  def article; Article.new; end\n\n  it &quot;validates presence of :title&quot; do\n    article.should validate_presence_of(:title)\n  end\nend\n</code></pre>\n\n<p>This is, now that I&#8217;m looking at it, way better. As this spec grows, you can add helpers for <code>article_with_comments</code>, <code>article_with_author</code>, etc. and it&#8217;s clear right on the line that helper is used what&#8217;s going on. No jumping back and forth between contexts. Thumbs up!</p>\n",
				"date_published": "2012-05-15T13:58:28-07:00",
				"url": "https://therealadam.com/2012/05/15/turns-out-i.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/04/28/three-easy-essays.html",
				"title": "Three Easy Essays on Distributed Systems",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://ryandotsmith.heroku.com/\">Ryan Smith</a> is pretty good at thinking about distributed systems. Distributed systems, the systems we (sometimes unwittingly) create on a regular basis these days, are a complicated, dense, far-reaching topic. Ryan&#8217;s managed to take a few of its problems and concisely introduce them with simple solutions that apply to all but the largest systems.</p>\n\n<p>In <a href=\"http://ryandotsmith.heroku.com/worker-pattern\">The Worker Pattern</a>, he presents a novel solution to a problem you are probably tackling with background or asynchronous job queues. Teaser: do you know what the HTTP <code>202</code> status code does?</p>\n\n<blockquote>\n<p>A web service that requires high throughput will undoubtedly need to ensure low latency while processing requests. In other words, the process that is serving HTTP requests should spend the least amount of time possible to serve the request. Subsequently if the server does not have all of the data necessary to properly respond to the request, it must not wait until the data is found. Instead it must let the client know that it is working on the fulfillment of the request and that the client should check back later.</p>\n</blockquote>\n\n<p>Coordinating multiple processes that need to process a dataset in bulk is tricky. Large systems usually end up needing some kind of Paxos service like Doozer or ZooKeeper to keep all the worker processes from butting heads or duplicating work. <a href=\"http://ryandotsmith.heroku.com/leader-election\">Leader Election</a> shows how, by scoping the problem space to existing tools, it becomes possible to put together a solution that scales down to small and medium-sized systems:</p>\n\n<blockquote>\n<p>My environment already is dependent on Ruby &amp; PostgreSQL so I want a solution that leverages my existing technologies. Also, I don&#8217;t want to create a table other than the one which I need to process.</p>\n</blockquote>\n\n<p>As applications grow, they tend to maintain more and more state across more and more systems. Incidental state is problematic, especially when you have to maintain several services to keep all of it available. Applying <a href=\"http://ryandotsmith.heroku.com/event-buffering\">Event Buffering</a> mitigates many of these problems. The core idea of this one is my favorite:</p>\n\n<blockquote>\n<p>We have seen several examples of how to transfer state from our client to our server. The primary reason that we take these steps to transfer state is to eliminate the number of services in our distributed system that have to maintain state. Keeping a database on a service eventually becomes and operational hazard.</p>\n</blockquote>\n\n<p>Most of the systems we build on the web today are distributed systems. Ryan&#8217;s writings are an excellent introduction to thinking about and building these systems. It certainly helps to comb through research papers on the topic, but these three essays are excellent starters down the path to <em>intentionally</em> building distributed systems.</p>\n",
				"date_published": "2012-04-28T16:09:02-07:00",
				"url": "https://therealadam.com/2012/04/28/three-easy-essays.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/04/20/ruby-anthropology-with.html",
				"title": "Ruby anthropology with Hopper",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>There are plenty of code metric gizmos out there. At a glance, Hopper takes a few nice steps over extant projects. Unlike previous tools, it has a clear design, an obvious extension mechanism, and the analysis tools are distinct from the reporting tools. Further, it&rsquo;s designed to run out-in-the-open, on existing open source projects. This makes it immediately useful and gives it a ton of data to work with.</p>\n<p>For entertainment, here&rsquo;s some information collected on some stuff I worked on at Gowalla: <!-- raw HTML omitted -->Chronologic<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Audit<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<p>Zach Holman is doing some interesting code anthropology on the Ruby community. Consider <a href='http://zachholman.com/talk/aggressively-probing-ruby-projects'>Aggressively Probing Ruby Projects</a>:</p>\n\n<blockquote>Hopper is a Sinatra app designed to pull down tens of thousands of Ruby projects from GitHub, snapshot each repository into ten equidistant revisions, run them through a battery of tests (which we call Probes), and hopefully come up with some deeply moving insights about how we write Ruby.</blockquote>\n\nThere are plenty of code metric gizmos out there. At a glance, Hopper takes a few nice steps over extant projects. Unlike previous tools, it has a clear design, an obvious extension mechanism, and the analysis tools are distinct from the reporting tools. Further, it's designed to run out-in-the-open, on existing open source projects. This makes it immediately useful and gives it a ton of data to work with.\n\nFor entertainment, here's some information collected on some stuff I worked on at Gowalla: <a href=\"http://codestat.us/projects/db512d34452d6c3090a994cb559e66666fd71acc/Commits\">Chronologic</a> and <a href=\"http://codestat.us/projects/36a3b6e77aae7388079765e09abd3fa60ef251e3/Commits\">Audit</a>.\n",
				"date_published": "2012-04-20T10:28:00-07:00",
				"url": "https://therealadam.com/2012/04/20/ruby-anthropology-with.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/04/19/a-real-coding.html",
				"title": "A real coding workspace",
				"content_html": "<p>Do you miss the ability to take a bunch of paper, books, and writing utensils and spread them out over a huge desk or table? Me too!</p>\n<!-- raw HTML omitted -->\n<p>This project is fantastic. It&rsquo;s taking a page from the Smalltalk environments of yore, cross-referencing that with <!-- raw HTML omitted -->Bret Victor&rsquo;s ideas<!-- raw HTML omitted --> on workspace interactivity. The result is a kick-in-the-pants to almost every developer&rsquo;s current workflow.</p>\n<p>There&rsquo;s a lot to think about here. A lot of people focus on making their workflow <!-- raw HTML omitted -->faster<!-- raw HTML omitted -->, but what about a workspace that makes it easier to <!-- raw HTML omitted -->think<!-- raw HTML omitted -->? There&rsquo;s a lot of room to <!-- raw HTML omitted -->design<!-- raw HTML omitted --> a better workspace, even if you&rsquo;re not going as far as Light Table does.</p>\n<p>There&rsquo;s a project on Kickstarter to <!-- raw HTML omitted -->fund further development of Light Table<!-- raw HTML omitted -->. If you write software, it&rsquo;s likely in your interest to chip in.</p>\n",
				"content_text": "Do you miss the ability to take a bunch of paper, books, and writing utensils and spread them out over a huge desk or table? Me too!\n\n<blockquote><p>Light Table is based on a very simple idea: we need a real work surface to code on, not just an editor and a project explorer. We need to be able to move things around, keep clutter down, and bring information to the foreground in the places we need it most.</p></blockquote>\n\nThis project is fantastic. It's taking a page from the Smalltalk environments of yore, cross-referencing that with <a href=\"http://worrydream.com/\">Bret Victor's ideas</a> on workspace interactivity. The result is a kick-in-the-pants to almost every developer's current workflow.\n\nThere's a lot to think about here. A lot of people focus on making their workflow <em>faster</em>, but what about a workspace that makes it easier to <strong>think</strong>? There's a lot of room to <em>design</em> a better workspace, even if you're not going as far as Light Table does.\n\nThere's a project on Kickstarter to <a href=\"http://www.kickstarter.com/projects/ibdknox/light-table?ref=live\">fund further development of Light Table</a>. If you write software, it's likely in your interest to chip in.\n",
				"date_published": "2012-04-19T06:31:17-07:00",
				"url": "https://therealadam.com/2012/04/19/a-real-coding.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/04/17/uservoices-extremely-detailed.html",
				"title": "UserVoice's extremely detailed project workflow",
				"content_html": "<p>Some nice people at UserVoice took the time to jot down how they manage their product. Amongst the lessons learned:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>This, to me, is an interesting juxtaposition. Normally, I think of bugs as things that should all be fixed, eventually. Putting some scarcity of labor into them is a great idea. Fixing bugs is great, until it negatively affects morale. Better to address the most critical and pressing bugs and then move the product ball forward. A mechanism to limit the number of bugs to fix, plus the feedback loop of recognizing those who fix bugs in an iteration (they mention this elsewhere in the article), is a great idea.</p>\n",
				"content_text": "Some nice people at UserVoice took the time to jot down how they manage their product. Amongst the lessons learned:\n\n<blockquote><p><strong>Have a set amount of time per week that will be spent on bugs</strong></p>\n\n<p>We have roughly achieved this by setting a limit on the number of bugs we’ll accept into Next Up per week. This was a bit contentious at first but has resolved a lot of strife about whether a bug is worthy. The customer team is now empowered (or burdened) with choice of choosing which cards will move on. It’s the product development version of the Hunger Games.</p>\n\n</blockquote>\n\nThis, to me, is an interesting juxtaposition. Normally, I think of bugs as things that should all be fixed, eventually. Putting some scarcity of labor into them is a great idea. Fixing bugs is great, until it negatively affects morale. Better to address the most critical and pressing bugs and then move the product ball forward. A mechanism to limit the number of bugs to fix, plus the feedback loop of recognizing those who fix bugs in an iteration (they mention this elsewhere in the article), is a great idea.\n",
				"date_published": "2012-04-17T14:27:19-07:00",
				"url": "https://therealadam.com/2012/04/17/uservoices-extremely-detailed.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/04/14/cowboy-dependencies.html",
				"title": "Cowboy dependencies",
				"content_html": "<p>So you&rsquo;ve written a cool open source library. It&rsquo;s at the point where it&rsquo;s useful. You&rsquo;re pretty excited. Even better, it seems like something that might be useful at your day job. You could go ahead and integrate it. <!-- raw HTML omitted -->Win-win<!-- raw HTML omitted -->! You get to work out the rough edges on your open source project and make progress on your professional project.</p>\n<p>This is tricky ground and it&rsquo;s not as win-win as you might think. Integrating a new dependency, whether its one maintained by a team-mate or not, requires communication. Everyone on the team will have to know about the dependency, how to work with it, and how to maintain it within the project. If there&rsquo;s a deal-breaking concern with the library, consider it feedback on your library; it either needs to better address the problem, or it needs better documentation to address why the problem isn&rsquo;t so much a problem.</p>\n<p>It all comes down to communication. Adding a dependency, even if you know the person who wrote it <!-- raw HTML omitted -->really well<!-- raw HTML omitted -->, requires collaboration from your teammates. If you&rsquo;re not talking to your teammates, you&rsquo;re just cowboy coding.</p>\n<p>Don&rsquo;t cowboy dependencies into your project!</p>\n",
				"content_text": "So you've written a cool open source library. It's at the point where it's useful. You're pretty excited. Even better, it seems like something that might be useful at your day job. You could go ahead and integrate it. <strong>Win-win</strong>! You get to work out the rough edges on your open source project and make progress on your professional project.\n\nThis is tricky ground and it's not as win-win as you might think. Integrating a new dependency, whether its one maintained by a team-mate or not, requires communication. Everyone on the team will have to know about the dependency, how to work with it, and how to maintain it within the project. If there's a deal-breaking concern with the library, consider it feedback on your library; it either needs to better address the problem, or it needs better documentation to address why the problem isn't so much a problem.\n\nIt all comes down to communication. Adding a dependency, even if you know the person who wrote it <em>really well</em>, requires collaboration from your teammates. If you're not talking to your teammates, you're just cowboy coding.\n\nDon't cowboy dependencies into your project!\n",
				"date_published": "2012-04-14T13:58:53-07:00",
				"url": "https://therealadam.com/2012/04/14/cowboy-dependencies.html",
				"tags": ["Uncategorized","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/30/a-presenter-is.html",
				"title": "A Presenter is a signal",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>When someone says &#8220;your view or API layer needs presenters&#8221;, it&#8217;s easy to get confused. Presenter has become wildcard jargon for a lot of different sorts of things: coordinators, conductors, representations, filter, projections, helpers, etc. Even worse, many developers are in the &#8220;uncanny valley&#8221; stage of understanding the pattern; it&#8217;s close to being a thing, but not quite. I&#8217;ve come across presenters with entirely too much logic, presenters that don&#8217;t pull their weight as objects, and presenters that are merely indirection. Presenter is becoming a catch-all that stands for organizing logic more strictly than your framework typically provides for.</p>\n\n<p>I could make it my mission to tell every single person they&#8217;re wrong about presenters, but that&#8217;s not productive and it&#8217;s not entirely correct. Rather, presenters are a signal. When you say &#8220;we use presenters for our API&#8221;, I hear you say &#8220;we found we had too much logic hanging around in our templates and so we started moving it into objects&#8221;. From there on out, every application is likely to vary. Some applications are template focus and so need objects that are focused on presentational logic. Other apps are API focused and need more support in the area of emitting and parsing JSON. </p>\n\n<p>At first, I was a bit concerned about the <a href=\"https://github.com/rails/jbuilder\">explosion</a> of <a href=\"https://github.com/josevalim/active_model_serializers\">options</a> for putting more <a href=\"https://github.com/nesquena/rabl\">objects</a> into the <a href=\"https://github.com/gowalla/boxer\">view</a> part of your typical model-view-controller application. But as I see more applications and highly varied approaches, I&#8217;m fine with Rails not providing a standard option. Better to decide what your application really needs and craft it yourself or find something viable off the shelf.</p>\n\n<p>As long as your &#8220;presenters&#8221; reduce the complexity of your templates and makes logic easier to decouple and test, we&#8217;re all good, friend.</p>\n",
				"date_published": "2012-03-30T07:58:07-07:00",
				"url": "https://therealadam.com/2012/03/30/a-presenter-is.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/24/learn-unix-the.html",
				"title": "Learn Unix the Jesse Storimer way",
				"content_html": "<p><!-- raw HTML omitted -->11 Resources for Learning Unix Programming<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I have a soft spot in my heart for books that are way too long. But Jesse&rsquo;s on to something, I think. The problem with big Unix books is that they are tomes of arcane rites; most of it just isn&rsquo;t relevant to those building systems on a modern Unix (Linux) with modern tools (Java, Python, Ruby, etc.).</p>\n<p>Jesse&rsquo;s way of learning you a Unix is way better, honestly. Read concise programs, cross-reference them with manual pages. Try writing your own stuff. Rinse. Repeat.</p>\n",
				"content_text": "<a href=\"http://jstorimer.com/2012/02/10/learning-unix-programming.html\">11 Resources for Learning Unix Programming</a>:\n\n<blockquote><p>I tend to steer clear of the thick reference books and go instead for books that give me a look into how smart people think about programming.</p></blockquote>\n\nI have a soft spot in my heart for books that are way too long. But Jesse's on to something, I think. The problem with big Unix books is that they are tomes of arcane rites; most of it just isn't relevant to those building systems on a modern Unix (Linux) with modern tools (Java, Python, Ruby, etc.).\n\nJesse's way of learning you a Unix is way better, honestly. Read concise programs, cross-reference them with manual pages. Try writing your own stuff. Rinse. Repeat.\n",
				"date_published": "2012-03-24T20:57:11-07:00",
				"url": "https://therealadam.com/2012/03/24/learn-unix-the.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/20/how-to-approach.html",
				"title": "How to approach a database-shaped problem",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>When it comes to caching and primary storage of an application&#8217;s data, developers are faced with a plethora of shiny tools. It&#8217;s easy to get caught up in how novel these tools are and get over enthusiastic about adopting them; I certainly have in the past! Sadly, this route often leads to pain. Databases, like programming languages, are best chosen carefully, rationally, and somewhat conservatively.</p>\n\n<p>The thought process you want to go through is a lot like <a href=\"http://inside.oib.com/development/using-elasticache-s3-for-volatile-data-storage\">what former Gowalla colleague Brad Fults did at his new gig with OtherInbox</a>. He needed to come up with a new way for them to store a mapping of emails. He didn&#8217;t jump on the database of the day, the system with the niftiest features, the one with the greatest scalability, or the one that would look best on his resume. Instead, he proceeded as follows:</p>\n\n<ol>\n<li>Describe the problem domain and narrow it down to two specific, actionable challenges</li>\n<li>Elaborate on the existing solution and its shortcomings</li>\n<li>Identify the possible databases to use and summarize their advantages and shortcomings</li>\n<li>Describe the new system and how it solves the specific challenges</li>\n</ol>\n\n<p>Of course, what Brad wrote is post-hoc. He most likely did the first two steps in a matter of hours, took some days to evaluate each possible solution, decided which path to take, and then hacked out the system he later wrote about.</p>\n\n<p>But more importantly, he cheated aggressively. He didn&#8217;t choose one database, he chose two! He identified a key unique attribute to his problem; he only needed a subset of his data to be relatively fresh. This gave him the luxury of choosing a cheaper, easier data store for the complete dataset.</p>\n\n<p>In short: solve <strong>your</strong> problem, not the problem that fits the database, and cheat aggressively when you can.</p>\n",
				"date_published": "2012-03-20T18:53:56-07:00",
				"url": "https://therealadam.com/2012/03/20/how-to-approach.html",
				"tags": ["Uncategorized","Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/15/how-i-use.html",
				"title": "How I use vim splits",
				"content_html": "<p>[vimeo <a href=\"http://www.vimeo.com/38571167\">www.vimeo.com/38571167</a> w=500&amp;h=394]</p>\n<p>A five-minute exploration of how I use splits in vim to navigate between production or test code and how I move up and down through layers of abstractions. Spoiler: I use vertical splits to put test and production code side-by-side; horizontal splits come into play when I&rsquo;m navigating through the layers of a web app or something with a client/server aspect to it. I haven&rsquo;t customized vim to make this work; I just use the normal window keybindings and a bunch of commands from <!-- raw HTML omitted -->vim-rails<!-- raw HTML omitted -->.</p>\n<p>I seriously heart this setup. It&rsquo;s worth taking thirty minutes to figure out how you can approximate it with whatever editor setup you enjoy most. Hint: splits are really fantastic.</p>\n",
				"content_text": "[vimeo [www.vimeo.com/38571167](http://www.vimeo.com/38571167) w=500&h=394]\n\nA five-minute exploration of how I use splits in vim to navigate between production or test code and how I move up and down through layers of abstractions. Spoiler: I use vertical splits to put test and production code side-by-side; horizontal splits come into play when I'm navigating through the layers of a web app or something with a client/server aspect to it. I haven't customized vim to make this work; I just use the normal window keybindings and a bunch of commands from <a href=\"https://github.com/tpope/vim-rails\">vim-rails</a>.\n\nI seriously heart this setup. It's worth taking thirty minutes to figure out how you can approximate it with whatever editor setup you enjoy most. Hint: splits are really fantastic.\n",
				"date_published": "2012-03-15T20:50:49-07:00",
				"url": "https://therealadam.com/2012/03/15/how-i-use.html",
				"tags": ["Uncategorized","Video"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/11/tool-agnosticism-is.html",
				"title": "Tool agnosticism is good for you",
				"content_html": "<p>When it comes to programming editors, frameworks, and languages, you&rsquo;re likely to take one of three stances: marry, boff, or kill. There are tools that you want to use for the rest of your life, tools that you want to moonlight or tinker with, and tools you never want to use again in your life.</p>\n<p>Tool antagonism, ranting about the tools you want to kill, is fun. It plays well on internet forums. It goes nicely with beer and friends. But on a team that isn&rsquo;t using absolutely terrible tools, it&rsquo;s a waste of time.</p>\n<p>Unless your team is bizarrely like-minded, it&rsquo;s likely some disagreement will arise along the lines of editors, frameworks, and languages. I&rsquo;ve been that antagonistic guy. We can&rsquo;t use this language, it has an annoying feature. We can&rsquo;t use this framework, it doesn&rsquo;t protect us from an annoying kind of bug. I&rsquo;ve learned these conversations are a waste of social capital and unnecessarily divisive. Don&rsquo;t be that guy.</p>\n<p>There are usually a few tools that are appropriate to a given task. I often have a preference and choose specific tools for my personal projects. There are others tools that I&rsquo;m adept at using or have used before, but find minor faults with. I&rsquo;ve found it way better for me to accept that other, non-preferred tool if it&rsquo;s already in place or others have convictions about using it. Better to put effort into making the project or product better than spinning wheels on programming arcanery.</p>\n<p>When it comes to programmer tools, rational agnosticsm beats antagonism every time. Train yourelf to work amazingly-great with a handful of tools, reach adeptness with a few others, and learn how to think with as many tools as possible.</p>\n",
				"content_text": "When it comes to programming editors, frameworks, and languages, you're likely to take one of three stances: marry, boff, or kill. There are tools that you want to use for the rest of your life, tools that you want to moonlight or tinker with, and tools you never want to use again in your life.\n\nTool antagonism, ranting about the tools you want to kill, is fun. It plays well on internet forums. It goes nicely with beer and friends. But on a team that isn't using absolutely terrible tools, it's a waste of time.\n\nUnless your team is bizarrely like-minded, it's likely some disagreement will arise along the lines of editors, frameworks, and languages. I've been that antagonistic guy. We can't use this language, it has an annoying feature. We can't use this framework, it doesn't protect us from an annoying kind of bug. I've learned these conversations are a waste of social capital and unnecessarily divisive. Don't be that guy.\n\nThere are usually a few tools that are appropriate to a given task. I often have a preference and choose specific tools for my personal projects. There are others tools that I'm adept at using or have used before, but find minor faults with. I've found it way better for me to accept that other, non-preferred tool if it's already in place or others have convictions about using it. Better to put effort into making the project or product better than spinning wheels on programming arcanery.\n\nWhen it comes to programmer tools, rational agnosticsm beats antagonism every time. Train yourelf to work amazingly-great with a handful of tools, reach adeptness with a few others, and learn how to think with as many tools as possible.\n",
				"date_published": "2012-03-11T17:56:20-07:00",
				"url": "https://therealadam.com/2012/03/11/tool-agnosticism-is.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/08/rails-all-about.html",
				"title": "Rails 4, all about scaling down?",
				"content_html": "<p>To some, Rails is getting big. It brings a lot of functionality to the table. This makes apps easier to get off the ground, especially if you aren&rsquo;t an expert. But, as apps grow, it can lead to the pain; there&rsquo;s so much machinery in Rails, it&rsquo;s likely you&rsquo;re abusing <!-- raw HTML omitted -->something<!-- raw HTML omitted -->. It&rsquo;s easy to look at other, smaller tools and think there&rsquo;s green grass over there.</p>\n<p>Rails 4 might have answers to this temptation.</p>\n<p>On the controller side of things, it seems likely that some form of <!-- raw HTML omitted -->Strobe&rsquo;s Rails extensions<!-- raw HTML omitted --> will find their way into Rails, making it easier to create apps (or sub-apps) that are focused on providing an API and eschew the parts of ActionPack that aren&rsquo;t necessary for services. The thing I like a lot about this idea is it covers a gap between Sinatra and Rails. You can prototype your app with all the conveniences of Rails and then strip out the parts you don&rsquo;t need as you grow the app and strip it down to provide quick services. You could certainly still rewrite services in Sinatra, Grape, or Goliath, but it&rsquo;s nice to have an option.</p>\n<p>On the model side of things, people are, well, modeling. Simpler ways to use <!-- raw HTML omitted -->use ActiveModel with ActionPack in Rails<!-- raw HTML omitted --> will appear in Rails 4. The components the DataMapper team is working on, in the form of  <!-- raw HTML omitted -->Virtus<!-- raw HTML omitted --> seem really interesting too. If you want to get started now, you can check out <!-- raw HTML omitted -->ActiveAttr<!-- raw HTML omitted --> right now, sort of the bonus track version of ActiveModel. Chris Griego&rsquo;s put a lot of solid thought into this; you definitely want to check out his slides on <!-- raw HTML omitted -->models everywhere<!-- raw HTML omitted -->; they&rsquo;re lurking in your controllers, your requests, your responses, your API clients, <!-- raw HTML omitted -->everywhere<!-- raw HTML omitted -->.</p>\n<p>In short, my best guess on Rails 4, right now, is that it will continue to give developers a curated set of choices and frameworks to get their application off the ground. It will add options to grow your application&rsquo;s codebase sensably once it&rsquo;s proven out.</p>\n<p>What I know, for sure, is that the notion of Rails <!-- raw HTML omitted -->4<!-- raw HTML omitted --> seems really strange to me. How fast time flies. Uphill, both ways.</p>\n",
				"content_text": "To some, Rails is getting big. It brings a lot of functionality to the table. This makes apps easier to get off the ground, especially if you aren't an expert. But, as apps grow, it can lead to the pain; there's so much machinery in Rails, it's likely you're abusing <em>something</em>. It's easy to look at other, smaller tools and think there's green grass over there.\n\nRails 4 might have answers to this temptation.\n\nOn the controller side of things, it seems likely that some form of <a href=\"https://github.com/strobecorp/strobe-rails-ext\">Strobe's Rails extensions</a> will find their way into Rails, making it easier to create apps (or sub-apps) that are focused on providing an API and eschew the parts of ActionPack that aren't necessary for services. The thing I like a lot about this idea is it covers a gap between Sinatra and Rails. You can prototype your app with all the conveniences of Rails and then strip out the parts you don't need as you grow the app and strip it down to provide quick services. You could certainly still rewrite services in Sinatra, Grape, or Goliath, but it's nice to have an option.\n\nOn the model side of things, people are, well, modeling. Simpler ways to use <a href='http://blog.plataformatec.com.br/2012/03/barebone-models-to-use-with-actionpack-in-rails-4-0/'>use ActiveModel with ActionPack in Rails</a> will appear in Rails 4. The components the DataMapper team is working on, in the form of  <a href=\"https://github.com/solnic/virtus\">Virtus</a> seem really interesting too. If you want to get started now, you can check out <a href=\"https://github.com/cgriego/active_attr\">ActiveAttr</a> right now, sort of the bonus track version of ActiveModel. Chris Griego's put a lot of solid thought into this; you definitely want to check out his slides on <a href='http://speakerdeck.com/u/cgriego/p/models-models-every-where'>models everywhere</a>; they're lurking in your controllers, your requests, your responses, your API clients, <em>everywhere</em>.\n\nIn short, my best guess on Rails 4, right now, is that it will continue to give developers a curated set of choices and frameworks to get their application off the ground. It will add options to grow your application's codebase sensably once it's proven out.\n\nWhat I know, for sure, is that the notion of Rails <strong>4</strong> seems really strange to me. How fast time flies. Uphill, both ways.\n",
				"date_published": "2012-03-08T10:31:44-07:00",
				"url": "https://therealadam.com/2012/03/08/rails-all-about.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/04/this-silver-bullet.html",
				"title": "This silver bullet has happened before and it will happen again",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve fallen victim to this mindset. Make everything a Rails app, solve all the problems with Ruby, store all the data in distributed databases! It&rsquo;s not that any of these technologies are <!-- raw HTML omitted -->wrong<!-- raw HTML omitted --> it&rsquo;s just they might not yet be <!-- raw HTML omitted -->right<!-- raw HTML omitted --> for the problem at hand.</p>\n<p>You can almost age generations of programmers like tree rings. I&rsquo;m of the PHP/Rails generation, though I started in the Linux generation. A few years ago, I thought I could school the Java generations. But it turns out, I&rsquo;ve learned a ton from them, even when I was a bit of a hubristic brat. The Node generation of developers will teach me more still, both in finding new virtuous paths and in going down false paths so I don&rsquo;t have to follow them.</p>\n<p>That said, it would be delightful if there was a shortcut to get these new generations past the &ldquo;re-invent all the things!&rdquo; phase and straight into the &ldquo;make useful things and constructive dialog about how they&rsquo;re better&rdquo; phase.</p>\n",
				"content_text": "<p>Today it's Node. Before it was Rails. Before it was PHP. Before it was Java. <a href='http://williamedwardscoder.tumblr.com/post/18065079081/cogs-bad'>Cogs Bad:</a></p>\n\n<blockquote><p>There’s a whole mindset - a modern movement - that solves things in terms of working out how to link together a constellation of different utility components like noSQL databases, frontends, load balancers, various scripts and glue and so on.&nbsp; Its not that one tool fits all; its that they want to use all the shiny new tools.&nbsp; And this is held up as good architecture!&nbsp; Good separation.&nbsp; Good scaling.</p>\n</blockquote>\n\nI've fallen victim to this mindset. Make everything a Rails app, solve all the problems with Ruby, store all the data in distributed databases! It's not that any of these technologies are <em>wrong</em> it's just they might not yet be <em>right</em> for the problem at hand.\n\nYou can almost age generations of programmers like tree rings. I'm of the PHP/Rails generation, though I started in the Linux generation. A few years ago, I thought I could school the Java generations. But it turns out, I've learned a ton from them, even when I was a bit of a hubristic brat. The Node generation of developers will teach me more still, both in finding new virtuous paths and in going down false paths so I don't have to follow them.\n\nThat said, it would be delightful if there was a shortcut to get these new generations past the \"re-invent all the things!\" phase and straight into the \"make useful things and constructive dialog about how they're better\" phase.\n",
				"date_published": "2012-03-04T10:17:15-07:00",
				"url": "https://therealadam.com/2012/03/04/this-silver-bullet.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/03/01/bootstrap-subproject-and.html",
				"title": "Bootstrap, subproject, and document your way to a bigger team",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>My favorites:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Zach Holman's slides on patterns GitHub uses to scale their team <a href='http://zachholman.com/talk/ruby-patterns'>Ruby Patterns from GitHub&#039;s Codebase</a>:</p>\n\n<blockquote>Your company is going to have tons of success, which means you'll have to hire tons of people.</blockquote>\n\nMy favorites:\n\n<ul>\n<li>Every project gets a <code>script/bootstrap</code> for fetching dependencies, putting data in place, and getting new people ready to go ASAP. This script comes in handy for CI too.</li>\n<li>Try new techniques by deploying it <em>only</em> to team members at first. The example here was auto-escaping markup. They started with this only enabled for staff, instead of turning it on for everyone and feeling the hurt.</li>\n<li>Build projects within projects. Inevitably areas of functionality start to get so complex or generic that they want to be their own thing. Start by partitioning these things into <code>lib/some_project</code>, document it with a read me in <code>lib/some_project</code> and put the tests in <code>test/some_project</code>. If you need to share it across apps or scale it differently someday, you can pull those folders out and there you go.</li>\n<li>Write internal, concise API docs with TomDoc. Most things only need 1-3 lines of prose to explain what&#8217;s going on. Don&#8217;t worry about generating browse-able docs, just look in the code. I heart TomDoc so much.</li>\n</ul>\n\n<p>These ideas really aren&#8217;t about patterns, or scaling the volume of traffic your business can handle. They&#8217;re about scaling the size of your team and getting more effectiveness out of every person you add.</p>\n",
				"date_published": "2012-03-01T21:01:42-07:00",
				"url": "https://therealadam.com/2012/03/01/bootstrap-subproject-and.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/26/write-more-manpages.html",
				"title": "Write more manpages",
				"content_html": "<p>Every program, library, framework, and application needs documentation of some sort; this much is uncontroversial. How much documentation, what kinds of documentation, and where to put that documentation are the questions that often elicit endless prognostication.</p>\n<p>When it comes to documentation aimed at developers, there&rsquo;s a spectrum. On one end, there&rsquo;s zero documentation, only code. On the other end of the spectrum, are literate programs; the code is intertwined with the documentation and the language is equally geared towards marking up a document and translating ideas into machine executable code.</p>\n<p>Somewhere along this spectrum exists a happy ideal for most programmers. Inline API docs ala JavaDoc, RDoc, and <!-- raw HTML omitted -->YARD<!-- raw HTML omitted --> have been popular for a while. Lately, tools like <!-- raw HTML omitted -->docco<!-- raw HTML omitted --> and <!-- raw HTML omitted -->rocco<!-- raw HTML omitted --> have raised enthusiasm for &ldquo;semi-literate programming&rdquo;. There&rsquo;s also a lot of potential in <!-- raw HTML omitted -->projects exhaustively documenting themselves in their Cucumber features as vcr does<!-- raw HTML omitted -->.</p>\n<p>All of these tools couple code with documentation, per the notion that putting them right next to each other makes it more likely documentation gets updated in sync with the code. The downside to this approach is that code gets &lsquo;noised up&rsquo; with comments. Often this is a fair trade, but it occasionally makes navigating a file cumbersome.</p>\n<p>It happens that Unix, in its age-old sage ways, has been storing its docs out-of-line with the relevant code for years. They&rsquo;re called manpages, and they mostly don&rsquo;t suck. Every C API on a modern Unix has a corresponding manpage that describes the relevant functions and structures, how to use it, and any bugs that may exist. They&rsquo;re actually a pretty good source of info.</p>\n<p>Scene change.</p>\n<p>It so happens that Ryan Tomayko is a Unix afficionado and wrote a tool that is even better for writing manpages than the original Unix tooling. It&rsquo;s called <!-- raw HTML omitted -->ronn<!-- raw HTML omitted -->, and it&rsquo;s pretty rad; you write Markdown, and you get bonafide UNIX manpages plus manpage-styled HTML.</p>\n<p>Perhaps this is a useful way to write programmer-focused docs. Keep docs out of the code, put it in manpages instead, push it to GitHub pages. Code stays focused, docs still look great.</p>\n<p>I took <!-- raw HTML omitted -->John Nunemaker&rsquo;s scam<!-- raw HTML omitted --> gem and put this idea to the test. Here&rsquo;s what the manpage looks like, with the default styling provided by ronn:</p>\n<!-- raw HTML omitted -->\n<p>Here&rsquo;s the raw ronn document:</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->No Ruby files were harmed<!-- raw HTML omitted --> in the making of <!-- raw HTML omitted -->this documentation<!-- raw HTML omitted -->.</p>\n<p>It took me about ninety minutes to put this together. Probably 33-50% of that time was simply tinkering with ronn and making sure I was writing in the style that is typical of manpages. So we&rsquo;re talking about forty-five minutes to document a mixin with seven methods. For pretty good looking output and simple tooling, that&rsquo;s a very modest investment.</p>\n<p>The potential drawbacks are the same as any kind of documentation; it could fall out-of-sync with the production code. Really, I think this is more of a workflow issue. Ideally, every commit or merged branch is reviewed to make sure that relevant docs are updated. As a baseline, the release workflow for a project should include a step to make sure docs are up-to-date.</p>\n<p>In short, I have one datapoint that tells me that ronn is a pretty great way to generate programmer-oriented documentation. I&rsquo;ll keep tinkering with it and encourage other developers to do the same.</p>\n",
				"content_text": "Every program, library, framework, and application needs documentation of some sort; this much is uncontroversial. How much documentation, what kinds of documentation, and where to put that documentation are the questions that often elicit endless prognostication.\n\nWhen it comes to documentation aimed at developers, there's a spectrum. On one end, there's zero documentation, only code. On the other end of the spectrum, are literate programs; the code is intertwined with the documentation and the language is equally geared towards marking up a document and translating ideas into machine executable code.\n\nSomewhere along this spectrum exists a happy ideal for most programmers. Inline API docs ala JavaDoc, RDoc, and <a href=\"http://yardoc.org/\">YARD</a> have been popular for a while. Lately, tools like <a href=\"http://jashkenas.github.com/docco/\">docco</a> and <a href=\"http://rtomayko.github.com/rocco/\">rocco</a> have raised enthusiasm for \"semi-literate programming\". There's also a lot of potential in <a href=\"https://www.relishapp.com/myronmarston/vcr/docs\">projects exhaustively documenting themselves in their Cucumber features as vcr does</a>.\n\nAll of these tools couple code with documentation, per the notion that putting them right next to each other makes it more likely documentation gets updated in sync with the code. The downside to this approach is that code gets 'noised up' with comments. Often this is a fair trade, but it occasionally makes navigating a file cumbersome.\n\nIt happens that Unix, in its age-old sage ways, has been storing its docs out-of-line with the relevant code for years. They're called manpages, and they mostly don't suck. Every C API on a modern Unix has a corresponding manpage that describes the relevant functions and structures, how to use it, and any bugs that may exist. They're actually a pretty good source of info.\n\nScene change.\n\nIt so happens that Ryan Tomayko is a Unix afficionado and wrote a tool that is even better for writing manpages than the original Unix tooling. It's called <a href=\"http://rtomayko.github.com/ronn/\">ronn</a>, and it's pretty rad; you write Markdown, and you get bonafide UNIX manpages plus manpage-styled HTML.\n\nPerhaps this is a useful way to write programmer-focused docs. Keep docs out of the code, put it in manpages instead, push it to GitHub pages. Code stays focused, docs still look great.\n\nI took <a href=\"https://github.com/jnunemaker/scam\">John Nunemaker's scam</a> gem and put this idea to the test. Here's what the manpage looks like, with the default styling provided by ronn:\n\n<img src=\"uploads/2024/5796b22c28.jpg\" style=\"width: auto\" alt=\"The manage for scam\">\n\nHere's the raw ronn document:\n\n<a href=\"https://github.com/therealadam/scam/blob/master/man/scam.1.ronn\"><img src=\"uploads/2024/b24b4f01bf.jpg\" style=\"width: auto\" alt=\"Eat a plain-text sandwich\"></a>\n\n<a href=\"https://github.com/therealadam/scam/blob/master/man/scam.1.ronn\">No Ruby files were harmed</a> in the making of <a href=\"http://therealadam.github.com/scam/scam.1.html\">this documentation</a>.\n\nIt took me about ninety minutes to put this together. Probably 33-50% of that time was simply tinkering with ronn and making sure I was writing in the style that is typical of manpages. So we're talking about forty-five minutes to document a mixin with seven methods. For pretty good looking output and simple tooling, that's a very modest investment.\n\nThe potential drawbacks are the same as any kind of documentation; it could fall out-of-sync with the production code. Really, I think this is more of a workflow issue. Ideally, every commit or merged branch is reviewed to make sure that relevant docs are updated. As a baseline, the release workflow for a project should include a step to make sure docs are up-to-date.\n\nIn short, I have one datapoint that tells me that ronn is a pretty great way to generate programmer-oriented documentation. I'll keep tinkering with it and encourage other developers to do the same.\n",
				"date_published": "2012-02-26T11:46:38-07:00",
				"url": "https://therealadam.com/2012/02/26/write-more-manpages.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/22/how-to-make.html",
				"title": "How to make a CIA spy, and other anecdotes",
				"content_html": "<!-- raw HTML omitted -->\n<p>Interesting, new-to-me tidbits on <!-- raw HTML omitted -->what goes into making CIA spies, what they actually do in the field, and how the practitioners of spy craft have changed over the years<!-- raw HTML omitted -->. The bad news: spies recruitment doesn&rsquo;t exactly work like in <!-- raw HTML omitted -->Spies Like Us<!-- raw HTML omitted -->. The good news: the CIA and its spying is closer to &ldquo;just as bad/inept as you&rsquo;d think&rdquo; than &ldquo;as diabolical as a James Bond villain&rdquo;.</p>\n",
				"content_text": "<blockquote>And the hilariously incompetent, such as the OSS operative whose cover was so far blown that when he dropped into his favorite restaurant, the band played “Boo! Boo! I’m a Spy.”</blockquote>\n\nInteresting, new-to-me tidbits on <a href=\"http://www.washingtonpost.com/lifestyle/magazine/what-makes-a-perfect-spy-tick/2012/01/09/gIQAXWvL1Q_print.html\">what goes into making CIA spies, what they actually do in the field, and how the practitioners of spy craft have changed over the years</a>. The bad news: spies recruitment doesn't exactly work like in <em>Spies Like Us</em>. The good news: the CIA and its spying is closer to \"just as bad/inept as you'd think\" than \"as diabolical as a James Bond villain\".\n",
				"date_published": "2012-02-21T22:33:38-07:00",
				"url": "https://therealadam.com/2012/02/22/how-to-make.html",
				"tags": ["Curated","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/20/own-your-development.html",
				"title": "Own your development tools, and other cooking metaphors",
				"content_html": "<p>Noel Rappin encourages all of us to use our development tools efficiently. If your editor or workflow aren&rsquo;t working for you, get a new tool and learn to use it.</p>\n<p>I&rsquo;ve been working with another principle lately: minimize moving parts. I used to spend time setting up tools like autotest, guard, or spork. But it ended up that I spent too much time tweaking them or, even worse, figuring out exactly how they were working.</p>\n<p>I&rsquo;ve since adopted a much simpler workflow. Just a terminal, a text editor, and some scripts/functions/aliases/etc. for running the stuff I do all the time. I take note when I&rsquo;m doing something repeatedly and figure out how I can automate it. Besides that, I don&rsquo;t spend much time thinking about my tools. I spend time thinking about the problem in front of me. It makes a lot of sense, when you think about it.</p>\n<p>I say you should &ldquo;own&rdquo; your tools and minimize moving parts because you should <!-- raw HTML omitted -->understand<!-- raw HTML omitted --> how they all work together and how they might change the behavior of your code. If you don&rsquo;t own your tools in this way, you&rsquo;ll end up wasting time debugging someone else&rsquo;s code, i.e. a misbehaving tool. That&rsquo;s just a waste of time; when you come across a tool that offends in this way, put aside a time block to fix it, or discard it outright.</p>\n",
				"content_text": "Noel Rappin encourages all of us to use our development tools efficiently. If your editor or workflow aren't working for you, get a new tool and learn to use it.\n\nI've been working with another principle lately: minimize moving parts. I used to spend time setting up tools like autotest, guard, or spork. But it ended up that I spent too much time tweaking them or, even worse, figuring out exactly how they were working.\n\nI've since adopted a much simpler workflow. Just a terminal, a text editor, and some scripts/functions/aliases/etc. for running the stuff I do all the time. I take note when I'm doing something repeatedly and figure out how I can automate it. Besides that, I don't spend much time thinking about my tools. I spend time thinking about the problem in front of me. It makes a lot of sense, when you think about it.\n\nI say you should \"own\" your tools and minimize moving parts because you should <strong>understand</strong> how they all work together and how they might change the behavior of your code. If you don't own your tools in this way, you'll end up wasting time debugging someone else's code, i.e. a misbehaving tool. That's just a waste of time; when you come across a tool that offends in this way, put aside a time block to fix it, or discard it outright.\n",
				"date_published": "2012-02-20T14:05:39-07:00",
				"url": "https://therealadam.com/2012/02/20/own-your-development.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/18/automated-code-goodness.html",
				"title": "Automated code goodness checking with cane",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>A few nights ago, I <!-- raw HTML omitted -->added<!-- raw HTML omitted --> Xavier Shay&rsquo;s <!-- raw HTML omitted -->cane<!-- raw HTML omitted --> to <!-- raw HTML omitted -->Sifter<!-- raw HTML omitted -->. It was super simple, and cane runs surprisingly <!-- raw HTML omitted -->fast<!-- raw HTML omitted -->. Cane is designed to run as part of CI, but Sifter doesn&rsquo;t really an actual CI box. Instead, I&rsquo;ve added it to our preflight script that tells us whether deploying is a good idea or not, based on our spec suite. Now that preflight can tell us if we&rsquo;ve regressed on code complexity or style as well. I&rsquo;m pretty pumped about this setup.</p>\n<p>Next step: add glib comments on failure. I&rsquo;m thinking of something like &ldquo;Yo, imma let you finish but the code you&rsquo;re about to deploy is not that great.&rdquo;</p>\n",
				"content_text": "<a href=\"https://gist.github.com/1862005\"><img src=\"http://therealadam.com/wp-content/uploads/2012/02/cane.png\" alt=\"A script to run cane in a project\" title=\"cane\" width=\"453\" height=\"222\" class=\"aligncenter size-full wp-image-2111\" /></a>\n\nA few nights ago, I <a href=\"https://gist.github.com/1862005\">added</a> Xavier Shay's <a href=\"https://github.com/square/cane\">cane</a> to <a href=\"https://sifterapp.com/\">Sifter</a>. It was super simple, and cane runs surprisingly <em>fast</em>. Cane is designed to run as part of CI, but Sifter doesn't really an actual CI box. Instead, I've added it to our preflight script that tells us whether deploying is a good idea or not, based on our spec suite. Now that preflight can tell us if we've regressed on code complexity or style as well. I'm pretty pumped about this setup.\n\nNext step: add glib comments on failure. I'm thinking of something like \"Yo, imma let you finish but the code you're about to deploy is not that great.\"\n",
				"date_published": "2012-02-18T21:43:22-07:00",
				"url": "https://therealadam.com/2012/02/18/automated-code-goodness.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/17/what-kind-of.html",
				"title": "What kind of HTTP API is that?",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://blog.steveklabnik.com/posts/2012-02-13-an-api-ontology'>An API Ontology</a>: if you were curious about what the difference between an RPC, SOAP, REST, and Hypermedia API are, but were afraid to ask. In my opinion, this is not prescription; I don't think there's anything inherently wrong with using any of these, except SOAP. Sometimes an RPC or a simple GET is all you need.</p>\n",
				"date_published": "2012-02-17T07:12:47-07:00",
				"url": "https://therealadam.com/2012/02/17/what-kind-of.html",
				"tags": ["Curated","Link"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/15/on-rolling-ones.html",
				"title": "On rolling one's own metrics kit",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>More like this, please.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://37signals.com/svn/posts/3091-pssst-your-rails-application-has-a-secret-to-tell-you\">On instrumenting Rails, custom aggregators, bespoke dashboards, and reinventing the wheel</a>; 37signals documents their own metrics infrastructure. They&#8217;re doing some cool things here:</p>\n\n<ul>\n<li>a <a href=\"https://github.com/37signals/statsd\">StatsD fork</a> that stores to Redis; for most people, this is way more sensible than the effort involved in installing Graphite, let alone maintaining it</li>\n<li>storing aggregated metrics to flat files; it&#8217;s super-tempting to overbuild this part, but if flat files work for you, run with it</li>\n<li>leaning on ActiveSupport notifications for instrumentation; I&#8217;ve tinkered with this a little and it&#8217;s awesome, I highly recommend it if you have the means</li>\n<li>building a custom reporting app on top of their metric data; anything is better than the Graphite reporting app</li>\n</ul>\n\nMore like this, please.\n\n<p>One could take issue with them rolling this all on their own, rather than relying on existing services. If 37signals were a fresh new shop, one would have a point. Building out metrics infrastructure, even today with awesome tools like StatsD, can turn into an epic time sink. However, once you&#8217;ve been around for several years and thought enough about what you need to measure and act on your application, rolling your own metrics kit starts to make a lot of sense. It&#8217;s fun too!</p>\n\n<p>Of course, the important part is they&#8217;re measuring things and operating based on evidence. Whether you roll your own metrics infrastructure or use something off the shelf like Librato or NewRelic, operating on hard data is the coolest thing of all.</p>\n",
				"date_published": "2012-02-14T23:20:22-07:00",
				"url": "https://therealadam.com/2012/02/15/on-rolling-ones.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/02/11/whither-code-review.html",
				"title": "Whither code review and pairing",
				"content_html": "<p>Jesse Storimer has great thoughts on code review and pairing. <!-- raw HTML omitted -->You Should be Doing Formal Code Review<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I struggle with this so much, on both the giving and receiving side. When I&rsquo;m reviewing code, I find myself holding back so as not to come off as saying the other person&rsquo;s code is awful and offensive. On the receiving side, I often get frustrated and feel like a huge impediment has been put in front of my ability to ship code. In reality, neither is the case. Whether I&rsquo;m the reviewer or the reviewee, the other party is simply trying to get the best code possible into production.</p>\n<p>Jesse has further great points: review helps you avoid shortcuts, encourages one to review their own code (my favorite), and it makes for better code.</p>\n<p>More recently, Jesse&rsquo;s pointed out that <!-- raw HTML omitted -->pairing isn&rsquo;t necessarily a substitute for code review<!-- raw HTML omitted -->: &ldquo;&hellip;pairing is heavyweight and rare. Code review is lightweight and always.&rdquo;</p>\n<p>In my experience, pairing is great for cornering a problem and figuring out what the path to the solution is. Pairing is great for bringing people into the fold of a new team or project. Review is great for enforcing team standards and identifying wholly missing functionality. Review is sometimes great for finding little bugs, as is pairing.</p>\n<p>Neither pairing or code review is a silver bullet for better software, but when a team applies them well, really awesome things can happen.</p>\n",
				"content_text": "Jesse Storimer has great thoughts on code review and pairing. <a href=\"http://jstorimer.com/ruby/2010/09/30/you-should-be-doing-formal-code-review.html\">You Should be Doing Formal Code Review</a>:\n\n<blockquote>\nLet’s face it, developers are often overly confident in their work, and telling them that something is done wrong can be taken as a personal attack. If you get used to letting other people look at, and critque, your code then disidentification becomes a necessity. This also goes vice versa, you need to be able to talk about the code of your peers without worrying about them taking your critiques as a personal attack. The goal here is to ensure that the best code possible makes it into your final release.\n</blockquote>\n\nI struggle with this so much, on both the giving and receiving side. When I'm reviewing code, I find myself holding back so as not to come off as saying the other person's code is awful and offensive. On the receiving side, I often get frustrated and feel like a huge impediment has been put in front of my ability to ship code. In reality, neither is the case. Whether I'm the reviewer or the reviewee, the other party is simply trying to get the best code possible into production.\n\nJesse has further great points: review helps you avoid shortcuts, encourages one to review their own code (my favorite), and it makes for better code.\n\nMore recently, Jesse's pointed out that <a href=\"http://jstorimer.com/2012/01/30/pairing-is-not-codereview.html\">pairing isn't necessarily a substitute for code review</a>: \"...pairing is heavyweight and rare. Code review is lightweight and always.\"\n\nIn my experience, pairing is great for cornering a problem and figuring out what the path to the solution is. Pairing is great for bringing people into the fold of a new team or project. Review is great for enforcing team standards and identifying wholly missing functionality. Review is sometimes great for finding little bugs, as is pairing.\n\nNeither pairing or code review is a silver bullet for better software, but when a team applies them well, really awesome things can happen.\n",
				"date_published": "2012-02-11T12:39:16-07:00",
				"url": "https://therealadam.com/2012/02/11/whither-code-review.html",
				"tags": ["Curated","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/01/31/the-cost-of.html",
				"title": "The cost of jerks in social apps",
				"content_html": "<p>Trolls, spammers, and people gaming social software are a giant pain in the ass. At best, they are an everyday reminder that people are sometimes jerks. At worst, they can warp the direction of your product and soak up valuable time. Kellan Elliot-McCrea, formerly of Flickr and currently of Etsy, has written <!-- raw HTML omitted -->a great piece on the arithmetic of trying to deal with jerks<!-- raw HTML omitted -->, specifically Twitter spam:</p>\n<!-- raw HTML omitted -->\n<p>Unfortunately, there&rsquo;s just no good answer. You can&rsquo;t ignore jerks forever and you can&rsquo;t try to outmaneuver them too early. The answer isn&rsquo;t purely product design, community management, or tools. It&rsquo;s not all about the monetary cost to your business, but it&rsquo;s not all about the intangible cost.</p>\n<p>Basically, it takes a really, really sharp product person to figure this out. I highly recommend them, if you have the means.</p>\n",
				"content_text": "Trolls, spammers, and people gaming social software are a giant pain in the ass. At best, they are an everyday reminder that people are sometimes jerks. At worst, they can warp the direction of your product and soak up valuable time. Kellan Elliot-McCrea, formerly of Flickr and currently of Etsy, has written <a href=\"http://laughingmeme.org/2011/07/23/cost-of-false-positives/\">a great piece on the arithmetic of trying to deal with jerks</a>, specifically Twitter spam:\n\n<blockquote>\nThey’re really expensive. They burn your most precious resources when running a startup: good will, and time. Your support staff has to address the issues (while people are yelling at them), your engineers are in the database mucking about with columns, until they finally break down about build an unbanning tool which inevitably doesn’t scale to really massive attacks, or new interesting attack vectors, which means you’re either back monkeying with the live databases or you’ve now got a team of engineers dedicated just to building tools to remediate false positives. And now you’re burning engineer cycles, engineering motivation (cleaning up mistakes sucks), staff satisfaction AND community good will. That’s the definition of expensive.\n</blockquote>\n\nUnfortunately, there's just no good answer. You can't ignore jerks forever and you can't try to outmaneuver them too early. The answer isn't purely product design, community management, or tools. It's not all about the monetary cost to your business, but it's not all about the intangible cost.\n\nBasically, it takes a really, really sharp product person to figure this out. I highly recommend them, if you have the means.\n",
				"date_published": "2012-01-31T21:31:09-07:00",
				"url": "https://therealadam.com/2012/01/31/the-cost-of.html",
				"tags": ["Curated","Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/01/29/hiphop-for-nerds.html",
				"title": "Hip-hop for nerds: \"Otis\"",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><em>(Ed. Herein, I attempt to break down a current favorite of mine, &#8220;Otis&#8221; by Jay-Z and Kanye West, in terms familiar and interesting to nerds, specifically of the nerd and/or comedy persuasion.)</em></p>\n\n<p><a href=\"http://www.youtube.com/watch?v=BoEKWtgJQAU&amp;ob=av3e\">&#8220;Otis&#8221;</a> is a song arranged and performed by two best pals, Jay-Z and Kanye West. It opens with a sample of Otis Redding (hence the title) singing &#8220;Try a little tenderness&#8221;. Opening with a sample like this tells us two things:</p>\n\n<ul>\n<li>Misters Z and West enjoy the music of Mr. Redding enough that they were compelled to include it in their own music.</li>\n<li>The gentlemen are also well connected and affluent, as not just everyone can afford to sample a legend like Redding in their music</li>\n</ul>\n\n<p>A digression: sampling in hip-hop is one of its key characteristics and is of particular interest to nerds. It is a way that we can connect, through &#8220;nerding out&#8221; with the artist and find what it is that they respect and listen to. It is also a bit of a recursive structure; &#8220;Otis&#8221; samples Otis, Otis borrowed from gospel and blues, blues and gospel borrowed from traditional songs, etc. Finally, sampling is a recombinant form; in &#8220;Otis&#8221;, there is a verbatim sample in the opening bars, but the sample devolves to a looped-beat in the middle of the song and a mere sound-effect at the end of the song.</p>\n\n<p>As Misters Z and West enter the song proper, the rappers trade verses about their affluence (&#8220;New watch alert, Hublot&#8217;s / Or the big face Rollie I got two of those&#8221;), the recursive (again, nerdy) deception they use to evade the papperazzi (&#8220;They ain&#8217;t see me &#8216;cuz I pulled up in my other Benz / Last week I was in my other other Benz&#8221;), a conflicting verse about how they would seek the paparazzi out (&#8220;Photo shoot fresh, looking like wealth / I&#8217;m &#8216;bout to call the paparazzi on myself&#8221;), more boasting of their affluence and skill (&#8220;Couture level flow, it&#8217;s never going on sale / Luxury rap, the Hermes of verses&#8221;), and such.</p>\n\n<p>This song features a video, so we wouldn&#8217;t be properly doing a nerd dissection of it if we were to neglect that. It opens with our heroes approaching a Maybach sedan with a saw and a blow torch. Following a &#8220;car modification montage&#8221;, it appears the doors have been removed from the car and the front end of the car has been placed on the back, and vice versa. Another display of affluence, with perhaps a touch of hipster irony thrown in.</p>\n\n<p>The video follows with various shots of our heroes rapping and driving the Maybach through an abandoned dock or airfield. Our heroes are in the front seat of the car and there are four models in the back seat, one seated precariously atop the one in the middle as our heroes make dangerous-looking manuvers in the car. At one point it appears they will lose a model through the door-less side of the car. At multiple points, it appears the boobs of the models might fight free of their loose fitting shirt. It should be noted that the <em>appearance</em> of a possible free boob could be considered quite progressive for a hip-hop music video.</p>\n\n<p>The Maybach is, in my opinion, the most difficult to interpret signal the song and video send. Are we to understand that Misters Z and West are so affluent they can afford to put down six figures on the purchase and massively impractical modification of a high-end luxury car? Perhaps they had a spare one laying around and felt it would be a better use to destroy it than to leave it around. Or, perhaps this was a vehicle for a clever tax deduction?</p>\n\n<blockquote>\n  <p>Mr. West's CPA: You're going to owe a lot of tax on this purchase of your other-other Benz, 'Ye.</p>\n  <p>Mr. West: What if I were to use it in a music video for the purposes of promoting my upcoming album?</p>\n  <p>Mr. West's CPA: Well then you could depreciate it at 50% this year and 25% for the next two years, but you're still going to owe a lot.</p>\n  <p>Mr. West: If I were to take it to a chop shop and have them put the ass-end of the car on the front and turn the doors into wings, could I depreciate it faster?</p>\n  <p>Mr. West's CPA: throw some models in the back seat, and it *just might work*!</p>\n</blockquote>\n\n<p><em>(Ed. as it turns out, the vehicle was to be auctioned and the proceeds donated to charity)</em></p>\n\n<p>The other enigma of the video is the presence of comedian Aziz Ansari. Mr. Ansari has documented <em>(Ed. hilariously)</em> his friendship with Mr. West. Thus it is not shocking to see him appear in the video. He appears for only an instant, and his appearance marks the absence of the models in the rest of the video. Perhaps, we are to believe, Mr. Ansari is the pumpkin that the models turn into after some deadline has passed for Misters Z and West.</p>\n\n<p>Despite, or perhaps because, of its mysteries, I find &#8220;Otis&#8221; is a fantastic piece of hip-hop production. The samples is well chosen and deconstructed, the verses are interesting (if mentally unchallenging), and the video is engaging to watch. I would easily rank it amongst the top songs of recent memory, were I one to make lists of top songs.</p>\n",
				"date_published": "2012-01-29T16:50:43-07:00",
				"url": "https://therealadam.com/2012/01/29/hiphop-for-nerds.html",
				"tags": ["Music","Pop Culture","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/01/27/make-time-for.html",
				"title": "Make time for your projects",
				"content_html": "<p>Stick it to the man. Wake up early and do your best work, for yourself. <!-- raw HTML omitted -->Waking Up at 5am to Code<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve done this at various times. It&rsquo;s a fantastic hack, especially if you&rsquo;re a morning person. No one&rsquo;s around to bug you, nothing else is in your head. It&rsquo;s just you, your project, and the earlybirds.</p>\n<p>I highly recommend it if you have the means.</p>\n",
				"content_text": "Stick it to the man. Wake up early and do your best work, for yourself. <a href=\"http://www.mattgreer.org/post/2fiveam\">Waking Up at 5am to Code</a>:\n\n<p>\n<blockquote>\nAt 5am I jump out of bed and code for two hours, then get ready for work. I do this every day, including weekends.\n</blockquote>\n</p>\n\nI've done this at various times. It's a fantastic hack, especially if you're a morning person. No one's around to bug you, nothing else is in your head. It's just you, your project, and the earlybirds.\n\nI highly recommend it if you have the means.\n",
				"date_published": "2012-01-26T22:08:41-07:00",
				"url": "https://therealadam.com/2012/01/27/make-time-for.html",
				"tags": ["Curated","Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/01/24/stand-on-the.html",
				"title": "Stand on the shoulders of others' REST mistakes",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Mistaking the app&rsquo;s internal model with what API users want to work with was the mistake I made on the first API I wrote.</p>\n<!-- raw HTML omitted -->\n<p>This is how I prefer to roll my APIs lately. At the least, they should be a separate set of controllers. If you can extract a <!-- raw HTML omitted -->completely<!-- raw HTML omitted --> <!-- raw HTML omitted -->different<!-- raw HTML omitted --> application even better.</p>\n",
				"content_text": "<p>Like all API design, putting a REST API on your app is tricky business that most people learn through lots of mistakes. So stand on the shoulders of other peoples mistakes! Thus, <a href='http://jacobian.org/writing/rest-worst-practices/'>REST worst practices</a>:</p>\n\n<blockquote><p>In the REST world, the resource is key, and it’s really tempting to simply look at a Django model and make a direct link between resources and models — one model, one resource. This fails, though, as soon as you need to provide any sort of aggregated resource, and it really fails with highly denormalized models. Think about a Superhero model: a single GET /heros/superman/ ought to return all his vital stats along with a list of related Power objects, a list of his related Friend objects, etc. So the data associated with a resource might actually come out of a bunch of models. Think select_related(), except&nbsp;arbitrary.</p>\n</blockquote>\n\nMistaking the app's internal model with what API users want to work with was the mistake I made on the first API I wrote.\n\n<blockquote>Any big API is going to need to have dedicated servers that just serve API applications: the performance characteristics of large-scale APIs are so different from web apps in general that they almost always require separately-tuned servers.</blockquote>\n\nThis is how I prefer to roll my APIs lately. At the least, they should be a separate set of controllers. If you can extract a <a href=\"https://github.com/postrank-labs/goliath\">completely</a> <a href=\"https://github.com/intridea/grape\">different</a> application even better.\n",
				"date_published": "2012-01-24T20:39:35-07:00",
				"url": "https://therealadam.com/2012/01/24/stand-on-the.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2012/01/20/represent-dat-api.html",
				"title": "Represent dat API",
				"content_html": "<p>Rails is missing an abstraction when it comes to building REST APIs, in my opinion. Requests route through controllers, controllers call models or services to obtain the right objects. And then…you awkwardly try to bang a JSON object together with an ERB template? It gets awkward quickly.</p>\n<p>There&rsquo;s a lot of experimentation in the wild attempting to figure out what works well here. You can <!-- raw HTML omitted -->bang out a bunch of presenter classes<!-- raw HTML omitted -->. You can <!-- raw HTML omitted -->describe and compose representations<!-- raw HTML omitted -->. You can go <!-- raw HTML omitted -->resource oriented<!-- raw HTML omitted -->.</p>\n<p>I came across one yesterday that immediately caught my eye. You could <!-- raw HTML omitted -->just use <code>lambda</code><!-- raw HTML omitted --> to implement a bunch of functions that present, decorate, or map objects from one representation to another. To borrow an example:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I love that this one adds no machinery and no state. Input, function, output. With just <code>lambda</code>, you can describe a bunch of transformations and string them together into meaningful and interesting pipelines. I&rsquo;m experimenting with this now, hoping to find an interesting way that functional programming approaches can make it simpler to build APIs with Rails.</p>\n",
				"content_text": "Rails is missing an abstraction when it comes to building REST APIs, in my opinion. Requests route through controllers, controllers call models or services to obtain the right objects. And then…you awkwardly try to bang a JSON object together with an ERB template? It gets awkward quickly.\n\nThere's a lot of experimentation in the wild attempting to figure out what works well here. You can <a href=\"http://railstips.org/blog/archives/2011/12/01/creating-an-api/\">bang out a bunch of presenter classes</a>. You can <a href=\"http://engineering.gowalla.com/2011/10/24/boxer/\">describe and compose representations</a>. You can go <a href=\"https://github.com/apotonick/roar\">resource oriented</a>.\n\nI came across one yesterday that immediately caught my eye. You could <a href=\"http://gmarik.info/blog/2012/01/16/map-as-presenter-and-more\">just use `lambda`</a> to implement a bunch of functions that present, decorate, or map objects from one representation to another. To borrow an example:\n\n<pre><code>\n# Define a base representation\nUrlsPresenter = lambda do\n  {\n    'self'    =&gt; \"#{Gauges.api_url}/me\",\n    'gauges'  =&gt; \"#{Gauges.api_url}/gauges\",\n    'clients' =&gt; \"#{Gauges.api_url}/clients\",\n  }\nend\n\n# Compose the base representation with more data\nUserPresenter = lambda do |user|\n  {\n    'id'          =&gt; user.id,\n    'email'       =&gt; user.email,\n    'name'        =&gt; user.name,\n    'urls'        =&gt; UrlsPresenter.call\n  }\nend\n\n# Pass an object to the presenter and convert it to JSON\nUserPresenter[user].to_json\n</pre></code>\n\nI love that this one adds no machinery and no state. Input, function, output. With just `lambda`, you can describe a bunch of transformations and string them together into meaningful and interesting pipelines. I'm experimenting with this now, hoping to find an interesting way that functional programming approaches can make it simpler to build APIs with Rails.\n",
				"date_published": "2012-01-19T22:37:22-07:00",
				"url": "https://therealadam.com/2012/01/20/represent-dat-api.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/30/when-to-classnew.html",
				"title": "When to Class.new",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>In response to <a href=\"http://weblog.therealadam.com/2011/12/09/why-metaprogram-when-you-can-program/\">Why metaprogram when you can program?</a>, an astute reader asked for an example of when you would want to use <code>Class.new</code> in Ruby. It&#8217;s a rarely needed method, but really fun when faced with a tasteful application. Herein, a couple ways I&#8217;ve used it and an example from the wild.</p>\n\n<h2 id=\"dead-simpledoubles\">Dead-simple doubles</h2>\n\n<p>In my opinion, the most &#8220;wholly legitimate&#8221; frequent application of <code>Class.new</code> is in test code. It&#8217;s a great tool for creating test doubles, fakes, stubs, and mocks without the weight of pulling in a framework. To wit:</p>\n\n<pre><code>TinyFake = Class.new do\n\n  def slow_operation\n    \"SO FAST\"\n  end\n\n  def critical_operation\n    @critical = true\n  end\n\n  def critical_called?\n    @critical\n  end\n\nend\n\ntiny_fake = TinyFake.new\ntiny_fake.slow_operation\ntiny_fake.critical_operation\ntiny_fake.critical_called? == true</code></pre>\n\n<p><code>TinyFake</code> functions as a fake and as a mock. We can call a dummy implementation of <code>slow_operation</code> without worrying about the snappiness of our suite. We can verify that a method was called in the verification section of our test method. Normally you would only do one of these things at a time, but this shows how easy it is to roll your own doubles, fakes, stubs, or mocks.</p>\n\n<p>The thing I like about this approach over defining classes inside a test file or class is that it&#8217;s all scoped inside the method. We can assign the class to a local and keep the context for each test method small. This approach is also really great for testing mixins and parent classes; define a new class, add the desired functionality, and test to suit.</p>\n\n<h2 id=\"dslinternals\">DSL internals</h2>\n\n<p>Rack and Resque are two examples of libraries that expose an API based largely on writing a class with a specific entry point. Rack middlewares are objects with a <code>call</code> method that generates a response based on an environment hash and any other middlewares that are contained within the middleware. Resque expects the classes that work through enqueued jobs define a <code>perform</code> method.</p>\n\n<p>In practice, putting these methods in a class is the way to go. But, hypothetically, we are way too lazy to type <code>class</code>/<code>end</code>, or perhaps we want to wrap a bunch of standard instrumentation and logging around a simple chunk of code. In that case, we can write ourself a little shortcut:</p>\n\n<pre><code>module TinyDSL\n\n  def self.performer(&amp;block)\n    c = Class.new\n    c.class_eval { define_method(:perform, block) }\n    c\n  end\n\nend\n\nThingy = TinyDSL.performer { |*args| p args }\nThingy.new.perform(\"one\", 2, :three)</code></pre>\n\n<p>This little DSL gives us a shortcut for defining classes that implement whatever contract is expected of <code>performer</code> objects. From this humble beginning, we could mix in modules to add functionality around the <code>performer</code>, or we could pass a parent class to <code>Class.new</code> to make the generated class inherit from another class.</p>\n\n<p>That leads us to the sort-of shortcoming of this particular application of <code>Class.new</code>: if the unique function of <code>performer</code> is to wrap a class around a method (for instance, as part of an API exported by another library), why not just subclass or mixin that functionality in the client application? This is the question you have to ask yourself when using <code>Class.new</code> in this way and decide if the metaprogramming is pulling its weight.</p>\n\n<h2 id=\"howclass.newisusedinsinatra\">How Class.new is used in Sinatra</h2>\n\n<p>Sinatra is a little language for writing web applications. The language specifies how HTTP requests are mapped to blocks of Ruby. Originally, you wrote your Sinatra applications like so:</p>\n\n<pre><code>get '/'  { [200, {\"Content-Type\" =&gt; \"text/plain\"}, \"Hello, world!\"] }</code></pre>\n\n<p>Right before Sinatra 1.0, the team added a cleaner way to to build and compose applications as Ruby classes. It looks the same, except it happens inside the scope of a class instead of the global scope:</p>\n\n<pre><code>class SomeApp &lt; Sinatra::Base\n\n    get '/'  { [200, {\"Content-Type\" =&gt; \"text/plain\"}, \"Hello, world!\"] }\n\nend</code></pre>\n\n<p>It turns out that the former is implemented in terms of the latter. When you use the old, global-level DSL, it creates a new class via <code>Class.new(Sinatra::Base)</code> and then <code>class_eval</code>s a block into it to define the routes. Short, clever, effective: the best sort of <code>Class.new</code>.</p>\n\n<hr />\n\n<p>So that&#8217;s how you might see <code>Class.new</code> used in the wild. As with any metaprogramming or construct labeled &#8220;Advanced (!)&#8221;, the main thing to keep in mind, when you use it or when you set upon refactoring an existing usage, is whether it is pulling its conceptual weight. If there&#8217;s a simpler way to use it, do that instead.</p>\n\n<p>But sometimes a nail is, in fact, a nail.</p>\n",
				"date_published": "2011-12-30T14:25:10-07:00",
				"url": "https://therealadam.com/2011/12/30/when-to-classnew.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/29/the-year-of.html",
				"title": "The year of change that was 2011",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>The year is winding down, and its time to reflect on the 2011 that was. The year took me into the dark abyss of the American housing market and back out the other end. Somehow I ended up in Austin, a little lighter in the pocket-book to show for it. It saw the most exciting, and ultimate, year of that which was Gowalla. I got in pretty good shape, and then got into pretty mediocre shape. I read a lot, coded a lot, wrote a bit, and learned a lot about everything. &#8216;Twas a tough year, but all&#8217;s well that ends well, or so they say.</p>\n\n<h2 id=\"thingsiread\">Things I read</h2>\n\n<p>The most interesting fiction I read this year was <em>Neuromancer</em>. This one was probably more jaw dropping before <em>The Matrix</em> came out, but it was still interesting. That said, it reads like the Cliffs Notes version of Neal Stephenson.</p>\n\n<p>The best non-fiction I read was <em>Godël&#8217;s Proof</em>. It&#8217;s a short, clear explanation of his approach to computability. Even if you&#8217;re medicore at math and proofs, like myself, this one will stick.</p>\n\n<p>The best technical book I consumed this year was <em>Smalltalk Best Practice Patterns</em>. First off, I love Kent Beck&#8217;s concise but powerful writing style. Second off, this book is like discovering that someone wrote down a really good theory of the elements of software decades ago and no one told you about them. Third, you should get a copy of this book, look for the used ones.</p>\n\n<h2 id=\"thingsimadethisyear\">Things I made this year</h2>\n\n<p>I piled a lot of the things I learned about infrastructure and shipping software at Gowalla into <a href=\"http://speakerdeck.com/u/therealadam/p/mixing-a-persistence-cocktail-1\">Mixing a Persistence Cocktail</a>. How to think about scaling, how to ship incrementally, overcoming <strong>THE FEAR</strong>. It&#8217;s all there.</p>\n\n<p>I large chunk of my time at work on <a href=\"http://github.com/gowalla/chronologic\">Chronologic</a>. I <a href=\"http://speakerdeck.com/u/therealadam/p/chronologic-you-put-your-feeds-in-it\">presented on it</a> too. Then I open sourced it. We deployed it at Gowalla and it held up, but not without some rough spots. I <a href=\"http://speakerdeck.com/u/therealadam/p/cassandra-at-gowalla\">presented on those too</a>.</p>\n\n<p>I did a lot of open source tinkering this year. A lot of it is half-baked, but at least it&#8217;s out there. That was a major personal goal for the year, so I&#8217;m glad I at least stuck my neck out there, even if I&#8217;m not rolling in kudos. Yet!</p>\n\n<h2 id=\"thingsiwrotethisyear:\">Things I wrote this year</h2>\n\n<p>Modulo a summer lull, I ended up doing a good bit of writing this year. The crowd favorites were <a href=\"http://weblog.therealadam.com/2011/12/09/why-metaprogram-when-you-can-program/\">Why metaprogram when you can program?</a>, <a href=\"http://weblog.therealadam.com/2011/11/06/the-current-and-future-ruby-platform/\">The Current and Future Ruby Platform</a>\n<a href=\"http://weblog.therealadam.com/2011/12/01/cassandra-at-gowalla/\">Cassandra at Gowalla</a>, and <a href=\"http://weblog.therealadam.com/2011/10/09/your-frienemy-the-orm/\">Your Frienemy, the ORM</a>. My personal favorites were <a href=\"http://weblog.therealadam.com/2011/01/06/the-ear-is-connected-to-the-brain/\">The ear is connected to the brain</a>, <a href=\"http://weblog.therealadam.com/2011/05/04/post-hoc-career-advice-for-twenty-year-old-adam/\">Post-hoc career advice for twenty-something Adam</a>, and <a href=\"http://weblog.therealadam.com/2011/07/09/how-to-listen-to-stravinskys-rite-of-spring/\">How to listen to Stravinsky&#8217;s Rite of Spring</a>.</p>\n\n<p>Of course, working at Gowalla this year was quite the ride. I wrote about that too, sometimes rather obliquely. <a href=\"http://weblog.therealadam.com/2011/08/31/relentless-shipping/\">Relentless shipping</a>,\n<a href=\"http://weblog.therealadam.com/2011/11/26/the-pitfalls-of-growing-a-team/\">The pitfalls of growing a team</a>, <a href=\"http://weblog.therealadam.com/2011/07/16/the-guy-doing-the-typing-makes-the-call/\">The guy doing the typing makes the call</a>, <a href=\"http://weblog.therealadam.com/2011/07/02/skip-the-hyperbole/\">Skip the hyperbole</a>, <a href=\"http://weblog.therealadam.com/2011/11/29/sleep-is-the-best/\">Sleep is the best</a>, and <a href=\"http://weblog.therealadam.com/2011/04/13/dont-complain-make-things-better/\">Don&#8217;t complain, make things better</a> were all borne of things I learned over the course of the year.</p>\n\n<hr />\n\n<p>If I had to pithily summarize the year, I&#8217;d tie it together under change. Change is good, challenging, frustrating, and inevitable. Better to change than not, though!</p>\n",
				"date_published": "2011-12-29T12:46:04-07:00",
				"url": "https://therealadam.com/2011/12/29/the-year-of.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/22/four-essential-topics.html",
				"title": "Four essential topics of 2011, in charts",
				"content_html": "<p><!-- raw HTML omitted -->The Year In 4 Charts<!-- raw HTML omitted -->: Planet Money does an excellent job collecting four economic charts (themselves chosen from three collections of best-of charts). I&rsquo;m a dilettante as far as economics and economics go, but these charts do a great job of rolling up what seemed to have been the essential stories of the year.</p>\n<!-- raw HTML omitted -->\n<p>A picture can nullify a thousand talking points, no?</p>\n",
				"content_text": "<a href=\"http://www.npr.org/blogs/money/2011/12/22/144139101/the-year-in-4-charts?sc=tw&amp;cc=share\">The Year In 4 Charts</a>: Planet Money does an excellent job collecting four economic charts (themselves chosen from three collections of best-of charts). I'm a dilettante as far as economics and economics go, but these charts do a great job of rolling up what seemed to have been the essential stories of the year.\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2011/12/spendingandrevenues_custom.jpg\" alt=\"Spendingandrevenues custom\" border=\"0\" width=\"462\" height=\"347\" /></div>\n\nA picture can nullify a thousand talking points, no?\n",
				"date_published": "2011-12-22T21:43:50-07:00",
				"url": "https://therealadam.com/2011/12/22/four-essential-topics.html",
				"tags": ["The System","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/18/making-a-little.html",
				"title": "Making a little musical thing",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>After software development, music is probably the thing I know the most about. My brain is full of history, trivia, and a modest bit of practical knowledge on how to read notation and make music come out. That said, I haven&#8217;t really <em>practiced</em> music in several years. I&#8217;ve been busy nerding out on other things, and I&#8217;ve grown a bit lazy. Too lazy to find people to play with, too lazy for scales, too lazy to even tune a stringed instrument. Very, very lazy.</p>\n\n<p>Long story short, I&#8217;ve been wanting to get back into music lately, but I want to learn something new. Something entirely mysterious to me. Given my recent fascination with hip-hop, I&#8217;m eager to try my hand at making the beats that form the musical basis of the form.</p>\n\n<p>There are a lot of priors to cover (tinkering with various sequencers, drum machines, and synthesizers; steeping myself in sample culture; listening to the actual music and understanding its history), but I just made a short, mediocre little beat and put it on the internet. Herein, I reflect on making that little musical thing:</p>\n\n<ul>\n<li>I&#8217;m sure that, if I get serious about this, I&#8217;ll need real software like Ableton or Logic. But for my tinkering, it turns out GarageBand is sufficient. The included software instruments aren&#8217;t amazing or even idiomatic samples (no TR808, no &#8220;Apache&#8221; break included), but with a little bit of tinkering, they produce results.</li>\n<li>Laying a drum track down that is little more than a fancy click track helps to get started. GarageBand has a handy feature where you can define the a number of bars as a loop and then record multiple takes, review them, and discard the takes you don&#8217;t want.</li>\n<li>What an app lacks in samples you can make up in effects. Throwing a heavy dose of echo and a ridiculous helping of reverb made an otherwise pedestrian drum track way more interesting.</li>\n<li>I didn&#8217;t go into this with anything in my head that I wanted to make real. For the drum track, I ended up with a pretty typical beat. A little quantization made it end up sound better and more interesting than it really is. This process, manual input with some computer-assisted tweaking, produced way better results than the iOS drum machines I&#8217;ve used in the past.</li>\n<li>Tapping out the bass-line took a little more time than the drums. I didn&#8217;t have anything &#8220;standard&#8221; in my head, so I doodled a bit. This is where the &#8220;takes&#8221; gizmo in GarageBand came in really handy. Record a bunch of things, decide which one is most interesting, clean it up a little, throw an effect or two on it to make it more interesting, on to the next track.</li>\n<li>In retrospect, lots of effects is maybe a crutch. I don&#8217;t have enough taste yet to tell.</li>\n<li>With the drums and bass down, it&#8217;s time to adorn the track with a melody or interesting hit for effect. I added one subtle thing, but couldn&#8217;t think of anything I liked that was worth making prominent. If I were actually trying to use this beat for something, I&#8217;d keep digging. But for my first or second beat, it&#8217;s not a big deal.</li>\n</ul>\n\n<p>I wanted to jot down my thoughts because I&#8217;d like to write more about making and understanding music, but also because I keep meaning to write down what I find challenging and interesting as I start from a &#8220;beginner&#8217;s mind&#8221; in some craft or skill. And so I did.</p>\n\n<p>You&#8217;re six hundred words into this thing now, so I&#8217;ll reward you, if we could call it a reward, with <a href=\"http://soundcloud.com/therealadam/an-beat\">&#8220;An Beat&#8221;</a>.</p>\n",
				"date_published": "2011-12-18T18:07:18-07:00",
				"url": "https://therealadam.com/2011/12/18/making-a-little.html",
				"tags": ["Music","Pop Culture","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/16/crafting-lightsabers-uptime.html",
				"title": "Crafting lightsabers, uptime the systems, a little Clojure",
				"content_html": "<p>Herein, some great technical writings from the past week or two.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Vim: revisited<!-- raw HTML omitted -->, on how to approach Vim and build your very own config from first principles. My personal take on editor/shell configurations is that its way better to have <!-- raw HTML omitted -->someone else<!-- raw HTML omitted --> maintain them. Find something like <!-- raw HTML omitted -->Janus<!-- raw HTML omitted --> or <!-- raw HTML omitted -->oh-my-zsh<!-- raw HTML omitted -->, tweak the things it includes to work for you, and get back to doing what you do. That said, I&rsquo;m increasingly tempted to craft my own config, if only to promote the fullness and shine of my neck beard.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Making the Netflix API More Resilient<!-- raw HTML omitted --> lays out the system of circuit breakers, dashboards, and automatons Netflix uses to proactively maintain API reliability in the face of external failures. Great ideas anyone maintaining a service that needs to stay online.</p>\n<p><!-- raw HTML omitted -->List All of the Riak Keys<!-- raw HTML omitted -->, on the trickiness of <!-- raw HTML omitted -->SELECT * FROM all_the_things<!-- raw HTML omitted -->-style queries in Riak, or any distributed database, really. The short story is that these kinds of queries are impractical and not something you can do in production. The longer story is that there are ways to work around it with clever use of indexes and data structures. Make sure you check out the <!-- raw HTML omitted -->Riak Handbook<!-- raw HTML omitted --> from the same author.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Introducing Knockbox<!-- raw HTML omitted --> introduces a Clojure library for dealing with conflict resolution in data stored in distributed databases like Riak. If you&rsquo;re working with any database that leaves you wondering what to do when two clients get in a race condition, these are the droids you&rsquo;re looking for. I would have paid pretty good money to have known about this a few months ago.</p>\n<p><!-- raw HTML omitted -->Clojure&rsquo;s Mini-languages<!-- raw HTML omitted --> is a great teaser on Clojure if, like me, you&rsquo;ve tinkered with it before but are coming back to it. This is particularly useful if you&rsquo;ve seen some Lisp or Scheme before, but are slightly confused by what&rsquo;s going on with all the non-paren characters that appear in your typical Clojure program. Having taken a recent dive into the JVM ecosystem, I have to say there&rsquo;s a lot to like in Clojure. If your brain understands static types but thinks better in dynamic types (mine does), give this a look.</p>\n<hr>\n<p>I occasionally post <!-- raw HTML omitted -->links with shorter comments<!-- raw HTML omitted -->, if you&rsquo;d like a slightly more-frequent dose of what you just read.</p>\n",
				"content_text": "Herein, some great technical writings from the past week or two.\n\n<h2>Crafting your editor lightsaber</h2>\n\n<a href=\"http://mislav.uniqpath.com/2011/12/vim-revisited/\">Vim: revisited</a>, on how to approach Vim and build your very own config from first principles. My personal take on editor/shell configurations is that its way better to have <em>someone else</em> maintain them. Find something like <a href=\"https://github.com/carlhuda/janus\">Janus</a> or <a href=\"https://github.com/robbyrussell/oh-my-zsh\">oh-my-zsh</a>, tweak the things it includes to work for you, and get back to doing what you do. That said, I'm increasingly tempted to craft my own config, if only to promote the fullness and shine of my neck beard.\n\n<h2>Uptime all the systems</h2>\n\n<a href=\"http://techblog.netflix.com/2011/12/making-netflix-api-more-resilient.html?spref=tw&amp;m=1\">Making the Netflix API More Resilient</a> lays out the system of circuit breakers, dashboards, and automatons Netflix uses to proactively maintain API reliability in the face of external failures. Great ideas anyone maintaining a service that needs to stay online.\n\n<a href=\"http://www.paperplanes.de/2011/12/13/list-all-of-the-riak-keys.html\">List All of the Riak Keys</a>, on the trickiness of <code>SELECT * FROM all_the_things</code>-style queries in Riak, or any distributed database, really. The short story is that these kinds of queries are impractical and not something you can do in production. The longer story is that there are ways to work around it with clever use of indexes and data structures. Make sure you check out the <a href=\"http://riakhandbook.com/\">Riak Handbook</a> from the same author.\n\n<h2>A little bit of Clojure</h2>\n\n<a href=\"http://reiddraper.com/introducing-knockbox/\">Introducing Knockbox</a> introduces a Clojure library for dealing with conflict resolution in data stored in distributed databases like Riak. If you're working with any database that leaves you wondering what to do when two clients get in a race condition, these are the droids you're looking for. I would have paid pretty good money to have known about this a few months ago.\n\n<a href=\"http://blog.fogus.me/2010/03/23/clojures-mini-languages/\">Clojure's Mini-languages</a> is a great teaser on Clojure if, like me, you've tinkered with it before but are coming back to it. This is particularly useful if you've seen some Lisp or Scheme before, but are slightly confused by what's going on with all the non-paren characters that appear in your typical Clojure program. Having taken a recent dive into the JVM ecosystem, I have to say there's a lot to like in Clojure. If your brain understands static types but thinks better in dynamic types (mine does), give this a look.\n\n---\n\nI occasionally post <a href=\"http://tumble.therealadam.com/\">links with shorter comments</a>, if you'd like a slightly more-frequent dose of what you just read.\n",
				"date_published": "2011-12-16T07:51:10-07:00",
				"url": "https://therealadam.com/2011/12/16/crafting-lightsabers-uptime.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/14/a-short-routine.html",
				"title": "A short routine for making awesome things",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I&#8217;ve said all this stuff before, but I came across some nice writing that highlights people doing it. I&#8217;m repeating it because it&#8217;s important stuff.</p>\n\n<p>Step one, get on that grind. Making things is about consistently making progress. Consistently making progress is about showing up every day and moving the ball forward. Progress can take different forms, and sometimes won&#8217;t even feel like progress at all. The crux of the biscuit is to make the time to do the things that need doing in order to produce the thing you&#8217;re excited about making.</p>\n\n<p>Questlove, band leader of The Roots and pretty much my favorite music nerd of all time, <a href=\"http://www.thedailybeast.com/articles/2011/12/09/a-day-in-the-life-of-the-roots-questlove.html\">spends most of his waking hours thinking about, rehearsing, or performing his music</a>. A typical day for him is 11 AM - 7 PM at 30 Rock rehearsing for <em>Late Night with Jimmy Fallon</em> or writing new music, 8 PM - 2 AM spent performing or DJing, and late nights winding down by studying their performance from that day&#8217;s show or doing some crate digging (cool kid speak for listening to obscure stuff in your record collection).</p>\n\n<p>Step two, simplify. You just can&#8217;t devote the mental energy to awesome stuff if your brain is going in multiple directions. Close as many of the social medias, chats, emails, and alarm klaxons as possible. If you&#8217;re an organized person, clear your workspace; if you&#8217;re a clutter person, just roll with your clutter[1]. And, of course, think critically about what you&#8217;re consuming and using. If a tool, book, TV show, or application isn&#8217;t pulling its weight helping you do or think awesome things, show it the door.</p>\n\n<p>Matt Gemmell on <a href=\"http://mattgemmell.com/2011/12/07/simplicity/\">simplicity</a>:</p>\n\n<blockquote>\n  <p>More importantly, I also believe in simplifying my life, offline and online, to let me focus on doing what I want to do - whether that’s writing code, writing words, or helping other people with their work. To do that, I have to reduce the ambient noise.</p>\n</blockquote>\n\n<p>Step three, stop. Think. You can&#8217;t grind and simplify all the time. Your brain needs room to breathe. If you ever wondered why you do your best thinking and problem solving in your dreams or in the shower, I&#8217;ll tell you why: those places have no computers, TVs, or internet. Every week, you need to get away from your computers, music, and distractors. Go someplace novel and interesting; a coffeeshop, a park, a busy boulevard, a quiet trail, whatever makes your brain happy. Take a notebook or whatever you can <em>physically</em> think on. Now use that time to take apart what you&#8217;re working on, think about how it works, and figure out how to make it work better.</p>\n\n<p>Jacob Gorban on <a href=\"http://gorban.org/post/14162629940/thinking-time\">thinking time</a>:</p>\n\n<blockquote>\n  <p>In this state, we may become so reactive to the tasks that need to get done that we just don’t stop, take a step back and reflect on the whole situation. We may just forget to think deeply, strategically about the business and even about the work tasks themselves.</p>\n</blockquote>\n\n<p>Your brain will thank you for the chance to stop and think. You&#8217;ll feel better when you remove the extra crap that&#8217;s distracting you. You&#8217;ll glow inside when you put the time in every day to make things and end up with something awesome.</p>\n\n<p>[1] Sorry, I&#8217;m not a clutter person, I can&#8217;t help you here.</p>\n",
				"date_published": "2011-12-14T07:55:05-07:00",
				"url": "https://therealadam.com/2011/12/14/a-short-routine.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/12/quality-in-the.html",
				"title": "Quality in the inner loop",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>When <!-- raw HTML omitted -->I wrote on &ldquo;quality&rdquo; a few months ago<!-- raw HTML omitted -->, I was thinking of it as an attribute one would use to describe the outer loop of a project. Do a bunch of work, locate areas that need more quality, but a few touches on those areas or note improvements for the next iteration, and ship it.</p>\n<p>But what Brad is describing is putting quality into the <!-- raw HTML omitted -->inner<!-- raw HTML omitted --> loop. Work attains &ldquo;the quality&rdquo; as it is created, rather than as a secondary editing or review step. Little is done without considering its quality.</p>\n<p>I&rsquo;m extrapolating a bit from the letter of what Brad has written here, but that&rsquo;s because I&rsquo;ve been lucky enough to work with him. Indeed Brad&rsquo;s work is of consistently high quality. Hopefully he&rsquo;ll write more specifics about how quality code is created in the future (hint, Brad), and how much it relates to Christopher Alexander&rsquo;s &ldquo;quality without a name&rdquo;.</p>\n",
				"content_text": "<p><a href='http://h3h.net/business/quality-in-craftsmanship'>Quality in Craftsmanship</a>:</p>\n\n<blockquote><p>In software, this means that every piece of code and UI matters on its own, as it’s being crafted. Quality takes on more of a verb-like nature under this conception: to create quality is to care deeply about each bit of creation as it is added and to strive to improve one’s ability to translate that care into lasting skills and appreciable results.</p></blockquote>\n\nWhen <a href=\"http://weblog.therealadam.com/2011/08/31/relentless-shipping/\">I wrote on \"quality\" a few months ago</a>, I was thinking of it as an attribute one would use to describe the outer loop of a project. Do a bunch of work, locate areas that need more quality, but a few touches on those areas or note improvements for the next iteration, and ship it.\n\nBut what Brad is describing is putting quality into the <em>inner</em> loop. Work attains \"the quality\" as it is created, rather than as a secondary editing or review step. Little is done without considering its quality.\n\nI'm extrapolating a bit from the letter of what Brad has written here, but that's because I've been lucky enough to work with him. Indeed Brad's work is of consistently high quality. Hopefully he'll write more specifics about how quality code is created in the future (hint, Brad), and how much it relates to Christopher Alexander's \"quality without a name\".\n",
				"date_published": "2011-12-12T16:24:15-07:00",
				"url": "https://therealadam.com/2011/12/12/quality-in-the.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/09/why-metaprogram-when.html",
				"title": "Why metaprogram when you can program?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>When I sought to learn Ruby, it was for three reasons. I&#8217;d heard of this cool thing called blocks, and that they had a lot of great use cases. I read there was this thing called metaprogramming and it was easier and more practical than learning Lisp. Plus, I knew several smart, nice people who were doing Ruby so it was probably a good thing to pay attention to. As it turns out, I will never go back to a language without the first and last. I can&#8217;t live without blocks, and I can&#8217;t live without smart, kind, fun people.</p>\n\n<p>Metaprogramming requires a little more nuance. I understand metaprogramming well enough to get clever with it, and I understand it well enough to mostly understand what other people&#8217;s metaprogramming does. I still struggle with the nomenclature (eigenclass, metaclass, class Class?) and I often fall back to trial and error or brute-force tinkering to get things working.</p>\n\n<p>On the other hand, I think I&#8217;ve come far enough that I can start to smell out when metaprogramming is done in good taste. See, every language has a feature that is terribly abused because it&#8217;s the cool, clever thing in the language: operator overloading in Scala, monadic <strong>everything</strong> in Haskell, XML in Java, and metaprogramming in Ruby.</p>\n\n<h2 id=\"adamshandyguidetometaprogramming\">Adam&#8217;s Handy Guide to Metaprogramming</h2>\n\n<p>This guide won&#8217;t teach you how to metaprogram, but it will teach you <em>when</em> to metaprogram.</p>\n\n<p>I want you to think twice the next time you reach for the metaprogramming hammer.  It&#8217;s a great tool for building developer-friendly APIs, little languages, and using code as data. But often, it&#8217;s a step too far. Normal, everyday programming will do you just fine.</p>\n\n<p>There are two principles at work here.</p>\n\n<h3 id=\"dontmetaprogramwhenyoucanjustprogram\">Don&#8217;t metaprogram when you can just program</h3>\n\n<p>Exhaust all your all tricks before you reach for metaprogramming. Use Ruby&#8217;s mixins and method delegation to compose a class. Dip into your Gang of Four book and see if there isn&#8217;t a pattern that solves your problem. </p>\n\n<p>Lots of metaprogramming is in support of callback-oriented programming. Think &#8220;before&#8221;/&#8221;after&#8221;/&#8221;around&#8221; hooks. You can do this by defining extension points in the public API for your class and mixing other modules into the class that implement logic around those public methods.</p>\n\n<p>Another common form is configuring an object or framework. Think about things that declare models, connections, or queries. Use method chaining to build or configure an object that acts as a parameter list for another method or object.</p>\n\n<h3 id=\"usetheweakestformofmetaprogrammingpossible\">Use the weakest form of metaprogramming possible</h3>\n\n<p>Once you&#8217;ve exhausted your patterns and static Ruby tricks, it&#8217;s time to play a game: how little metaprogramming can you do and get the job done?</p>\n\n<p>Various forms of metaprogramming are weaker or stronger than others. The weaker ones are harder to screw up and less likely to require a deep understanding of Ruby. The stronger ones have trade-offs that require careful application and possibly need a lot of explanation to newcomers to your codebase.</p>\n\n<p>Now, I will present to you a partial ordering of metaprogramming forms, in order of weak to strong. We can bicker on their specific placement, but I&#8217;m pretty certain that the first one is far better to use frequently than the last.</p>\n\n<ul>\n<li><strong>Blocks</strong> - I hesitate to call this a form of metaprogramming. But, it is sometimes abused, and it is sometimes smart to use blocks instead of tricks further down this list. That said, if you find yourself needing more than one block parameter to a method, you should consider a parameter object that holds those blocks instead.</li>\n<li><strong>Dynamic message send on a static object</strong> - You set a symbol on an object and later it will send that symbol as a method selector to an object that doesn&#8217;t change at runtime. This is weak because the only thing that varies is the method that gets called. On the other hand, you could have just used a block.</li>\n<li><strong>Dynamic message send on a dynamic object</strong> - You set a symbol <em>and</em> a receiver object, at some point they are combined into a method call. This is stronger than the previous form because you&#8217;ve got two points of variability, which means two things to hunt down and two more things to hold in your brain.</li>\n<li><strong><code>Class.new</code></strong> - I love this method so much. But, it&#8217;s a source of potential hurt when trying to understand a new piece of code. Classes magically poofing into existence at runtime makes code harder to read and navigate with simple tools. At the very least, have the civility to assign classes created this way to a constant so they <em>feel</em> like a normal class. Downsides, err, aside, I love this method so much, having it around is way better than not.</li>\n<li><strong><code>define_method</code></strong> - I like this method a lot too. Again, it&#8217;s way better to have it around than not. It&#8217;s got two modes of use, one gnarly and one not-so-bad. If you look at how its used in Rails, you&#8217;ll see a lot of instances where its passed a string of code, sometimes with interpolations inside said string. This is the gnarly form; unfortunately, it&#8217;s also faster on MRI and maybe other runtimes. There is another form, where you pass a block to <code>define_method</code> and the block becomes the body of the newly defined method. This one is far easier to read. Don&#8217;t even ask me the differences in how variables are bound in that block; Evan Phoenix and Wilson Bilkovich tried to explain it to me once and I just stared at them like a yokel.</li>\n<li><strong><code>class_eval</code></strong> - We&#8217;re getting into the big guns of metaprogramming now. The trick with <code>class_eval</code> is that its tricky to understand exactly which class (the metaclass or the class itself) the parameters to <code>class_eval</code> apply to. The upside is that&#8217;s mostly a write-time problem. It&#8217;s easy to look at code that uses <code>class_eval</code> and figure out what it intends to do. Just don&#8217;t put that stuff in front of me in an interview and expect me to tell you where the methods land without typing the damn thing into IRB.</li>\n<li><strong><code>instance_eval</code></strong> - Same tricks as <code>class_eval</code>. This may have simpler semantics, but I always find myself falling back to tinkering with IRB, your mileage may vary. The one really tricky thing you can do with <code>instance_eval</code> (and the <code>class &lt;&lt;some_obj</code> trick) is put methods on specific instances of an object. Another thing that&#8217;s better to have around than not, but always gives me pause when I see it or think I should use it.</li>\n<li><strong><code>method_missing</code></strong> - Behold, the easiest form of metaprogramming to grasp and thus the most widely abused. Don&#8217;t feel like typing out methods to delegate or want to build an API that&#8217;s easy to use but impossible to document? <code>method_missing</code> that stuff! Builder objects are a legitimate use of <code>method_missing</code>. Everything else requires deep zen to justify. Remember: friends don&#8217;t let friends write objects that indiscriminately swallow messages.</li>\n<li><strong><code>eval</code></strong> - You almost certainly don&#8217;t need this; almost everything else is better off as a weaker form of metaprogramming. If I see this, I expect that you&#8217;re doing something really, really clever and therefore have a well-written justification and a note from your parents.</li>\n</ul>\n\n<h3 id=\"bonusprinciple\">Bonus principle!</h3>\n\n<p>At some point you <em>will</em> accidentally type &#8220;meatprogram&#8221; instead of &#8220;metaprogram&#8221;. Cherish that moment!</p>\n\n<hr />\n\n<p>It&#8217;s OK to write a few more lines of code if they&#8217;re simple, concise, and easy to test. Use delegation, decorators, adapters, etc. before you metaprogram. Exhaust your GoF tricks. Read up on SOLID principles and understand how they change how you program and give you much of the flexibility that metaprogramming provides without all the trickery. When you do resort to trickery, use the simplest trickery you can. Document it, test it, and have someone review it.</p>\n\n<p>When it comes to metaprogramming, it&#8217;s not about how much of the language you use. It&#8217;s about what the next person to see the code whispers under their breath. Don&#8217;t let your present self make future enemies.</p>\n",
				"date_published": "2011-12-09T08:14:11-07:00",
				"url": "https://therealadam.com/2011/12/09/why-metaprogram-when.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/07/modern-von-neumann.html",
				"title": "Modern Von Neumann machines, how do they work?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://www.lighterra.com/papers/modernmicroprocessors/'>Modern Microprocessors - A 90 Minute Guide!</a>. If you didn't find a peculiar joy in computer architecture classes or the canonical tomes on the topic by Patterson and Hennessey, this is the thing for you. It's a great dive into how modern processors work, what the design challenges and trade-offs are, and what you need to know as a software developer.</p>\n\n<p>Totally unrelated: when I interned at Texas Instruments, my last project was writing tests for a pre-silicon DSP. Because there were no test devices, I had to run my code against a simulator. It simulated several million gates of logic and output the result of my program as the wires that come out of the processor registers. This was fun, again in a way peculiar to my interest, at the time, in being a hardware designer/driver hacker. Let me tell you, every debugging tool you will ever see is better than inspecting hex values coming out of registers.</p>\n\n<p>Anyway, these programs ran super slow, each run took about an hour. One day I did the math and figured out the simulator was basically running at 100 hz. Not kilohertz or megahertz. One hundred hertz. So, yeah. In the snow, uphills, both way.</p>\n",
				"date_published": "2011-12-07T13:33:45-07:00",
				"url": "https://therealadam.com/2011/12/07/modern-von-neumann.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/06/changing-legacy-code.html",
				"title": "Changing legacy code, made less painful",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://blog.thecodewhisperer.com/2011/11/27/rescuing-legacy-code-by-extracting-pure-functions/'>Rescuing Legacy Code by Extracting Pure Functions</a>. Come across strange, pre-existing code. Decide you need to change it. Follow the pattern described herein. Apply TDD afterwards. I so wish someone had shown me this technique years and years ago. Also, Composed Method (from <em>Smalltalk Best Practice Patterns</em>) is so great, I can't even put it into words.</p>\n",
				"date_published": "2011-12-06T10:44:05-07:00",
				"url": "https://therealadam.com/2011/12/06/changing-legacy-code.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/12/01/cassandra-at-gowalla.html",
				"title": "Cassandra at Gowalla",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Over the past year, I&#8217;ve done a lot of work making Cassandra part of Gowalla&#8217;s multi-prong database strategy. I recently spoke at Austin on Rails on this topic, doing a sort of retrospective on our adoption of Cassandra and what I learned in the process.  You can <a href=\"http://speakerdeck.com/u/therealadam/p/cassandra-at-gowalla\">check out the slide deck</a>, or if you&#8217;re a database nerd like me, dig into the really nerdy details below.</p>\n\n<h2 id=\"whydoesgowallausecassandra\">Why does Gowalla use Cassandra?</h2>\n\n<p>We have a few motivations for using Cassandra at Gowalla. First off, it&#8217;s become out database of choice for applications with relatively fixed query patterns that, for us to succeed, need to handle a rapidly growing dataset.  Cassandra&#8217;s read and write paths are optimized for these kinds of applications. It&#8217;s good at keeping the hot subset of a database in memory while keeping queries that require hitting disk pretty quick too.</p>\n\n<p>Cassandra is also great for time-oriented applications. Any time we need to fetch data based primarily on some sort of timestamp, Cassandra is a great fit. It&#8217;s a bit unique in this regard, and that&#8217;s one of the main reasons I&#8217;m so interested in Cassandra.</p>\n\n<p>Cassandra is a Dynamo-style database, which yields some nice operational aspects. If a node goes down over night, we don&#8217;t take an availability hit; the ops people can sleep through the night and fix it later. The Cassandra developers have also done a great job of eliminating all the cases where one need to an entire Cassandra cluster at one time, resulting in downtime.</p>\n\n<h2 id=\"whendoesgowallanotusecassandra\">When does Gowalla <strong>not</strong> use Cassandra?</h2>\n\n<p>I don&#8217;t think Cassandra is all that great for iterating on prototypes. When you&#8217;re not sure what your data or queries will end up looking like, it&#8217;s hard to build a schema that works well with Cassandra. You&#8217;re also unlikely to need the strengths that a distributed, column-oriented database offers at that stage. Plus, there aren&#8217;t any options for outsourced Cassandra right now, and early-stage applications/businesses rarely want to devote expertise to hosting a database.</p>\n\n<p>Applications that don&#8217;t grow data quickly, or can fit their entire dataset in memory on a pair of machines doesn&#8217;t play to Cassandra&#8217;s strengths either. Given that you can get a machine with a few dozen gigabytes of memory for the cost of rent in the valley, sometimes it <em>does</em> pay out to scale vertically instead of horizontally as Cassandra encourages.</p>\n\n<h2 id=\"cassandraapplicationsatgowalla\">Cassandra applications at Gowalla</h2>\n\n<p>We have a handful of applications going that use Cassandra:</p>\n\n<ul>\n<li><a href=\"https://github.com/therealadam/audit\">Audit</a>: Stores ActiveRecord change data to Cassandra. This was our training-wheels trial project where we experimented with Cassandra to see if it was useful for us. It was incrementally deployed using rollout and degrade. Worked well, so we proceeded.</li>\n<li><a href=\"https://github.com/gowalla/chronologic/\">Chronologic</a>: This is an activity feed service, storing the events and timelines in Cassandra. It started off life as a secondary index cache, but became a system of record in our latest release. It works great operationally, but the query/access model didn’t always jive with how web developers expected to access data.</li>\n<li>Active stories: We store “joinability” data for users at a spot so we can pre-merge stories and prevent proliferation of a bunch of boring, one-person stories. This was built by <a href=\"http://h3h.net\">Brad Fults</a> and integrated in one pull request a few weeks before launch. The nice thing about this one was that it was able to take advantage of Cassandra&#8217;s column expiration and fit really nicely into Cassandra&#8217;s data model.</li>\n<li>Social graph caches: We store friend data from other systems so we can quickly list/suggest friends when they connect their Gowalla profile to Facebook or Twitter. This started life on Redis, but the data was growing too quickly. We decoupled it from Redis and wrote a Cassandra backend over a few days. We incrementally deployed it and got Redis out of the picture within two weeks. That was pretty cool.</li>\n</ul>\n\n<h2 id=\"whatworked\">What worked?</h2>\n\n<ul>\n<li><strong>Stable at launch</strong>. A couple weeks before launch, I switched to “devops” mode. Along with Adam McManus, our ops guy, we focused on tuning Cassandra for better read performance and to resolve stability problems. We ended up bringing in a <a href=\"http://www.datastax.com/\">DataStax</a> consultant to help us verify we were doing the right things with Cassandra. The result of this was that, at launch, our cluster held up well and we didn’t have any Cassandra-related problems.</li>\n<li><strong>Easy to tune</strong>. I found Cassandra interesting and easy to tune. There is a little bit of upfront research in figuring out exactly what the knobs mean and what the reporting tools are saying. Once I figured that out, it was easy to iteratively tweak things and see if they were having a positive effect on the performance of our cluster.</li>\n<li><strong>Time-series or semi-granular data</strong>. Of the databases I’ve tinkered with, Cassandra stands out in terms of modeling time-related data. If an application is going to pull data in time-order most of the time, Cassandra is a really great place to start. I also like the column-oriented data model. It’s great if you mostly need a key-value store, but occasionally need a key-key-value store.</li>\n</ul>\n\n<h2 id=\"whatwouldwedodifferentlynexttime\">What would we do differently next time?</h2>\n\n<ul>\n<li><strong>Developer localhost setups</strong>. We started using Cassandra in the 0.6 release, when it was a giant pain to set up locally (XML configs). It’s better now, but I should have put more energy into helping the other developers on our team getting Cassandra up and working properly. If I were to do it again, I’d probably look into leaning on the install scripts the <a href=\"https://github.com/twitter/cassandra\">cassandra gem</a> includes, rather than Homebrew and a myriad of scripts to hack the Cassandra config.</li>\n<li><strong>Eventual consistency and magic database voodoo</strong>. Cassandra does not work like MySQL or Redis. It has different design constraints and a relatively unique approach to those constraints. In advocating and explaining Cassandra, I think I pitched it too much as a database nerd and not enough as “here’s a great tool that can help us solve some problems”. I hope that <a href=\"http://www.datastax.com/docs/1.0/dml/using_cql#use-cql\">CQL</a> makes it easier to put Cassandra in front of non-database nerds in terms that they can easily relate to and immediately find productivity.</li>\n<li><strong>Rigid query model</strong>. Once we got several million rows of data into Cassandra, we found it difficult to quickly change how we represented that data. It became a game of “how can we incrementally rejigger this data structure to have these other properties we just figured out we want?” I’m not sure that’s a game you can easily win at with Cassandra. I’d love to read more about building evolvable data structures in Cassandra and see how people are dealing with high-volume, evolving data.</li>\n</ul>\n\n<h2 id=\"thingswelltrydifferentlynexttime\">Things we&#8217;ll try differently next time</h2>\n\n<ul>\n<li><strong>More like a hash, less like a database</strong>. Having developed a database-like thing, I have come to the conclusion that developers really don’t like them very much. ActiveRecord was hugely successful because it was so much more effective than anything previous to it that tried to make databases just go away. The closer a database is to one of the native data structures in the host language, the better. If it’s not a native data structure, it should be something they can create in a REPL and then say “magically save this for me!”</li>\n<li><strong>Better tools and automation</strong>. That said, every abstraction leaks. Once it does, developers want simple and useful tools that let them figure out what’s going on, what the data really looks like, tinker with it, and get back to their abstracted world as quickly as possible. This starts with tools for setting up the database, continues through interacting with it (database REPL), and for operating it (logging, introspection, etc.) Cassandra does pretty well with these tools, but they’re still a bit nerdy.</li>\n<li><strong>More indexes</strong>. We didn’t design our applications to use secondary indexes (a great feature) because they didn’t exist just yet. I should have spent more time integrating this into the design of our services. We got bit a lot towards the end of our release cycle because we were building all of our indexes in the application and hadn’t designed for reverse indexes. We also designed a rather coarse schema, which further complicated ad-hoc querying, which is another thing non-database-nerds love.</li>\n</ul>\n\n<h2 id=\"whatsthatmeanforme\">What&#8217;s that mean for me?</h2>\n\n<p>Cassandra has a lot of strengths. Once you get to a scale where you&#8217;re running data through a replicated database setup <em>and</em> some kind of key-value database or cache, it makes sense to start thinking about Cassandra. There are a lot of things you can do with it, and it lets you cheat in interesting ways. Take some extra time to think about the data model you build and how you&#8217;ll change it in the future. Like anything else, build tools for yourself to automate the things you do repeatedly. </p>\n\n<p>Don&#8217;t use it because you read a blog post about it. Use it because it fits your application and your team is excited about using it.</p>\n",
				"date_published": "2011-12-01T09:52:51-07:00",
				"url": "https://therealadam.com/2011/12/01/cassandra-at-gowalla.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/29/sleep-is-the.html",
				"title": "Sleep is the best",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Like David, I put a high value on sleep. I go out of my way to make sure I get my seven hours. If I don&rsquo;t, my brain gets messy and less useful, plus the attendant stubbornness and crankiness of being short on sleep.</p>\n<p>Figure out how much sleep you need every night and make sure you get it. You&rsquo;ll do much better work for it.</p>\n<p>Also: naps are fantastic.</p>\n",
				"content_text": "<p><a href=\"http://37signals.com/svn/posts/1006-sleep-deprivation-is-not-a-badge-of-honor\">Sleep deprivation is not a badge of honor</a>:</p>\n\n<blockquote>This is why I’ve always tried to get about 8 1/2 hours of sleep. That seems to be the best way for me to get access to peak mental performance. You might well require less (or more), but to think you can do with 6 hours or less is probably an illusion. Worse, it’s an illusion you’ll have a hard time bursting. Sleep-deprived people often vastly underestimate the impact on their abilities, studies have shown.</blockquote>\n\nLike David, I put a high value on sleep. I go out of my way to make sure I get my seven hours. If I don't, my brain gets messy and less useful, plus the attendant stubbornness and crankiness of being short on sleep.\n\nFigure out how much sleep you need every night and make sure you get it. You'll do much better work for it.\n\nAlso: naps are fantastic.\n",
				"date_published": "2011-11-29T12:16:11-07:00",
				"url": "https://therealadam.com/2011/11/29/sleep-is-the.html",
				"tags": ["Curated","Expanded ideas","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/28/pass-interference-cant.html",
				"title": "Pass interference: can't live with it, can't live without it.",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://www.grantland.com/story/_/id/7289559/calling-interference-pass-interference'>Bill Barnwell on revamping defensive penalties</a>. Pass interference is tough business in the NFL. It's one of the easiest calls to get wrong on the field (besides the myriad of missed holding calls), but the easiest to fix with a slow-motion camera. It's too easy for both sides to game it as well. There's some good ideas in here, but I think just making pass interference calls <em>and</em> non-calls is a simple first step.</p>\n",
				"date_published": "2011-11-28T09:31:55-07:00",
				"url": "https://therealadam.com/2011/11/28/pass-interference-cant.html",
				"tags": ["Curated","Sportsball!","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/27/growing-a-culture.html",
				"title": "Growing a culture",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I previously noted that <a href=\"http://weblog.therealadam.com/2011/11/26/the-pitfalls-of-growing-a-team/\">adding people to a team is tricky</a>, doing so quickly doubly so. A nice discussion popped up around how to do so effectively. So, to cover the other side of the team-growing coin, here are some ideas on what helps when adding people to your team:</p>\n\n<ul>\n<li>When you integrate people, do it purposefully and deliberately. (<a href=\"http://twitter.com/j3/status/140558773994532864\">Jeff Casimir</a>)</li>\n<li>Grow the team slowly. Pair the new person with a mentor. Task the new person with the change that a cultural, process, or technological change that the team agrees upon as part of the recruiting and hiring process. (<a href=\"https://twitter.com/therealadam/status/140553828083838976\">Myself</a>)</li>\n<li>Pairing can help. Jeff mentioned <a href=\"http://twitter.com/j3/status/140559454910427136\">pairing</a> in the <a href=\"http://twitter.com/j3/status/140559613304115200\">context of teachers</a>. If you&#8217;re already doing pairing, I bet it helps a lot of these team growth issues.</li>\n<li><a href=\"http://twitter.com/j3/status/140560854763581440\">Document your culture</a> (Jeff), present said document as new people join the team. Even better, document your culture online as part of your team&#8217;s outward face and recruiting efforts (<a href=\"http://twitter.com/briandoll/status/140562237369745408\">Brian Doll</a>). Works great for GitHub.</li>\n<li>Announce the hire with an interview-style announcement rather than a short bio (<a href=\"http://twitter.com/briandoll/status/140562005219229696\">Brian Doll</a>).</li>\n<li>Go over the top when celebrating bring on a new team member (<a href=\"http://twitter.com/j3/status/140562425027117056\">Jeff</a>).</li>\n<li>Jeff noted that in education, they have the advantage that all new people start at the same time in August. You can use this to <a href=\"http://twitter.com/j3/status/140562586696548353\">batch celebrate/integrate</a> new team members.</li>\n<li>Never stop the process of integrating your new team members (<a href=\"http://twitter.com/briandoll/status/140562843933216768\">Brian</a>). When you stop, people notice. As the saying goes, if it hurts, do it more.</li>\n<li>Job titles can be a cancer (<a href=\"http://twitter.com/briandoll/status/140563707964047360\">Brian</a>). If you&#8217;re constantly bringing on &#8220;senior developers&#8221;, what is there to celebrate?</li>\n<li>The <em>E-Myth Revisited</em> is mostly about entrepreneurship (<a href=\"http://twitter.com/j3/status/140566419522854912\">Jeff</a>), but it devotes a lot of space to focusing on <strong>roles</strong> instead of <strong>jobs</strong>. This makes it easier to bring people on with<a href=\"http://twitter.com/j3/status/140566541551935488\"> less focus on titles and more on what they will actually <em>do</em></a>. <a href=\"http://twitter.com/briandoll/status/140567058965475330\">Brian notes</a> that roles are great for lowering your bus number and encouraging team ownership of the product.</li>\n</ul>\n\n<h2 id=\"cultureishard\">Culture is hard</h2>\n\n<p>Looking at all of these ideas, it strikes me that maybe it&#8217;s not <em>adding</em> to a culture that&#8217;s tricky; maybe it&#8217;s <strong>defining and maintaing a culture</strong> that&#8217;s really challenging. I often find it difficult to draw the line between the personalities on a team and the  explicit and implicit culture that is the aggregate of those personalities and their actions. Getting a bunch of people on the same page and deciding what the culture is would prove challenging, as is any activity with a group of people.</p>\n\n<p>Subtract the notion of adding new people to a team, and the above ideas are all about defining and maintaining a culture. That&#8217;s something worth thinking about as you start a team. What do you value, how do you present yourself, how do you get stuff done? Once those questions are answered, you have a starting point for your culture. Then it&#8217;s a matter of &#8220;gardening&#8221; that culture so that everyone, new team members and veterans alike, learn it and evolve it.</p>\n\n<hr />\n\n<p>Thanks to Brian and Jeff for a great conversation, they both get internet gold stars. I&#8217;m just the guy who curated it and typed it all in later.</p>\n",
				"date_published": "2011-11-27T12:02:27-07:00",
				"url": "https://therealadam.com/2011/11/27/growing-a-culture.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/26/the-pitfalls-of.html",
				"title": "The pitfalls of growing a team",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://martinfowler.com/bliki/PrematureRampUp.html'>Premature Ramp-up</a>, Martin Fowler on the perils of building up a development team too quickly: loss of code cohesion, breakdown of communication, plus the business costs of on-boarding. The problem I'm more concerned with, when growing a software team, is maintaining culture.</p>\n\n<p>Adding a new person to a team is a process of integrating the new person&#8217;s unique good qualities to the team&#8217;s existing culture. It&#8217;s critical to use their prior experiences to clean up the sharp edges of the existing team practice without accidentally integrating new sharp edges. It&#8217;s a careful balancing act of taking advantage of the beginner&#8217;s mind and cultural indoctrination. <em>Both</em> sides have to give and take.</p>\n\n<p>If you grow too quickly, it&#8217;s very easy for this balancing act to get, well, out of balance. The new people are only indoctrinated and the team doesn&#8217;t learn, or the new people don&#8217;t understand the team and go about doing whatever they felt was successful at their previous gig.</p>\n\n<p>Its common to focus on the difficulty of <em>recruiting</em> a team, but finding a culture match and growing that culture is equally, if not more, challenging.</p>\n",
				"date_published": "2011-11-26T13:46:15-07:00",
				"url": "https://therealadam.com/2011/11/26/the-pitfalls-of.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/25/a-foodsoftware-change.html",
				"title": "A food/software change metaphor",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://brianbailey.me/2011/11/25/are-you-changing-the-menu-or-the-food/'>Are You Changing the Menu or the Food?</a> Incremental change, the food metaphor edition. It's about software and startups. But food too. Think \"software\" when he says \"food\". Just read it, OK?</p>\n",
				"date_published": "2011-11-25T15:51:11-07:00",
				"url": "https://therealadam.com/2011/11/25/a-foodsoftware-change.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/17/how-do-you.html",
				"title": "How do you devop?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I&#8217;m a sucker for good portmanteau. &#8220;Devops&#8221; is a precise, but not particularly rewarding concatenation of &#8220;development&#8221; and &#8220;operations&#8221;. What it lacks in sonic fun, it makes up in describing something that&#8217;s actually going on.</p>\n\n<p>For example, the tools that developers build for themselves are taking cues from the scripts that the operations team hobbles together to automate their work. In the bad old days, you manually configured a server after it was racked up. Then there was a specific load out of packages, a human-readable script to work from, a disk image to restore from, or maybe even a shell script to execute. Today, you can take your pick from configuration management systems that make the bootstrap and maintenance of large numbers of servers a programmatic matter.</p>\n\n<p>It&#8217;s not just bringing up new servers that developers are dabbling in. Increasingly, I run across developers who are really, really interested in logging everything, using operational metrics to guide their coding work, and running the deploys themselves. In some teams, the days of &#8220;developers versus operations&#8221; and throwing bits over walls is over. This is a good.</p>\n\n<h2 id=\"youdevopanddontknowit\">You devop and don&#8217;t know it</h2>\n\n<p>Even if you don&#8217;t know Chef or Puppet, even if you never <code>ssh</code> into a database server even once, even if you never use the <code>#devop</code> hashtag or attend a like-marketed conference, you&#8217;re probably dabbling in operations. You, friend, are so devops, and you don&#8217;t even know it.</p>\n\n<p>You use a tool or web app to look at the request rate of your application or the latency of specific URLs and you use that information to decide where to focus your performance efforts. You watch the errors and exception that your app encounters and valiantly fix them. Browsers request images, scripts, and stylesheets from your site and you work to make sure they load quickly, the site draws as soon as possible, and users from diverse continents are well served. You run deploys yourself, you build an admin backend for your app, you automate the processes needed to keep the business going. You consult with operations about what infrastructure systems are working well, what could improve, and what tools might serve everyone better.</p>\n\n<p>All of these things skirt the line between development and operations. They&#8217;re signs of diversifying your skillset, better helping the team, and taking pride in every aspect of your work. You can call it devops if you want, but I hope you&#8217;ll consider it just another part of making awesome stuff.</p>\n",
				"date_published": "2011-11-17T17:55:35-07:00",
				"url": "https://therealadam.com/2011/11/17/how-do-you.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/11/06/the-current-and.html",
				"title": "The Current and Future Ruby Platform",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Here we are, in the waning months of 2011. Ruby and its ecosystem are a bit of an incumbent these days. It&#8217;s a really great language for a few domains. It&#8217;s got the legs to become a useful language for a couple of other domains. There are a few domains where I wouldn&#8217;t recommend using it at all.</p>\n\n<h2 id=\"rubysstrongsuit\">Ruby&#8217;s strong suit</h2>\n\n<p>Ruby started off as a strong scripting language. The first thing that attracted non-tinkerers was a language with the ease-of-hacking found in Perl with the nice object-oriented features found in Java or Python. If you see code that uses special globals like <code>$!</code> and <code>$:</code> or weird constants like <code>ARGF</code> and <code>__DATA__</code> and it mostly lacks classes and methods, you&#8217;re looking at old-fashioned scripting code.</p>\n\n<p>As Ruby grew, it got a niftier way of doing object-oriented programming. Developers started to appreciate it in the same places they might use Java or Smalltalk. A few of the bravest started building production systems using a nice object-oriented language without the drawbacks of a high-maintenance type system (Java) or the isolation of an image (Smalltalk). This code ends up looking a little like someone poking Ruby with their Java brain; they&#8217;re not using the language to its fullest, but they&#8217;re not abusing it either.</p>\n\n<p>Out of the OO crowd exploded the ecosystem of web frameworks. There were a few contenders for a while, but then Rails came and sucked the air out of the competitive fire. For better or worse, nearly everyone doing web stuff with Ruby was doing Rails for a few years. This yielded buzz, lots of hype, some fallings out, some useful forward progress in the idioms of software development, and a handful of really great businesses. At this point in Ruby&#8217;s life, its interesting properties (metaprogramming, blocks, open classes) were stretched, broken, and put back together with a note pointing out that some ideas are too clever for practical use.</p>\n\n<p>As Ruby took off and more developers started using it, there was a need for integration with other systems. Thus, lots of effort was put into projects to make Ruby a part of the JVM, CLR, and Cocoa ecosystems. Largely, they delivered. At the end of 2011, you can use Ruby to integrate with and distribute apps for the JVM and OS X, and maybe even Windows. This gave Ruby credibility in large &#8220;enterprisey&#8221; shops and somewhat freed Ruby from depending on a single implementation. The work to make this happen is non-trivial and thankless but hugely important even if you never touch it; when you see one of these implementers, thank, hug, and/or bribe them.</p>\n\n<h2 id=\"rubycouldgotothere\">Ruby could go to there</h2>\n\n<p><strong>WARNING</strong> Prognostication follows <strong>WARNING</strong>, your crystal ball is possibly different than mine</p>\n\n<p>Scala, a hybrid functional/object-oriented language for the JVM, is a hot thing these days. A lot of people like that it combines the JVM, the best ideas of object-oriented programming, and then swizzles in some accessible and useful ideas from the relatively untapped lore of functional programming (FP). So it goes, Ruby already does one or two of these things, depending on how you count. The OO part is in the bag. <code>Enumerable</code> exposes a lot of the same abstractions that lie at the foundation of FP. If you&#8217;re using JRuby, you&#8217;re getting many of the benefits of the JVM, though Scala does one better in this regard right now. Someone could come along and implement immutable, lazy data structures and maybe a few combinators and give Ruby a really good FP story.</p>\n\n<p>Systems programming is traditionally the domain of C and C++ developers, with Java and Go starting to pick up some mindshare. Think infrastructure services like web servers, caches, databases, message brokers, and other daemon-y things. When you&#8217;re hacking at this level, control over memory and execution is king. Access to good concurrency and network primitives is also important. Ruby doesn&#8217;t do a great job of providing all of these right now, and Matz&#8217;s implementation might never rank highly here. However, one of the promising aspects of Rubinius is that they&#8217;re trying very hard to do well in terms of performance, concurrency, and memory management. If Rubinius can deliver on those efforts, offer easily hacked trapdoors to lower level bits, and encourage the development of libraries for network and concurrent programming, Ruby could easily turn into a good solution for small-to-medium sized infrastructure projects.</p>\n\n<p>Distributed systems are sort of already in Ruby&#8217;s wheel house and sort of a stretch for Ruby. On the one hand, most Ruby systems already run over a combination of app servers and queue workers, storing data in a hodgepodge of browser caches, in-heap caches, and databases. That&#8217;s a distributed application, and it&#8217;s handy to frame one&#8217;s thinking about building an application in terms of the challenges of a distributed system: shared state is hard to manage, failure cases are weird and gnarly, bottlenecks and points of failure are all over the place. What you don&#8217;t see Ruby used for is implementing the infrastructure underneath distributed applications. Hadoop, Zookeeper, Cassandra, Riak, and doozerd all rely on both the excellent concurrency and network primitives of their respective platforms and on the reliability and performance those platforms provide. Again, given some more progress on Ruby implementations and good implementations of abstractions for doing distributed messaging, state management, and process supervision, Ruby could be an excellent language to get distributed infrastructure projects off the ground.</p>\n\n<h2 id=\"unlikelyadvancesforruby\">Unlikely advances for Ruby</h2>\n\n<p>Embedded systems, those that power your video game consoles, TVs, cars, and steroes, rely on promises that Ruby has trouble keeping. C is king here. It provides the control, memory footprint, and predictability that embedded applications crave. Rite is an attempt to tackle this domain. The notion of a small, fast subset of Ruby has its appeal. However, developers of embedded systems typically hang out on the back of the adoption curve and are pretty particular about how they build systems. Ruby might make in-roads here, but it needs a killer app to acheive the success it currently enjoys in application development.</p>\n\n<p>Mobile apps are an explosive market these days. Explosive markets go really well with Ruby (c.f. &#8220;web 2.0&#8221;, &#8220;AJAX&#8221;, &#8220;the social web&#8221;), but mobile is different. It&#8217;s dominated by vendor ecosystems. Largely, you&#8217;ve got iOS with Objective-C and Cocoa, and Android with Java and, err, Android. Smart developers don&#8217;t tack too far from what is recommended and blessed by the platform vendor. There are efforts to make Ruby play well here, but without vendor blessing, they aren&#8217;t likely to get a lot of traction.</p>\n\n<h1 id=\"placeyourbetsgentlemen\">Place your bets, gentlemen</h1>\n\n<p>Tackling the middle tier (object/functional, distributed/concurrent, and systems programming) is where I think a lot of the really promising work is happening. Ruby 1.9 is good <em>enough</em> for many kinds of systems programming and has a few syntactic sugars that make FP a little less weird. JRuby offers integration into some <strong>very</strong> good libraries for doing distributed and concurrent stuff. Rubinius has the promise to make those same libraries <em>possible</em> on Ruby.</p>\n\n<p>Really sharpening the first tier (thinking about how to script better, getting back to OO principles, fine tuning the web development experience, improving JRuby&#8217;s integration story) is where Ruby is going to grow in the short term. The ongoing renaissance, within the Ruby community, of Unix idioms and OO design is moving the ball forward; it feels like we&#8217;re building  on better principles than we were just two years ago. The people who write Ruby will likely continue to assimilate old ideas, try disasterous new ones, and trend towards adopting better ways of building increasingly large applications.</p>\n\n<p>When it comes to Ruby, go long on server-based applications, hedge your bets on systems infrastructure, and short anything that involves platforms with restricted resources or vendor control.</p>\n",
				"date_published": "2011-11-06T15:18:21-07:00",
				"url": "https://therealadam.com/2011/11/06/the-current-and.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/10/09/your-frienemy-the.html",
				"title": "Your frienemy, the ORM",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>When modeling how our domain objects map to what is stored in a database, an object-relational mapper often comes into the picture. And then, the angst begins. Bad queries are generated, weird object models evolve, junk-drawer objects emerge, cohesion goes down and coupling goes up.</p>\n\n<p>It&#8217;s not that ORMs are a smell. They are genuinely useful things that make it easier for developers to go from an idea to a working, deployable prototype. But its easy to fall into the habit of treating them as a top-level concern in our applications.</p>\n\n<p>Maybe <strong>that</strong> is the problem!</p>\n\n<p>What if our domain models weren&#8217;t built out from the ORM? Some have suggested treating the ORM, and the persistence of our objects themselves, as mere implementation details. What might that look like?</p>\n\n<h2 id=\"hidetheormlikeyoureashamedofit\">Hide the ORM like you&#8217;re ashamed of it</h2>\n\n<p>Recently, I had the need to build an API for logging the progress of a data migration as we ran it over many million records, spitting out several new records for every input record. Said log ended up living in PostgreSQL<a href=\"1\" id=\"fnref:1\" title=\"see footnote\" class=\"footnote\">1</a>.</p>\n\n<p>Visions of decoupled grandeur in my head, I decided that my API should be not leak its databaseness out to the user. I started off trying to make the API talk directly to the PostgreSQL driver, but that I wasn&#8217;t making much progress down that road. Further, I found myself reinventing things I would get for free in ActiveRecord-land.</p>\n\n<p>Instead, I took a principled plunge. I surrendered to using an AR model, but I kept it tucked away inside the class for my API. My API makes several calls into the AR model, but it never leaks that ARness out to users of the API.</p>\n\n<p>I liked how this ended up. I was free to use AR&#8217;s functionality within the inner model. I can vary the API and the AR model independently. I can stub out, or completely replace the model implementation. It feels like I&#8217;m doing OO right.</p>\n\n<h2 id=\"enoughofthesuspenseletsseeahypotheticalexample\">Enough of the suspense, let&#8217;s see a hypothetical example</h2>\n\n<p>User model. Everyone has a name, a city, and a URL. I can all do this in my sleep, right?</p>\n\n<p>I start with by defining an API. Note that all it knows is that there is some object called <code>Model</code> that it delegates to.</p>\n\n<pre><code>class User\n  attr_accessor :name, :city, :url\n\n  def self.fetch(key)\n    Model.fetch(key)\n  end\n\n  def self.fetch_by_city(key)\n    Model.fetch_by_city(key)\n  end\n\n  def save\n    Model.create(name, city, url)\n  end\n\n  def ==(other)\n    name == other.name &amp;&amp; city == other.city &amp;&amp; url == other.url\n  end\n\nend</code></pre>\n\n<p>That&#8217;s a pretty straight-forward Ruby class, eh? The RSpec examples for it aren&#8217;t elaborate either.</p>\n\n<pre><code>describe User do\n\n  let(:name) { \"Shauna McFunky\" }\n  let(:city) { \"Chasteville\" }\n  let(:url) { \"http://mcfunky.com\" }\n\n  let(:user) do\n    User.new.tap do |u|\n      u.name = name\n      u.city = city\n      u.url = url\n    end\n  end\n\n  it \"has a name, city, and URL\" do\n    user.name.should eq(name)\n    user.city.should eq(city)\n    user.url.should eq(url)\n  end\n\n  it \"saves itself to a row\" do\n    key = user.save\n    User.fetch(key).should eq(user)\n  end\n\n  it \"supports lookup by city\" do\n    user.save\n    User.fetch_by_city(user.city).should eq(user)\n  end\n\nend</code></pre>\n\n<p>Not much coupling going on here either. Coding in a blog post is full of beautiful idealism, isn&#8217;t it?</p>\n\n<p>&#8220;Needs more realism&#8221;, says the critic. Obliged:</p>\n\n<pre><code>  class User::Model &lt; ActiveRecord::Base\n    set_table_name :users\n\n    def self.create(name, city, url)\n      super(:name =&gt; name, :city =&gt; city, :url =&gt; url)\n    end\n\n    def self.fetch(key)\n      from_model(find(key))\n    end\n\n    def self.fetch_by_city(city)\n      from_model(where(:city =&gt; city).first)\n    end\n\n    def self.from_model(model)\n      User.new.tap do |u|\n        u.name = model.name\n        u.city = model.city\n        u.url = model.url\n      end\n    end\n\n  end</code></pre>\n\n<p>Here&#8217;s the first implementation of an actual access layer for my user model. It&#8217;s coupled to the actual user model by names, but it&#8217;s free to map those names to database tables, indexes, and queries as it sees fit. If I&#8217;m clever, I might write a shared example group for the behavior of whatever implements <code>create</code>, <code>fetch</code>, and <code>fetch_by_city</code> in <code>User::Model</code>, but I&#8217;ll leave that as an exercise to the reader.</p>\n\n<p>To hook my model up when I run RSpec, I add a moderately involved <code>before</code> hook:</p>\n\n<pre><code>  before(:all) do\n    ActiveRecord::Base.establish_connection(\n      :adapter =&gt; 'sqlite3',\n      :database =&gt; ':memory:'\n    )\n\n    ActiveRecord::Schema.define do\n      create_table :users do |t|\n        t.string :name, :null =&gt; false\n        t.string :city, :null =&gt; false\n        t.string :url\n      end\n    end\n  end</code></pre>\n\n<p>As far as I know, this is about as simple as it gets to bootstrap ActiveRecord outside of a Rails test. So it goes.</p>\n\n<h2 id=\"letsfakethatout\">Let&#8217;s fake that out</h2>\n\n<p>Now I&#8217;ve got a working implementation. Yay! However, it would be nice if I didn&#8217;t need all that ActiveRecord stuff when I&#8217;m running isolated, unit tests. Because my model and data access layer are decoupled, I can totally do that. Hold on to your pants:</p>\n\n<pre><code>require 'active_support/core_ext/class'\n\nclass User::Model\n  cattr_accessor :users\n  cattr_accessor :users_by_city\n\n  def self.init\n    self.users = {}\n    self.users_by_city = {}\n  end\n\n  def self.create(name, city, url)\n    key = Time.now.tv_sec\n    hsh = {:name =&gt; name, :city =&gt; city, :url =&gt; url}\n    users[key] = hsh\n    users_by_city[city] = hsh\n    key\n  end\n\n  def self.fetch(key)\n    attrs = users[key]\n    from_attrs(attrs)\n  end\n\n  def self.fetch_by_city(city)\n    attrs = users_by_city[city]\n    from_attrs(attrs)\n  end\n\n  def self.from_attrs(attrs)\n    User.new.tap do |u|\n      u.name = attrs[:name]\n      u.city = attrs[:city]\n      u.url = attrs[:url]\n    end\n  end\n\nend</code></pre>\n\n<p>This &#8220;storage&#8221; layer is a bit more involved because I can&#8217;t lean on ActiveRecord to handle all the particulars for me. Specifically, I have to handle indexing the data in not one but <em>two</em> hashes. But, it fits on one screen and its in memory, so I get fast tests at not too much overhead.</p>\n\n<p>This is a <a href=\"http://xunitpatterns.com/Fake%20Object.html\">classic test fake</a>. It&#8217;s not the real implementation of the object; it&#8217;s just enough for me to hack out tests that need to interact with the storage layer. It doesn&#8217;t tell me whether I&#8217;m doing anything wrong like a mock or stub might. It just gives me some behavior to collaborate with.</p>\n\n<p>Switching my specs to use this fake is pretty darn easy. I just change my <code>before</code> hook to this:</p>\n\n<pre><code>  before { User::Model.init }</code></pre>\n\n<p>Life is good.</p>\n\n<h2 id=\"nowforsomeoverkill\">Now for some overkill</h2>\n\n<p>Time passes. Specs are written, code is implemented to pass them. The application grows. Life is good.</p>\n\n<p>Then one day the ops guy wakes up, finds the site going <em>crazy</em> slow and see that there are a couple hundred million user in the system. That&#8217;s a lot of rows. We&#8217;re gonna need a bigger database.</p>\n\n<p>Migrating millions of rows to a new database is a pretty big headache. Even if it&#8217;s fancy and distributed. But, it turns out changing our code doesn&#8217;t have to tax our brains so much. Say, for example, we chose Cassandra:</p>\n\n<pre><code>require 'cassandra/0.7'\nrequire 'active_support/core_ext/class'\n\nclass User::Model\n\n  cattr_accessor :connection\n  cattr_accessor :cf\n\n  def self.create(name, city, url)\n    generate_key.tap do |k|\n      cols = {\"name\" =&gt; name, \"city\" =&gt; city, \"url\" =&gt; url}\n      connection.insert(cf, k, cols)\n    end\n  end\n\n  def self.generate_key\n    SimpleUUID::UUID.new.to_guid\n  end\n\n  def self.fetch(key)\n    cols = connection.get(cf, key)\n    from_columns(cols)\n  end\n\n  def self.fetch_by_city(city)\n    expression = connection.create_index_expression(\"city\", city, \"EQ\")\n    index_clause = connection.create_index_clause([expression])\n    slices = connection.get_indexed_slices(cf, index_clause)\n    cols = hash_from_slices(slices).values.first\n    from_columns(cols)\n  end\n\n  def self.from_columns(cols)\n    User.new.tap do |u|\n      u.name = cols[\"name\"]\n      u.city = cols[\"city\"]\n      u.url = cols[\"url\"]\n    end\n  end\n\n  def self.hash_from_slices(slices)\n    slices.inject({}) do |hsh, (k, columns)|\n      column_hash = columns.inject({}) do |inner, col|\n      column = col.column\n      inner.update(column.name =&gt; column.value)\n      end\n    hsh.update(k =&gt; column_hash)\n    end\n  end\nend</code></pre>\n\n<p>Not nearly as simple as the ActiveRecord example. But sometimes it&#8217;s about making hard problems <em>possible</em> even if they&#8217;re not mindless retyping. In this case, I had to implement ID/key generation for myself (Cassandra doesn&#8217;t implement any of that). I also had to do some cleverness to generate an indexed query and then to convert the hashes that Cassandra returns into my <code>User</code> model.</p>\n\n<p>But hey, look! I changed the whole underlying database without worrying too much about mucking with my domain models. I can dig that. Further, none of my specs need to know about Cassandra. I <strong>do</strong> need to test the interaction between Cassandra and the rest of my stack in an integration test, but that&#8217;s generally true of any kind of isolated testing.</p>\n\n<h2 id=\"thishasallhappenedbeforeanditwillallhappenagain\">This has all happened before and it will all happen again</h2>\n\n<p>None of this is new. Data access layers have been a thing for a long time. Maybe institutional memory and/or scars have prevented us from bringing them over from Smalltalk, Java, or C#.</p>\n\n<p>I&#8217;m just sayin&#8217;, as you think about how to tease your system apart into decoupled, cohesive, easy-to-test units, you should pause and consider the idea that pushing all your persistence needs down into an object you later delegate to can make your future self think highly of your present self.</p>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n\n<li id=\"fn:1\"><p>This ended up being a big mistake. I could have saved myself some pain, and our ops team even more pain, if I&#8217;d done an honest back-of-the-napkin calculation and stepped back for a few minutes to figure out a better angle on storage.<a href=\"1\" title=\"return to article\" class=\"reversefootnote\">&#160;&#8617;</a></p></li>\n\n</ol>\n</div>\n",
				"date_published": "2011-10-09T09:34:03-07:00",
				"url": "https://therealadam.com/2011/10/09/your-frienemy-the.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/08/31/relentless-shipping.html",
				"title": "Relentless Shipping",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://warpspire.com/posts/relentless-quality/\">Relentless Quality</a> is a great piece. We should all strive to make really fantastic stuff. But I think there&#8217;s a nuance worth observing here:</p>\n\n<blockquote>\n  <p>Sharpen the edges, polish the surface and make it shine.</p>\n</blockquote>\n\n<p>I&#8217;m afraid that some people are going to read more than the Kneath intends here. Quality does not mean perfection. Perfection is the enemy of shipping. Quality is <em>useless</em> if it doesn&#8217;t ship. Quality is not an excuse for not shipping.</p>\n\n<p>Quality is a subjective, amorphous thing. To you, it means the fit and finish. To me, it means that all the bugs have been eliminated and possible bugs thought about and excised. Even to Christopher Alexander, quality isn&#8217;t nailed down; he refers to good buildings as possessing the &#8220;quality without a name&#8221;.</p>\n\n<p>To whit, this shortcoming is pointed out in the original essay:</p>\n\n<blockquote>\n  <p>Move fast and break things, <strong>then move fast and fix it</strong>. Ship early, ship often, <strong>sacrificing features, never quality</strong>.</p>\n</blockquote>\n\n<p>Scope and quality are sometimes at odds. Schedules and quality are sometimes at odds. There may come a time when you have to decide between shipping, maintaining quality, and including all the features. </p>\n\n<p>The great thing about shipping is that if you can do it often enough, these problems of slipping features or making sacrifices in quality can fade away. If you can ship quickly, you can build features out, test them, and put that quality on them in an iterative fashion. Shipping can&#8217;t cure all ills, but it can ease many of them.</p>\n\n<p>Kneath is urging you to maintain quality; I&#8217;m urging you to ship some acceptable value of quality and then iterate to make it amazing. Relent on quality, if you must, so you can ship relentlessly.</p>\n",
				"date_published": "2011-08-31T05:32:22-07:00",
				"url": "https://therealadam.com/2011/08/31/relentless-shipping.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/07/16/the-guy-doing.html",
				"title": "The guy doing the typing makes the call",
				"content_html": "<p>Everyone brings unique perspective to a team. Each person has learned from successes and failures. There is a spectrum of things that are highly valued and that are strongly avoided and each team member is a different point on that spectrum.</p>\n<p>It&rsquo;s easy to bikeshed decisions. Everyone should feel free to share their ideas if they have something useful and constructive to contribute. High-functioning teams share assets and liabilities, so naturally they should share and discuss ideas.</p>\n<p>That said, teams don&rsquo;t exist for rhetorical indulgence. They exist to get shit done. Teams have to get all the ideas on the floor, decide what is practical, and move on to the next thing.</p>\n<p>If there isn&rsquo;t an outstanding consensus, the tie breaker is simple: the person who ends up doing the work makes the call. That&rsquo;s not to say they should go cowboy and do whatever they want; they should use their knowledge of the &ldquo;situation on the ground&rdquo; to figure out what is most practical. With responsibility comes the right to pick a resolution.</p>\n<p>It&rsquo;s worth repeating: the guy doing the typing makes the decision.</p>\n",
				"content_text": "Everyone brings unique perspective to a team. Each person has learned from successes and failures. There is a spectrum of things that are highly valued and that are strongly avoided and each team member is a different point on that spectrum.\n\nIt's easy to bikeshed decisions. Everyone should feel free to share their ideas if they have something useful and constructive to contribute. High-functioning teams share assets and liabilities, so naturally they should share and discuss ideas.\n\nThat said, teams don't exist for rhetorical indulgence. They exist to get shit done. Teams have to get all the ideas on the floor, decide what is practical, and move on to the next thing.\n\nIf there isn't an outstanding consensus, the tie breaker is simple: the person who ends up doing the work makes the call. That's not to say they should go cowboy and do whatever they want; they should use their knowledge of the \"situation on the ground\" to figure out what is most practical. With responsibility comes the right to pick a resolution.\n\nIt's worth repeating: the guy doing the typing makes the decision.\n",
				"date_published": "2011-07-16T10:07:21-07:00",
				"url": "https://therealadam.com/2011/07/16/the-guy-doing.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/07/09/how-to-listen.html",
				"title": "How to listen to Stravinsky's Rite of Spring",
				"content_html": "<p>Igor Stravinsky&rsquo;s <!-- raw HTML omitted -->The Rite of Spring<!-- raw HTML omitted --> is an amazing piece of classical music. It&rsquo;s one of the rare pieces that was really revolutionary in its time. But in our time, almost one hundred years on, it doesn&rsquo;t sound that different.</p>\n<p>Music has moved on. We are used to the odd times of &ldquo;Take Five&rdquo; and the dissonant horns of a John Williams soundtrack. Music offending the status quo is nothing unheard of.</p>\n<p>To enjoy Rite of Spring in its proper context, you have to forget all that. Put yourself in the shoes of a Parisian in 1913, probably well off. You probably just enjoyed a Monet and a coffee. But your world is changing. Something about workers revolting. A transition from manual labor to mechanical labor.</p>\n<p>Now imagine yourself at the premier for this new ballet from Russia. You being a Parisian, you&rsquo;re probably expecting something along the lines of Debussy or perhaps Debussy or Berlioz.</p>\n<p>Instead, you get <!-- raw HTML omitted -->mild dissonance<!-- raw HTML omitted --> and then <!-- raw HTML omitted -->total chaos<!-- raw HTML omitted -->. The changing time signatures, the dissonance, the subject of virgin sacrifice. You&rsquo;d probably riot too!</p>\n",
				"content_text": "Igor Stravinsky's <em>The Rite of Spring</em> is an amazing piece of classical music. It's one of the rare pieces that was really revolutionary in its time. But in our time, almost one hundred years on, it doesn't sound that different.\n\nMusic has moved on. We are used to the odd times of \"Take Five\" and the dissonant horns of a John Williams soundtrack. Music offending the status quo is nothing unheard of.\n\nTo enjoy Rite of Spring in its proper context, you have to forget all that. Put yourself in the shoes of a Parisian in 1913, probably well off. You probably just enjoyed a Monet and a coffee. But your world is changing. Something about workers revolting. A transition from manual labor to mechanical labor.\n\nNow imagine yourself at the premier for this new ballet from Russia. You being a Parisian, you're probably expecting something along the lines of Debussy or perhaps Debussy or Berlioz.\n\nInstead, you get <a href=\"http://www.youtube.com/watch?v=qphUZIAZn1k&amp;t=1m20s\">mild dissonance</a> and then <a href=\"http://www.youtube.com/watch?v=TlpTZ5CtLBE&amp;t=7m35s\">total chaos</a>. The changing time signatures, the dissonance, the subject of virgin sacrifice. You'd probably riot too!\n",
				"date_published": "2011-07-09T12:38:21-07:00",
				"url": "https://therealadam.com/2011/07/09/how-to-listen.html",
				"tags": ["Music","Pop Culture","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/07/02/skip-the-hyperbole.html",
				"title": "Skip the hyperbole",
				"content_html": "<p>Hyperbole is a tricky thing. In a joke, it works great. Its the foundation of a tall tale (TO BRASKY!). But in a conversation of ideas, it can backfire.</p>\n<p>The trick about humans is that we rarely know exactly what the humans around us are thinking. Do they agree with what I&rsquo;m saying? Are my jokes bombing? Is this presentation interesting or is the audience playing on their phones?</p>\n<p>So the trick with hyperbole is that I might make an exagerated statement to move things along. But the other people in the conversation might think I actually mean what I said. Maybe they understand the thought behind the hyperbole, but maybe I end up unintentionally derailing the conversation. More times than I can remember, I&rsquo;ve said something bold to move things along and it totally backfired. Hyperbole backfired.</p>\n<p>Nothing beats concise language.</p>\n",
				"content_text": "Hyperbole is a tricky thing. In a joke, it works great. Its the foundation of a tall tale (TO BRASKY!). But in a conversation of ideas, it can backfire.\n\nThe trick about humans is that we rarely know exactly what the humans around us are thinking. Do they agree with what I'm saying? Are my jokes bombing? Is this presentation interesting or is the audience playing on their phones?\n\nSo the trick with hyperbole is that I might make an exagerated statement to move things along. But the other people in the conversation might think I actually mean what I said. Maybe they understand the thought behind the hyperbole, but maybe I end up unintentionally derailing the conversation. More times than I can remember, I've said something bold to move things along and it totally backfired. Hyperbole backfired.\n\nNothing beats concise language.\n",
				"date_published": "2011-07-02T11:01:27-07:00",
				"url": "https://therealadam.com/2011/07/02/skip-the-hyperbole.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/06/27/practical-words-on.html",
				"title": "Practical words on mocking",
				"content_html": "<p><!-- raw HTML omitted -->Practical Mock Advice<!-- raw HTML omitted --> is practical:</p>\n<!-- raw HTML omitted -->\n<p>A general rule of thumb is this: If there are interesting characteristics or behaviors associated with a coordinator object and it is not well covered by another test, by all means add an isolated test around it and know that mocks can be very effective.<!-- raw HTML omitted -->\nIncludes the standard description of how to use mocks with external services. But more interesting are his ideas and conclusions on when to mock, how to mock caching implementations, and how to mock controllers/presenters/coordinator objects.</p>\n",
				"content_text": "<a href=\"http://pragprog.com/magazines/2011-06/practical-mock-advice\">Practical Mock Advice</a>&nbsp;is practical:\n<blockquote>Coordinator objects like controllers are driven into existence because you need to hook two areas of your application together. In Rails applications, you usually drive the controller into existence using a Cucumber scenario or some other integration test. Most of the time controllers are straightforward and not very interesting: essentially a bunch of boilerplate code to wire your app together. In these cases the benefit of having isolated controller tests is very little, but the cost of creating and maintaining them can be high.\n\nA general rule of thumb is this: If there are interesting characteristics or behaviors associated with a coordinator object and it is not well covered by another test, by all means add an isolated test around it and know that mocks can be very effective.</blockquote>\nIncludes the standard description of how to use mocks with external services. But more interesting are his ideas and conclusions on when to mock, how to mock caching implementations, and how to mock controllers/presenters/coordinator objects.\n",
				"date_published": "2011-06-27T12:37:14-07:00",
				"url": "https://therealadam.com/2011/06/27/practical-words-on.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/06/12/locking-and-how.html",
				"title": "Locking and how did I get here?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I've got a bunch of browsers tabs open. This is unusual; I try to have zero open. Except right now. I'm digging into something. I'm spreading ephemeral papers around on my epemeral desk and trying to make a concept, not ephemeral, at least in my head.</p>\n\n<p>It all started with locking. It's a hard concept, but some programs need it. In particular, applications running across multiple machines connected by imperfect software and unreliable networks need it. And this sort of thing ends up being difficult to get right.</p>\n\n<p>I've poked around with this before. Reading the code of some libraries that are implementing locking in a way that might come in handy to me, I check out some documentation that I've seen referenced a couple times. Redis' <a href=\"http://www.redis.io/commands/setnx\"><code>setnx</code></a> command can function as a useful primitive for implementing locks. It turns out (<code>getset</code>) is pretty interesting too. <a href=\"http://ohm.keyvalue.org/\">Ohm</a>, <a href=\"https://github.com/nateware/redis-objects\">redis-objects</a> and <a href=\"https://github.com/jnunemaker/adapter-redis\">adapter-redis</a> all implement locking using a combination of those two primitives. Then I start to dig deeper into Ohm; there's some interesting stuff here. <a href=\"http://ohm.keyvalue.org/examples/activity-feed.html\">Activity feeds with Ohm</a> is relevant to my interests. I've got a thing for persistence tools that <a href=\"http://ohm.keyvalue.org/examples/philosophy.html\">enumerate their philosophy</a>. <a href=\"https://github.com/soveran/nest#readme\">Nest</a> seems like a useful set of concepts too.</p>\n\n<p>I'm mentally wandering here. Let's rewind back to what I'm really after: a way to do locking in Cassandra. There's a blog post I came across before on <a href=\"http://ria101.wordpress.com/2010/05/12/locking-and-transactions-over-cassandra-using-cages/\">doing critical sections in Cassandra</a>, but it uses ZooKeeper, so that's cheating. Then I get distraced by a thing on <a href=\"http://ria101.wordpress.com/2010/02/24/hbase-vs-cassandra-why-we-moved/\">HBase vs. Cassandra</a> and <a href=\"http://blog.mikiobraun.de/2010/08/-cassandra-tips.html\">another perspective on Cassandra</a> that mentions but does not really focus on locking.</p>\n\n<p>And then, paydirt. A <a href=\"http://wiki.apache.org/cassandra/Locking\">wiki page on locking in Cassandra</a>. It may be a little rough, and might not even work, but it's worth playing with. Turns out it's an adaptation of <a href=\"http://en.wikipedia.org/wiki/Lamport%27s_bakery_algorithm\">an algorithm devised by Leslie Lamport for implementing locking with atomic primitives</a>. It uses a bakery as an analgoy. Neat.</p>\n\n<p>Then I get really distracted again. I remember <a href=\"https://github.com/ha/doozerd\">doozer</a>, a distributed consensus gizmo developed by Blake Mizerany at Heroku. I get to reading its documentation and come across the <a href=\"https://github.com/ha/doozerd/blob/master/doc/proto.md\">protocol spec</a>, which has an intriguing link to a Plan 9 manpage on the <a href=\"http://plan9.bell-labs.com/magic/man2html/5/intro\">Plan 9 File Protocol</a>. That somehow drives me to ponder serialization and read about <a href=\"http://tnetstrings.org/\">TNetstrings</a>.</p>\n\n<p>At this point, my cup has overfloweth. I've got locking, distributed consensus, serialization, protocols, and philosophies all on my mind. Lots of fun intellectual fodder, but I'll get nowhere if I don't stick my nose into one of them exclusively and really try to figure out what it's about. So I do. <em>Fin</em>.</p>\n",
				"date_published": "2011-06-12T13:07:14-07:00",
				"url": "https://therealadam.com/2011/06/12/locking-and-how.html",
				"tags": ["Uncategorized","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/11/refactor-to-modules.html",
				"title": "Refactor to modules, for great good",
				"content_html": "<p>Got a class or model that&rsquo;s getting a little too fat? <!-- raw HTML omitted -->Refactor to Modules<!-- raw HTML omitted -->. I&rsquo;ve done this a few times lately, and I&rsquo;ve always liked the results. Easier to test, easier to understand, smaller files. As long as you&rsquo;ve got a tool like <!-- raw HTML omitted -->ctags<!-- raw HTML omitted --> to help you navigate between methods, there&rsquo;s no indirection penalty either.</p>\n<p>That said, I&rsquo;ve seen code that is overmodule&rsquo;d. But, that almost always goes along with odd callback structures that obscure the flow-of-control. As long as you stick to Ruby&rsquo;s method lookup semantics, it&rsquo;s smooth sailing.</p>\n",
				"content_text": "Got a class or model that's getting a little too fat? <a href=\"http://www.anthonyeden.com/2011/05/refactoring-to-modules/\">Refactor to Modules</a>. I've done this a few times lately, and I've always liked the results. Easier to test, easier to understand, smaller files. As long as you've got a tool like <code>ctags</code> to help you navigate between methods, there's no indirection penalty either.\n\nThat said, I've seen code that is overmodule'd. But, that almost always goes along with odd callback structures that obscure the flow-of-control. As long as you stick to Ruby's method lookup semantics, it's smooth sailing.\n",
				"date_published": "2011-05-11T14:25:42-07:00",
				"url": "https://therealadam.com/2011/05/11/refactor-to-modules.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/10/zeromq-inproc-implies.html",
				"title": "ZeroMQ inproc implies one context",
				"content_html": "<p>I&rsquo;ve been tinkering with <!-- raw HTML omitted -->ZeroMQ<!-- raw HTML omitted --> a bit lately. Abstracting sockets like this is a great idea. However, <!-- raw HTML omitted -->the Ruby library<!-- raw HTML omitted -->, like sockets in general, is a bit light on guidance and the error messages aren&rsquo;t of the form &ldquo;Hey dumbie, you do it in <!-- raw HTML omitted -->this<!-- raw HTML omitted --> order!&rdquo;</p>\n<p>Here&rsquo;s something that tripped me up today. ZeroMQ puts everything into a context. If you&rsquo;re doing in-process communication (e.g. between two threads in Ruby 1.9), you need to <!-- raw HTML omitted -->share<!-- raw HTML omitted --> that context.</p>\n<p>Doing it right:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Doing it wrong:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I believe what is happening here is that each <!-- raw HTML omitted -->ZMQ::Context<!-- raw HTML omitted --> gets a thread pool to manage message traffic. In the case of in-process messages, the threads only know about each other within the confines of a context.</p>\n<p>And now you know, roughly speaking.</p>\n",
				"content_text": "I've been tinkering with <a href=\"http://www.zeromq.org/\">ZeroMQ</a> a bit lately. Abstracting sockets like this is a great idea. However, <a href=\"https://github.com/zeromq/rbzmq\">the Ruby library</a>, like sockets in general, is a bit light on guidance and the error messages aren't of the form \"Hey dumbie, you do it in <em>this</em> order!\"\n\nHere's something that tripped me up today. ZeroMQ puts everything into a context. If you're doing in-process communication (e.g. between two threads in Ruby 1.9), you need to <em>share</em> that context.\n\nDoing it right:\n\n<pre><code>\n# Create a context for all in-process communication\n&gt;&gt; ctx = ZMQ::Context.new\n# Set up a request socket (think of this as the client)\n&gt;&gt; req = ctx.socket(ZMQ::REQ)\n# Set up a reply socket (think of this as the server)\n&gt;&gt; rep = ctx.socket(ZMQ::REP)\n# Like a server, the reply socket binds\n&gt;&gt; rep.bind('inproc://127.0.0.1')\n# Like a client, the request socket connects\n&gt;&gt; req.connect('inproc://127.0.0.1')\n# ZeroMQ only knows about strings\n&gt;&gt; req.send('1')\n=&gt; true\n# Reply/server side got the message\n&gt;&gt; p rep.recv\n\"1\"\n=&gt; \"1\"\n# Reply/server side sends response\n&gt;&gt; rep.send(\"urf!\")\n=&gt; true\n# Request/client side got the response\n&gt;&gt; req.recv\n=&gt; \"urf!\"\n</pre></code>\n\nDoing it wrong:\n\n<pre><code>\n# Create a second context\n&gt;&gt; ctx2 = ZMQ::Context.new(2)\n# Create another client\n&gt;&gt; req2 = ctx2.socket(ZMQ::REQ)\n# Attempt to connect to a reply socket, but it doesn't\n# exist in this context\n&gt;&gt; req2.connect('inproc://127.0.0.1')\nRuntimeError: Connection refused\n\tfrom (irb):16:in `connect'\n\tfrom (irb):16\n\tfrom /Users/adam/.rvm/rubies/ruby-1.9.2-p180/bin/irb:16:in `'\n</pre></code>\n\nI believe what is happening here is that each <code>ZMQ::Context</code> gets a thread pool to manage message traffic. In the case of in-process messages, the threads only know about each other within the confines of a context.\n\nAnd now you know, roughly speaking.\n",
				"date_published": "2011-05-10T16:38:51-07:00",
				"url": "https://therealadam.com/2011/05/10/zeromq-inproc-implies.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/09/booting-your-project.html",
				"title": "Booting your project, no longer a giant pain",
				"content_html": "<p>So your app has a few dependencies. A database here, a queue there, maybe a cache. Running all that stuff before you start coding is a pain. Shutting it all down can prove even more tedious.</p>\n<p>Out of nowhere, I find two solutions to this problem. <!-- raw HTML omitted -->takeup<!-- raw HTML omitted --> seems more streamlined; clone a script, write a YAML config. <!-- raw HTML omitted -->foreman<!-- raw HTML omitted --> is a gem that defines a <!-- raw HTML omitted --><!-- raw HTML omitted -->Procfile<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --> format<!-- raw HTML omitted --> for defining your project&rsquo;s dependencies. Both handle all the particulars of starting your app up, shutting it down, etc.</p>\n<p>I haven&rsquo;t tried either of these because, of course, they came out the same week I bite the bullet and write a shell script to automate it on my projects. But I&rsquo;m very pleased that folks are scratching this itch and hope I&rsquo;ll have no choice but to start using one when it reaches critical goodness.</p>\n",
				"content_text": "So your app has a few dependencies. A database here, a queue there, maybe a cache. Running all that stuff before you start coding is a pain. Shutting it all down can prove even more tedious.\n\nOut of nowhere, I find two solutions to this problem. <a href=\"https://github.com/maxim/takeup\">takeup</a> seems more streamlined; clone a script, write a YAML config. <a href=\"https://github.com/ddollar/foreman\">foreman</a> is a gem that defines a <code><a href=\"http://ddollar.github.com/foreman/\">Procfile</a></code><a href=\"http://ddollar.github.com/foreman/\"> format</a> for defining your project's dependencies. Both handle all the particulars of starting your app up, shutting it down, etc.\n\nI haven't tried either of these because, of course, they came out the same week I bite the bullet and write a shell script to automate it on my projects. But I'm very pleased that folks are scratching this itch and hope I'll have no choice but to start using one when it reaches critical goodness.\n",
				"date_published": "2011-05-09T10:29:48-07:00",
				"url": "https://therealadam.com/2011/05/09/booting-your-project.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/08/rubys-roots-in.html",
				"title": "Ruby's roots in AWK",
				"content_html": "<p><!-- raw HTML omitted -->AWK-ward Ruby<!-- raw HTML omitted -->. One man Unix wrecking squad Ryan Tomayko reflects on aspects of Ruby that arguably grew from AWK more than Perl. Great archaeology, but also a good gateway drug to understanding how awk is a useful tool. Only recently have I started to really grok awk, but it&rsquo;s super handy for ad-hoc data munging in the shell.</p>\n",
				"content_text": "<a href=\"http://tomayko.com/writings/awkward-ruby\">AWK-ward Ruby</a>. One man Unix wrecking squad Ryan Tomayko reflects on aspects of Ruby that arguably grew from AWK more than Perl. Great archaeology, but also a good gateway drug to understanding how awk is a useful tool. Only recently have I started to really grok awk, but it's super handy for ad-hoc data munging in the shell.\n",
				"date_published": "2011-05-08T16:06:02-07:00",
				"url": "https://therealadam.com/2011/05/08/rubys-roots-in.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/07/humankinds-genius-turned.html",
				"title": "Humankind's genius turned upon itself",
				"content_html": "<p><!-- raw HTML omitted -->When We Tested Nuclear Bombs<!-- raw HTML omitted -->. An absolutely fantastic collection of photos from the nuclear test program. Beautiful to look at, terrifying to contemplate the ramifications in context. It&rsquo;s harrowing to think that one of science&rsquo;s greatest achievements could undo so much of science&rsquo;s achievement.</p>\n",
				"content_text": "<a href=\"http://www.theatlantic.com/infocus/2011/05/when-we-tested-nuclear-bombs/100061/\">When We Tested Nuclear Bombs</a>. An absolutely fantastic collection of photos from the nuclear test program. Beautiful to look at, terrifying to contemplate the ramifications in context. It's harrowing to think that one of science's greatest achievements could undo so much of science's achievement.\n",
				"date_published": "2011-05-07T16:02:41-07:00",
				"url": "https://therealadam.com/2011/05/07/humankinds-genius-turned.html",
				"tags": ["Curated","Eye Candy","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/06/burpess-and-other.html",
				"title": "Burpess and other intense workouts",
				"content_html": "<p><!-- raw HTML omitted -->What’s the Best Exercise?<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Burpees aside, it&rsquo;s interesting to see opinions on what the most useful exercise movements are. I&rsquo;m really glad I don&rsquo;t need to start doing butterflies though.</p>\n",
				"content_text": "<a style=\"color:#0066cc;font-family:Georgia, 'Bitstream Charter', serif;line-height:1.5;\" href=\"http://www.nytimes.com/2011/04/17/magazine/mag-17exercise-t.html?_r=2\">What’s the Best Exercise?</a>\n<blockquote>But when pressed, he suggested one of the foundations of old-fashioned calisthenics: the burpee, in which you drop to the ground, kick your feet out behind you, pull your feet back in and leap up as high as you can. “It builds muscles. It builds endurance.” He paused. “But it’s hard to imagine most people enjoying” an all-burpees program, “or sticking with it for long.”</blockquote>\nI'm having trouble deciding whether I should say good things about burpees. I only do a handful at a time, usually as part of a series of movements. They're not so bad if you start with just a few and work up from there.\n\nBurpees aside, it's interesting to see opinions on what the most useful exercise movements are. I'm really glad I don't need to start doing butterflies though.\n",
				"date_published": "2011-05-06T08:04:30-07:00",
				"url": "https://therealadam.com/2011/05/06/burpess-and-other.html",
				"tags": ["Sportsball!","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/05/04/posthoc-career-advice.html",
				"title": "Post-hoc career advice for twenty-something Adam",
				"content_html": "<p>No program was ever made better by one developer scoffing at another. Computer science does not move forward with condescending attitudes. Success in software isn&rsquo;t the result of looking down your nose or wagging your finger at others.</p>\n<p>And yet, if you observe from the outside, you&rsquo;d think that we all live in a wacky world of wonks, one where it&rsquo;s not the facts, but how violently you repeat your talking points that matters the most. The Javascript guys do this in 2011, the Ruby guys did it in 2005, the .NET people before that in 2002, and on down the line.</p>\n<p>Civility isn&rsquo;t always what gets you noticed, but if you don&rsquo;t have an outsized ability to focus on technical problems for tens of hours, it sure helps. You&rsquo;re not the most brilliant developer on the planet, but you like to make people laugh, and you like to hang around those who are smarter than me. That&rsquo;s not the recipe for a solid career in programming, but it&rsquo;s a good bridge to get you from the journeyman side of the river over to the side where people think you might know what you&rsquo;re doing.</p>\n<p>Once you reach the other side, its a matter of putting in the hours, doing the practice, learning things, and always challenging yourself. Work with the smartest people you can, push yourself to make something better every day. Grind on that enough and you&rsquo;ll get to the point where you really know what you&rsquo;re doing.</p>\n<p>Then, you close the loop. You were civil, you didn&rsquo;t piss too many people off. They are eager to hear about the awesome and exciting things you did. So tell them. Even if you don&rsquo;t think it&rsquo;s all that awesome, some will know that you&rsquo;ve got the awesome in you and that it will come out eventually. Some of them aren&rsquo;t your mom!</p>\n<p>This is what some call a successful career. It&rsquo;s not so bad, but it&rsquo;s not exactly the extravagant lifestyle you imagined when you were twenty. On the plus side, you do roughly the same things on a daily basis as you did back then, which isn&rsquo;t so bad. Being an adult turns out to be pretty alright.</p>\n<p>At some point, you write this advice to yourself on your weblog, except in the second person. Hopefully someone younger, perhaps on the precipice of idolizing a brilliant asshole, will read it and take a more civil path. Maybe you&rsquo;ll get to work with them someday. Let&rsquo;s hope it&rsquo;s not too awkward.</p>\n",
				"content_text": "No program was ever made better by one developer scoffing at another. Computer science does not move forward with condescending attitudes. Success in software isn't the result of looking down your nose or wagging your finger at others.\n\nAnd yet, if you observe from the outside, you'd think that we all live in a wacky world of wonks, one where it's not the facts, but how violently you repeat your talking points that matters the most. The Javascript guys do this in 2011, the Ruby guys did it in 2005, the .NET people before that in 2002, and on down the line.\n\nCivility isn't always what gets you noticed, but if you don't have an outsized ability to focus on technical problems for tens of hours, it sure helps. You're not the most brilliant developer on the planet, but you like to make people laugh, and you like to hang around those who are smarter than me. That's not the recipe for a solid career in programming, but it's a good bridge to get you from the journeyman side of the river over to the side where people think you might know what you're doing.\n\nOnce you reach the other side, its a matter of putting in the hours, doing the practice, learning things, and always challenging yourself. Work with the smartest people you can, push yourself to make something better every day. Grind on that enough and you'll get to the point where you really know what you're doing.\n\nThen, you close the loop. You were civil, you didn't piss too many people off. They are eager to hear about the awesome and exciting things you did. So tell them. Even if you don't think it's all that awesome, some will know that you've got the awesome in you and that it will come out eventually. Some of them aren't your mom!\n\nThis is what some call a successful career. It's not so bad, but it's not exactly the extravagant lifestyle you imagined when you were twenty. On the plus side, you do roughly the same things on a daily basis as you did back then, which isn't so bad. Being an adult turns out to be pretty alright.\n\nAt some point, you write this advice to yourself on your weblog, except in the second person. Hopefully someone younger, perhaps on the precipice of idolizing a brilliant asshole, will read it and take a more civil path. Maybe you'll get to work with them someday. Let's hope it's not too awkward.\n",
				"date_published": "2011-05-04T17:50:09-07:00",
				"url": "https://therealadam.com/2011/05/04/posthoc-career-advice.html",
				"tags": ["Expanded ideas","writings"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/13/dont-complain-make.html",
				"title": "Don't complain, make things better",
				"content_html": "<p><!-- raw HTML omitted -->notes on &ldquo;an empathetic plan&rdquo;<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>If you&rsquo;re a well known web or app developer who complains a lot on Twitter about other people&rsquo;s projects, I am very likely talking about you. You and I both know that there are many reasons why something works a certain way or why something in the backend would affect the way something works on the front-end.<!-- raw HTML omitted -->\nSet agreement to maximum. If you&rsquo;re complaining on Twitter just to make yourself feel better, keep in mind that some of us are keeping score.</p>\n<p>Don&rsquo;t waste your time griping and bringing other people down. Spend your time making better things.</p>\n",
				"content_text": "<a href=\"http://notes.torrez.org/2011/04/an-empathetic-plan.html\">notes on \"an empathetic plan\"</a>:\n<blockquote>Worse is when the the people doing the complaining also make software or web sites or iPhone applications themselves. As visible leaders of the web, I think there are a lot of folks who could do a favor to younger, less experienced people by setting an example of critiquing to raise up rather than critiquing to tear down.\n\nIf you're a well known web or app developer who complains a lot on Twitter about other people's projects, I am very likely talking about you. You and I both know that there are many reasons why something works a certain way or why something in the backend would affect the way something works on the front-end.</blockquote>\nSet agreement to maximum. If you're complaining on Twitter just to make yourself feel better, keep in mind that some of us are keeping score.\n\nDon't waste your time griping and bringing other people down. Spend your time making better things.\n",
				"date_published": "2011-04-13T14:54:36-07:00",
				"url": "https://therealadam.com/2011/04/13/dont-complain-make.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/10/perfection-isnt-sustainable.html",
				"title": "Perfection isn't sustainable",
				"content_html": "<p><!-- raw HTML omitted -->Perfect vs. interesting<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://sethgodin.typepad.com/seths_blog/2011/04/perfect-vs-interesting.html\">Perfect vs. interesting</a>:\n<blockquote>When an interesting person is momentarily not-interesting, I wait patiently. When a perfect organization, the boring one that's constantly using its policies to dumb things down, is imperfect, I get annoyed. Because perfect has to be perfect all the time.</blockquote>\nMore and more, I think perfection is the biggest enemy of those who want to ship awesome things. Iteration can lead to moments of perfection, but perfection is not sustainable over time.\n",
				"date_published": "2011-04-10T20:33:47-07:00",
				"url": "https://therealadam.com/2011/04/10/perfection-isnt-sustainable.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/09/using-conways-law.html",
				"title": "Using Conway's Law for the power of good",
				"content_html": "<p>Michael Feathers isn&rsquo;t so quick to place negative connotations on <!-- raw HTML omitted -->Conway&rsquo;s Law.<!-- raw HTML omitted --> Perhaps it&rsquo;s not so much that organizations don&rsquo;t communicate well, the traditional reading of Conway&rsquo;s Law. Maybe as organizations grow, people tend to only communicate frequently with a few people and <!-- raw HTML omitted -->those<!-- raw HTML omitted --> interactions end up defining the API layers.</p>\n<p>I&rsquo;ve been thinking about this a bit lately. It&rsquo;s possible there&rsquo;s something to be said about using Conway&rsquo;s Law to your advantage when building service-based <!-- raw HTML omitted -->shearing layers<!-- raw HTML omitted -->. Some parts of your application should evolve quickly, others require more stability. Some iterate based on user and conversion testing, others iterate as TDD or BDD projects. You can discover these layers by observing team interactions and using Conway&rsquo;s Law to define where the APIs belong.</p>\n",
				"content_text": "Michael Feathers isn't so quick to place negative connotations on <a href=\"http://michaelfeathers.typepad.com/michael_feathers_blog/2011/04/beyond-conways-law.html\">Conway's Law.</a> Perhaps it's not so much that organizations don't communicate well, the traditional reading of Conway's Law. Maybe as organizations grow, people tend to only communicate frequently with a few people and <em>those</em> interactions end up defining the API layers.\n\nI've been thinking about this a bit lately. It's possible there's something to be said about using Conway's Law to your advantage when building service-based <a href=\"http://en.wikipedia.org/wiki/Shearing_layers\">shearing layers</a>. Some parts of your application should evolve quickly, others require more stability. Some iterate based on user and conversion testing, others iterate as TDD or BDD projects. You can discover these layers by observing team interactions and using Conway's Law to define where the APIs belong.\n",
				"date_published": "2011-04-09T10:26:29-07:00",
				"url": "https://therealadam.com/2011/04/09/using-conways-law.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/08/hell-is-other.html",
				"title": "Hell is other people's concurrency",
				"content_html": "<p>The first rule of evented programming is, don&rsquo;t block the event loop! <!-- raw HTML omitted -->Mathias Meyer&rsquo;s great intro to Ruby&rsquo;s EventMachine library<!-- raw HTML omitted -->. Non-blocking IO is so hot right now. But remember, it&rsquo;s just a tool on your concurrency utili-belt. Remember to reach for coroutines, threads, actors, and STMs too.</p>\n",
				"content_text": "The first rule of evented programming is, don't block the event loop! <a href=\"http://eventmachine-scotrubyconf.heroku.com/\">Mathias Meyer's great intro to Ruby's EventMachine library</a>. Non-blocking IO is so hot right now. But remember, it's just a tool on your concurrency utili-belt. Remember to reach for coroutines, threads, actors, and STMs too.\n",
				"date_published": "2011-04-08T15:26:18-07:00",
				"url": "https://therealadam.com/2011/04/08/hell-is-other.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/07/bloom-a-language.html",
				"title": "Bloom, a language with time travel",
				"content_html": "<p><!-- raw HTML omitted -->Bloom<!-- raw HTML omitted -->, a language for disordered (whut!) distributed programming with powerful consistency analysis and concise, familiar syntax (the prototype is built on Ruby):</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a title=\"Bloom Programming Language\" href=\"http://www.bloom-lang.net/\">Bloom</a>, a language for disordered (whut!) distributed programming with powerful consistency analysis and concise, familiar syntax (the prototype is built on Ruby):\n<blockquote>Traditional languages like Java and C are based on the von Neumann model, where a program counter steps through individual instructions in order. Distributed systems don’t work like that. Much of the pain in traditional distributed programming comes from this mismatch:  programmers are expected to bridge from an ordered programming model into a disordered reality that executes their code.  Bloom was designed to match–and exploit–the disorderly reality of distributed systems.  Bloom programmers write programs made up of unordered collections of statements, and are given constructs to impose order when needed.</blockquote>\nInterested to see how languages will push the assumption that time proceeds from earlier to later as one reads down a source file.\n",
				"date_published": "2011-04-07T19:00:01-07:00",
				"url": "https://therealadam.com/2011/04/07/bloom-a-language.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/07/the-rules-of.html",
				"title": "The rules of the yak shave",
				"content_html": "<p>Yak shaves. They’re great fun. Like most things, yak shaving is more fun when you have some rules to guide you away from the un-fun parts:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Yak shaves. They’re great fun. Like most things, yak shaving is more fun when you have some rules to guide you away from the un-fun parts:\n<ul>\n\t<li>always have a goal, know when you’re done</li>\n\t<li>timebox it</li>\n\t<li>work on a branch so you can switch to real work if you need to</li>\n\t<li>make smaller commits than usual so you can unwind if you should go awry</li>\n\t<li>don’t worry about writing tests if you don’t know what you’re doing</li>\n\t<li>if you aren’t sure where you are going, write a test harness and iterate on that</li>\n\t<li>have a pair or buddy to talk through what you’re trying to do and how to get there</li>\n\t<li>bail out if you are starting to burn out, face diminishing returns, or think of a better way to shave they yak</li>\n</ul>\nFun fact: this post is in fact a yak shave extracted from a post on yak shaving.\n",
				"date_published": "2011-04-07T16:49:58-07:00",
				"url": "https://therealadam.com/2011/04/07/the-rules-of.html",
				"tags": ["Uncategorized","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/05/linux-screenshot-nostalgia.html",
				"title": "Linux screenshot nostalgia",
				"content_html": "<p>Anyone else remember uploading screenshots of their super awesome, tweaked out Linux hacker desktops?</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Anyone else remember uploading screenshots of their super awesome, tweaked out Linux hacker desktops?\n<div class=\"center\"><a href=\"http://therealadam.com/wp-content/uploads/2011/04/screenshothacking.png\"><img style=\"border:0 initial initial;\" src=\"http://therealadam.com/wp-content/uploads/2011/04/screenshothacking.png\" border=\"0\" alt=\"Screenshot whilst hacking\" width=\"600\" height=\"375\" /></a></div>\nSorry, I'm not running WindowMaker, Enlightenment, or Sawmill anymore. Besides that, I think I have all the cliches: terminal, editor, MP3 player, system monitors, blinkenlights, etc. I am missing an IRC session, though.\n",
				"date_published": "2011-04-05T10:20:41-07:00",
				"url": "https://therealadam.com/2011/04/05/linux-screenshot-nostalgia.html",
				"tags": ["Nerdery","Aside","linux"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/04/the-next-step.html",
				"title": "The next step and the cleared canvas",
				"content_html": "<p>Knowing the next step is a pretty good feeling. The uncertainty of where you should next place your foot is somewhere between unnerving and terrifying. But if you&rsquo;ve got an idea of how to proceed, you can learn something. Maybe you&rsquo;re right, maybe you&rsquo;re wrong. It&rsquo;s the step that counts, not so much where you end up.</p>\n<!-- raw HTML omitted -->\n<p>I just finished reading the <!-- raw HTML omitted -->RSpec book<!-- raw HTML omitted -->. It&rsquo;s a really nicely done book. It does a great job striking a balance between conveying the philosophy of BDD and outside-in development with teaching the tools that Cucumber, RSpec, and Webrat give you when applying that approach to building, delivering, and iterating on software.</p>\n<p>What I&rsquo;m finding most useful about applying those approaches is that I know what the next step is. There&rsquo;s always a missing piece right in front of me. Sometimes its a big thing, a feature-sized piece. Other times it&rsquo;s smaller, a pending spec or a refactoring calling out to me. I&rsquo;m never in the dark, which is important and useful to me.</p>\n<!-- raw HTML omitted -->\n<p>On a whim, I decided to start doing the &ldquo;always keep your email inbox empty&rdquo; thing. I have always been aggressive about making sure everything is read, and I got pretty strict about deleting stuff I&rsquo;ll never need to look at ever again. But now, I file things away (mostly into a shovebox) once I&rsquo;m done with some email.</p>\n<p>This is a big deal. It&rsquo;s easy for me to look at my emails and figure out if there is something I&rsquo;ve let slide. If there isn&rsquo;t, I can proceed to doing more interesting things. It&rsquo;s pretty great.</p>\n<p>This week, I made a point to &ldquo;clear the decks&rdquo; regularly. If I haven&rsquo;t listened to a podcast, read something in Instapaper, or scanned feeds after a few days, I shove it away. So I can my check email and OmniFocus lists to make sure I didn&rsquo;t miss anything I wanted or need to do. Then I make awesome things. In the evening, I clear out my reading lists in Instapaper and Reeder. I don&rsquo;t feel like I&rsquo;m always behind. This, too, is pretty great.</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s really easy to let all the reverse chronologically sorted lists we allow into our lives dominate our routines. Clearing those lists makes it easy to see what the next step is and get on with learning interesting things and making awesome stuff.</p>\n",
				"content_text": "Knowing the next step is a pretty good feeling. The uncertainty of where you should next place your foot is somewhere between unnerving and terrifying. But if you've got an idea of how to proceed, you can learn something. Maybe you're right, maybe you're wrong. It's the step that counts, not so much where you end up.\n\n<hr />\n\nI just finished reading the <a title=\"The RSpec Book: Behaviour-Driven Development with RSpec, Cucumber, and Friends\" href=\"http://pragprog.com/titles/achbd/the-rspec-book\">RSpec book</a>. It's a really nicely done book. It does a great job striking a balance between conveying the philosophy of BDD and outside-in development with teaching the tools that Cucumber, RSpec, and Webrat give you when applying that approach to building, delivering, and iterating on software.\n\nWhat I'm finding most useful about applying those approaches is that I know what the next step is. There's always a missing piece right in front of me. Sometimes its a big thing, a feature-sized piece. Other times it's smaller, a pending spec or a refactoring calling out to me. I'm never in the dark, which is important and useful to me.\n\n<hr />\n\nOn a whim, I decided to start doing the \"always keep your email inbox empty\" thing. I have always been aggressive about making sure everything is read, and I got pretty strict about deleting stuff I'll never need to look at ever again. But now, I file things away (mostly into a shovebox) once I'm done with some email.\n\nThis is a big deal. It's easy for me to look at my emails and figure out if there is something I've let slide. If there isn't, I can proceed to doing more interesting things. It's pretty great.\n\nThis week, I made a point to \"clear the decks\" regularly. If I haven't listened to a podcast, read something in Instapaper, or scanned feeds after a few days, I shove it away. So I can my check email and OmniFocus lists to make sure I didn't miss anything I wanted or need to do. Then I make awesome things. In the evening, I clear out my reading lists in Instapaper and Reeder. I don't feel like I'm always behind. This, too, is pretty great.\n\n<hr />\n\nIt's really easy to let all the reverse chronologically sorted lists we allow into our lives dominate our routines. Clearing those lists makes it easy to see what the next step is and get on with learning interesting things and making awesome stuff.\n",
				"date_published": "2011-04-04T09:16:24-07:00",
				"url": "https://therealadam.com/2011/04/04/the-next-step.html",
				"tags": ["Expanded ideas","inbox_zero"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/03/the-joy-of.html",
				"title": "The joy of logs",
				"content_html": "<p><!-- raw HTML omitted -->Logs Are Streams, Not Files<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve tinkered with building deeper APIs for logging within applications and services, but I think Adam Wiggins is on the right path here (<!-- raw HTML omitted -->not the first time either<!-- raw HTML omitted -->). Logging should be as simple as possible in applications. All the smarts for aggregating, searching, and extracting interesting information should happen <!-- raw HTML omitted -->after<!-- raw HTML omitted --> the data is collected. Using standard out instead of files is a fantastic idea too.</p>\n",
				"content_text": "<a style=\"color:#0066cc;font-family:Georgia, 'Bitstream Charter', serif;line-height:1.5;\" href=\"http://adam.heroku.com/past/2011/4/1/logs_are_streams_not_files/\">Logs Are Streams, Not Files</a>:\n<blockquote>But a better conceptual model is to treat logs as time-ordered streams: there is no beginning or end, but rather an ongoing, collated collection of events which we may wish to view in realtime as they happen (e.g. via tail -f or heroku logs --tail) or which we may wish to search in some time window (e.g. via grep or Splunk).</blockquote>\nWork on an app with a couple dozen servers, a handful of databases, and several moving parts and you start to realize that logs are one of your best friends. They're useful for troubleshooting, performance monitoring, and just knowing how your application works in reality, under real traffic.\n\nI've tinkered with building deeper APIs for logging within applications and services, but I think Adam Wiggins is on the right path here (<a title=\"Interviewing to seek values\" href=\"http://weblog.therealadam.com/2009/07/07/interviewing-to-seek-values/\">not the first time either</a>). Logging should be as simple as possible in applications. All the smarts for aggregating, searching, and extracting interesting information should happen <em>after</em> the data is collected. Using standard out instead of files is a fantastic idea too.\n",
				"date_published": "2011-04-03T19:15:35-07:00",
				"url": "https://therealadam.com/2011/04/03/the-joy-of.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/04/01/im-corgiinternet-famous.html",
				"title": "I'm Corgi-internet famous",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->OCD: Obsessive Corgi Disorder, Kitty putting the moves on my man<!-- raw HTML omitted -->. Also on <!-- raw HTML omitted -->Men and their dogs<!-- raw HTML omitted -->. I&rsquo;m corgi-internet famous! Photo by <!-- raw HTML omitted -->Courtney<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://corgiaddict.com/post/4243283130/kitty-putting-the-moves-on-my-man-submitted\"><img src=\"http://therealadam.com/wp-content/uploads/2011/04/tumblr_lixys6tj3d1qbwakso1_500.jpg\" alt=\"Me + Kitty\" /></a>\n\n<a href=\"http://corgiaddict.com/post/4243283130/kitty-putting-the-moves-on-my-man-submitted\">OCD: Obsessive Corgi Disorder, Kitty putting the moves on my man</a>. Also on <a href=\"http://menandtheirdogs.tumblr.com/#4243965959\">Men and their dogs</a>. I'm corgi-internet famous! Photo by <a href=\"http://courtneypo.com\">Courtney</a>.\n",
				"date_published": "2011-04-01T07:10:27-07:00",
				"url": "https://therealadam.com/2011/04/01/im-corgiinternet-famous.html",
				"tags": ["Curated","Dogs, cats, et cetera","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/03/31/noel-rappins-advice.html",
				"title": "Noel Rappin's Advice on TDD",
				"content_html": "<p><!-- raw HTML omitted -->Testing Advice in Eleven Steps<!-- raw HTML omitted -->. My favorite:</p>\n<!-- raw HTML omitted -->\n<p>All eleven are pretty handy for those like myself who still feel like they have a lot to learn about TDD, BDD, et. al.</p>\n",
				"content_text": "<a href=\"http://railsrx.com/2011/03/31/testing-advice-in-eleven-steps/\">Testing Advice in Eleven Steps</a>. My favorite:\n\n<blockquote>At any given moment, the next test has some chance of costing you time in the short term. The problem is it’s nearly impossible to tell which tests will cost the time. Play the odds, write the test. Over the long haul, the chance that the tests are really the bottleneck are, in my experience, quite small.</blockquote>\n\nAll eleven are pretty handy for those like myself who still feel like they have a lot to learn about TDD, BDD, et. al.\n",
				"date_published": "2011-03-31T20:42:46-07:00",
				"url": "https://therealadam.com/2011/03/31/noel-rappins-advice.html",
				"tags": ["Curated","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/03/30/organizing-and-decoding.html",
				"title": "Organizing and decoding problems",
				"content_html": "<p>My favorite sort of problem involves the interactions between individuals, groups of people, and mechanical rules generated by individuals and groups. Speculating on how the rules were shaped by the experiences of the individuals and groups is a fun game to play when presented with a curious set of circumstances. Conversely, my least favorite problems are those generated by the institutional brain damage of certain kinds of groups. Software and systems shaped by regulations and the particulars of monetary exchange are tedious at best.</p>\n<p>I find it quite amusing when answers aren&rsquo;t &ldquo;clean&rdquo; and technological systems aren&rsquo;t the best solution. Often, no amount of analysis and brilliant coding can make an improvement. What is needed is to understand what people do, why they do it, and persuade them to do otherwise.</p>\n<p>This brings me to economics, specifically behavioral economics. If you take away all the math, economics is largely about how people behave in aggregate. It&rsquo;s a useful tool in understanding how to work with systems that involve people. But there&rsquo;s more to economics than explaining how people interact in markets.</p>\n<!-- raw HTML omitted -->\n<p>Russ Roberts, in the process of explaining how economics is not useful as a mechanism for answering questions like &ldquo;did the stimulus work?&rdquo; or &ldquo;when will the housing market recover?&rdquo;, gets to <!-- raw HTML omitted -->what really interests me about economics and finance<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The crux of the biscuit, for me, is right in the middle. Economics is a useful way to organize an intricate and interconnected problem and figure out how to reason about it. In casually studying economics and finance over the couple years, I&rsquo;ve come to form a better mental model about how the world works.</p>\n<!-- raw HTML omitted -->\n<p>Its possible that this mental modeling is what I do when I&rsquo;m coding. I&rsquo;m poking how some code works, looking at its inner workings, trying to understand how it interacts with the code around it. I sift through revision logs to see how it got to where it is today, talk to others on the team about the code and why it ended up one way and not another. I&rsquo;m organizing and modeling the code in my head, building up a model that describes .</p>\n<p>Lately, I&rsquo;ve been describing my work as tinkering with lines of code until numbers appear on the screen in the right order. This is invariably greeted with a comforting-to-me response like &ldquo;I could never do that&rdquo;. But I really enjoy this. I&rsquo;m not just debugging my code; I&rsquo;m sharpening the way the program is organized in my head. Once I&rsquo;ve got my head around it, I decode that organization into words, code, drawings, etc.</p>\n<p>With programs, there is some system of rules, forces, and interactions which describe how the code works or doesn&rsquo;t. Economics, too, describes a system of rules, forces, and interactions that predicts how a puzzle of human beings operate. Organizing and decoding these technical and social puzzles is great fun.</p>\n",
				"content_text": "My favorite sort of problem involves the interactions between individuals, groups of people, and mechanical rules generated by individuals and groups. Speculating on how the rules were shaped by the experiences of the individuals and groups is a fun game to play when presented with a curious set of circumstances. Conversely, my least favorite problems are those generated by the institutional brain damage of certain kinds of groups. Software and systems shaped by regulations and the particulars of monetary exchange are tedious at best.\n\nI find it quite amusing when answers aren't \"clean\" and technological systems aren't the best solution. Often, no amount of analysis and brilliant coding can make an improvement. What is needed is to understand what people do, why they do it, and persuade them to do otherwise.\n\nThis brings me to economics, specifically behavioral economics. If you take away all the math, economics is largely about how people behave in aggregate. It's a useful tool in understanding how to work with systems that involve people. But there's more to economics than explaining how people interact in markets.\n\n<hr />\n\nRuss Roberts, in the process of explaining how economics is not useful as a mechanism for answering questions like \"did the stimulus work?\" or \"when will the housing market recover?\", gets to <a href=\"http://cafehayek.com/2011/01/what-is-economics-good-for.html\">what really interests me about economics and finance</a>:\n\n<blockquote>\"Is economics a science because it is like Darwinian biology? Darwinian biology is very different from the physical sciences. Like economics it is a very useful way to organize your thinking about complex phenomena. But it is not a predictive or very precise science or whatever you want to call it.\"</blockquote>\n\nThe crux of the biscuit, for me, is right in the middle. Economics is a useful way to organize an intricate and interconnected problem and figure out how to reason about it. In casually studying economics and finance over the couple years, I've come to form a better mental model about how the world works.\n\n<hr />\n\nIts possible that this mental modeling is what I do when I'm coding. I'm poking how some code works, looking at its inner workings, trying to understand how it interacts with the code around it. I sift through revision logs to see how it got to where it is today, talk to others on the team about the code and why it ended up one way and not another. I'm organizing and modeling the code in my head, building up a model that describes .\n\nLately, I've been describing my work as tinkering with lines of code until numbers appear on the screen in the right order. This is invariably greeted with a comforting-to-me response like \"I could never do that\". But I really enjoy this. I'm not just debugging my code; I'm sharpening the way the program is organized in my head. Once I've got my head around it, I decode that organization into words, code, drawings, etc.\n\nWith programs, there is some system of rules, forces, and interactions which describe how the code works or doesn't. Economics, too, describes a system of rules, forces, and interactions that predicts how a puzzle of human beings operate. Organizing and decoding these technical and social puzzles is great fun.\n",
				"date_published": "2011-03-30T04:39:13-07:00",
				"url": "https://therealadam.com/2011/03/30/organizing-and-decoding.html",
				"tags": ["The System","economics","thinking"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/03/28/workouts-make-focus.html",
				"title": "Workouts make focus and discipline",
				"content_html": "<p>It is probably obvious I have something of a crush on working out. I am proud I have reached a point where being fit is part of my lifestyle and that I see more and more results. But my crush with exercise goes beyond what I see in the mirror.</p>\n<p>As important as the physical aspects are, I get the most out of the mental aspects. Working out mirrors what I do in coding in a couple ways. Both require staying on my grind almost every day. Both require the focus to push myself and resist complacency.</p>\n<p>It&rsquo;s easy to spend too much time tinkering with social media or pick the lighter weights. It&rsquo;s harder to ignore distractions and focus on the task in front of me, whether it&rsquo;s code or heaving kettlebells.</p>\n<p>When I do manage to focus I benefit twice. Immediately I feel great because I challenged myself and moved my work or workout forward. Later, I realize I&rsquo;m getting better at putting the work in every day and tuning out that which is not important to what I&rsquo;m trying to do.</p>\n<p>The TV infomercial benefits of working out, ripped extremities and a strong core, are a tertiary benefit to developers and creative types. Even the decrease in neck fat, the ability to lift heavy things, and reduced tendency to get winded are auxillary. The real benefit that people who make things get from working out are increased focus and discipline.</p>\n",
				"content_text": "It is probably obvious I have something of a crush on working out. I am proud I have reached a point where being fit is part of my lifestyle and that I see more and more results. But my crush with exercise goes beyond what I see in the mirror.\n\nAs important as the physical aspects are, I get the most out of the mental aspects. Working out mirrors what I do in coding in a couple ways. Both require staying on my grind almost every day. Both require the focus to push myself and resist complacency.\n\nIt's easy to spend too much time tinkering with social media or pick the lighter weights. It's harder to ignore distractions and focus on the task in front of me, whether it's code or heaving kettlebells.\n\nWhen I do manage to focus I benefit twice. Immediately I feel great because I challenged myself and moved my work or workout forward. Later, I realize I'm getting better at putting the work in every day and tuning out that which is not important to what I'm trying to do.\n\nThe TV infomercial benefits of working out, ripped extremities and a strong core, are a tertiary benefit to developers and creative types. Even the decrease in neck fat, the ability to lift heavy things, and reduced tendency to get winded are auxillary. The real benefit that people who make things get from working out are increased focus and discipline.\n",
				"date_published": "2011-03-28T13:30:34-07:00",
				"url": "https://therealadam.com/2011/03/28/workouts-make-focus.html",
				"tags": ["Expanded ideas","fitness","focus"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/03/27/driven-to-drawing.html",
				"title": "Driven to drawing monsters",
				"content_html": "<p>From my notebook:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "From my notebook:\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2011/03/img_0203.jpg\" border=\"0\" alt=\"Monster\" width=\"600\" height=\"450\" /></div>\nI don't recall what I was working on the time, but it seems that the interaction between many Gowalla models loading from cache via a  <code>get</code> class method and something about memcached was causing enough trouble to drive me to draw a little monster.\n",
				"date_published": "2011-03-27T19:25:10-07:00",
				"url": "https://therealadam.com/2011/03/27/driven-to-drawing.html",
				"tags": ["Uncategorized","gowalla","illustrated","notebook","Aside"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/03/26/clips-from-unfinished.html",
				"title": "Clips from unfinished pieces",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>On the crux of America's challenges:</p>\n\n<blockquote><p>Part of the American experiment is answering the question, \"how can we best take advantage of abundance?\" Beginning with manifest destiny and evident in the machinations of Wall Street, one of the story lines of America is the quest to make sure resources of all kind are abundant and generating wealth. But we're arguably at a pivot point. Our money and energy don't go as far as they used to.</p>\n\n<p>How do we make the transition from resource abundance to resource scarcity?</p></blockquote>\n\n<p>On helping people troubleshoot the Gowalla API:</p>\n\n<blockquote><p>While this level of self-documentation is quite helpful, sometimes people have questions on the developer list. For this, I've found that asking people to show me whatever it is they're trying to do using <code>curl</code> is invaluable. It's a win-win situation. Often, dropping down to a lower-level tool like <code>curl</code> helps to focus your thinking and makes silly error obvious. If it doesn't become obvious to the API developer, they mail the list with the command they think should work. At that point its either obvious to me and I tell them what to change, or I have a nice, isolated test case from which I can easily try to reproduce their problem.</p></blockquote>\n\n<p>Who gets screwed when a borrower declares bankrupcty?</p>\n\n<blockquote><p>Is it possible that bankruptcy-declaring-borrowers are screwing lenders in aggregate? I find it really hard to believe that the banking industry, with its legion of lobbyists and regulatory capture, that any group of uncoordinated individuals could screw the banks.</p>\n\n<p>On the other hand, there was lots of screwing on the part of the banks that led to the financial crisis. Whether it was predatory lending, relying on moral hazard to double down on terrible bets, or asinine compensation structures, the financial industry did something very human. They violated social norms. Except, corporations of this size <em>don't</em> have social norms. They have only market incentives; when the executives, board members, and majority shareholders look at the books, the numbers devoted to \"doing the right thing\" are probably a rounding error.</p></blockquote>\n\n<p>On tail recursion and compilers:</p>\n\n<blockquote><p><strong>Fact of life</strong>: modern processors don't execute your code in the order the compiler spits it out.</p>\n\n<p>If your code has, for instance, two adds followed by an <code>if</code> statement, it's pretty likely that second add is going to be executed concurrently or after the conditional. In the world of computer architecture, they call this out-of-order execution, and it's just another service your hard working processor offers to make sure your code runs faster than you ever intended it to.</p></blockquote>\n\n<p>On shorter cycles of production and the need to get past perfectionism:</p>\n\n<blockquote><p>Our modes of production are causing us to change how we produce. More and more mediums, be it journalism or software, are produced on shorter timelines. This is leading us to optimize production such that we can bang the content or code that matters into templates that mostly work, but have a tolerance for the rough edges where things don't work.</p></blockquote>\n\n<p>On Barack Obama's 2010 State of the Union speech that preceeded the health care debate:</p>\n\n<blockquote><p>Just for grins, I went and read the GOP response to the State of the Union. While they had some vague counterpoints policy-wise, it read mostly as subtle and useless jabs combined with carefully-constructed language to console their base. The GOP is a cynical, gutless organization.</p></blockquote>\n\n<p>On refactoring and deleting code:</p>\n\n<blockquote><p>People often say that they would miss having a refactoring browser in languages like Ruby, JavaScript, or anything that is reasonably dynamic. My glib response to this sort of comment is invariably \"well, the best refactoring I know is to select the code to modify, hit delete, and start over.\" Let's take that apart.</p>\n\n<p>I've observed that, despite our best intentions, we are often loathe to change code that we suspect is working, or that we suspect we don't know why it's there. And so, like the planet on which we live, applications accrete into Katamari balls of overly-coupled code that is bound only by locality. Cutting this Gordian knot is often the first step in reclaiming a project.</p>\n\n<p>Deleting code is the knife with which we can attack this problem. Many will acknowledge the goodness of deleting code; it is, quite nearly, a virtue unto itself. I've observed that some of the best developers I know are always on the lookout for ways they can obviate code. So, by way of a strawman, I hope you see that I'm quite correct in this regard.</p></blockquote>\n",
				"date_published": "2011-03-26T19:32:04-07:00",
				"url": "https://therealadam.com/2011/03/26/clips-from-unfinished.html",
				"tags": ["Expanded ideas","The System","Erudition","pragprog","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/02/26/focus-momentum-and.html",
				"title": "Focus, momentum, and accomplishment",
				"content_html": "<p>Lately, I&rsquo;m a little fascinated by the interplay between focus, momentum, and accomplishment. Focus is the feeling of flow, the world around you fading away. Momentum is the feeling that you&rsquo;re moving things along, getting stuff done. Accomplishment is stepping back, looking at what you&rsquo;ve done, and feeling like you did something good. These factors play out differently in the three activities to which I decide much of my time.</p>\n<p>When I&rsquo;m building software, I&rsquo;ve found that momentum leads to focus, accomplishments yield momentum, but focus does not necessarily yield accomplishments. Yet, the most exciting moments seem to come when I&rsquo;m focused and building momentum. Those times when my attention is fragmented but I&rsquo;m working through a list of stuff that needs to get done doesn&rsquo;t <em>feel</em> like accomplishment, but it does seem to get the job done.</p>\n<p>Anecodotally, it seems that, by definition, Monday is the day of the week that lacks focus but still possesses some form of accomplishment. It&rsquo;s the sacrificial lamb of the work week.</p>\n<p>When I&rsquo;m reading, writing, and organizing information, I&rsquo;ve found that momentum is not much of a factor. It&rsquo;s all about focus. Stick my head into a cluster of ideas, focus on what I&rsquo;m reading, how I&rsquo;m thinking about it, or how I&rsquo;m writing it back out. Keep the problem state in my head, admitting as few distractions as possible. Come up for air periodically, review my progress, and decide to either continue or move on to other things.</p>\n<p>Of these three activities, I&rsquo;ve found that I&rsquo;m most methodical about how I use momentum when I&rsquo;m thinking. It&rsquo;s sort of a rate limiter; after I&rsquo;ve read something particularly dense, I&rsquo;ll immediately do something banal like catch up on social medias. Not sure if this tendency is enhancing or diminishing my thinking.</p>\n<p>I spend several hours a week training. The coffee shop (thinking) and the gym (training) are my third place(s). Recently, it feels like I&rsquo;ve leveled up. I had a few consecutive workouts where I was more focused than I&rsquo;ve ever been whilst exercising; no worries about my breathing, or if I was pushing myself too little or too much. From this focus I found momentum. A couple minutes on the treadmill would turn into tens of minutes, then a half hour. One set of strength exercises would blend into the next. I was able to push myself to higher levels of accomplishments. It felt awesome.</p>\n<p>Interestingly enough, I&rsquo;ve found that I need a day off from each of these activities. As awesome as it sounds to have the kind of intensity that lets one make awesome things every day of the week, I&rsquo;ve found it necessary to relax and take time away from coding, thinking, and training. As it turns out relaxation is an important part of a balanced diet of focus, momentum, and accomplishment.</p>\n",
				"content_text": "Lately, I'm a little fascinated by the interplay between focus, momentum, and accomplishment. Focus is the feeling of flow, the world around you fading away. Momentum is the feeling that you're moving things along, getting stuff done. Accomplishment is stepping back, looking at what you've done, and feeling like you did something good. These factors play out differently in the three activities to which I decide much of my time.\n\nWhen I'm building software, I've found that momentum leads to focus, accomplishments yield momentum, but focus does not necessarily yield accomplishments. Yet, the most exciting moments seem to come when I'm focused and building momentum. Those times when my attention is fragmented but I'm working through a list of stuff that needs to get done doesn't _feel_ like accomplishment, but it does seem to get the job done.\n\nAnecodotally, it seems that, by definition, Monday is the day of the week that lacks focus but still possesses some form of accomplishment. It's the sacrificial lamb of the work week.\n\nWhen I'm reading, writing, and organizing information, I've found that momentum is not much of a factor. It's all about focus. Stick my head into a cluster of ideas, focus on what I'm reading, how I'm thinking about it, or how I'm writing it back out. Keep the problem state in my head, admitting as few distractions as possible. Come up for air periodically, review my progress, and decide to either continue or move on to other things.\n\nOf these three activities, I've found that I'm most methodical about how I use momentum when I'm thinking. It's sort of a rate limiter; after I've read something particularly dense, I'll immediately do something banal like catch up on social medias. Not sure if this tendency is enhancing or diminishing my thinking.\n\nI spend several hours a week training. The coffee shop (thinking) and the gym (training) are my third place(s). Recently, it feels like I've leveled up. I had a few consecutive workouts where I was more focused than I've ever been whilst exercising; no worries about my breathing, or if I was pushing myself too little or too much. From this focus I found momentum. A couple minutes on the treadmill would turn into tens of minutes, then a half hour. One set of strength exercises would blend into the next. I was able to push myself to higher levels of accomplishments. It felt awesome.\n\nInterestingly enough, I've found that I need a day off from each of these activities. As awesome as it sounds to have the kind of intensity that lets one make awesome things every day of the week, I've found it necessary to relax and take time away from coding, thinking, and training. As it turns out relaxation is an important part of a balanced diet of focus, momentum, and accomplishment.\n",
				"date_published": "2011-02-26T16:03:48-07:00",
				"url": "https://therealadam.com/2011/02/26/focus-momentum-and.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/02/14/a-conversation-between.html",
				"title": "A conversation between fictional engineers in a fictional world",
				"content_html": "<p><!-- raw HTML omitted -->A hypothetical conversation that may have occurred between two non-existent engineers working on the second Death Star in the completely fictional Star Wars universe.<!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: Hey Bob, I was perusing the blueprints for this &ldquo;Second Deathstar&rdquo; this morning. Pretty impressive stuff.</p>\n<p><!-- raw HTML omitted -->Engineer #2<!-- raw HTML omitted -->: Thanks Hank. I&rsquo;m pretty proud of it.</p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: And you should be! Had one question though. There was something in the request-for-proposals that mentioned some flaw in the previous one where a snub fighter could drop a torpedo through a vent and blow the whole thing up, yeah?</p>\n<p><!-- raw HTML omitted -->Engineer #2<!-- raw HTML omitted -->: Yep! Don&rsquo;t you feel bad for the poor schmuck who made that decision?</p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: Haha, that&rsquo;s a good one Bob. So you fixed that right?</p>\n<p><!-- raw HTML omitted -->Engineer #2<!-- raw HTML omitted -->: Oh, definitely. All the exhaust ports are small enough the only thing falling in there is a grain of sand.</p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: Nice thinking! So, my real question is, what&rsquo;s this giant opening you can fly a large freighter through? And why does it lead right to the station&rsquo;s giant fusion reactor that sits in a room big enough to fly in circles in said large freighter?</p>\n<p><!-- raw HTML omitted -->Engineer #2<!-- raw HTML omitted -->: Oh, that? Well, the passage from that room to the surface is where I&rsquo;m going to run all the pipes and wiring that I forget about until the last second. I figure once I&rsquo;m done patching everything together, no pilot would be able to fly through there, even in a snub fighter.</p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: And the giant room?</p>\n<p><!-- raw HTML omitted -->Engineer #2<!-- raw HTML omitted -->: Oh, you know clients. Always deciding they want something really impressive at the last minute. I figured I&rsquo;d just leave a little extra room in case they come up with something at the last minute.</p>\n<p><!-- raw HTML omitted -->Engineer #1<!-- raw HTML omitted -->: Haha, right again Bob. Clients are such idiots.</p>\n",
				"content_text": "<em>A hypothetical conversation that may have occurred between two non-existent engineers working on the second Death Star in the completely fictional Star Wars universe.</em>\n\n<strong>Engineer #1</strong>: Hey Bob, I was perusing the blueprints for this \"Second Deathstar\" this morning. Pretty impressive stuff.\n\n<strong>Engineer #2</strong>: Thanks Hank. I'm pretty proud of it.\n\n<strong>Engineer #1</strong>: And you should be! Had one question though. There was something in the request-for-proposals that mentioned some flaw in the previous one where a snub fighter could drop a torpedo through a vent and blow the whole thing up, yeah?\n\n<strong>Engineer #2</strong>: Yep! Don't you feel bad for the poor schmuck who made that decision?\n\n<strong>Engineer #1</strong>: Haha, that's a good one Bob. So you fixed that right?\n\n<strong>Engineer #2</strong>: Oh, definitely. All the exhaust ports are small enough the only thing falling in there is a grain of sand.\n\n<strong>Engineer #1</strong>: Nice thinking! So, my real question is, what's this giant opening you can fly a large freighter through? And why does it lead right to the station's giant fusion reactor that sits in a room big enough to fly in circles in said large freighter?\n\n<strong>Engineer #2</strong>: Oh, that? Well, the passage from that room to the surface is where I'm going to run all the pipes and wiring that I forget about until the last second. I figure once I'm done patching everything together, no pilot would be able to fly through there, even in a snub fighter.\n\n<strong>Engineer #1</strong>: And the giant room?\n\n<strong>Engineer #2</strong>: Oh, you know clients. Always deciding they want something really impressive at the last minute. I figured I'd just leave a little extra room in case they come up with something at the last minute.\n\n<strong>Engineer #1</strong>: Haha, right again Bob. Clients are such idiots.\n",
				"date_published": "2011-02-14T20:11:29-07:00",
				"url": "https://therealadam.com/2011/02/14/a-conversation-between.html",
				"tags": ["Comedy, haha","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/02/13/simple-ruby-pleasures.html",
				"title": "Simple Ruby pleasures",
				"content_html": "<p>I think I first discovered the joy of <!-- raw HTML omitted -->take<!-- raw HTML omitted --> and <!-- raw HTML omitted -->drop<!-- raw HTML omitted --> in my journeys through Haskell. But it appears that, since 2008 at least, we have had the pleasure of using them in Ruby too.</p>\n<p>Need the first or last <!-- raw HTML omitted -->N<!-- raw HTML omitted --> elements from an <!-- raw HTML omitted -->Enumerable<!-- raw HTML omitted -->. Easy!</p>\n<p>[sourcecode language=&ldquo;ruby&rdquo; light=&ldquo;true&rdquo;]\nary = (1..100).to_a\nary.take(5) # =&gt; [1, 2, 3, 4, 5]\nary.drop(95) # =&gt; [96, 97, 98, 99, 100]</p>\n<p>range = (1..100)\nrange.take(5) # =&gt; [1, 2, 3, 4, 5]\nrange.drop(95) # =&gt; [96, 97, 98, 99, 100]</p>\n<p>hsh = {:foo =&gt; 1, :bar =&gt; 2, :baz =&gt; 3}\nhsh.take(1) # =&gt; [[:bar, 2]]\nhsh.drop(2) # =&gt; [[:foo, 1]]\n[/sourcecode]</p>\n<p>The real magic is when you use <!-- raw HTML omitted -->take<!-- raw HTML omitted --> along with other <!-- raw HTML omitted -->Enumerable<!-- raw HTML omitted --> goodies like <!-- raw HTML omitted -->select<!-- raw HTML omitted --> and <!-- raw HTML omitted -->map<!-- raw HTML omitted -->. Here&rsquo;s one of my personal favorites amongst the code I wrote in 2010:</p>\n<p>[sourcecode language=&ldquo;ruby&rdquo; light=&ldquo;true&rdquo; highlight=&ldquo;12,13,14&rdquo;]\nclass QueryTracer &lt; ActiveSupport::LogSubscriber</p>\n<p>ACCEPT = %r{^(app|config|lib)}.freeze\nFRAMES = 5\nTHRESHOLD = 300 # In ms</p>\n<p>def sql(event)\nreturn unless event.duration &gt; THRESHOLD\ncallers = Rails.\nbacktrace_cleaner.\nclean(caller).\nselect { |f| f =~ ACCEPT }.\ntake(FRAMES).\nmap { |f| f.split(&quot;:&quot;).take(2).join(&quot;:&quot;) }.\njoin(&quot; | &quot;)</p>\n<pre><code># Shamelessly stolen from ActiveRecord::LogSubscriber\nwarning = color(&amp;quot;SLOW QUERY&amp;quot;, RED, true)\nname = '%s (%.1fms)' % [event.payload[:name], event.duration]\nsql  = event.payload[:sql].squeeze(' ')\n\nwarn &amp;quot;  #{warning}&amp;quot;\nwarn &amp;quot;    #{name} #{sql}&amp;quot;\nwarn &amp;quot;    Trace: #{callers}&amp;quot;\n</code></pre>\n<p>end</p>\n<p>end</p>\n<p>QueryTracer.attach_to :active_record\n[/sourcecode]</p>\n<p>This little ditty is awesome because:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "I think I first discovered the joy of <code>take</code> and <code>drop</code> in my journeys through Haskell. But it appears that, since 2008 at least, we have had the pleasure of using them in Ruby too.\n\nNeed the first or last <code>N</code> elements from an <code>Enumerable</code>. Easy!\n\n[sourcecode language=\"ruby\" light=\"true\"]\nary = (1..100).to_a\nary.take(5) # =&gt; [1, 2, 3, 4, 5]\nary.drop(95) # =&gt; [96, 97, 98, 99, 100]\n\nrange = (1..100)\nrange.take(5) # =&gt; [1, 2, 3, 4, 5]\nrange.drop(95) # =&gt; [96, 97, 98, 99, 100]\n\nhsh = {:foo =&gt; 1, :bar =&gt; 2, :baz =&gt; 3}\nhsh.take(1) # =&gt; [[:bar, 2]]\nhsh.drop(2) # =&gt; [[:foo, 1]]\n[/sourcecode]\n\nThe real magic is when you use <code>take</code> along with other <code>Enumerable</code> goodies like <code>select</code> and <code>map</code>. Here's one of my personal favorites amongst the code I wrote in 2010:\n\n[sourcecode language=\"ruby\" light=\"true\" highlight=\"12,13,14\"]\nclass QueryTracer &lt; ActiveSupport::LogSubscriber\n\n  ACCEPT = %r{^(app|config|lib)}.freeze\n  FRAMES = 5\n  THRESHOLD = 300 # In ms\n\n  def sql(event)\n    return unless event.duration &gt; THRESHOLD\n    callers = Rails.\n      backtrace_cleaner.\n      clean(caller).\n      select { |f| f =~ ACCEPT }.\n      take(FRAMES).\n      map { |f| f.split(&quot;:&quot;).take(2).join(&quot;:&quot;) }.\n      join(&quot; | &quot;)\n\n    # Shamelessly stolen from ActiveRecord::LogSubscriber\n    warning = color(&quot;SLOW QUERY&quot;, RED, true)\n    name = '%s (%.1fms)' % [event.payload[:name], event.duration]\n    sql  = event.payload[:sql].squeeze(' ')\n\n    warn &quot;  #{warning}&quot;\n    warn &quot;    #{name} #{sql}&quot;\n    warn &quot;    Trace: #{callers}&quot;\n  end\n\nend\n\nQueryTracer.attach_to :active_record\n[/sourcecode]\n\nThis little ditty is awesome because:\n<ul>\n\t<li>It's super-practical. Drop this in your Rails 3 app, tail your production log, see the slow queries, go to the method in your app calling it, and fix it. Easy.</li>\n\t<li>It only activates itself when it's needed. Queries that execute quickly return immediately.</li>\n\t<li>No framework spelunking required. Rails 3's notification system handles all of it. Rails' backtace cleaner gizmo even makes the backtraces much nicer to read.</li>\n\t<li>It chains methods to make something that reads like a nice, concise functional program.</li>\n</ul>\nFor more <code>Enumerable</code> joy, <a href=\"http://iampedantic.com/post/2945499041/enumerable-each-cons\">read up on <code>each_cons</code></a>.\n",
				"date_published": "2011-02-12T22:21:37-07:00",
				"url": "https://therealadam.com/2011/02/13/simple-ruby-pleasures.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/01/23/the-political-empathy.html",
				"title": "The political empathy gap",
				"content_html": "<p>The structural problems in American political discourse are legion. Polarized interests, corporate and special interests, the news/hype cycle, and pundits who serve no real political purpose but exist only as media entities. All of it conspires to misdirect discussions of where our country is, where it needs to go, and how to get there.</p>\n<p>Underlying all that is a serious problem. There are two sides to every issue (or so we&rsquo;re told), and they cannot fathom each other&rsquo;s position. Empathy is not a characteristic of American politics.</p>\n<p>This manifests itself everywhere. Dismissive rhetoric, talking past each other, insulting jabs, moral grandstanding, dehumanizing the other side, binary reasoning, and violent propaganda. Were it the case that conservatives and progressives could understand each others goals, fears, and dreams, these problems would exist on the fringe rather than the mainstream.</p>\n<p>Intellectual empathy is a hard thing to come by. We all want to be winners, firmly on the side of the virtuous good. To accept that there is something valid in one&rsquo;s debate opponent is challenging. To go further and accept ambiguity and uncertainty is even more difficult. It would seem that a majority would prefer comfort in wrongness rather than face up to a world where their side is not that of the virtuous good.</p>\n<p>I&rsquo;m not sure how one learns these things other than seeking out new ideas and opinions. Even then, there&rsquo;s the intuition to sort the wheat from the chaff, the practice from the principle, the solid thinkers from the eccentrics. Political empathy is perhaps (but hopefully not) the endpoint on an intellectual journey that a pop culture is ill suited to embark upon.</p>\n<p>I can&rsquo;t say that my grasp on the problem is good enough to suggest solutions. Perhaps humor, perhaps better education, perhaps breaking bread, perhaps more journalists growing a spine. I should hope it happens soon, because I&rsquo;m getting pretty tired of how cynical I am of what politics has become.</p>\n",
				"content_text": "The structural problems in American political discourse are legion. Polarized interests, corporate and special interests, the news/hype cycle, and pundits who serve no real political purpose but exist only as media entities. All of it conspires to misdirect discussions of where our country is, where it needs to go, and how to get there.\n\nUnderlying all that is a serious problem. There are two sides to every issue (or so we're told), and they cannot fathom each other's position. Empathy is not a characteristic of American politics.\n\nThis manifests itself everywhere. Dismissive rhetoric, talking past each other, insulting jabs, moral grandstanding, dehumanizing the other side, binary reasoning, and violent propaganda. Were it the case that conservatives and progressives could understand each others goals, fears, and dreams, these problems would exist on the fringe rather than the mainstream.\n\nIntellectual empathy is a hard thing to come by. We all want to be winners, firmly on the side of the virtuous good. To accept that there is something valid in one's debate opponent is challenging. To go further and accept ambiguity and uncertainty is even more difficult. It would seem that a majority would prefer comfort in wrongness rather than face up to a world where their side is not that of the virtuous good.\n\nI'm not sure how one learns these things other than seeking out new ideas and opinions. Even then, there's the intuition to sort the wheat from the chaff, the practice from the principle, the solid thinkers from the eccentrics. Political empathy is perhaps (but hopefully not) the endpoint on an intellectual journey that a pop culture is ill suited to embark upon.\n\nI can't say that my grasp on the problem is good enough to suggest solutions. Perhaps humor, perhaps better education, perhaps breaking bread, perhaps more journalists growing a spine. I should hope it happens soon, because I'm getting pretty tired of how cynical I am of what politics has become.\n",
				"date_published": "2011-01-23T18:52:52-07:00",
				"url": "https://therealadam.com/2011/01/23/the-political-empathy.html",
				"tags": ["Expanded ideas","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/01/17/now-witness-the.html",
				"title": "Now witness the power of this fully functional domicile!",
				"content_html": "<p>About a year ago, our garage door was not feeling well. It wouldn&rsquo;t go down on it&rsquo;s own. To close it required my loving embrace. Specifically, I had to lean against it as the door goes down the tracks. I&rsquo;m sure I looked like the &ldquo;mystic&rdquo; trope in the &ldquo;action&rdquo; movie who, at a crucial moment in the action, resurrects the hero so he can go whoop the bad guy.</p>\n<p>This is the part about home ownership that sucks the most. I had a strong suspicion this would work out one of two ways. The repair person will come out, look at it for two minutes, bang on something with a hammer a few times and everything works. Easy, cheap. Or, the repair person will look at it, tinker with it, and pronounce the motor dead, to the tune of a few hundred dollars. It ended up being somewhere in between; I think some kind of specialized garage door grease was involved.</p>\n<p>I avoid these things because, through hundreds of logical and unintended decisions, I have chosen the life of an extremely specialized knowledge worker. I enjoy making sense of complicated systems that involve people, computers, and uncertainty. I am nearly useless with everything else.</p>\n<p>Luckily, ours is an age where that specialization works out pretty well. I am fortunate that I can pay others to worry about typical &ldquo;male&rdquo; tasks like changing the oil on our cars or painting the bedroom (cue applause from the economists in the audience). That said, sometimes the interactions with those folks feels a little odd. I usually have to prefix them with the disclaimer that I am &ldquo;the least handy dude on the planet&rdquo;; it&rsquo;s important to set expectations.</p>\n<p>Another thing I&rsquo;ve learned about home ownership is that repairing my garage door will almost certainly be worth every penny I pay for it. I know this because some time ago, we got around to having someone fix our toilet. It would run for quite some time after you flush it. At least thirty minutes. I let this linger because it was easier to not think about spending money on it that it was to do something about it. But, for not too much money, a professional (read: not me) fixed everything. The toilet flushed and stopped running mere moments later.</p>\n<p>The psychological release this brought me was incredible. I found myself noticeably happier that our house was less broken. It was like I got a new toy. And exciting, rejuvenated, toilet toy!</p>\n<p>&hellip;and that&rsquo;s the worst part about home ownership. That you can sit down and write more than five hundred words on the joy of home repairs. I&rsquo;ve been working with some folks that are several years younger than I am. These events are interesting to <!-- raw HTML omitted -->me<!-- raw HTML omitted -->, but I know that if I were to breach the topic with them, it would confirm to them that I am indeed the lamest trigenarian they&rsquo;ve ever met. I know this because in college, I worked with older dudes and the summer I spent listening to them talking about the <!-- raw HTML omitted -->pH<!-- raw HTML omitted --> balance of their pools was notably tedious.</p>\n<p>So here we are, five hundred words later, telling the <!-- raw HTML omitted -->whole internet<!-- raw HTML omitted --> I&rsquo;m the lamest trigenarian they may ever meet. The good news is, everything in my house works. We got it inspected, and we know this with certainty. I highly recommend it if you have the means.</p>\n",
				"content_text": "About a year ago, our garage door was not feeling well. It wouldn't go down on it's own. To close it required my loving embrace. Specifically, I had to lean against it as the door goes down the tracks. I'm sure I looked like the \"mystic\" trope in the \"action\" movie who, at a crucial moment in the action, resurrects the hero so he can go whoop the bad guy.\n\nThis is the part about home ownership that sucks the most. I had a strong suspicion this would work out one of two ways. The repair person will come out, look at it for two minutes, bang on something with a hammer a few times and everything works. Easy, cheap. Or, the repair person will look at it, tinker with it, and pronounce the motor dead, to the tune of a few hundred dollars. It ended up being somewhere in between; I think some kind of specialized garage door grease was involved.\n\nI avoid these things because, through hundreds of logical and unintended decisions, I have chosen the life of an extremely specialized knowledge worker. I enjoy making sense of complicated systems that involve people, computers, and uncertainty. I am nearly useless with everything else.\n\nLuckily, ours is an age where that specialization works out pretty well. I am fortunate that I can pay others to worry about typical \"male\" tasks like changing the oil on our cars or painting the bedroom (cue applause from the economists in the audience). That said, sometimes the interactions with those folks feels a little odd. I usually have to prefix them with the disclaimer that I am \"the least handy dude on the planet\"; it's important to set expectations.\n\nAnother thing I've learned about home ownership is that repairing my garage door will almost certainly be worth every penny I pay for it. I know this because some time ago, we got around to having someone fix our toilet. It would run for quite some time after you flush it. At least thirty minutes. I let this linger because it was easier to not think about spending money on it that it was to do something about it. But, for not too much money, a professional (read: not me) fixed everything. The toilet flushed and stopped running mere moments later.\n\nThe psychological release this brought me was incredible. I found myself noticeably happier that our house was less broken. It was like I got a new toy. And exciting, rejuvenated, toilet toy!\n\n...and that's the worst part about home ownership. That you can sit down and write more than five hundred words on the joy of home repairs. I've been working with some folks that are several years younger than I am. These events are interesting to <em>me</em>, but I know that if I were to breach the topic with them, it would confirm to them that I am indeed the lamest trigenarian they've ever met. I know this because in college, I worked with older dudes and the summer I spent listening to them talking about the <em>pH</em> balance of their pools was notably tedious.\n\nSo here we are, five hundred words later, telling the <strong>whole internet</strong> I'm the lamest trigenarian they may ever meet. The good news is, everything in my house works. We got it inspected, and we know this with certainty. I highly recommend it if you have the means.\n",
				"date_published": "2011-01-17T19:14:16-07:00",
				"url": "https://therealadam.com/2011/01/17/now-witness-the.html",
				"tags": ["Expanded ideas","homes toilets"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2011/01/06/the-ear-is.html",
				"title": "The ear is connected to the brain",
				"content_html": "<p>Some measure their work in tomatoes. I measure mine in albums and songs.</p>\n<p>When it comes time to get stuff done, I match my ambitions to my energy level. Big, uncertain things when I&rsquo;m full of spark and optimism. Tiny, predictable things when I&rsquo;m sapped and ready to check out. The coherence, duration, and novelty of what I&rsquo;m listening to takes me in a different creative directions. I use <!-- raw HTML omitted -->Pandora<!-- raw HTML omitted -->, my own iTunes library, and <!-- raw HTML omitted -->Rdio<!-- raw HTML omitted --> to match my creative mood to a musical mood.</p>\n<p>Sometimes, I don&rsquo;t know where I&rsquo;m <!-- raw HTML omitted -->going<!-- raw HTML omitted -->. I may not even know where I <!-- raw HTML omitted -->am<!-- raw HTML omitted -->. At best, I know how I <!-- raw HTML omitted -->feel<!-- raw HTML omitted -->. This is when Pandora shines. If I feel funky, I go with a Billy Preston or Meters mix. If I&rsquo;m feeling peppy, I go with RJD2 or Steely Dan. If I&rsquo;m feeling brooding, it&rsquo;s DJ Shadow or Explosions in the Sky. Pandora finds my way musically, I find my way creatively. Teamwork.</p>\n<p>I&rsquo;m an album guy. I like to queue up a coherent piece of music and listen to it all the way through, in order. A good album rewards this. It starts with a bang, proceeds through a middle section where things might get slow, take on minor key, or both. Things clear up, maybe with a light and organized middle piece. The finale brings it all together and ends with something that sticks in my head.</p>\n<p>Ideally, I&rsquo;d create this way too. Start at the beginning. Find the crux of the problem space, explore some solutions. Work to some kind of apex where I&rsquo;ve got all the problems solved and all my ducks in a row. Clean up the rough edges, tidy everything up, and ship it as the finale.</p>\n<p>Duration is important. A short album (<!-- raw HTML omitted -->Treats<!-- raw HTML omitted --> by Sleigh Bells, 32 min.; Beethoven&rsquo;s 5th Symphony, 31 min.) is great for tackling a compact but rewarding task in a small timeframe. A medium length album (<!-- raw HTML omitted -->The Suburbs<!-- raw HTML omitted --> by Arcade Fire, 60 min.; <!-- raw HTML omitted -->Game Theory<!-- raw HTML omitted --> by The Roots, 51 min.) is good when I&rsquo;m starting to feel my groove. When I&rsquo;m feeling more ambitious, a double album is in order (The Beatles <!-- raw HTML omitted -->White Album<!-- raw HTML omitted -->, 96 min., Mahler&rsquo;s 5th Symphony, 72 min.).</p>\n<p>My wildcard is Rdio. Rdio is a blessing for me as a music service. It is very much based on systemic album listening, as opposed to Pandora&rsquo;s serendipitous song discovery. I turn to Rdio when I know I want to focus, but  feel uncertain about where my creative travels will take me. Rdio&rsquo;s full of music I think I might like, but I&rsquo;m not yet sure if I really want to make it part of my collection. When I&rsquo;m listening to Rdio, I&rsquo;m tinkering with ideas, seeing if I want to own them now or stow them away for later.</p>\n<p>Music is important to my craft, even though it&rsquo;s not a touch point. I bought almost twice as much music in 2010 as I did in 2009. I started paying for both Rdio and Pandora. Text editors (I spent significant time in three of them last year), notebooks (I finished two and started a third), and various arcane tools are important to my work making code, organizing ideas, and shipping useful software. Getting my music right is perhaps just as crucial.</p>\n",
				"content_text": "Some measure their work in tomatoes. I measure mine in albums and songs.\n\nWhen it comes time to get stuff done, I match my ambitions to my energy level. Big, uncertain things when I'm full of spark and optimism. Tiny, predictable things when I'm sapped and ready to check out. The coherence, duration, and novelty of what I'm listening to takes me in a different creative directions. I use <a href=\"http://www.pandora.com/\">Pandora</a>, my own iTunes library, and <a href=\"http://www.rdio.com/\">Rdio</a> to match my creative mood to a musical mood.\n\nSometimes, I don't know where I'm <em>going</em>. I may not even know where I <em>am</em>. At best, I know how I <em>feel</em>. This is when Pandora shines. If I feel funky, I go with a Billy Preston or Meters mix. If I'm feeling peppy, I go with RJD2 or Steely Dan. If I'm feeling brooding, it's DJ Shadow or Explosions in the Sky. Pandora finds my way musically, I find my way creatively. Teamwork.\n\nI'm an album guy. I like to queue up a coherent piece of music and listen to it all the way through, in order. A good album rewards this. It starts with a bang, proceeds through a middle section where things might get slow, take on minor key, or both. Things clear up, maybe with a light and organized middle piece. The finale brings it all together and ends with something that sticks in my head.\n\nIdeally, I'd create this way too. Start at the beginning. Find the crux of the problem space, explore some solutions. Work to some kind of apex where I've got all the problems solved and all my ducks in a row. Clean up the rough edges, tidy everything up, and ship it as the finale.\n\nDuration is important. A short album (<em>Treats</em> by Sleigh Bells, 32 min.; Beethoven's 5th Symphony, 31 min.) is great for tackling a compact but rewarding task in a small timeframe. A medium length album (<em>The Suburbs</em> by Arcade Fire, 60 min.; <em>Game Theory</em> by The Roots, 51 min.) is good when I'm starting to feel my groove. When I'm feeling more ambitious, a double album is in order (The Beatles <em>White Album</em>, 96 min., Mahler's 5th Symphony, 72 min.).\n\nMy wildcard is Rdio. Rdio is a blessing for me as a music service. It is very much based on systemic album listening, as opposed to Pandora's serendipitous song discovery. I turn to Rdio when I know I want to focus, but  feel uncertain about where my creative travels will take me. Rdio's full of music I think I might like, but I'm not yet sure if I really want to make it part of my collection. When I'm listening to Rdio, I'm tinkering with ideas, seeing if I want to own them now or stow them away for later.\n\nMusic is important to my craft, even though it's not a touch point. I bought almost twice as much music in 2010 as I did in 2009. I started paying for both Rdio and Pandora. Text editors (I spent significant time in three of them last year), notebooks (I finished two and started a third), and various arcane tools are important to my work making code, organizing ideas, and shipping useful software. Getting my music right is perhaps just as crucial.\n",
				"date_published": "2011-01-06T18:47:50-07:00",
				"url": "https://therealadam.com/2011/01/06/the-ear-is.html",
				"tags": ["Music","Pop Culture","Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/12/21/four-odes-to.html",
				"title": "Four odes to Amazon Prime",
				"content_html": "<p><a href=\"http://twitter.com/therealadam/status/17275860025344000\">twitter.com/therealad&hellip;</a></p>\n<p>I have a somewhat irrational &ldquo;thing&rdquo; for Amazon Prime. So much so that I&rsquo;m a little surprised that I have such an affinity for what is in some ways simply the act of prepaying for shipping. But that&rsquo;s understating what Amazon Prime is.</p>\n<p><!-- raw HTML omitted -->Prime is a fine example of physical computing<!-- raw HTML omitted -->. I click a button on my computer. Electrons fly all over the place. Database records are created, messages are sent. Pedestrian. But at some point a TV comes off a shelf and is loaded on a truck. Less than forty-eight hours later, it appears on my porch. Maybe not as nifty as an Arduino robot that mixes drinks, but just as physical and slightly more practical.</p>\n<p><!-- raw HTML omitted -->Prime is what Amazon should have patented<!-- raw HTML omitted --> (if they could have waited). &ldquo;Method for buying something with one click&rdquo; isn&rsquo;t so impressive sounding. &ldquo;Method for integrating e-commerce, logistics, and shipping systems so that things magically appear at my house at my whimsy&rdquo;, now that&rsquo;s a good title for a patent.</p>\n<p><!-- raw HTML omitted -->Amazon Prime has a transformative effect on how I consume<!-- raw HTML omitted -->. There are all sorts of things that I just kind of languish without because I never remember to buy them when I&rsquo;m at the right store. If it&rsquo;s not food, I buy it on Amazon now.</p>\n<p>Today I decided I should buy more undershirts. Five minutes later, they&rsquo;re on their way to my house. Because I&rsquo;m paying a fixed rate for shipping every year, I don&rsquo;t worry about batching up my shopping. I just go buy things when I realize I need them. Potentially costly, yes. But now I&rsquo;ll have a proper supply of undershirts.</p>\n<p><!-- raw HTML omitted -->Prime, coupled with Amazon&rsquo;s recommendations, is eerily effective<!-- raw HTML omitted -->. Years and years ago, when I started using Amazon, the first thing I added to my wish list was first three seasons of Bosom Buddies on VHS (yes, that long ago). Amazon promptly recommend I look into other movies feature men dressed as women (good call, I find this amusing) and serious movies with Tom Hanks (not  as amusing).\nFast forward ten years, and Amazon gives me humorous, but much more useful, recommendations. I bought three things I&rsquo;d been meaning to pick up but had forgotten about due to recommendations. I&rsquo;m a little surprised the streak ended at three. I&rsquo;m sure there are legions lazy people like myself improving those recommendations right this moment.</p>\n<!-- raw HTML omitted -->\n<p>Prime makes all sorts of transactions much more fluid for me. I spend less time in shopping centers and have a pretty great choice of products; in exchange, money departs my bank account more fluidly. When economists talk of the incredible complexity of markets, free market acolytes proclaim that truly free markets can route around inefficiences, and globalizationists trumpet the benefits of low-friction trade, they&rsquo;re talking about Amazon Prime. It&rsquo;s a service that could only exist in our current age of networks, connectedness, and impatience.</p>\n",
				"content_text": "[twitter.com/therealad...](http://twitter.com/therealadam/status/17275860025344000)\n\nI have a somewhat irrational \"thing\" for Amazon Prime. So much so that I'm a little surprised that I have such an affinity for what is in some ways simply the act of prepaying for shipping. But that's understating what Amazon Prime is.\n\n<strong>Prime is a fine example of physical computing</strong>. I click a button on my computer. Electrons fly all over the place. Database records are created, messages are sent. Pedestrian. But at some point a TV comes off a shelf and is loaded on a truck. Less than forty-eight hours later, it appears on my porch. Maybe not as nifty as an Arduino robot that mixes drinks, but just as physical and slightly more practical.\n\n<strong>Prime is what Amazon should have patented</strong> (if they could have waited). \"Method for buying something with one click\" isn't so impressive sounding. \"Method for integrating e-commerce, logistics, and shipping systems so that things magically appear at my house at my whimsy\", now that's a good title for a patent.\n\n<strong>Amazon Prime has a transformative effect on how I consume</strong>. There are all sorts of things that I just kind of languish without because I never remember to buy them when I'm at the right store. If it's not food, I buy it on Amazon now.\n\nToday I decided I should buy more undershirts. Five minutes later, they're on their way to my house. Because I'm paying a fixed rate for shipping every year, I don't worry about batching up my shopping. I just go buy things when I realize I need them. Potentially costly, yes. But now I'll have a proper supply of undershirts.\n\n<strong>Prime, coupled with Amazon's recommendations, is eerily effective</strong>. Years and years ago, when I started using Amazon, the first thing I added to my wish list was first three seasons of Bosom Buddies on VHS (yes, that long ago). Amazon promptly recommend I look into other movies feature men dressed as women (good call, I find this amusing) and serious movies with Tom Hanks (not  as amusing).\nFast forward ten years, and Amazon gives me humorous, but much more useful, recommendations. I bought three things I'd been meaning to pick up but had forgotten about due to recommendations. I'm a little surprised the streak ended at three. I'm sure there are legions lazy people like myself improving those recommendations right this moment.\n\n<hr />\n\nPrime makes all sorts of transactions much more fluid for me. I spend less time in shopping centers and have a pretty great choice of products; in exchange, money departs my bank account more fluidly. When economists talk of the incredible complexity of markets, free market acolytes proclaim that truly free markets can route around inefficiences, and globalizationists trumpet the benefits of low-friction trade, they're talking about Amazon Prime. It's a service that could only exist in our current age of networks, connectedness, and impatience.\n",
				"date_published": "2010-12-21T18:38:44-07:00",
				"url": "https://therealadam.com/2010/12/21/four-odes-to.html",
				"tags": ["Expanded ideas","awesome","globalization"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/12/18/groove-failure-and.html",
				"title": "Groove failure and reacquisition",
				"content_html": "<p>Into every creator&rsquo;s life, a few non-creative events must fall. Sometimes its meetings, maybe it&rsquo;s a bunch of business-related emails, or a bunch of support tasks have piled up and it comes time to empty the queue. Whatever the cause, the result is often the same: my day is robbed of chunks of time that are sufficient for tackling the code I wanted to work on. Total Groove Failure.</p>\n<p>Going with the assumption that eliminating Total Groove Failure and its causes is impractical, I&rsquo;m left with the question of how to recover from these sorts of days. <!-- raw HTML omitted -->I asked about this the other day<!-- raw HTML omitted -->. I got two sorts of responses.</p>\n<p>On the one hand, <!-- raw HTML omitted -->you can withdraw<!-- raw HTML omitted -->. Get away from the computer, <!-- raw HTML omitted -->maybe get some sleep<!-- raw HTML omitted --> or <!-- raw HTML omitted -->enjoy an adult beverage<!-- raw HTML omitted -->. One the other hand, you can take action. Get outside, go for a walk or exercise. <!-- raw HTML omitted -->Maybe work on a side project<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Start some code and leave it for the next morning to finish<!-- raw HTML omitted -->. These are some of my Groove Reacquisition Tools.</p>\n<p>Discovering a new Groove Reacquisition Tool is a wonderful thing. None of them are silver bullets, but each one is little slice of confidence that, even if I get derailed, I can get back on the productivity train.</p>\n<p>Whether through action or inaction, it&rsquo;s important to get away from the computer and/or that which sliced your day into fragments. From there, I&rsquo;ve often found it helpful to consider what it is that&rsquo;s stealing my focus and react appropriately. Some days I know that diving into some open source work will do the trick. Others, I need a nap, to exercise, or to wrap myself in a book.</p>\n<p>The crucial bit is to realize I&rsquo;ve lost my groove. Not every interruption leads to Total Groove Failure. There are days where I respond to a few emails in the morning and quickly get into my coding happy place. But if I find myself frustrated at every turn, I resort to one of my Groove Reacquisition Tools.</p>\n",
				"content_text": "Into every creator's life, a few non-creative events must fall. Sometimes its meetings, maybe it's a bunch of business-related emails, or a bunch of support tasks have piled up and it comes time to empty the queue. Whatever the cause, the result is often the same: my day is robbed of chunks of time that are sufficient for tackling the code I wanted to work on. Total Groove Failure.\n\nGoing with the assumption that eliminating Total Groove Failure and its causes is impractical, I'm left with the question of how to recover from these sorts of days. <a href=\"http://twitter.com/#!/therealadam/status/13022201150185472\">I asked about this the other day</a>. I got two sorts of responses.\n\nOn the one hand, <a href=\"http://twitter.com/#!/spicycode/status/13052247713779712\">you can withdraw</a>. Get away from the computer, <a href=\"http://tumble.therealadam.com/post/2159293566/how-do-you-recover-from-slow-coding-days\">maybe get some sleep</a> or <a href=\"http://twitter.com/#!/rubyist/status/13022706601558016\">enjoy an adult beverage</a>. One the other hand, you can take action. Get outside, go for a walk or exercise. <a href=\"http://twitter.com/#!/h3h/status/13039730430050304\">Maybe work on a side project</a>. <a href=\"http://twitter.com/#!/codypo/status/13035834823413761\">Start some code and leave it for the next morning to finish</a>. These are some of my Groove Reacquisition Tools.\n\nDiscovering a new Groove Reacquisition Tool is a wonderful thing. None of them are silver bullets, but each one is little slice of confidence that, even if I get derailed, I can get back on the productivity train.\n\nWhether through action or inaction, it's important to get away from the computer and/or that which sliced your day into fragments. From there, I've often found it helpful to consider what it is that's stealing my focus and react appropriately. Some days I know that diving into some open source work will do the trick. Others, I need a nap, to exercise, or to wrap myself in a book.\n\nThe crucial bit is to realize I've lost my groove. Not every interruption leads to Total Groove Failure. There are days where I respond to a few emails in the morning and quickly get into my coding happy place. But if I find myself frustrated at every turn, I resort to one of my Groove Reacquisition Tools.\n",
				"date_published": "2010-12-18T13:24:24-07:00",
				"url": "https://therealadam.com/2010/12/18/groove-failure-and.html",
				"tags": ["Expanded ideas","lifehacks"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/12/06/a-language-experiment.html",
				"title": "A language experiment writ large",
				"content_html": "<p>For the past year, the Java ecosystem has seen interesting evolution. Java the language continues take its place as the new safety scissors of programming, but the pieces around it are getting better. The JVM is now acknowledged inside and outside of the Java community as really good stuff. Really interesting software like Hadoop and Cassandra are built on top of Java. Integration with languages like Ruby and Python is getting pretty good.</p>\n<p>What&rsquo;s most interesting to me is that there&rsquo;s a competition going on for the hearts and minds of those developers who don&rsquo;t like using safety scissors. This competition is a great experiment into what developers really want in a programming language. For a language nerd such as myself, observing this experiment is a lot of fun.</p>\n<p>On one side you&rsquo;ve got Scala. Scala <!-- raw HTML omitted -->looks <!-- raw HTML omitted -->a lot like Java. But on top of that it adds shorthands and pleasantries from Ruby, a really good type system reminiscent of Haskell, and other handy functional features. When you build up a hybrid language like this you, two things happen. First, a lot of people who look at their checklist, find everything they need and decide. Second, you get a pretty complex language.</p>\n<p>Clojure, however, looks nothing like Java. It&rsquo;s a Lisp, it simply can&rsquo;t. Clojure borrows from Haskell too, this time borrowing ideas about state and how to avoid it and concurrency (notably software transactional memory). Clojure is a funny looking language at first, but there are some great ideas within it. Plus, it&rsquo;s a relatively small language; it&rsquo;s just that it&rsquo;s a different kind of simple and almost <!-- raw HTML omitted -->every<!-- raw HTML omitted --> concept is new to many developers.</p>\n<p>Both these languages are building up strong communities. Both are full of great people with energy and ideas. It&rsquo;s quite possible that a winner-take-all situation won&rsquo;t occur. I&rsquo;d like that.</p>\n<p>What&rsquo;s most interesting to me is to see how people take to the languages. Will they go for the familiarity of Scala and deal with the complexity? Will they learn the simplicities of Clojure and rewire their brains? Will they prove the common wisdom wrong and learn both?</p>\n<p>I&rsquo;m watching with great interest.</p>\n",
				"content_text": "For the past year, the Java ecosystem has seen interesting evolution. Java the language continues take its place as the new safety scissors of programming, but the pieces around it are getting better. The JVM is now acknowledged inside and outside of the Java community as really good stuff. Really interesting software like Hadoop and Cassandra are built on top of Java. Integration with languages like Ruby and Python is getting pretty good.\n\nWhat's most interesting to me is that there's a competition going on for the hearts and minds of those developers who don't like using safety scissors. This competition is a great experiment into what developers really want in a programming language. For a language nerd such as myself, observing this experiment is a lot of fun.\n\nOn one side you've got Scala. Scala <em>looks </em>a lot like Java. But on top of that it adds shorthands and pleasantries from Ruby, a really good type system reminiscent of Haskell, and other handy functional features. When you build up a hybrid language like this you, two things happen. First, a lot of people who look at their checklist, find everything they need and decide. Second, you get a pretty complex language.\n\nClojure, however, looks nothing like Java. It's a Lisp, it simply can't. Clojure borrows from Haskell too, this time borrowing ideas about state and how to avoid it and concurrency (notably software transactional memory). Clojure is a funny looking language at first, but there are some great ideas within it. Plus, it's a relatively small language; it's just that it's a different kind of simple and almost <em>every</em> concept is new to many developers.\n\nBoth these languages are building up strong communities. Both are full of great people with energy and ideas. It's quite possible that a winner-take-all situation won't occur. I'd like that.\n\nWhat's most interesting to me is to see how people take to the languages. Will they go for the familiarity of Scala and deal with the complexity? Will they learn the simplicities of Clojure and rewire their brains? Will they prove the common wisdom wrong and learn both?\n\nI'm watching with great interest.\n",
				"date_published": "2010-12-06T05:16:17-07:00",
				"url": "https://therealadam.com/2010/12/06/a-language-experiment.html",
				"tags": ["Expanded ideas","ruby","haskell","java","scala"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/10/12/bundler-not-as.html",
				"title": "Bundler, not as bad as they say",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Of all the new moving parts in Rails 3, the one I see the most grousing over is Bundler. This is not surprising, as its a big part of how your application works and it's right up front in the process of porting or building Rails 3 apps.<a href='http://yehudakatz.com/2010/09/30/bundler-as-simple-as-what-you-did-before/'>Bundler: As Simple as What You Did Before</a>:</p>\n\n<blockquote><p>Bundler has a lot of advanced features, and it’s definitely possible to model fairly complex workflows. However, we designed the simple case to be extremely simple, and to usually be even less work than what you did before. The problem often comes when trying to handle a slightly off-the-path problem, and using a much more complex solution than you need to. This can make everything much more complicated than it needs to be.</p></blockquote>\n\n<p>I haven't run into anything with Bundler that I couldn't solve with a little critical thinking and maybe a little searching. On the other hand, Bundler has made getting dependencies straight amongst team members and deploying them to production servers far easier than it was before. I'm very glad that while it's not strictly part of the scope of Rails, that Bundler is now part of it.</p>\n",
				"date_published": "2010-10-12T08:35:38-07:00",
				"url": "https://therealadam.com/2010/10/12/bundler-not-as.html",
				"tags": ["Curated","ruby","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/10/11/language-and-brains.html",
				"title": "Language and brains, an update",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://www.nytimes.com/2010/08/29/magazine/29language-t.html?_r=1'>Does Your Language Shape How You Think?</a> An update on the current thinking around the <a href=\"http://en.wikipedia.org/wiki/Sapir-Whorf\">Sapir-Whorf hypothesis</a>, the one about language and the words therein shaping the thoughts you can and cannot form.</p>\n",
				"date_published": "2010-10-11T15:34:30-07:00",
				"url": "https://therealadam.com/2010/10/11/language-and-brains.html",
				"tags": ["Curated","The System","linguistics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/10/08/using-rails-s.html",
				"title": "Using Rails 3.0\u0026#039;s notification system",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://gist.github.com/566725'>How to use Rails 3.0's new notification system to inject custom log events</a>. Ever wondered what the notification/subscription stuff in Rails 3 is? Wonder no more! I just used this to add performance logging around some Cassandra stuff in our Rails 3 app. Once you get the hang of it, this is really rad stuff.</p>\n",
				"date_published": "2010-10-08T08:36:12-07:00",
				"url": "https://therealadam.com/2010/10/08/using-rails-s.html",
				"tags": ["Curated","ruby","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/09/19/computers-should-do.html",
				"title": "Computers should do the boring bits",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href='http://journal.stuffwithstuff.com/2010/09/18/futureproofing-uniform-access-and-masquerades/'>Future-proofing, Uniform Access, and Masquerades</a>:</p>\n\n<blockquote><p>Boring work should be a cardinal sin in programming: it indicates something that the computer should be doing but isn’t.</p></blockquote>\n",
				"date_published": "2010-09-19T09:40:53-07:00",
				"url": "https://therealadam.com/2010/09/19/computers-should-do.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/09/12/an-ode-to.html",
				"title": "An ode to Hashie",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I was building an API wrapper this weekend. As is common when writing these sorts of things, I found myself needing something that takes semi-structured data (hashes parsed from JSON) and yields Ruby objects that are easy to work with. I've always found myself hacking these sorts of things together on a somewhat ad-hoc basis. It's a fun, but a bit of a yak-shave.</p>\n\n<p>This time around, I decided to see if the state of the art has advanced in this realm. Luckily, I reviewed <a href=\"http://www.slideshare.net/pengwynn/json-and-the-apinauts\">Wynn Netherland's slides from Lone Star Ruby Conference</a> and found exactly what I needed.</p>\n\n<h2>Where have you been all my life?</h2>\n\n<p>Intridea's <a href=\"http://github.com/intridea/hashie\">Hashie</a> is a library built on the notion of making hash-like data structures act a little more like objects and a little easier to work with. I have literally wanted something like this for years!</p>\n\n<p>Suppose you have a hash like the following:</p>\n\n<pre>\nhash = {\n  \"name\" =&gt; \"Adam\",\n  \"age\" =&gt; 31,\n  \"url\" =&gt; \"http://therealadam.com\"\n}</pre>\n\n<p>Coding up an object to store that isn't too hard, but writing the code that pulls values out of the Hash and tucks them away in the right attribute on the object gets tedious quickly. Hashie's <a href=\"http://github.com/intridea/hashie/blob/master/lib/hashie/dash.rb\"><code>Dash</code></a> class makes this trivial.</p>\n\n<pre>\nclass User &gt;Hashie::Dashie\n  property :name\n  property :age\n  property :url\nend</pre>\n\n<p>Its even more delightful to use:</p>\n\n<pre>\nuser = User.new(hash)\nuser.name # =&gt; \"Adam\"</pre>\n\n<p>Tons of boilerplate code, eliminated. My life is instantly better.</p>\n\n<h2>A great use of inheritance</h2>\n\n<p>It's been pointed out that ActiveRecord's use of inheritance is somewhat specious. To argue that \"user is-a ActiveRecord::Base\" takes a bit of hand-waving. So lately, you'll find lots of libraries insinuate themselves into classes as a mixin, rather than as a parent class. This is a little bit of you-say-potato-I-say-potato, but whatever.</p>\n\n<p>In Hashie's case, I think that inheritance is being used correctly. All of the classes that Hashie provides (<code>Mash</code>, <code>Dash</code>, <code>Trash</code> and <code>Clash</code>) inherit from <code>Hash</code>. So the is-a relationship holds.</p>\n\n<h2>Sugary data structures taste great</h2>\n\n<p>While I'm going on about inheritance, here's how I used to create these sorts of wrapper classes:</p>\n\n<pre>\nUser = Struct.new(:name, :age, :url)</pre>\n\n<p>For creating simple objects that just need to hold onto some data, I really like this approach. If they end up needing data, it can easily grow up:</p>\n\n<pre>\nclass User &lt; Struct.new(:name, :age, :url)\n  # Behavior goes here\nend</pre>\n\n<p>I like what Hashie is doing even more though. Its enhancing a core class in a largely unobtrusive way, and doing so from the confines of a library that only those who need it can pull from.</p>\n\n<p>I'd love to see more libraries like this that add extra sass to Ruby core library. An Array that pages values out to disk on an LRU-basis perhaps, or a bloom-filter based Set, perhaps?</p>\n\n<p>I'm excited about languages like Erlang, Haskell, Scala, and Clojure and what they can bring to the adventurous developer. Despite that, I feel strongly that Ruby still has plenty of really nifty tricks up its sleeve.</p>\n",
				"date_published": "2010-09-12T14:41:08-07:00",
				"url": "https://therealadam.com/2010/09/12/an-ode-to.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/09/09/examining-software-principles.html",
				"title": "Examining software principles",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>There are too many good things to say about the <a href=\"http://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html\">Design Principles\nBehind Smalltalk</a>. A few of my favorites:</p>\n\n<blockquote><p><strong>Scope</strong>: The design of a language for using computers must deal with internal\nmodels, external media, and the interaction between these in both\nthe human and the computer.</p></blockquote>\n\n<p>This one is really obvious until you get to the last four words. The\n<em>human</em> and the computer. Luckily we're starting to take for granted\nthe primacy of human communication in programming lately (mostly), but\nwhen Smalltalk was created, I'm sure its designers received no\nshortage of grief when they steered towards humane optimizations.</p>\n\n<blockquote><p><strong>Uniform metaphor</strong>: A language should be designed around a powerful\nmetaphor that can be uniformly applied in all areas.</p></blockquote>\n\n<p>Smalltalk is largely objects and messages. Lisp is largely lists and\nfunctions. Erlang is largely pattern matching, functions, and\nactors. These aren't perfect languages, but once you deeply\nunderstand, really grasp the core concepts, you have the whole\nlanguage at your command.</p>\n\n<blockquote><p><strong>Operating System</strong>: An operating system is a collection of things that don't fit into a language. There shouldn't be one.</p></blockquote>\n\n<p>The first sentence is a great principle when considering what should\ngo in the core of a system and what should go in the surrounding\necosystem of libraries. The second sentence is wonderfully bold, in\nthat it cuts against what nearly every successful system has done\nsince Smalltalk was prominent and in that it contradicts the first\nsentence. I'm not sure what practical use to make of this principle;\nits density of intrigue is that keeps me coming back to it.</p>\n\n<blockquote><p><strong>Natural Selection</strong>: Languages and systems that are of sound design will persist, to be supplanted only by better ones.</p></blockquote>\n\n<p>I stopped worrying about what might supplant Ruby a long time\nago. Someday, it will happen. And when it does, whatever succeeds Ruby\nwill have to be <em>really</em> awesome to fill its shoes. I'm looking\nforward to seeing what that is. But the same goes for any technology;\nthey are often replaced with something wholly awesomer than the\nincumbent.</p>\n\n<hr />\n\n<p>I've never done it, but it seems like it would be intriguing and\nvastly informative to sit down with one of the systems I work on daily\nand try to extract these principles post-hoc. What values and\nprinciples are embedded in the system? What does that say about the\nteam and why the system is the way it is? What principles are enablers\nand what bad habits should the team work to correct?</p>\n",
				"date_published": "2010-09-09T19:49:44-07:00",
				"url": "https://therealadam.com/2010/09/09/examining-software-principles.html",
				"tags": ["Uncategorized","ruby","smalltalk"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/07/26/making-the-complicated.html",
				"title": "Making the complicated seem simple",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Don Norman, <a href=\"http://www.jnd.org/dn.mss/simplicity_is_not_the_answer.html\" title=\"Don Norman's jnd.org / Simplicity Is Not the Answer\">Simplicity Is Not the Answer</a>:</p>\n\n<blockquote>\n  <p>We want devices that do a lot, but that do not confuse, do not lead to frustration. Ahah! This is not about simplicity: it is about frustration. The entire debate is being framed incorrectly. Features is not the same as capability. Simplicity is not the same as usability. Simplicity is not the answer.</p>\n</blockquote>\n\n<p>Norman goes on to explain how you can take a confusing mass of features and turn it into something less frustrating:</p>\n\n<ul>\n<li>Modularize into understandable clusters</li>\n<li>Map clearly from actions to results</li>\n<li>Model the ideas and actions cohesively</li>\n</ul>\n\n<p>The article is about interaction design, but it fits just as well in designing programming languages and software.</p>\n",
				"date_published": "2010-07-26T09:44:52-07:00",
				"url": "https://therealadam.com/2010/07/26/making-the-complicated.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/07/14/form-follow-your.html",
				"title": "Form: follow your influences",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Now that I've sort of ranted about tinkering with software and how it is less important than writing, let's talk about form.</p>\n<p>I've found new energy in writing here of late. Part of that, I think, comes from thinking about a handful of weblogs that I really enjoy and figuring out how to emulate them on my own terms. What I find most intriguing and energizing to study is the framework within each author writes.</p>\n<p><a href=\"http://shawnblanc.net/\">Shawn Blanc</a> is a tasteful writer and curator. His site brings me interesting insight into design, aesthetic, and interface. I like his even-handed mix of original and linked content, his in-depth pieces, and his dedication to words over imagery. You can tell I'm thinking of Shawn when I write lengthy pieces examining an idea from all sides or when I post shorter links with a few sentences on how the linked article fits into a larger idea or aesthetic I find intriguing.</p>\n<p><a href=\"http://www.tbray.org/ongoing/\">Tim Bray</a> has his hands on many of the technologies and ideas I use on a regular basis. On his own weblog, he often goes off into the weeds of an idea, documenting an intellectual journey of trying to understand a topic that is new or interesting to him. I don't always agree, and even find some of his stuff boring, but love it when he grabs hold of an idea and works on it. You can tell when I'm wearing my Tim hat (not literally) when I write a serial, a bunch of posts tied together by some idea, trying to figure out where the idea leads and how it fits into the bigger picture of an intellectual journey.</p>\n<p><a href=\"http://kottke.org/\">Jason Kottke</a> is sort of the original gangster of curation. He is at his best and prolific when he is pulling together ideas, finding the unique and wonderful stuff. But more importantly, his erudition puts a lot of ideas and topics together I don't normally come across. Sometimes I post things that aren't really on topic for this weblog, but I do so because I think they represent the \"cult of personality\" of what I find interesting or exciting; this is me playing the Jason Kottke card.</p>\n<p><a href=\"http://rc3.org/\">Rafe Coburn</a> is also a curator, but his topics-of-interest go a bit deeper, a little nerdier. Rafe's at his strongest when he's pulling together ideas about psychology, economics, science, and history. He uses these ideas to explain the political and technological world we live in. He does so in an opinionated way, but one I find easy to read and non-offensive, even when I disagree with him. I've yet to master his tone and the skill by which he brings ideas together, but if you see me posting on topics that are a little boring on their surface, its me trying to make sense of the world in the way that Rafe does.</p>\n<p><a href=\"http://interconnected.org/home/\">Matt Webb</a> is the island and the bridges between thinkers, dreamers, and makers. For years, I've followed his work, delighting in how he brings science, futurism, technology, and materials into wonderful and contemporary ideas. Even better, in <a href=\"http://berglondon.com/\">his company's recent work</a>, he makes these futuristic ideas <em>happen. </em>Should you ever find me wandering into oddly disparate ideas, trying to pull them together into something wonderful, it's likely I'm doing my own faint impersonation of Mr. Webb.</p>\n<p>So that's who I'm influenced the most by lately. The writers whose form, style, and excellence I strive to emulate, whose work I most enjoy. Yours are probably different. But the formula is the same: figure out whose work you aspire to the most, write a post about why you admire their work, and then get to work living up to the bar you've set.</p>\n",
				"date_published": "2010-07-14T14:08:33-07:00",
				"url": "https://therealadam.com/2010/07/14/form-follow-your.html",
				"tags": ["Expanded ideas","writing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/07/12/adams-guide-to.html",
				"title": "Adam\u0026#039;s guide to switching weblogs",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>Over the past few years of writing on this weblog, I can't tell you how many times I've convinced myself that now is the time to move my stuff to new software. Oh, the shiny and wondrous things that must be on that grass that is so much greener on the other side. This, despite having written at least once before on <a href=\"http://therealadam.com/archive/2007/10/20/rejiggering-meets-build-versus-buy/\">whether one should implement their own blogging app</a>.</p>\n<p>Consider this my yearly devotion to not rejiggering things.</p>\n<p><strong><span class=\"caps\">WHEN SHOULD</span> I <span class=\"caps\">REWRITE</span>/SWITCH/REDESIGN MY <span class=\"caps\">WEBLOG, ADAM</span>?</strong></p>\n<p>If your weblog software is so broken you can't post, get some new software that you can post to and port all your old content to it, taking care to preserve links and such (so much as possible; don't worry about boiling the ocean).</p>\n<p>If you make your monies blogging, follow your needs; actually you should largely disregard anything I say.</p>\n<p>If you're a designer by trade, I'll allow that it's often good for your cred to pop a hot new design a couple times a year; just make sure that only one in ten of your posts are about your fresh new redesign.</p>\n<p><span class=\"caps\"><span class=\"caps\"><strong><span class=\"caps\">ADAM, YOU HAVENT MENTIONED</span></strong></span></span><strong> ME </strong><span class=\"caps\"><span class=\"caps\"><strong><span class=\"caps\">YET,</span></strong></span></span><strong> I'M </strong><span class=\"caps\"><span class=\"caps\"><strong><span class=\"caps\">CONFUSED.</span></strong></span></span></p>\n<p>I'm getting to you!</p>\n<ul>\n<li>If you're a writer, <span class=\"caps\"><span class=\"caps\">just<em> WRITE</em></span></span></li>\n<li>If you're a coder, <span class=\"caps\"><span class=\"caps\">just<em> CODE</em></span></span></li>\n</ul>\n<p><span class=\"caps\"><span class=\"caps\"><strong><span class=\"caps\">BUT BUT BUT</span></strong></span></span><strong>!!!!!!!</strong></p>\n<p>No, really. The important thing about a weblog is that you put your ideas and experiences down in writing. You work through your thoughts. You put them out there for people to ignore, criticize, or praise.</p>\n<p>You may have a lovely thing where you post links, images, funny videos, etc. <a href=\"http://therealadam.com/archive/2007/10/20/rejiggering-meets-build-versus-buy/\">Great, me too!</a> But I'm not talking about that. I'm talking about banging two hundred words or more together into a cohesive, intriguing idea.</p>\n<p><span class=\"caps\"><span class=\"caps\"><strong><span class=\"caps\">MAKE WORDS, NOT MARGINALLY USEFUL SOFTWARE SHUFFLING.</span></strong></span></span></p>\n",
				"date_published": "2010-07-12T13:12:59-07:00",
				"url": "https://therealadam.com/2010/07/12/adams-guide-to.html",
				"tags": ["Expanded ideas","writing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/07/11/michael-feathers-on.html",
				"title": "Michael Feathers on how code grows",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://michaelfeathers.typepad.com/michael_feathers_blog/2010/06/festering-code-bases-and-budding-code-bases.html\">Festering Code Bases and Budding Code Bases</a>:</p>\n<blockquote>Some teams produce what I call a festering code base. In a festering code base, the team changes the code primarily by adding code to existing methods and adding methods to existing classes. The results are predictable. Classes and methods grow malignantly, eventually becoming thousands of lines long.</blockquote>\n<blockquote>Better teams produce budding code bases. Developers create new classes and methods and delegate work outward. Periodically, they collapse structure back into a simpler form, but the dominant trend is to grow the code by creating new structure.</blockquote>\n<p>I'd never put much thought into <em>how </em>code bases grow in the past. Feathers has some interesting ideas here about the characteristics of good and not-so-good growth and how languages and tools might promote good growth.</p>\n",
				"date_published": "2010-07-11T12:53:36-07:00",
				"url": "https://therealadam.com/2010/07/11/michael-feathers-on.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/07/08/incremental-deployment-at.html",
				"title": "Incremental deployment at GitHub",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Over the past year, I've read a lot about how teams are deploying their software. I've known for a while that Google has the ability to roll out new code to a small percentage of their servers and ramp up the breadth of deployment if they like how the software is behaving.</p>\n\n<p>Lately, I'm starting to see more and more teams implement that sort of functionality. Rick Olson describes how GitHub implements it in <a href=\"http://github.com/blog/677-how-we-deploy-new-features\">How we deploy new features</a>, and includes links to how Forrst and Flickr do it as well. At Velocity, Paul Hammond explained <a href=\"http://www.paulhammond.org/2010/06/trunk/\">how to build an application-specific kind of version control into your app</a>.</p>\n\n<p>I'm a little surprised that few libraries have emerged for managing this. It would seem that, given all the excitement about continuous deployment, automated rollbacks, and incremental rollouts, someone would come up with something that they think is neat enough to share. I suspect that in fact, this is a really ugly, deeply application-specific sort of thing, no one likes to look at how they do it, and that's why there is plenty of <em>talk </em>about how to do it, but no libraries making it a simple thing.</p>\n",
				"date_published": "2010-07-08T08:18:30-07:00",
				"url": "https://therealadam.com/2010/07/08/incremental-deployment-at.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/06/28/the-cadence-and.html",
				"title": "The Cadence and Flow of Editing Programs",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I figured out why my trists with other editors often end up back at TextMate. It sounds a bit like this:</p>\n\n<p><em>Tap-tap-tap-tap-tap-tap; TAP; tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap; TAP; TAP; tap-tap-tap-tap-tap-tap; TAP.</em></p>\n\n<p>When I&#8217;ve used vi and its descendants, it sounds like this:</p>\n\n<p><em>Tap-tap-tap-tap-tap-tap; taptaptap; tap-tap-tap-tap-tap-tap; tapTAP TAP! tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap-tap. tapTAPTAPtapTAP TAP!</em></p>\n\n<p>And Emacs sounds like this:</p>\n\n<p><em>Tap-tap-tap-tap-tap-tap; tapTAPtapTAP. tap-tap-tap-tap-tap-tap;tap-tap-tap-tap-tap-tap;tap-tap-tap-tap-tap-tap; tapTAP TAP; TAP TAPtapTAPtapTAPTAP. tapTAPtapTAP!</em></p>\n\n<p>Lest you fear I&#8217;ve created some Ook-like language for describing shortcuts in any known editor, let me explain what&#8217;s going on here.</p>\n\n<h2 id=\"cadence\">Cadence</h2>\n\n<p>Emacs is, at it&#8217;s core, a Lisp machine with a text editing language wrapped around it. Every interaction with Emacs invokes a function. Handily enough, the function that adds an &#8220;a&#8221; to the file you&#8217;re editing is bound to the <code>a</code> key on your keyboard. Oddly enough, the function that writes the file you&#8217;re editing out to disk is bound to the combination of hitting <code>control</code> and <code>x</code> at the same time, followed by <code>control</code> and <code>s</code> at the same time. Getting them out of order matters. <code>Control-s</code> followed by <code>Control-x</code> does something entirely different.</p>\n\n<p>So when you use Emacs, you type a bit, and then you run some command. Maybe you save the file, or switch to editing another file, or go to peruse a directory. So you tap for a while and then you stop tapping, move your hands every so slightly to mash the control, or alt keys and then tap some other key, usually emphatically. The most commonly used key combinations end up being hit even more emphatically. Sit in a room full of developers using Emacs, listen closely; every once in a while, you&#8217;ll here everyone save almost simultaneously and go back to a furry of lower-case tapping. </p>\n\n<p>Vi is slightly different from Emacs in that it is built up from two Unix commands: one for editing single lines of text, and another for moving between said lines of text. Thus, the cadence of a vi user is slightly different. Staccato taps followed by a bang as they switch from line editing to line navigation; more staccato taps, this time oddly spaced as they move between lines and place the cursor to begin their next fury of editing; another burst of staccato text entry; a quick and emphatic tap to take them out of editing mode and then a quick but punctuated trio of taps as they invoke the command that saves the file out, a sequence of finger movements so ingrained in the vi users brain that it appears as more of a gesture than a triplet of discrete key presses.</p>\n\n<p>Here&#8217;s a project idea for pranksters: stand in a room full of people using vi and Emacs, listen for the really emphatic taps, and trip the room&#8217;s breaker right before they all finish their emphatic save commands. Cackle as chaos ensues.</p>\n\n<h2 id=\"the_space_between_the_taps\">The space between the taps</h2>\n\n<p>A roomful of vi-users, Emacs-users, and TextMate users is a homogeneous mess of clackity-clackity to the untrained ear. Most accomplished programmers are touch typists, so what you&#8217;re likely to hear is an undifferentiated stream of rapid-fire tapping. But if you&#8217;ve used these editors enough, and wasted enough time thinking about the aesthetics they represent, you can hear the differences in the punctuation as commands are invoked by arcane combinations and sequences of keystrokes.</p>\n\n<p>In Vi and Emacs, there is a concise sequence of keys you can mash to do a regular expression search, move down three lines, go to the second sentence on that line, and replace the word under the cursor with &#8220;bad-ass text editing programmer, do not offend&#8221;. It is, in part, this power that attracts, fascinates, and empowers their users.</p>\n\n<p>TextMate can do this, sure. But there is very little in the way of support from the editor to do it. You mostly have to put your eye on the piece of text you wish to edit and use some primitive motion keystrokes to get the cursor where you want it. Then you use those same keystrokes to highlight the text to replace, this time holding down a modifier key, then you type in the text you want. TextMate, compared to its programmers editor brethren, is a language of grunts and chuffs next to the sophisticated Latin or French of vi and Emacs.</p>\n\n<h2 id=\"flow\">Flow</h2>\n\n<p>TextMate is unsophisticated next to the extensibility and conceptual unity of Emacs, or the pure practicality of vim. So why do I keep coming back to it?</p>\n\n<p>It keeps me in flow.</p>\n\n<p>This is a very personal answer. I&#8217;m not saying you can&#8217;t achieve a flow-state with vi or Emacs. I&#8217;m saying that while I like the idea of those editors, understand the aesthetic, and enjoy watching skilled operators using them, I get lost in the punctuation when I use them. I either forget what punctuation I should use in some text editing scenario, or I have a nagging doubt that there is some <em>better</em> punctuation I could be using instead.</p>\n\n<p>If vi is about navigating lines and editing those lines; Emacs is about invoking Lisp functions on files containing text, then TextMate is about primitive but direct manipulation of the text in a file. There&#8217;s very little conceptual overhead. You don&#8217;t need to know how the editor is enhanced in order to understand how to operate it. You don&#8217;t need to know when to put yourself in different modes of operation to make things happen. You just think of what you want the text to look like, you move the cursor around and you type on the keyboard.</p>\n\n<p>It ain&#8217;t much, but I (often) call it home.</p>\n",
				"date_published": "2010-06-28T19:28:06-07:00",
				"url": "https://therealadam.com/2010/06/28/the-cadence-and.html",
				"tags": ["Uncategorized","on-editing-programs","editors"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/06/22/breaking-my-habits.html",
				"title": "Breaking My Habits For Editing Programs",
				"content_html": "<p>I&rsquo;m a Unix guy, by upbringing. My first formative experiences in software development were on an early, Linux 1.x version of Debian. I&rsquo;d used Windows, but always came back to Linux. When OS X got good enough around 10.2, I switched to something that didn&rsquo;t require so much tinkering, so I could make more useful stuff.</p>\n<p>Software development on Unix has skewed towards focusing on tools, languages, and text editors for quite some time. IDEs and browsers on Unix are a messy, foreign thing (just like everything else in Unix). Thus, I&rsquo;ve long favored the terminal-and-editor style of development.</p>\n<p>I&rsquo;ve decided that now is the time for me to try something different. I like text editors and directly manipulating text, but I can see why some people feel naked without an IDE. The ability to pop-up a level and make a more broad-stroked transformation to a program is appealing. Having code navigation and semantic awareness baked in has lots of potential.</p>\n<p>I&rsquo;ve probably said grumbly things about <!-- raw HTML omitted -->RubyMine<!-- raw HTML omitted --> in the past, but I think now is the time to give it a go. Worst thing that could happen is that I don&rsquo;t like it and I go back to the infinite tinkering of Emacs or the 85% perfect experience of TextMate.</p>\n<p>I&rsquo;ll let you know how it goes.</p>\n<!-- raw HTML omitted -->\n<p>I originally wrote that a few months ago, at the apex of my editor neurosis.</p>\n<p>I did give RubyMine a try, and I like some parts of it. It&rsquo;s code navigation is pretty nice, it does an admirable job of integrating with the unique ecosystem of tools that a Ruby developer uses to manage their environment, and it does an excellent job of grokking TDD with test/unit and RSpec. RubyMine is a step in the right direction. I suspect that if I had muscle memory for IntelliJ, it would be the way to go.</p>\n<p>But, I have muscle memory for TextMate and Emacs, and I have an affinity for being close to my tools. RubyMine felt one step disconnected from both my muscle memory and my tools. That&rsquo;s quite an accomplishment; most IDEs feel several steps removed the tools and seem to discourage developing finger-memory in favor of menu-memory. I&rsquo;ll give RubyMine another try in a year, probably, see how it&rsquo;s coming along. But in the mean time, it&rsquo;s great to see that there is a vendor out there tackling the challenge that is tools for Ruby.</p>\n",
				"content_text": "I'm a Unix guy, by upbringing. My first formative experiences in software development were on an early, Linux 1.x version of Debian. I'd used Windows, but always came back to Linux. When OS X got good enough around 10.2, I switched to something that didn't require so much tinkering, so I could make more useful stuff.\n\nSoftware development on Unix has skewed towards focusing on tools, languages, and text editors for quite some time. IDEs and browsers on Unix are a messy, foreign thing (just like everything else in Unix). Thus, I've long favored the terminal-and-editor style of development.\n\nI've decided that now is the time for me to try something different. I like text editors and directly manipulating text, but I can see why some people feel naked without an IDE. The ability to pop-up a level and make a more broad-stroked transformation to a program is appealing. Having code navigation and semantic awareness baked in has lots of potential.\n\nI've probably said grumbly things about <a href=\"http://www.jetbrains.com/ruby/index.html\">RubyMine</a> in the past, but I think now is the time to give it a go. Worst thing that could happen is that I don't like it and I go back to the infinite tinkering of Emacs or the 85% perfect experience of TextMate.\n\nI'll let you know how it goes.\n\n<hr />\n\nI originally wrote that a few months ago, at the apex of my editor neurosis.\n\nI did give RubyMine a try, and I like some parts of it. It's code navigation is pretty nice, it does an admirable job of integrating with the unique ecosystem of tools that a Ruby developer uses to manage their environment, and it does an excellent job of grokking TDD with test/unit and RSpec. RubyMine is a step in the right direction. I suspect that if I had muscle memory for IntelliJ, it would be the way to go.\n\nBut, I have muscle memory for TextMate and Emacs, and I have an affinity for being close to my tools. RubyMine felt one step disconnected from both my muscle memory and my tools. That's quite an accomplishment; most IDEs feel several steps removed the tools and seem to discourage developing finger-memory in favor of menu-memory. I'll give RubyMine another try in a year, probably, see how it's coming along. But in the mean time, it's great to see that there is a vendor out there tackling the challenge that is tools for Ruby.\n",
				"date_published": "2010-06-22T19:16:35-07:00",
				"url": "https://therealadam.com/2010/06/22/breaking-my-habits.html",
				"tags": ["Uncategorized","on-editing-programs","editors"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/06/16/a-rambling-regurgitated.html",
				"title": "A rambling, regurgitated thought on process",
				"content_html": "<p>Elevator pitch: I&rsquo;ve found that if you want to divert a productive team into an hour or two of semi-fruitless banter, ask how the team should use Git, Pivotal Tracker, and Capistrano to manage incoming work, verify it, and deploy it to production. In reality, you should ignore all the corner-cases and figure out what will enable you to push really small chunks of work with great frequency.</p>\n<p><!-- raw HTML omitted -->Ed. What follows isn&rsquo;t novel, but it was a useful change in perspective for me, so I decided to share.<!-- raw HTML omitted --></p>\n<p>I&rsquo;ve been thinking a bit about software processes lately. Despite great variation in telling you <!-- raw HTML omitted -->how<!-- raw HTML omitted --> to do so, most processes seem to focus on to do more stuff faster.</p>\n<p>Lately, the notion of doing less has a lot of interest. <!-- raw HTML omitted -->Lean startups<!-- raw HTML omitted --> are the new-new thing and <!-- raw HTML omitted -->Getting Real<!-- raw HTML omitted --> is the old new thing; both preach getting more done and delivering value by doing less and analyzing the results more.</p>\n<p>There are two kinds of &ldquo;do less&rdquo; a software developer can engage in. In the past I&rsquo;ve been a little too focused on how I can take on fewer responsibilities from other parties. Literally doing less by scoping down features, putting off decisions, and focusing on things that seem like they really matter. I sometimes feel like I&rsquo;ve become too eager to do less, making myself something of a cranky coder/slacker. But I digress</p>\n<p>Recently, I&rsquo;ve been trying to tackle doing less in my habits of creating software. How can I write less code to implement a feature, not in the minimalist sense, but in the &ldquo;how do I just get it to kinda work sense&rdquo;? How can I take less time between starting something and getting some form of it out in the wild? How can I make my code less coupled so there are fewer changes to make when I decide it needs to do something else? How can I make this less coupled to data storage so that putting it out requires less deployment effort? How can I make changes that are less likely to cause long-term regressions? How can I make it less effort to rollback bad changes?</p>\n<p>When I look through the lens of accomplishing more by doing less, a lot of popular software methodology seems like dead weight. Rather than trying to find a process that addresses every team member&rsquo;s own scars and affections, both perceived and imaginary, it seems most useful to imagine the smallest ruleset that won&rsquo;t result in uncontrollable entropy and put it into action. If something starts to hurt, imagine the simplest new rule and put it into play.</p>\n<p>The goal, as stated above, is to get to the point where you make really tiny, maybe imperceptible changes, and push them really frequently. Everything that stands in the way is the enemy.</p>\n",
				"content_text": "Elevator pitch: I've found that if you want to divert a productive team into an hour or two of semi-fruitless banter, ask how the team should use Git, Pivotal Tracker, and Capistrano to manage incoming work, verify it, and deploy it to production. In reality, you should ignore all the corner-cases and figure out what will enable you to push really small chunks of work with great frequency.\n\n<em>Ed. What follows isn't novel, but it was a useful change in perspective for me, so I decided to share.</em>\n\nI've been thinking a bit about software processes lately. Despite great variation in telling you <em>how</em> to do so, most processes seem to focus on to do more stuff faster.\n\nLately, the notion of doing less has a lot of interest. <a href=\"http://www.startuplessonslearned.com/\">Lean startups</a> are the new-new thing and <a href=\"http://gettingreal.37signals.com/\">Getting Real</a> is the old new thing; both preach getting more done and delivering value by doing less and analyzing the results more.\n\nThere are two kinds of \"do less\" a software developer can engage in. In the past I've been a little too focused on how I can take on fewer responsibilities from other parties. Literally doing less by scoping down features, putting off decisions, and focusing on things that seem like they really matter. I sometimes feel like I've become too eager to do less, making myself something of a cranky coder/slacker. But I digress\n\nRecently, I've been trying to tackle doing less in my habits of creating software. How can I write less code to implement a feature, not in the minimalist sense, but in the \"how do I just get it to kinda work sense\"? How can I take less time between starting something and getting some form of it out in the wild? How can I make my code less coupled so there are fewer changes to make when I decide it needs to do something else? How can I make this less coupled to data storage so that putting it out requires less deployment effort? How can I make changes that are less likely to cause long-term regressions? How can I make it less effort to rollback bad changes?\n\nWhen I look through the lens of accomplishing more by doing less, a lot of popular software methodology seems like dead weight. Rather than trying to find a process that addresses every team member's own scars and affections, both perceived and imaginary, it seems most useful to imagine the smallest ruleset that won't result in uncontrollable entropy and put it into action. If something starts to hurt, imagine the simplest new rule and put it into play.\n\nThe goal, as stated above, is to get to the point where you make really tiny, maybe imperceptible changes, and push them really frequently. Everything that stands in the way is the enemy.\n",
				"date_published": "2010-06-16T06:35:08-07:00",
				"url": "https://therealadam.com/2010/06/16/a-rambling-regurgitated.html",
				"tags": ["Uncategorized","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/06/12/rails-next-top.html",
				"title": "Rails\u0026#039; Next Top Model",
				"content_html": "<p>Of all the new and reimagined code in Rails 3, ActiveModel and ActiveRelation rank amongst what I find the most interesting. I&rsquo;m excited that they potentially lower the bar to implementing one&rsquo;s own data layer. If you&rsquo;ve got some custom backend or datastore, writing a nice API around it has previously been quite the endeavor. To get it working is one thing; to make it as pleasant to use for application programmers is another thing entirely. ActiveModel and ActiveRelation have been extracted from ActiveRecord and make the task of building one&rsquo;s own model layer far easier.</p>\n<p>My presentation for RailsConf 2010 focused on what ActiveModel and ActiveRelation provide and how one can use it to write cleaner code in domain models, how to make your models feel more like ActiveRecord objects, and how to use ActiveRelation to build your own persistence layers.</p>\n<p>I hope you find the slides educational. Further, I&rsquo;ve posted the examples on GitHub so you can play along at home. If you&rsquo;re particularly interested in ActiveRelation, I hope you&rsquo;ll <!-- raw HTML omitted -->find the examples useful<!-- raw HTML omitted --> as a starting point to using that library.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Of all the new and reimagined code in Rails 3, ActiveModel and ActiveRelation rank amongst what I find the most interesting. I'm excited that they potentially lower the bar to implementing one's own data layer. If you've got some custom backend or datastore, writing a nice API around it has previously been quite the endeavor. To get it working is one thing; to make it as pleasant to use for application programmers is another thing entirely. ActiveModel and ActiveRelation have been extracted from ActiveRecord and make the task of building one's own model layer far easier.\n\nMy presentation for RailsConf 2010 focused on what ActiveModel and ActiveRelation provide and how one can use it to write cleaner code in domain models, how to make your models feel more like ActiveRecord objects, and how to use ActiveRelation to build your own persistence layers.\n\nI hope you find the slides educational. Further, I've posted the examples on GitHub so you can play along at home. If you're particularly interested in ActiveRelation, I hope you'll <a href=\"http://github.com/therealadam/Presentations/tree/master/rails_next_top_model%2F\">find the examples useful</a> as a starting point to using that library.\n\n<div style=\"width:425px;\" id=\"__ss_4478065\"><strong><a href=\"http://www.slideshare.net/therealadam/rails-next-top-model\" title=\"Rails&#039; Next Top Model\">Rails&#039; Next Top Model</a></strong><a href=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=railsnexttopmodel-100611151635-phpapp02&#038;stripped_title=rails-next-top-model\">http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=railsnexttopmodel-100611151635-phpapp02&#038;stripped_title=rails-next-top-model</a><div style=\"padding:5px 0 12px;\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/therealadam\">Adam Keys</a>.</div></div>\n",
				"date_published": "2010-06-12T07:21:29-07:00",
				"url": "https://therealadam.com/2010/06/12/rails-next-top.html",
				"tags": ["Uncategorized","rails","presentation"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/06/11/make-more-awesome.html",
				"title": "Make More Awesome",
				"content_html": "<p>Over the past year, I&rsquo;ve been trying to create more stuff, some of which I&rsquo;d hope to turn out awesome. Largely this is an ongoing sort of thing. I try things, I learn a little, I keep at it. Some things I try work, others don&rsquo;t. I try to make a habit out of the things that have worked out well. I make a note of things that seem to help me get out of a funk when I&rsquo;m not making as much as I&rsquo;d like or having trouble putting in the hours I think are necessary to make cool stuff.</p>\n<p>I first distilled these ideas into a talk I did at RubyConf 2009 on having more fun while coding. But I didn&rsquo;t realize it at the time; I was just sharing some ideas about how to have fun. For me, one of the ways to have more fun is to make more time to have fun. But that&rsquo;s just the beginning of making more awesome. I found I had to make more time, <!-- raw HTML omitted -->and<!-- raw HTML omitted --> develop a bunch of other habits.</p>\n<p>For Big Design 2010, I honed the ideas, habits, and tricks I&rsquo;ve found useful to me into a presentation on how to get off the couch, start making more things, and make some of those things awesome. I hope you&rsquo;ll find it useful and perhaps start making lots of awesome stuff.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Over the past year, I've been trying to create more stuff, some of which I'd hope to turn out awesome. Largely this is an ongoing sort of thing. I try things, I learn a little, I keep at it. Some things I try work, others don't. I try to make a habit out of the things that have worked out well. I make a note of things that seem to help me get out of a funk when I'm not making as much as I'd like or having trouble putting in the hours I think are necessary to make cool stuff.\n\nI first distilled these ideas into a talk I did at RubyConf 2009 on having more fun while coding. But I didn't realize it at the time; I was just sharing some ideas about how to have fun. For me, one of the ways to have more fun is to make more time to have fun. But that's just the beginning of making more awesome. I found I had to make more time, <em>and</em> develop a bunch of other habits.\n\nFor Big Design 2010, I honed the ideas, habits, and tricks I've found useful to me into a presentation on how to get off the couch, start making more things, and make some of those things awesome. I hope you'll find it useful and perhaps start making lots of awesome stuff.\n\n<div style=\"width:425px;\" id=\"__ss_4478062\"><strong><a href=\"http://www.slideshare.net/therealadam/make-moreawesome\" title=\"Make More Awesome\">Make More Awesome</a></strong><a href=\"http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=makemoreawesome-100611151624-phpapp01&#038;stripped_title=make-moreawesome\">http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=makemoreawesome-100611151624-phpapp01&#038;stripped_title=make-moreawesome</a><div style=\"padding:5px 0 12px;\">View more <a href=\"http://www.slideshare.net/\">presentations</a> from <a href=\"http://www.slideshare.net/therealadam\">Adam Keys</a>.</div></div>\n",
				"date_published": "2010-06-11T13:23:50-07:00",
				"url": "https://therealadam.com/2010/06/11/make-more-awesome.html",
				"tags": ["Uncategorized","presentation"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/05/26/the-art-of.html",
				"title": "The art of making a useful todo list",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I have a tenuous relationship with todo lists. Rather than helping me focus on getting stuff done, they usually only give me something to tinker with and feel better about having slightly mitigated my procrastination.</p>\n\n<p>I&#8217;ve used Kinkless, OmniFocus, and TaskPaper. The latter is helping more, due somewhat to its more spartan nature. But mostly, I&#8217;m simply wiser and more pragmatic about the extent to which a todo list app can improve my life as the years have gone on.</p>\n\n<p>In that wisdom, I&#8217;ve eschewed working from my todo list much lately. Instead, I&#8217;ve just glanced at it a few times a week to make sure I&#8217;m not forgetting something crucial.</p>\n\n<p>For no particular reason, I went back to working from a list last weekend. To my surprise, it worked out for the better. Things got done, a feeling of accomplishment was achieved, stress levels were down, greater relaxation was had.</p>\n\n<p>I suspect this success was due to a confluence of factors:</p>\n\n<ul>\n<li>I made sure my list was minimally aspirational; everything on the list was something I could achieve in less than an hour</li>\n<li>The list was focused on what I need to accomplish; if something was nice-to-have, I did it in the rest times between working items on the list</li>\n<li>A little bit of novelty can&#8217;t hurt; working from a list after a few weeks not doing so is perhaps just different enough to yield temporary productivity gains</li>\n</ul>\n\n<p>All that said, I&#8217;m starting to think there&#8217;s an art to making one&#8217;s list of things to do on any given day. Something that is achievable, but moves the ball. Something not too aspirational, but worth doing. Fresh, but with some long-standing items that feel good to knock off.</p>\n\n<p>Perhaps a good todo list is equal parts excitement, tedium, and accomplishment.</p>\n",
				"date_published": "2010-05-26T07:02:12-07:00",
				"url": "https://therealadam.com/2010/05/26/the-art-of.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/05/23/a-personal-journey.html",
				"title": "A Personal Journey in Editing Programs",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Over the past year or so, I&#8217;ve spent a bit of time tinkering with text editors. It feels like I woke up one morning and was simply dissatisfied with what I was currently using. It certainly wasn&#8217;t disgust, because I largely like the tools I use. But I felt it was likely there were better tools out there, and that I should give them an honest try. The grass on the other side might be greener.</p>\n\n<p>So I went through liasons with VIM and a couple with Emacs. The first left me feeling disconnected, like I had ideas but I couldn&#8217;t even make them appear on the screen, let alone run. My experiences with Emacs are better, but have always felt somewhat awkward. I suspect that at some point, I could be a full-blown Emacs person, but right now, I&#8217;m just an aspirational Emacs guy.</p>\n\n<p>I&#8217;ve used a myriad of editors in my time. I started with <a href=\"http://www.jedsoft.org/jed/\">jed</a>, a small-ish Emacs clone, then graduated to full-on Emacs. By way of <a href=\"http://www.delorie.com/gnu/docs/emacs/viper.html\">viper</a>, I migrated to VIM. Then I picked up <a href=\"http://www.barebones.com/products/bbedit/index.html\">BBEdit</a>, because I wanted more direct manipulation of text, and less of a never-ending learning curve. I was pretty quick to jump on TextMate, seeing a great fusion of the Mac and Unix aesthetics. </p>\n\n<p>I still think TextMate is as close as it gets to an ideal situation. And yet, it falls short enough that I tinker with VIM and Emacs, two editors that can easily be labeled powerful but extremely lacking in the visual and conceptual aesthetics departments.</p>\n\n<p>I suspect my mismatch with most of these editors is due to something about my habits, the way I like to work with programs, and the kinds of programs I work with. Emacs&#8217; notions of major and minor modes doesn&#8217;t play well with markup files with three different languages embedded within. VIM is efficient for those who have internalized it and hostile to everyone else. TextMate is easy to get started with and pleasant to extend up to a point, but seems to have fallen victim to its creator&#8217;s perfectionism.</p>\n\n<p>For a long time, I&#8217;ve adhered to the philosophy that one should choose one text editor and learn as much about it as possible. Increasingly, I&#8217;m starting to think that there is no panacea, no \"one true editor\". TextMate is great for working on web apps and easy to extend. Emacs is really wonderful for functional programming languages, especially those with REPLs and languages that are LISP-shaped. And some kinds of development demand an environment more like Smalltalk browsers than text editors.</p>\n\n<p>My journey for editing bliss probably won&#8217;t end anytime soon. In the future, I suspect that it&#8217;s going to be a spectrum of tools depending on the work I&#8217;m doing. It could be that the days of personal text editing monoculture are over.</p>\n",
				"date_published": "2010-05-23T08:24:36-07:00",
				"url": "https://therealadam.com/2010/05/23/a-personal-journey.html",
				"tags": ["Expanded ideas","on-editing-programs","editors"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/05/12/a-brief-survey.html",
				"title": "A Brief Survey of the History of Editing Programs",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Software developers spend a lot of time working with code. Over the past half-century of doing so, we&#8217;ve invented a lot of mechanisms that make that task easier and reduce the amount of friction between an idea and a computer executing that idea.</p>\n\n<p>A quick review of the approaches to working with code reveal some areas where tool makers have devoted a lot of effort:</p>\n\n<ul>\n<li><strong>Editors</strong> &#8212; we&#8217;ve gone from paper tape to punch cards, from flipping switches on a panel to editing files one line at a time, and finally to the point where (most of us) work with one or more files by directly manipulating the text with a combination of keystrokes. When you get down to it, the experience of editing code in Emacs, TextMate, Visual Studio, or Eclipse are quite similar.</li>\n<li><strong>Environments</strong> &#8212; many software developers today use some kind of full-screen tool that puts a friendly face on all the tools they need to create, edit and deploy their software. These days, it is most commonly an IDE like Visual Studio or XCode. But way back in the day, Smalltalk people used a clever piece of technology called a browser, and it&#8217;s not too much of a stretch to call Emacs a Lisp browser.</li>\n<li><strong>Tools</strong> &#8212; we&#8217;ve come a long way in fifty years. We started writing machine code directly, then we grew assemblers, linkers, and compilers. Today, few developers will go through their career without using a debugger, profiler, lint tool, or applying an automated refactoring. There are a lot of development tasks that can be offloaded directly to the computer, leaving the programmer free to worry about important things like why anyone would ever choose three-space tabs.</li>\n</ul>\n\n<p>Finally, let&#8217;s not forget that the past half-century of software development has seen more than its fair share of programming languages. These languages express a myriad of ideas and the ones that combine them nicely and support their users well have left a lasting impression in the evolution of how we express our ideas so that computers can run them.</p>\n\n<p>It seems we are nearing an inflection point with regard to how we use tools to create programs. As the keyboard-and-mouse give way to the display-and-finger(s), there&#8217;s an opportunity to interact with and modify programs in new ways. I suspect that the future of editing programs has something to do with merging editors with environments and making the tools as pervasively used as typing is today.</p>\n",
				"date_published": "2010-05-12T04:44:00-07:00",
				"url": "https://therealadam.com/2010/05/12/a-brief-survey.html",
				"tags": ["Expanded ideas","on-editing-programs","editors"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/04/30/who-are-we.html",
				"title": "Who are we that make software?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>If you&rsquo;ve ever bikeshedded a design discussion or suggested how a feature might work, you&rsquo;re a hybrid. Ever refer to yourself as a specializing generalist? That&rsquo;s a hybrid.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>We who spend all of our time in front of a computer involved in the production of software are often quick to pigeon-hole ourselves. You probably self-classify as a developer or designer, maybe an engineer or artist if you got a college degree and think highly of it.</p>\n\n<p>But like many other things, it&#8217;s all messy now. I&#8217;d say I spend sixty percent of my time doing general &#8220;developer&#8221; stuff, twenty-five percent doing something one could approximately call &#8220;engineering&#8221;, and split the rest between marketing, business, and design. </p>\n\n<p>Does self-identifying with any one of these roles limit how we think or approach doing what we do?</p>\n\n<h2 id=\"sloppy_classifications\">Sloppy classifications</h2>\n\n<p>Consider these heuristics for placing people into categories:</p>\n\n<ul>\n<li>You build things that face other people</li>\n<li>You are making things that are constrained by rulesets defined largely by Newtonian mechanics</li>\n<li>You are making things where trade-offs between aesthetics and affordances are made</li>\n<li>Other people build things on top of your things</li>\n</ul>\n\n<p>None of these are useful at all. Were you to provide any one as a definition of what an engineer or designer is, you could probably get some heads nodding. So there&#8217;s <em>something appealing</em> about each of these statements. But none of them provide a pleasing definition or guideline for when you&#8217;re doing engineering, development, or design.</p>\n\n<p>Part of the answer to these classifications is that we all do everything. Developers strive to build software that fits within the aesthetic of the code around it or their own personal aesthetic. Designers operate within the limitations of human perception and cognition. Engineers are constrained by both of these but will throw either out in a heart beat to improve upon the efficiencies that are important to the project at hand.</p>\n\n<h2 id=\"we8217re_all_hybrids\">We&#8217;re all hybrids</h2>\n\n<p>The notion of developing designers and designing developers is by no means new. A few examples:</p>\n\n<p>But consider <a href=\"http://www.threeriversinstitute.org/blog/\" title=\"Three Rivers Institute\">Kent Beck</a>, renowned for his work building and thinking about the process of building software. He often talks about the design of software, considering trade-offs, aesthetics, and affordances just like a designer does. But he&#8217;s also been spending a lot of time recently iterating on businesses, trying out new ideas, and writing about the process and essence of converting an idea into a sustainable business.</p>\n\n<p>Or consider <a href=\"http://blog.mimeoverse.com/\" title=\"Mimeo in the Tumbleverse\">Shaun Inman</a>. He&#8217;s writing games as a one-man show. He splits his time between producing the music, drawing pixel art, and coding up collision detection systems. That&#8217;s a pretty neat cocktail of talents.</p>\n\nIf you've ever bikeshedded a design discussion or suggested how a feature might work, you're a hybrid. Ever refer to yourself as a specializing generalist? That's a hybrid.\n\n<h2 id=\"directed_thought\">Directed thought</h2>\n\n<p>If you&#8217;ve self-classified one way or the other, there are little things you might do that have large effects on your thinking. You socialize with those who are like classified, use the tools of that classification, and concern yourself with the classic problems that consume those working in your area of specialization. </p>\n\n<p>If you&#8217;re not careful, you could box yourself in too much, become too specialized. While there are opportunities for well-chosen, tightly-focused specializations, they are few and far between. Specializing generalists are the order of the day.</p>\n\n<p>Where do we get if we acknowledge that we&#8217;re all hybrids now? Suppose you&#8217;re aiming for a balance of sixty percent developer, twenty percent engineer, and twenty percent designer. Is it worth going whole-hog learning Emacs or Photoshop? Or is it better to learn less-capable but lower learning-curve tools like TextMate and Acorn? Should such a person concern themselves with the details of brand design and the implementation of persistent data structures, or is it more important to grasp those topics in a conversational manner?</p>\n\n<p>Is it a better use of Shaun Inman&#8217;s time to dissect a Mahler symphony, do an expansive study of pixel art, or review the mechanisms Quake III used for detecting collisions? Is it a better use of Kent Beck&#8217;s time to build software and write about that process, to talk to people and integrate their problems into his way of developing software, or iterate on business ideas and share those experiences?</p>\n\n<h2>Here's the motivational part</h2>\n\n<p>So now that all of this is forehead-smackingly clear (right?!), where do we go from here? Personally, I&#8217;m using the idea to guide how much effort I put into teaching myself new tricks. I probably won&#8217;t go on a six-month algorithms kick anytime soon, but I might spend six months learning the pros and cons of various database systems or application frameworks. I&#8217;d love to spend a month just tinkering with typography, color, layout, and other visual design topics. I probably won&#8217;t sweat it if Emacs or Photoshop don&#8217;t integrate into my daily work too well, or prove impenetrable to my mind, since those tools imply workflows that aren&#8217;t top priority to me.</p>\n\n<p>But that&#8217;s me; where should <em>you</em> go? If you don&#8217;t already have a good idea of what kind of hybrid you are, start noting how much time you spend on various sorts of tasks and think about whether you&#8217;d like to do more or less of them. Then, start taking action to realize a course correction.</p>\n\n<p>You can be whatever kind of hybrid developer you want, it&#8217;s just a matter of putting in the time and effort.</p>\n",
				"date_published": "2010-04-30T10:36:45-07:00",
				"url": "https://therealadam.com/2010/04/30/who-are-we.html",
				"tags": ["Expanded ideas","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/04/26/those-who-think.html",
				"title": "Those who think with their fingers",
				"content_html": "<p>In the past couple of years, I’ve discovered an interesting way to think about programming problems. I try to solve them while I’m away from the computer. Talking through a program, trying to hold all the abstractions in my head, thinking about ways to re-arrange the code to solve the problem at hand whilst walking. The key to this is that I’m activating different parts of my brain to try and solve the problem. We literally think differently when we talk than when we write or type. Sometimes, the notion you need is locked up in other parts of your brain, just waiting for you to activate them.[1]</p>\n<p>But sometimes, when I’m doing this thinking, there is something I really miss: the feel of the keyboard under my fingers and the staccato of typing. If there’s an analog to “I love the smell of napalm in the morning”, it’s “I love the sound of spring-loaded keys making codes”.</p>\n<p>With the release of the iPad, it’s quite likely that a large percentage of the population can start to eschew the traditional keyboard and pointer that have served them in such a mediocre fashion for so long. On the other hand, you can take my keyboard from my cold dead hands. I really like typing, I’m pretty good at it, and I feel like I get a lot done, pretty quickly, when I’m typing.</p>\n<p>Last year, I decided I would give other text editors a try. I stepped out from my TextMate happy place to try <!-- raw HTML omitted -->VIM<!-- raw HTML omitted -->. I knew this part of the experiment wasn’t going to work because when I felt like I’d gone through enough reading, tutorials and re-learning of <!-- raw HTML omitted -->VIM<!-- raw HTML omitted -->, I sat down to tap out some code. And…nothing. I felt like I was operating the editor instead of letting the code flow from my brain, through my fingertips, onto the display. It was as if I had to operate through a secondary device in order to produce code.</p>\n<p>Sometimes it seems that developers think with their fingers. I’m not sure what the future of that is. We’ve created environments for programming that are highly optimized for using ten fingers nearly simultaneously. How will that translate to new devices that focus on direct manipulation with at most two or three fingers at a time. Will new input mechanisms like orientation and acceleration take up the slack?</p>\n<p>Will we finally let go off the editor-compiler-runtime triumvirate? Attempts to get us out of this rut in the past have proven to be folly. I’m hoping this time around the externalities at the root of past false starts are identified and the useful essence is extracted into something really compelling.</p>\n<p>In the mean time, it’s going to be fun trying the different ways to code on an iPad as designers and developers try new ways to make machines do our bidding.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "In the past couple of years, I’ve discovered an interesting way to think about programming problems. I try to solve them while I’m away from the computer. Talking through a program, trying to hold all the abstractions in my head, thinking about ways to re-arrange the code to solve the problem at hand whilst walking. The key to this is that I’m activating different parts of my brain to try and solve the problem. We literally think differently when we talk than when we write or type. Sometimes, the notion you need is locked up in other parts of your brain, just waiting for you to activate them.[1]\n\nBut sometimes, when I’m doing this thinking, there is something I really miss: the feel of the keyboard under my fingers and the staccato of typing. If there’s an analog to “I love the smell of napalm in the morning”, it’s “I love the sound of spring-loaded keys making codes”.\n\nWith the release of the iPad, it’s quite likely that a large percentage of the population can start to eschew the traditional keyboard and pointer that have served them in such a mediocre fashion for so long. On the other hand, you can take my keyboard from my cold dead hands. I really like typing, I’m pretty good at it, and I feel like I get a lot done, pretty quickly, when I’m typing.\n\nLast year, I decided I would give other text editors a try. I stepped out from my TextMate happy place to try <span class=\"caps\">VIM</span>. I knew this part of the experiment wasn’t going to work because when I felt like I’d gone through enough reading, tutorials and re-learning of <span class=\"caps\">VIM</span>, I sat down to tap out some code. And…nothing. I felt like I was operating the editor instead of letting the code flow from my brain, through my fingertips, onto the display. It was as if I had to operate through a secondary device in order to produce code.\n\nSometimes it seems that developers think with their fingers. I’m not sure what the future of that is. We’ve created environments for programming that are highly optimized for using ten fingers nearly simultaneously. How will that translate to new devices that focus on direct manipulation with at most two or three fingers at a time. Will new input mechanisms like orientation and acceleration take up the slack?\n\nWill we finally let go off the editor-compiler-runtime triumvirate? Attempts to get us out of this rut in the past have proven to be folly. I’m hoping this time around the externalities at the root of past false starts are identified and the useful essence is extracted into something really compelling.\n\nIn the mean time, it’s going to be fun trying the different ways to code on an iPad as designers and developers try new ways to make machines do our bidding.\n<p id=\"fn1\"><sup>1</sup> If this intrigues you, read Andy Hunt’s <a href=\"http://pragprog.com/titles/ahptl/pragmatic-thinking-and-learning\"><em>Pragmatic Thinking and Learning</em></a> it’s excellent!</p>\n",
				"date_published": "2010-04-26T19:36:37-07:00",
				"url": "https://therealadam.com/2010/04/26/those-who-think.html",
				"tags": ["Expanded ideas","on-editing-programs","touch","typing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/03/29/kindly-cogs-in.html",
				"title": "Kindly cogs in unpleasant machines",
				"content_html": "<p>Some of the most villified companies are poorly regarded because of the way they treat their own customers. Think about people complaining about AT&amp;T&rsquo;s service in New York City or people put on hold for hours by their electric company during a power disruption. Instead of treating these problems as real, telephone and electrical companies treat them as items in a queue to be dealt with as quickly as possible.</p>\n<p>And thus, systems are set up that put a premium on throughput. Rewards are given to those who prevent customers from taking the time of the real experts who might fix a problem. Glib voice menus serve as a layer of indirection before you even reach a human. Service disruptions often bear a message tantamount to saying &ldquo;we know we are not giving you the service we promised, buzz off and wait until we manage to fix it.&rdquo;</p>\n<p>Despite all this, sometimes you come upon a real jewel. Someone who really helps you, who cares about what&rsquo;s going on. That special person who doesn&rsquo;t care so much about their average call time, but who takes the time to get <em>you</em> to a happy place.</p>\n<p>These are good actors working within a rotten system;  kindly cogs in a vicious machine. I could call up AT&amp;T and talk to any number of nice, well-meaning and empathetic people. Sometimes they are empowered and can fix the problem I face. Just as frequently, they want to help but the system they operate in prevents them from doing so, either because it would take too much time or because it is deemed too expensive to put the decision in the hands of those answering the phones.</p>\n<p>When I describe them as cogs, it&rsquo;s almost literal. Though manufacturing in the US is in serious decline, manufacturing-style management is not. Managers routinely and without irony describe people they might hire as &ldquo;resources&rdquo; that they can &ldquo;utilize&rdquo;. If there were a machine that could pop out customers whose problems had been resolved, managers would &ldquo;utilize&rdquo; those &ldquo;resources&rdquo; in the same way. Indeed, the majority of information systems attempt to do just this.</p>\n<p>My point is that we regard a company like AT&amp;T, Microsoft, Walmart, or Coca-Cola as a homogenous thing with its own will, priorities, and personality. But companies aren&rsquo;t homogenous, because people aren&rsquo;t.</p>\n<p><!-- raw HTML omitted -->Here&rsquo;s to those kindly cogs. Thanks for making our interactions with these unpleasant behemoths just a little less daunting.<!-- raw HTML omitted --></p>\n",
				"content_text": "Some of the most villified companies are poorly regarded because of the way they treat their own customers. Think about people complaining about AT&amp;T's service in New York City or people put on hold for hours by their electric company during a power disruption. Instead of treating these problems as real, telephone and electrical companies treat them as items in a queue to be dealt with as quickly as possible.\n\nAnd thus, systems are set up that put a premium on throughput. Rewards are given to those who prevent customers from taking the time of the real experts who might fix a problem. Glib voice menus serve as a layer of indirection before you even reach a human. Service disruptions often bear a message tantamount to saying \"we know we are not giving you the service we promised, buzz off and wait until we manage to fix it.\"\n\nDespite all this, sometimes you come upon a real jewel. Someone who really helps you, who cares about what's going on. That special person who doesn't care so much about their average call time, but who takes the time to get _you_ to a happy place.\n\nThese are good actors working within a rotten system;  kindly cogs in a vicious machine. I could call up AT&amp;T and talk to any number of nice, well-meaning and empathetic people. Sometimes they are empowered and can fix the problem I face. Just as frequently, they want to help but the system they operate in prevents them from doing so, either because it would take too much time or because it is deemed too expensive to put the decision in the hands of those answering the phones.\n\nWhen I describe them as cogs, it's almost literal. Though manufacturing in the US is in serious decline, manufacturing-style management is not. Managers routinely and without irony describe people they might hire as \"resources\" that they can \"utilize\". If there were a machine that could pop out customers whose problems had been resolved, managers would \"utilize\" those \"resources\" in the same way. Indeed, the majority of information systems attempt to do just this.\n\nMy point is that we regard a company like AT&amp;T, Microsoft, Walmart, or Coca-Cola as a homogenous thing with its own will, priorities, and personality. But companies aren't homogenous, because people aren't.\n\n<strong>Here's to those kindly cogs. Thanks for making our interactions with these unpleasant behemoths just a little less daunting.</strong>\n",
				"date_published": "2010-03-29T19:37:55-07:00",
				"url": "https://therealadam.com/2010/03/29/kindly-cogs-in.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/03/02/a-quick-rvm.html",
				"title": "A quick RVM rundown",
				"content_html": "<p><!-- raw HTML omitted -->(It so happens I&rsquo;m presenting this at <!-- raw HTML omitted -->Dallas.rb<!-- raw HTML omitted --> tonight. Hopefully it can also be useful to those out in internetland too.)<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<em>(It so happens I'm presenting this at <a href=\"http://dallasrb.org\">Dallas.rb</a> tonight. Hopefully it can also be useful to those out in internetland too.)</em>\n<p>RVM gives you three things:</p>\n\n<ul>\n<li>an easy way to use multiple versions of multiple Ruby VMs</li>\n<li>the ability to manage multiple indpendent sets of gems</li>\n<li>more sanity</li>\n</ul>\n\n\n<p>First, let's <a href=\"http://rvm.beginrescueend.com/rvm/install/\">install RVM</a>:</p>\n\n<ul>\n<li><code>gem install rvm</code></li>\n<li><code>rvm-install</code></li>\n<li>follow the directions to integrate with your shell of choice</li>\n</ul>\n\n\n<p>Now, let's install some Rubies:</p>\n\n<ul>\n<li><code>rvm list known</code> will show us all the <em>released</em> Rubies that we can\ninstall <a href=\"http://rvm.beginrescueend.com/rubies/list/\">(more on list)</a></li>\n<li><code>rvm list rubies</code> will show which Rubies we have locally installed</li>\n<li><code>rvm install ree-1.8.7</code> gives me the latest release of the 1.8.7\nbranch of Ruby Enterprise Edition</li>\n<li><code>rvm install jruby</code> will give me the default release for JRuby</li>\n<li><code>rvm use jruby</code> will switch to JRuby</li>\n<li><code>rvm use ree</code> will give me Ruby Enterprise Edition</li>\n<li><code>rvm use ruby-1.8.6</code> will give me an old and familiar friend</li>\n<li><code>rvm use system</code> will put me back wherever my operating system left\nme</li>\n</ul>\n\n\n<p>The other trick that RVM gives us is the ability to switch between\ndifferent sets of installed gems:</p>\n\n<ul>\n<li>Each Ruby VM (JRuby, Ruby 1.9, Ruby 1.8, REE) has its own set of\ngems. This is a fact of life, due to differing APIs and, you know,\nunderlying languages.</li>\n<li><code>rvm use ruby-1.9.1</code> gives you the default Ruby 1.9 <a href=\"http://rvm.beginrescueend.com/gemsets/basics/\">gemset</a></li>\n<li><code>rvm use ruby-1.9.1%acme</code> gives you the gemset for your work with\nAcme Corp <a href=\"http://rvm.beginrescueend.com/gemsets/using/\">(more on using gemsets)</a></li>\n<li><code>rvm use ruby-1.9.1%wayne</code> gives you the gemset for your work with\nWayne Enterprises</li>\n<li><code>rvm use ree%awesome</code> gives you the gemset for your awesome app</li>\n<li>You can export and import gemsets. This can come in handy to bring\nnew people onboard. No longer will they have to sheepishly install\ngems on their first day as they work through dependencies you long\nsince forgot about.</li>\n</ul>\n\n\n<p>Some other handy things to peruse:</p>\n\n<ul>\n<li><a href=\"http://rvm.beginrescueend.com/workflow/examples/\">Some workflow examples</a></li>\n<li><a href=\"http://rvm.beginrescueend.com/rvm/cli/\">CLI options</a></li>\n</ul>\n\n\n<p>I also promised you some extra sanity:</p>\n\n<ul>\n<li>RVM knows how to compile things, put Rubygems and rake in place, even apply patches and pull from specific tags. You can do more important things, like watch The View or read an eleven part series on pre-draft analysis for the Cowboys.</li>\n<li>RVM lets you isolate different applications you're working on. Got one app that doesn't play nice with Rails 2.x installed? No problem, create a gem environment for that! Stuck in the spider-web of Merb dependencies? Isolate it in its own environment.</li>\n<li>RVM makes multi-platform testing and benchmarking easy. You can easily run your test suite or performance gizmo on whatever Rubies you have installed.</li>\n<li>RVM makes it easy to tinker with esoteric patchlevels and implementations. For instance, feel free to tinker with MagLev or the mput branch of MRI.</li>\n</ul>\n\n\n<p>A couple other things RVM tastes great with:</p>\n\n<ul>\n<li>Using homebrew to manage packages instead of MacPorts</li>\n<li>Not using <code>sudo</code> to install your gems</li>\n<li>Managing your dotfiles on GitHub</li>\n</ul>\n",
				"date_published": "2010-03-02T20:09:58-07:00",
				"url": "https://therealadam.com/2010/03/02/a-quick-rvm.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/02/18/the-imperfection-of.html",
				"title": "The imperfection of our tools",
				"content_html": "<p>I enjoy a well-crafted application. I place a high value on attention to detail, have opinions on what design elements make an application work, and try to empathize with the users of applications I&rsquo;m involved in creating. Applications with a good aesthetic, a few novel but effective design decisions, and sensible workflow find themselves in my Mac&rsquo;s dock. Those that don&rsquo;t, do not.</p>\n<p>The applications I observe fellow creators using to create often don&rsquo;t fit into their environment. They don&rsquo;t fit into the native look-and-feel. They ignore important idioms. Their metaphors are imperfect, the conceptual edges left unfinished.</p>\n<p>In part I notice this because as creators we tend to live in a few different applications, and time reveals most shortcomings. But in part, I notice this because the applications are in fact flawed. Flawed to the point, that you would think given my opening words, that I would refuse to use them. And indeed, I refuse to use many of the applications that others find completely acceptable for making the same kinds of things I do.</p>\n<p>Increasingly, it seems the applications that people who create things live in offer a disjoint user experience. I&rsquo;m thinking of visual people living in Photoshop or Illustrator or developers living in Emacs or Terminal.app. We use these applications because they best allow us to make what we want and get in our way only a little bit. But, it&rsquo;s a tenuous relationship at best.</p>\n<p>What&rsquo;s this say about what we&rsquo;re doing and the boundaries that we operate along? Would we accept the same kinds of shortcomings in say, a calendar application or a clock widget, if those were central to our workflow? That is, is there something about the creative process that leads us to accept sub-perfect tools? Is it inevitable that someone seeking to make new things will find their tools imperfect? Is the quest for ever-more perfect tools part of how we grow as makers?</p>\n<p>I hate closing with a bunch of questions, but this piece is but an imperfect tool for discovering an idea.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted -->Ed.<!-- raw HTML omitted --> Closing could use some work.<!-- raw HTML omitted --></p>\n",
				"content_text": "I enjoy a well-crafted application. I place a high value on attention to detail, have opinions on what design elements make an application work, and try to empathize with the users of applications I'm involved in creating. Applications with a good aesthetic, a few novel but effective design decisions, and sensible workflow find themselves in my Mac's dock. Those that don't, do not.\n\nThe applications I observe fellow creators using to create often don't fit into their environment. They don't fit into the native look-and-feel. They ignore important idioms. Their metaphors are imperfect, the conceptual edges left unfinished.\n\nIn part I notice this because as creators we tend to live in a few different applications, and time reveals most shortcomings. But in part, I notice this because the applications are in fact flawed. Flawed to the point, that you would think given my opening words, that I would refuse to use them. And indeed, I refuse to use many of the applications that others find completely acceptable for making the same kinds of things I do.\n\nIncreasingly, it seems the applications that people who create things live in offer a disjoint user experience. I'm thinking of visual people living in Photoshop or Illustrator or developers living in Emacs or Terminal.app. We use these applications because they best allow us to make what we want and get in our way only a little bit. But, it's a tenuous relationship at best.\n\nWhat's this say about what we're doing and the boundaries that we operate along? Would we accept the same kinds of shortcomings in say, a calendar application or a clock widget, if those were central to our workflow? That is, is there something about the creative process that leads us to accept sub-perfect tools? Is it inevitable that someone seeking to make new things will find their tools imperfect? Is the quest for ever-more perfect tools part of how we grow as makers?\n\nI hate closing with a bunch of questions, but this piece is but an imperfect tool for discovering an idea.\n\n<em><strong>Ed.</strong> Closing could use some work.</em>\n",
				"date_published": "2010-02-18T18:58:23-07:00",
				"url": "https://therealadam.com/2010/02/18/the-imperfection-of.html",
				"tags": ["Uncategorized","tools"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/02/12/warning-politics.html",
				"title": "Warning: politics",
				"content_html": "<p>Embedded within the migraine that is American politics are some very interesting ideas. Economics, markets, ethics, freedom, equality, education, transportation, and security are all intriguing topics. Recently, I figured out that the headache comes not from people or trying to make the ideas work, but in politics. Getting a majority of the people to agree on anything is a giant pain of coordination. When you throw in fearmongering, power struggles, critically wounded media, and the fact most people would rather not think deeply about any of this you end up with the major downer that we face today.</p>\n<p>All that said, here are some pithy one-liners about politics:</p>\n<ul>\n<li>\n<p>If I were part of the Democratic leadership, I&rsquo;d be wondering how you take the high road in a race to the bottom. And win.</p>\n</li>\n<li>\n<p>If I were a Republican, I&rsquo;d be wondering how to dig myself out of this giant hole I made by winning a race to the bottom.</p>\n</li>\n<li>\n<p>If I were a libertarian, I&rsquo;d be wondering how to convince people that the Tea Party is different from what I believe in.</p>\n</li>\n<li>\n<p>If I were a leader of the Tea Party, I&rsquo;d be wondering what I&rsquo;m going to do when someone who claims to be a part of the Tea Party blows up a building or goes nuts with an assault rifle.</p>\n</li>\n<li>\n<p>If I were a politician, I&rsquo;d wonder how much I have to compromise my values and what I really wanted to accomplish but still get enough votes to keep my job.</p>\n</li>\n<li>\n<p>If I were skeptical of climate change due to human activity, I&rsquo;d be wondering how I&rsquo;m going to find a spaceship, because this line of reasoning leads to the conclusion that the Earth is about to become very inhospitable.</p>\n</li>\n<li>\n<p>If I were a nihilist, I&rsquo;d wonder&hellip;nothing.</p>\n</li>\n</ul>\n<p>There, have I offended everyone?</p>\n",
				"content_text": "Embedded within the migraine that is American politics are some very interesting ideas. Economics, markets, ethics, freedom, equality, education, transportation, and security are all intriguing topics. Recently, I figured out that the headache comes not from people or trying to make the ideas work, but in politics. Getting a majority of the people to agree on anything is a giant pain of coordination. When you throw in fearmongering, power struggles, critically wounded media, and the fact most people would rather not think deeply about any of this you end up with the major downer that we face today.\n\nAll that said, here are some pithy one-liners about politics:\n\n* If I were part of the Democratic leadership, I'd be wondering how you take the high road in a race to the bottom. And win.\n\n* If I were a Republican, I'd be wondering how to dig myself out of this giant hole I made by winning a race to the bottom.\n\n* If I were a libertarian, I'd be wondering how to convince people that the Tea Party is different from what I believe in.\n\n* If I were a leader of the Tea Party, I'd be wondering what I'm going to do when someone who claims to be a part of the Tea Party blows up a building or goes nuts with an assault rifle.\n\n* If I were a politician, I'd wonder how much I have to compromise my values and what I really wanted to accomplish but still get enough votes to keep my job.\n\n* If I were skeptical of climate change due to human activity, I'd be wondering how I'm going to find a spaceship, because this line of reasoning leads to the conclusion that the Earth is about to become very inhospitable.\n\n* If I were a nihilist, I'd wonder...nothing.\n\nThere, have I offended everyone?\n",
				"date_published": "2010-02-12T14:36:26-07:00",
				"url": "https://therealadam.com/2010/02/12/warning-politics.html",
				"tags": ["Expanded ideas","The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2010/01/19/goodbye-gutbombs.html",
				"title": "Goodbye, gutbombs",
				"content_html": "<p>Last March my wife and I joined a gym, started working out with a trainer, started trying to eat better, and thusly set out to improve our health. Amazingly, we&rsquo;ve stuck with it (after two previous failed attempts in years past) and are both in much better shape than we&rsquo;ve been in for quite some time.</p>\n<p>One of my personal reasons for doing this was what I&rsquo;d been hearing about the correlation between working out, eating better, and brain function. Lots of people who read way more into this than I do had been saying that if you eat better and exercise more, your brain will work better.</p>\n<p>I&rsquo;ve noticed this first hand. The day after my first serious run, my mind was in overdrive. I had lots of great ideas, I worked through them quickly, and I didn&rsquo;t procrastinate when it came to exploring or realizing them.</p>\n<p>Today, I had the opposite experience. I went out for a rather large Tex-Mex lunch. Lots of starch. I got home and took a nap, as is often my wont. Usually I wake up ready to get back to work after my naps. But today was different. My brain was thoroughly sluggish. My body&rsquo;s energy was going towards digestion, not thought.</p>\n<p>I guess this is something of a break-up letter for me. You see, I&rsquo;ve long enjoyed the large, starchy lunch. But, I&rsquo;m not sure I can put up with it anymore. If its a choice between starchy, tasty lunches and a high-functioning brain, I&rsquo;m going to have to choose my brain.</p>\n<p>Sorry, lunch-time gutbombs. We had a good run, but I&rsquo;m going to have to quit you for a while.</p>\n",
				"content_text": "Last March my wife and I joined a gym, started working out with a trainer, started trying to eat better, and thusly set out to improve our health. Amazingly, we've stuck with it (after two previous failed attempts in years past) and are both in much better shape than we've been in for quite some time.\n\nOne of my personal reasons for doing this was what I'd been hearing about the correlation between working out, eating better, and brain function. Lots of people who read way more into this than I do had been saying that if you eat better and exercise more, your brain will work better.\n\nI've noticed this first hand. The day after my first serious run, my mind was in overdrive. I had lots of great ideas, I worked through them quickly, and I didn't procrastinate when it came to exploring or realizing them.\n\nToday, I had the opposite experience. I went out for a rather large Tex-Mex lunch. Lots of starch. I got home and took a nap, as is often my wont. Usually I wake up ready to get back to work after my naps. But today was different. My brain was thoroughly sluggish. My body's energy was going towards digestion, not thought.\n\nI guess this is something of a break-up letter for me. You see, I've long enjoyed the large, starchy lunch. But, I'm not sure I can put up with it anymore. If its a choice between starchy, tasty lunches and a high-functioning brain, I'm going to have to choose my brain.\n\nSorry, lunch-time gutbombs. We had a good run, but I'm going to have to quit you for a while.\n",
				"date_published": "2010-01-19T15:59:50-07:00",
				"url": "https://therealadam.com/2010/01/19/goodbye-gutbombs.html",
				"tags": ["Expanded ideas","brains"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/12/22/give-attributemapper-a.html",
				"title": "Give attribute_mapper a try",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>(For the impatient: <a href=\"http://gemcutter.org/gems/attribute_mapper\">skip directly to the `attribute_mapper` gem</a>.)</p>\n\n\n<p>In the past couple months, I&#8217;ve worked on two different projects that needed something like an enumeration, but in their data model. Given the ActiveRecord hammer, they opted to represent the enumeration as a has-many relationship and use a separate table to represent the actual enumeration values.</p>\n\n<h3 id=\"to_a_man_with_an_orm_everything_looks_like_a_model\">To a man with an ORM, everything looks like a model</h3>\n\n<p>So, their code ended up looking something like this:</p>\n\n<pre>class Post &lt; ActiveRecord::Base\n\n  belongs_to :status\n\nend\n\nclass Status &lt; ActiveRecord::Base\n\n  has_many :tickets\n\nend\n</pre>\n\n<p>From there, the <code>statuses</code> table is populated either from a migration or by seeding the data. Either way, they end up with something like this:</p>\n\n<pre>\n# Supposing statuses has a name column\nStatus.create(:name =&gt; 'draft')\nStatus.create(:name =&gt; 'reviewed')\nStatus.create(:name =&gt; 'published')\n</pre>\n\n<p>With that in place, they can fiddle with posts as such:</p>\n\n<pre>\npost.status = Status.find_by_name('draft')\npost.status.name # =&gt; 'draft'\n</pre>\n\n<p>It gets the job done, sure. But, it adds a join to a lot of queries and abuses ActiveRecord. Luckily&#8230;</p>\n\n<h3 id=\"i_happen_to_know_of_a_better_way\">I happen to know of a better way</h3>\n\n<p>If what you really need is an enumeration, there&#8217;s no reason to throw in another table. You can just store the enumeration values as integers in a database column and then map those back to human-friendly labels in your code.</p>\n\n<p>Before I started at FiveRuns, <a href=\"http://project.ioni.st/\" title=\"Projectionist: A tumblelog\">Marcel Molina</a> and <a href=\"http://twitter.com/noradio\" title=\"\">Bruce Williams</a> wrote a plugin that does just this. I extracted it and here we are. It&#8217;s called <a href=\"http://github.com/therealadam/attribute_mapper/\"><code>attribute_mapper</code></a>, and it goes a little something like this:</p>\n\n<pre>\nclass Post  {\n    :draft =&gt; 1,\n    :reviewed =&gt; 2,\n    :published =&gt; 3\n  }\nend\n</pre>\n\n<p>See, no extra table, no need to populate the table, and no extra model. Now, fiddling with posts goes like this:</p>\n\n<pre>\npost.status = :draft\npost.status # =&gt; :draft\npost.read_attribute(:status) # =&gt; 1\n</pre>\n\n<p>Further, we can poke the enumeration directly like so:</p>\n\n<pre>\nPost.statuses # =&gt; { :draft =&gt; 1, :reviewed =&gt; 2, :published =&gt; 3 }\nPost.statuses.keys # =&gt; [:draft, :reviewed, :published]\n</pre>\n\n<p>Pretty handy, friend.</p>\n\n<h2 id=\"hey_that_looks_familiar\">Hey, that looks familiar</h2>\n\n<p>If you&#8217;ve read <a href=\"http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes\" title=\"The Pragmatic Bookshelf | Advanced Rails Recipes\"><em>Advanced Rails Recipes</em></a>, you may find this eerily familiar. In fact, recipe #61, &#8220;Look Up Constant Data Efficiently&#8221; tackles a similar problem. And in fact, I&#8217;m migrating a project away from that approach. Well, partially. I&#8217;m leaving two models in place where the &#8220;constant&#8221; model, <code>Status</code> in this case, has actual code on it; that sorta makes sense, though I&#8217;m hoping to find a better way.</p>\n\n<p>But, if you don&#8217;t need real behavior on your constants, <a href=\"http://github.com/therealadam/attribute_mapper/\"><code>attribute_mapper</code>\n</a> is ready to make your domain model slightly simpler.</p>\n",
				"date_published": "2009-12-22T18:25:20-07:00",
				"url": "https://therealadam.com/2009/12/22/give-attributemapper-a.html",
				"tags": ["Uncategorized","ruby","tech:activerecord"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/12/08/just-for-fun.html",
				"title": "Just For Fun",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>This year was my fourth <a href=\"http://rubyconf.org\">RubyConf</a>. I&#8217;ve always come away from RubyConf energized and inspired. But, I&#8217;ve yet to follow through on that in a way I found satisfying. I have a feeling I&#8217;m not alone in that camp.</p>\n\n<p>This was the first year I&#8217;ve given a presentation at RubyConf. At first, I had intended to use this watershed-for-me opportunity to ask whether Ruby was still fun. There&#8217;s been a number of &#8220;drama moments&#8221; since my first RubyConf; I thought it might be worth getting back to my early days of coding with Ruby, when I was exploring and having a great time turning my brain inside out.</p>\n\n<p>As I started researching, it turned out that there are a <em>lot</em> of people having fun with Ruby. Some are doing things like writing games, making music or just tinkering with languages. Others are doing things that only some of us consider fun. Things like hacking on serious virtual machines, garbage collection, and asynchronous IO frameworks.</p>\n\n<p>So, back to my talk. I saw my failure to harness the motivation what I&#8217;d seen at previous years at RubyConf as an opportunity to figure out ways to line up some tactics to make sure that after the conference, I was able to create awesome things, contribute them back to the community, and enjoy every minute of it.</p>\n\n<p>Thus, I came up with a sort of &#8220;hierarchy of open source developer needs&#8221;. At the bottom is enjoyment; there&#8217;s little sense doing open source work if you&#8217;re not having fun. Once you&#8217;re having fun, you probably want to figure out how to find more time for making codes. Once you&#8217;re making more codes, you want to figure out how to get people interested in using your stuff. I&#8217;ve taken these three needs and identified several tactics that help me when I find myself in a rut or unable to produce. Call them patterns, practices, whatever; for me, they&#8217;re just tricks I resort to when the code isn&#8217;t flowing like I want to.</p>\n\n<p>The talk I ended up with is equal parts highlighting people in the Ruby community that are having fun and highlight ways to enjoy making things and contributing it back to whatever community you happen to be part of. I hope that I avoided sounding too much like a productivity guru and kept it interesting for the super-technical RubyConf crowd.</p>\n\n<p>If all of this sounds interesting you, grab the <a href='http://therealadam.com/wp-content/uploads/2009/12/funslides.pdf'>slides</a> (which are slightly truncated, no thanks to Keynote) or <a href=\"http://rubyconf2009.confreaks.com/19-nov-2009-10-25-just-for-fun-rediscovering-coding-as-a-hobby-adam-keys.html\" title=\"Confreaks: RubyConf 2009\">watch the recording</a> from the conference itself.</p>\n\n<hr />\n\n<p>I wrote the proposal for this talk right after Why disappeared himself. His way of approaching code is what inspired me to write a talk about getting back to coding for fun. &#8220;Just for Fun&#8221; starts with a tribute to Why the Lucky Stiff. The sense of fun and playfulness that Why had is important to the Ruby community. I&#8217;ve tried to highlight some of his most interesting playful pieces. And in the end, I can&#8217;t say &#8220;thanks&#8221; enough. Why has inspired me a lot and I&#8217;m glad I got to meet him, experience him and learn through his works.</p>\n\n<p>Even if you don&#8217;t take a look at my presentation, I strongly urge you to give a look at <a href=\"http://whymirror.github.com/\" title=\"whymirror.github.com\">some of Why&#8217;s works</a> and let them inspire you. My favorites are <a href=\"http://github.com/fogus/potion\" title=\"fogus's potion at master - GitHub\">Potion</a> and <a href=\"http://github.com/camping/camping\" title=\"camping's camping at master - GitHub\">Camping</a>.</p>\n\n<hr />\n\n<p>Some other things I mentioned in my talk as interesting or fun:</p>\n\n<ul>\n<li>Greg Borenstein&#8217;s <a href=\"http://github.com/atduskgreg/\" title=\"atduskgreg's Profile - GitHub\">code</a>, <a href=\"http://urbanhonking.com/ideasfordozens/\" title=\"Ideas For Dozens\">writings</a> and <a href=\"http://www.tumblr.com/following/page/2\" title=\"Log in | Tumblr\">tumblings</a></li>\n<li><a href=\"http://projecteuler.net/\" title=\"Project Euler\">Project Euler</a></li>\n<li>Marc-Andre Cournoyer&#8217;s <a href=\"http://github.com/macournoyer/\" title=\"macournoyer's Profile - GitHub\">codes</a> and <a href=\"http://createyourproglang.com/\" title=\"Create Your Own Programming Language\">book</a></li>\n<li><a href=\"http://github.com/mrflip\" title=\"mrflip's Profile - GitHub\">Philip Kromer&#8217;s</a> <a href=\"http://github.com/mrflip/wukong\" title=\"mrflip's wukong at master - GitHub\">Wukung</a></li>\n</ul>\n",
				"date_published": "2009-12-08T19:09:34-07:00",
				"url": "https://therealadam.com/2009/12/08/just-for-fun.html",
				"tags": ["Events"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/11/29/curated-awesome-the.html",
				"title": "Curated Awesome, the 2nd",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p>The awesome <a href=\"http://tumble.therealadam.com/post/262147075/christielouwho-samson-and-delilah-air-et\">Samson and Delilah</a>, &#8220;<a href=\"http://tumble.therealadam.com/post/261476217/moviesinframes-a-night-at-the-roxbury-1998\">Emilioooooo!</a>&#8221;, <a href=\"http://tumble.therealadam.com/post/246344145/kaktak-the-blues-brothers-john-belushi\">Belushi and a skinny tie</a>, <a href=\"http://tumble.therealadam.com/post/244834006/kaktak-raiders-of-the-lost-ark-harrison-ford\">contemplating the important stuff</a>, <a href=\"http://tumble.therealadam.com/post/242913684/the-rule-of-least-power\">The Rule of Least Power</a>, <a href=\"http://tumble.therealadam.com/post/226943710/mos-def-black-thought-eminem-cypher-3-video\">step into the cypher</a>, and <a href=\"http://tumble.therealadam.com/post/226091284/dsc-9979-via-courtneypo\">Molly</a>.</p>\n",
				"date_published": "2009-11-29T20:36:31-07:00",
				"url": "https://therealadam.com/2009/11/29/curated-awesome-the.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/10/28/the-kindles-sweet.html",
				"title": "The Kindle\u0026#39;s sweet spot",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://www.marco.org/224969330\">Given all the hubbub</a> about <a href=\"http://kottke.org/09/10/more-about-e-readers\">Kindles, Nooks and their utility</a>, I thought <a href=\"https://twitter.com/therealadam/statuses/5237232093\">this bears repeating to a wider audience</a>:</p>\n\n\n<blockquote>The Kindle is great for books that are just a bag of words, but falls short for anything with important visuals.</blockquote>\n\n<p>I&#8217;ve really enjoyed reading on my Kindle over the past year. You can&#8217;t beat it for dragging a bunch of books with you on vacation or for reading by the poolside. That said, I don&#8217;t use it to read anything technical with diagrams or source code listings. I certainly wouldn&#8217;t use it to read anything like Tufte, which is exactly why his books aren&#8217;t available on the Kindle. Where the Kindle shines is with pop-science books like <em>Freakonomics</em> and Star Wars novels<sup><a href=\"#fn1\">1</a></sup>.</p>\n\n\n<p>If you love books and reading, the Kindle is a nice addition to your bibliophilic habit, but it&#8217;s no replacement for a well-chosen and varied library.</p>\n\n\n<p id=\"fn1\"><sup>1</sup> Did I say that out loud? Crap.</p>\n",
				"date_published": "2009-10-28T12:15:39-07:00",
				"url": "https://therealadam.com/2009/10/28/the-kindles-sweet.html",
				"tags": ["Nerdery","reading"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/10/27/testing-declarative-code.html",
				"title": "Testing declarative code",
				"content_html": "<!-- raw HTML omitted -->\n<p>[sourcecode language=&ldquo;ruby&rdquo; gutter=&ldquo;false&rdquo;]\nclass Issue</p>\n<p>include MongoMapper::Document</p>\n<p>key :title, String\nkey :body, String\nkey :created_at, DateTime</p>\n<p>end\n[/sourcecode]</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>[sourcecode language=&ldquo;ruby&rdquo; gutter=&ldquo;false&rdquo;]\nclass IssueTest &lt; Test::Unit::TestCase</p>\n<p>context &lsquo;An issue&rsquo; do</p>\n<pre><code>should_have_keys :title, :body, :created_at\n</code></pre>\n<p>end</p>\n<p>end\n[/sourcecode]</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>I’m a little conflicted about how and if one should write test code for declarative code. Let’s say I’m writing a MongoMapper document class. It might look something like this:</p>\n\n[sourcecode language=\"ruby\" gutter=\"false\"]\nclass Issue\n\n  include MongoMapper::Document\n\n  key :title, String\n  key :body, String\n  key :created_at, DateTime\n\nend\n[/sourcecode]\n\n<p>Those <code>key</code> calls. Should I write a test for them? In the past, I’ve said “yes” on the principle that I was test driving the code and I needed something to fail in order to add code. Further, the growing ML-style-typing geek within me likes that writing tests for this is somewhat like constructing my open wacky type system via the test suite.</p>\n\n<p>A Shoulda-flavored test might look something like this:</p>\n\n[sourcecode language=\"ruby\" gutter=\"false\"]\nclass IssueTest &lt; Test::Unit::TestCase\n\n  context 'An issue' do\n\n    should_have_keys :title, :body, :created_at\n\n  end\n\nend\n[/sourcecode]\n\n<p>Ignoring the recursive rathole that I’ve now jumped into, I’m left with the question: what use is that <code>should_have_keys</code>? Will it help someone better understand <code>Issue</code> at some point in the future? Will it prevent me from naively breaking the software?</p>\n\n<p>Perhaps this is the crux of the biscuit: by adding code to make certain those <code>key</code> calls are present, have I address the inherent complexity of my application or have I imposed complexity?</p>\n\n<p>I’m going to experiment with swinging back towards leaving these sorts of declarations alone. The jury is still out.</p>\n",
				"date_published": "2009-10-27T20:41:58-07:00",
				"url": "https://therealadam.com/2009/10/27/testing-declarative-code.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/10/26/texas-is-its.html",
				"title": "Texas is its own dumb thing",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://en.wikipedia.org/wiki/Southern_American_English\" title=\"Southern American English - Wikipedia, the free encyclopedia\">Southern American English</a></p>\n\n<p>OK, here&#8217;s the deal. Wikipedia has it all wrong.</p>\n\n<ol>\n<li>Texas is not part of the South. Texas is its own unique thing. Sure we have dumbasses, but they are <em>our</em> dumbasses, wholly distinct from your typical Southern dumbass.</li>\n<li>In Texas, the way you refer to &#8220;you all&#8221; is &#8220;ya&#8217;ll&#8221;; it&#8217;s a contraction of &#8220;ya all&#8221;.</li>\n<li>They neglected to mention the idiomatic pronunciation of words like &#8220;oil&#8221; (ah-wllllll) or &#8220;wash&#8221; (warsh).</li>\n</ol>\n\n<p>Please take it under consideration: Wikipedia is edited by a lot of damn Oklahomans.</p>\n",
				"date_published": "2009-10-25T22:14:10-07:00",
				"url": "https://therealadam.com/2009/10/26/texas-is-its.html",
				"tags": ["Comedy, haha","texas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/10/09/curated-awesome-the.html",
				"title": "Curated awesome, the 1st",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://tumble.therealadam.com/post/207750098/nick-delaney-photography-book-1-urban\" title=\"Adam's Awesome : Nick Delaney Photography | Book 1 - Urban...\">A bumpy subway wall</a>, <a href=\"http://tumble.therealadam.com/post/207628389/i-like-unicorn-because-its-unix\" title=\"Adam's Awesome : I like Unicorn because it’s Unix\">loving things for their Unix-y qualities</a>, <a href=\"http://tumble.therealadam.com/post/205876395/theimpossiblecool-vonnegut\" title=\"Adam's Awesome : theimpossiblecool: Vonnegut.\">Kurt Vonnegut looking dapper</a>, the <a href=\"http://tumble.therealadam.com/post/202800714/fuckyeahclassical-symphony-no-9-in-e-minor\" title=\"Adam's Awesome : fuckyeahclassical: Symphony No. 9 in E Minor,...\">final movement of Dvorak&#8217;s Ninth Symphony</a> (originally his fifth), and <a href=\"http://tumble.therealadam.com/post/202624980/reflection-eternal-back-again-talib-kweli\" title=\"Adam's Awesome : Reflection Eternal - Back Again [Talib Kweli]\">a music video by Talib Kweli that makes me want to go get my hair cut</a>. Oh, and I can&#8217;t leave out <a href=\"http://tumble.therealadam.com/post/201978255/material-exploration-is-the-process-of-getting\" title=\"Adam's Awesome : Material exploration is the process of getting...\">the connection between prototyping physical things and applications operating on large data</a>, Ben Scoffield&#8217;s take on <a href=\"http://tumble.therealadam.com/post/200939925/database-taxonomy\" title=\"Adam's Awesome : Database Taxonomy\">database taxonomy</a> and <a href=\"http://tumble.therealadam.com/post/200026798/read-one-book-a-week\" title=\"Adam's Awesome : Read One Book a Week\">a screed on reading one book per week</a>.</p>\n\n<p>(<em>Editor&#8217;s note</em>: I recently took to using Tumblr again. For a while, I&#8217;ve been curating interesting stuff here. But Tumblr has evolved into a really fantastic application for doing this. So, my policy going forward is to post <em>my</em> stuff here and curate other people&#8217;s awesome stuff <a href=\"http://tumble.therealadam.com/\" title=\"Adam's Awesome\">over there</a>. That said, I&#8217;ll probably do &#8220;best-of&#8221; posts, like this one, to keep you interested and informed.)</p>\n",
				"date_published": "2009-10-09T05:41:55-07:00",
				"url": "https://therealadam.com/2009/10/09/curated-awesome-the.html",
				"tags": ["Music","Pop Culture","Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/10/05/chance-encounter.html",
				"title": "Chance Encounter",
				"content_html": "<p>Another meme-ish &ldquo;film&rdquo; by yours truly. This time, the idea is you do something in five seconds, plus a two second intro and a one second outro. Here&rsquo;s what I came up with:</p>\n<p>This is an adaptation of possibly my favorite improvised joke. I deploy this joke when a conversation is interrupted by some disturbance or noisy distraction. Right before the conversation is going to continue, I say &ldquo;&hellip;and that&rsquo;s how I met the president and the pope on the same day.&rdquo; Works pretty well.</p>\n<p>Funny aside: I found out about this on the Vimeo site, thinking there was a competition this weekend. Turns out, it was <!-- raw HTML omitted -->last<!-- raw HTML omitted --> weekend. Figures.</p>\n",
				"content_text": "Another meme-ish \"film\" by yours truly. This time, the idea is you do something in five seconds, plus a two second intro and a one second outro. Here's what I came up with:\n\n\n\nThis is an adaptation of possibly my favorite improvised joke. I deploy this joke when a conversation is interrupted by some disturbance or noisy distraction. Right before the conversation is going to continue, I say \"...and that's how I met the president and the pope on the same day.\" Works pretty well.\n\nFunny aside: I found out about this on the Vimeo site, thinking there was a competition this weekend. Turns out, it was <em>last</em> weekend. Figures.\n",
				"date_published": "2009-10-05T19:56:56-07:00",
				"url": "https://therealadam.com/2009/10/05/chance-encounter.html",
				"tags": ["Comedy, haha","jokes"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/25/dallas-could-get.html",
				"title": "Dallas could get a pedestrian bridge",
				"content_html": "<p><!-- raw HTML omitted -->Trinity gift is $10 million for pedestrian bridge<!-- raw HTML omitted -->. Catering to pedestrians, in Dallas? Surely you jest!</p>\n<p>I&rsquo;ll just sit here and quietly hope that the plans for an urban park around the Trinity aren&rsquo;t derailed by everything that is politics.</p>\n",
				"content_text": "<a href=\"http://cityhallblog.dallasnews.com/archives/2009/09/trinity-gift-is-10-million-for.html\">Trinity gift is $10 million for pedestrian bridge</a>. Catering to pedestrians, in Dallas? Surely you jest!\n\nI'll just sit here and quietly hope that the plans for an urban park around the Trinity aren't derailed by everything that is politics.\n",
				"date_published": "2009-09-25T05:49:09-07:00",
				"url": "https://therealadam.com/2009/09/25/dallas-could-get.html",
				"tags": ["Curated","Expanded ideas","urbanism","dallas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/24/ghostbusters-then-and.html",
				"title": "Ghostbusters then and now",
				"content_html": "<p>What happens when you take scenes from Ghostbusters and see how New York used to look and how it looks today? Pretty awesome, actually. In <!-- raw HTML omitted -->two<!-- raw HTML omitted --> <!-- raw HTML omitted -->parts<!-- raw HTML omitted -->.</p>\n",
				"content_text": "What happens when you take scenes from Ghostbusters and see how New York used to look and how it looks today? Pretty awesome, actually. In <a href=\"http://www.scoutingny.com/?p=1048\">two</a> <a href=\"http://www.scoutingny.com/?p=1056\">parts</a>.\n",
				"date_published": "2009-09-24T16:47:59-07:00",
				"url": "https://therealadam.com/2009/09/24/ghostbusters-then-and.html",
				"tags": ["Curated","Nerdery","ghostbusters","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/23/birthing-born-to.html",
				"title": "Birthing Born to Run",
				"content_html": "<p><!-- raw HTML omitted -->The birth of Born To Run<!-- raw HTML omitted -->. On the creation and evolution of the song and album. Great read for Bruce-o-philes.</p>\n",
				"content_text": "<a href=\"http://www.slate.com/id/2226603/pagenum/all/#p2\">The birth of Born To Run</a>. On the creation and evolution of the song and album. Great read for Bruce-o-philes.\n",
				"date_published": "2009-09-23T08:02:39-07:00",
				"url": "https://therealadam.com/2009/09/23/birthing-born-to.html",
				"tags": ["Music","Pop Culture","Curated","misc:bruce-springsteen"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/22/representing-time-in.html",
				"title": "Representing time in our programs",
				"content_html": "<p><!-- raw HTML omitted -->Time is the New Memory<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve been thinking about how we represent time in programs for a while. The problem is that concurrent programs are all about time, but mostly, we only use two mechanisms to represent it in our programs.</p>\n<p>The semi-explicit way is through locks. When we insert locks around some bit of code, we are giving hints to the system that things should only proceed in a certain order. This ordering gives us a notion of time, but it&rsquo;s not horribly comforting.</p>\n<p>The completely implicit way we represent time in our programs is by ordering calls to functions and the lines of code within those functions. Line 10 <em>always</em> executes before line 11, etc.</p>\n<p>The problem that Rich Hickey, who has some fantastic ideas about this time stuff, has in the article I quoted is that time is managed manually and implicitly. When you start writing large concurrent programs, this falls apart. We need better constructs to deal with it.</p>\n<p>Think of it like the shift from unstructured programming to structured programming to object-oriented programming. At first we just had a long code listing; no functions, just line after line of code. This became mentally untenable, so we shifted to structured, procedural programming. But some of our data was global and it was often hard to tell what functions belong to what data. So we moved to object-oriented programming and encapsulation.</p>\n<p>Hopefully Rich Hickey, Simon Peyton-Jones and other functional programming folks can lead us to is a nice way to structure our programs around time. I&rsquo;m eager to have my brain melted by what they conjure up.</p>\n",
				"content_text": "<a href=\"http://www.artima.com/articles/hickey_on_time.html\">Time is the New Memory</a>:\n\n<blockquote>\nThe time problem is not easy to see in today's mainstream languages because there are no constructs that make time explicit. It is implicit in the system. We don't even know that's what we're doing when we use locks to try to make this work.\n</blockquote>\n\nI've been thinking about how we represent time in programs for a while. The problem is that concurrent programs are all about time, but mostly, we only use two mechanisms to represent it in our programs.\n\nThe semi-explicit way is through locks. When we insert locks around some bit of code, we are giving hints to the system that things should only proceed in a certain order. This ordering gives us a notion of time, but it's not horribly comforting.\n\nThe completely implicit way we represent time in our programs is by ordering calls to functions and the lines of code within those functions. Line 10 _always_ executes before line 11, etc.\n\nThe problem that Rich Hickey, who has some fantastic ideas about this time stuff, has in the article I quoted is that time is managed manually and implicitly. When you start writing large concurrent programs, this falls apart. We need better constructs to deal with it.\n\nThink of it like the shift from unstructured programming to structured programming to object-oriented programming. At first we just had a long code listing; no functions, just line after line of code. This became mentally untenable, so we shifted to structured, procedural programming. But some of our data was global and it was often hard to tell what functions belong to what data. So we moved to object-oriented programming and encapsulation.\n\nHopefully Rich Hickey, Simon Peyton-Jones and other functional programming folks can lead us to is a nice way to structure our programs around time. I'm eager to have my brain melted by what they conjure up.\n",
				"date_published": "2009-09-22T10:45:59-07:00",
				"url": "https://therealadam.com/2009/09/22/representing-time-in.html",
				"tags": ["Uncategorized","functional_programming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/22/aint-talkin-bout.html",
				"title": "Ain\u0026#39;t talkin\u0026#39; \u0026#39;bout the man",
				"content_html": "<p>Here&rsquo;s a fun game. <!-- raw HTML omitted -->&ldquo;The Government&rdquo;<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Often, simply striking out &ldquo;government&rdquo; reveals a completely different, and far more useful, commentary.</p>\n",
				"content_text": "Here's a fun game. <a href=\"http://squashed.tumblr.com/post/183765575/the-government\">\"The Government\"</a>:\n\n<blockquote>\nTry something. Every time somebody complains about the evils or failings of &ldquo;the government,&rdquo; strike out &ldquo;the government&rdquo; and see what results.\n</blockquote>\n\nOften, simply striking out \"government\" reveals a completely different, and far more useful, commentary.\n",
				"date_published": "2009-09-22T06:22:11-07:00",
				"url": "https://therealadam.com/2009/09/22/aint-talkin-bout.html",
				"tags": ["Curated","The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/11/polyglottin-your-data.html",
				"title": "Polyglottin\u0026#39; your data",
				"content_html": "<p><!-- raw HTML omitted -->Polyglot persistence<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Ben Scofield&rsquo;s spot-on here. One of the many transitions we&rsquo;re undergoing is from &ldquo;I&rsquo;ll use MySQL most of my career&rdquo; to &ldquo;I&rsquo;ll tinker with a different database for every project over a couple years and then pick and choose the best as time goes on&rdquo;.</p>\n",
				"content_text": "<a href=\"http://benscofield.com/2009/09/polyglot-persistence/\">Polyglot persistence</a>:\n\n<blockquote>\nI think that many of the NoSQL crowd either fail to either recognize, or to properly describe that their preferred databases don&rsquo;t&nbsp;replace applications like MySQL and Postgres, just as Ruby doesn&rsquo;t replace Java. Instead, the explosion of these new options for persistence just work better for some domains (and worse for others).\n</blockquote>\n\nBen Scofield's spot-on here. One of the many transitions we're undergoing is from \"I'll use MySQL most of my career\" to \"I'll tinker with a different database for every project over a couple years and then pick and choose the best as time goes on\".\n",
				"date_published": "2009-09-11T06:16:08-07:00",
				"url": "https://therealadam.com/2009/09/11/polyglottin-your-data.html",
				"tags": ["Curated","databases"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/10/tons-of-fp.html",
				"title": "Tons of FP fun",
				"content_html": "<p><!-- raw HTML omitted -->A programming language zoo<!-- raw HTML omitted -->, <!-- raw HTML omitted -->a week of FP heaven<!-- raw HTML omitted -->, <!-- raw HTML omitted -->rewriting PHP with Haskell<!-- raw HTML omitted --> and <!-- raw HTML omitted -->a game for kids of any age to learn the untyped lambda calculus<!-- raw HTML omitted -->. Did I ever mention it&rsquo;s a good time to have a fascination with functional programming languages?</p>\n",
				"content_text": "<a href=\"http://andrej.com/plzoo/\">A programming language zoo</a>, <a href=\"http://pandamonial.grahamis.com/blog/a-week-of-fp-heaven/\">a week of FP heaven</a>, <a href=\"http://github.com/facebook/lex-pass/tree/master\">rewriting PHP with Haskell</a> and <a href=\"http://worrydream.com/AlligatorEggs/\">a game for kids of any age to learn the untyped lambda calculus</a>. Did I ever mention it's a good time to have a fascination with functional programming languages?\n",
				"date_published": "2009-09-10T06:09:27-07:00",
				"url": "https://therealadam.com/2009/09/10/tons-of-fp.html",
				"tags": ["Curated","games","functional_programming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/10/ipod-spaceman.html",
				"title": "iPod Spaceman",
				"content_html": "<!-- raw HTML omitted -->\n<p>(With due apologies to the creators of <!-- raw HTML omitted -->New Math<!-- raw HTML omitted -->, the writers of 30 Rock and the lovely iPod people.)</p>\n",
				"content_text": "<div class=\"contentcolumn aligncenter\"><img src=\"http://therealadam.com/wp-content/uploads/2009/09/ipodspaceman.jpg\" alt=\"ipodspaceman.jpg\" border=\"0\" width=\"488\" height=\"488\" align=\"right\" /></div>\n\n(With due apologies to the creators of <a href=\"http://www.morenewmath.com/\">New Math</a>, the writers of 30 Rock and the lovely iPod people.)\n",
				"date_published": "2009-09-10T05:54:47-07:00",
				"url": "https://therealadam.com/2009/09/10/ipod-spaceman.html",
				"tags": ["Comedy, haha","misc:30_rock"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/08/tracking-your-own.html",
				"title": "Tracking your own context switches",
				"content_html": "<p><!-- raw HTML omitted -->Why I do Time Tracking<!-- raw HTML omitted --></p>\n<p>At one point, I tracked every context switch during my work day. I kept a legal pad next to my mouse and I would write down the time whenever I switched between coding, emailing, surfing, talking to someone in my cube or walking around to find someone I needed to talk to.</p>\n<p>People thought I was odd. They&rsquo;d ask what I was jotting down when I noted my context switch, so I briefly explained it. &ldquo;Okaaaayyyyyy?&rdquo;, they&rsquo;d say. An unintended side-effect was that people did end up bugging me about random things less. In fact, it was way more effective at that than putting up a sign that said &ldquo;unless something is on fire, email me&rdquo;. So it goes.</p>\n<p>I never ended up running any aggregate numbers on the data. But, it did give me an idea about the frequency and cost of my context switches. I wish there was a better way to track this sort of thing passively. I&rsquo;m sure it would still shock me how much time I go in and out of focus.</p>\n<p>If you&rsquo;ve never tried this sort of experiment, it&rsquo;s worth running for a week or two. You&rsquo;ll almost certainly notice something worth trying to cut out by glancing over the list of things you&rsquo;re spending time or wasting focus on.</p>\n",
				"content_text": "<a href=\"http://www.swaroopch.com/blog/why-i-do-time-tracking/\">Why I do Time Tracking</a>\n\nAt one point, I tracked every context switch during my work day. I kept a legal pad next to my mouse and I would write down the time whenever I switched between coding, emailing, surfing, talking to someone in my cube or walking around to find someone I needed to talk to.\n\nPeople thought I was odd. They'd ask what I was jotting down when I noted my context switch, so I briefly explained it. \"Okaaaayyyyyy?\", they'd say. An unintended side-effect was that people did end up bugging me about random things less. In fact, it was way more effective at that than putting up a sign that said \"unless something is on fire, email me\". So it goes.\n\nI never ended up running any aggregate numbers on the data. But, it did give me an idea about the frequency and cost of my context switches. I wish there was a better way to track this sort of thing passively. I'm sure it would still shock me how much time I go in and out of focus.\n\nIf you've never tried this sort of experiment, it's worth running for a week or two. You'll almost certainly notice something worth trying to cut out by glancing over the list of things you're spending time or wasting focus on.\n",
				"date_published": "2009-09-08T04:39:17-07:00",
				"url": "https://therealadam.com/2009/09/08/tracking-your-own.html",
				"tags": ["Expanded ideas","workflow"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/02/fred-in-a.html",
				"title": "Fred, in a nutshell",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->Fred in depth<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://www.flickr.com/photos/courtney/3875505169/\"><img alt=\"\" src=\"http://farm3.static.flickr.com/2532/3875505169_2a1ecb43f1_d.jpg\" title=\"Fred!\" class=\"aligncenter\" width=\"500\" height=\"326\" /></a>\n\n\n<a href=\"http://www.whosyourdachshund.com/2009/08/fred-plays-with-favorites.html\">Fred in depth</a>.\n",
				"date_published": "2009-09-02T20:18:42-07:00",
				"url": "https://therealadam.com/2009/09/02/fred-in-a.html",
				"tags": ["Dogs, cats, et cetera","dachshund","fred"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/09/01/on-american-political.html",
				"title": "On American political insanity",
				"content_html": "<p><!-- raw HTML omitted -->Still crazy after all these years<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>The Economist does well to explain the insanity that is propagated by American political media. Reading articles like this help me stay sane. Also: ignoring media with deadlines shorter than a week, and consuming as much constructive satire as possible.</p>\n",
				"content_text": "<a href=\"http://www.economist.com/world/unitedstates/displaystory.cfm?story_id=14258768\">Still crazy after all these years</a>:\n\n<blockquote>\nPoliticians should tone down the rhetoric. Protesters should read some history before making Hitler comparisons. Talk-show hosts should stop pretending that paranoid nitwits are asking reasonable questions.\n</blockquote>\n\nThe Economist does well to explain the insanity that is propagated by American political media. Reading articles like this help me stay sane. Also: ignoring media with deadlines shorter than a week, and consuming as much constructive satire as possible.\n",
				"date_published": "2009-09-01T07:07:09-07:00",
				"url": "https://therealadam.com/2009/09/01/on-american-political.html",
				"tags": ["Curated","The System","Politics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/31/its-not-nosql.html",
				"title": "It\u0026#39;s not NoSQL, it\u0026#39;s post-relational",
				"content_html": "<p>Almost five years ago, we were witness to the reinvention of web frameworks. A couple upstarts named Django and Rails appeared at almost the same time, espousing many of the same values. In the typical Gandhi-cycle, they were first ignored, the incumbents fought them, and then they achieved victory over the incumbents. Today, any framework that&rsquo;s used on new projects is likely to have more than a hint of Django and Rails in it.</p>\n<p>Today, we&rsquo;re seeing the same thing for databases. Something is going on and things are changing. Barring an unprecedented departure of fashion from software development, I&rsquo;ll look back five years from now and write about some other shift in the development landscape.</p>\n<p>But, all shifts like this need a name. Right now, the best we have is NoSQL. The problem with that name is that it only defines what it is not. That makes it confrontational and not amazingly particular to what it includes or excludes.</p>\n<p><!-- raw HTML omitted -->Damien Katz<!-- raw HTML omitted -->, the creator of CouchDB, has noted <!-- raw HTML omitted -->the need for a better name for this storage revolution<!-- raw HTML omitted -->. Allow me to proffer mine:</p>\n<p><!-- raw HTML omitted -->Post-relational<!-- raw HTML omitted --></p>\n<p>What we&rsquo;re seeing its the end of the assumption that valuable data should go in some kind of relational database. The end of the assumption that SQL and ACID are the only tools for solving our problems. The end of the viability of master/slave scaling. The end of weaving the relational model through our application code.</p>\n<p>We&rsquo;re seeing an explosion in the ideas about how one should store important data. We&rsquo;re looking at data to see if it&rsquo;s even worth persisting. We&rsquo;re experimenting with new semantics around structure, consistency and concurrency.</p>\n<p>In the same way that post-modernism is about reconsidering the ways of the past in art and architecture, post-relational is a chance for software developers to reconsider our own ways. Just as post-modernism didn&rsquo;t invalidate the entire history of art, post-relational won&rsquo;t invalidate the usefulness of relational databases.</p>\n<p>However, it&rsquo;s likely that those working in some domains will decide that non-relational databases better fit their needs. That&rsquo;s progress in our field. It&rsquo;s fun to watch.</p>\n<p>Say it with me: post-relational databases, post-relational storage, post-relational thinking, or simply, <!-- raw HTML omitted -->post-relational<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Almost five years ago, we were witness to the reinvention of web frameworks. A couple upstarts named Django and Rails appeared at almost the same time, espousing many of the same values. In the typical Gandhi-cycle, they were first ignored, the incumbents fought them, and then they achieved victory over the incumbents. Today, any framework that's used on new projects is likely to have more than a hint of Django and Rails in it.\n\nToday, we're seeing the same thing for databases. Something is going on and things are changing. Barring an unprecedented departure of fashion from software development, I'll look back five years from now and write about some other shift in the development landscape.\n\nBut, all shifts like this need a name. Right now, the best we have is NoSQL. The problem with that name is that it only defines what it is not. That makes it confrontational and not amazingly particular to what it includes or excludes.\n\n<a href=\"http://damienkatz.net/\">Damien Katz</a>, the creator of CouchDB, has noted <a href=\"http://twitter.com/janl/status/3646455769\">the need for a better name for this storage revolution</a>. Allow me to proffer mine:\n\n<span style=\"font-size:200%;\">Post-relational</span>\n\nWhat we're seeing its the end of the assumption that valuable data should go in some kind of relational database. The end of the assumption that SQL and ACID are the only tools for solving our problems. The end of the viability of master/slave scaling. The end of weaving the relational model through our application code.\n\nWe're seeing an explosion in the ideas about how one should store important data. We're looking at data to see if it's even worth persisting. We're experimenting with new semantics around structure, consistency and concurrency.\n\nIn the same way that post-modernism is about reconsidering the ways of the past in art and architecture, post-relational is a chance for software developers to reconsider our own ways. Just as post-modernism didn't invalidate the entire history of art, post-relational won't invalidate the usefulness of relational databases.\n\nHowever, it's likely that those working in some domains will decide that non-relational databases better fit their needs. That's progress in our field. It's fun to watch.\n\nSay it with me: post-relational databases, post-relational storage, post-relational thinking, or simply, <strong>post-relational</strong>.\n",
				"date_published": "2009-08-31T05:39:43-07:00",
				"url": "https://therealadam.com/2009/08/31/its-not-nosql.html",
				"tags": ["Uncategorized","post-relational"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/29/blame-the-compiler.html",
				"title": "Blame the compiler",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Remember when you first started programming? Those early days when you'd take some code out of a book or article, type it out, and then try to make it print silly things or draw funny pictures?</p>\n\n<p>The thing I remember about those days was the temptation to blame the compiler for all the ills of my code. Something doesn't work right and you can't figure out why? <em>Blame the compiler</em>! Of course, this was never right. The compiler is very rarely incorrect.</p>\n\n<p>My goal today is to bring back the joy of blaming the compiler. Of course, Ruby doesn't _have_ a compiler (yet!), so we have to play tricks. But that's part of the fun!</p>\n\n<p>Let's blame the compiler.</p>\n\n\n\n<p>See, all you have to do is extend <code>BlameTheCompiler</code>. And then you'll find yourself with one chance in every three executions to say \"Hmm, I'm sure I defined that method. Something must be wrong with Ruby.\" Just like those early days of programming, you're half right. The other half is that you've got a little prankster running in your application.</p>\n\n<p>It's a fun parlour trick. I would not, however, recommend sending code including <code>BlameTheCompiler</code> in as a bug report to the JRuby or Rubinius folks. They wouldn't find it as funny as you or I.</p>\n",
				"date_published": "2009-08-29T07:11:44-07:00",
				"url": "https://therealadam.com/2009/08/29/blame-the-compiler.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/26/two-cellphones.html",
				"title": "Two cellphones",
				"content_html": "<p><!-- raw HTML omitted -->People with two cellphones worry me.<!-- raw HTML omitted --></p>\n<p>(More <!-- raw HTML omitted -->six word stories<!-- raw HTML omitted -->. Also, an article as such in <!-- raw HTML omitted --><!-- raw HTML omitted -->Wired<!-- raw HTML omitted --><!-- raw HTML omitted -->.)</p>\n",
				"content_text": "<strong>People with two cellphones worry me.</strong>\n\n(More <a title=\"Six Word Stories\" href=\"http://www.sixwordstories.net/\">six word stories</a>. Also, an article as such in <em><a title=\"Very Short Stories\" href=\"http://www.wired.com/wired/archive/14.11/sixwords.html\">Wired</a></em>.)\n",
				"date_published": "2009-08-26T14:48:03-07:00",
				"url": "https://therealadam.com/2009/08/26/two-cellphones.html",
				"tags": ["Comedy, haha","humor","story"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/25/the-technology-behind.html",
				"title": "The Technology Behind Tag Better",
				"content_html": "<p>I promised you the details on how we built <!-- raw HTML omitted -->Tag Better<!-- raw HTML omitted -->, so here we go. This is what I used to build the back-end bits. You&rsquo;ll have to pester <!-- raw HTML omitted -->Chris<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Alex<!-- raw HTML omitted --> to get the front-end details.</p>\n<p>h2. Sinatra</p>\n<p>Technically, it&rsquo;s a Rails Rumble. Read between the lines of the rules and you&rsquo;ll see it&rsquo;s really a <em>Rack</em> Rumble. And so I went with my favorite for prototyping, <!-- raw HTML omitted -->Sinatra<!-- raw HTML omitted -->.</p>\n<p>Happily, Sinatra had my back the whole time. I never came across anything that stumped me. Further, I didn&rsquo;t pay any taxes for ceremony I don&rsquo;t need.</p>\n<p><!-- raw HTML omitted -->Verdict<!-- raw HTML omitted -->: perfect tool for the job.</p>\n<p>h2. Passenger</p>\n<p>I hadn&rsquo;t used <!-- raw HTML omitted -->Passenger<!-- raw HTML omitted --> much before this weekend. I&rsquo;m pretty happy spooling up app processes in a terminal and watching the logs scroll past. <!-- raw HTML omitted -->localhost:3000<!-- raw HTML omitted --> is my friend.</p>\n<p>However, I&rsquo;m an outlier in this regard. My teammates aren&rsquo;t as interested in lower-level bits as I am, so I figured that using Passenger is the best bet to help them get the app up and running locally.</p>\n<p>The benefit that I didn&rsquo;t realize we&rsquo;d get from this is running the same stack locally as on the production server. Besides some virtual host wrangling that Passenger Pane saved me from locally, getting the app up and running was painless.</p>\n<p><!-- raw HTML omitted -->Verdict<!-- raw HTML omitted -->: I am quite likely to keep tolerate Apache for that Passenger goodness, especially when I am the operations guy.</p>\n<p>h2. Sprinkle + passenger_stack</p>\n<p>The moment that I realized we&rsquo;d have to set up our own server instance was one of brief, abject terror. I knew this could easily expand to fill <em>a lot</em> more of my time than I wanted. Luckily, I was wrong.</p>\n<p>Ben Schwartz&rsquo;s <!-- raw HTML omitted -->passenger_stack<!-- raw HTML omitted --> helped me get our Linode slice up far faster than I would have been able to by hand. I cloned his repo, tweaked it to our needs (disabled MySQL, eventually added a CouchDB recipe) and ran it on our server. Several minutes later, we had a working server. Pretty awesome.</p>\n<p><!-- raw HTML omitted -->passenger_stack<!-- raw HTML omitted --> uses <!-- raw HTML omitted -->Sprinkle<!-- raw HTML omitted -->, which isn&rsquo;t getting as much play in the server configuration space as Puppet and Chef. Sprinkle does seem really well suited to standing up apps on a few servers. We might want to step up to something heftier once we had more servers, but Sprinkle and <!-- raw HTML omitted -->passenger_stack<!-- raw HTML omitted --> are simple to understand and don&rsquo;t require any supporting infrastructure to use.</p>\n<p><!-- raw HTML omitted -->Verdict<!-- raw HTML omitted -->: Not too primitive, not too involved; just right.</p>\n<p>h2. CouchDB</p>\n<p>When I&rsquo;m building any app that relies on an API as its primary data source, caching API response data is forefront on my mind. Serving the data locally, rather than making a request every time, means the app feels more responsive. An added benefit is not upsetting the upstream data provider.</p>\n<p>I&rsquo;ve built apps like this that use <!-- raw HTML omitted -->MySQL<!-- raw HTML omitted --> as a cache and it just never felt right. I&rsquo;ve been tinkering with <!-- raw HTML omitted -->CouchDB<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Tokyo Cabinet/Tyrant<!-- raw HTML omitted --> lately. I decided to go with CouchDB for this one because of the excellent <!-- raw HTML omitted -->CouchDBX<!-- raw HTML omitted -->, which makes it easier for those who don&rsquo;t even know what Erlang is to use CouchDB.</p>\n<p>CouchDB ended up working pretty well. While we haven&rsquo;t really leaned into it, it didn&rsquo;t present any challenges while I was developing. Using <!-- raw HTML omitted -->CouchRest<!-- raw HTML omitted --> with Sinatra worked just fine.</p>\n<p><!-- raw HTML omitted -->Verdict<!-- raw HTML omitted -->: It just worked, which is exactly what I needed.</p>\n<p>h2. Skipping traditional TDD</p>\n<p>OK, so maybe only Jared Diamond would consider this a technology. But skipping the writing of tests to drive my design was pretty helpful. Consider <!-- raw HTML omitted -->Kent Beck&rsquo;s flight metaphor<!-- raw HTML omitted -->. Doing a Rails Rumble is just like the taxi-ing phase. Or a <!-- raw HTML omitted -->minimum valuable product<!-- raw HTML omitted -->. Either way, you want to make a small investment towards validating an idea.</p>\n<p>Notice I said <em>traditional</em> TDD. To tell the truth, I did write a sniff test script after I had the basic app working. But it wasn&rsquo;t an xUnit-style test. It&rsquo;s just a shell script that bangs on the app with fixed parameters. I do have to manually inspect it to make sure nothing is blowing up. What I&rsquo;m really automating here is the pain of typing out Curl commands.</p>\n<p><!-- raw HTML omitted -->Verdict<!-- raw HTML omitted -->: worked great for the original purposes, but I&rsquo;ll probably add a proper test suite as one of the first post-contest enhancements</p>\n<!-- raw HTML omitted -->\n<p>So that&rsquo;s what I think helped make our project go off pretty well. Really, what they did was <em>help me get stuff done and then get out of the way</em>. Isn&rsquo;t that the best kind of tool?</p>\n",
				"content_text": "I promised you the details on how we built <a href=\"http://tagbetter.r09.railsrumble.com/\">Tag Better</a>, so here we go. This is what I used to build the back-end bits. You'll have to pester <a href=\"http://boldpx.com/\">Chris</a> or <a href=\"http://handcoding.com/\">Alex</a> to get the front-end details.\n\nh2. Sinatra\n\nTechnically, it's a Rails Rumble. Read between the lines of the rules and you'll see it's really a *Rack* Rumble. And so I went with my favorite for prototyping, <a href=\"http://www.sinatrarb.com/\">Sinatra</a>.\n\nHappily, Sinatra had my back the whole time. I never came across anything that stumped me. Further, I didn't pay any taxes for ceremony I don't need.\n\n<strong>Verdict</strong>: perfect tool for the job.\n\nh2. Passenger\n\nI hadn't used <a href=\"http://www.modrails.com/\">Passenger</a> much before this weekend. I'm pretty happy spooling up app processes in a terminal and watching the logs scroll past. <code>localhost:3000</code> is my friend.\n\nHowever, I'm an outlier in this regard. My teammates aren't as interested in lower-level bits as I am, so I figured that using Passenger is the best bet to help them get the app up and running locally.\n\nThe benefit that I didn't realize we'd get from this is running the same stack locally as on the production server. Besides some virtual host wrangling that Passenger Pane saved me from locally, getting the app up and running was painless.\n\n<strong>Verdict</strong>: I am quite likely to keep tolerate Apache for that Passenger goodness, especially when I am the operations guy.\n\nh2. Sprinkle + passenger_stack\n\nThe moment that I realized we'd have to set up our own server instance was one of brief, abject terror. I knew this could easily expand to fill *a lot* more of my time than I wanted. Luckily, I was wrong.\n\nBen Schwartz's <a href=\"http://github.com/benschwarz/passenger-stack/\">passenger_stack</a> helped me get our Linode slice up far faster than I would have been able to by hand. I cloned his repo, tweaked it to our needs (disabled MySQL, eventually added a CouchDB recipe) and ran it on our server. Several minutes later, we had a working server. Pretty awesome.\n\n<code>passenger_stack</code> uses <a href=\"http://github.com/crafterm/sprinkle/tree/master\">Sprinkle</a>, which isn't getting as much play in the server configuration space as Puppet and Chef. Sprinkle does seem really well suited to standing up apps on a few servers. We might want to step up to something heftier once we had more servers, but Sprinkle and <code>passenger_stack</code> are simple to understand and don't require any supporting infrastructure to use.\n\n<strong>Verdict</strong>: Not too primitive, not too involved; just right.\n\nh2. CouchDB\n\nWhen I'm building any app that relies on an API as its primary data source, caching API response data is forefront on my mind. Serving the data locally, rather than making a request every time, means the app feels more responsive. An added benefit is not upsetting the upstream data provider.\n\nI've built apps like this that use <a href=\"http://mysql.com/\">MySQL</a> as a cache and it just never felt right. I've been tinkering with <a href=\"http://couchdb.org/\">CouchDB</a> and <a href=\"http://tokyocabinet.sourceforge.net/\">Tokyo Cabinet/Tyrant</a> lately. I decided to go with CouchDB for this one because of the excellent <a href=\"http://janl.github.com/couchdbx/\">CouchDBX</a>, which makes it easier for those who don't even know what Erlang is to use CouchDB.\n\nCouchDB ended up working pretty well. While we haven't really leaned into it, it didn't present any challenges while I was developing. Using <a href=\"http://github.com/couchrest/couchrest\">CouchRest</a> with Sinatra worked just fine.\n\n<strong>Verdict</strong>: It just worked, which is exactly what I needed.\n\nh2. Skipping traditional TDD\n\nOK, so maybe only Jared Diamond would consider this a technology. But skipping the writing of tests to drive my design was pretty helpful. Consider <a href=\"http://www.threeriversinstitute.org/blog/?p=252\">Kent Beck's flight metaphor</a>. Doing a Rails Rumble is just like the taxi-ing phase. Or a <a href=\"http://startuplessonslearned.blogspot.com/2009/03/minimum-viable-product.html\">minimum valuable product</a>. Either way, you want to make a small investment towards validating an idea.\n\nNotice I said _traditional_ TDD. To tell the truth, I did write a sniff test script after I had the basic app working. But it wasn't an xUnit-style test. It's just a shell script that bangs on the app with fixed parameters. I do have to manually inspect it to make sure nothing is blowing up. What I'm really automating here is the pain of typing out Curl commands.\n\n<strong>Verdict</strong>: worked great for the original purposes, but I'll probably add a proper test suite as one of the first post-contest enhancements\n\n<hr />\n\nSo that's what I think helped make our project go off pretty well. Really, what they did was *help me get stuff done and then get out of the way*. Isn't that the best kind of tool?\n",
				"date_published": "2009-08-25T20:54:55-07:00",
				"url": "https://therealadam.com/2009/08/25/the-technology-behind.html",
				"tags": ["Uncategorized","ruby","sinatra","post-relational","tagbetter"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/23/tag-better.html",
				"title": "Tag Better",
				"content_html": "<p>Yesterday and today, I worked with <!-- raw HTML omitted -->Alex Bischoff<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Chris Griego<!-- raw HTML omitted --> on a <!-- raw HTML omitted -->Rails Rumble<!-- raw HTML omitted --> project. In less than forty-eight hours, we set out to build a web application, using Ruby, from the ground up. While we didn&rsquo;t <!-- raw HTML omitted -->boil the ocean<!-- raw HTML omitted -->, we did come up with something interesting.</p>\n<p><!-- raw HTML omitted -->Tag Better<!-- raw HTML omitted --> is the groundwork for an app that enhances one of our favorite, but often neglected, sites: <!-- raw HTML omitted -->del.icio.us<!-- raw HTML omitted -->. Personally, I&rsquo;ve tried other bookmarking tools such as a plain text file, <!-- raw HTML omitted -->EagleFiler<!-- raw HTML omitted --> and <!-- raw HTML omitted -->pinboard.in<!-- raw HTML omitted --> (which I think has an excellent chance of eclipsing Delicious). However, I&rsquo;ve found myself back on Delicious, even after a hiatus.</p>\n<p>Given Yahoo&rsquo;s unsteady stewardship of the site, we figured it&rsquo;s time to take matters in our own hands. Using their API, it&rsquo;s entirely possible for us to build enhancements on top of Delicious. We decided to do just that.</p>\n<p>h2. Triage and tidying</p>\n<p>We started out from a gem of an idea that Chris had. When you&rsquo;re trying to better organize your tags and bundles in Delicious, there are two modes you might want to operate under. The first couple times, you need to do triage. Get stuff roughly into order, and start creating a filing system. Once you&rsquo;ve got everything under control, you switch to tidying. Now you just need to keep things clean or maybe switch things around that aren&rsquo;t working well.</p>\n<p>We tackled triage first. In specific, we wanted a way to filter down our list of tags, select a bundle, and add some of the filtered tags to that bundle.</p>\n<p>h2. Try it out</p>\n<p>To get started with <!-- raw HTML omitted -->Tag Better<!-- raw HTML omitted -->, you&rsquo;ll first need to log in with your Delicious username and password (more on that in a moment.)</p>\n<!-- raw HTML omitted -->\n<p>Once you&rsquo;re logged in, you&rsquo;ll see your tag bundles on the left and all your tags on the right. If you click a bundle, the tags that are included in that bundle are highlighted. Clicking a tag toggles its inclusion in the bundle. Changes in <!-- raw HTML omitted -->Tag Better<!-- raw HTML omitted --> are immediately reflected in Delicious.</p>\n<p>That&rsquo;s the core interaction. You can also logout, of course. And, if you feel the need, we offer a way to remove your bundle and tag data from our system&rsquo;s caches.</p>\n<p>We were just four short characters away from getting live filtering of your tags via the search box on the top right. Alex and I even got it working, but keyboard cat had already played us out at that point. I promise we&rsquo;ll add it as soon as judging is over!</p>\n<p>A couple other caveats: you might want to create a test bundle (in the Delicious UI) to play with, rather than one you&rsquo;ve already organized. I don&rsquo;t think there are problems in the code, but it never hurt to show caution. Also, IE support is probably &ldquo;interesting&rdquo;, at this point.</p>\n<p>h2. Trust</p>\n<p>Even though we need your Delicious username and password to edit bundles on your behalf, we have made sure to never store authentication information on our side. Your authentication data is stored in a cookie on your machine; if you don&rsquo;t like that, you should probably skip out on using Tag Better as a hosted app. If you delete that cookie, we won&rsquo;t operate on your data. Further, we&rsquo;ve added the ability for you to remove your bundle and tag data from our system. That&rsquo;s the only data that we save on our disks.</p>\n<p>I mentioned trust and your authentication data earlier. It&rsquo;s an important part of an application like this. We don&rsquo;t want to screw your bookmarks up, and you don&rsquo;t want us to do skeezy things with your bookmarks. Unfortunately, Delicious does not yet offer a delegated authentication API like Flickr and Twitter do. So, we&rsquo;ve got two options.</p>\n<p>On the one hand, you could trust us. This is up to you. I&rsquo;d like to think that if you&rsquo;ve met Alex, Chris or I, then you&rsquo;re happy to use the application knowing we&rsquo;ve got more amusing things to do than soil your bookmarks. Further, when the competition is over, we&rsquo;ll open the source repository up to the public. If you&rsquo;re a code-review sort of person, go nuts.</p>\n<p>On the other hand, you could run it yourself. Again, once the competition is over, we&rsquo;re going to release the code. Look over the readme, install the dependencies, and run it on your own hardware. Sleep safely at night knowing your password is safely ensconced on your personal machine.</p>\n<!-- raw HTML omitted -->\n<p>Tomorrow I&rsquo;ll talk a bit about the technology we used to make <!-- raw HTML omitted -->Tag Better<!-- raw HTML omitted -->. Until then, I hope you&rsquo;ll give it a try. If you have ideas for feedback, leave a comment here!</p>\n",
				"content_text": "Yesterday and today, I worked with <a href=\"http://www.handcoding.com/\">Alex Bischoff</a> and <a href=\"http://www.boldpx.com/\">Chris Griego</a> on a <a href=\"http://r09.railsrumble.com/\">Rails Rumble</a> project. In less than forty-eight hours, we set out to build a web application, using Ruby, from the ground up. While we didn't <a href=\"http://thatphoneguy.com/2008/06/18/not-this-quarter/\">boil the ocean</a>, we did come up with something interesting.\n\n<a href=\"http://tagbetter.r09.railsrumble.com/\">Tag Better</a> is the groundwork for an app that enhances one of our favorite, but often neglected, sites: <a href=\"http://delicious.com/\">del.icio.us</a>. Personally, I've tried other bookmarking tools such as a plain text file, <a href=\"http://c-command.com/eaglefiler/\">EagleFiler</a> and <a href=\"http://pinboard.in/\">pinboard.in</a> (which I think has an excellent chance of eclipsing Delicious). However, I've found myself back on Delicious, even after a hiatus.\n\nGiven Yahoo's unsteady stewardship of the site, we figured it's time to take matters in our own hands. Using their API, it's entirely possible for us to build enhancements on top of Delicious. We decided to do just that.\n\nh2. Triage and tidying\n\nWe started out from a gem of an idea that Chris had. When you're trying to better organize your tags and bundles in Delicious, there are two modes you might want to operate under. The first couple times, you need to do triage. Get stuff roughly into order, and start creating a filing system. Once you've got everything under control, you switch to tidying. Now you just need to keep things clean or maybe switch things around that aren't working well.\n\nWe tackled triage first. In specific, we wanted a way to filter down our list of tags, select a bundle, and add some of the filtered tags to that bundle.\n\nh2. Try it out\n\nTo get started with <a href=\"http://tagbetter.r09.railsrumble.com/\">Tag Better</a>, you'll first need to log in with your Delicious username and password (more on that in a moment.)\n\n<div class=\"contentcolumn alignright\">\n<img src=\"http://therealadam.com/wp-content/uploads/2009/08/tag-better-e28093-makes-delicious-tagging-better.png\" alt=\"Tag Better – Makes Delicious Tagging Better.png\" border=\"0\" width=\"250\" />\n</div>\n\nOnce you're logged in, you'll see your tag bundles on the left and all your tags on the right. If you click a bundle, the tags that are included in that bundle are highlighted. Clicking a tag toggles its inclusion in the bundle. Changes in <a href=\"http://tagbetter.r09.railsrumble.com/\">Tag Better</a> are immediately reflected in Delicious.\n\nThat's the core interaction. You can also logout, of course. And, if you feel the need, we offer a way to remove your bundle and tag data from our system's caches.\n\nWe were just four short characters away from getting live filtering of your tags via the search box on the top right. Alex and I even got it working, but keyboard cat had already played us out at that point. I promise we'll add it as soon as judging is over!\n\nA couple other caveats: you might want to create a test bundle (in the Delicious UI) to play with, rather than one you've already organized. I don't think there are problems in the code, but it never hurt to show caution. Also, IE support is probably \"interesting\", at this point.\n\nh2. Trust\n\nEven though we need your Delicious username and password to edit bundles on your behalf, we have made sure to never store authentication information on our side. Your authentication data is stored in a cookie on your machine; if you don't like that, you should probably skip out on using Tag Better as a hosted app. If you delete that cookie, we won't operate on your data. Further, we've added the ability for you to remove your bundle and tag data from our system. That's the only data that we save on our disks.\n\nI mentioned trust and your authentication data earlier. It's an important part of an application like this. We don't want to screw your bookmarks up, and you don't want us to do skeezy things with your bookmarks. Unfortunately, Delicious does not yet offer a delegated authentication API like Flickr and Twitter do. So, we've got two options.\n\nOn the one hand, you could trust us. This is up to you. I'd like to think that if you've met Alex, Chris or I, then you're happy to use the application knowing we've got more amusing things to do than soil your bookmarks. Further, when the competition is over, we'll open the source repository up to the public. If you're a code-review sort of person, go nuts.\n\nOn the other hand, you could run it yourself. Again, once the competition is over, we're going to release the code. Look over the readme, install the dependencies, and run it on your own hardware. Sleep safely at night knowing your password is safely ensconced on your personal machine.\n\n<hr />\n\nTomorrow I'll talk a bit about the technology we used to make <a href=\"http://tagbetter.r09.railsrumble.com/\">Tag Better</a>. Until then, I hope you'll give it a try. If you have ideas for feedback, leave a comment here!\n",
				"date_published": "2009-08-23T21:17:53-07:00",
				"url": "https://therealadam.com/2009/08/23/tag-better.html",
				"tags": ["Uncategorized"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/23/my-why-story.html",
				"title": "My Why Story",
				"content_html": "<p><!-- raw HTML omitted -->Chris Wanstrath<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I met Why The Lucky Stiff for the first time at SXSW 2006. By some odd cosmic occurrence, he was performing during the Interactive schedule. I&rsquo;m not sure the programming committee realized it would be a <em>performance</em> and not a panel. But there they were. All new material. Attempted audience interaction, subterfuged by the shoddy conference WiFi[1]. It was great.</p>\n<p>After The Thirsty Cups performed, I introduced myself. &ldquo;Hi, I&rsquo;m Adam, glad to meet you&rdquo;, etc. Then I came with my wildcard. Until I&rsquo;d met him and shook his hand, I&rsquo;d harbored a theory that Why was really an A-List celebrity, probably one from <em>Ocean&rsquo;s 11</em>, that was using an alter-ego identity to share his love of Ruby. He suggested that I was, in fact, Brad Pitt. Which may be true. But I like to think that he enjoyed my theory.</p>\n<!-- raw HTML omitted -->\n<p>One of my life-long pleasures has been making people laugh. Along those lines, a high watermark in that endeavor was when Why posted my zany Star Trek/Ruby sketch to Red Handed. I felt I had arrived; he praised my <!-- raw HTML omitted -->Picard<!-- raw HTML omitted --> impersonation!</p>\n<p>Life is good.</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;d somewhat forgotten this, but a lack of seriousness, in the &ldquo;I write weighty code, you should take me seriously&rdquo; sort of way, is my best guess as to what Why&rsquo;s schtick is. Lots of people have made a big deal about how unprofessional it is for him to just yank his code off the net, or about how his code was messy, stuff like this. They&rsquo;re missing the point. I think Why just wanted to have fun, with code, and spread the fun, with code.</p>\n<p>To an extent we, the community of developers who care about code and software, have forgotten how to have fun with what we do. Personally, I&rsquo;m going to get right back on that.</p>\n<p><!-- raw HTML omitted -->More: <!-- raw HTML omitted -->Rick Olson<!-- raw HTML omitted --> sent me <!-- raw HTML omitted -->a picture from SXSW 2006<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->Damon Clinkscales<!-- raw HTML omitted --> sent along <!-- raw HTML omitted -->some<!-- raw HTML omitted --> <!-- raw HTML omitted -->videos<!-- raw HTML omitted --> he took of the performance. Thanks, guys!<!-- raw HTML omitted --></p>\n<p>fn1. Even though SXSW was less than a thousand geeks at this time.</p>\n",
				"content_text": "<a href=\"http://ozmm.org/posts/his_name_is_robert_paulson.html\">Chris Wanstrath</a>:\n\n<blockquote>Now we can all stop obsessing about who we think he was and instead focus on who he actually was &ndash; a prolific and inspiring hacker.</blockquote>\n\nI met Why The Lucky Stiff for the first time at SXSW 2006. By some odd cosmic occurrence, he was performing during the Interactive schedule. I'm not sure the programming committee realized it would be a _performance_ and not a panel. But there they were. All new material. Attempted audience interaction, subterfuged by the shoddy conference WiFi[1]. It was great.\n\nAfter The Thirsty Cups performed, I introduced myself. \"Hi, I'm Adam, glad to meet you\", etc. Then I came with my wildcard. Until I'd met him and shook his hand, I'd harbored a theory that Why was really an A-List celebrity, probably one from _Ocean's 11_, that was using an alter-ego identity to share his love of Ruby. He suggested that I was, in fact, Brad Pitt. Which may be true. But I like to think that he enjoyed my theory.\n\n<hr />\n\nOne of my life-long pleasures has been making people laugh. Along those lines, a high watermark in that endeavor was when Why posted my zany Star Trek/Ruby sketch to Red Handed. I felt I had arrived; he praised my <a href=\"http://74.125.95.132/search?q=cache:GkDvnGoQ9FkJ:redhanded.hobix.com/2006/10/24.html+site:redhanded.hobix.com+adam+keys&amp;cd=2&amp;hl=en&amp;ct=clnk&amp;gl=us&amp;client=safari\">Picard</a> impersonation!\n\nLife is good.\n\n<hr />\n\nI'd somewhat forgotten this, but a lack of seriousness, in the \"I write weighty code, you should take me seriously\" sort of way, is my best guess as to what Why's schtick is. Lots of people have made a big deal about how unprofessional it is for him to just yank his code off the net, or about how his code was messy, stuff like this. They're missing the point. I think Why just wanted to have fun, with code, and spread the fun, with code.\n\nTo an extent we, the community of developers who care about code and software, have forgotten how to have fun with what we do. Personally, I'm going to get right back on that.\n\n<ins>More: <a href=\"http://techno-weenie.net/\">Rick Olson</a> sent me <a href=\"http://www.flickr.com/photos/the-owens/113327501/\">a picture from SXSW 2006</a>, and <a href=\"http://damonc.com/\">Damon Clinkscales</a> sent along <a href=\"http://blip.tv/file/19112/\">some</a> <a href=\"http://blip.tv/file/19396\">videos</a> he took of the performance. Thanks, guys!</ins>\n\nfn1. Even though SXSW was less than a thousand geeks at this time.\n",
				"date_published": "2009-08-23T08:17:15-07:00",
				"url": "https://therealadam.com/2009/08/23/my-why-story.html",
				"tags": ["Expanded ideas","rubyconf","why_the_lucky_stiff"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/21/fun.html",
				"title": "Fun",
				"content_html": "<p>Cannonball Adderley:</p>\n<!-- raw HTML omitted -->\n<p>Here&rsquo;s to mellow times. Seemed appropriate for a Friday.</p>\n",
				"content_text": "Cannonball Adderley:\n\n<blockquote>\nIt's called \"Fun\". F-U-N, fun. That's something you can do, when everything is mellow.\n</blockquote>\n\nHere's to mellow times. Seemed appropriate for a Friday.\n",
				"date_published": "2009-08-21T04:33:21-07:00",
				"url": "https://therealadam.com/2009/08/21/fun.html",
				"tags": ["Music","Pop Culture","quotes","fun"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/18/the-mystery-of.html",
				"title": "The mystery of good art",
				"content_html": "<p>The trick about good art is that it has some mystery, an unknown. The problem is that if you get too close to the art, you risk unraveling the mystery. If you deconstruct it, engage it, or study it, the unknown becomes known. Thus, if I really enjoy a song (in particular), movie, etc. I stay away from taking it apart to see how it works. I&rsquo;d rather enjoy it for a long time.</p>\n<!-- raw HTML omitted -->\n<p>I have this problem where I over-listen to an album. It started in my teenage years. I learned all the bass-lines for Pearl Jam&rsquo;s <em>Ten</em>. After that, I couldn&rsquo;t listen to the album for ten years; I knew all the secrets, all the interesting bits. Rewind a year ago, and The Who&rsquo;s <em>Live At Leeds</em> was my jam. Now, I can&rsquo;t listen to it.</p>\n<p>But I&rsquo;ve been very rigorous about listening to Bruce Springteen&rsquo;s <em>Born To Run</em>. It is such a perfect piece that I only allow myself to listen to it once a month[1]. No more. Similarly, I won&rsquo;t let myself learn to play any of the songs on the guitar. I want to maintain that mystery.</p>\n<!-- raw HTML omitted -->\n<p>I wonder if there is other art like this. Could you get overexposed to a Mondrian painting or a Hemingway book? Even with works that are more popular in their sensibilities, is it possible? Is there such a thing as too much <em>Starry Night</em> or <em>Ghostbusters</em>?[2]</p>\n<p>The bottom line: enjoy good art, but take care not to over-enjoy it.</p>\n<p>fn1. I even feel like I&rsquo;m cheating if I listen to Born To Run in anything but album-form. To hear &ldquo;Thunder Road&rdquo; or &ldquo;Jungleland&rdquo; by itself feels incomplete, like I&rsquo;m missing something.</p>\n<p>fn2. Yes, I just put these on the same level, even though I&rsquo;m not much of a van Gogh aficionado.</p>\n",
				"content_text": "The trick about good art is that it has some mystery, an unknown. The problem is that if you get too close to the art, you risk unraveling the mystery. If you deconstruct it, engage it, or study it, the unknown becomes known. Thus, if I really enjoy a song (in particular), movie, etc. I stay away from taking it apart to see how it works. I'd rather enjoy it for a long time.\n\n<hr />\n\nI have this problem where I over-listen to an album. It started in my teenage years. I learned all the bass-lines for Pearl Jam's _Ten_. After that, I couldn't listen to the album for ten years; I knew all the secrets, all the interesting bits. Rewind a year ago, and The Who's _Live At Leeds_ was my jam. Now, I can't listen to it.\n\nBut I've been very rigorous about listening to Bruce Springteen's _Born To Run_. It is such a perfect piece that I only allow myself to listen to it once a month[1]. No more. Similarly, I won't let myself learn to play any of the songs on the guitar. I want to maintain that mystery.\n\n<hr />\n\nI wonder if there is other art like this. Could you get overexposed to a Mondrian painting or a Hemingway book? Even with works that are more popular in their sensibilities, is it possible? Is there such a thing as too much _Starry Night_ or _Ghostbusters_?[2]\n\nThe bottom line: enjoy good art, but take care not to over-enjoy it.\n\nfn1. I even feel like I'm cheating if I listen to Born To Run in anything but album-form. To hear \"Thunder Road\" or \"Jungleland\" by itself feels incomplete, like I'm missing something.\n\nfn2. Yes, I just put these on the same level, even though I'm not much of a van Gogh aficionado.\n",
				"date_published": "2009-08-18T05:23:52-07:00",
				"url": "https://therealadam.com/2009/08/18/the-mystery-of.html",
				"tags": ["Music","Pop Culture","creative"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/14/testify.html",
				"title": "Testify",
				"content_html": "<p>Two unrelated and great songs, one title.</p>\n<p>&ldquo;Testify&rdquo; by Parliament</p>\n<!-- raw HTML omitted -->\n<p>&ldquo;Testify&rdquo; by Stevie Ray Vaughn</p>\n<!-- raw HTML omitted -->\n<p>Enjoy!</p>\n",
				"content_text": "Two unrelated and great songs, one title.\n\n\"Testify\" by Parliament\n\n<div class=\"contentcolumn aligncenter\">\n[youtube=http://www.youtube.com/watch?v=v-OZ-M2y0Ao&amp;hl=en&amp;fs=1&amp;rel=0&amp;hd=1]\n</div>\n\n\"Testify\" by Stevie Ray Vaughn\n\n<div class=\"contentcolumn aligncenter\">\n[youtube=http://www.youtube.com/watch?v=cR2VEvfvC9I&amp;hl=en&amp;fs=1&amp;rel=0&amp;hd=1]\n</div>\n\nEnjoy!\n",
				"date_published": "2009-08-14T12:38:52-07:00",
				"url": "https://therealadam.com/2009/08/14/testify.html",
				"tags": ["Music","Pop Culture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/12/working-from-home.html",
				"title": "Working from home, better",
				"content_html": "<p><!-- raw HTML omitted -->Tips for working alone<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I do this too. I find it&rsquo;s pretty handy for focusing my thoughts and bringing ideas out.</p>\n<p>Some other things I&rsquo;ve done working from home the past year or so:</p>\n<ul>\n<li><!-- raw HTML omitted -->Put as many distractions as possible in another room<!-- raw HTML omitted -->. Get the TV, Xbox, etc. out of your workspace.</li>\n<li><!-- raw HTML omitted -->Keep it clean.<!-- raw HTML omitted --> Nothing is more distracting, to me, than mess and clutter.</li>\n<li><!-- raw HTML omitted -->Take a nap!<!-- raw HTML omitted --> I&rsquo;ve become a regular nap taker lately, right after lunch; it&rsquo;s noticeable the improvement it brings.</li>\n<li><!-- raw HTML omitted -->Use Twitter, IRC, Campfire, IM, etc. as your watercooler.<!-- raw HTML omitted --> Standard disclaimers apply - make sure your work/socializing blend is right.</li>\n<li><!-- raw HTML omitted -->Get out every once in a while.<!-- raw HTML omitted --> I try to get out to socialize with other geeks or get lunch with my wife at least twice a week.</li>\n</ul>\n<p>And remember, working from home isn&rsquo;t for everyone. If it&rsquo;s not for you, look into your local coworking space. (Dallas folks: give <!-- raw HTML omitted -->Cohabitat<!-- raw HTML omitted --> a try, it&rsquo;s great.)</p>\n",
				"content_text": "<a href=\"http://enjoymentland.com/2009/08/11/tips-for-working-alone/\">Tips for working alone</a>:\n\n<blockquote>\nThe other thing I&rsquo;m doing is bringing back my practice of writing &ldquo;daily pages&rdquo;&hellip; ~750 words a day to myself, that sort of help me get everything out in the open in my head and so that I can find a bit of clarity in my typically scrambled thoughts.\n</blockquote>\n\nI do this too. I find it's pretty handy for focusing my thoughts and bringing ideas out.\n\nSome other things I've done working from home the past year or so:\n\n* <strong>Put as many distractions as possible in another room</strong>. Get the TV, Xbox, etc. out of your workspace.\n* <strong>Keep it clean.</strong> Nothing is more distracting, to me, than mess and clutter.\n* <strong>Take a nap!</strong> I've become a regular nap taker lately, right after lunch; it's noticeable the improvement it brings.\n* <strong>Use Twitter, IRC, Campfire, IM, etc. as your watercooler.</strong> Standard disclaimers apply - make sure your work/socializing blend is right.\n* <strong>Get out every once in a while.</strong> I try to get out to socialize with other geeks or get lunch with my wife at least twice a week.\n\nAnd remember, working from home isn't for everyone. If it's not for you, look into your local coworking space. (Dallas folks: give <a href=\"http://cohabitat.us/\">Cohabitat</a> a try, it's great.)\n",
				"date_published": "2009-08-12T12:01:04-07:00",
				"url": "https://therealadam.com/2009/08/12/working-from-home.html",
				"tags": ["Expanded ideas","workflow"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/12/gird-your-greyscales.html",
				"title": "Gird your greyscales",
				"content_html": "<p>Logan Hicks has some really <!-- raw HTML omitted -->great<!-- raw HTML omitted --> <!-- raw HTML omitted -->subterranean<!-- raw HTML omitted --> <!-- raw HTML omitted -->photography<!-- raw HTML omitted --> going on. (Via <!-- raw HTML omitted -->Infrastructurist<!-- raw HTML omitted -->)</p>\n<p>And if you like that, you&rsquo;d probably also like some <!-- raw HTML omitted -->Russian submarines<!-- raw HTML omitted -->, <!-- raw HTML omitted -->their interiors<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->their underground bases<!-- raw HTML omitted -->.</p>\n<p>While we&rsquo;re dwelling on intriguing/depressing concrete structures: <!-- raw HTML omitted -->one dude&rsquo;s home built into a former missile silo<!-- raw HTML omitted --> and the <!-- raw HTML omitted -->Oak Ridge plant where the materials for the Manhattan Project were refined<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Logan Hicks has some really <a href=\"http://www.flickr.com/photos/loganhicks/sets/72157607160138492/\">great</a> <a href=\"http://www.flickr.com/photos/loganhicks/tags/subway/\">subterranean</a> <a href=\"http://www.flickr.com/photos/loganhicks/sets/72157621288249386/\">photography</a> going on. (Via <a href=\"http://www.infrastructurist.com/2009/08/11/abandoned-subway-stations-around-the-world-photo-gallery/\">Infrastructurist</a>)\n\nAnd if you like that, you'd probably also like some <a href=\"http://englishrussia.com/?p=2525\">Russian submarines</a>, <a href=\"http://englishrussia.com/?p=3888#more-3888\">their interiors</a>, and <a href=\"http://englishrussia.com/?p=1794\">their underground bases</a>.\n\nWhile we're dwelling on intriguing/depressing concrete structures: <a href=\"http://www.siloboy.com/site/Pages/myHomePage0.html\">one dude's home built into a former missile silo</a> and the <a href=\"http://www.photographyserved.com/Gallery/Slouching-towards-Bethlehem-___/56780\">Oak Ridge plant where the materials for the Manhattan Project were refined</a>.\n",
				"date_published": "2009-08-12T11:09:23-07:00",
				"url": "https://therealadam.com/2009/08/12/gird-your-greyscales.html",
				"tags": ["Curated","urbanism","Eye Candy","submarines"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/11/getting-to-know.html",
				"title": "Getting to know your bookshelf",
				"content_html": "<p><!-- raw HTML omitted -->The Book Stalker<!-- raw HTML omitted --> - Rands figures you out by your bookshelf:</p>\n<!-- raw HTML omitted -->\n<p>Here&rsquo;s mine from almost two years ago (<!-- raw HTML omitted -->plus more<!-- raw HTML omitted -->):</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>I&rsquo;ve since expanded to two shelves and look forward to the day when I can devote a whole wall to just reading. As I often tell myself as I sit down to start, &ldquo;reading is the best&rdquo;.</p>\n",
				"content_text": "<a href=\"http://www.randsinrepose.com/archives/2009/08/08/the_book_stalker.html\">The Book Stalker</a> - Rands figures you out by your bookshelf:\n\n<blockquote>\nWhere&rsquo;s your bookshelf? It&rsquo;s this awkward moment whenever I first walk into your home. Where is it? Everyone has one. It might not be huge. It might be hidden in a closet, but in decades of meeting new people, I&rsquo;ve never failed in finding one and when I do I consume it.\n</blockquote>\n\nHere's mine from almost two years ago (<a href=\"http://www.flickr.com/photos/therealadam/sets/72157603361768249/\">plus more</a>):\n\n<a href=\"http://www.flickr.com/photos/48889072931@N01/2082786872\" title=\"View 'Bookshelf, after' on Flickr.com\"><div class=\"aligncenter\"><img src=\"http://farm3.static.flickr.com/2410/2082786872_4b0b5f95f0.jpg\" alt=\"Bookshelf, after\" border=\"0\" width=\"375\" height=\"500\" /></div></a>\n\nI've since expanded to two shelves and look forward to the day when I can devote a whole wall to just reading. As I often tell myself as I sit down to start, \"reading is the best\".\n",
				"date_published": "2009-08-11T11:53:50-07:00",
				"url": "https://therealadam.com/2009/08/11/getting-to-know.html",
				"tags": ["Curated","Nerdery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/11/free-parking-is.html",
				"title": "Free Parking Is Not Free",
				"content_html": "<p><!-- raw HTML omitted -->Free Parking Isn&rsquo;t Free<!-- raw HTML omitted -->. Turns out those parking lots, while sometimes handy, are actually pretty gnarly, if your goal is to build a nice place to live:</p>\n<!-- raw HTML omitted -->\n<p>When I have more money that I know what to do with, I&rsquo;m going to start buying up parking lots and turning them into parks. It&rsquo;ll be my little way of sticking it to people who drive over-large cars.</p>\n",
				"content_text": "<a href=\"http://www.worldchanging.com/archives/010266.html\">Free Parking Isn't Free</a>. Turns out those parking lots, while sometimes handy, are actually pretty gnarly, if your goal is to build a nice place to live:\n\n<blockquote>\nThroughout the 1940s and 50s, as automobile use became prolific in the United States, parking became a problem, congesting streets and overflowing into neighbors&#x27; lots. In response, most municipalities instituted off-street parking minimums requiring developers to provide all the parking that the residences or shops would need on-site. This seemingly sensible notion has created a cascade of problems. It encourages sprawl by spreading buildings apart to make room for more parking (requirements usually demand more area for parking than the building it supports). It also weakens urban design, as urban buildings are torn down to make room for desolate surface lots, and hulking parking garages sprouted in downtown areas. It discourages revitalization of existing historic buildings, since developers have trouble meeting modern parking requirements in neighborhoods that were built before auto dominance. And the requirements drive up the cost of development: parking spaces can cost between $10,000 and $50,000 &ndash; typically more than the cost of the car that occupies it. High parking requirements can raise the price of homes and apartments by $50,000 to $100,000, a serious challenge to affordability.\n</blockquote>\n\nWhen I have more money that I know what to do with, I'm going to start buying up parking lots and turning them into parks. It'll be my little way of sticking it to people who drive over-large cars.\n",
				"date_published": "2009-08-11T10:02:00-07:00",
				"url": "https://therealadam.com/2009/08/11/free-parking-is.html",
				"tags": ["Curated","The System","urbanism"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/10/kill-your-menubar.html",
				"title": "Kill your menubar darlings",
				"content_html": "<p><!-- raw HTML omitted -->The Menubar Challenge<!-- raw HTML omitted --> - everybody, clear out your menubars! It&rsquo;s one of my secret productivity weapons, I highly recommend it. Also, read everything on <!-- raw HTML omitted -->Minimal Mac<!-- raw HTML omitted -->; it&rsquo;s the best.</p>\n<p>Here&rsquo;s my current attempt to use as little as possible in my menubar:</p>\n<!-- raw HTML omitted -->\n<p>LittleSnapper normally isn&rsquo;t running, so that doesn&rsquo;t count. If I could, I would run DropBox and FastScripts without menubar icons. I&rsquo;m still not sure I like having a clock visible at all times, but at least analog clocks are classy-lookin'. I&rsquo;d love to remove the battery icon, but it appears doing so disables the &ldquo;your battery is tapped&rdquo; warnings, leading to spontaneous laptop sleeping.</p>\n",
				"content_text": "<a href=\"http://minimalmac.com/post/159796749/the-menubar-challenge\">The Menubar Challenge</a> - everybody, clear out your menubars! It's one of my secret productivity weapons, I highly recommend it. Also, read everything on <a href=\"http://minimalmac.com\">Minimal Mac</a>; it's the best.\n\nHere's my current attempt to use as little as possible in my menubar:\n\n<div class=\"aligncenter\"><img src=\"http://therealadam.com/wp-content/uploads/2009/08/os-x-menubar.png\" alt=\"OS X menubar.png\" border=\"0\" width=\"303\" height=\"44\" /></div>\n\nLittleSnapper normally isn't running, so that doesn't count. If I could, I would run DropBox and FastScripts without menubar icons. I'm still not sure I like having a clock visible at all times, but at least analog clocks are classy-lookin'. I'd love to remove the battery icon, but it appears doing so disables the \"your battery is tapped\" warnings, leading to spontaneous laptop sleeping.\n",
				"date_published": "2009-08-10T08:01:41-07:00",
				"url": "https://therealadam.com/2009/08/10/kill-your-menubar.html",
				"tags": ["Curated","Expanded ideas","workflow"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/10/my-setup.html",
				"title": "My setup",
				"content_html": "<p>Shawn Blanc has been cataloging <!-- raw HTML omitted -->sweet Mac setups<!-- raw HTML omitted -->. Last week, he published <!-- raw HTML omitted -->a description of my own creative den<!-- raw HTML omitted -->. If you find this sort of thing as intriguing as I do, also check out <!-- raw HTML omitted -->The Setup<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Shawn Blanc has been cataloging <a href=\"http://shawnblanc.net/sweet-mac-setups/\">sweet Mac setups</a>. Last week, he published <a href=\"http://shawnblanc.net/2009/08/keys-mac-setup/\">a description of my own creative den</a>. If you find this sort of thing as intriguing as I do, also check out <a href=\"http://usesthis.com/\">The Setup</a>.\n",
				"date_published": "2009-08-10T06:44:08-07:00",
				"url": "https://therealadam.com/2009/08/10/my-setup.html",
				"tags": ["Curated","Nerdery","workflow","creative"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/03/balmer-tarkin.html",
				"title": "Balmer =~ Tarkin",
				"content_html": "<p>Steve Ballmer:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->OK, maybe that&rsquo;s Grand Moff Tarkin<!-- raw HTML omitted -->. Either way, I&rsquo;m considering this my birthday present from John Gruber.</p>\n",
				"content_text": "Steve Ballmer:\n\n<blockquote>Evacuate? In our moment of triumph? I think you overestimate their chances.</blockquote>\n\n<a href=\"http://daringfireball.net/linked/2009/07/31/ballmer-tarkin\">OK, maybe that's Grand Moff Tarkin</a>. Either way, I'm considering this my birthday present from John Gruber.\n",
				"date_published": "2009-08-03T08:26:52-07:00",
				"url": "https://therealadam.com/2009/08/03/balmer-tarkin.html",
				"tags": ["Curated","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/08/01/code-reuse-as.html",
				"title": "Code re-use as technical debt",
				"content_html": "<p>I have extremely mixed feelings about code re-use. I think it&rsquo;s largely a red herring, never working out as well as developers would hope. After all, developers are like golfers; always optimistic about how well an approach will\nwork or how far down the fairway their ball landed.</p>\n<p>But here&rsquo;s a real stab in the side of code re-use: in many cases, it&rsquo;s tantamount to technical debt. <!-- raw HTML omitted -->Embrace technical debt<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Using someone else&rsquo;s code will help you keep moving now, but you stand a good chance of needing to rewrite it later.</p>\n<p>That&rsquo;s not to say it&rsquo;s all bad. By the time you know you need to replace someone else&rsquo;s code, you&rsquo;ll have learned about the domain it covers and how you need to solve that problem in <!-- raw HTML omitted -->your<!-- raw HTML omitted --> domain.</p>\n<p>Keep it in mind: just because you can drop someone else&rsquo;s code into your app and use it, doesn&rsquo;t mean it&rsquo;s all roses and butterscotch.</p>\n",
				"content_text": "I have extremely mixed feelings about code re-use. I think it's largely a red herring, never working out as well as developers would hope. After all, developers are like golfers; always optimistic about how well an approach will\nwork or how far down the fairway their ball landed.\n\nBut here's a real stab in the side of code re-use: in many cases, it's tantamount to technical debt. <a href=\"http://startuplessonslearned.blogspot.com/2009/07/embrace-technical-debt.html\">Embrace technical debt</a>:\n\n<blockquote>\nFor example, early on at IMVU, we incorporated in tons of open source projects. This was a huge win (and we were delighted to give credit where it was due), because it allowed our initial products to get to market much faster. The downside was that we had to combine dozens of projects whose internal architectures, coding styles, and general quality varied widely. It took us a long time to pay off all the debt that incurred &ndash; but it was worth it.\n</blockquote>\n\nUsing someone else's code will help you keep moving now, but you stand a good chance of needing to rewrite it later.\n\nThat's not to say it's all bad. By the time you know you need to replace someone else's code, you'll have learned about the domain it covers and how you need to solve that problem in <strong>your</strong> domain.\n\nKeep it in mind: just because you can drop someone else's code into your app and use it, doesn't mean it's all roses and butterscotch.\n",
				"date_published": "2009-08-01T12:32:00-07:00",
				"url": "https://therealadam.com/2009/08/01/code-reuse-as.html",
				"tags": ["Uncategorized","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/24/rufustokyo-goes.html",
				"title": "rufus-tokyo goes 1.0.0",
				"content_html": "<p><!-- raw HTML omitted -->rufus-tokyo 1.0.0<!-- raw HTML omitted --> - I&rsquo;ve been tinkering with <!-- raw HTML omitted -->Tokyo Cabinet and Tyrant<!-- raw HTML omitted --> lately. It&rsquo;s great stuff. Grab this gem and start tinkering!</p>\n",
				"content_text": "<a href=\"http://jmettraux.wordpress.com/2009/07/23/rufus-tokyo-1-0-0/\">rufus-tokyo 1.0.0</a> - I've been tinkering with <a href=\"http://tokyocabinet.sourceforge.net/\">Tokyo Cabinet and Tyrant</a> lately. It's great stuff. Grab this gem and start tinkering!\n",
				"date_published": "2009-07-24T12:38:24-07:00",
				"url": "https://therealadam.com/2009/07/24/rufustokyo-goes.html",
				"tags": ["Uncategorized","ruby","post-relational"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/08/disastersploitation.html",
				"title": "Disastersploitation",
				"content_html": "<p>DISASTER!</p>\n<!-- raw HTML omitted -->\n<p>Crank that funk.</p>\n",
				"content_text": "DISASTER!\n\n<div class=\"contentcolumn aligncenter\"></div>\n\nCrank that funk.\n",
				"date_published": "2009-07-08T18:54:55-07:00",
				"url": "https://therealadam.com/2009/07/08/disastersploitation.html",
				"tags": ["Curated","Comedy, haha","humor"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/07/differently-hackish-keyword.html",
				"title": "Differently hackish keyword arguments for Ruby",
				"content_html": "<p><!-- raw HTML omitted -->maca&rsquo;s arguments<!-- raw HTML omitted --> - keyword arguments support for Ruby, now. Wickedly clever hack that does reflection on Ruby 1.9 and uses ParseTree for Ruby 1.8. Simpler than I thought it&rsquo;d be, I wish I&rsquo;d thought of that.</p>\n<p>Caveat: I haven&rsquo;t tried it yet. It might punch kittens. In fact, if you think parts of Ruby are &ldquo;too magical&rdquo;, this definitely punches kittens.</p>\n",
				"content_text": "<a href=\"http://github.com/maca/arguments/tree/master\">maca's arguments</a> - keyword arguments support for Ruby, now. Wickedly clever hack that does reflection on Ruby 1.9 and uses ParseTree for Ruby 1.8. Simpler than I thought it'd be, I wish I'd thought of that.\n\nCaveat: I haven't tried it yet. It might punch kittens. In fact, if you think parts of Ruby are \"too magical\", this definitely punches kittens.\n",
				"date_published": "2009-07-07T09:08:04-07:00",
				"url": "https://therealadam.com/2009/07/07/differently-hackish-keyword.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/07/interviewing-to-seek.html",
				"title": "Interviewing to seek values",
				"content_html": "<p>Adam Wiggins, per usual, is on to something. <!-- raw HTML omitted -->Values<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;m starting to think that figuring what the other person puts a premium on is the most important part of a technical interview. Is the other person passionate in the same way you are? Are the things they obsess over complimentary to what you would rather gloss over? If the answer to these questions is yes, you&rsquo;ll probably make awesome things together.</p>\n",
				"content_text": "Adam Wiggins, per usual, is on to something. <a href=\"http://adam.blog.heroku.com/past/2009/6/23/values/\">Values</a>:\n\n<blockquote>\nSharing values is the most important part of effective collaboration. If you don&rsquo;t have significant overlap on values between you and your teammates, you&rsquo;re going to have a tough time getting anything accomplished.\n</blockquote>\n\nI'm starting to think that figuring what the other person puts a premium on is the most important part of a technical interview. Is the other person passionate in the same way you are? Are the things they obsess over complimentary to what you would rather gloss over? If the answer to these questions is yes, you'll probably make awesome things together.\n",
				"date_published": "2009-07-07T08:45:04-07:00",
				"url": "https://therealadam.com/2009/07/07/interviewing-to-seek.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/06/infinite-jest-and.html",
				"title": "Infinite Jest and fanatics",
				"content_html": "<p><!-- raw HTML omitted -->Infinite Jest on patriotism, fanatics, love, attachments, and temples<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I found this passage striking as well. On the one hand, Wallace writes great dialog. Even when most of the dialog is a monologue with ignored interjections by the other character. On the other hand, some great etymology and word-play here.</p>\n<p>And then there&rsquo;s the point: choose your core philosophies carefully. Is it really worthwhile to identify yourself as a Rails person, a libertarian, or a connoisseur of fart jokes?</p>\n<p>Side note: I&rsquo;m doing this whole <!-- raw HTML omitted -->Infinite Summer<!-- raw HTML omitted --> thing because, at my core, I enjoy the challenge of reading books that are just too long. This is very borderline hipster, so I promise never to refer to David Foster Wallace by his initials, because that&rsquo;s just confusing when you live in Dallas.</p>\n",
				"content_text": "<a href=\"http://enjoymentland.com/2009/07/04/infinite-jest-on-fanatics-love-attachments-and-temples/\">Infinite Jest on patriotism, fanatics, love, attachments, and temples</a>:\n\n<blockquote>\n&lsquo;Your U.S.A. word for fanatic, &ldquo;fanatic,&rdquo; do they teach you it comes from the Latin for &ldquo;temple&rdquo;? It is meaning, literally, &ldquo;worshipper at the temple.&rdquo;&lsquo;\n</blockquote>\n\nI found this passage striking as well. On the one hand, Wallace writes great dialog. Even when most of the dialog is a monologue with ignored interjections by the other character. On the other hand, some great etymology and word-play here.\n\nAnd then there's the point: choose your core philosophies carefully. Is it really worthwhile to identify yourself as a Rails person, a libertarian, or a connoisseur of fart jokes?\n\nSide note: I'm doing this whole <a href=\"http://infinitesummer.org/\">Infinite Summer</a> thing because, at my core, I enjoy the challenge of reading books that are just too long. This is very borderline hipster, so I promise never to refer to David Foster Wallace by his initials, because that's just confusing when you live in Dallas.\n",
				"date_published": "2009-07-06T20:34:01-07:00",
				"url": "https://therealadam.com/2009/07/06/infinite-jest-and.html",
				"tags": ["Curated","Reading List","infinite_jest"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/06/software-development-requires.html",
				"title": "Software development requires empathy",
				"content_html": "<p><!-- raw HTML omitted -->If You Want to Write Useful Software, You Have to Do Tech Support<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I have to remind myself, almost every day, that one of the the most important qualities I can possess as a developer is empathy. Primarily for the user, their cognitive load, and what they&rsquo;re trying to accomplish. But further, for the developer who comes to my code when I&rsquo;m done, the guy who operates it, and everyone else down the line.</p>\n",
				"content_text": "<a href=\"http://nick.typepad.com/blog/2009/06/if-you-want-to-write-useful-software-you-have-to-do-tech-support.html\">If You Want to Write Useful Software, You Have to Do Tech Support</a>:\n\n<blockquote>\nIt seems so obvious: if you want to develop software that&rsquo;s useful to people, you&rsquo;ve got to talk with them. But too many developers take the anti-social approach and consider customer support to be beneath their status. Besides, talking with customers would distract them from important code-slinging.\n</blockquote>\n\nI have to remind myself, almost every day, that one of the the most important qualities I can possess as a developer is empathy. Primarily for the user, their cognitive load, and what they're trying to accomplish. But further, for the developer who comes to my code when I'm done, the guy who operates it, and everyone else down the line.\n",
				"date_published": "2009-07-06T20:24:37-07:00",
				"url": "https://therealadam.com/2009/07/06/software-development-requires.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/06/instapaper-is-wonderful.html",
				"title": "Instapaper is wonderful",
				"content_html": "<p>I have loved <!-- raw HTML omitted -->Instapaper<!-- raw HTML omitted --> ever since I became aware of it. It fits perfectly into my workflow. There’s tons of stuff I want to read, but not just yet. Instapaper gives you a little bookmarklet to save these jewels for later when you’ve got more time to slow down and read a longer piece.</p>\n<p>When the accompanying <!-- raw HTML omitted -->iPhone<!-- raw HTML omitted --> app came out, I fell in love again. Instapaper is perfect for filling your interstitial time, which is something I often find myself when I fish my iPhone out of my pocket. Also, you have to check out the tilt-scrolling feature; every reading app should implement it.</p>\n<p>The love affair grew stronger recently. The newest version of the iPhone app came out boasting great improvements to the interaction design and new functionality that makes it an even better tool for occupying the time where you would otherwise find yourself day-dreaming[1].</p>\n<!-- raw HTML omitted -->\n<p>Firstly: a sort of light-weight feed reading mechanism. It’s not for every site out there; there’s a curated list of sites you can consume in this way. I went with The Economist, but noticed things like Wikipedia Featured, Wired, The New Yorker, and popular stories posted to Instapaper. Great idea.</p>\n<p>Next: <!-- raw HTML omitted -->folders<!-- raw HTML omitted -->. I’ve used it to organize my reading list into topics so that I can quickly go to whatever matches my mood or energy level. This functionality is present in the web app too, and Marco’s done a great job of making it really easy to set things up just the way you want.</p>\n<p>Finally: <!-- raw HTML omitted -->shared favorites<!-- raw HTML omitted -->. Peek into what other people have marked as great reading. Maybe it’s a cliche “social feature”, but I’m excited to see curated reading lists from my wonderful friends.</p>\n<p>In conclusion: <!-- raw HTML omitted -->Marco Ament<!-- raw HTML omitted --> is awesome, start using Instapaper and leave your username in the comments so I can read your stuff.</p>\n<p>fn1. For example, wondering why butterscotch is so awesome.</p>\n",
				"content_text": "I have loved <a href=\"http://www.instapaper.com/\">Instapaper</a> ever since I became aware of it. It fits perfectly into my workflow. There&rsquo;s tons of stuff I want to read, but not just yet. Instapaper gives you a little bookmarklet to save these jewels for later when you&rsquo;ve got more time to slow down and read a longer piece.\n\nWhen the accompanying <a href=\"http://www.instapaper.com/iphone\">iPhone</a> app came out, I fell in love again. Instapaper is perfect for filling your interstitial time, which is something I often find myself when I fish my iPhone out of my pocket. Also, you have to check out the tilt-scrolling feature; every reading app should implement it.\n\nThe love affair grew stronger recently. The newest version of the iPhone app came out boasting great improvements to the interaction design and new functionality that makes it an even better tool for occupying the time where you would otherwise find yourself day-dreaming[1].\n\n<div class=\"contentcolumn alignleft\"><a href=\"http://blog.instapaper.com/\">\n<img src=\"http://media.tumblr.com/M1Uu3MXnGd4ymx185Ne4deV5_r1_500.png\">\n</a>\n</div>\n\nFirstly: a sort of light-weight feed reading mechanism. It&rsquo;s not for every site out there; there&rsquo;s a curated list of sites you can consume in this way. I went with The Economist, but noticed things like Wikipedia Featured, Wired, The New Yorker, and popular stories posted to Instapaper. Great idea.\n\nNext: <a href=\"http://blog.instapaper.com/post/127749064\">folders</a>. I&rsquo;ve used it to organize my reading list into topics so that I can quickly go to whatever matches my mood or energy level. This functionality is present in the web app too, and Marco&rsquo;s done a great job of making it really easy to set things up just the way you want.\n\nFinally: <a href=\"http://blog.instapaper.com/post/127780342\">shared favorites</a>. Peek into what other people have marked as great reading. Maybe it&rsquo;s a cliche &ldquo;social feature&rdquo;, but I&rsquo;m excited to see curated reading lists from my wonderful friends.\n\nIn conclusion: <a href=\"http://articles.marco.org/about\">Marco Ament</a> is awesome, start using Instapaper and leave your username in the comments so I can read your stuff.\n\nfn1. For example, wondering why butterscotch is so awesome.\n",
				"date_published": "2009-07-06T05:23:51-07:00",
				"url": "https://therealadam.com/2009/07/06/instapaper-is-wonderful.html",
				"tags": ["Expanded ideas","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/07/01/haskell-modulo-excess.html",
				"title": "Haskell modulo excess theory",
				"content_html": "<p>My journey through Haskell is on something of a lull, but <!-- raw HTML omitted -->John Wiegley&rsquo;s<!-- raw HTML omitted --> got you covered. He&rsquo;s documented his own journey learning Haskell, and it&rsquo;s very accessible.</p>\n<p>John starts with <!-- raw HTML omitted -->simple stuff like Fibonacci sequences and splitting strings<!-- raw HTML omitted -->, then jumps straight into <!-- raw HTML omitted -->modeling Schroedinger&rsquo;s cat using a monad<!-- raw HTML omitted -->. Next he gets pretty practical, for Haskell at least: <!-- raw HTML omitted -->doing text manipulation ala scripting languages to drop command-line arguments<!-- raw HTML omitted --> and then to <!-- raw HTML omitted -->MacPorts packages<!-- raw HTML omitted -->. Finally, he reflects on <!-- raw HTML omitted -->thinking lazily<!-- raw HTML omitted --> and <!-- raw HTML omitted -->using infinite streams<!-- raw HTML omitted -->.</p>\n<p>If you&rsquo;ve been wondering what this lazy, pure, strongly typed functional thing is all about but keep falling asleep through the intense theoretical bits (there&rsquo;s a lot of it!), these are a great starting point.</p>\n",
				"content_text": "My journey through Haskell is on something of a lull, but <a href=\"http://www.newartisans.com/about-me.html\">John Wiegley's</a> got you covered. He's documented his own journey learning Haskell, and it's very accessible.\n\nJohn starts with <a href=\"http://www.newartisans.com/2009/03/journey-into-haskell-part-1.html\">simple stuff like Fibonacci sequences and splitting strings</a>, then jumps straight into <a href=\"http://www.newartisans.com/2009/03/journey-into-haskell-part-2.html\">modeling Schroedinger's cat using a monad</a>. Next he gets pretty practical, for Haskell at least: <a href=\"http://www.newartisans.com/2009/03/journey-into-haskell-part-3.html\">doing text manipulation ala scripting languages to drop command-line arguments</a> and then to <a href=\"http://www.newartisans.com/2009/03/journey-into-haskell-part-5.html\">MacPorts packages</a>. Finally, he reflects on <a href=\"http://www.newartisans.com/2009/03/functional-yet-lazy.html\">thinking lazily</a> and <a href=\"http://www.newartisans.com/2009/03/journey-into-haskell-part-6.html\">using infinite streams</a>.\n\nIf you've been wondering what this lazy, pure, strongly typed functional thing is all about but keep falling asleep through the intense theoretical bits (there's a lot of it!), these are a great starting point.\n",
				"date_published": "2009-07-01T19:04:42-07:00",
				"url": "https://therealadam.com/2009/07/01/haskell-modulo-excess.html",
				"tags": ["Curated","haskell"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/29/when-to-do.html",
				"title": "When to do test-driven development",
				"content_html": "<p>I believe that writing code using testing[1] as a design activity yields long-term benefits that make my life easier.</p>\n<p>Though I’m a strong believer, I’ve struggled with TDD in the past. I’ve found I get bogged down in keeping the red-green-refactor cycle going. Sometimes I have to work with code that is lacking sufficient tests, but I know I can’t boil the ocean before I proceed to whatever I’m <em>really</em> trying to do with the code. Other times, I’m not sure if I’m testing the right things; I could be missing tests in one place and writing too many tests in another.</p>\n<!-- raw HTML omitted -->\n<p>Last week, I read three insightful pieces and made one discovery of my own that deepened my understanding of the practice of TDD. Allow me to share.</p>\n<p>First off, <!-- raw HTML omitted -->Kent Beck has been exploring the phases in the life of a startup<!-- raw HTML omitted -->. The earliest stage is proving the idea. He later asserted that when you’re doing stuff like this, <!-- raw HTML omitted -->you can drop TDD<!-- raw HTML omitted -->, temporarily. I thought about this and it clicked. If you’re working on a prototype, where you’re trying to explore an idea and see if it works, you don’t want to iterate on the code, as TDD would have you do. You want to iterate on the <em>idea</em>. TDD will just slow you down.</p>\n<!-- raw HTML omitted -->\n<p>On the other end of the spectrum, you’ve got maintenance programming. Once a startup, company or project has proven their idea and shipped a system, you are maintaining software. Keeping it working, living, breathing. For this sort of development, where you’re making small, focused changes without adding significant functionality, <!-- raw HTML omitted -->Tim Bray pointed out that TDD is critical<!-- raw HTML omitted -->. Using it to drive the process of fixing bugs, cleaning up the system and adding minor functionality is really handy for figuring out if you’ve broken something in some dark corner. It also helps the next guy to do the same. It’s a win, and I suspect it’s the sweet-spot of TDD.</p>\n<p>If you imagine prototyping and maintenance as opposite ends of the software life-cycle spectrum, adding significant new features to existing software probably lies somewhere in the middle. You may need to “poke around” to decide if what you’re doing is right, like when you’re prototyping. But once you’re done, you want some way for others who have to maintain the software (such as yourself) to figure out what it’s supposed to do and whether assumptions have been broken.</p>\n<p>Then I read <!-- raw HTML omitted -->an anecdote by Uncle Bob about how he worked out an ambitious new feature in Fitnesse<!-- raw HTML omitted -->. He and his pair got a new feature working, celebrated, and called it a night. When he woke up, he realized they weren’t actually done; they still had to clean it up, by writing tests.</p>\n<!-- raw HTML omitted -->\n<p>This was the missing link, for me. Sometimes, you need to iterate on the idea first. If skipping the tests helps you, so it goes. Once you’ve got the idea working (and committed!), then start writing tests[2]. Once you’re happy with the structure and coverage of your code, you commit again and <em>then</em> push it to your peers[3].</p>\n<p>The crux of my revelation is this: you get the benefits of TDD-as-a-design-activity by doing it. <em>When</em> you do it is immaterial. You just <em>have</em> to do it.</p>\n<p>My own revelation is blindingly obvious in retrospect. If the going gets tough, proceed in this order: get it to work, write some tests for it, <em>then</em> clean up the code. Sometimes you can break this cycle if what you’re working on doesn’t take too much cognitive capacity. But if you overflow your mental buffer, you have to break it down into steps and work through the cycle. Failing to realize this was one of the causes of me bogging down in TDD.</p>\n<!-- raw HTML omitted -->\n<p>Adding context to answer the question of when you start writing tests is something I haven’t found much writing on until recently. I’m increasingly finding that considering the situation is a great ninja-move in my quest towards writing beautiful, useful code.</p>\n<p>fn1. Call it a test, example, behavior, or story. Whatever.</p>\n<p>fn2. Jim Weirich did a great presentation on <!-- raw HTML omitted -->how to backfill tests on existing code<!-- raw HTML omitted -->.</p>\n<p>fn3. Pardon the Git-centric terminology[4].</p>\n<p>fn4. If you are not already, please start using Git immediately.</p>\n",
				"content_text": "I believe that writing code using testing[1] as a design activity yields long-term benefits that make my life easier.\n\nThough I&rsquo;m a strong believer, I&rsquo;ve struggled with TDD in the past. I&rsquo;ve found I get bogged down in keeping the red-green-refactor cycle going. Sometimes I have to work with code that is lacking sufficient tests, but I know I can&rsquo;t boil the ocean before I proceed to whatever I&rsquo;m _really_ trying to do with the code. Other times, I&rsquo;m not sure if I&rsquo;m testing the right things; I could be missing tests in one place and writing too many tests in another.\n\n<h3>Three easy pieces</h3>\n\nLast week, I read three insightful pieces and made one discovery of my own that deepened my understanding of the practice of TDD. Allow me to share.\n\nFirst off, <a href=\"http://www.threeriversinstitute.org/blog/?p=252\">Kent Beck has been exploring the phases in the life of a startup</a>. The earliest stage is proving the idea. He later asserted that when you&rsquo;re doing stuff like this, <a href=\"http://www.threeriversinstitute.org/blog/?p=187\">you can drop TDD</a>, temporarily. I thought about this and it clicked. If you&rsquo;re working on a prototype, where you&rsquo;re trying to explore an idea and see if it works, you don&rsquo;t want to iterate on the code, as TDD would have you do. You want to iterate on the _idea_. TDD will just slow you down.\n\n<div class=\"content-column alignright\">\n<img src=\"http://farm1.static.flickr.com/23/29748491_1d438b550b_m_d.jpg\">\n</div>\n\nOn the other end of the spectrum, you&rsquo;ve got maintenance programming. Once a startup, company or project has proven their idea and shipped a system, you are maintaining software. Keeping it working, living, breathing. For this sort of development, where you&rsquo;re making small, focused changes without adding significant functionality, <a href=\"http://www.tbray.org/ongoing/When/200x/2009/06/23/TDD-Heresy\">Tim Bray pointed out that TDD is critical</a>. Using it to drive the process of fixing bugs, cleaning up the system and adding minor functionality is really handy for figuring out if you&rsquo;ve broken something in some dark corner. It also helps the next guy to do the same. It&rsquo;s a win, and I suspect it&rsquo;s the sweet-spot of TDD.\n\nIf you imagine prototyping and maintenance as opposite ends of the software life-cycle spectrum, adding significant new features to existing software probably lies somewhere in the middle. You may need to &ldquo;poke around&rdquo; to decide if what you&rsquo;re doing is right, like when you&rsquo;re prototyping. But once you&rsquo;re done, you want some way for others who have to maintain the software (such as yourself) to figure out what it&rsquo;s supposed to do and whether assumptions have been broken.\n\nThen I read <a href=\"http://blog.objectmentor.com/articles/2009/06/26/the-rush\">an anecdote by Uncle Bob about how he worked out an ambitious new feature in Fitnesse</a>. He and his pair got a new feature working, celebrated, and called it a night. When he woke up, he realized they weren&rsquo;t actually done; they still had to clean it up, by writing tests.\n\n<h3>Oh. Duh.</h3>\n\nThis was the missing link, for me. Sometimes, you need to iterate on the idea first. If skipping the tests helps you, so it goes. Once you&rsquo;ve got the idea working (and committed!), then start writing tests[2]. Once you&rsquo;re happy with the structure and coverage of your code, you commit again and _then_ push it to your peers[3].\n\nThe crux of my revelation is this: you get the benefits of TDD-as-a-design-activity by doing it. _When_ you do it is immaterial. You just *have* to do it.\n\nMy own revelation is blindingly obvious in retrospect. If the going gets tough, proceed in this order: get it to work, write some tests for it, _then_ clean up the code. Sometimes you can break this cycle if what you&rsquo;re working on doesn&rsquo;t take too much cognitive capacity. But if you overflow your mental buffer, you have to break it down into steps and work through the cycle. Failing to realize this was one of the causes of me bogging down in TDD.\n\n<h3>Context is everything. Always.</h3>\n\nAdding context to answer the question of when you start writing tests is something I haven&rsquo;t found much writing on until recently. I&rsquo;m increasingly finding that considering the situation is a great ninja-move in my quest towards writing beautiful, useful code.\n\nfn1. Call it a test, example, behavior, or story. Whatever.\n\nfn2. Jim Weirich did a great presentation on <a href=\"http://rubyconf2008.confreaks.com/the-ruby-code-review-a-play-in-three-acts.html\">how to backfill tests on existing code</a>.\n\nfn3. Pardon the Git-centric terminology[4].\n\nfn4. If you are not already, please start using Git immediately.\n",
				"date_published": "2009-06-29T07:15:09-07:00",
				"url": "https://therealadam.com/2009/06/29/when-to-do.html",
				"tags": ["Uncategorized","pragprog","tdd"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/29/a-slide-in.html",
				"title": "A slide in the workplace",
				"content_html": "<p>The Red Bull headquarters in London has a slide going between floors.</p>\n<!-- raw HTML omitted -->\n<p>I want to go to there. Photo credit: <!-- raw HTML omitted -->Alexander K<!-- raw HTML omitted -->.</p>\n",
				"content_text": "The Red Bull headquarters in London has a slide going between floors.\n\n<div class=\"content-column aligncenter\">\n<a href=\"http://www.flickr.com/photos/79428304@N00/261734665/\"><img src=\"http://farm1.static.flickr.com/91/261734665_3aa9fda29f_d.jpg\"></a>\n</div>\n\nI want to go to there. Photo credit: <a href=\"http://www.flickr.com/photos/79428304@N00/\">Alexander K</a>.\n",
				"date_published": "2009-06-29T06:30:15-07:00",
				"url": "https://therealadam.com/2009/06/29/a-slide-in.html",
				"tags": ["Curated","awesome","Eye Candy"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/23/super-mario-motors.html",
				"title": "Super Mario motors",
				"content_html": "<p>Too cool - <!-- raw HTML omitted -->Super Mario stepper motor music<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Of course, an <!-- raw HTML omitted -->Arduino<!-- raw HTML omitted --> is involved.</p>\n",
				"content_text": "Too cool - <a href=\"http://www.adafruit.com/blog/2009/06/22/super-mario-stepper-motor-music-with-the-help-of-an-arduino/\">Super Mario stepper motor music</a>:\n\n<div class=\"aligncenter\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=8L8hY8siUMQ&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1])\n</div>\n\nOf course, an <a href=\"http://arduino.cc/\">Arduino</a> is involved.\n",
				"date_published": "2009-06-23T07:01:22-07:00",
				"url": "https://therealadam.com/2009/06/23/super-mario-motors.html",
				"tags": ["Curated","Nerdery","arduino"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/22/meaningful-work.html",
				"title": "Meaningful work",
				"content_html": "<p><!-- raw HTML omitted -->Going to meaningful work<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Buster&rsquo;s on to something here. He&rsquo;s articulating one of the qualities I find in the best developers: what they do has meaning and matters to their personality. They are working to make things that result in greater happiness for themselves and others. Their passion is manifest in the quality of their code.</p>\n<p>You should also check out <!-- raw HTML omitted -->Buster&rsquo;s personal site<!-- raw HTML omitted -->. He&rsquo;s got a neat info-graphics, personal data-mining thing going on there.</p>\n",
				"content_text": "<a href=\"http://enjoymentland.com/2009/06/22/going-to-meaningful-work/\">Going to meaningful work</a>:\n\n<blockquote>\nJust like being awake is more than just having your eyes open, going to work should be more than just being at a workplace trading time for money. It should be meaningful. But where does meaning come from? Of course, it comes from ourselves. We put meaning into things, and share our meanings with others, and teach each other how to build meaning out of what is in front of us.\n</blockquote>\n\nBuster's on to something here. He's articulating one of the qualities I find in the best developers: what they do has meaning and matters to their personality. They are working to make things that result in greater happiness for themselves and others. Their passion is manifest in the quality of their code.\n\nYou should also check out <a href=\"http://busterbenson.com/\">Buster's personal site</a>. He's got a neat info-graphics, personal data-mining thing going on there.\n",
				"date_published": "2009-06-22T07:32:59-07:00",
				"url": "https://therealadam.com/2009/06/22/meaningful-work.html",
				"tags": ["Uncategorized","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/21/breaking-with-tradition.html",
				"title": "Breaking with tradition",
				"content_html": "<p>For the like-minded aficionados of the non-traditional: <!-- raw HTML omitted -->A Redis implementation of Twitter<!-- raw HTML omitted -->, designed for learning about non-relational datastores and Clojure&rsquo;s creator <!-- raw HTML omitted -->Rich Hickey on state<!-- raw HTML omitted --> (bonus track: <!-- raw HTML omitted -->Jonas Boner on the same<!-- raw HTML omitted -->). <!-- raw HTML omitted -->Derek Sivers on the fatal determinism of declaring a goal<!-- raw HTML omitted --> or as I like to say, &ldquo;the reason you find so many weblogs with one post promising to post a lot&rdquo;. Michael Heilemann on the <!-- raw HTML omitted -->lack of good fiction in contemporary games<!-- raw HTML omitted -->.</p>\n",
				"content_text": "For the like-minded aficionados of the non-traditional: <a href=\"http://danlucraft.com/blog/2009/05/learning-about-redis-through-writing-a-twitter-clone/\">A Redis implementation of Twitter</a>, designed for learning about non-relational datastores and Clojure's creator <a href=\"http://clojure.org/state\">Rich Hickey on state</a> (bonus track: <a href=\"http://www.slideshare.net/jboner/state-youre-doing-it-wrong-javaone-2009\">Jonas Boner on the same</a>). <a href=\"http://sivers.org/zipit\">Derek Sivers on the fatal determinism of declaring a goal</a> or as I like to say, \"the reason you find so many weblogs with one post promising to post a lot\". Michael Heilemann on the <a href=\"http://binarybonsai.com/2009/06/17/them-games/\">lack of good fiction in contemporary games</a>.\n",
				"date_published": "2009-06-21T18:39:15-07:00",
				"url": "https://therealadam.com/2009/06/21/breaking-with-tradition.html",
				"tags": ["Pop Culture","Curated","Expanded ideas","lifehacks","pragprog","Gaming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/09/the-joy-of.html",
				"title": "The joy of enigmas",
				"content_html": "<!-- raw HTML omitted -->\n<p>— Joseph Conrad, <!-- raw HTML omitted -->Heart of Darkness<!-- raw HTML omitted --></p>\n",
				"content_text": "<blockquote>\n...thinking about an enigma. There it is before you&mdash;smiling, frowning, inviting, grand, mean, insipid, or savage, and always mute with an air of whispering, &lsquo;Come and find out.&rsquo;\n</blockquote>\n\n&mdash; Joseph Conrad, <em>Heart of Darkness</em>\n",
				"date_published": "2009-06-09T06:22:08-07:00",
				"url": "https://therealadam.com/2009/06/09/the-joy-of.html",
				"tags": ["Curated","The System","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/08/poisonous-people-and.html",
				"title": "Poisonous people and genius programmers",
				"content_html": "<p>Brian Fitzpatrick and Ben Collins-Sussman have done a couple great talks on probing the important social aspects of software development, especially in the open source arena. <!-- raw HTML omitted -->Open Source Projects and Poisonous People<!-- raw HTML omitted --> talks about how to survive &ldquo;that guy&rdquo; joining the community of your favorite project, be it open source or not. Their most recent jam, <!-- raw HTML omitted -->The Myth of the &ldquo;Genius Programmer&rdquo;<!-- raw HTML omitted -->,  tries to temper the romanticism that developers can magically put forth reams of brilliant code. By proceeding with humility, one can <!-- raw HTML omitted -->appear<!-- raw HTML omitted --> as a genius without all the hubris and potential for downfall.</p>\n<p>See also: my OSCON 2007 talk on <!-- raw HTML omitted -->PeopleHacks<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Brian Fitzpatrick and Ben Collins-Sussman have done a couple great talks on probing the important social aspects of software development, especially in the open source arena. <a href=\"http://www.youtube.com/watch?v=-F-3E8pyjFo\">Open Source Projects and Poisonous People</a> talks about how to survive \"that guy\" joining the community of your favorite project, be it open source or not. Their most recent jam, <a href=\"http://www.youtube.com/watch?v=0SARbwvhupQ\">The Myth of the \"Genius Programmer\"</a>,  tries to temper the romanticism that developers can magically put forth reams of brilliant code. By proceeding with humility, one can <em>appear</em> as a genius without all the hubris and potential for downfall.\n\nSee also: my OSCON 2007 talk on <a href=\"http://therealadam.com/presentations/oscon2007/PeopleHacks.pdf\">PeopleHacks</a>.\n",
				"date_published": "2009-06-08T07:15:55-07:00",
				"url": "https://therealadam.com/2009/06/08/poisonous-people-and.html",
				"tags": ["Curated","peoplehacks"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/03/meditations-on-golf.html",
				"title": "Meditations on golf",
				"content_html": "<p>We&rsquo;re just wrapping up that nice time of the year in Texas. Technically, we get two nice parts of the year: the one after &quot;winter&quot; and the one after <!-- raw HTML omitted -->SUMMER<!-- raw HTML omitted -->. It&rsquo;s nice in that you can sit outside with the dogs and just enjoy the air, the sounds and the fact you can sit idly without wishing you were in a climate-controlled environment.</p>\n<p>This year I&rsquo;m actually taking advantage of this part of the year by golfing. All the public courses are blooming: the fairways are green, the bunkers are as sandy as they&rsquo;ll get and the greens are in peak condition.</p>\n<p>My golf game is improving; a novel experience. I’m hitting some fairways, some greens and making the occasional nice putt. It’s like seeing an investment pay out. Hopefully I’ll finish the summer hitting under 100 on a regular basis.</p>\n<p>Golf is nice, for me, because it’s as close as I get to meditation. I don&rsquo;t think about code, politics, or finance. I just think about the previous shot and the next shot. In fact, the less I think, the better I do. Golf is my chance to attempt nihlism.</p>\n<p>Golf is relaxing. It’s a little vacation. I sometimes see guys out with their wives. They’re doing it wrong. The point of golf is to spend some time away from everything. By this definition, professionals like Tiger Woods are doing it wrong too. Maybe I’m on to something here.</p>\n<p>There&rsquo;s a moment in my game, somewhere on the last three holes, where I realize I’m going to have to go back to being responsible. This moment is like hitting a bad shot; you think you can do better. On the other hand, it takes a long time to play eighteen holes, so getting back to responsibility is a good thing.</p>\n<p>What would I do if I didn’t play golf? I don&rsquo;t know. Golf, as lame as a lot of people think it is, does good things for my brain. Maybe that explains my obsession/addiction. Luckily, I’ve given up my <!-- raw HTML omitted -->Call of Duty 4<!-- raw HTML omitted --> addition. This <!-- raw HTML omitted -->Old Republic<!-- raw HTML omitted --> game could prove troublesome though&hellip;</p>\n",
				"content_text": "We're just wrapping up that nice time of the year in Texas. Technically, we get two nice parts of the year: the one after &quot;winter&quot; and the one after <strong>SUMMER</strong>. It's nice in that you can sit outside with the dogs and just enjoy the air, the sounds and the fact you can sit idly without wishing you were in a climate-controlled environment.\n\nThis year I'm actually taking advantage of this part of the year by golfing. All the public courses are blooming: the fairways are green, the bunkers are as sandy as they'll get and the greens are in peak condition.\n\nMy golf game is improving; a novel experience. I&rsquo;m hitting some fairways, some greens and making the occasional nice putt. It&rsquo;s like seeing an investment pay out. Hopefully I&rsquo;ll finish the summer hitting under 100 on a regular basis.\n\nGolf is nice, for me, because it&rsquo;s as close as I get to meditation. I don't think about code, politics, or finance. I just think about the previous shot and the next shot. In fact, the less I think, the better I do. Golf is my chance to attempt nihlism.\n\nGolf is relaxing. It&rsquo;s a little vacation. I sometimes see guys out with their wives. They&rsquo;re doing it wrong. The point of golf is to spend some time away from everything. By this definition, professionals like Tiger Woods are doing it wrong too. Maybe I&rsquo;m on to something here.\n\nThere's a moment in my game, somewhere on the last three holes, where I realize I&rsquo;m going to have to go back to being responsible. This moment is like hitting a bad shot; you think you can do better. On the other hand, it takes a long time to play eighteen holes, so getting back to responsibility is a good thing.\n\nWhat would I do if I didn&rsquo;t play golf? I don't know. Golf, as lame as a lot of people think it is, does good things for my brain. Maybe that explains my obsession/addiction. Luckily, I&rsquo;ve given up my <em>Call of Duty 4</em> addition. This <em>Old Republic</em> game could prove troublesome though...\n",
				"date_published": "2009-06-03T17:19:08-07:00",
				"url": "https://therealadam.com/2009/06/03/meditations-on-golf.html",
				"tags": ["golf","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/02/visualizing-language-tradeoffs.html",
				"title": "Visualizing language trade-offs",
				"content_html": "<p>Guillaume Marceau has done some excellent work crafting the data from the venerable <!-- raw HTML omitted -->Computer Language Benchmark Game<!-- raw HTML omitted --> into visualizations that quickly show the trade-offs of using each language. <!-- raw HTML omitted -->The speed, size and dependability of programming languages<!-- raw HTML omitted --> puts each language in a small graph that simultaneously shows the execution speed and program size of each test for every language. From there, the characteristics of each language is manifest. He then goes on to consider whether functional languages display unique performance/size characteristics.</p>\n<p>This is a must-read. It&rsquo;s also great information design, proving that programming language esoterica needn&rsquo;t bore the reader.</p>\n",
				"content_text": "Guillaume Marceau has done some excellent work crafting the data from the venerable <a href=\"http://shootout.alioth.debian.org/\">Computer Language Benchmark Game</a> into visualizations that quickly show the trade-offs of using each language. <a href=\"http://gmarceau.qc.ca/blog/2009/05/speed-size-and-dependability-of.html\">The speed, size and dependability of programming languages</a> puts each language in a small graph that simultaneously shows the execution speed and program size of each test for every language. From there, the characteristics of each language is manifest. He then goes on to consider whether functional languages display unique performance/size characteristics.\n\nThis is a must-read. It's also great information design, proving that programming language esoterica needn't bore the reader.\n",
				"date_published": "2009-06-02T08:37:33-07:00",
				"url": "https://therealadam.com/2009/06/02/visualizing-language-tradeoffs.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/01/thats-the-second.html",
				"title": "That\u0026#039;s the second biggest monkey head I\u0026#039;ve ever seen",
				"content_html": "<p>A thousand times yes! <!-- raw HTML omitted -->The Secret of Monkey Island<!-- raw HTML omitted -->, revisited. My eleven-year old self is jumping with glee. Awkwardly.</p>\n<p>See also, <!-- raw HTML omitted -->ScummC<!-- raw HTML omitted --> and <!-- raw HTML omitted -->The Secret of Monkey Island, The Play<!-- raw HTML omitted -->.</p>\n",
				"content_text": "A thousand times yes! <a href=\"http://www.lucasarts.com/games/monkeyisland/\">The Secret of Monkey Island</a>, revisited. My eleven-year old self is jumping with glee. Awkwardly.\n\nSee also, <a href=\"http://therealadam.com/archive/2008/04/23/aye-ye-are-a-scum/\">ScummC</a> and <a href=\"http://www.youtube.com/watch?v=R91iBFsdrvI\">The Secret of Monkey Island, The Play</a>.\n",
				"date_published": "2009-06-01T15:57:19-07:00",
				"url": "https://therealadam.com/2009/06/01/thats-the-second.html",
				"tags": ["Pop Culture","Curated","monkey_island","Gaming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/06/01/how-did-sql.html",
				"title": "How did SQL get so popular?",
				"content_html": "<p>Many developers, especially of the younger generation, dislike relational databases and their business-partner, SQL. It is regarded by some as the new assembly language. With all this distaste going around, how did it gain such a strong foothold in industry?</p>\n<p>I offer you two answers: ACID and surface area.</p>\n<!-- raw HTML omitted -->\n<p>Atomicity, consistency, isolation and durability. It’s not something most folks want to think about. To a rookie developer, it’s overwhelming. They’re not yet familiar with the <!-- raw HTML omitted -->semantics<!-- raw HTML omitted --> of the systems their programs run upon. Is <!-- raw HTML omitted -->fread<!-- raw HTML omitted --> thread-safe? “How should I know, I just learned C last semester and about <!-- raw HTML omitted -->fread<!-- raw HTML omitted -->’s parameters last week!”</p>\n<p>The promises of a modern relational database include a compelling bullet point: your data is safe with us. Use our APIs, don’t break the rules, and we will make sure you never blow away some data and get a call at 3 AM. Rather, the DBA will, but what do you care about <!-- raw HTML omitted -->that<!-- raw HTML omitted --> guy?</p>\n<p>So I submit to you that most programmers don’t use databases because they’re great. Rather, they have come to rely upon them because the canonical tome on transactions is heavy enough to maim small mammals and rife with formalisms. So they skip the nine-hundred page textbook and pick up the six-hundred page O’Reilly book.</p>\n<!-- raw HTML omitted -->\n<p>Most programs that people will pay you to write involve side-effects. Further, many of those side-effects have to do with saving data off so you can perform further side-effects on it in the future.</p>\n<p>The rookie developer typically leans first to files. Files are familiar and pervasive. But files leave a lot to said rookie. How should I structure my data? How do I load and save the data? How do I manipulate the data once it’s in memory? Even in scripting languages, with their simplified APIs, this means the rookie is faced with APIs like this:</p>\n<!-- raw HTML omitted -->\n<p>When I was bit a wee lad o’ programming, I found this Gordian knot difficult to cut. But then, one day, I was told by a programmer of greater wisdom to use a database. That API looked like this:</p>\n<!-- raw HTML omitted -->\n<p>It was a lot easier to understand, even though the last four are a <!-- raw HTML omitted -->completely different language<!-- raw HTML omitted -->.</p>\n<p>So, I submit to you, that SQL also won because it was easier to understand how one might structure their programs, make them work and, if they’re lucky, get them to run quickly.</p>\n<!-- raw HTML omitted -->\n<p>I’d wager that five years from now, the generation of developers who are now upcoming won’t take the database tier for granted. Key-value stores, distributed file systems and document databases will all play into the question of “what do we do with the important data?” Sometimes, relational databases will prove useful. But increasingly, other things will too.</p>\n<p>In the end, there’s two ways to look at this: we will soon throw down the shackles of our relational overlords, or, prepare yourself for the database renaissance in programming fashion that will occur in a decade or so.</p>\n<p>Everyone wins!</p>\n",
				"content_text": "Many developers, especially of the younger generation, dislike relational databases and their business-partner, SQL. It is regarded by some as the new assembly language. With all this distaste going around, how did it gain such a strong foothold in industry?\n\nI offer you two answers: ACID and surface area.\n\n<h3>ACID</h3>\n\nAtomicity, consistency, isolation and durability. It&rsquo;s not something most folks want to think about. To a rookie developer, it&rsquo;s overwhelming. They&rsquo;re not yet familiar with the <em>semantics</em> of the systems their programs run upon. Is <code>fread</code> thread-safe? &ldquo;How should I know, I just learned C last semester and about <code>fread</code>&rsquo;s parameters last week!&rdquo;\n\nThe promises of a modern relational database include a compelling bullet point: your data is safe with us. Use our APIs, don&rsquo;t break the rules, and we will make sure you never blow away some data and get a call at 3 AM. Rather, the DBA will, but what do you care about <em>that</em> guy?\n\nSo I submit to you that most programmers don&rsquo;t use databases because they&rsquo;re great. Rather, they have come to rely upon them because the canonical tome on transactions is heavy enough to maim small mammals and rife with formalisms. So they skip the nine-hundred page textbook and pick up the six-hundred page O&rsquo;Reilly book.\n\n<h3>Surface Area</h3>\n\nMost programs that people will pay you to write involve side-effects. Further, many of those side-effects have to do with saving data off so you can perform further side-effects on it in the future.\n\nThe rookie developer typically leans first to files. Files are familiar and pervasive. But files leave a lot to said rookie. How should I structure my data? How do I load and save the data? How do I manipulate the data once it&rsquo;s in memory? Even in scripting languages, with their simplified APIs, this means the rookie is faced with APIs like this:\n\n<ul>\n<li><code>fopen</code></li>\n<li><code>fread</code></li>\n<li><code>fwrite</code></li>\n<li><code>seek</code></li>\n<li><code>fclose</code></li>\n<li><code>encode</code></li>\n<li><code>decode</code></li>\n<li><code>hash_set</code></li>\n<li><code>hash_get</code></li>\n</ul>\n\nWhen I was bit a wee lad o&rsquo; programming, I found this Gordian knot difficult to cut. But then, one day, I was told by a programmer of greater wisdom to use a database. That API looked like this:\n\n<ul>\n<li><code>connect</code></li>\n<li><code>execute</code></li>\n<li><code>fetch</code></li>\n<li><code>next</code></li>\n<li><code>select</code></li>\n<li><code>insert</code></li>\n<li><code>update</code></li>\n<li><code>delete</code></li>\n</ul>\n\nIt was a lot easier to understand, even though the last four are a <em>completely different language</em>.\n\nSo, I submit to you, that SQL also won because it was easier to understand how one might structure their programs, make them work and, if they&rsquo;re lucky, get them to run quickly.\n\n<h3>Inflection point</h3>\n\nI&rsquo;d wager that five years from now, the generation of developers who are now upcoming won&rsquo;t take the database tier for granted. Key-value stores, distributed file systems and document databases will all play into the question of &ldquo;what do we do with the important data?&rdquo; Sometimes, relational databases will prove useful. But increasingly, other things will too.\n\nIn the end, there&rsquo;s two ways to look at this: we will soon throw down the shackles of our relational overlords, or, prepare yourself for the database renaissance in programming fashion that will occur in a decade or so.\n\nEveryone wins!\n",
				"date_published": "2009-06-01T09:50:28-07:00",
				"url": "https://therealadam.com/2009/06/01/how-did-sql.html",
				"tags": ["Uncategorized","pragprog","languages","transactions"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/05/29/shippin-aint-easy.html",
				"title": "Shippin\u0026#39; ain\u0026#39;t easy",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Shippin&rsquo; web apps ain&rsquo;t easy. <a href=\"http://www.contrast.ie/blog/patience-and-hard-work/\">The Contrast guys lay it out</a>. Garrett Dimon shows <a href=\"http://nextupdate.com/blog/archives/2009/05/milestone-improvements/\">what goes into an iteration on Sifter</a>. My experience with Dash matches what these folks are saying: building web apps is exciting, but a lot of the work is below the waterline, per se. A lot of work goes into support and infrastructure, but doesn&rsquo;t manifest itself as new functionality.</p>\n\n\n<p>Neat because you can: <a href=\"http://enjoymentland.com/2009/05/28/turning-33-frugal-to-the-max/\">living frugally</a>, <a href=\"http://axono.me/\">JavaScript pixel art</a> and <a href=\"http://www.stevechamberlin.com/cpu/about/\">hand-built microprocessors</a>. Also, <a href=\"http://conal.net/blog/posts/the-c-language-is-purely-functional/\">C as a functional language</a> is nicer to think about than I&rsquo;d first thought. If you ever get bored, check out the C output of the <a href=\"http://www.haskell.org/ghc/;\">Glorious Glasgow Haskell Compiler</a> it doesn&rsquo;t even look like C. This makes my brain hurt even more.</p>\n\n\n<p>Finally, for future reference: my mantra for the week was &ldquo;cut the <a href=\"http://en.wikipedia.org/wiki/Gordian_knot&rdquo;\">Gordian knot</a>.&rdquo;</p>\n",
				"date_published": "2009-05-29T20:53:01-07:00",
				"url": "https://therealadam.com/2009/05/29/shippin-aint-easy.html",
				"tags": ["Expanded ideas","lifehacks","javascript","haskell","mantra"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/28/the-roots-on.html",
				"title": "The Roots on tour",
				"content_html": "<p><!-- raw HTML omitted -->24 Hours With The Roots<!-- raw HTML omitted --> - The Roots are totally my new bicycle lately.</p>\n",
				"content_text": "<a href=\"http://www.flickr.com/photos/melcole/sets/72157617133017100/\">24 Hours With The Roots</a> - The Roots are totally my new bicycle lately.\n",
				"date_published": "2009-04-28T15:12:03-07:00",
				"url": "https://therealadam.com/2009/04/28/the-roots-on.html",
				"tags": ["Music","Pop Culture","Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/27/design-its-important.html",
				"title": "Design: it\u0026#39;s important",
				"content_html": "<p><!-- raw HTML omitted -->Via Konigi<!-- raw HTML omitted -->, David Malouf:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://konigi.com/notebook/move-beyond-function-towards-connection\">Via Konigi</a>, David Malouf:\n\n<blockquote>\nGreat design in the end will give us something to relate to, to feel connected with, and to reinforce our humanity. Tapping that right balance between emotion and logic, chaos and control, analog and digital, is the key to this success. We can no longer rely on &ldquo;form follows function&rdquo;. Form has to be parallel to function, as function is growing in commodity.\n</blockquote>\n",
				"date_published": "2009-04-27T09:24:05-07:00",
				"url": "https://therealadam.com/2009/04/27/design-its-important.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/25/enjoy-some-wu.html",
				"title": "Enjoy some Wu",
				"content_html": "<p><!-- raw HTML omitted -->Ooh, baby, I like it raww&hellip;<!-- raw HTML omitted --> - Some Wu-Tang Clan for you. I&rsquo;ve been finding <!-- raw HTML omitted -->Yes Yes Y&rsquo;all<!-- raw HTML omitted --> [sic] an excellent source of music that I otherwise wouldn&rsquo;t come across.</p>\n",
				"content_text": "<a href=\"http://www.yesyesyall.org/index.php?id=574\">Ooh, baby, I like it raww...</a> - Some Wu-Tang Clan for you. I've been finding <a href=\"http://www.yesyesyall.org/index.php\">Yes Yes Y'all</a> [sic] an excellent source of music that I otherwise wouldn't come across.\n",
				"date_published": "2009-04-25T11:37:10-07:00",
				"url": "https://therealadam.com/2009/04/25/enjoy-some-wu.html",
				"tags": ["Music","Pop Culture","Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/24/put-your-objects.html",
				"title": "Put your objects in space",
				"content_html": "<p><!-- raw HTML omitted -->Space-based Architecture<!-- raw HTML omitted --> - on building and scaling your system with a <!-- raw HTML omitted -->tuple space<!-- raw HTML omitted -->, the kissing cousin of the messaging queue. I didn&rsquo;t know that tuple spaces are used much in finance apps, but I&rsquo;m not surprised. They&rsquo;re a worthy idea.</p>\n",
				"content_text": "<a href=\"http://www.julianbrowne.com/article/viewer/space-based-architecture-example\">Space-based Architecture</a> - on building and scaling your system with a <a href=\"http://en.wikipedia.org/wiki/Tuple_space\">tuple space</a>, the kissing cousin of the messaging queue. I didn't know that tuple spaces are used much in finance apps, but I'm not surprised. They're a worthy idea.\n",
				"date_published": "2009-04-24T09:43:35-07:00",
				"url": "https://therealadam.com/2009/04/24/put-your-objects.html",
				"tags": ["Uncategorized","scaling","pragprog","architecture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/23/the-nonexistent-tension.html",
				"title": "The non-existent tension between FP and OOP",
				"content_html": "<p><!-- raw HTML omitted -->Is the Supremacy of Object-Oriented Programming Over?<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I wish I&rsquo;d had a &ldquo;pocket Dean Wampler&rdquo; when I was first learning Haskell and trying to reconcile idiomatic Haskell with what I&rsquo;ve become so accustomed to with Ruby, JavaScript and, well, everything.</p>\n",
				"content_text": "<a href=\"http://blog.objectmentor.com/articles/2009/04/20/is-the-supremacy-of-object-oriented-programming-over#comments\">Is the Supremacy of Object-Oriented Programming Over?</a>:\n\n<blockquote>\nThe fact is, for a lot of these applications, it&rsquo;s just data. The ceremony of object wrappers doesn&rsquo;t carry its weight. Just put the data in a hash map (or a list if you don&rsquo;t need the bits &quot;labeled&quot;) and then process the collection with your iterate, map, and reduce functions.\n</blockquote>\n\nI wish I'd had a \"pocket Dean Wampler\" when I was first learning Haskell and trying to reconcile idiomatic Haskell with what I've become so accustomed to with Ruby, JavaScript and, well, everything.\n",
				"date_published": "2009-04-23T08:25:03-07:00",
				"url": "https://therealadam.com/2009/04/23/the-nonexistent-tension.html",
				"tags": ["Curated","programming_languages"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/22/personal-website-patterns.html",
				"title": "Personal website patterns",
				"content_html": "<p>I was thinking about the sorts of personal sites I&rsquo;ve enjoyed on the web. They roughly fall into two sorts, roughly dividing &ldquo;website&rdquo;-ish websites from &ldquo;weblog&rdquo;-ish websites.</p>\n<p>h2. Websites</p>\n<p>These are often a handful of pages, at most a dozen.</p>\n<ul>\n<li><!-- raw HTML omitted -->Landing page<!-- raw HTML omitted --> - These sites give you a little bit of biographical info, maybe a page or two on specific points of interest. They rarely link to any other web presences.</li>\n<li><!-- raw HTML omitted -->Personal ecosystem<!-- raw HTML omitted --> - These sites serve as a trampoline to send you to other sites representing the person&rsquo;s online personality. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Pat Nakajima<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Merlin Mann<!-- raw HTML omitted -->.</li>\n<li><!-- raw HTML omitted -->Collection of works<!-- raw HTML omitted --> - These sites are, essentially, portfolios. They show off the cool things the person has done.</li>\n</ul>\n<p>h2. Weblogs</p>\n<p>Chunks of content in reverse chronological listing, time and taxonomy-based archives. Sometimes comments, sometimes no. Usually a few other pages for the &ldquo;potpurri&rdquo;.</p>\n<ul>\n<li><!-- raw HTML omitted -->The &ldquo;Classic&rdquo; weblog<!-- raw HTML omitted --> - Writing on some focused topic or a cluster of topics. Sometimes they are a cult of personality, sometimes it&rsquo;s just a person&rsquo;s dedication to an idea. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Daring Fireball<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Garrett Dimon<!-- raw HTML omitted --></li>\n<li><!-- raw HTML omitted -->Curated text<!-- raw HTML omitted --> - Interesting bits found on the web, aggregated and summarized. Usually higher volume than a classic weblog, but not as bad as a &ldquo;professional&rdquo; weblog. Always focused around the author&rsquo;s personal fascinations. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Kottke<!-- raw HTML omitted --></li>\n<li><!-- raw HTML omitted -->Curated links<!-- raw HTML omitted --> - Just a collection of links, followed by a few words describing them. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Trivium<!-- raw HTML omitted --></li>\n<li><!-- raw HTML omitted -->Tumblelog<!-- raw HTML omitted --> - Another sort of curation, this time with little or no summarization and a focus on a tone, subject or personality. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Projectionist<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Ideas for Dozens (tiny)<!-- raw HTML omitted --></li>\n<li><!-- raw HTML omitted -->Lifestream<!-- raw HTML omitted --> - An aggregation of the author&rsquo;s activities online. Like the personal ecosystem, but without the lazy linking. <!-- raw HTML omitted -->c.f.<!-- raw HTML omitted --> <!-- raw HTML omitted -->Adactio Elsewhere<!-- raw HTML omitted --></li>\n</ul>\n<p>My personal site (hint: you&rsquo;re reading it) will probably continue to evolve to include a little of each of these.</p>\n",
				"content_text": "I was thinking about the sorts of personal sites I've enjoyed on the web. They roughly fall into two sorts, roughly dividing \"website\"-ish websites from \"weblog\"-ish websites.\n\nh2. Websites\n\nThese are often a handful of pages, at most a dozen.\n\n* <strong>Landing page</strong> - These sites give you a little bit of biographical info, maybe a page or two on specific points of interest. They rarely link to any other web presences.\n* <strong>Personal ecosystem</strong> - These sites serve as a trampoline to send you to other sites representing the person's online personality. <em>c.f.</em> <a href=\"http://patnakajima.com/\">Pat Nakajima</a> or <a href=\"http://www.merlinmann.com/\">Merlin Mann</a>.\n* <strong>Collection of works</strong> - These sites are, essentially, portfolios. They show off the cool things the person has done.\n\nh2. Weblogs\n\nChunks of content in reverse chronological listing, time and taxonomy-based archives. Sometimes comments, sometimes no. Usually a few other pages for the \"potpurri\".\n\n* <strong>The \"Classic\" weblog</strong> - Writing on some focused topic or a cluster of topics. Sometimes they are a cult of personality, sometimes it's just a person's dedication to an idea. <em>c.f.</em> <a href=\"http://daringfireball.net/\">Daring Fireball</a>, <a href=\"http://garrettdimon.com/\">Garrett Dimon</a>\n* <strong>Curated text</strong> - Interesting bits found on the web, aggregated and summarized. Usually higher volume than a classic weblog, but not as bad as a \"professional\" weblog. Always focused around the author's personal fascinations. <em>c.f.</em> <a href=\"http://kottke.org/\">Kottke</a>\n* <strong>Curated links</strong> - Just a collection of links, followed by a few words describing them. <em>c.f.</em> <a href=\"http://chneukirchen.org/trivium/\">Trivium</a>\n* <strong>Tumblelog</strong> - Another sort of curation, this time with little or no summarization and a focus on a tone, subject or personality. <em>c.f.</em> <a href=\"http://project.ioni.st/\">Projectionist</a>, <a href=\"http://idfdz.tumblr.com/\">Ideas for Dozens (tiny)</a>\n* <strong>Lifestream</strong> - An aggregation of the author's activities online. Like the personal ecosystem, but without the lazy linking. <em>c.f.</em> <a href=\"http://elsewhere.adactio.com/\">Adactio Elsewhere</a>\n\nMy personal site (hint: you're reading it) will probably continue to evolve to include a little of each of these.\n",
				"date_published": "2009-04-22T20:20:53-07:00",
				"url": "https://therealadam.com/2009/04/22/personal-website-patterns.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/20/the-state-on.html",
				"title": "The State on DVD, finally",
				"content_html": "<p>It would appear that, after long last, <!-- raw HTML omitted -->The State DVD<!-- raw HTML omitted --> is forthcoming. I cannot wait. <!-- raw HTML omitted -->The State<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Daria<!-- raw HTML omitted --> were probably the two best works of original programming ever on MTV. (Via <!-- raw HTML omitted -->Coudal Partners<!-- raw HTML omitted -->)</p>\n",
				"content_text": "It would appear that, after long last, <a href=\"http://www.the-state.com/\">The State DVD</a> is forthcoming. I cannot wait. <em>The State</em> and <em>Daria</em> were probably the two best works of original programming ever on MTV. (Via <a href=\"http://coudal.com/\">Coudal Partners</a>)\n",
				"date_published": "2009-04-20T14:55:42-07:00",
				"url": "https://therealadam.com/2009/04/20/the-state-on.html",
				"tags": ["Curated","Comedy, haha","tv"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/19/three-sides-of.html",
				"title": "Three sides of language geekery",
				"content_html": "<p>Ted Leung&rsquo;s notes on the <!-- raw HTML omitted -->JVM Language Summit<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Dynamic Language Summit<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Lang.NET<!-- raw HTML omitted -->. Great reading for those interested in what makes programming languages tick.</p>\n",
				"content_text": "Ted Leung's notes on the <a href=\"http://www.sauria.com/blog/2008/09/27/the-first-annual-jvm-language-summit/\">JVM Language Summit</a>, <a href=\"http://www.sauria.com/blog/2009/03/28/the-pycon-summits/\">Dynamic Language Summit</a> and <a href=\"http://www.sauria.com/blog/2009/04/16/langnet-2009/\">Lang.NET</a>. Great reading for those interested in what makes programming languages tick.\n",
				"date_published": "2009-04-19T07:53:34-07:00",
				"url": "https://therealadam.com/2009/04/19/three-sides-of.html",
				"tags": ["Curated","languages"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/18/lost-injoke.html",
				"title": "LOST in-joke",
				"content_html": "<p><!-- raw HTML omitted -->DUDE<!-- raw HTML omitted -->. Other <!-- raw HTML omitted -->phrases of common occurrence<!-- raw HTML omitted --> in LOST. (Via <!-- raw HTML omitted -->Heilemann<!-- raw HTML omitted -->.)</p>\n",
				"content_text": "<a href=\"http://lostpedia.wikia.com/wiki/Dude\">DUDE</a>. Other <a href=\"http://lostpedia.wikia.com/wiki/Regularly_spoken_phrases\">phrases of common occurrence</a> in LOST. (Via <a href=\"http://heilemann.tumblr.com/\">Heilemann</a>.)\n",
				"date_published": "2009-04-18T07:50:53-07:00",
				"url": "https://therealadam.com/2009/04/18/lost-injoke.html",
				"tags": ["Curated","Nerdery","lost"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/17/your-friday-jam.html",
				"title": "Your Friday Jam",
				"content_html": "<p>Here is your Friday Jam: <!-- raw HTML omitted -->The De La Soul Dugout<!-- raw HTML omitted -->. Quite good. See also: <!-- raw HTML omitted -->WEFUNK radio<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Here is your Friday Jam: <a href=\"http://www.ustream.tv/channel/delasouls-dugout\">The De La Soul Dugout</a>. Quite good. See also: <a href=\"http://www.wefunkradio.com/\">WEFUNK radio</a>.\n",
				"date_published": "2009-04-17T09:48:02-07:00",
				"url": "https://therealadam.com/2009/04/17/your-friday-jam.html",
				"tags": ["Music","Pop Culture","Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/17/a-console-for.html",
				"title": "A console for any Ruby project",
				"content_html": "<p>I&rsquo;ve been finding this little snippet extremely useful lately:</p>\n<!-- raw HTML omitted -->\n<p>If your Ruby app or library follows the idiom of requiring all the files for your app in a file named after the library, this will load everything up. If you&rsquo;re being clever, you may need to invoke said cleverness before you can really get started poking around.</p>\n<p>Anyone doing something similar?</p>\n",
				"content_text": "I've been finding this little snippet extremely useful lately:\n\n<pre><code>$ irb -Ilib -rmy_library</pre></code>\n\nIf your Ruby app or library follows the idiom of requiring all the files for your app in a file named after the library, this will load everything up. If you're being clever, you may need to invoke said cleverness before you can really get started poking around.\n\nAnyone doing something similar?\n",
				"date_published": "2009-04-17T07:47:35-07:00",
				"url": "https://therealadam.com/2009/04/17/a-console-for.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/15/john-mayer-closet.html",
				"title": "John Mayer, closet software developer",
				"content_html": "<p><!-- raw HTML omitted -->&ldquo;The idea is to run as many concurrent streams of production as we can.&quot;<!-- raw HTML omitted --> - Is John Mayer recording an album or bootstrapping an indie app?</p>\n",
				"content_text": "<a href=\"http://www.johnmayer.com/battlestudies/?post=15\">\"The idea is to run as many concurrent streams of production as we can.\"</a> - Is John Mayer recording an album or bootstrapping an indie app?\n",
				"date_published": "2009-04-15T07:04:12-07:00",
				"url": "https://therealadam.com/2009/04/15/john-mayer-closet.html",
				"tags": ["Music","Pop Culture","Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/13/more-harmful-than.html",
				"title": "More harmful than harmful",
				"content_html": "<p>We are lucky to live in a time when 99.9% of programmers will never have a legitimate argument for using <!-- raw HTML omitted -->GOTO<!-- raw HTML omitted --> (hi kernel programmers!). But in case you&rsquo;re feeling nostalgic and/or ornery, there&rsquo;s always <!-- raw HTML omitted -->COMEFROM<!-- raw HTML omitted -->. You can even implement it in Ruby via @callcc@!</p>\n",
				"content_text": "We are lucky to live in a time when 99.9% of programmers will never have a legitimate argument for using <code>GOTO</code> (hi kernel programmers!). But in case you're feeling nostalgic and/or ornery, there's always <a href=\"http://en.wikipedia.org/wiki/Comefrom\">COMEFROM</a>. You can even implement it in Ruby via @callcc@!\n",
				"date_published": "2009-04-13T16:14:30-07:00",
				"url": "https://therealadam.com/2009/04/13/more-harmful-than.html",
				"tags": ["Curated","ruby","programming_languages"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/13/elevating-the-art.html",
				"title": "Elevating the art of language implementation",
				"content_html": "<p>Suppose we can take the following statement as true:</p>\n<p><!-- raw HTML omitted -->Whether you use it or not, the state of the programming craft has been elevated by many of the ideas bundled in Ruby on Rails.<!-- raw HTML omitted --></p>\n<p>ActiveRecord in particular brought many ideas that made it easier for more people to program with a database. Whereas before most people thought in terms of mappings or extracting data from hashes, AR gave a more fluent and object-like notation to work with. Thus, more interesting applications were born.</p>\n<p>Right now, good VM technology is limited to Sun and Microsoft, while Apple, Google and Mozilla are re-inventing it for their web browsers. Open source languages, mostly, lack this VM technology.</p>\n<p>ActiveRecord improved the state of the programming craft by spreading ideas that make working with a database easier. <!-- raw HTML omitted -->Could a similar improvement in the programming craft be realized by diffusing the knowledge of how to implement a good VM through a library?<!-- raw HTML omitted --> Is this a worthwhile aspiration?</p>\n",
				"content_text": "Suppose we can take the following statement as true:\n\n<em>Whether you use it or not, the state of the programming craft has been elevated by many of the ideas bundled in Ruby on Rails.</em>\n\nActiveRecord in particular brought many ideas that made it easier for more people to program with a database. Whereas before most people thought in terms of mappings or extracting data from hashes, AR gave a more fluent and object-like notation to work with. Thus, more interesting applications were born.\n\nRight now, good VM technology is limited to Sun and Microsoft, while Apple, Google and Mozilla are re-inventing it for their web browsers. Open source languages, mostly, lack this VM technology.\n\nActiveRecord improved the state of the programming craft by spreading ideas that make working with a database easier. <strong>Could a similar improvement in the programming craft be realized by diffusing the knowledge of how to implement a good VM through a library?</strong> Is this a worthwhile aspiration?\n",
				"date_published": "2009-04-13T11:40:39-07:00",
				"url": "https://therealadam.com/2009/04/13/elevating-the-art.html",
				"tags": ["Uncategorized","programming_languages"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/13/postmodern-comedy-gold.html",
				"title": "Postmodern comedy gold",
				"content_html": "<p><!-- raw HTML omitted -->The Nietzsche Family Circus<!-- raw HTML omitted --> - random Nietzsche quote + vintage comics = comedy gold.</p>\n",
				"content_text": "<a href=\"http://www.losanjealous.com/nfc/\">The Nietzsche Family Circus</a> - random Nietzsche quote + vintage comics = comedy gold.\n",
				"date_published": "2009-04-13T08:50:18-07:00",
				"url": "https://therealadam.com/2009/04/13/postmodern-comedy-gold.html",
				"tags": ["Curated","Comedy, haha","philosophy"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/04/05/when-technical-discussions.html",
				"title": "When technical discussions get intense",
				"content_html": "<p><!-- raw HTML omitted -->Pro-tip<!-- raw HTML omitted -->: trying to unwind contentious technical discussions is a losing game. There are really multiple things going on: people discussing trade-offs in absolutes, personal vendettas being aired, missing tact filters and turf protection. If you&rsquo;re lucky, there&rsquo;s also some useful information hidden in the turd tossing.</p>\n<p><!-- raw HTML omitted -->Solution<!-- raw HTML omitted -->: don&rsquo;t read too deeply, go do something useful instead.</p>\n<p><!-- raw HTML omitted -->Bonus tip<!-- raw HTML omitted -->: talking it out, face to face, over good drinks in a nice environment is &ldquo;something useful&rdquo;.</p>\n",
				"content_text": "<strong>Pro-tip</strong>: trying to unwind contentious technical discussions is a losing game. There are really multiple things going on: people discussing trade-offs in absolutes, personal vendettas being aired, missing tact filters and turf protection. If you're lucky, there's also some useful information hidden in the turd tossing.\n\n<strong>Solution</strong>: don't read too deeply, go do something useful instead.\n\n<strong>Bonus tip</strong>: talking it out, face to face, over good drinks in a nice environment is \"something useful\".\n",
				"date_published": "2009-04-05T10:31:41-07:00",
				"url": "https://therealadam.com/2009/04/05/when-technical-discussions.html",
				"tags": ["Uncategorized","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/30/think.html",
				"title": "Think",
				"content_html": "<!-- raw HTML omitted -->\n<p>The scene in <!-- raw HTML omitted -->The Blues Brothers<!-- raw HTML omitted --> where they are recruiting Matt &ldquo;Guitar&rdquo; Murphy is quite possibly my favorite of the movie. From the start of &ldquo;Think&rdquo; to the first &ldquo;Freedom!&rdquo; chorus, I get all sorts of musical tingles. I highly recommend it, if you have the means.</p>\n<p>Since I can&rsquo;t link to any video of the scene, why not listen to <!-- raw HTML omitted -->&ldquo;Freedom&rdquo;<!-- raw HTML omitted --> by Charles Mingus. It&rsquo;s goodness.</p>\n",
				"content_text": "<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2009/03/tn-213blues-brothers-155.jpg\" alt=\"tn_213BLUES_BROTHERS-155.jpg\" border=\"0\" width=\"400\" height=\"225\" /></div>\n\nThe scene in <em>The Blues Brothers</em> where they are recruiting Matt \"Guitar\" Murphy is quite possibly my favorite of the movie. From the start of \"Think\" to the first \"Freedom!\" chorus, I get all sorts of musical tingles. I highly recommend it, if you have the means.\n\nSince I can't link to any video of the scene, why not listen to <a href=\"http://www.youtube.com/watch?v=UVoR985G8ng\">\"Freedom\"</a> by Charles Mingus. It's goodness.\n",
				"date_published": "2009-03-30T07:30:18-07:00",
				"url": "https://therealadam.com/2009/03/30/think.html",
				"tags": ["Music","Pop Culture","Curated","movies"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/29/the-economic-dashboard.html",
				"title": "The economic dashboard",
				"content_html": "<p><!-- raw HTML omitted -->What&rsquo;s the state of the economy?<!-- raw HTML omitted --> - a stunningly brilliant visualization of where the economy has been (lagging indicators) and where it&rsquo;s going (leading indicators). The explanations are excellent too. (Via <!-- raw HTML omitted -->Flowing Data<!-- raw HTML omitted -->).</p>\n",
				"content_text": "<a href=\"http://www.russell.com/Helping-Advisors/Markets/EconomicRecoveryDashboard.asp\">What's the state of the economy?</a> - a stunningly brilliant visualization of where the economy has been (lagging indicators) and where it's going (leading indicators). The explanations are excellent too. (Via <a href=\"http://flowingdata.com/\">Flowing Data</a>).\n",
				"date_published": "2009-03-29T14:53:00-07:00",
				"url": "https://therealadam.com/2009/03/29/the-economic-dashboard.html",
				"tags": ["Curated","The System","visualization","economics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/25/even-the-dharma.html",
				"title": "Even the Dharma Initiative has to advertise",
				"content_html": "<p><!-- raw HTML omitted -->Vintage Dharma Initiative Ads<!-- raw HTML omitted -->. Very excellent.</p>\n",
				"content_text": "<a href=\"http://www.diskursdisko.de/2009/03/vintage-dharma-initiative-ads/\">Vintage Dharma Initiative Ads</a>. Very excellent.\n",
				"date_published": "2009-03-25T18:12:42-07:00",
				"url": "https://therealadam.com/2009/03/25/even-the-dharma.html",
				"tags": ["Curated","Nerdery","lost","television"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/23/decoupling-newspapers.html",
				"title": "Decoupling newspapers",
				"content_html": "<p>My wife works for the local newspaper (thankfully, in their less layoff-prone online division). So I&rsquo;ve been wondering about this whole newspaper business collapse would work out. <!-- raw HTML omitted -->Clay Shirky&rsquo;s got an important point<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "My wife works for the local newspaper (thankfully, in their less layoff-prone online division). So I've been wondering about this whole newspaper business collapse would work out. <a href=\"http://www.shirky.com/weblog/2009/03/newspapers-and-thinking-the-unthinkable/\">Clay Shirky's got an important point</a>:\n<blockquote>Society doesn't need newspapers. What we need is journalism. For a century, the imperatives to strengthen journalism and to strengthen newspapers have been so tightly wound as to be indistinguishable.</blockquote>\nIt's not about the end of newspapers, it's about decoupling the core of journalism from newspapers. We'll see how that pans out. Let's just hope cable news doesn't take its place.\n",
				"date_published": "2009-03-23T07:25:51-07:00",
				"url": "https://therealadam.com/2009/03/23/decoupling-newspapers.html",
				"tags": ["Curated","The System"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/20/underwater-volcano-go.html",
				"title": "Underwater volcano go boom",
				"content_html": "<p>I think one of the first things I decided I wanted to &ldquo;be&rdquo; when I was a wee lad was a volcanologist. I&rsquo;d still love to go to an actual volcano, preferably active. Thusly, the pictures of <!-- raw HTML omitted -->undersea eruptions near Tonga <!-- raw HTML omitted --> from the Big Picture are, without a doubt, spectacular.</p>\n",
				"content_text": "I think one of the first things I decided I wanted to \"be\" when I was a wee lad was a volcanologist. I'd still love to go to an actual volcano, preferably active. Thusly, the pictures of <a href=\"http://www.boston.com/bigpicture/2009/03/undersea_eruptions_near_tonga.html\">undersea eruptions near Tonga </a> from the Big Picture are, without a doubt, spectacular.\n",
				"date_published": "2009-03-20T15:28:24-07:00",
				"url": "https://therealadam.com/2009/03/20/underwater-volcano-go.html",
				"tags": ["Curated","Eye Candy"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/20/pattern-matching-in.html",
				"title": "Pattern matching in Ruby with Case",
				"content_html": "<p>Pattern matching, ala <!-- raw HTML omitted -->Erlang<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Haskell<!-- raw HTML omitted -->, is a language feature near and dear to my heart. Dean Wampler has a great explanation of <!-- raw HTML omitted -->how to use the Omnibus Concurrency Library<!-- raw HTML omitted --> to play with pattern matching in Ruby, even if it&rsquo;s a little odd.</p>\n",
				"content_text": "Pattern matching, ala <a href=\"http://en.wikibooks.org/wiki/Erlang_Programming/Pattern_Matching\">Erlang</a> or <a href=\"http://en.wikibooks.org/wiki/Haskell/Pattern_matching\">Haskell</a>, is a language feature near and dear to my heart. Dean Wampler has a great explanation of <a href=\"http://blog.objectmentor.com/articles/2009/03/16/tighter-ruby-methods-with-functional-style-pattern-matching-using-the-case-gem\">how to use the Omnibus Concurrency Library</a> to play with pattern matching in Ruby, even if it's a little odd.\n",
				"date_published": "2009-03-20T11:09:17-07:00",
				"url": "https://therealadam.com/2009/03/20/pattern-matching-in.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/20/the-power-of.html",
				"title": "The power of not knowing",
				"content_html": "<p><!-- raw HTML omitted -->Christian Neukirchen<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"https://twitter.com/chneukirchen/statuses/1347673254\">Christian Neukirchen</a>:\n\n<blockquote>\nIt's a programmer's biggest strength when he knows what he doesn't need to know. And gaining (experience) in not knowing isn't as easy as it sounds.\n</blockquote>\n",
				"date_published": "2009-03-20T06:20:26-07:00",
				"url": "https://therealadam.com/2009/03/20/the-power-of.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/19/get-excited-and.html",
				"title": "Get excited and make things",
				"content_html": "<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Yes<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<div class=\"center\"><a href=\"http://www.flickr.com/photos/blackbeltjones/3365682994/\" title=\"Don't keep calm and carry on. by moleitau, on Flickr\"><img src=\"http://farm4.static.flickr.com/3604/3365682994_b257c0c52d.jpg\" width=\"349\" height=\"500\" alt=\"Don't keep calm and carry on.\" /></a></div>\n\n<strong>Yes</strong>.\n",
				"date_published": "2009-03-19T14:51:32-07:00",
				"url": "https://therealadam.com/2009/03/19/get-excited-and.html",
				"tags": ["Curated","The System","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/19/using-haskell-for.html",
				"title": "Using Haskell for awesome",
				"content_html": "<p>I&rsquo;ve joked that <!-- raw HTML omitted -->Haskell is all about reading other people&rsquo;s theses<!-- raw HTML omitted -->, but <!-- raw HTML omitted -->you can do practical things with it too<!-- raw HTML omitted -->. His quick explanation of monads is pretty good too.</p>\n",
				"content_text": "I've joked that <a href=\"http://twitter.com/therealadam/statuses/1282045594\">Haskell is all about reading other people's theses</a>, but <a href=\"http://www.deanberris.com/mental-blabberings/2009/3/17/the-haskell-experiment-haskelldb-http-and-monads.html\">you can do practical things with it too</a>. His quick explanation of monads is pretty good too.\n",
				"date_published": "2009-03-19T13:12:26-07:00",
				"url": "https://therealadam.com/2009/03/19/using-haskell-for.html",
				"tags": ["Curated","haskell"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/19/rubinius-threads-for.html",
				"title": "Rubinius threads, for mere mortals",
				"content_html": "<p>A no non-sense, non-academic introduction to <!-- raw HTML omitted -->how Rubinius' threading is structured<!-- raw HTML omitted -->. Having read a few papers on VM implementation lately, this is refreshingly direct and easy-to-read.</p>\n",
				"content_text": "A no non-sense, non-academic introduction to <a href=\"http://blog.brightredglow.com/2009/3/18/a-vm-by-any-other-name\">how Rubinius' threading is structured</a>. Having read a few papers on VM implementation lately, this is refreshingly direct and easy-to-read.\n",
				"date_published": "2009-03-19T07:09:23-07:00",
				"url": "https://therealadam.com/2009/03/19/rubinius-threads-for.html",
				"tags": ["Curated","ruby","vm"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/18/this-is-no.html",
				"title": "This is no former-Parrot",
				"content_html": "<p>Hey look! <!-- raw HTML omitted -->Parrot went 1.0<!-- raw HTML omitted -->. Parrot is an open source virtual machine aimed at making it easy for dynamic languages like Perl, Python, PHP and Ruby to target the same VM.</p>\n<p>I&rsquo;m glad to see this is finally out. About six years ago, I thought it had the potential to be a Big Deal™. It&rsquo;s been a long time in the tooth, but I&rsquo;m interested to see how this plays out with the resurgent JVM and the general renaissance of language design.</p>\n",
				"content_text": "Hey look! <a href=\"http://www.parrot.org/news/2009/Parrot-1.0.0\">Parrot went 1.0</a>. Parrot is an open source virtual machine aimed at making it easy for dynamic languages like Perl, Python, PHP and Ruby to target the same VM.\n\nI'm glad to see this is finally out. About six years ago, I thought it had the potential to be a Big Deal&trade;. It's been a long time in the tooth, but I'm interested to see how this plays out with the resurgent JVM and the general renaissance of language design.\n",
				"date_published": "2009-03-18T11:56:08-07:00",
				"url": "https://therealadam.com/2009/03/18/this-is-no.html",
				"tags": ["Curated","languages","vm"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/18/on-feeds-application.html",
				"title": "On feeds: application posture",
				"content_html": "<p><!-- raw HTML omitted -->EventBox<!-- raw HTML omitted -->. It&rsquo;s a great idea - roll all the social/distracting applications in your life into one app so you can close it when it comes time to focus. Yesterday, I decided to give it a go.</p>\n<p>I quickly felt that perhaps it was not for me. I think it comes down to posture - how is the app intended to be used? I&rsquo;ve been using <!-- raw HTML omitted -->Twitterific<!-- raw HTML omitted --> and <!-- raw HTML omitted -->NetNewsWire<!-- raw HTML omitted --> for quite some time (5+ years in the case of the latter), so let&rsquo;s compare with their posture:</p>\n<ul>\n<li>NetNewsWire is meant to scan feeds, collect the interesting stuff, read it, repeat</li>\n<li>Twitterific is (beautifully) optimized for scan tweets, reply to a few, post occasionally</li>\n<li>EventBox seems to encourage scanning things, handling the occasional item <em>in-situ</em>, and sending the interesting stuff to your browser</li>\n</ul>\n<p>I&rsquo;m not saying that EventBox&rsquo;s posture is wrong; it&rsquo;s just different. I&rsquo;m going to stick with it for a few days and see how I feel about it.</p>\n",
				"content_text": "<a href=\"http://thecosmicmachine.com/\">EventBox</a>. It's a great idea - roll all the social/distracting applications in your life into one app so you can close it when it comes time to focus. Yesterday, I decided to give it a go.\n\nI quickly felt that perhaps it was not for me. I think it comes down to posture - how is the app intended to be used? I've been using <a href=\"http://iconfactory.com/software/twitterrific\">Twitterific</a> and <a href=\"http://www.newsgator.com/Individuals/NetNewsWire/\">NetNewsWire</a> for quite some time (5+ years in the case of the latter), so let's compare with their posture:\n\n* NetNewsWire is meant to scan feeds, collect the interesting stuff, read it, repeat\n* Twitterific is (beautifully) optimized for scan tweets, reply to a few, post occasionally\n* EventBox seems to encourage scanning things, handling the occasional item _in-situ_, and sending the interesting stuff to your browser\n\nI'm not saying that EventBox's posture is wrong; it's just different. I'm going to stick with it for a few days and see how I feel about it.\n",
				"date_published": "2009-03-18T09:02:46-07:00",
				"url": "https://therealadam.com/2009/03/18/on-feeds-application.html",
				"tags": ["Nerdery","feeds"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/18/making-the-pretty.html",
				"title": "Making the pretty docs",
				"content_html": "<p>When you really need to generate nice technical documentation, you would be wise to <!-- raw HTML omitted -->walk in Assaf Arkin&rsquo;s footsteps<!-- raw HTML omitted -->.</p>\n",
				"content_text": "When you really need to generate nice technical documentation, you would be wise to <a href=\"http://blog.labnotes.org/2009/03/14/buildr-how-we-generate-the-documentation-web-site-and-pdf/\">walk in Assaf Arkin's footsteps</a>.\n",
				"date_published": "2009-03-18T08:39:39-07:00",
				"url": "https://therealadam.com/2009/03/18/making-the-pretty.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/17/a-few-promising.html",
				"title": "A few promising Ruby libraries",
				"content_html": "<p>From the hall of promising Ruby libraries: an FFI binding to Lua, <!-- raw HTML omitted -->Ruby to Lua<!-- raw HTML omitted -->, a neat framework for building Twitter bots, <!-- raw HTML omitted -->TwiBot<!-- raw HTML omitted --> and some sugar over the Cascading library (which is sugar over Hadoop) for processing large data sets, <!-- raw HTML omitted -->cascading.jruby<!-- raw HTML omitted --></p>\n",
				"content_text": "From the hall of promising Ruby libraries: an FFI binding to Lua, <a href=\"http://jmettraux.wordpress.com/2009/03/16/ruby-to-lua/\">Ruby to Lua</a>, a neat framework for building Twitter bots, <a href=\"http://www.cjohansen.no/en/ruby/twibot_a_microframework_for_twitter_bots_in_ruby\">TwiBot</a> and some sugar over the Cascading library (which is sugar over Hadoop) for processing large data sets, <a href=\"http://github.com/gmarabout/cascading.jruby/tree/master\">cascading.jruby</a>\n",
				"date_published": "2009-03-17T17:31:47-07:00",
				"url": "https://therealadam.com/2009/03/17/a-few-promising.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/03/08/congruous-capitalism.html",
				"title": "Congruous capitalism",
				"content_html": "<p>Here&rsquo;s some idealism for you: I would like to think that the future of human endeavors is congruity. There is a lot of emotional writing about rational topics. That emotion often colors the writing to the point of irrationality. It seems to me that this is because many of the prominent systems of our lives are incongrous. These inconsistent and seemingly irrational systems drive us to emotion and our logic suffers for it.</p>\n<p>I’ve been reading <!-- raw HTML omitted -->Failed States<!-- raw HTML omitted --> by Noam Chomsky. I think you could summarize it as “the U.S. government says it is doing something for reason A, but is in fact doing it for reason B”. People really dislike Ticketmaster, who would defend themselves by saying “we’re trying to make access to live music easier” but everyone knows “we’re trying to maintain a monopoly and squeeze the margin as tightly as possible”. You can play this game at home for any institution that is widely reviled.</p>\n<p>Some other incongruous systems:</p>\n<ul>\n<li>Politics: ostensibly about the will of the people, but really about the short-term interests of those with the clever lobbyists</li>\n<li>Telecommunications: ostensibly about helping people communicate, but really about maintaining monopolies and minimizing the maintenance cost of those monopolies</li>\n<li>Insurance: ostensibly about helping people put money away for a bad day, but really about minimizing pay-outs to maximize profit</li>\n</ul>\n<p>It is my hope that the businesses that emerge from this economic conflagaration are those that connect more directly with their customers. In doing so, they are more transparent. It is harder for their internal and external goals to conflict. In this way, they can profit from aligning their objectives with those of their customers. Sure, they may not make obscene profits, but that’s fine.</p>\n<p>Here’s a tag-line for this congrous capitalism: “May greedy capitalism die by a thousand cuts of moderately-profitable honesty.”</p>\n",
				"content_text": "Here's some idealism for you: I would like to think that the future of human endeavors is congruity. There is a lot of emotional writing about rational topics. That emotion often colors the writing to the point of irrationality. It seems to me that this is because many of the prominent systems of our lives are incongrous. These inconsistent and seemingly irrational systems drive us to emotion and our logic suffers for it.\n\nI&rsquo;ve been reading <em>Failed States</em> by Noam Chomsky. I think you could summarize it as &ldquo;the U.S. government says it is doing something for reason A, but is in fact doing it for reason B&rdquo;. People really dislike Ticketmaster, who would defend themselves by saying &ldquo;we&rsquo;re trying to make access to live music easier&rdquo; but everyone knows &ldquo;we&rsquo;re trying to maintain a monopoly and squeeze the margin as tightly as possible&rdquo;. You can play this game at home for any institution that is widely reviled.\n\nSome other incongruous systems:\n\n* Politics: ostensibly about the will of the people, but really about the short-term interests of those with the clever lobbyists\n* Telecommunications: ostensibly about helping people communicate, but really about maintaining monopolies and minimizing the maintenance cost of those monopolies\n* Insurance: ostensibly about helping people put money away for a bad day, but really about minimizing pay-outs to maximize profit\n\nIt is my hope that the businesses that emerge from this economic conflagaration are those that connect more directly with their customers. In doing so, they are more transparent. It is harder for their internal and external goals to conflict. In this way, they can profit from aligning their objectives with those of their customers. Sure, they may not make obscene profits, but that&rsquo;s fine.\n\nHere&rsquo;s a tag-line for this congrous capitalism: &ldquo;May greedy capitalism die by a thousand cuts of moderately-profitable honesty.&rdquo;\n",
				"date_published": "2009-03-08T20:47:49-07:00",
				"url": "https://therealadam.com/2009/03/08/congruous-capitalism.html",
				"tags": ["The System","economics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/18/awesome-yak-shaves.html",
				"title": "Awesome yak shaves",
				"content_html": "<p>I was sharing some nefarious plans with Dave Thomas yesterday at the DFW PragProg lunch. He later tipped me off to &ldquo;tinyrb&rdquo;:<a href=\"http://code.macournoyer.com/tinyrb/,\">code.macournoyer.com/tinyrb/,</a> which is awesome. It&rsquo;s a minimal implementation of Ruby that uses &ldquo;Ragel&rdquo;:<a href=\"http://www.complang.org/ragel/,\">www.complang.org/ragel/,</a> &ldquo;Lemon&rdquo;:<a href=\"http://www.hwaci.com/sw/lemon/\">www.hwaci.com/sw/lemon/</a> and is inspired by &ldquo;Potion&rdquo;:<a href=\"http://github.com/why/potion/tree/master.\">github.com/why/potio&hellip;</a> I&rsquo;ve long had a thing for messing with languages and their implementations, so I quickly ended up at this &ldquo;great Ragel tutorial&rdquo;:<a href=\"http://www.devchix.com/2008/01/13/a-hello-world-for-ruby-on-ragel-60/,\">www.devchix.com/2008/01/1&hellip;</a> and then reading about &ldquo;register machines&rdquo;:http://en.wikipedia.org/wiki/Register_machine, &ldquo;context-free grammars&rdquo;:http://en.wikipedia.org/wiki/Context-free_grammar and &ldquo;LLVM&rdquo;:<a href=\"http://llvm.org/.\">llvm.org/.</a></p>\n<p>I accomplished nothing, but diving into a topic is it&rsquo;s own reward. Here&rsquo;s what I&rsquo;ve concluded:</p>\n<ul>\n<li>I&rsquo;m super green at this stuff. But I want to go to there.</li>\n<li>There&rsquo;s too much awesome stuff to do out there: tinker with languages, build apps, visualize data, network things, etc.</li>\n<li>&ldquo;Marc-André Cournoyer&rdquo;:<a href=\"http://macournoyer.com/\">macournoyer.com</a> is my hero; not only did he implement tinyrb, but he&rsquo;s also the guy behind &ldquo;Thin&rdquo;:<a href=\"http://code.macournoyer.com/thin/\">code.macournoyer.com/thin/</a> and &ldquo;Refactor My Code&rdquo;:<a href=\"http://refactormycode.com/\">refactormycode.com</a></li>\n</ul>\n<p>Long story short: I need more time.</p>\n",
				"content_text": "I was sharing some nefarious plans with Dave Thomas yesterday at the DFW PragProg lunch. He later tipped me off to \"tinyrb\":[code.macournoyer.com/tinyrb/,](http://code.macournoyer.com/tinyrb/,) which is awesome. It's a minimal implementation of Ruby that uses \"Ragel\":[www.complang.org/ragel/,](http://www.complang.org/ragel/,) \"Lemon\":[www.hwaci.com/sw/lemon/](http://www.hwaci.com/sw/lemon/) and is inspired by \"Potion\":[github.com/why/potio...](http://github.com/why/potion/tree/master.) I've long had a thing for messing with languages and their implementations, so I quickly ended up at this \"great Ragel tutorial\":[www.devchix.com/2008/01/1...](http://www.devchix.com/2008/01/13/a-hello-world-for-ruby-on-ragel-60/,) and then reading about \"register machines\":http://en.wikipedia.org/wiki/Register_machine, \"context-free grammars\":http://en.wikipedia.org/wiki/Context-free_grammar and \"LLVM\":[llvm.org/.](http://llvm.org/.)\n\nI accomplished nothing, but diving into a topic is it's own reward. Here's what I've concluded:\n\n* I'm super green at this stuff. But I want to go to there.\n* There's too much awesome stuff to do out there: tinker with languages, build apps, visualize data, network things, etc.\n* \"Marc-Andr&eacute; Cournoyer\":[macournoyer.com](http://macournoyer.com/) is my hero; not only did he implement tinyrb, but he's also the guy behind \"Thin\":[code.macournoyer.com/thin/](http://code.macournoyer.com/thin/) and \"Refactor My Code\":[refactormycode.com](http://refactormycode.com/)\n\nLong story short: I need more time.\n",
				"date_published": "2009-02-18T08:00:53-07:00",
				"url": "https://therealadam.com/2009/02/18/awesome-yak-shaves.html",
				"tags": ["Curated","ruby","languages"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/17/on-news-the.html",
				"title": "On news: The Economist",
				"content_html": "<p>At the height of the DeLay/Rove movement, I became very disenchanted with news and politics. The propaganda, the lack of reason and the generally grim outlook were causing me too much stress. So, I stopped following news. This was good for my well-being, but I felt a little guilty about not <em>understanding</em> what was going on.</p>\n<p>Fast forward a few years; the economy is booming and the paint is starting to peel on the Rove master plan. I&rsquo;m taking light rail to work every day, so I have some quality time for reading on my hands. I don&rsquo;t remember where I got the hunch, but I went ahead and subscribed to <!-- raw HTML omitted --><em>The Economist</em><!-- raw HTML omitted --> to read on the train.</p>\n<p>I originally let my subscription lapse, as I found it difficult to keep up with the magazine on a weekly basis. However, as the mortgage crisis peaked, I resubscribed. I&rsquo;ve found it extremely useful in trying to understand what exactly is going on, how it compares to previous downturns and as the basis for a bozo filter.</p>\n<p>Regarding my <!-- raw HTML omitted -->earlier discoveries<!-- raw HTML omitted --> that everyone has an axe to grind and that the news cycle is often too short, <em>The Economist</em> is well aligned. Their axe to grind is the superiority of free markets and democratic societies. They publish weekly and cover a gamut of topics that forces them to only put ink to topics that are actually meaningful.</p>\n<p>In summary: <em>The Economist</em> is a great source of news if you are wary of news sources and I heart it. It&rsquo;s a fantastic place to start understanding the non-sciences that describe our world.</p>\n",
				"content_text": "At the height of the DeLay/Rove movement, I became very disenchanted with news and politics. The propaganda, the lack of reason and the generally grim outlook were causing me too much stress. So, I stopped following news. This was good for my well-being, but I felt a little guilty about not _understanding_ what was going on.\n\nFast forward a few years; the economy is booming and the paint is starting to peel on the Rove master plan. I'm taking light rail to work every day, so I have some quality time for reading on my hands. I don't remember where I got the hunch, but I went ahead and subscribed to <a href=\"http://www.economist.com/\">_The Economist_</a> to read on the train.\n\nI originally let my subscription lapse, as I found it difficult to keep up with the magazine on a weekly basis. However, as the mortgage crisis peaked, I resubscribed. I've found it extremely useful in trying to understand what exactly is going on, how it compares to previous downturns and as the basis for a bozo filter.\n\nRegarding my <a href=\"http://therealadam.com/archive/2009/01/20/on-news-beginnings/\">earlier discoveries</a> that everyone has an axe to grind and that the news cycle is often too short, _The Economist_ is well aligned. Their axe to grind is the superiority of free markets and democratic societies. They publish weekly and cover a gamut of topics that forces them to only put ink to topics that are actually meaningful.\n\nIn summary: _The Economist_ is a great source of news if you are wary of news sources and I heart it. It's a fantastic place to start understanding the non-sciences that describe our world.\n",
				"date_published": "2009-02-17T08:27:49-07:00",
				"url": "https://therealadam.com/2009/02/17/on-news-the.html",
				"tags": ["The System","on_news"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/12/what-im-thinking.html",
				"title": "What I\u0026#39;m Thinking",
				"content_html": "<p>Last night at <!-- raw HTML omitted -->Cohabitat<!-- raw HTML omitted -->, <!-- raw HTML omitted -->we did some lightning talks<!-- raw HTML omitted -->. The prompt was &ldquo;What I&rsquo;m Thinking&rdquo;. I decided to take a cross-section of topics I&rsquo;ve been immersing myself in lately. And of course, every good talk needs a gimmick, so I went with some of the fantastic shows on television right now. Here&rsquo;s a map of the topic:</p>\n<!-- raw HTML omitted -->\n<p>And here&rsquo;s a video of my talk:</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s a whirlwind tour through software, abstractions, economics, finance, Mad Men, business, the messiness of life, Gossip Girl, indie developers, 30 Rock, sweating the details, product development, LOST, life&rsquo;s interconnectedness  and how awesome it is to try to understand all of this.</p>\n<p>I hope you enjoy it. I forgot to take questions after the talk, so please feel free to correct me or inquire in the comments.</p>\n",
				"content_text": "Last night at <a href=\"http://cohabitat.us/\">Cohabitat</a>, <a href=\"http://www.flickr.com/photos/theagencyblog/sets/72157613677956518/show/\">we did some lightning talks</a>. The prompt was \"What I'm Thinking\". I decided to take a cross-section of topics I've been immersing myself in lately. And of course, every good talk needs a gimmick, so I went with some of the fantastic shows on television right now. Here's a map of the topic:\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2009/02/whatimthinkingsmall.jpg\" alt=\"WhatImThinkingSmall.jpg\" border=\"0\" width=\"450\" height=\"353\" /></div>\n\nAnd here's a video of my talk:\n\n<div class=\"center\">\n<br /><a href=\"http://vimeo.com/3187172\">What I'm Thinking</a> from <a href=\"http://vimeo.com/therealadam\">Adam Keys</a> on <a href=\"http://vimeo.com\">Vimeo</a>.\n</div>\n\nIt's a whirlwind tour through software, abstractions, economics, finance, Mad Men, business, the messiness of life, Gossip Girl, indie developers, 30 Rock, sweating the details, product development, LOST, life's interconnectedness  and how awesome it is to try to understand all of this.\n\nI hope you enjoy it. I forgot to take questions after the talk, so please feel free to correct me or inquire in the comments.\n",
				"date_published": "2009-02-12T11:49:41-07:00",
				"url": "https://therealadam.com/2009/02/12/what-im-thinking.html",
				"tags": ["The System","lost","misc:30_rock","economics","arduino","finance","gossip_girl"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/05/recreating-that-famous.html",
				"title": "Recreating that famous opening scene",
				"content_html": "<p>I would do the same thing. Brought to you by <!-- raw HTML omitted -->Alan Francis<!-- raw HTML omitted -->.</p>\n",
				"content_text": "I would do the same thing. Brought to you by <a href=\"http://www.alancfrancis.com/\">Alan Francis</a>.\n",
				"date_published": "2009-02-05T06:44:03-07:00",
				"url": "https://therealadam.com/2009/02/05/recreating-that-famous.html",
				"tags": ["Curated","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/03/the-trading-places.html",
				"title": "The Trading Places solution to the credit crunch",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<p>Put on your federal government hat. Get the remaining TARP funds out from under the mattress.</p>\n\n<ol>\n<li>Note bank share prices</li>\n<li>Start buying shares in banks</li>\n<li>Announce you are going to buy every bank in the country</li>\n<li>Let the price go up a bit, but keep buying shares</li>\n<li>When the old guys get nervous, start selling</li>\n<li>Keep selling until prices drop below the noted price</li>\n<li>Put the TARP funds back under the mattress</li>\n<li>Use the profits to prop-up the already propped-up banks</li>\n<li>Insist they actually <strong>lend the money</strong> this time</li>\n</ol>\n\n<p>At your discretion, send the SEC on an executive retreat and <em>accidentally</em> disable Blackberry email servers.</p>\n",
				"date_published": "2009-02-03T07:45:35-07:00",
				"url": "https://therealadam.com/2009/02/03/the-trading-places.html",
				"tags": ["Comedy, haha","The System","everything_i_need_to_know_i_learned_from_dan_aykroyd","finance"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/02/02/eye-candy-for.html",
				"title": "Eye candy for everyone",
				"content_html": "<p><!-- raw HTML omitted -->Scaling and scale models<!-- raw HTML omitted -->. So much great imagery here, you&rsquo;re just going to have to click the link and check it out. Sculpture not your thing? Try <!-- raw HTML omitted -->Round trip with Endeavor<!-- raw HTML omitted -->, the space shuttle hitching a ride on the back of a 747. Then there&rsquo;s the always great <!-- raw HTML omitted -->Feltron Annual Report<!-- raw HTML omitted -->. The <!-- raw HTML omitted -->paper prototype for Shaun Inman&rsquo;s homebrew Wii game<!-- raw HTML omitted --> is also awesome. If you&rsquo;re still unimpressed, <!-- raw HTML omitted -->Punch card<!-- raw HTML omitted --> is pretty clever.</p>\n",
				"content_text": "<a href=\"http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0003Hy&amp;topic_id=1&amp;topic=Ask+E%2eT%2e\">Scaling and scale models</a>. So much great imagery here, you're just going to have to click the link and check it out. Sculpture not your thing? Try <a href=\"http://ffffound.com/image/f2c9768509306a0408313172f5be07fd4a9f4be5\">Round trip with Endeavor</a>, the space shuttle hitching a ride on the back of a 747. Then there's the always great <a href=\"http://feltron.com/index.php?/content/2008_annual_report/P4/\">Feltron Annual Report</a>. The <a href=\"http://flickr.com/photos/shauninman/3193675199/in/set-72157612473364891/\">paper prototype for Shaun Inman's homebrew Wii game</a> is also awesome. If you're still unimpressed, <a href=\"http://github.com/vito/hello/graphs/punch_card\">Punch card</a> is pretty clever.\n",
				"date_published": "2009-02-02T08:10:47-07:00",
				"url": "https://therealadam.com/2009/02/02/eye-candy-for.html",
				"tags": ["Curated","Eye Candy","infoporn","nasa","tufte"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/28/developing-fluidly.html",
				"title": "Developing fluidly",
				"content_html": "<p>Here&rsquo;s a raw idea I&rsquo;m playing with in my head:</p>\n<p>Agile development is great. But, if your team doesn&rsquo;t map well to it, <!-- raw HTML omitted -->steal ideas<!-- raw HTML omitted --> from agile relentlessly.</p>\n<p>You want a <!-- raw HTML omitted -->fluid environment<!-- raw HTML omitted --> where developers can solve problems (features, defects, chores) as they see fit.</p>\n<p>Don&rsquo;t use procedures to normalize productivity or as a communication protocol.</p>\n<p>Do have a way to <!-- raw HTML omitted -->communicate<!-- raw HTML omitted --> things that need to get done or could possibly get done.</p>\n<p>You need a safety net. Unless you know better, that safety net is some kind of <!-- raw HTML omitted -->automated developer test<!-- raw HTML omitted --> suite.</p>\n<p><!-- raw HTML omitted -->Enable developers<!-- raw HTML omitted -->, don&rsquo;t direct them.</p>\n<p>Discuss.</p>\n",
				"content_text": "Here's a raw idea I'm playing with in my head:\n\nAgile development is great. But, if your team doesn't map well to it, <strong>steal ideas</strong> from agile relentlessly.\n\nYou want a <strong>fluid environment</strong> where developers can solve problems (features, defects, chores) as they see fit.\n\nDon't use procedures to normalize productivity or as a communication protocol.\n\nDo have a way to <strong>communicate</strong> things that need to get done or could possibly get done.\n\nYou need a safety net. Unless you know better, that safety net is some kind of <strong>automated developer test</strong> suite.\n\n<strong>Enable developers</strong>, don't direct them.\n\nDiscuss.\n",
				"date_published": "2009-01-28T21:49:38-07:00",
				"url": "https://therealadam.com/2009/01/28/developing-fluidly.html",
				"tags": ["Uncategorized","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/26/classy-web-development.html",
				"title": "Classy Web Development with Sinatra",
				"content_html": "<p>An admission: I didn&rsquo;t really do as many <em>awesome</em> things during the Bush administration that I would have liked to. So, now that we have a new president, I&rsquo;m going to start off right by showing you something awesome.</p>\n<p>While it may seem like I&rsquo;ve had my head up in the clouds of physical computing, urbanism and monads, I&rsquo;ve been nose down in something else. I&rsquo;m super-excited to tell you, I&rsquo;ve just finished the first two episodes of &ldquo;<!-- raw HTML omitted -->Classy Web Development with Sinatra<!-- raw HTML omitted -->&rdquo;, a screencast for the Pragmatic Programmers.</p>\n<p>h2. The Particulars</p>\n<p><!-- raw HTML omitted -->Sinatra<!-- raw HTML omitted --> is a great subject. As I point out in the first episode, I think it&rsquo;s very special in how it puts the smallest possible language over HTTP. Taken with the fun of building your own framework up from scratch, Sinatra apps are a ton of fun to write. Further, Sinatra really shines when you want to write micro-apps or services. Building an API for your Rails app by standing a Sinatra app up next to it to serve the API is a great approach for many applications.</p>\n<p>If you&rsquo;ve known me for a while, you probably know I had at one point aspired to write a book for the Pragmatic bookshelf. That didn&rsquo;t work out (for the better, I think), but I still wanted to produce <em>something</em> to get the good word out there. I&rsquo;ve enjoyed the screencast format from the beginning, and I enjoy teaching people interactively, so the format seemed well suited to me. Plus, I&rsquo;ve always loved the sound of keys clacking in a screencast. Now you can hear <em>my</em> keys!</p>\n<p>h2. Shout-outs</p>\n<p>Lately, <!-- raw HTML omitted -->Ryan Tomayko<!-- raw HTML omitted --> has been absolutely kicking ass with his contributions to Sinatra and Rack. He was kind enough to review the script before we recorded and even put out a maintenance release so that we wouldn&rsquo;t have to talk around a couple bugs that snuck into the latest release. The finished product is much better for his feedback and guidance.</p>\n<p>From the beginning, <!-- raw HTML omitted -->Mike Clark<!-- raw HTML omitted --> has been a great mentor and guide through the process of producing a screencast. He helped me write to the beginner&rsquo;s perspective and avoid speaking in a monotone. Throughout the process, he&rsquo;s been more helpful and supportive than I could have ever imagined. Needless to say, he&rsquo;s the foundation that all the goodness of the Pragmatic Screencasts series is built upon.</p>\n<p>h2. I want to go to there</p>\n<p>Go <!-- raw HTML omitted -->give the sampler a look<!-- raw HTML omitted -->, then <!-- raw HTML omitted -->buy the episodes<!-- raw HTML omitted -->! If you have questions, <!-- raw HTML omitted -->drop a message in the forum<!-- raw HTML omitted -->. And don&rsquo;t forget to <!-- raw HTML omitted -->grab the example app<!-- raw HTML omitted --> and <!-- raw HTML omitted -->service<!-- raw HTML omitted --> off GitHub.</p>\n",
				"content_text": "An admission: I didn't really do as many *awesome* things during the Bush administration that I would have liked to. So, now that we have a new president, I'm going to start off right by showing you something awesome.\n\nWhile it may seem like I've had my head up in the clouds of physical computing, urbanism and monads, I've been nose down in something else. I'm super-excited to tell you, I've just finished the first two episodes of \"<a href=\"http://pragprog.com/screencasts/v-aksinatra/classy-web-development-with-sinatra\">Classy Web Development with Sinatra</a>\", a screencast for the Pragmatic Programmers.\n\nh2. The Particulars\n\n<a href=\"http://sinatra.github.com/\">Sinatra</a> is a great subject. As I point out in the first episode, I think it's very special in how it puts the smallest possible language over HTTP. Taken with the fun of building your own framework up from scratch, Sinatra apps are a ton of fun to write. Further, Sinatra really shines when you want to write micro-apps or services. Building an API for your Rails app by standing a Sinatra app up next to it to serve the API is a great approach for many applications.\n\nIf you've known me for a while, you probably know I had at one point aspired to write a book for the Pragmatic bookshelf. That didn't work out (for the better, I think), but I still wanted to produce _something_ to get the good word out there. I've enjoyed the screencast format from the beginning, and I enjoy teaching people interactively, so the format seemed well suited to me. Plus, I've always loved the sound of keys clacking in a screencast. Now you can hear *my* keys!\n\nh2. Shout-outs\n\nLately, <a href=\"http://tomayko.com/\">Ryan Tomayko</a> has been absolutely kicking ass with his contributions to Sinatra and Rack. He was kind enough to review the script before we recorded and even put out a maintenance release so that we wouldn't have to talk around a couple bugs that snuck into the latest release. The finished product is much better for his feedback and guidance.\n\nFrom the beginning, <a href=\"http://clarkware.com/cgi/blosxom\">Mike Clark</a> has been a great mentor and guide through the process of producing a screencast. He helped me write to the beginner's perspective and avoid speaking in a monotone. Throughout the process, he's been more helpful and supportive than I could have ever imagined. Needless to say, he's the foundation that all the goodness of the Pragmatic Screencasts series is built upon.\n\nh2. I want to go to there\n\nGo <a href=\"http://screencasts.pragprog.com/v-aksinatra-v-sampler.mov\">give the sampler a look</a>, then <a href=\"http://pragprog.com/screencasts/v-aksinatra/classy-web-development-with-sinatra\">buy the episodes</a>! If you have questions, <a href=\"http://forums.pragprog.com/forums/101\">drop a message in the forum</a>. And don't forget to <a href=\"http://github.com/therealadam/shorten/tree\">grab the example app</a> and <a href=\"http://github.com/therealadam/asides/tree\">service</a> off GitHub.\n",
				"date_published": "2009-01-26T12:48:06-07:00",
				"url": "https://therealadam.com/2009/01/26/classy-web-development.html",
				"tags": ["Uncategorized","ruby","sinatra"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/26/great-nike-ad.html",
				"title": "Great Nike ad",
				"content_html": "<p>Beethoven&rsquo;s Ninth and skippy video? You&rsquo;ve got my attention.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Beethoven's Ninth and skippy video? You've got my attention.\n\n<div class=\"center\">\n<br /><a href=\"http://vimeo.com/1579813\">Nike - The Five</a> from <a href=\"http://vimeo.com/the13thwitness\">13thWitness™</a> on <a href=\"http://vimeo.com\">Vimeo</a>.\n</div>\n",
				"date_published": "2009-01-26T11:09:10-07:00",
				"url": "https://therealadam.com/2009/01/26/great-nike-ad.html",
				"tags": ["Curated","golf","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/22/how-you-do.html",
				"title": "How you do what you does",
				"content_html": "<p>Alex Payne has an idiomatic and wonderful way of sharing the interesting parts of his workflow through writing. <!-- raw HTML omitted -->Bet<!-- raw HTML omitted --> <!-- raw HTML omitted -->you<!-- raw HTML omitted --> can&rsquo;t <!-- raw HTML omitted -->read<!-- raw HTML omitted --> just <!-- raw HTML omitted -->one<!-- raw HTML omitted -->.</p>\n<p>By far, I&rsquo;ve found <!-- raw HTML omitted -->al3x&rsquo;s Rules for Computing Happiness<!-- raw HTML omitted --> the most insightful and closest to my own &ldquo;aesthetic&rdquo;, as it were. It&rsquo;s worth regular review, which is why I&rsquo;m bringing it up right now.</p>\n<p>See also, <!-- raw HTML omitted -->Workflow Voyeurism<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Alex Payne has an idiomatic and wonderful way of sharing the interesting parts of his workflow through writing. <a href=\"http://al3x.net/2008/12/03/how-i-use-textmate.html\">Bet</a> <a href=\"http://al3x.net/2008/12/22/life-as-queues.html\">you</a> can't <a href=\"http://al3x.net/2008/12/24/paid-dont-use-anymore.html\">read</a> just <a href=\"http://al3x.net/2009/01/02/waferbaby-interview.html\">one</a>.\n\nBy far, I've found <a href=\"http://www.al3x.net/2008/09/al3xs-rules-for-computing-happiness.html\">al3x's Rules for Computing Happiness</a> the most insightful and closest to my own \"aesthetic\", as it were. It's worth regular review, which is why I'm bringing it up right now.\n\nSee also, <a href=\"http://particletree.com/notebook/kevins-files-and-folders/\">Workflow Voyeurism</a>.\n",
				"date_published": "2009-01-22T07:08:14-07:00",
				"url": "https://therealadam.com/2009/01/22/how-you-do.html",
				"tags": ["Curated","Nerdery","workflow"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/21/coolest-building-in.html",
				"title": "Coolest building in downtown Dallas",
				"content_html": "<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Check out the rest of The Urban Fabric&rsquo;s stuff<!-- raw HTML omitted -->, he&rsquo;s done <!-- raw HTML omitted -->many<!-- raw HTML omitted --> <!-- raw HTML omitted -->great<!-- raw HTML omitted --> <!-- raw HTML omitted -->pictures<!-- raw HTML omitted --> <!-- raw HTML omitted -->of<!-- raw HTML omitted --> <!-- raw HTML omitted -->downtown<!-- raw HTML omitted --> <!-- raw HTML omitted -->Dallas<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<div class=\"center\">\n<a href=\"http://www.flickr.com/photos/ninjatune/3200989146/\" title=\"Fountain Place by ⓣheⓤrbanⓕabric, on Flickr\"><img src=\"http://farm4.static.flickr.com/3408/3200989146_c9df8b6f2a.jpg\" width=\"500\" height=\"477\" alt=\"Fountain Place\" /></a>\n</div>\n\n<a href=\"http://www.flickr.com/photos/ninjatune/\">Check out the rest of The Urban Fabric's stuff</a>, he's done <a href=\"http://www.flickr.com/photos/ninjatune/3200989820/\">many</a> <a href=\"http://www.flickr.com/photos/ninjatune/3200988654/\">great</a> <a href=\"http://www.flickr.com/photos/ninjatune/330208511/in/set-72157594357949284/\">pictures</a> <a href=\"http://www.flickr.com/photos/ninjatune/2944468594/in/set-72157594514062741/\">of</a> <a href=\"http://www.flickr.com/photos/ninjatune/3047670944/in/set-72157594514062741/\">downtown</a> <a href=\"http://www.flickr.com/photos/ninjatune/2655407714/in/set-72157594514062741/\">Dallas</a>.\n",
				"date_published": "2009-01-21T07:21:48-07:00",
				"url": "https://therealadam.com/2009/01/21/coolest-building-in.html",
				"tags": ["Curated","architecture","Eye Candy"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/20/neko-case-hearts.html",
				"title": "Neko Case hearts dogs",
				"content_html": "<ol>\n<li><!-- raw HTML omitted -->Post Neko Case&rsquo;s new single<!-- raw HTML omitted --></li>\n<li><!-- raw HTML omitted -->Neko Case<!-- raw HTML omitted --> donates $5 to dog rescue</li>\n</ol>\n<p><!-- raw HTML omitted -->Done<!-- raw HTML omitted -->.</p>\n",
				"content_text": "1. <a href=\"http://www.barbariangroup.com/posts/1559-people_got_a_lotta_nerve\">Post Neko Case's new single</a>\n2. <a href=\"http://www.nekocase.com/news/\">Neko Case</a> donates $5 to dog rescue\n\n<a href=\"http://therealadam.com/?attachment_id=473\">Done</a>.\n",
				"date_published": "2009-01-20T16:00:54-07:00",
				"url": "https://therealadam.com/2009/01/20/neko-case-hearts.html",
				"tags": ["Music","Pop Culture","Curated","Dogs, cats, et cetera"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/20/on-news-beginnings.html",
				"title": "On news: beginnings",
				"content_html": "<p>I first started trying to figure out the world, and especially politics, after September 11th. Before that, it was a topic of tangential concern. Afterwards, of course, it seemed critically important. My roommate at the time was a rather strong adherent to Fox News. I started reading weblogs that were pretty much the polar opposite in opinion. Somewhere in the middle, I frequently watched <em>The Daily Show</em>. I say they&rsquo;re in the middle because, roughly speaking, they are not left or right wing but <em>anti-idiot</em>.</p>\n<p>I quickly discovered two things.</p>\n<p>First, <em>everyone</em> has an axe to grind. Trying to figure out that person&rsquo;s axe is an unfortunate necessity to understanding whether they are a good source of news and opinion.</p>\n<p>Second, twenty-four hour news and dozens of weblog posts a day are just too twitchy. To support that rate of production, you have to make a big deal about lots of things that are really no big deal at all. A daily news cycle is better but still intolerable. One week is the shortest term over which you can stand back and start to decide which events are meaningful.</p>\n<p>Long-story short: I recognize Fox News as propaganda, dismiss CNN and MSNBC as too twitchy, realize that weblogs are too spazzy and that, in general, people are colored by their opinions and vetting them is not interesting to me.</p>\n",
				"content_text": "I first started trying to figure out the world, and especially politics, after September 11th. Before that, it was a topic of tangential concern. Afterwards, of course, it seemed critically important. My roommate at the time was a rather strong adherent to Fox News. I started reading weblogs that were pretty much the polar opposite in opinion. Somewhere in the middle, I frequently watched _The Daily Show_. I say they're in the middle because, roughly speaking, they are not left or right wing but *anti-idiot*.\n\nI quickly discovered two things.\n\nFirst, _everyone_ has an axe to grind. Trying to figure out that person's axe is an unfortunate necessity to understanding whether they are a good source of news and opinion.\n\nSecond, twenty-four hour news and dozens of weblog posts a day are just too twitchy. To support that rate of production, you have to make a big deal about lots of things that are really no big deal at all. A daily news cycle is better but still intolerable. One week is the shortest term over which you can stand back and start to decide which events are meaningful.\n\nLong-story short: I recognize Fox News as propaganda, dismiss CNN and MSNBC as too twitchy, realize that weblogs are too spazzy and that, in general, people are colored by their opinions and vetting them is not interesting to me.\n",
				"date_published": "2009-01-20T13:43:32-07:00",
				"url": "https://therealadam.com/2009/01/20/on-news-beginnings.html",
				"tags": ["The System","on_news"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/20/thor-doing-his.html",
				"title": "Thor doing his thing",
				"content_html": "<p>My wife doing the canine agility:</p>\n<!-- raw HTML omitted -->\n<p>Go <!-- raw HTML omitted -->Thor<!-- raw HTML omitted -->!</p>\n",
				"content_text": "My wife doing the canine agility:\n\n<div class=\"center\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=shv6LtVNpKo&hl=en&fs=1&rel=0&color1=0x3a3a3a&color2=0x999999])\n</div>\n\nGo <a href=\"http://flickr.com/photos/courtney/tags/thor\">Thor</a>!\n",
				"date_published": "2009-01-20T08:24:28-07:00",
				"url": "https://therealadam.com/2009/01/20/thor-doing-his.html",
				"tags": ["Curated","Dogs, cats, et cetera","life:dog-agility","thor"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/19/more-monads.html",
				"title": "More monads",
				"content_html": "<p>&ldquo;While we&rsquo;re talking about monads&rdquo;:<a href=\"http://therealadam.com/archive/2009/01/15/monads-ruby-crazy/,\">therealadam.com/archive/2&hellip;</a> you should read into the compelling argument that jQuery is, in fact, a DOM monad. It&rsquo;ll set your mind straight. Also, give &ldquo;All About Monads&rdquo;:http://www.haskell.org/all_about_monads/html/index.html a look - I just started reading it, but it&rsquo;s making a lot of sense.</p>\n",
				"content_text": "\"While we're talking about monads\":[therealadam.com/archive/2...](http://therealadam.com/archive/2009/01/15/monads-ruby-crazy/,) you should read into the compelling argument that jQuery is, in fact, a DOM monad. It'll set your mind straight. Also, give \"All About Monads\":http://www.haskell.org/all_about_monads/html/index.html a look - I just started reading it, but it's making a lot of sense.\n",
				"date_published": "2009-01-19T16:06:47-07:00",
				"url": "https://therealadam.com/2009/01/19/more-monads.html",
				"tags": ["Curated","haskell","jquery"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/19/datamapper-factory-girl.html",
				"title": "DataMapper + Factory Girl",
				"content_html": "<p>I&rsquo;ve been toying with &ldquo;Factory Girl&rdquo;:<a href=\"http://www.thoughtbot.com/projects/factory_girl\">www.thoughtbot.com/projects/&hellip;</a> lately. The code I&rsquo;m currently working on needs to generate lots of data before tests run and Factory Girl is handling this well compared to fixtures or coding my own data generators. So, in some unrelated toying with &ldquo;DataMapper&rdquo;:<a href=\"http://datamapper.org/doku.php,\">datamapper.org/doku.php,</a> I came to wonder if Factory Girl and DataMapper play nicely together.</p>\n<p>Turns out they do! The only hitch is you need @dm-validations@ in addition to @dm-core@. Since no one seems to have written this up yet, I thought I&rsquo;d &ldquo;share my results&rdquo;:<a href=\"http://gist.github.com/49017.\">gist.github.com/49017.</a></p>\n",
				"content_text": "I've been toying with \"Factory Girl\":[www.thoughtbot.com/projects/...](http://www.thoughtbot.com/projects/factory_girl) lately. The code I'm currently working on needs to generate lots of data before tests run and Factory Girl is handling this well compared to fixtures or coding my own data generators. So, in some unrelated toying with \"DataMapper\":[datamapper.org/doku.php,](http://datamapper.org/doku.php,) I came to wonder if Factory Girl and DataMapper play nicely together.\n\nTurns out they do! The only hitch is you need @dm-validations@ in addition to @dm-core@. Since no one seems to have written this up yet, I thought I'd \"share my results\":[gist.github.com/49017.](http://gist.github.com/49017.)\n",
				"date_published": "2009-01-19T13:19:43-07:00",
				"url": "https://therealadam.com/2009/01/19/datamapper-factory-girl.html",
				"tags": ["Curated","ruby","tdd"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/19/compare-and-contrast.html",
				"title": "Compare and contrast",
				"content_html": "<p><em>Compare</em>. &ldquo;Suburbs built on top of military/industrial complexes&rdquo;:<a href=\"http://infranetlab.org/blog/2009/01/student-works-suburban-defense/\">infranetlab.org/blog/2009&hellip;</a> - intriguing yet awful. Quirky and cute - &ldquo;people re-enacting Far Side comics&rdquo;:<a href=\"http://www.flickr.com/groups/farside/pool/.\">www.flickr.com/groups/fa&hellip;</a></p>\n<p><em>Contrast</em>. Assaf Arkin notes that the current &ldquo;recession may bring us more apps that put function over form&rdquo;:<a href=\"http://blog.labnotes.org/2009/01/15/rounded-corners-219-%e2%80%93-browser-oriented-architecture/.\">blog.labnotes.org/2009/01/1&hellip;</a> Hopefully this means we won&rsquo;t hear about Rich Internet Apps (blech!) for a while. On the other hand, hopefully we <em>will</em> see more apps that leverage &ldquo;game mechanics&rdquo;:<a href=\"http://bokardo.com/archives/game-mechanics-for-interaction-design-an-interview-with-amy-jo-kim/.\">bokardo.com/archives/&hellip;</a></p>\n",
				"content_text": "*Compare*. \"Suburbs built on top of military/industrial complexes\":[infranetlab.org/blog/2009...](http://infranetlab.org/blog/2009/01/student-works-suburban-defense/) - intriguing yet awful. Quirky and cute - \"people re-enacting Far Side comics\":[www.flickr.com/groups/fa...](http://www.flickr.com/groups/farside/pool/.)\n\n*Contrast*. Assaf Arkin notes that the current \"recession may bring us more apps that put function over form\":[blog.labnotes.org/2009/01/1...](http://blog.labnotes.org/2009/01/15/rounded-corners-219-%e2%80%93-browser-oriented-architecture/.) Hopefully this means we won't hear about Rich Internet Apps (blech!) for a while. On the other hand, hopefully we _will_ see more apps that leverage \"game mechanics\":[bokardo.com/archives/...](http://bokardo.com/archives/game-mechanics-for-interaction-design-an-interview-with-amy-jo-kim/.)\n",
				"date_published": "2009-01-19T08:03:39-07:00",
				"url": "https://therealadam.com/2009/01/19/compare-and-contrast.html",
				"tags": ["Curated","The System","Nerdery","games","urbanism"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/16/on-feeds-tactics.html",
				"title": "On Feeds: Tactics",
				"content_html": "<p>Ask enough people what feeds they read and you will quickly hear &ldquo;too many&rdquo; and &ldquo;I suffer from information overload.&rdquo; I&rsquo;ve been there too; at one time I subscribed to more than five hundred feeds. A lot of people say you can&rsquo;t really follow more than fifty feeds <em>and</em> do productive things. I&rsquo;m not the most productive guy, but I&rsquo;m comfortably following 239 feeds right now. My secrets:</p>\n<ul>\n<li>Man made the &ldquo;mark all as read&rdquo; command for a reason. Use it without shame.</li>\n<li>Skim aggressively. If the title grabs you, check out the first few sentences. If it doesn&rsquo;t, just skim over the content and let the words and images that may jump out grab you. If they don&rsquo;t, skip to the next item.</li>\n<li>Don&rsquo;t add feeds out of guilt or peer-pressure. Know what topics you want to read about. Add feeds that align with those topics. If a feed looks <em>really</em> awesome but doesn&rsquo;t match a topic, subscribe to it and put it in a &ldquo;Trial&rdquo; folder. Evaluate your trials every few weeks.</li>\n<li>Unsubscribe if you find yourself consistently skipping all the items in a feed. NNW and Google Reader both have attention readouts that can help you decide what should go. Do this sort of pruning every few months.</li>\n</ul>\n<p>After reading feeds for several years, I&rsquo;m finally starting to feel like I&rsquo;m doing it right. How do I know I&rsquo;m doing it right? Because I recently thought, &ldquo;hey, I haven&rsquo;t seen enough awesome today.&rdquo; And then I open NNW and I&rsquo;ve got awesome all over me.</p>\n",
				"content_text": "Ask enough people what feeds they read and you will quickly hear \"too many\" and \"I suffer from information overload.\" I've been there too; at one time I subscribed to more than five hundred feeds. A lot of people say you can't really follow more than fifty feeds _and_ do productive things. I'm not the most productive guy, but I'm comfortably following 239 feeds right now. My secrets:\n\n* Man made the \"mark all as read\" command for a reason. Use it without shame.\n* Skim aggressively. If the title grabs you, check out the first few sentences. If it doesn't, just skim over the content and let the words and images that may jump out grab you. If they don't, skip to the next item.\n* Don't add feeds out of guilt or peer-pressure. Know what topics you want to read about. Add feeds that align with those topics. If a feed looks _really_ awesome but doesn't match a topic, subscribe to it and put it in a \"Trial\" folder. Evaluate your trials every few weeks.\n* Unsubscribe if you find yourself consistently skipping all the items in a feed. NNW and Google Reader both have attention readouts that can help you decide what should go. Do this sort of pruning every few months.\n\nAfter reading feeds for several years, I'm finally starting to feel like I'm doing it right. How do I know I'm doing it right? Because I recently thought, \"hey, I haven't seen enough awesome today.\" And then I open NNW and I've got awesome all over me.\n",
				"date_published": "2009-01-16T08:21:51-07:00",
				"url": "https://therealadam.com/2009/01/16/on-feeds-tactics.html",
				"tags": ["Nerdery","feeds"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/15/monads-ruby-crazy.html",
				"title": "Monads + Ruby = crazy",
				"content_html": "<p>Guaranteed to boil your brain: <!-- raw HTML omitted -->do notation in Ruby<!-- raw HTML omitted -->. You got your monads in my Ruby! He uses ParseTree and Ruby2Ruby to rewrite your code. In other words: heavy.</p>\n<p>I&rsquo;d love to point you to a good monads tutorial, but the <!-- raw HTML omitted -->monad fallacy<!-- raw HTML omitted --> prevents me from doing that. I&rsquo;ll try again once I fully grok them.</p>\n",
				"content_text": "Guaranteed to boil your brain: <a href=\"http://github.com/aanand/ruby-do-notation/tree/master\">do notation in Ruby</a>. You got your monads in my Ruby! He uses ParseTree and Ruby2Ruby to rewrite your code. In other words: heavy.\n\nI'd love to point you to a good monads tutorial, but the <a href=\"http://byorgey.wordpress.com/2009/01/12/abstraction-intuition-and-the-monad-tutorial-fallacy/\">monad fallacy</a> prevents me from doing that. I'll try again once I fully grok them.\n",
				"date_published": "2009-01-15T14:27:41-07:00",
				"url": "https://therealadam.com/2009/01/15/monads-ruby-crazy.html",
				"tags": ["Curated","ruby","haskell"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/15/awesome-people-hacker.html",
				"title": "Awesome people, hacker spaces, double basses, dictionary",
				"content_html": "<p>Brian Oberkirch is a big fan of <!-- raw HTML omitted -->people who are doing awesome stuff on the web<!-- raw HTML omitted -->. Me too! I&rsquo;d add to his list: <!-- raw HTML omitted -->Ryan Tomayko<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Greg Borenstein<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Garrett Dimon<!-- raw HTML omitted -->, <!-- raw HTML omitted -->_why the lucky stiff<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Jeremy Keith<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Robert Hodgin<!-- raw HTML omitted -->, <!-- raw HTML omitted -->J. Chris Anderson<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->Christian Neukirchen<!-- raw HTML omitted -->. My list, like his, is incomplete, so make your own!</p>\n<p>A hacker&rsquo;s space in Kansas is <!-- raw HTML omitted -->renting an underground bunker to house their activities.<!-- raw HTML omitted --> Recommended joke: those guys wouldn&rsquo;t know a hacker&rsquo;s space from a hole in the ground.</p>\n<p>This image and story makes me <!-- raw HTML omitted -->want my double bass really badly<!-- raw HTML omitted -->. Don&rsquo;t miss the story; it&rsquo;s fantastic.</p>\n<p>Pro-tip: go ahead and add refactoring to your system dictionary. You won&rsquo;t thank yourself later, but you won&rsquo;t curse the machine either.</p>\n",
				"content_text": "Brian Oberkirch is a big fan of <a href=\"http://www.brianoberkirch.com/2009/01/09/powertwitter-narendra-the-unsung-armies-of-the-web/\">people who are doing awesome stuff on the web</a>. Me too! I'd add to his list: <a href=\"http://tomayko.com/\">Ryan Tomayko</a>, <a href=\"http://www.urbanhonking.com/ideasfordozens/\">Greg Borenstein</a>, <a href=\"http://garrettdimon.com/\">Garrett Dimon</a>, <a href=\"http://whytheluckystiff.net/\">_why the lucky stiff</a>, <a href=\"http://adactio.com/\">Jeremy Keith</a>, <a href=\"http://www.flight404.com/blog/\">Robert Hodgin</a>, <a href=\"http://jchris.mfdz.com/\">J. Chris Anderson</a>, and <a href=\"http://chneukirchen.org/\">Christian Neukirchen</a>. My list, like his, is incomplete, so make your own!\n\nA hacker's space in Kansas is <a href=\"http://blog.cowtowncomputercongress.org/?p=70 -- Those guys wouldn't know a hacker space from a hole in the ground.\">renting an underground bunker to house their activities.</a> Recommended joke: those guys wouldn't know a hacker's space from a hole in the ground.\n\nThis image and story makes me <a href=\"http://www.flickr.com/photos/bunaen/40606875/ -- makes me want my double bass really badly\">want my double bass really badly</a>. Don't miss the story; it's fantastic.\n\nPro-tip: go ahead and add refactoring to your system dictionary. You won't thank yourself later, but you won't curse the machine either.\n",
				"date_published": "2009-01-15T09:45:01-07:00",
				"url": "https://therealadam.com/2009/01/15/awesome-people-hacker.html",
				"tags": ["Music","Pop Culture","Curated","awesome","Eye Candy","pro_tip"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/15/agile-on-a.html",
				"title": "Agile on a column",
				"content_html": "<p><!-- raw HTML omitted -->Justin Ouellette<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://jstn.cc/post/69640140\">Justin Ouellette</a>:\n\n<blockquote>When these have all been taken down it's ready to go.</blockquote>\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2009/01/u8ugxloitikdl2x7hmec0e3ao1-400.jpg\" alt=\"u8UGxloitikdl2x7HMeC0e3ao1_400.jpg\" border=\"0\" width=\"400\" height=\"534\" /></div>\n",
				"date_published": "2009-01-15T06:44:35-07:00",
				"url": "https://therealadam.com/2009/01/15/agile-on-a.html",
				"tags": ["Curated","Eye Candy","agile"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/14/on-feeds-my.html",
				"title": "On Feeds: My History",
				"content_html": "<p>Ted Leung recently noted his &ldquo;blog-aversary&rdquo;:<a href=\"http://www.sauria.com/blog/2009/01/09/blogaversary/.\">www.sauria.com/blog/2009&hellip;</a> This reminded me that I&rsquo;ve been reading feeds for 6-7 years. Shifting from reading centralized media like CNET, Infoworld and even Slashdot to individuals like &ldquo;Matt Webb&rdquo;:<a href=\"http://interconnected.org/home/,\">interconnected.org/home/,</a> &ldquo;Brent Simmons&rdquo;:<a href=\"http://inessential.com/\">inessential.com</a> and &ldquo;Simon Willison&rdquo;:<a href=\"http://simonwillison.net/\">simonwillison.net</a> was an important event. For me, it was one of those moments where you realize there&rsquo;s a whole other world of cool stuff to discover, explore and take part in. Certainly I would have a completely different character if I hadn&rsquo;t discovered people out there on the web, doing their own cool stuff.</p>\n<p>When I first started reading feeds, I experimented with some Linux stuff, most notably the crazy &ldquo;AmphetaDesk&rdquo;:<a href=\"http://www.disobey.com/amphetadesk/.\">www.disobey.com/amphetade&hellip;</a> I quickly settled into loving &ldquo;NetNewsWire&rdquo;:<a href=\"http://ranchero.com/.\">ranchero.com/.</a> It was the first app I purchased when I got a Mac, and I still use it every day, to this day. Call me a feed reading curmudgeon, but I still think it&rsquo;s the best way to keep up with lots of sites.</p>\n<p>I&rsquo;ve gone through some shifts in the kinds of feeds I read. I discovered feeds and blogging by &ldquo;Dave Winer&rdquo;:<a href=\"http://scripting.com\">scripting.com</a>, so I started reading him and the people in his sphere of influence. I quickly figured out that said sphere is an odd social environment that has little relevance to what I do as a developer. For a while, I subscribed to the &ldquo;must read&rdquo; influencers, such as Boing Boing. I quickly found that firehose was too strong and, again, not relevant enough.</p>\n<p>So instead of trying to figure those worlds out, I started reading more coders. Somehow that lead from reading people who do front-end coding to reading design stuff, which proved quite interesting. These days I&rsquo;ve been subscribing to people writing about &ldquo;information design&rdquo;:<a href=\"http://konigi.com\">konigi.com</a>, &ldquo;visualization&rdquo;:<a href=\"http://www.flight404.com/blog,\">www.flight404.com/blog,</a> &ldquo;open source hardware&rdquo;:<a href=\"http://tinker.it/now,\">tinker.it/now,</a> &ldquo;game criticism&rdquo;:<a href=\"http://www.rockpapershotgun.com\">www.rockpapershotgun.com</a> and &ldquo;urban design&rdquo;:<a href=\"http://bldgblog.blogspot.com/.\">bldgblog.blogspot.com/.</a> I&rsquo;m finding lots of awesome there.</p>\n",
				"content_text": "Ted Leung recently noted his \"blog-aversary\":[www.sauria.com/blog/2009...](http://www.sauria.com/blog/2009/01/09/blogaversary/.) This reminded me that I've been reading feeds for 6-7 years. Shifting from reading centralized media like CNET, Infoworld and even Slashdot to individuals like \"Matt Webb\":[interconnected.org/home/,](http://interconnected.org/home/,) \"Brent Simmons\":[inessential.com](http://inessential.com/) and \"Simon Willison\":[simonwillison.net](http://simonwillison.net/) was an important event. For me, it was one of those moments where you realize there's a whole other world of cool stuff to discover, explore and take part in. Certainly I would have a completely different character if I hadn't discovered people out there on the web, doing their own cool stuff.\n\nWhen I first started reading feeds, I experimented with some Linux stuff, most notably the crazy \"AmphetaDesk\":[www.disobey.com/amphetade...](http://www.disobey.com/amphetadesk/.) I quickly settled into loving \"NetNewsWire\":[ranchero.com/.](http://ranchero.com/.) It was the first app I purchased when I got a Mac, and I still use it every day, to this day. Call me a feed reading curmudgeon, but I still think it's the best way to keep up with lots of sites.\n\nI've gone through some shifts in the kinds of feeds I read. I discovered feeds and blogging by \"Dave Winer\":[scripting.com](http://scripting.com), so I started reading him and the people in his sphere of influence. I quickly figured out that said sphere is an odd social environment that has little relevance to what I do as a developer. For a while, I subscribed to the \"must read\" influencers, such as Boing Boing. I quickly found that firehose was too strong and, again, not relevant enough.\n\nSo instead of trying to figure those worlds out, I started reading more coders. Somehow that lead from reading people who do front-end coding to reading design stuff, which proved quite interesting. These days I've been subscribing to people writing about \"information design\":[konigi.com](http://konigi.com), \"visualization\":[www.flight404.com/blog,](http://www.flight404.com/blog,) \"open source hardware\":[tinker.it/now,](http://tinker.it/now,) \"game criticism\":[www.rockpapershotgun.com](http://www.rockpapershotgun.com) and \"urban design\":[bldgblog.blogspot.com/.](http://bldgblog.blogspot.com/.) I'm finding lots of awesome there.\n",
				"date_published": "2009-01-14T12:44:23-07:00",
				"url": "https://therealadam.com/2009/01/14/on-feeds-my.html",
				"tags": ["Nerdery","people:simon-willison","feeds"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/14/the-next-generation.html",
				"title": "The Next Generation meets Reading Rainbow",
				"content_html": "<p><!-- raw HTML omitted -->Star Trek: The Next Generation<!-- raw HTML omitted --> was, for all intents and purposes, my jam. I was just the right age to enjoy it when it was on the air. Concurrently, I was the right age to watch <em>Reading Rainbow</em>. Ergo, <!-- raw HTML omitted -->the episode of the latter regarding the former<!-- raw HTML omitted --> was pretty much the coolest thing ever.</p>\n",
				"content_text": "<em>Star Trek: The Next Generation</em> was, for all intents and purposes, my jam. I was just the right age to enjoy it when it was on the air. Concurrently, I was the right age to watch _Reading Rainbow_. Ergo, <a href=\"http://scifi.videosift.com/video/Reading-Rainbow-Star-Trek-Next-Generation-Behind-The-Scenes\">the episode of the latter regarding the former</a> was pretty much the coolest thing ever.\n",
				"date_published": "2009-01-14T07:44:19-07:00",
				"url": "https://therealadam.com/2009/01/14/the-next-generation.html",
				"tags": ["Curated","Nerdery","awesome","star_trek"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/14/comicus.html",
				"title": "Comicus",
				"content_html": "<p>&ldquo;Matt McCray&rsquo;s&rdquo;:<a href=\"http://www.mattmccray.com/\">www.mattmccray.com</a> Comicus is a CMS for &ldquo;web&rdquo;:<a href=\"http://www.zoodotcom.com/\">www.zoodotcom.com</a> &ldquo;comics&rdquo;:<a href=\"http://www.lilmonstas.com/.\">www.lilmonstas.com/.</a> You may know Matt better for his excellent &ldquo;CMS-in-a-Rails-plugin Comatose&rdquo;:<a href=\"http://github.com/darthapo/comatose/tree/master,\">github.com/darthapo/&hellip;</a> but he wrote this in PHP. More impressively, he wrote it in a style that doesn&rsquo;t have all the <em>grunting</em> that is normally involved with writing PHP. He&rsquo;s got classes, templates and everything! I salute you, Matt.</p>\n",
				"content_text": "\"Matt McCray's\":[www.mattmccray.com](http://www.mattmccray.com/) Comicus is a CMS for \"web\":[www.zoodotcom.com](http://www.zoodotcom.com/) \"comics\":[www.lilmonstas.com/.](http://www.lilmonstas.com/.) You may know Matt better for his excellent \"CMS-in-a-Rails-plugin Comatose\":[github.com/darthapo/...](http://github.com/darthapo/comatose/tree/master,) but he wrote this in PHP. More impressively, he wrote it in a style that doesn't have all the *grunting* that is normally involved with writing PHP. He's got classes, templates and everything! I salute you, Matt.\n",
				"date_published": "2009-01-14T05:59:17-07:00",
				"url": "https://therealadam.com/2009/01/14/comicus.html",
				"tags": ["Curated","php"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/13/generative-van-halen.html",
				"title": "Generative Van Halen",
				"content_html": "<p>I saw this last week (really!), but it appears the &ldquo;blogger embargo&rdquo; was broken on Sunday, so here goes.</p>\n<p>&ldquo;Microsoft Research released an app&rdquo;:<a href=\"http://research.microsoft.com/en-us/um/redmond/projects/songsmith/\">research.microsoft.com/en-us/um/&hellip;</a> that lets you sing along to a drumbeat and then it generates music to match your singing. Many moons ago, an acappella version of &ldquo;Runnin' with the devil&rdquo; made it&rsquo;s way on to the internet. Some brilliant joker used the former on the latter and you get: <!-- raw HTML omitted -->something that&rsquo;s just not quite right<!-- raw HTML omitted -->. It&rsquo;s especially interesting how the software tries very hard to accommodate David Lee Roth&rsquo;s off-beat entrances.</p>\n<p>In my opinion, the &ldquo;DLR soundboard&rdquo;:<a href=\"http://www.thetyser.com/\">www.thetyser.com</a> and the &ldquo;Roth Alarm&rdquo;:<a href=\"http://rothalarm.ytmnd.com/\">rothalarm.ytmnd.com</a> are even better uses of the source material.</p>\n",
				"content_text": "I saw this last week (really!), but it appears the \"blogger embargo\" was broken on Sunday, so here goes.\n\n\"Microsoft Research released an app\":[research.microsoft.com/en-us/um/...](http://research.microsoft.com/en-us/um/redmond/projects/songsmith/) that lets you sing along to a drumbeat and then it generates music to match your singing. Many moons ago, an acappella version of \"Runnin' with the devil\" made it's way on to the internet. Some brilliant joker used the former on the latter and you get: <a href=\"http://music.metafilter.com/2943/Runnin-With-The-Songsmith\">something that's just not quite right</a>. It's especially interesting how the software tries very hard to accommodate David Lee Roth's off-beat entrances.\n\nIn my opinion, the \"DLR soundboard\":[www.thetyser.com](http://www.thetyser.com/) and the \"Roth Alarm\":[rothalarm.ytmnd.com](http://rothalarm.ytmnd.com/) are even better uses of the source material.\n",
				"date_published": "2009-01-13T17:35:45-07:00",
				"url": "https://therealadam.com/2009/01/13/generative-van-halen.html",
				"tags": ["Music","Pop Culture","Curated","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/13/vast-social-abstractions.html",
				"title": "Vast social abstractions",
				"content_html": "<!-- raw HTML omitted -->\n<p>J.G. Ballard, via &ldquo;Steve Dekorte&rdquo;:http://www.dekorte.com/blog/blog.cgi?do=item&amp;id=3805</p>\n",
				"content_text": "<blockquote>\n  We are surrounded by huge institutions we can never penetrate: the City, the banking system, political and advertising conglomerates, vast entertainment empires. They've made themselves more user-friendly, but they define the tastes to which we conform.\n</blockquote>\n\nJ.G. Ballard, via \"Steve Dekorte\":http://www.dekorte.com/blog/blog.cgi?do=item&amp;id=3805\n",
				"date_published": "2009-01-13T10:27:44-07:00",
				"url": "https://therealadam.com/2009/01/13/vast-social-abstractions.html",
				"tags": ["Curated","The System","social_abstractions"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/13/regarding-the-nfl.html",
				"title": "Regarding the 2009 NFL playoffs",
				"content_html": "<p>The announcers of the Pittsburgh/San Diego game went on and on about what good condition the field was in. I watched the game largely because there was snow on the ground. I <em>wanted</em> the field and weather to become part of the game. We get that so rarely in Dallas.</p>\n<p>For some reason, I found myself hoping the Steelers would win said game. I&rsquo;m not sure why; I&rsquo;m chalking it up to a wacky world where the <em>Cardinals</em> are going to the NFC championship.</p>\n<p>If the outcomes had gone slightly different this past weekend, we could have had two interesting SuperBowl possibilities. First, Pittsburgh vs. Philadelphia, an all Pennsylvania match. Second, Kerry Collins vs. Kurt Warner, the geriatric match.</p>\n<p>This is the extent to which I can write about professional sports without going into my vast conspiracy theories. One hundred words without mentioning officiating ain&rsquo;t bad, right?</p>\n",
				"content_text": "The announcers of the Pittsburgh/San Diego game went on and on about what good condition the field was in. I watched the game largely because there was snow on the ground. I *wanted* the field and weather to become part of the game. We get that so rarely in Dallas.\n\nFor some reason, I found myself hoping the Steelers would win said game. I'm not sure why; I'm chalking it up to a wacky world where the _Cardinals_ are going to the NFC championship.\n\nIf the outcomes had gone slightly different this past weekend, we could have had two interesting SuperBowl possibilities. First, Pittsburgh vs. Philadelphia, an all Pennsylvania match. Second, Kerry Collins vs. Kurt Warner, the geriatric match.\n\nThis is the extent to which I can write about professional sports without going into my vast conspiracy theories. One hundred words without mentioning officiating ain't bad, right?\n",
				"date_published": "2009-01-13T07:24:45-07:00",
				"url": "https://therealadam.com/2009/01/13/regarding-the-nfl.html",
				"tags": ["Expanded ideas","Sportsball!","football"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/12/bill-burcham-does.html",
				"title": "Bill Burcham does stuff",
				"content_html": "<!-- raw HTML omitted -->\n<p>Where <!-- raw HTML omitted -->Bill<!-- raw HTML omitted --> <!-- raw HTML omitted -->Burcham<!-- raw HTML omitted --> <!-- raw HTML omitted -->does what he does<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2009/01/burcham-desk.jpg\" alt=\"burcham_desk.jpg\" border=\"0\" width=\"500\" height=\"666\" /></div>\n\nWhere <a href=\"http://thoughtpropulsion.com/\">Bill</a> <a href=\"http://memerocket.com/\">Burcham</a> <a href=\"http://wherewedowhatwedo.com/spaces/1244-bill-burcham\">does what he does</a>.\n",
				"date_published": "2009-01-12T11:38:50-07:00",
				"url": "https://therealadam.com/2009/01/12/bill-burcham-does.html",
				"tags": ["Curated","Eye Candy","pdx"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/12/i-found-more.html",
				"title": "I found more awesome on the web",
				"content_html": "<p>Via <!-- raw HTML omitted -->Tinker It Now!<!-- raw HTML omitted -->, I ended up at <!-- raw HTML omitted -->Live Control of Open Source Animation in Animata<!-- raw HTML omitted -->. Therein, real-time 2.5D animation is controlled via a likeness of Mickey Mouse laden with Arduinos. Said gizmo sends data to <!-- raw HTML omitted -->PureData<!-- raw HTML omitted -->, relaying data to software called <!-- raw HTML omitted -->Animata<!-- raw HTML omitted -->. Animata does the animation sweetness.</p>\n<p>This led me down a whole rat&rsquo;s hole of awesome. &ldquo;Matt Niinimäki&rdquo;:<a href=\"http://originalhamsters.com/index.php\">originalhamsters.com/index.php</a> &ldquo;is up to awesome things&rdquo;:<a href=\"http://vimeo.com/mattiniinimaki/videos.\">vimeo.com/mattiniin&hellip;</a> Animata seems &ldquo;wicked cool&rdquo;:<a href=\"http://animata.kibu.hu/tutorials.html\">animata.kibu.hu/tutorials&hellip;</a> — it&rsquo;s like digital marionettes, except not creepy. PureData, near as I can tell, is like <em>Little Big Planet</em>, but for audio/video. The &ldquo;PureData documentation&rdquo;:<a href=\"http://puredata.info/docs/manuals/pd/\">puredata.info/docs/manu&hellip;</a> is <em>dense</em>, but there are good examples and docs included in the application (look under Help→Browser). Pd, so far, has the distinction of being more inscrutable, for me, than Haskell. I can run Haskell programs; I cannot, for my life, figure out how to make Pd patches <em>go</em>.</p>\n<p>Let&rsquo;s enumerate: &ldquo;Arduino&rdquo;:<a href=\"http://arduiono.cc\">arduiono.cc</a> is open source hardware with a dandy little programming environment that makes writing embedded programs vastly less onerous than is typical. PureData is visual-patch-language-thing for creating audio-oriented systems with some graphics smarts on the side. Animata does interactive real-time animation. All of these great toys are open source.</p>\n<p>Did I mention &ldquo;people are making cool stuff&rdquo;:<a href=\"http://therealadam.com/archive/2008/12/05/people-are-making-cool-stuff/?\">therealadam.com/archive/2&hellip;</a></p>\n",
				"content_text": "Via <a href=\"http://tinker.it/now/2009/01/09/stuff-and-things-23/\">Tinker It Now!</a>, I ended up at <a href=\"http://createdigitalmotion.com/2008/12/15/demos-and-tutorials-live-control-of-open-source-animation-in-animata-even-with-a%20viewmaster/\">Live Control of Open Source Animation in Animata</a>. Therein, real-time 2.5D animation is controlled via a likeness of Mickey Mouse laden with Arduinos. Said gizmo sends data to <a href=\"http://puredata.info/\">PureData</a>, relaying data to software called <a href=\"http://animata.kibu.hu/downloads.html\">Animata</a>. Animata does the animation sweetness.\n\nThis led me down a whole rat's hole of awesome. \"Matt Niinim&auml;ki\":[originalhamsters.com/index.php](http://originalhamsters.com/index.php) \"is up to awesome things\":[vimeo.com/mattiniin...](http://vimeo.com/mattiniinimaki/videos.) Animata seems \"wicked cool\":[animata.kibu.hu/tutorials...](http://animata.kibu.hu/tutorials.html) &mdash; it's like digital marionettes, except not creepy. PureData, near as I can tell, is like _Little Big Planet_, but for audio/video. The \"PureData documentation\":[puredata.info/docs/manu...](http://puredata.info/docs/manuals/pd/) is _dense_, but there are good examples and docs included in the application (look under Help&rarr;Browser). Pd, so far, has the distinction of being more inscrutable, for me, than Haskell. I can run Haskell programs; I cannot, for my life, figure out how to make Pd patches *go*.\n\n\nLet's enumerate: \"Arduino\":[arduiono.cc](http://arduiono.cc) is open source hardware with a dandy little programming environment that makes writing embedded programs vastly less onerous than is typical. PureData is visual-patch-language-thing for creating audio-oriented systems with some graphics smarts on the side. Animata does interactive real-time animation. All of these great toys are open source.\n\nDid I mention \"people are making cool stuff\":[therealadam.com/archive/2...](http://therealadam.com/archive/2008/12/05/people-are-making-cool-stuff/?)\n",
				"date_published": "2009-01-12T06:29:47-07:00",
				"url": "https://therealadam.com/2009/01/12/i-found-more.html",
				"tags": ["Curated","arduino"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/10/guidelines-for-a.html",
				"title": "Guidelines for a life well-lived",
				"content_html": "<p>Allow me to emphasize that <!-- raw HTML omitted -->1001 rules for my unborn son<!-- raw HTML omitted --> is the best weblog I&rsquo;ve seen in a long time. I read the entirety of the archives last night and this afternoon.</p>\n<p>Though I&rsquo;ve no plans to procreate, these are good guidelines for a life well-lived. If you&rsquo;re still looking for resolutions, start here.</p>\n",
				"content_text": "Allow me to emphasize that <a href=\"http://rulesformyunbornson.tumblr.com/\">1001 rules for my unborn son</a> is the best weblog I've seen in a long time. I read the entirety of the archives last night and this afternoon.\n\nThough I've no plans to procreate, these are good guidelines for a life well-lived. If you're still looking for resolutions, start here.\n",
				"date_published": "2009-01-10T16:38:46-07:00",
				"url": "https://therealadam.com/2009/01/10/guidelines-for-a.html",
				"tags": ["Curated","Expanded ideas","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/09/close-tabs-and.html",
				"title": "Close tabs and remove icons relentlessly",
				"content_html": "<p>Matt Lyon asks, &ldquo;<!-- raw HTML omitted -->What&rsquo;s the cure for tab-itis<!-- raw HTML omitted -->&rdquo;? I&rsquo;ll share the answer with everyone.</p>\n<p>Long term, develop a severe aversion to too many tabs. Short term, burn it to the ground. If you really need it, you&rsquo;ll find it again.</p>\n<p>This solution works for many things: apps in your menubar, apps in your Dock, tabs in your (Twitter, email, newsreader, etc.) folders on your Desktop, etc; anything that gets cluttered when you indulge your <!-- raw HTML omitted -->NADD(nerd attention deficit disorder)<!-- raw HTML omitted -->.</p>\n<p>Letting go of your short term stress that &ldquo;OMG there might be something awesome in there&rdquo; is a poor trade for long-term relaxation. Awesome will find you.</p>\n",
				"content_text": "Matt Lyon asks, \"<a href=\"http://twitter.com/mattly/status/1107928863\">What's the cure for tab-itis</a>\"? I'll share the answer with everyone.\n\nLong term, develop a severe aversion to too many tabs. Short term, burn it to the ground. If you really need it, you'll find it again.\n\nThis solution works for many things: apps in your menubar, apps in your Dock, tabs in your (Twitter, email, newsreader, etc.) folders on your Desktop, etc; anything that gets cluttered when you indulge your <a href=\"http://www.randsinrepose.com/archives/2003/07/10/nadd.html\">NADD(nerd attention deficit disorder)</a>.\n\nLetting go of your short term stress that \"OMG there might be something awesome in there\" is a poor trade for long-term relaxation. Awesome will find you.\n",
				"date_published": "2009-01-09T16:20:47-07:00",
				"url": "https://therealadam.com/2009/01/09/close-tabs-and.html",
				"tags": ["Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/09/heat-dissipation-tower.html",
				"title": "Heat dissipation tower",
				"content_html": "<!-- raw HTML omitted -->\n<p>Via <!-- raw HTML omitted -->ffffound<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2009/01/219f0be5b7c2d07260ed8ad49661db197d79622b-m.jpg\" alt=\"219f0be5b7c2d07260ed8ad49661db197d79622b_m.jpg\" border=\"0\" width=\"464\" height=\"480\" /></div>\n\nVia <a href=\"http://ffffound.com/image/219f0be5b7c2d07260ed8ad49661db197d79622b\">ffffound</a>.\n",
				"date_published": "2009-01-09T10:00:01-07:00",
				"url": "https://therealadam.com/2009/01/09/heat-dissipation-tower.html",
				"tags": ["Curated","Eye Candy","industrial"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2009/01/09/birdland-forgetting-libertarianism.html",
				"title": "Birdland, Forgetting, Libertarianism, Hoboken",
				"content_html": "<p>Hello, 2009! Let&rsquo;s try a slightly different format. Starting it out with &ldquo;“Birdland” by Weather Report&rdquo;:http://www.youtube.com/watch?v=pqashW66D7o&amp;feature=related can&rsquo;t hurt.</p>\n<p>Shawn Blanc says &ldquo;the best todo software lets us forget&rdquo;:<a href=\"http://shawnblanc.net/2009/thingsday/.\">shawnblanc.net/2009/thin&hellip;</a> I absolutely agree. Shawn also pointed out &ldquo;Rules For My Unborn Son&rdquo;:<a href=\"http://rulesformyunbornson.tumblr.com/,\">rulesformyunbornson.tumblr.com/,</a> which is indeed a great set of guidelines on being a mensch. A choice &ldquo;JFK quote from therein on optimism&rdquo;:<a href=\"http://rulesformyunbornson.tumblr.com/post/61173128/the-american-by-nature-is-optimistic-he-is.\">rulesformyunbornson.tumblr.com/post/6117&hellip;</a></p>\n<p>Provocateurs &ldquo;Zed Shaw&rdquo;:<a href=\"http://www.zedshaw.com/blog/2009-01-08.html\">www.zedshaw.com/blog/2009&hellip;</a> and &ldquo;Giles Bowkett&rdquo;:<a href=\"http://gilesbowkett.blogspot.com/2009/01/fundamental-problem-with-libertarianism.html\">gilesbowkett.blogspot.com/2009/01/f&hellip;</a> are in much better form when they are tilting against libertarianism. Which isn&rsquo;t to say that they&rsquo;re right or libertarianism is wrong. They&rsquo;re just better at tilting against social abstractions.</p>\n<p>If you&rsquo;ve ever looked at writing tiny web apps or services with Sinatra, you&rsquo;re probably interested in &ldquo;what&rsquo;s proposed on the Hoboken branch&rdquo;:<a href=\"http://gist.github.com/38605.\">gist.github.com/38605.</a> &ldquo;Ryan Tomayko&rdquo;:<a href=\"http://tomayko.com/\">tomayko.com</a> has great taste, I tell you.</p>\n",
				"content_text": "Hello, 2009! Let's try a slightly different format. Starting it out with \"&ldquo;Birdland&rdquo; by Weather Report\":http://www.youtube.com/watch?v=pqashW66D7o&amp;feature=related can't hurt.\n\nShawn Blanc says \"the best todo software lets us forget\":[shawnblanc.net/2009/thin...](http://shawnblanc.net/2009/thingsday/.) I absolutely agree. Shawn also pointed out \"Rules For My Unborn Son\":[rulesformyunbornson.tumblr.com/,](http://rulesformyunbornson.tumblr.com/,) which is indeed a great set of guidelines on being a mensch. A choice \"JFK quote from therein on optimism\":[rulesformyunbornson.tumblr.com/post/6117...](http://rulesformyunbornson.tumblr.com/post/61173128/the-american-by-nature-is-optimistic-he-is.)\n\nProvocateurs \"Zed Shaw\":[www.zedshaw.com/blog/2009...](http://www.zedshaw.com/blog/2009-01-08.html) and \"Giles Bowkett\":[gilesbowkett.blogspot.com/2009/01/f...](http://gilesbowkett.blogspot.com/2009/01/fundamental-problem-with-libertarianism.html) are in much better form when they are tilting against libertarianism. Which isn't to say that they're right or libertarianism is wrong. They're just better at tilting against social abstractions.\n\nIf you've ever looked at writing tiny web apps or services with Sinatra, you're probably interested in \"what's proposed on the Hoboken branch\":[gist.github.com/38605.](http://gist.github.com/38605.) \"Ryan Tomayko\":[tomayko.com](http://tomayko.com/) has great taste, I tell you.\n",
				"date_published": "2009-01-09T06:47:36-07:00",
				"url": "https://therealadam.com/2009/01/09/birdland-forgetting-libertarianism.html",
				"tags": ["Music","Pop Culture","Curated","The System","Politics","sinatra"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/26/ogres-and-apis.html",
				"title": "Ogres and APIs",
				"content_html": "<p><!-- raw HTML omitted -->Bringing Merb&rsquo;s provides/display into Rails 3<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://www.loudthinking.com/posts/37-bringing-merbs-providesdisplay-into-rails-3\">Bringing Merb's provides/display into Rails 3</a>:\n\n<blockquote>\nThe symmetry relates to another point in API design that I've been interested in lately: progressive expansion. There should be a smooth path from the simple case to the complex case. It should be like an Ogre, it should have layers.\n</blockquote>\n",
				"date_published": "2008-12-26T10:38:41-07:00",
				"url": "https://therealadam.com/2008/12/26/ogres-and-apis.html",
				"tags": ["Curated","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/21/true-hiphop-stories.html",
				"title": "True Hip-Hop Stories",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted -->True Hip-Hop Stories: Lords of The Underground<!-- raw HTML omitted --> from <!-- raw HTML omitted -->D-Nice<!-- raw HTML omitted --> on <!-- raw HTML omitted -->Vimeo<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<br /><a href=\"http://vimeo.com/2582442\">True Hip-Hop Stories: Lords of The Underground</a> from <a href=\"http://vimeo.com/dnicetv\">D-Nice</a> on <a href=\"http://vimeo.com\">Vimeo</a>.\n",
				"date_published": "2008-12-21T10:42:25-07:00",
				"url": "https://therealadam.com/2008/12/21/true-hiphop-stories.html",
				"tags": ["Music","Pop Culture","Curated","hiphop"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/18/whither-desktop-or.html",
				"title": "Whither desktop or web",
				"content_html": "<p>Lately, I&rsquo;m finding myself replacing free web-apps with desktop software or commercial web-apps. Allow me to explain my evolving philosophy for you.</p>\n<p>Web applications make the most sense when people get together to create something greater than the sum of their individual parts. <!-- raw HTML omitted -->GitHub<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Readernaut<!-- raw HTML omitted --> are great examples of this. The latter, in particular because its <em>fun</em> to use, but also in its focus. The former is great in how it puts a radically different spin on the act of sharing code, but also because their team is <em>kicking ass</em>.</p>\n<p>I am eager to pay for continuity. Ergo, I put down money for <!-- raw HTML omitted -->Sifter<!-- raw HTML omitted -->, GitHub and <!-- raw HTML omitted -->Flickr<!-- raw HTML omitted -->. Sure, it&rsquo;s entirely possible that any of these services will go under. Paying for them makes that less likely, and I&rsquo;m happy to vote with my dollars on an app.</p>\n<p>&ldquo;Living in the cloud&rdquo; is kind of a drag. I travel just enough to want to use airplane time as a super-focused work sprint. If my links, for example, live out in the cloud, it becomes tedious to save things away while I&rsquo;m disconnected, let alone impossible to access them.</p>\n<p>Ergo, I now favor web apps in spaces where getting my friends involved is more interesting and I favor paid apps or desktop apps where I want it despite my connectivity or where my friends, as great as they are, can&rsquo;t help or prove a distraction[1].</p>\n<p>fn1. My friends are awesome. Its just that an app like Facebook is more of a distraction than a must-have tool. For me, at least.</p>\n",
				"content_text": "Lately, I'm finding myself replacing free web-apps with desktop software or commercial web-apps. Allow me to explain my evolving philosophy for you.\n\n\nWeb applications make the most sense when people get together to create something greater than the sum of their individual parts. <a href=\"http://github.com\">GitHub</a> and <a href=\"http://readernaut.com/therealadam/\">Readernaut</a> are great examples of this. The latter, in particular because its _fun_ to use, but also in its focus. The former is great in how it puts a radically different spin on the act of sharing code, but also because their team is *kicking ass*.\n\n\nI am eager to pay for continuity. Ergo, I put down money for <a href=\"http://sifterapp.com\">Sifter</a>, GitHub and <a href=\"http://http://flickr.com/photos/therealadam/\">Flickr</a>. Sure, it's entirely possible that any of these services will go under. Paying for them makes that less likely, and I'm happy to vote with my dollars on an app.\n\n\n\"Living in the cloud\" is kind of a drag. I travel just enough to want to use airplane time as a super-focused work sprint. If my links, for example, live out in the cloud, it becomes tedious to save things away while I'm disconnected, let alone impossible to access them.\n\n\nErgo, I now favor web apps in spaces where getting my friends involved is more interesting and I favor paid apps or desktop apps where I want it despite my connectivity or where my friends, as great as they are, can't help or prove a distraction[1].\n\n\nfn1. My friends are awesome. Its just that an app like Facebook is more of a distraction than a must-have tool. For me, at least.\n",
				"date_published": "2008-12-18T08:09:59-07:00",
				"url": "https://therealadam.com/2008/12/18/whither-desktop-or.html",
				"tags": ["Expanded ideas","workflow"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/17/change-it-up.html",
				"title": "Change it up",
				"content_html": "<p><!-- raw HTML omitted -->Do something new every three years<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>So maybe that&rsquo;s where the three-year rule comes from. You&rsquo;re now expert at what you set out to master. Great. Now go do something else.</p>\n<!-- raw HTML omitted -->\n<p>Great idea! The article also reveals some of the inner workings of <!-- raw HTML omitted -->The Economist<!-- raw HTML omitted -->. A highly recommended, quick read.</p>\n",
				"content_text": "<a href=\"http://www.longtail.com/the_long_tail/2008/12/do-something-ne.html\">Do something new every three years</a>:\n\n<blockquote>\nI was thinking about the three-year rule while reading about Malcolm Gladwell's observation that it takes 10,000 hours to become truly expert at something. If you really throw yourself into a job, you'll spend 60 hours a week working. That's 3,000 hours a year (allowing for vacation), which means you'll hit the 10,000 hour mark a few months after your third year.\n\nSo maybe that's where the three-year rule comes from. You're now expert at what you set out to master. Great. Now go do something else.\n</blockquote>\n\nGreat idea! The article also reveals some of the inner workings of <em>The Economist</em>. A highly recommended, quick read.\n",
				"date_published": "2008-12-17T16:20:17-07:00",
				"url": "https://therealadam.com/2008/12/17/change-it-up.html",
				"tags": ["Curated","The System","Erudition"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/15/the-absurdity-of.html",
				"title": "The absurdity of X, Y, R, G and B",
				"content_html": "<p><!-- raw HTML omitted -->The Frustrating Magical Aspect<!-- raw HTML omitted --> - why&rsquo;s great take on the absurdity of the tools we use to put interesting shapes and colors on our screens. Here&rsquo;s to hoping for interesting abstractions that are somewhere between rigorously pushing pixels and randomly drawing shapes until something neat pops out.</p>\n",
				"content_text": "<a href='http://hackety.org/2008/12/04/theFrustratingMagicalAspect.html'>The Frustrating Magical Aspect</a> - why's great take on the absurdity of the tools we use to put interesting shapes and colors on our screens. Here's to hoping for interesting abstractions that are somewhere between rigorously pushing pixels and randomly drawing shapes until something neat pops out.\n",
				"date_published": "2008-12-15T20:51:26-07:00",
				"url": "https://therealadam.com/2008/12/15/the-absurdity-of.html",
				"tags": ["Curated","processing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/13/crazy-hair.html",
				"title": "Crazy hair",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://www.vanityfair.com/images/culture/2008/09/cusl09_seliger0809.jpg\"><img src=\"http://therealadam.com/wp-content/uploads/2008/12/ad553e1908bd4fa6b67650014c85af74cec86301_m.jpg\" alt=\"walken\" title=\"walken\" width=\"371\" height=\"480\" class=\"aligncenter size-full wp-image-364\" /></a>\n\n<p><a href='http://www.vanityfair.com/culture/features/2008/09/seliger_portfolio200809?slide=9#globalNav'>A great. Photo. Of Christopher. Walken.</a></p>\n",
				"date_published": "2008-12-13T10:34:23-07:00",
				"url": "https://therealadam.com/2008/12/13/crazy-hair.html",
				"tags": ["Curated","Comedy, haha","hair"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/12/the-creative-big.html",
				"title": "The Creative Big Bang",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>That&rsquo;s a really beautiful way to capture the process of turning an idea into something people see, hear, use or laugh at.</p>\n",
				"content_text": "<p>That John Gruber, he's good with the words.  From <a href='http://daringfireball.net/2008/12/bang'>Bang</a>:</p>\n\n<blockquote>\n\t\t\t\t\t<p>Consider the Big Bang. One moment there was nothing, except for everything condensed into a single infinitely dense point. Then, one minuscule sliver of a second later: the universe. Nothing was yet formed, all the true work of forming stars and galaxies remained ahead, but the framework, the laws of physics, were set, and the rest was thereafter inevitable.</p>\n<p>This is what everyone contemplating a new creative endeavor craves: that in the moment it turns real, to get it right. To frame it in such a way that the very act of framing propels the project toward an inexorable destiny.</p>\n</blockquote>\n\nThat's a really beautiful way to capture the process of turning an idea into something people see, hear, use or laugh at.\n",
				"date_published": "2008-12-12T09:25:28-07:00",
				"url": "https://therealadam.com/2008/12/12/the-creative-big.html",
				"tags": ["Curated","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/05/people-are-making.html",
				"title": "People are making cool stuff",
				"content_html": "<p>This morning I followed a link that <!-- raw HTML omitted -->_why shared with us<!-- raw HTML omitted -->, a <!-- raw HTML omitted -->lo-fi guitar pedal<!-- raw HTML omitted --> built around an <!-- raw HTML omitted -->Arduiono<!-- raw HTML omitted -->. <!-- raw HTML omitted -->Kyle McDonald<!-- raw HTML omitted --> made said pedal; he also made <!-- raw HTML omitted -->I Eat Beats<!-- raw HTML omitted -->, a drum machine gizmo built with a screen, <!-- raw HTML omitted -->Processing<!-- raw HTML omitted -->, and skittles. He also published instructions for how to <!-- raw HTML omitted -->build a 3-D controller<!-- raw HTML omitted -->. From there I found a <!-- raw HTML omitted -->coin-slot detector<!-- raw HTML omitted -->, again built with an Arduino.</p>\n<p>Moral of the story: there is a ton of cool stuff going on with Processing and Arduino. Just let the links light your path.</p>\n",
				"content_text": "This morning I followed a link that <a href=\"http://twitter.com/_why/status/1037710811\">_why shared with us</a>, a <a href=\"http://vimeo.com/1460684\">lo-fi guitar pedal</a> built around an <a href=\"http://arduino.cc/\">Arduiono</a>. <a href=\"http://www.rpi.edu/~mcdonk/\">Kyle McDonald</a> made said pedal; he also made <a href=\"http://www.rpi.edu/~mcdonk/ieatbeats/\">I Eat Beats</a>, a drum machine gizmo built with a screen, <a href=\"http://processing.org/\">Processing</a>, and skittles. He also published instructions for how to <a href=\"http://www.instructables.com/id/DIY-3D-Controller/\">build a 3-D controller</a>. From there I found a <a href=\"http://www.instructables.com/id/coin_slot_detector/\">coin-slot detector</a>, again built with an Arduino.\n\nMoral of the story: there is a ton of cool stuff going on with Processing and Arduino. Just let the links light your path.\n",
				"date_published": "2008-12-05T14:56:28-07:00",
				"url": "https://therealadam.com/2008/12/05/people-are-making.html",
				"tags": ["Uncategorized","arduino","processing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/04/i-am-going.html",
				"title": "I am going to call Ghostbusters",
				"content_html": "<p>At the risk of rambling too much about games: <!-- raw HTML omitted -->DO WANT.<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>The <!-- raw HTML omitted -->Ghostbusters video game for the Sega Master System<!-- raw HTML omitted --> was pretty much the first video game I played.</p>\n",
				"content_text": "At the risk of rambling too much about games: <em>DO WANT.</em>\n\n<div class=\"center\">\n[youtube=http://www.youtube.com/watch?v=dD7nw_L4W5M&amp;hl=en&amp;fs=1]\n</div>\n\nThe <a href=\"http://en.wikipedia.org/wiki/List_of_Ghostbusters_video_games#Ghostbusters_.28Activision.29\">Ghostbusters video game for the Sega Master System</a> was pretty much the first video game I played.\n",
				"date_published": "2008-12-04T05:02:48-07:00",
				"url": "https://therealadam.com/2008/12/04/i-am-going.html",
				"tags": ["Pop Culture","Curated","games","ghostbusters","Gaming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/03/militaryindustrial-tv.html",
				"title": "Military-industrial TV",
				"content_html": "<p>Left to my own devices, I end up watching stuff on TV about fighter jets, submarines, etc. a whole lot. The machines of war.</p>\n<p>On the one hand, the history and engineering is interesting. On the other, I feel dirty watching what is essentially military-industrial complex porn.</p>\n<p>Just wanted to let you know.</p>\n",
				"content_text": "Left to my own devices, I end up watching stuff on TV about fighter jets, submarines, etc. a whole lot. The machines of war.\n\nOn the one hand, the history and engineering is interesting. On the other, I feel dirty watching what is essentially military-industrial complex porn.\n\nJust wanted to let you know.\n",
				"date_published": "2008-12-03T19:41:41-07:00",
				"url": "https://therealadam.com/2008/12/03/militaryindustrial-tv.html",
				"tags": ["Curated","Expanded ideas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/02/beautifully-static.html",
				"title": "Beautifully static",
				"content_html": "<p>Game trailers are frequently a montage of confusing montage. This trailer stands in stark contrast to the standard:</p>\n<!-- raw HTML omitted -->\n<p>Best use of a Romantic piano sonata in a game trailer? Probably.</p>\n<p><!-- raw HTML omitted -->Turns out its sort of a take-off on the <!-- raw HTML omitted -->Halo 3 Believe ad<!-- raw HTML omitted -->. Also pretty well done.<!-- raw HTML omitted --></p>\n",
				"content_text": "Game trailers are frequently a montage of confusing montage. This trailer stands in stark contrast to the standard:\n\n<div class=\"center\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=IjU0NZMcUxI&hl=en&fs=1])\n</div>\n\nBest use of a Romantic piano sonata in a game trailer? Probably.\n\n<ins>Turns out its sort of a take-off on the <a href=\"http://www.youtube.com/watch?v=3PGpn4c96ZU\">Halo 3 Believe ad</a>. Also pretty well done.</ins>\n",
				"date_published": "2008-12-02T11:41:30-07:00",
				"url": "https://therealadam.com/2008/12/02/beautifully-static.html",
				"tags": ["Curated","Gaming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/12/01/freds-business-card.html",
				"title": "Fred\u0026#39;s business card",
				"content_html": "<p>I made a business card for <!-- raw HTML omitted -->Fred<!-- raw HTML omitted -->.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>For those keeping score at home, this is what happens when I&rsquo;m trying not to code or surf the web at 11:30 PM.</p>\n",
				"content_text": "I made a business card for <a href=\"http://flickr.com/photos/courtney/tags/fred\">Fred</a>.\n\n<a href=\"http://www.flickr.com/photos/48889072931@N01/3072913683\" title=\"View 'Fred' on Flickr.com\"><div class=\"center\"><img src=\"http://farm4.static.flickr.com/3197/3072913683_53d3a5e35e.jpg\" alt=\"Fred\" border=\"0\" width=\"236\" height=\"500\" /></div></a>\n\nFor those keeping score at home, this is what happens when I'm trying not to code or surf the web at 11:30 PM.\n",
				"date_published": "2008-11-30T22:43:30-07:00",
				"url": "https://therealadam.com/2008/12/01/freds-business-card.html",
				"tags": ["Curated","Dogs, cats, et cetera","fred"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/20/gentlemens-agreements.html",
				"title": "Gentlemen\u0026#39;s Agreements",
				"content_html": "<p>BMW and Mercedes produce cars in direct competition. Further, everyone else in the auto industry likes to use them as benchmarks. Read a car magazine and count the superlatives like &ldquo;more legroom than a Mercedes S500&rdquo; or &ldquo;more horsepower than a BMW 330i&rdquo;. Its a market out there; everyone is incentivised to produce better stuff every time around.</p>\n<p>However, you won&rsquo;t ever find them boasting about top speed[1]. BMW or Mercedes don&rsquo;t make cars that go faster than 155 MPH. Many moons ago, these car makers made a <!-- raw HTML omitted -->gentlemen&rsquo;s agreement<!-- raw HTML omitted --> to limit their cars to a certain top speed. They probably did this for safety reasons - there just isn&rsquo;t much need to go that fast and its probably inadvisable for most folks.</p>\n<p>Why adhere to these agreements? At any point, BMW or Mercedes could break this agreement and achieve some kind of short-term numerical superiority. But this would end in an arms race that doesn&rsquo;t really improve the every-day usage of their cars. So really, it’s in each company&rsquo;s interest to <em>maintain</em> the agreement.</p>\n<p>In the land of software development, we have gentlemen&rsquo;s agreements as well. When I picked up Python in 1999, I learned that they didn&rsquo;t have a distinction between public, protected and private object attributes. Many decried this, but the general idea was that we’re all adults and do the responsible thing.</p>\n<p>Fast forward six years years. At first I was somewhat put off that Rails modifies the standard Ruby libraries. Many people are still put off about this. But I&rsquo;m OK with it. If you have the chance to drive improvements in an ecosystem without waiting for the core maintainers to release a new version of Ruby, why not?</p>\n<p>Many also decry the situation we find around Rails plugins. Its argued that one shouldn&rsquo;t go around mucking about inside Rails to add functionality. And sure enough, plugins sometimes break when the core team changes Rails, even in the slightest of ways.</p>\n<p>No surprise, I&rsquo;m fine with this. Improving a system from the inside is too appealing to pass up so that I can claim some kind of virtuousness.</p>\n<p>Should Rails have a defined internal interface or extension mechanism? Sure, sounds great! But we shouldn&rsquo;t stop improving it outside the Rails core process just because sometimes we get burned.</p>\n<p>The alternative is to define a known set of hooks by which we can modify behavior in a post-hoc fashion. Merb is taking this approach, and I&rsquo;m eager to see how it works out. My take is that limiting people to extension along axes that the core developers imagined in a pre-hoc manner is too limiting. I hope I am proven wrong.</p>\n<p>When it comes to Ruby or Rails, I think we already have a gentlemen&rsquo;s agreement. We accept that extending systems using the facilities Ruby provides is useful, so we don&rsquo;t complain too much when we get burned[2]. Accepting this is, in my experience, an empowering aspect of using Ruby that lets me worry about really interesting problems.</p>\n<p>fn1. Except maybe for the M and AMG tuner variants of their mass-production cars</p>\n<p>fn2. where &ldquo;too much&rdquo; is defined by the prudence of the extension mechanism used</p>\n",
				"content_text": "BMW and Mercedes produce cars in direct competition. Further, everyone else in the auto industry likes to use them as benchmarks. Read a car magazine and count the superlatives like \"more legroom than a Mercedes S500\" or \"more horsepower than a BMW 330i\". Its a market out there; everyone is incentivised to produce better stuff every time around.\n\nHowever, you won't ever find them boasting about top speed[1]. BMW or Mercedes don't make cars that go faster than 155 MPH. Many moons ago, these car makers made a <a href=\"http://en.wikipedia.org/wiki/Gentlemen's_agreement\">gentlemen's agreement</a> to limit their cars to a certain top speed. They probably did this for safety reasons - there just isn't much need to go that fast and its probably inadvisable for most folks.\n\nWhy adhere to these agreements? At any point, BMW or Mercedes could break this agreement and achieve some kind of short-term numerical superiority. But this would end in an arms race that doesn't really improve the every-day usage of their cars. So really, it&rsquo;s in each company's interest to *maintain* the agreement.\n\nIn the land of software development, we have gentlemen's agreements as well. When I picked up Python in 1999, I learned that they didn't have a distinction between public, protected and private object attributes. Many decried this, but the general idea was that we&rsquo;re all adults and do the responsible thing.\n\nFast forward six years years. At first I was somewhat put off that Rails modifies the standard Ruby libraries. Many people are still put off about this. But I'm OK with it. If you have the chance to drive improvements in an ecosystem without waiting for the core maintainers to release a new version of Ruby, why not?\n\nMany also decry the situation we find around Rails plugins. Its argued that one shouldn't go around mucking about inside Rails to add functionality. And sure enough, plugins sometimes break when the core team changes Rails, even in the slightest of ways.\n\nNo surprise, I'm fine with this. Improving a system from the inside is too appealing to pass up so that I can claim some kind of virtuousness.\n\nShould Rails have a defined internal interface or extension mechanism? Sure, sounds great! But we shouldn't stop improving it outside the Rails core process just because sometimes we get burned.\n\nThe alternative is to define a known set of hooks by which we can modify behavior in a post-hoc fashion. Merb is taking this approach, and I'm eager to see how it works out. My take is that limiting people to extension along axes that the core developers imagined in a pre-hoc manner is too limiting. I hope I am proven wrong.\n\nWhen it comes to Ruby or Rails, I think we already have a gentlemen's agreement. We accept that extending systems using the facilities Ruby provides is useful, so we don't complain too much when we get burned[2]. Accepting this is, in my experience, an empowering aspect of using Ruby that lets me worry about really interesting problems.\n\nfn1. Except maybe for the M and AMG tuner variants of their mass-production cars\n\nfn2. where \"too much\" is defined by the prudence of the extension mechanism used\n",
				"date_published": "2008-11-20T10:29:23-07:00",
				"url": "https://therealadam.com/2008/11/20/gentlemens-agreements.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/20/the-hopping-doll.html",
				"title": "The hopping doll video game",
				"content_html": "<p>Too cool.</p>\n<!-- raw HTML omitted -->\n<p>Brought to you by an <!-- raw HTML omitted -->Arduino<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Too cool.\n\n<div class=\"center\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=YVUrqaOvCfQ&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&fs=1])\n</div>\n\nBrought to you by an <a href=\"http://www.arduino.cc/\">Arduino</a>.\n",
				"date_published": "2008-11-19T22:12:04-07:00",
				"url": "https://therealadam.com/2008/11/20/the-hopping-doll.html",
				"tags": ["Curated","arduino"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/18/my-notes-from.html",
				"title": "My notes from RubyConf 2008",
				"content_html": "<p>This year at RubyConf, I decided to <!-- raw HTML omitted -->go analog and take hand-written notes<!-- raw HTML omitted -->. (Someone did this for another conference but I can&rsquo;t find the link.) I hope you find them amusing and/or educational. Click through to the Flickr set to see them in all their glory.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>Bonus points for identifying the people whose hair I drew and trying to decipher my handwriting!</p>\n",
				"content_text": "This year at RubyConf, I decided to <a href=\"http://flickr.com/photos/therealadam/sets/72157609315307483/\">go analog and take hand-written notes</a>. (Someone did this for another conference but I can't find the link.) I hope you find them amusing and/or educational. Click through to the Flickr set to see them in all their glory.\n\n<a href=\"http://www.flickr.com/photos/48889072931@N01/3038912301\" title=\"View 'RubyConf Notes #0' on Flickr.com\"><div class=\"center\"><img src=\"http://farm4.static.flickr.com/3217/3038912301_dc517f0d6b.jpg\" alt=\"RubyConf Notes #0\" border=\"0\" width=\"500\" height=\"394\" /></div></a>\n\nBonus points for identifying the people whose hair I drew and trying to decipher my handwriting!\n",
				"date_published": "2008-11-18T15:37:54-07:00",
				"url": "https://therealadam.com/2008/11/18/my-notes-from.html",
				"tags": ["Uncategorized","rubyconf","sketches"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/17/dallas-multitudes.html",
				"title": "Dallas\u0026#39; multitudes",
				"content_html": "<p><!-- raw HTML omitted -->The Dallas Myth, Again<!-- raw HTML omitted --> quotes Molly Ivins:</p>\n<!-- raw HTML omitted -->\n<p>For the record, Dallas-proper, like all the major Texas cities, went for Obama this time around.</p>\n",
				"content_text": "<a href=\"http://www.kera.org/blogs/culture/2008/11/17/the-dallas-myth-again/\">The Dallas Myth, Again</a> quotes Molly Ivins:\n\n<blockquote>There is a black Dallas, there is a Chicano Dallas, there is a Vietnamese Dallas, there is a gay Dallas, there is even a funky-Bohemian Dallas. But mostly there is North Dallas, a place so materialistic and Republican it makes your teeth hurt to contemplate it.</blockquote>\n\nFor the record, Dallas-proper, like all the major Texas cities, went for Obama this time around.\n",
				"date_published": "2008-11-17T12:25:34-07:00",
				"url": "https://therealadam.com/2008/11/17/dallas-multitudes.html",
				"tags": ["Curated","The System","dallas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/17/gaming-and-design.html",
				"title": "Gaming and design",
				"content_html": "<p>Khoi Vinh&rsquo;s thoughts on games and their relation to what I aspire to do on the web:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Game On<!-- raw HTML omitted -->. Khoi and I are thinking along the same lines here. There&rsquo;s lots to learn from games, besides the ease at which one can spend time in them.</p>\n",
				"content_text": "Khoi Vinh's thoughts on games and their relation to what I aspire to do on the web:\n\n<blockquote>\n...I&rsquo;m savvy enough at least to recognize that very interesting things are happening in that world. As a point of reference for interaction design &mdash; for design of every kind &mdash; I&rsquo;m convinced that games represent an important new paradigm...\n</blockquote>\n\n<a href=\"http://www.subtraction.com/2008/11/14/game-on\">Game On</a>. Khoi and I are thinking along the same lines here. There's lots to learn from games, besides the ease at which one can spend time in them.\n",
				"date_published": "2008-11-17T12:09:55-07:00",
				"url": "https://therealadam.com/2008/11/17/gaming-and-design.html",
				"tags": ["Curated","Gaming"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/16/modernism-in-sheds.html",
				"title": "Modernism in sheds",
				"content_html": "<p><!-- raw HTML omitted -->Prefab Sheds -  Modernism in Miniature<!-- raw HTML omitted -->. Cool looking stuff, and its promising that people are considering better use of their existing space instead of just seeking more space. Now, if only <!-- raw HTML omitted -->our own shed<!-- raw HTML omitted --> weren&rsquo;t so shedtastic.</p>\n",
				"content_text": "<a href=\"http://www.nytimes.com/2008/09/11/garden/11sheds.html?_r=1&amp;oref=slogin\">Prefab Sheds -  Modernism in Miniature</a>. Cool looking stuff, and its promising that people are considering better use of their existing space instead of just seeking more space. Now, if only <a href=\"http://flickr.com/photos/courtney/106620821/in/dateposted/\">our own shed</a> weren't so shedtastic.\n",
				"date_published": "2008-11-16T11:50:33-07:00",
				"url": "https://therealadam.com/2008/11/16/modernism-in-sheds.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/07/bruce-springsteen-in.html",
				"title": "Bruce Springsteen in a nutshell",
				"content_html": "<p><!-- raw HTML omitted -->&ldquo;Light Of Day&rdquo;<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>It&rsquo;s the deep sadness of his songs, surrounded by undying optimism, that keeps me coming back every time.</p>\n",
				"content_text": "<a href=\"http://www.youtube.com/watch?v=yFu80Et9sUQ\">\"Light Of Day\"</a>:\n\n<blockquote>\nThings can't get any worse, they gotta get better\n</blockquote>\n\nIt's the deep sadness of his songs, surrounded by undying optimism, that keeps me coming back every time.\n",
				"date_published": "2008-11-07T07:14:48-07:00",
				"url": "https://therealadam.com/2008/11/07/bruce-springsteen-in.html",
				"tags": ["Music","Pop Culture","Curated","misc:bruce-springsteen"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/06/one-velociraptor-per.html",
				"title": "One Velociraptor Per Child",
				"content_html": "<p>The <!-- raw HTML omitted -->One Velociraptor Per Child<!-- raw HTML omitted --> project:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The <a href=\"http://velociraptorz.org/\">One Velociraptor Per Child</a> project:\n\n<blockquote>\nThe project's origins go back more than four decades to the early days of paleontology, when most dinosaurs were still the size of skyscrapers, and almost no one dreamed they would ever be suitable for children.\n</blockquote>\n",
				"date_published": "2008-11-05T22:44:06-07:00",
				"url": "https://therealadam.com/2008/11/06/one-velociraptor-per.html",
				"tags": ["Curated","Comedy, haha","velociraptor"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/05/my-day-yesterday.html",
				"title": "My Day, Yesterday",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Made for Garrett Murray&rsquo;s excellent <!-- raw HTML omitted -->My Day, Yesterday<!-- raw HTML omitted --> group.</p>\n",
				"content_text": "<div class=\"center\">\n\n</div>\n\nMade for Garrett Murray's excellent <a href=\"http://flickr.com/groups/mydayyesterday/\">My Day, Yesterday</a> group.\n",
				"date_published": "2008-11-05T21:42:26-07:00",
				"url": "https://therealadam.com/2008/11/05/my-day-yesterday.html",
				"tags": ["Curated","Expanded ideas","life"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/04/applying-css.html",
				"title": "Applying CSS",
				"content_html": "<p><!-- raw HTML omitted -->Why Programmers Suck at CSS<!-- raw HTML omitted --> - a great primer on how to get from mechanical knowledge of how CSS works to actually using it to make nice things.</p>\n",
				"content_text": "<a href=\"http://www.betaversion.org/~stefano/linotype/news/169/\">Why Programmers Suck at CSS</a> - a great primer on how to get from mechanical knowledge of how CSS works to actually using it to make nice things.\n",
				"date_published": "2008-11-04T18:47:27-07:00",
				"url": "https://therealadam.com/2008/11/04/applying-css.html",
				"tags": ["Curated","css"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/11/03/getting-around.html",
				"title": "Getting Around",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>In the same ilk as Garret Murray&rsquo;s <!-- raw HTML omitted -->My Day, Yesterday<!-- raw HTML omitted --> pool, I propose you make a video of the essential transportation experience in your town. 90 seconds on getting from one place to another and back, however you tend to do so.</p>\n<p>Bonus points for quirky and fun stuff caught between point A and point B.</p>\n",
				"content_text": "<div class=\"center\">\n\n</div>\n\nIn the same ilk as Garret Murray's <a href=\"http://flickr.com/groups/mydayyesterday/\">My Day, Yesterday</a> pool, I propose you make a video of the essential transportation experience in your town. 90 seconds on getting from one place to another and back, however you tend to do so.\n\nBonus points for quirky and fun stuff caught between point A and point B.\n",
				"date_published": "2008-11-03T21:40:27-07:00",
				"url": "https://therealadam.com/2008/11/03/getting-around.html",
				"tags": ["Curated","Expanded ideas","life"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/23/stupid-struct-tricks.html",
				"title": "Stupid Struct Tricks",
				"content_html": "<p><!-- raw HTML omitted -->All About Struct<!-- raw HTML omitted --> - there&rsquo;s always more to learn about @Struct@, unless you&rsquo;re James Edward Gray. Useful and illuminating for all shades of Ruby developers.</p>\n",
				"content_text": "<a href=\"http://blog.grayproductions.net/articles/all_about_struct\">All About Struct</a> - there's always more to learn about @Struct@, unless you're James Edward Gray. Useful and illuminating for all shades of Ruby developers.\n",
				"date_published": "2008-10-23T17:07:43-07:00",
				"url": "https://therealadam.com/2008/10/23/stupid-struct-tricks.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/22/stream-of-curiosity.html",
				"title": "Stream of curiosity",
				"content_html": "<p>Questions going through my head right now:</p>\n<ul>\n<li>Why is &ldquo;The Men All Pause&rdquo; seven minutes long?</li>\n<li>What was the point of that &ldquo;heavy breathing&rdquo; break?</li>\n<li>Was it really necessary to have <em>six</em> ladies in Klymaxx?</li>\n<li>Why am I listening to this again?</li>\n</ul>\n",
				"content_text": "Questions going through my head right now:\n\n* Why is \"The Men All Pause\" seven minutes long?\n* What was the point of that \"heavy breathing\" break?\n* Was it really necessary to have _six_ ladies in Klymaxx?\n* Why am I listening to this again?\n",
				"date_published": "2008-10-22T13:52:12-07:00",
				"url": "https://therealadam.com/2008/10/22/stream-of-curiosity.html",
				"tags": ["Curated","Comedy, haha","klymaxx"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/20/learn-you-a.html",
				"title": "Learn You a Haskell",
				"content_html": "<p><!-- raw HTML omitted -->Learn You a Haskell for Great Good!<!-- raw HTML omitted --> - if you learned Ruby via <!-- raw HTML omitted -->The Poignant Guide<!-- raw HTML omitted -->, you&rsquo;ll like this. Plus, Haskell does cool stuff to your brain.</p>\n",
				"content_text": "<a href=\"http://learnyouahaskell.com/\">Learn You a Haskell for Great Good!</a> - if you learned Ruby via <a href=\"http://poignantguide.net/ruby/\">The Poignant Guide</a>, you'll like this. Plus, Haskell does cool stuff to your brain.\n",
				"date_published": "2008-10-20T08:15:03-07:00",
				"url": "https://therealadam.com/2008/10/20/learn-you-a.html",
				"tags": ["Curated","haskell"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/19/star-wars-az.html",
				"title": "Star Wars A-Z",
				"content_html": "<p><!-- raw HTML omitted -->Star Wars ABC<!-- raw HTML omitted -->:</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>Neat!</p>\n",
				"content_text": "<a href=\"http://flickr.com/photos/tweedlebopper/sets/72157600166417445/\">Star Wars ABC</a>:\n\n<a href=\"http://www.flickr.com/photos/tweedlebopper/480674843/\" title=\"A is for Ackbar by tweedlebop, on Flickr\"><img src=\"http://farm1.static.flickr.com/172/480674843_815540e5c9.jpg\" width=\"357\" height=\"500\" alt=\"A is for Ackbar\" /></a>\n\nNeat!\n",
				"date_published": "2008-10-19T08:13:12-07:00",
				"url": "https://therealadam.com/2008/10/19/star-wars-az.html",
				"tags": ["Curated","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/15/uptown-dallas.html",
				"title": "Uptown Dallas",
				"content_html": "<p>Great photo by <!-- raw HTML omitted -->the urban fabric<!-- raw HTML omitted -->:</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
				"content_text": "Great photo by <a href=\"http://flickr.com/photos/ninjatune/\">the urban fabric</a>:\n\n<a href=\"http://www.flickr.com/photos/ninjatune/2943169738/\" title=\"Uptown, Baby by the urban fabric, on Flickr\"><img src=\"http://farm4.static.flickr.com/3020/2943169738_aa08ce8411.jpg\" width=\"500\" height=\"135\" alt=\"Uptown, Baby\" /></a>\n",
				"date_published": "2008-10-15T20:49:18-07:00",
				"url": "https://therealadam.com/2008/10/15/uptown-dallas.html",
				"tags": ["Curated","Eye Candy","dallas"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/11/garretts-life-yesterday.html",
				"title": "Garrett\u0026#39;s life, yesterday",
				"content_html": "<p><!-- raw HTML omitted -->My Day, Yesterday<!-- raw HTML omitted --> - a glimpse into the world of Garrett Murray. Best ninety seconds of video I&rsquo;ve seen all week. If you like it and/or my style of humor, you&rsquo;ll like his <!-- raw HTML omitted -->Qwick Reviews<!-- raw HTML omitted --> too.</p>\n",
				"content_text": "<a href=\"http://log.maniacalrage.net/post/53836646/my-day-yesterday-yesterday-in-video-shot\">My Day, Yesterday</a> - a glimpse into the world of Garrett Murray. Best ninety seconds of video I've seen all week. If you like it and/or my style of humor, you'll like his <a href=\"http://qwickreviews.com/\">Qwick Reviews</a> too.\n",
				"date_published": "2008-10-11T09:07:21-07:00",
				"url": "https://therealadam.com/2008/10/11/garretts-life-yesterday.html",
				"tags": ["Curated","Nerdery","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/10/bell-curves.html",
				"title": "Bell curves",
				"content_html": "<p><!-- raw HTML omitted -->Rands In Repose: Horrible<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://www.randsinrepose.com/archives/2008/10/06/horrible.html\">Rands In Repose: Horrible</a>:\n\n<blockquote>\nYou are a bell curve.\n</blockquote>\n",
				"date_published": "2008-10-10T12:03:33-07:00",
				"url": "https://therealadam.com/2008/10/10/bell-curves.html",
				"tags": ["Curated","The System","life"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/09/launch-the-missiles.html",
				"title": "Launch the missiles!",
				"content_html": "<p><!-- raw HTML omitted -->The A-Z of Programming Languages: Haskell<!-- raw HTML omitted --> - a great interview with the awesome Simon Peyton-Jones on Haskell. I love his use of the &ldquo;launch the missiles!&rdquo; metaphor for thinking about side-effects and IO in programs. Via <!-- raw HTML omitted -->projectionist<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://www.computerworld.com.au/index.php/id;1974033854;pp;1;fp;;fpid;\">The A-Z of Programming Languages: Haskell</a> - a great interview with the awesome Simon Peyton-Jones on Haskell. I love his use of the \"launch the missiles!\" metaphor for thinking about side-effects and IO in programs. Via <a href=\"http://project.ioni.st/\">projectionist</a>.\n",
				"date_published": "2008-10-09T14:47:23-07:00",
				"url": "https://therealadam.com/2008/10/09/launch-the-missiles.html",
				"tags": ["Curated","haskell"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/07/jboxd-equals-fun.html",
				"title": "JBox2D equals fun",
				"content_html": "<p><!-- raw HTML omitted -->JBox2D<!-- raw HTML omitted --> is a port of a C++ physics engine to Java. Being Java means you can use it in Processing. Being Processing means you can use it for <em>fun</em>. And the demos, behold, they are fun!</p>\n",
				"content_text": "<a href=\"http://www.jbox2d.org/\">JBox2D</a> is a port of a C++ physics engine to Java. Being Java means you can use it in Processing. Being Processing means you can use it for *fun*. And the demos, behold, they are fun!\n",
				"date_published": "2008-10-07T18:43:10-07:00",
				"url": "https://therealadam.com/2008/10/07/jboxd-equals-fun.html",
				"tags": ["Curated","visualization"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/06/awesome-desk.html",
				"title": "Awesome desk",
				"content_html": "<p><!-- raw HTML omitted -->OneLessDesk™ by Heckler Design<!-- raw HTML omitted --> - want.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://hecklerdesign.com/onelessdesk/index.html\">OneLessDesk™ by Heckler Design</a> - want.\n\n<div class='center'>\n<img src=\"http://hecklerdesign.com/images/OLD/fullsize/w07.jpg\" alt=\"OneLessDesk\" />\n</div>\n",
				"date_published": "2008-10-06T18:28:35-07:00",
				"url": "https://therealadam.com/2008/10/06/awesome-desk.html",
				"tags": ["Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/10/02/mining-my-git.html",
				"title": "Mining my Git repositories",
				"content_html": "<p>Since I started using Git, I&rsquo;ve been finding myself creating tons of repositories. Anything I think might <em>someday</em> prove interesting or that I work on for more than a few minutes, I create a Git repository. I&rsquo;ve yet to discover that <em>ultimate</em> workflow, but between experimenting with using it to put <!-- raw HTML omitted -->presentations<!-- raw HTML omitted --> <!-- raw HTML omitted -->online<!-- raw HTML omitted -->, <!-- raw HTML omitted -->managing the Dallas.rb website via Git<!-- raw HTML omitted --> and <!-- raw HTML omitted -->using it extensively at FiveRuns<!-- raw HTML omitted -->, Git is proving quite fun.</p>\n<p>But let&rsquo;s get back to that earlier point: I have a metric shit-ton of repositories laying around in my home directory. This morning I found myself wondering exactly how many I have and how many actually have a remote (i.e. how many have yielded a project worth backing up remotely and/or sharing). So, I did the numbers:</p>\n<!-- raw HTML omitted -->\n<p>Which is about what I&rsquo;d expect in terms of quantity and ratio. I&rsquo;m a little surprised I have so many work repositories laying around, but we use submodules extensively so there&rsquo;s probably only about 40 repositories that are meaningful to us. I&rsquo;m a little suprised that so many of my personal projects do have remotes though. I guess I&rsquo;m making progress towards <!-- raw HTML omitted -->doing more<!-- raw HTML omitted -->.</p>\n<p>For those interested, <!-- raw HTML omitted -->the script that begat all this fun data<!-- raw HTML omitted -->. Run it yourself and share your numbers!</p>\n",
				"content_text": "Since I started using Git, I've been finding myself creating tons of repositories. Anything I think might _someday_ prove interesting or that I work on for more than a few minutes, I create a Git repository. I've yet to discover that *ultimate* workflow, but between experimenting with using it to put <a href=\"https://github.com/therealadam/battle-of-the-bands/tree\">presentations</a> <a href=\"http://github.com/therealadam/i-heart-complexity/tree/master\">online</a>, <a href=\"http://github.com/therealadam/dallasrb-website/tree/master\">managing the Dallas.rb website via Git</a> and <a href=\"http://github.com/fiveruns\">using it extensively at FiveRuns</a>, Git is proving quite fun.\n\nBut let's get back to that earlier point: I have a metric shit-ton of repositories laying around in my home directory. This morning I found myself wondering exactly how many I have and how many actually have a remote (i.e. how many have yielded a project worth backing up remotely and/or sharing). So, I did the numbers:\n\n<table>\n  <thead>\n    <th>Directory</th>\n    <th>Repositories</th>\n    <th>Remotes</th>\n  </thead>\n  <tr>\n    <td>@/Users/adam@ (Home, sweet home)</td>\n    <td>287</td>\n    <td>263</td>\n  </tr>\n  <tr>\n    <td>@~/FiveRuns@ (Work stuff)</td>\n    <td>161</td>\n    <td>160</td>\n  </tr>\n  <tr>\n    <td>@~/repos@ (All source-ish stuff)</td>\n    <td>85</td>\n    <td>69</td>\n  </tr>\n  <tr>\n    <td>@~/repos/sources@ (Interesting code of others)</td>\n    <td>62</td>\n    <td>60</td>\n  </tr>\n  <tr>\n    <td>@~/repos/projects@ (My own code)</td>\n    <td>9</td>\n    <td>6</td>\n  </tr>\n  <tr>\n    <td>@~/Desktop@ (Landing pad for the newest of projects)</td>\n    <td>1</td>\n    <td>0</td>\n  </tr>\n</table>\n\n\nWhich is about what I'd expect in terms of quantity and ratio. I'm a little surprised I have so many work repositories laying around, but we use submodules extensively so there's probably only about 40 repositories that are meaningful to us. I'm a little suprised that so many of my personal projects do have remotes though. I guess I'm making progress towards <a href=\"http://therealadam.com/archive/2008/09/11/read-slightly-less-practice-slightly-more/\">doing more</a>.\n\nFor those interested, <a href=\"http://gist.github.com/14004\">the script that begat all this fun data</a>. Run it yourself and share your numbers!\n",
				"date_published": "2008-10-02T21:19:47-07:00",
				"url": "https://therealadam.com/2008/10/02/mining-my-git.html",
				"tags": ["Uncategorized","git"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/24/rich-kilmer-speaketh.html",
				"title": "Rich Kilmer speaketh",
				"content_html": "<p><!-- raw HTML omitted -->Ruby&rsquo;s Best Feature?<!-- raw HTML omitted --> Rich Kilmer is one of those uncanny developers who can crank out orders of magnitude more <em>good</em> code than your average developer. When he speaks, I always listen.</p>\n",
				"content_text": "<a href=\"http://richkilmer.blogs.com/ether/2008/09/rubys-best-feature.html\">Ruby's Best Feature?</a> Rich Kilmer is one of those uncanny developers who can crank out orders of magnitude more *good* code than your average developer. When he speaks, I always listen.\n",
				"date_published": "2008-09-24T20:55:00-07:00",
				"url": "https://therealadam.com/2008/09/24/rich-kilmer-speaketh.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/18/awesome-writing.html",
				"title": "Awesome writing",
				"content_html": "<!-- raw HTML omitted -->\n<p>I want to take that video behind the middle school and get it pregnant.</p>\n",
				"content_text": "<div class=\"center\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=Ky5p-L_m6BQ&hl=en&fs=1])\n</div>\n\nI want to take that video behind the middle school and get it pregnant.\n",
				"date_published": "2008-09-18T19:35:20-07:00",
				"url": "https://therealadam.com/2008/09/18/awesome-writing.html",
				"tags": ["Curated","The System","Erudition","typography"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/13/you-need-more.html",
				"title": "You need more Lyle Lovett",
				"content_html": "<p>Lyle Lovett is quite possibly one of Texas' finest exports. If you&rsquo;re not hip then you&rsquo;re missing out. Heck, I was missing out; consider a couple of his appearances on the Johnny Carson show.</p>\n<!-- raw HTML omitted -->\n<p>Make it a&hellip;cheeseburger.</p>\n<!-- raw HTML omitted -->\n<p>Do I wish that I could sing like Francine Reed <em>or</em> Lyle Lovett? <em>Every day</em>.</p>\n",
				"content_text": "Lyle Lovett is quite possibly one of Texas' finest exports. If you're not hip then you're missing out. Heck, I was missing out; consider a couple of his appearances on the Johnny Carson show.\n\n<div class=\"center\">\n[youtube=http://www.youtube.com/watch?v=5iHI2-SEdh4&amp;hl=en&amp;fs=1]\n</div>\n\nMake it a...cheeseburger.\n\n<div class=\"center\">\n[youtube=http://www.youtube.com/watch?v=HFhQgj9SM-I&amp;hl=en&amp;fs=1]\n</div>\n\nDo I wish that I could sing like Francine Reed _or_ Lyle Lovett? *Every day*.\n",
				"date_published": "2008-09-13T15:00:09-07:00",
				"url": "https://therealadam.com/2008/09/13/you-need-more.html",
				"tags": ["Music","Pop Culture","Curated","lyle_lovett"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/11/read-slightly-less.html",
				"title": "Read slightly less, practice slightly more",
				"content_html": "<p>Chris Wanswrath, a smart and distinguished fellow, <!-- raw HTML omitted -->advises us to burn our news readers<!-- raw HTML omitted --> and just &ldquo;hear it through the grapevine.&rdquo; But how far can one go with that?</p>\n<p>For myself, reading feeds gets me a few things:</p>\n<ul>\n<li>\n<p>Aesthetic where I have none. Feeds like <!-- raw HTML omitted -->BLDGBLOG<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Coudal<!-- raw HTML omitted --> point me to things that make me better at what I do, in a tangential way, and a more interesting person. These are things that otherwise I wouldn&rsquo;t know where to start.</p>\n</li>\n<li>\n<p>Awareness on the edges. Reading folks like <!-- raw HTML omitted -->Simon Willison<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Jason Kottke<!-- raw HTML omitted --> make sure that interesting topics in programming or erudition don&rsquo;t go unseen even though I am focused on that topic.</p>\n</li>\n<li>\n<p>Aggregation of ideas. This cuts two ways. Most people worth reading compress a bunch of different sources down to a manageable stream. This gives me more bang for the buck in my feed reading time. On the other hand, if a link is mentioned several times in the aggregate of feeds I subscribe to, then its probably worth checking out.</p>\n</li>\n</ul>\n<p>I can see how following interesting folks on Twitter and reading aggregators occasionally can you get you some of this, but not all of it. With sources like <!-- raw HTML omitted -->Reddit<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Hacker News<!-- raw HTML omitted -->, signal to noise is a problem - you can&rsquo;t control who posts what. Some people have a lot of extra angst and/or spare time. Which is also the other side of the Twitter story. Some people are great to read, but a pain to put up with at times. So it goes.</p>\n<p>When Chris' essay first hit the wires, I was tempted to adopt his ways. But, I think I&rsquo;m pretty good at ignoring the need to unbold things and cut down to business. What has proved immensely useful to me was has encouragement to just code all the time and make lots of stuff. I&rsquo;m just getting started with this, but already I&rsquo;m liking the increased feeling of accomplishment.</p>\n<p>Regardless, we could all probably stand to trim our feed lists and hunker down on our projects, no?</p>\n",
				"content_text": "Chris Wanswrath, a smart and distinguished fellow, <a href=\"http://github.com/blog/147-side-projects-the-keynote\">advises us to burn our news readers</a> and just \"hear it through the grapevine.\" But how far can one go with that?\n\nFor myself, reading feeds gets me a few things:\n\n* Aesthetic where I have none. Feeds like <a href=\"http://bldgblog.blogspot.com/\">BLDGBLOG</a> and <a href=\"http://coudal.com/\">Coudal</a> point me to things that make me better at what I do, in a tangential way, and a more interesting person. These are things that otherwise I wouldn't know where to start.\n\n* Awareness on the edges. Reading folks like <a href=\"http://simonwillison.net/\">Simon Willison</a> or <a href=\"http://kottke.org/\">Jason Kottke</a> make sure that interesting topics in programming or erudition don't go unseen even though I am focused on that topic.\n\n* Aggregation of ideas. This cuts two ways. Most people worth reading compress a bunch of different sources down to a manageable stream. This gives me more bang for the buck in my feed reading time. On the other hand, if a link is mentioned several times in the aggregate of feeds I subscribe to, then its probably worth checking out.\n\nI can see how following interesting folks on Twitter and reading aggregators occasionally can you get you some of this, but not all of it. With sources like <a href=\"http://www.reddit.com/\">Reddit</a> or <a href=\"http://news.ycombinator.com/\">Hacker News</a>, signal to noise is a problem - you can't control who posts what. Some people have a lot of extra angst and/or spare time. Which is also the other side of the Twitter story. Some people are great to read, but a pain to put up with at times. So it goes.\n\nWhen Chris' essay first hit the wires, I was tempted to adopt his ways. But, I think I'm pretty good at ignoring the need to unbold things and cut down to business. What has proved immensely useful to me was has encouragement to just code all the time and make lots of stuff. I'm just getting started with this, but already I'm liking the increased feeling of accomplishment.\n\nRegardless, we could all probably stand to trim our feed lists and hunker down on our projects, no?\n",
				"date_published": "2008-09-11T08:00:45-07:00",
				"url": "https://therealadam.com/2008/09/11/read-slightly-less.html",
				"tags": ["The System","Erudition","people:simon-willison","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/10/our-trip-to.html",
				"title": "Our trip to Germany in pictures",
				"content_html": "<p>Here are four of my favorite pictures from our trip to Germany:</p>\n<!-- raw HTML omitted -->\n<p>From top to bottom we&rsquo;ve got the cool elevator at BMW Welt with glass doors, an old building in Munich with rather modern wings added on, a pygmy hippo at the Berlin zoo and a cool video wall at the BMW museum showing numbers that might appear as model numbers.</p>\n<p>You can &ldquo;look at all my pictures&rdquo;:<a href=\"http://flickr.com/photos/therealadam/sets/72157607210013225/\">flickr.com/photos/th&hellip;</a> or &ldquo;check out&rdquo;:<a href=\"http://flickr.com/photos/courtney/sets/72157607072717205/\">flickr.com/photos/co&hellip;</a> &ldquo;Courtney&rsquo;s&rdquo;:<a href=\"http://flickr.com/photos/courtney/sets/72157607146020036/\">flickr.com/photos/co&hellip;</a> &ldquo;pictures&rdquo;:<a href=\"http://flickr.com/photos/courtney/sets/72157607187218862/.\">flickr.com/photos/co&hellip;</a></p>\n",
				"content_text": "Here are four of my favorite pictures from our trip to Germany:\n\n<div class=\"center\">\n  <a href=\"http://www.flickr.com/photos/therealadam/2844928598/\" title=\"BMW Welt by Adam Keys, on Flickr\"><img src=\"http://farm4.static.flickr.com/3159/2844928598_a3c3b22b29_t.jpg\" width=\"75\" height=\"75\" alt=\"BMW Welt\" /></a>\n  <a href=\"http://www.flickr.com/photos/therealadam/2844923882/\" title=\"Munich by Adam Keys, on Flickr\"><img src=\"http://farm4.static.flickr.com/3225/2844923882_199d70e6ef_t.jpg\" width=\"75\" height=\"75\" alt=\"Munich\" /></a>\n  <a href=\"http://www.flickr.com/photos/therealadam/2844912876/\" title=\"Berlin by Adam Keys, on Flickr\"><img src=\"http://farm4.static.flickr.com/3137/2844912876_a08e871d3f_t.jpg\" width=\"75\" height=\"75\" alt=\"Berlin\" /></a>\n  <a href=\"http://www.flickr.com/photos/therealadam/2844932376/\" title=\"BMW Museum by Adam Keys, on Flickr\"><img src=\"http://farm4.static.flickr.com/3037/2844932376_653b51a912_t.jpg\" width=\"75\" height=\"75\" alt=\"BMW Museum\" /></a>\n</div>\n\nFrom top to bottom we've got the cool elevator at BMW Welt with glass doors, an old building in Munich with rather modern wings added on, a pygmy hippo at the Berlin zoo and a cool video wall at the BMW museum showing numbers that might appear as model numbers.\n\nYou can \"look at all my pictures\":[flickr.com/photos/th...](http://flickr.com/photos/therealadam/sets/72157607210013225/) or \"check out\":[flickr.com/photos/co...](http://flickr.com/photos/courtney/sets/72157607072717205/) \"Courtney's\":[flickr.com/photos/co...](http://flickr.com/photos/courtney/sets/72157607146020036/) \"pictures\":[flickr.com/photos/co...](http://flickr.com/photos/courtney/sets/72157607187218862/.)\n",
				"date_published": "2008-09-10T20:22:31-07:00",
				"url": "https://therealadam.com/2008/09/10/our-trip-to.html",
				"tags": ["Curated","Eye Candy","travel"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/10/vector-prime.html",
				"title": "Vector Prime",
				"content_html": "<p><!-- raw HTML omitted -->Vector Prime<!-- raw HTML omitted -->. Yeah, I&rsquo;m that big of a Star Wars nerds, I read these little novels when I need a break from heavier stuff. This one isn&rsquo;t as good as any in the <!-- raw HTML omitted -->Thrawn trilogy<!-- raw HTML omitted -->, but its not horrible action sci-fi and fun for Star Wars nerds, like myself.</p>\n",
				"content_text": "<a href=\"http://www.amazon.com/Vector-Prime-Star-Wars-Order/dp/0345428455/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1220963673&amp;sr=8-1\">Vector Prime</a>. Yeah, I'm that big of a Star Wars nerds, I read these little novels when I need a break from heavier stuff. This one isn't as good as any in the <a href=\"http://en.wikipedia.org/wiki/Thrawn_trilogy\">Thrawn trilogy</a>, but its not horrible action sci-fi and fun for Star Wars nerds, like myself.\n",
				"date_published": "2008-09-10T15:26:07-07:00",
				"url": "https://therealadam.com/2008/09/10/vector-prime.html",
				"tags": ["Nerdery","star_wars","Reading List"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/09/i-heart-complexity.html",
				"title": "I Heart Complexity",
				"content_html": "<p><!-- raw HTML omitted -->Like I said<!-- raw HTML omitted -->, I think the market for simple applications is probably saturated and now is the time for Ruby and Rails to go up-market and tackle bigger problems. We&rsquo;re well equipped to do that, having learned from what sorts of simplicity help reduce tricky problems to tractable problems.</p>\n<!-- raw HTML omitted -->\n<p>In my RailsConf Europe 2008 presentation, I play the role of the messenger. I&rsquo;m not bringing any new science that makes building more involved applications easier. Instead, I&rsquo;m trying to tie it together into an understandable package. You take the gems described herein (money, acts_as_state_machine and acts_as_versioned) and a couple concepts (domain driven design and queueing) and you can build some really cool applications that solve pretty tricky problems. To me, that&rsquo;s big fun.</p>\n<p>You can <!-- raw HTML omitted -->check the presentation out on Slideshare<!-- raw HTML omitted --> or grab the <!-- raw HTML omitted -->PDF<!-- raw HTML omitted -->. Also, make sure to <!-- raw HTML omitted -->check out the code on GitHub<!-- raw HTML omitted -->. Enjoy!</p>\n",
				"content_text": "<a href=\"http://therealadam.com/archive/2008/08/29/railsconf-europe-here-i-come/\">Like I said</a>, I think the market for simple applications is probably saturated and now is the time for Ruby and Rails to go up-market and tackle bigger problems. We're well equipped to do that, having learned from what sorts of simplicity help reduce tricky problems to tractable problems.\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/09/iheartcomplexity.jpg\" alt=\"IHeartComplexity.jpg\" border=\"0\" width=\"480\" height=\"432\" /></div>\n\nIn my RailsConf Europe 2008 presentation, I play the role of the messenger. I'm not bringing any new science that makes building more involved applications easier. Instead, I'm trying to tie it together into an understandable package. You take the gems described herein (money, acts_as_state_machine and acts_as_versioned) and a couple concepts (domain driven design and queueing) and you can build some really cool applications that solve pretty tricky problems. To me, that's big fun.\n\nYou can <a href=\"http://www.slideshare.net/therealadam/i-heart-complexity-presentation\">check the presentation out on Slideshare</a> or grab the <a href=\"http://therealadam.com/wp-content/uploads/2008/09/iheartcomplexity.pdf\">PDF</a>. Also, make sure to <a href=\"http://github.com/therealadam/i-heart-complexity/tree/master\">check out the code on GitHub</a>. Enjoy!\n",
				"date_published": "2008-09-09T20:40:27-07:00",
				"url": "https://therealadam.com/2008/09/09/i-heart-complexity.html",
				"tags": ["rails","Events","railsconf2008"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/09/pretty-parallax.html",
				"title": "Pretty Parallax",
				"content_html": "<p><!-- raw HTML omitted -->jParallax<!-- raw HTML omitted --> - a JavaScript gizmo for composing images using a parallax effect. In other words, insanely cool.</p>\n",
				"content_text": "<a href=\"http://webdev.stephband.info/parallax.html\">jParallax</a> - a JavaScript gizmo for composing images using a parallax effect. In other words, insanely cool.\n",
				"date_published": "2008-09-09T18:45:28-07:00",
				"url": "https://therealadam.com/2008/09/09/pretty-parallax.html",
				"tags": ["Curated","javascript"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/09/08/freakonomics.html",
				"title": "Freakonomics",
				"content_html": "<p><!-- raw HTML omitted -->Freakonomics<!-- raw HTML omitted -->. Its not about economics in the dry, dismal sense that I remember from college. This is more about counterintuitive turns of logic, data showing causations that no one really supposed made sense. In the end, its about economics in the sense that real estate agents, sumo wrestlers and criminals respond to financial, social and lifestyle incentives.</p>\n<p>Oh, and the book features twenty misspellings of the name &ldquo;Jasmine&rdquo;, a bit on two brothers named Winner and Loser, and a person named Shithead. Predictably, the last was my favorite.</p>\n",
				"content_text": "<a href=\"http://freakonomicsbook.com/\">Freakonomics</a>. Its not about economics in the dry, dismal sense that I remember from college. This is more about counterintuitive turns of logic, data showing causations that no one really supposed made sense. In the end, its about economics in the sense that real estate agents, sumo wrestlers and criminals respond to financial, social and lifestyle incentives.\n\nOh, and the book features twenty misspellings of the name \"Jasmine\", a bit on two brothers named Winner and Loser, and a person named Shithead. Predictably, the last was my favorite.\n",
				"date_published": "2008-09-08T20:22:43-07:00",
				"url": "https://therealadam.com/2008/09/08/freakonomics.html",
				"tags": ["The System","economics","Reading List","shithead"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/29/railsconf-europe-here.html",
				"title": "RailsConf Europe, here I come",
				"content_html": "<p><!-- raw HTML omitted -->RailsConf Europe<!-- raw HTML omitted --> is next week. I&rsquo;m so there!</p>\n<p>I&rsquo;m giving a talk on complexity and how I heart it. Ruby, and Rails in particular, started out with a very strong statement <em>against</em> complexity. Mostly this was about the complexity that imposed by ceremonious frameworks and technologies.</p>\n<p>My stance is that all the really simple applications are done. But perhaps there are some ideas, some complexity, we can add to our problem-solving repertoire that let us tackle much larger applications. Some levers we can use to apply a little force and get a lot of result. Please to be joining me!</p>\n<p>I took a couple years of German in high school, which is hopefully going to pay off as Courtney and I travel about Germany. If you&rsquo;re at the conference, please come say hi, but forgive my Texan drawl. <!-- raw HTML omitted -->Ich spreche ein bisschen Deutsch!<!-- raw HTML omitted --> How little? Here is the translation of my first attempt, from my memory of German: &ldquo;I am a small German language!&rdquo;</p>\n<p>(Oh, and rumor has it that there may be one more <!-- raw HTML omitted -->MVC<!-- raw HTML omitted --> video. Maybe.)</p>\n",
				"content_text": "<a href=\"http://railsconfeurope.com/\">RailsConf Europe</a> is next week. I'm so there!\n\nI'm giving a talk on complexity and how I heart it. Ruby, and Rails in particular, started out with a very strong statement _against_ complexity. Mostly this was about the complexity that imposed by ceremonious frameworks and technologies.\n\nMy stance is that all the really simple applications are done. But perhaps there are some ideas, some complexity, we can add to our problem-solving repertoire that let us tackle much larger applications. Some levers we can use to apply a little force and get a lot of result. Please to be joining me!\n\nI took a couple years of German in high school, which is hopefully going to pay off as Courtney and I travel about Germany. If you're at the conference, please come say hi, but forgive my Texan drawl. <em>Ich spreche ein bisschen Deutsch!</em> How little? Here is the translation of my first attempt, from my memory of German: \"I am a small German language!\"\n\n(Oh, and rumor has it that there may be one more <a href=\"http://railsenvy.com/2008/6/3/mvc-videos\">MVC</a> video. Maybe.)\n",
				"date_published": "2008-08-29T11:31:48-07:00",
				"url": "https://therealadam.com/2008/08/29/railsconf-europe-here.html",
				"tags": ["Events","railsconf2008"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/27/guns-germs-and.html",
				"title": "Guns, Germs and Steel",
				"content_html": "<p><!-- raw HTML omitted --><em>Guns, Germs and Steel</em><!-- raw HTML omitted --> is one of those essential books that makes more sense of the world. Specifically, it address in rational terms, how it came to be that the modern world is arranged as it is where it concerns the haves and have-nots on the global scale.</p>\n<p>The author, Jared Diamond, does so by taking an extremely long view on history, over the course of the last ten thousand plus years). From there he tries to build models and theories that predict why some societies advanced faster than others. To make a long story short, the societies that have become the contemporary first world were able to:</p>\n<ul>\n<li>Move knowledge and technology on an east-west axis, an axis that allows easy migration and translation of farming knowledge because the climate is roughly the same</li>\n<li>Develop immunity to epidemic diseases like small-pox that are tied to living near agriculture, thus making them less likely to get killed off by certain foreign invaders or to kill off natives as they travel to foreign lands</li>\n<li>Organize people into ever-large structures that can sustain invasions, research and other useful forms of specialization</li>\n</ul>\n<p>Of course there&rsquo;s more to it than that. It&rsquo;s a great read and illuminates all sorts of topics I&rsquo;d never even thought of, let alone correlated. If you, like me, seek a greater understanding of the abstracts that define the world, this is a book for you.</p>\n",
				"content_text": "<a href=\"http://www.amazon.com/Guns-Germs-Steel-Fates-Societies/dp/0393317552\">_Guns, Germs and Steel_</a> is one of those essential books that makes more sense of the world. Specifically, it address in rational terms, how it came to be that the modern world is arranged as it is where it concerns the haves and have-nots on the global scale.\n\nThe author, Jared Diamond, does so by taking an extremely long view on history, over the course of the last ten thousand plus years). From there he tries to build models and theories that predict why some societies advanced faster than others. To make a long story short, the societies that have become the contemporary first world were able to:\n\n* Move knowledge and technology on an east-west axis, an axis that allows easy migration and translation of farming knowledge because the climate is roughly the same\n* Develop immunity to epidemic diseases like small-pox that are tied to living near agriculture, thus making them less likely to get killed off by certain foreign invaders or to kill off natives as they travel to foreign lands\n* Organize people into ever-large structures that can sustain invasions, research and other useful forms of specialization\n\nOf course there's more to it than that. It's a great read and illuminates all sorts of topics I'd never even thought of, let alone correlated. If you, like me, seek a greater understanding of the abstracts that define the world, this is a book for you.\n",
				"date_published": "2008-08-27T18:46:38-07:00",
				"url": "https://therealadam.com/2008/08/27/guns-germs-and.html",
				"tags": ["The System","Reading List","geography"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/26/quotwithquot-for-ruby.html",
				"title": "\u0026quot;with\u0026quot; for Ruby",
				"content_html": "<p>Use with caution:</p>\n<p>That said, @with@ is discouraged in JavaScript. If you can, its better to have methods return @self@ so you can chain like so: @people.get_dressed.put_on_music.and_party!@</p>\n",
				"content_text": "Use with caution:\n\n\n\nThat said, @with@ is discouraged in JavaScript. If you can, its better to have methods return @self@ so you can chain like so: @people.get_dressed.put_on_music.and_party!@\n",
				"date_published": "2008-08-26T15:19:11-07:00",
				"url": "https://therealadam.com/2008/08/26/quotwithquot-for-ruby.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/20/those-were-the.html",
				"title": "Those were the droids",
				"content_html": "<!-- raw HTML omitted -->\n<p>(<!-- raw HTML omitted -->via<!-- raw HTML omitted -->)</p>\n",
				"content_text": "<div class=\"center\">\n  <img src=\"http://farm4.static.flickr.com/3217/2762458387_31207c1a81_d.jpg\" alt=\"Those WERE the droids I'm looking for\" />\n</div>\n\n(<a href=\"http://flickr.com/photos/24973901@N04/2762458387/\">via</a>)\n",
				"date_published": "2008-08-20T21:05:18-07:00",
				"url": "https://therealadam.com/2008/08/20/those-were-the.html",
				"tags": ["Curated","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/17/lastfms-shame-aggregator.html",
				"title": "Last.fm\u0026#039;s shame aggregator",
				"content_html": "<p><!-- raw HTML omitted -->Most Unwanted Scrobbles<!-- raw HTML omitted --> - Last.fm aggregates the tracks and artists that people <!-- raw HTML omitted -->don&rsquo;t<!-- raw HTML omitted --> want the internet-at-large to know they listen to. Britney Spears appears twice in the top five songs, along with Nelly Furtado, Amy Winehouse and Avril Lavigne.  The Beatles, Radiohead, Britney Spears and Avril Lavigne are the top 5 arists (along with Unknown.)</p>\n<p>So I guess Last.fm users are just too damn cool to admit to some of their tastes. Me, I&rsquo;m fine with letting you know I listened to Sir Mix-A-Lot&rsquo;s <em>Mack Daddy</em> in its entirety this week.</p>\n",
				"content_text": "<a href=\"http://playground.last.fm/unwanted\">Most Unwanted Scrobbles</a> - Last.fm aggregates the tracks and artists that people <strong>don't</strong> want the internet-at-large to know they listen to. Britney Spears appears twice in the top five songs, along with Nelly Furtado, Amy Winehouse and Avril Lavigne.  The Beatles, Radiohead, Britney Spears and Avril Lavigne are the top 5 arists (along with Unknown.)\n\nSo I guess Last.fm users are just too damn cool to admit to some of their tastes. Me, I'm fine with letting you know I listened to Sir Mix-A-Lot's _Mack Daddy_ in its entirety this week.\n",
				"date_published": "2008-08-17T14:03:52-07:00",
				"url": "https://therealadam.com/2008/08/17/lastfms-shame-aggregator.html",
				"tags": ["Music","Pop Culture","Curated"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/16/domain-driven-design.html",
				"title": "Domain Driven Design",
				"content_html": "<p>Designing software is a tricky thing. It&rsquo;s tempting to front-load it on a project. That won&rsquo;t work because the start of a project is when you know the least about it. So some folks try to do as little design as possible. I&rsquo;m guilty of this. However, that can lead to software that doesn&rsquo;t adequately express the problem it&rsquo;s trying to solve. Further, there is often a temptation to over-design software with lots of ceremony and architecture. Contrary to this is the temptation to not design it at all, which again leads to software that doesn&rsquo;t express itself.</p>\n<p>There&rsquo;s a book that draws a reasonable compromise between these forces. I&rsquo;ve been meaning to read Eric Evans' <!-- raw HTML omitted --><em>Domain Driven Design</em><!-- raw HTML omitted --> for a while now. The emphasis of the book is in collaborating with domain experts and other developers to find the essence of the problem space and then express that in software (as objects). I&rsquo;ve often pointed out the utility of building applications from the language up and the problem domain down. DDD focuses precisely on the latter.</p>\n<p>One of the core concepts in the book is the <em>ubiquitous language</em> that is used to describe the problem at hand. This language is used by the domain experts (customers) <em>and</em> the developers. The language is then woven into the design of the system. This leads to software that is more likely to succeed, both in business terms and in terms of development effort. Evans spends the first part of the book describing the particulars of this language.</p>\n<p>He then moves on to describing the technical side of the software. Entities, value objects, services, factories, modules and repositories are terms I was already somewhat familiar with that Evans gave a more crisp and satisfying definition to. For most people, this is probably the tasty meat of the book, illuminating the way from a competent developer to an outstanding developer.</p>\n<p>The last part of the book focuses on the larger scale issues of deep design. I was particularly pleased that he covers how software design is affected by various good and bad social issues. It also gives a strategic view of the forest, where most books on software development focus on a more tactical view of each tree.</p>\n<p>I&rsquo;m fond of pointing out books that are inflection points in my way of thinking about software development. <!-- raw HTML omitted -->Code Complete<!-- raw HTML omitted -->, <!-- raw HTML omitted -->The Pragmatic Programmer<!-- raw HTML omitted -->, The Dragon Book and <!-- raw HTML omitted -->My Job Went To India<!-- raw HTML omitted --> all fall under this category. <!-- raw HTML omitted -->Domain Driven Design<!-- raw HTML omitted --> is certainly the latest edition. It makes sense of trends I see in great software and illuminates a path to make software like it myself.</p>\n<p>If reading this review didn&rsquo;t make you want to vomit, you should probably read the book posthaste.</p>\n",
				"content_text": "Designing software is a tricky thing. It's tempting to front-load it on a project. That won't work because the start of a project is when you know the least about it. So some folks try to do as little design as possible. I'm guilty of this. However, that can lead to software that doesn't adequately express the problem it's trying to solve. Further, there is often a temptation to over-design software with lots of ceremony and architecture. Contrary to this is the temptation to not design it at all, which again leads to software that doesn't express itself.\n\nThere's a book that draws a reasonable compromise between these forces. I've been meaning to read Eric Evans' <a href=\"http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1218903529&amp;sr=8-1\">_Domain Driven Design_</a> for a while now. The emphasis of the book is in collaborating with domain experts and other developers to find the essence of the problem space and then express that in software (as objects). I've often pointed out the utility of building applications from the language up and the problem domain down. DDD focuses precisely on the latter.\n\nOne of the core concepts in the book is the _ubiquitous language_ that is used to describe the problem at hand. This language is used by the domain experts (customers) *and* the developers. The language is then woven into the design of the system. This leads to software that is more likely to succeed, both in business terms and in terms of development effort. Evans spends the first part of the book describing the particulars of this language.\n\nHe then moves on to describing the technical side of the software. Entities, value objects, services, factories, modules and repositories are terms I was already somewhat familiar with that Evans gave a more crisp and satisfying definition to. For most people, this is probably the tasty meat of the book, illuminating the way from a competent developer to an outstanding developer.\n\nThe last part of the book focuses on the larger scale issues of deep design. I was particularly pleased that he covers how software design is affected by various good and bad social issues. It also gives a strategic view of the forest, where most books on software development focus on a more tactical view of each tree.\n\nI'm fond of pointing out books that are inflection points in my way of thinking about software development. <em>Code Complete</em>, <em>The Pragmatic Programmer</em>, The Dragon Book and <em>My Job Went To India</em> all fall under this category. <em>Domain Driven Design</em> is certainly the latest edition. It makes sense of trends I see in great software and illuminates a path to make software like it myself.\n\nIf reading this review didn't make you want to vomit, you should probably read the book posthaste.\n",
				"date_published": "2008-08-16T09:36:12-07:00",
				"url": "https://therealadam.com/2008/08/16/domain-driven-design.html",
				"tags": ["pragprog","Reading List"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/15/interview-with-david.html",
				"title": "Interview with David Flanagan, part 2",
				"content_html": "<p><!-- raw HTML omitted -->The second part of my interview with David Flanagan is online.<!-- raw HTML omitted --> This time around we talk about the craft of programming in general. Its good stuff.</p>\n",
				"content_text": "<a href=\"http://blog.fiveruns.com/2008/8/15/rails-takefive-five-questions-with-david-flanagan-part-2\">The second part of my interview with David Flanagan is online.</a> This time around we talk about the craft of programming in general. Its good stuff.\n",
				"date_published": "2008-08-15T09:52:37-07:00",
				"url": "https://therealadam.com/2008/08/15/interview-with-david.html",
				"tags": ["Curated","ruby","fiveruns","Events"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/14/ios-intriguing-design.html",
				"title": "Io\u0026#39;s intriguing design",
				"content_html": "<p>I didn&rsquo;t manage to touch on this in <!-- raw HTML omitted -->What Has Ruby Done For You Lately<!-- raw HTML omitted -->, but <!-- raw HTML omitted -->Io<!-- raw HTML omitted --> is a really impressive language. Mostly in the minimal number of concepts one needs to grasp in order to deeply understand the language.</p>\n<p>To pick on Java (sorry), a list of concepts you need in order to grasp Java:</p>\n<ul>\n<li>Primitive types</li>\n<li>Objects</li>\n<li>Classes</li>\n<li>Interfaces</li>\n<li>Inheritance</li>\n<li>Iteration</li>\n<li>Conditionals</li>\n<li>Operators</li>\n<li>Type casting</li>\n<li>Generics</li>\n<li>Method calls</li>\n</ul>\n<p>I&rsquo;m sure I&rsquo;m missing some. Further, that&rsquo;s just what you need to write a program with <em>one class</em>. To build a realistic system you need to know about class paths, packages and all sorts of arcane details.</p>\n<p>In comparison, to build a simplistic Io program, you need to understand:</p>\n<ul>\n<li>Lazy evaluation</li>\n<li>Objects as prototypes</li>\n<li>Short circuit evaluation</li>\n<li>Messages</li>\n<li>Closures</li>\n</ul>\n<p>That list ended up about twice as long as I thought it would, actually. Really, all the average practicing programmer needs to learn is prototypes and lazy evaluation.</p>\n<!-- raw HTML omitted -->\n<p>That quote, from the <!-- raw HTML omitted -->Io Programming Guide<!-- raw HTML omitted -->, pulls it all together and summarizes why the language nerd in me is quite interested in Io.</p>\n",
				"content_text": "I didn't manage to touch on this in <a href=\"http://therealadam.com/archive/2008/07/25/what-has-ruby-done-for-you-lately/\">What Has Ruby Done For You Lately</a>, but <a href=\"http://iolanguage.com/\">Io</a> is a really impressive language. Mostly in the minimal number of concepts one needs to grasp in order to deeply understand the language.\n\nTo pick on Java (sorry), a list of concepts you need in order to grasp Java:\n\n* Primitive types\n* Objects\n* Classes\n* Interfaces\n* Inheritance\n* Iteration\n* Conditionals\n* Operators\n* Type casting\n* Generics\n* Method calls\n\nI'm sure I'm missing some. Further, that's just what you need to write a program with _one class_. To build a realistic system you need to know about class paths, packages and all sorts of arcane details.\n\nIn comparison, to build a simplistic Io program, you need to understand:\n\n* Lazy evaluation\n* Objects as prototypes\n* Short circuit evaluation\n* Messages\n* Closures\n\nThat list ended up about twice as long as I thought it would, actually. Really, all the average practicing programmer needs to learn is prototypes and lazy evaluation.\n\n<blockquote>\nIo's guiding design principle is simplicity and power through conceptual unification.\n</blockquote>\n\nThat quote, from the <a href=\"http://iolanguage.com/scm/git/checkout/Io/docs/IoGuide.html\">Io Programming Guide</a>, pulls it all together and summarizes why the language nerd in me is quite interested in Io.\n",
				"date_published": "2008-08-14T20:48:49-07:00",
				"url": "https://therealadam.com/2008/08/14/ios-intriguing-design.html",
				"tags": ["Uncategorized","io"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/13/catch-up-with.html",
				"title": "Catch up with 30 Rock",
				"content_html": "<p>OK, here&rsquo;s the deal. If you&rsquo;re not watching 30 Rock, you&rsquo;re not watching the best show on TV. <em>There I said it</em>. Fortunately, you&rsquo;ve got time to catch up; the show doesn&rsquo;t come back until October 30th. To whet your appetite, I give you clips summarizing the &ldquo;lives&rdquo; of the two main characters, played by Alec Baldwin and Tina Fey.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "OK, here's the deal. If you're not watching 30 Rock, you're not watching the best show on TV. *There I said it*. Fortunately, you've got time to catch up; the show doesn't come back until October 30th. To whet your appetite, I give you clips summarizing the \"lives\" of the two main characters, played by Alec Baldwin and Tina Fey.\n\n<div class=\"center\">\n\n</div>\n\n<div class=\"center\">\n\n</div>\n",
				"date_published": "2008-08-13T04:24:09-07:00",
				"url": "https://therealadam.com/2008/08/13/catch-up-with.html",
				"tags": ["Curated","Comedy, haha","misc:30_rock"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/10/google-calendar-ical.html",
				"title": "Google Calendar + iCal + CalDAV = happy",
				"content_html": "<p><!-- raw HTML omitted -->Google Calendar CalDAV support<!-- raw HTML omitted --> - instructions for setting up Google Calendar accounts with iCal. Makes Google Calendar a lot more useful to me. Conversely, CalDAV accounts don&rsquo;t appear to sync with MobileMe. Bummer.</p>\n",
				"content_text": "<a href=\"http://www.google.com/support/calendar/bin/answer.py?answer=99358\">Google Calendar CalDAV support</a> - instructions for setting up Google Calendar accounts with iCal. Makes Google Calendar a lot more useful to me. Conversely, CalDAV accounts don't appear to sync with MobileMe. Bummer.\n",
				"date_published": "2008-08-10T15:10:09-07:00",
				"url": "https://therealadam.com/2008/08/10/google-calendar-ical.html",
				"tags": ["Curated","Expanded ideas","gcal","ical"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/09/sync-your-taskpapers.html",
				"title": "Sync your TaskPapers",
				"content_html": "<p>I&rsquo;m a fan of <!-- raw HTML omitted -->TaskPaper<!-- raw HTML omitted -->, the todo-list app that makes sense and doesn&rsquo;t throw huge amounts of UI at me. Ergo, I&rsquo;m pleased to see a <!-- raw HTML omitted -->Ruby library for syncing your TaskPaper documents<!-- raw HTML omitted --> to what will soon become the <!-- raw HTML omitted -->web version of TaskPaper<!-- raw HTML omitted -->. Rawesome.</p>\n",
				"content_text": "I'm a fan of <a href=\"http://hogbaysoftware.com/products/taskpaper\">TaskPaper</a>, the todo-list app that makes sense and doesn't throw huge amounts of UI at me. Ergo, I'm pleased to see a <a href=\"http://blog.ardekantur.com/2008/07/taskotaskpaper-ruby-awesome/\">Ruby library for syncing your TaskPaper documents</a> to what will soon become the <a href=\"http://blog.ardekantur.com/2008/07/taskotaskpaper-ruby-awesome/#comment-885\">web version of TaskPaper</a>. Rawesome.\n",
				"date_published": "2008-08-09T20:00:51-07:00",
				"url": "https://therealadam.com/2008/08/09/sync-your-taskpapers.html",
				"tags": ["Curated","Expanded ideas","gtd","taskpaper"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/08/interview-with-david.html",
				"title": "Interview with David Flanagan",
				"content_html": "<p>Last week I interviewed the author of <!-- raw HTML omitted --><em>The Ruby Programming Langauge</em><!-- raw HTML omitted -->, David Flanagan. We posted the first part of it today - <!-- raw HTML omitted -->Five Questions with David Flanagan, Part 1<!-- raw HTML omitted -->. The second part will go up next week. Enjoy!</p>\n",
				"content_text": "Last week I interviewed the author of <a href=\"http://oreilly.com/catalog/9780596516178/\">_The Ruby Programming Langauge_</a>, David Flanagan. We posted the first part of it today - <a href=\"http://blog.fiveruns.com/2008/8/8/rails-takefive-five-questions-with-david-flanagan-part-1-2\">Five Questions with David Flanagan, Part 1</a>. The second part will go up next week. Enjoy!\n",
				"date_published": "2008-08-08T10:54:22-07:00",
				"url": "https://therealadam.com/2008/08/08/interview-with-david.html",
				"tags": ["Curated","ruby","fiveruns","Events"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/07/american-demographic-inversion.html",
				"title": "American demographic inversion",
				"content_html": "<p><!-- raw HTML omitted -->Trading Places<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>A fascinating read for those who like to think about how our cities evolve.</p>\n",
				"content_text": "<a href=\"http://tnr.com/story_print.html?id=264510ca-2170-49cd-bad5-a0be122ac1a9\">Trading Places</a>:\n\n<blockquote>\nIn the past three decades, Chicago has undergone changes that are routinely described as gentrification, but are in fact more complicated and more profound than the process that term suggests. A better description would be \"demographic inversion.\" Chicago is gradually coming to resemble a traditional European city--Vienna or Paris in the nineteenth century, or, for that matter, Paris today. The poor and the newcomers are living on the outskirts. The people who live near the center--some of them black or Hispanic but most of them white--are those who can afford to do so.\n</blockquote>\n\nA fascinating read for those who like to think about how our cities evolve.\n",
				"date_published": "2008-08-07T16:22:24-07:00",
				"url": "https://therealadam.com/2008/08/07/american-demographic-inversion.html",
				"tags": ["Curated","The System","urbanism"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/06/refactoring-to-more.html",
				"title": "Refactoring to more code",
				"content_html": "<p><!-- raw HTML omitted -->Refactor my code<!-- raw HTML omitted --> is a neat site where you can post your code and watch others refactor it. I saw an <!-- raw HTML omitted -->interesting bit of code<!-- raw HTML omitted --> whiz past and thought I&rsquo;d <!-- raw HTML omitted -->take a crack at it<!-- raw HTML omitted -->.</p>\n<p>Removing conditionals from code is one of the little games I sometimes play while coding. Here, I&rsquo;ve extracted the logic of the conditional into another class. The resulting class is <em>much more</em> code than the original. So why do that?</p>\n<p>Well, I say you get a few benefits:</p>\n<ul>\n<li>The logic is now far easier to test. It&rsquo;s a standalone object now rather than a Rails functional test.</li>\n<li>The flow of what&rsquo;s being done and tested is more decomposed and easier to follow.</li>\n<li>Most importantly, the code explains itself. No need for comments (which will undoubtedly go out of sync over time) here!</li>\n</ul>\n<p>While I delight in deleting code and writing as little as possible, refactoring this to <em>more</em> code seems the right way. What say you?</p>\n<p><!-- raw HTML omitted -->Update: Make sure you check out <!-- raw HTML omitted -->Marcel Molina&rsquo;s refactoring<!-- raw HTML omitted -->. Its probably better than mine ;)<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"http://refactormycode.com/\">Refactor my code</a> is a neat site where you can post your code and watch others refactor it. I saw an <a href=\"http://refactormycode.com/codes/420-too-many-if-else-if\">interesting bit of code</a> whiz past and thought I'd <a href=\"http://refactormycode.com/codes/420-too-many-if-else-if#refactor_14578\">take a crack at it</a>.\n\nRemoving conditionals from code is one of the little games I sometimes play while coding. Here, I've extracted the logic of the conditional into another class. The resulting class is _much more_ code than the original. So why do that?\n\nWell, I say you get a few benefits:\n\n* The logic is now far easier to test. It's a standalone object now rather than a Rails functional test.\n* The flow of what's being done and tested is more decomposed and easier to follow.\n* Most importantly, the code explains itself. No need for comments (which will undoubtedly go out of sync over time) here!\n\nWhile I delight in deleting code and writing as little as possible, refactoring this to _more_ code seems the right way. What say you?\n\n<ins>Update: Make sure you check out <a href=\"http://refactormycode.com/codes/420-too-many-if-else-if#refactor_14589\">Marcel Molina's refactoring</a>. Its probably better than mine ;)</ins>\n",
				"date_published": "2008-08-06T11:52:39-07:00",
				"url": "https://therealadam.com/2008/08/06/refactoring-to-more.html",
				"tags": ["Uncategorized","ruby","rails","refactoring"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/04/program-is-information.html",
				"title": "Program is information.",
				"content_html": "<p>Its retro, its cool. It&rsquo;ll come in handy when I need slides on the sameness of code and data in good programming languages.</p>\n<!-- raw HTML omitted -->\n<p>Via <!-- raw HTML omitted -->Square America<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Its retro, its cool. It'll come in handy when I need slides on the sameness of code and data in good programming languages.\n\n<div class=\"center\"><img src=\"http://therealadam.com/wordpress/wp-content/uploads/2008/07/information-programs1.jpg\" alt=\"information_programs.jpg\" border=\"0\" width=\"500\" height=\"330\" /></div>\n\nVia <a href=\"http://www.squareamerica.com/ib.htm\">Square America</a>.\n",
				"date_published": "2008-08-04T06:08:47-07:00",
				"url": "https://therealadam.com/2008/08/04/program-is-information.html",
				"tags": ["Curated","history"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/03/good-erlang-reading.html",
				"title": "Good Erlang reading",
				"content_html": "<p><!-- raw HTML omitted -->Socklabs<!-- raw HTML omitted --> - lots of interesting Erlang bits here. Not academic at all. :)</p>\n",
				"content_text": "<a href=\"http://blog.socklabs.com/\">Socklabs</a> - lots of interesting Erlang bits here. Not academic at all. :)\n",
				"date_published": "2008-08-03T11:20:20-07:00",
				"url": "https://therealadam.com/2008/08/03/good-erlang-reading.html",
				"tags": ["Curated","erlang"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/02/realtime-challenges.html",
				"title": "Realtime challenges",
				"content_html": "<p><!-- raw HTML omitted -->beyond rest<!-- raw HTML omitted --> - if publishing data in realtime, XMPP, Comet and scaling HTTP services pique your interest, this thread is an <em>excellent</em> read. Lots of smart people disagreeing here.</p>\n",
				"content_text": "<a href=\"http://joshua.schachter.org/2008/07/beyond-rest.html\">beyond rest</a> - if publishing data in realtime, XMPP, Comet and scaling HTTP services pique your interest, this thread is an _excellent_ read. Lots of smart people disagreeing here.\n",
				"date_published": "2008-08-02T11:02:35-07:00",
				"url": "https://therealadam.com/2008/08/02/realtime-challenges.html",
				"tags": ["Curated","scaling","http"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/02/women-working-on.html",
				"title": "Women working on a plane",
				"content_html": "<p>1940s and 50s industry is neat, OK?</p>\n<!-- raw HTML omitted -->\n<p>Via <!-- raw HTML omitted -->ffffound!<!-- raw HTML omitted --></p>\n",
				"content_text": "1940s and 50s industry is neat, OK?\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/07/women-plane.jpg\" alt=\"women_plane.jpg\" border=\"0\" width=\"480\" height=\"388\" /></div>\n\nVia <a href=\"http://ffffound.com/image/821cdddd2ed881aca7d1eae562e3d817a3816afa\">ffffound!</a>\n",
				"date_published": "2008-08-02T07:48:40-07:00",
				"url": "https://therealadam.com/2008/08/02/women-working-on.html",
				"tags": ["Curated","Expanded ideas","history"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/01/some-grieg.html",
				"title": "Some Grieg",
				"content_html": "<p>Please to enjoy, Grieg&rsquo;s Piano Concerto in A minor. Brought to you by Artur Rubinstein and the London Symphony.</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->The rest of the first movement<!-- raw HTML omitted -->, <!-- raw HTML omitted -->the second movement<!-- raw HTML omitted --> and <!-- raw HTML omitted -->third movement<!-- raw HTML omitted -->, also for your enjoyment.</p>\n",
				"content_text": "Please to enjoy, Grieg's Piano Concerto in A minor. Brought to you by Artur Rubinstein and the London Symphony.\n\n<div class=\"center\">\n[youtube=http://www.youtube.com/watch?v=Dxzpy1b1_BY&amp;hl=en&amp;fs=1&amp;rel=0&amp;color1=0x3a3a3a&amp;color2=0x999999]\n</div>\n\n<a href=\"http://youtube.com/watch?v=RZfkGCTMTyo&amp;feature=related\">The rest of the first movement</a>, <a href=\"http://youtube.com/watch?v=3CJDZTUnhPA&amp;feature=related\">the second movement</a> and <a href=\"http://youtube.com/watch?v=ZDZlOfpa36I&amp;feature=related\">third movement</a>, also for your enjoyment.\n",
				"date_published": "2008-08-01T20:38:14-07:00",
				"url": "https://therealadam.com/2008/08/01/some-grieg.html",
				"tags": ["Music","Pop Culture","Curated","grieg","piano"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/08/01/thor-and-agility.html",
				"title": "Thor and agility",
				"content_html": "<p>Watching <!-- raw HTML omitted -->Thor<!-- raw HTML omitted --> at his agility classes is really interesting. It&rsquo;s fun to see the dogs constantly looking up to their person to see what jump or obstacle to go to next. Of course, the class is half dog training and half people training.</p>\n<p>I&rsquo;ve noticed a distinct change in Thor&rsquo;s obediance since he started taking the classes. He&rsquo;s more receptive to good boy/bad boy commands now. And, of course, he&rsquo;ll do anything for food!</p>\n<p><!-- raw HTML omitted -->Here&rsquo;s some video I took of Courtney and Thor doing their agility thing.<!-- raw HTML omitted --></p>\n",
				"content_text": "Watching <a href=\"http://flickr.com/photos/courtney/2696650853/\">Thor</a> at his agility classes is really interesting. It's fun to see the dogs constantly looking up to their person to see what jump or obstacle to go to next. Of course, the class is half dog training and half people training.\n\nI've noticed a distinct change in Thor's obediance since he started taking the classes. He's more receptive to good boy/bad boy commands now. And, of course, he'll do anything for food!\n\n<a href=\"http://flickr.com/photos/courtney/2721708900/\">Here's some video I took of Courtney and Thor doing their agility thing.</a>\n",
				"date_published": "2008-08-01T07:28:40-07:00",
				"url": "https://therealadam.com/2008/08/01/thor-and-agility.html",
				"tags": ["Curated","Dogs, cats, et cetera","life:dog-agility","thor"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/31/house-on-water.html",
				"title": "House on water",
				"content_html": "<p>I wouldn&rsquo;t mind living on the water like this.</p>\n<!-- raw HTML omitted -->\n<p>Via <!-- raw HTML omitted -->ffffound!<!-- raw HTML omitted --></p>\n",
				"content_text": "I wouldn't mind living on the water like this.\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/07/ocean-house.jpg\" alt=\"ocean_house.jpg\" border=\"0\" width=\"480\" height=\"322\" /></div>\n\nVia <a href=\"http://ffffound.com/image/140038deb65ab20d0c5b26a265da0d95d3de78d3\">ffffound!</a>\n",
				"date_published": "2008-07-31T05:44:56-07:00",
				"url": "https://therealadam.com/2008/07/31/house-on-water.html",
				"tags": ["Curated","awesome","architecture"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/30/http-wrappers-with.html",
				"title": "HTTP wrappers with ease",
				"content_html": "<p><!-- raw HTML omitted -->httparty<!-- raw HTML omitted --> looks really cool. It&rsquo;s a little library for making writing tiny REST clients easier. From the examples (edited for length):</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Great job, <!-- raw HTML omitted -->John<!-- raw HTML omitted -->!</p>\n",
				"content_text": "<a href=\"http://github.com/jnunemaker/httparty/tree/master\">httparty</a> looks really cool. It's a little library for making writing tiny REST clients easier. From the examples (edited for length):\n\n<pre>\nclass Twitter\n  include HTTParty\n  base_uri 'twitter.com'\n\n  def initialize(user, pass)\n    self.class.basic_auth user, pass\n  end\n\n  # which can be :friends, :user or :public\n  # options[:query] can be things like since, since_id, count, etc.\n  def timeline(which=:friends, options={})\n    self.class.get(\"/statuses/#{which}_timeline.xml\", options)['statuses'].map { |s| s.to_struct }\n  end\nend\n\ntwitter = Twitter.new('bob@example.com', 'bobtime')\n\ntwitter.timeline.each do |s|\n  puts s.user.name, s.text, \"#{s.created_at} #{s.id}\", ''\nend\n</pre>\n\nGreat job, <a href=\"http://railstips.org/\">John</a>!\n",
				"date_published": "2008-07-30T06:26:29-07:00",
				"url": "https://therealadam.com/2008/07/30/http-wrappers-with.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/29/agility-course-made.html",
				"title": "Agility course made of people",
				"content_html": "<p>Wow.</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Wow.\n\n<div class=\"center\">\n[youtube=[www.youtube.com/watch](http://www.youtube.com/watch?v=bxLX63qqNyg&hl=en&fs=1&rel=0&color1=0x3a3a3a&color2=0x999999])\n</div>\n",
				"date_published": "2008-07-29T21:23:48-07:00",
				"url": "https://therealadam.com/2008/07/29/agility-course-made.html",
				"tags": ["Curated","Dogs, cats, et cetera","life:dog-agility"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/29/community-antipatterns.html",
				"title": "Community anti-patterns",
				"content_html": "<p>You&rsquo;ll have to pardon me for linking to <!-- raw HTML omitted -->Ted Leung<!-- raw HTML omitted --> twice in short order, but the man is good peoples. This time I&rsquo;d like to draw your attention to his presentation from OSCON on <!-- raw HTML omitted -->Open Source Community Antipatterns<!-- raw HTML omitted -->.</p>\n<p>Ted&rsquo;s talk is full of great observations from his time at OSAF and his ongoing work with the Apache project. Keep in mind that the presentation is on <em>anti-patterns</em>, so most of the slides describe what you <em>don&rsquo;t</em> want to do.</p>\n",
				"content_text": "You'll have to pardon me for linking to <a href=\"http://www.sauria.com//blog/\">Ted Leung</a> twice in short order, but the man is good peoples. This time I'd like to draw your attention to his presentation from OSCON on <a href=\"http://assets.en.oreilly.com/1/event/12/Open%20Source%20Community%20Antipatterns%20Presentation.pdf\">Open Source Community Antipatterns</a>.\n\nTed's talk is full of great observations from his time at OSAF and his ongoing work with the Apache project. Keep in mind that the presentation is on _anti-patterns_, so most of the slides describe what you *don't* want to do.\n",
				"date_published": "2008-07-29T20:19:21-07:00",
				"url": "https://therealadam.com/2008/07/29/community-antipatterns.html",
				"tags": ["Curated","peoplehacks","oscon2008"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/29/its-a-data.html",
				"title": "Its a Data. Base.",
				"content_html": "<p>Say it with me. Data. Base. I knew you could!</p>\n<!-- raw HTML omitted -->\n<p>Via <!-- raw HTML omitted -->Square America<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Say it with me. Data. Base. I knew you could!\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/07/database.jpg\" alt=\"database.jpg\" border=\"0\" width=\"500\" height=\"330\" /></div>\n\nVia <a href=\"http://www.squareamerica.com/ib.htm\">Square America</a>.\n",
				"date_published": "2008-07-29T06:06:49-07:00",
				"url": "https://therealadam.com/2008/07/29/its-a-data.html",
				"tags": ["Curated","Nerdery","history"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/29/not-your-fathers.html",
				"title": "Not your father\u0026#39;s IDE",
				"content_html": "<p><!-- raw HTML omitted -->IDE&rsquo;s and Dynamic Languages<!-- raw HTML omitted -->. Ted Leung&rsquo;s got some useful and insightful things to say about dynamic languages, history, IDEs and the people who use them. While I still think <em>many</em> of the features in a modern IDE are crutches, I hope that what Ted is alluding to becomes a reality.</p>\n",
				"content_text": "<a href=\"http://www.sauria.com/blog/2008/07/20/ides-and-dynamic-languages/\">IDE's and Dynamic Languages</a>. Ted Leung's got some useful and insightful things to say about dynamic languages, history, IDEs and the people who use them. While I still think _many_ of the features in a modern IDE are crutches, I hope that what Ted is alluding to becomes a reality.\n",
				"date_published": "2008-07-29T01:48:49-07:00",
				"url": "https://therealadam.com/2008/07/29/not-your-fathers.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/28/golf-fail.html",
				"title": "Golf fail",
				"content_html": "<p>My golf game is hurting these days. Since I&rsquo;ve become so familiar with my shots drifting off to the right, I figured I&rsquo;d finally figure out the correct term for these sorts of shots. Thusly, an illustration to teach myself:</p>\n<!-- raw HTML omitted -->\n<p>Handsome penance, isn&rsquo;t it?</p>\n",
				"content_text": "My golf game is hurting these days. Since I've become so familiar with my shots drifting off to the right, I figured I'd finally figure out the correct term for these sorts of shots. Thusly, an illustration to teach myself:\n\n<div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/07/badswing.jpg\" alt=\"BadSwing.jpg\" border=\"0\" width=\"500\" height=\"647\" /></div>\n\nHandsome penance, isn't it?\n",
				"date_published": "2008-07-28T20:35:42-07:00",
				"url": "https://therealadam.com/2008/07/28/golf-fail.html",
				"tags": ["Curated","golf","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/28/failings-of-the.html",
				"title": "Failings of the expert\u0026#39;s mind",
				"content_html": "<p><!-- raw HTML omitted -->Why Analytical Applications Fail<!-- raw HTML omitted -->. Ostensibly, this article is about analytics applications that expect users to know exactly what they want before they start. But to me, the underlying story is of developers who get caught up in their domain and build an application <em>for themselves</em> instead of <em>for their users</em>.</p>\n<p>We&rsquo;ve all fallen into this trap. Whenever a new person joins my team, I always try not to squander their <!-- raw HTML omitted -->beginner&rsquo;s mind<!-- raw HTML omitted -->. Fresh team members can often point out places where the interaction design or domain model need to soften up for those who haven&rsquo;t lived in the project for months. That said, it requires patience and humility on the part of the existing team.</p>\n",
				"content_text": "<a href=\"http://www.juiceanalytics.com/writing/why-analytical-applications-fail/\">Why Analytical Applications Fail</a>. Ostensibly, this article is about analytics applications that expect users to know exactly what they want before they start. But to me, the underlying story is of developers who get caught up in their domain and build an application _for themselves_ instead of _for their users_.\n\nWe've all fallen into this trap. Whenever a new person joins my team, I always try not to squander their <a href=\"http://en.wikipedia.org/wiki/Shoshin\">beginner's mind</a>. Fresh team members can often point out places where the interaction design or domain model need to soften up for those who haven't lived in the project for months. That said, it requires patience and humility on the part of the existing team.\n",
				"date_published": "2008-07-28T07:06:16-07:00",
				"url": "https://therealadam.com/2008/07/28/failings-of-the.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/27/practical-language-kleptomania.html",
				"title": "Practical language kleptomania",
				"content_html": "<p><!-- raw HTML omitted -->Introducing Functor<!-- raw HTML omitted --> - another library for implementing multiple dispatch/pattern matching in Ruby. This is a great example of <!-- raw HTML omitted -->what I talked about at OSCON<!-- raw HTML omitted -->: stealing ideas and applying them to your daily work. I&rsquo;m particularly impressed with how Dan has applied it to something that isn&rsquo;t a recursive mathematical function - check out the example of using in a view class.</p>\n",
				"content_text": "<a href=\"http://dev.zeraweb.com/introducing-functor\">Introducing Functor</a> - another library for implementing multiple dispatch/pattern matching in Ruby. This is a great example of <a href=\"http://therealadam.com/archive/2008/07/25/what-has-ruby-done-for-you-lately/\">what I talked about at OSCON</a>: stealing ideas and applying them to your daily work. I'm particularly impressed with how Dan has applied it to something that isn't a recursive mathematical function - check out the example of using in a view class.\n",
				"date_published": "2008-07-27T20:21:23-07:00",
				"url": "https://therealadam.com/2008/07/27/practical-language-kleptomania.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/26/gitreporevseach.html",
				"title": "git.repo.revs.each(...)",
				"content_html": "<p><!-- raw HTML omitted -->Git Iterator<!-- raw HTML omitted --> - a neat little gizmo for running code against every revision in your Git repository. Yielded <!-- raw HTML omitted -->this chart<!-- raw HTML omitted --> showing the growth of the Rails code.</p>\n",
				"content_text": "<a href=\"http://www.lixo.org/archives/2008/07/22/git-iterator/\">Git Iterator</a> - a neat little gizmo for running code against every revision in your Git repository. Yielded <a href=\"http://spreadsheets.google.com/pub?key=pZ_qxWU0Fx8l2aH906srLJQ&amp;oid=2&amp;output=image\">this chart</a> showing the growth of the Rails code.\n",
				"date_published": "2008-07-26T09:40:32-07:00",
				"url": "https://therealadam.com/2008/07/26/gitreporevseach.html",
				"tags": ["Curated","git"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/25/what-has-ruby.html",
				"title": "What Has Ruby Done For You Lately?",
				"content_html": "<p>When I go to speak about Ruby at non-Ruby groups, my go-to schtick is only mildly subversive. Sure, I tell them that Ruby is a fantastic language that will make them a better programmer. But, I don&rsquo;t expect them to switch to Ruby right away. Instead, I lead them down the path of borrowing ideas from Ruby and using them in their day-to-day coding, no matter what language they use.</p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p>This week at OSCON 2008, I applied the same tact, but I did it on Ruby programmers. See, there are tons of great ideas in languages like Haskell, Io and Erlang. Some translate really well to Ruby and some don&rsquo;t. But they&rsquo;ll all twist your brain around in interesting ways.</p>\n<p>That&rsquo;s the idea. Here are the goods: <!-- raw HTML omitted -->just the slides<!-- raw HTML omitted -->, <!-- raw HTML omitted -->the code and the slides<!-- raw HTML omitted -->. Enjoy!</p>\n",
				"content_text": "When I go to speak about Ruby at non-Ruby groups, my go-to schtick is only mildly subversive. Sure, I tell them that Ruby is a fantastic language that will make them a better programmer. But, I don't expect them to switch to Ruby right away. Instead, I lead them down the path of borrowing ideas from Ruby and using them in their day-to-day coding, no matter what language they use.\n\n<a href=\"http://therealadam.com/wp-content/uploads/2008/07/whathasrubydoneforyoulately.pdf\"><div class=\"center\"><img src=\"http://therealadam.com/wp-content/uploads/2008/07/whathasrubydoneforyoulately.jpg\" alt=\"WhatHasRubyDoneForYouLately.jpg\" border=\"0\" width=\"500\" height=\"134\" /></div></a>\n\nThis week at OSCON 2008, I applied the same tact, but I did it on Ruby programmers. See, there are tons of great ideas in languages like Haskell, Io and Erlang. Some translate really well to Ruby and some don't. But they'll all twist your brain around in interesting ways.\n\nThat's the idea. Here are the goods: <a href=\"http://therealadam.com/wp-content/uploads/2008/07/whathasrubydoneforyoulately.pdf\">just the slides</a>, <a href=\"http://therealadam.com/wordpress/wp-content/uploads/2008/07/whathasrubydoneforyoulately.zip\">the code and the slides</a>. Enjoy!\n",
				"date_published": "2008-07-25T19:24:14-07:00",
				"url": "https://therealadam.com/2008/07/25/what-has-ruby.html",
				"tags": ["ruby","Events","erlang","haskell","io","oscon2008"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/25/manipulating-windows-from.html",
				"title": "Manipulating windows from afar",
				"content_html": "<p>h2. Adam&rsquo;s 9th Law Of Presenting</p>\n<p>When you connect the projector to your laptop, the menubar and windows you want to manipulate will always appear on the giant screen behind you, where you can&rsquo;t see them and everyone can see how much you suck at using a computer.</p>\n",
				"content_text": "h2. Adam's 9th Law Of Presenting\n\nWhen you connect the projector to your laptop, the menubar and windows you want to manipulate will always appear on the giant screen behind you, where you can't see them and everyone can see how much you suck at using a computer.\n",
				"date_published": "2008-07-25T12:43:25-07:00",
				"url": "https://therealadam.com/2008/07/25/manipulating-windows-from.html",
				"tags": ["Curated","Expanded ideas","humor","presenting"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/07/25/more-modules-please.html",
				"title": "More modules, please",
				"content_html": "<p><!-- raw HTML omitted -->Jay Fields' Thoughts: Ruby: Underuse of Modules<!-- raw HTML omitted -->. Modules are your best friend, ya&rsquo;ll. Use &lsquo;em.</p>\n",
				"content_text": "<a href=\"http://blog.jayfields.com/2008/07/ruby-underuse-of-modules.html\">Jay Fields' Thoughts: Ruby: Underuse of Modules</a>. Modules are your best friend, ya'll. Use 'em.\n",
				"date_published": "2008-07-25T09:28:28-07:00",
				"url": "https://therealadam.com/2008/07/25/more-modules-please.html",
				"tags": ["Curated","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/27/congestion-and-decongestion.html",
				"title": "Congestion and decongestion",
				"content_html": "<p>Two really awesome maps: <!-- raw HTML omitted -->National Traffic Scorecard<!-- raw HTML omitted --> and <!-- raw HTML omitted -->undersea internet cables<!-- raw HTML omitted --> (via <!-- raw HTML omitted -->Coudal<!-- raw HTML omitted -->).</p>\n",
				"content_text": "Two really awesome maps: <a href=\"http://benfry.com/writing/archives/137\">National Traffic Scorecard</a> and <a href=\"http://image.guardian.co.uk/sys-images/Technology/Pix/pictures/2008/02/01/SeaCableHi.jpg\">undersea internet cables</a> (via <a href=\"http://coudal.com/\">Coudal</a>).\n",
				"date_published": "2008-06-27T06:55:44-07:00",
				"url": "https://therealadam.com/2008/06/27/congestion-and-decongestion.html",
				"tags": ["Curated","Nerdery","maps"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/26/you-say-simple.html",
				"title": "You say simple, I say simple",
				"content_html": "<p><!-- raw HTML omitted -->The Simplest Thing That Could Possibly Work<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Jay Fields is Sage.</p>\n",
				"content_text": "<a href=\"http://blog.jayfields.com/2008/06/simplest-thing-that-could-possibly-work.html\">The Simplest Thing That Could Possibly Work</a>:\n\n<blockquote>\nAt first the developer said \"this is where we're going to disagree on the simplest thing that could possibly work.\" He argued that we were backing ourselves into a corner by not following the pattern; therefore, what I was suggesting couldn't possibly work. I took a few moments to consider his point of view. I concluded that he might be right, but deleting 60% of the code we were currently working with meant that the remaining 40% was so small that if we did need to rewrite in the future it would actually be easier than the amount of effort required to maintain the prematurely put in place architecture.\n</blockquote>\n\nJay Fields is Sage.\n",
				"date_published": "2008-06-26T16:04:09-07:00",
				"url": "https://therealadam.com/2008/06/26/you-say-simple.html",
				"tags": ["Curated","pragprog"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/14/three-new-rules.html",
				"title": "Three new rules on golf",
				"content_html": "<p>Yesterday I decided to go off and play a little golf. Somehow, I had the most awesomest round of golf in my life. Luckily, Courtney came along and was there to document part of this now-legendary round of golf:</p>\n<!-- raw HTML omitted -->\n<p>Really, I promise I&rsquo;m not that guy who drags his wife to the golf course every weekend. But I might turn into that guy because today I played without her, like a mere mortal. Or maybe it was that I opted to walk 18 holes in the heat.</p>\n<p>So now I have three new golf rules:</p>\n<ul>\n<li>No more walking 18 holes in June, July or August</li>\n<li>That&rsquo;s no drainage ditch, its a sewage ditch</li>\n<li>Stop thinking</li>\n</ul>\n<p>So there you go. My semi-annual post about golf!</p>\n",
				"content_text": "Yesterday I decided to go off and play a little golf. Somehow, I had the most awesomest round of golf in my life. Luckily, Courtney came along and was there to document part of this now-legendary round of golf:\n\n<div align=\"center\">\n<a href=\"http://flickr.com/photos/courtney/sets/72157605603403741/with/2577120756/\"><img src=\"http://farm4.static.flickr.com/3039/2577120756_cba8eda039_d.jpg\" alt=\"Me hitting the ball\" /></a>\n</div>\n\nReally, I promise I'm not that guy who drags his wife to the golf course every weekend. But I might turn into that guy because today I played without her, like a mere mortal. Or maybe it was that I opted to walk 18 holes in the heat.\n\nSo now I have three new golf rules:\n\n* No more walking 18 holes in June, July or August\n* That's no drainage ditch, its a sewage ditch\n* Stop thinking\n\nSo there you go. My semi-annual post about golf!\n",
				"date_published": "2008-06-14T21:22:43-07:00",
				"url": "https://therealadam.com/2008/06/14/three-new-rules.html",
				"tags": ["golf","Sportsball!"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/10/why-is-oil.html",
				"title": "Why is oil so damn expensive?",
				"content_html": "<p>Great article in <!-- raw HTML omitted -->The Economist<!-- raw HTML omitted --> on oil prices and what&rsquo;s causing their painful rise. <!-- raw HTML omitted -->Double, double, oil and trouble | Economist.com<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>In short, nothing related to oil consumption changes quickly. It takes a decade for consumers to fully adjust to prices and the same amount of time for producers to field new technology and start mining new discoveries.</p>\n<p>In the mean time, <!-- raw HTML omitted -->this little scooter<!-- raw HTML omitted --> is looking better and better!</p>\n",
				"content_text": "Great article in <em>The Economist</em> on oil prices and what's causing their painful rise. <a href=\"http://www.economist.com/displayStory.cfm?story_id=11453090&amp;fsrc=nwlgafree\">Double, double, oil and trouble | Economist.com</a>:\n\n<blockquote>\nIn the short run, neither demand for nor supply of oil is very elastic. It takes time for people to replace their old guzzlers with more fuel-efficient cars, or to switch to jobs with shorter commutes, or to move closer to public transport. By the same token, it can take ten years or more to develop an oilfield after its discovery&mdash;and that does not include the time firms need to bolster their exploration units.\n</blockquote>\n\nIn short, nothing related to oil consumption changes quickly. It takes a decade for consumers to fully adjust to prices and the same amount of time for producers to field new technology and start mining new discoveries.\n\nIn the mean time, <a href=\"http://powersports.honda.com/scooters/model.asp?ModelName=Metropolitan&amp;ModelYear=2008&amp;ModelId=CHF508\" title=\"Honda Metropolitan\">this little scooter</a> is looking better and better!\n",
				"date_published": "2008-06-10T08:13:41-07:00",
				"url": "https://therealadam.com/2008/06/10/why-is-oil.html",
				"tags": ["Curated","The System","Erudition","economics"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/09/the-joy-of.html",
				"title": "The Joy of Science",
				"content_html": "<p><!-- raw HTML omitted -->Put a Little Science in Your Life<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Since my run in with Bachelor of Science-grade Physics, I&rsquo;ve considered myself someone who sucks at science. However, I suppose by Brian Greene&rsquo;s definition, I am a consummate scientist. I really enjoy diving into a deep subject (economics, linguistics, etc.) and trying to figure out what makes it tick. Its a fun way to go about life.</p>\n<!-- raw HTML omitted -->\n<p>A hearty &quot;Amen!&quot; here. So many topics seem intimidating to the neophyte. &quot;You can&rsquo;t do this until you&rsquo;ve learned this, that and the other.&quot; Stacked knowledge as barrier to entry is a total bummer.</p>\n<p>I think something immersive is more rewarding. They say the best way to learn a foreign language is to surround yourself in it. I think this is true of any endeavor that, at some level, rewires your brain.</p>\n",
				"content_text": "<a href=\"http://www.nytimes.com/2008/06/01/opinion/01greene.html?_r=2&amp;pagewanted=print&amp;oref=slogin&amp;oref=slogin\">Put a Little Science in Your Life</a>:\n\n<blockquote>\nScience is a way of life. Science is a perspective. Science is the process that takes us from confusion to understanding in a manner that&rsquo;s precise, predictive and reliable &mdash; a transformation, for those lucky enough to experience it, that is empowering and emotional. To be able to think through and grasp explanations&hellip;\n</blockquote>\n\nSince my run in with Bachelor of Science-grade Physics, I've considered myself someone who sucks at science. However, I suppose by Brian Greene's definition, I am a consummate scientist. I really enjoy diving into a deep subject (economics, linguistics, etc.) and trying to figure out what makes it tick. Its a fun way to go about life.\n\n<blockquote>\nAt the root of this pedagogical approach is a firm belief in the vertical nature of science: you must master A before moving on to B. When A happened a few hundred years ago, it&rsquo;s a long climb to the modern era. Certainly, when it comes to teaching the technicalities &mdash; solving this equation, balancing that reaction, grasping the discrete parts of the cell &mdash; the verticality of science is unassailable.\n</blockquote>\n\nA hearty &quot;Amen!&quot; here. So many topics seem intimidating to the neophyte. &quot;You can't do this until you've learned this, that and the other.&quot; Stacked knowledge as barrier to entry is a total bummer.\n\nI think something immersive is more rewarding. They say the best way to learn a foreign language is to surround yourself in it. I think this is true of any endeavor that, at some level, rewires your brain.\n",
				"date_published": "2008-06-09T14:13:26-07:00",
				"url": "https://therealadam.com/2008/06/09/the-joy-of.html",
				"tags": ["Curated","The System","Erudition","science"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/08/yurii-rashkovskiis-blog.html",
				"title": "Yurii Rashkovskii\u0026#39;s Blog: Top 10 Reasons to Avoid Document Databases FUD",
				"content_html": "<p><!-- raw HTML omitted -->Yurii Rashkovskii&rsquo;s Blog: Top 10 Reasons to Avoid Document Databases FUD<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve come upon this sort of idea several time recently (and the above was written a couple months ago). I&rsquo;m warming up to the idea. Without piles of cash and able systems-type folks, scaling databases out is a really nasty problem. Even then, my reading is there are definite bounds for how far you can go.</p>\n<p>Assembling datasets on the more easily scaled app server is appealing. It sounds fun (hey, real programming!) and is interesting to think about. But I wonder if it leads to having to figure out consistency in your application. From where I sit, its the hardest part of <!-- raw HTML omitted -->ACID<!-- raw HTML omitted -->  to reason with.</p>\n",
				"content_text": "<a href=\"http://rashkovskii.com/articles/2008/4/26/top-10-reasons-to-avoid-document-databases-fud\">Yurii Rashkovskii's Blog: Top 10 Reasons to Avoid Document Databases FUD</a>:\n\n<blockquote>\nAnd&hellip; you said &ldquo;relational&rdquo;? Facebook and others do a lot of denormalization, they don&rsquo;t ever use JOIN, they&rsquo;d rather do several consequent requests and build intermediate results on a webserver (when you have 20 times more webservers than DBs it&rsquo;s obviously good to move some load there). They treat good old MySQL as object storage with very fast B+ tree indexes. Finally, the resulting database is not a relational one. One thousand of MySQLs is just a distributed object storage with simple fast indexes and a bunch of hand-written code in php/ruby/python/whatever around it.\n</blockquote>\n\nI've come upon this sort of idea several time recently (and the above was written a couple months ago). I'm warming up to the idea. Without piles of cash and able systems-type folks, scaling databases out is a really nasty problem. Even then, my reading is there are definite bounds for how far you can go.\n\nAssembling datasets on the more easily scaled app server is appealing. It sounds fun (hey, real programming!) and is interesting to think about. But I wonder if it leads to having to figure out consistency in your application. From where I sit, its the hardest part of <a href=\"http://en.wikipedia.org/wiki/ACID\">ACID</a>  to reason with.\n",
				"date_published": "2008-06-08T09:29:04-07:00",
				"url": "https://therealadam.com/2008/06/08/yurii-rashkovskiis-blog.html",
				"tags": ["Curated","databases","scaling"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/07/microsofts-spin-on.html",
				"title": "Microsoft\u0026#039;s spin on memcached",
				"content_html": "<p><!-- raw HTML omitted -->Microsoft cargo cults memcached! <!-- raw HTML omitted -->, <!-- raw HTML omitted -->via Simon Willison<!-- raw HTML omitted -->.</p>\n<p>Back when I worked in a semi-.NET shop, we needed to cache some pretty expensive operations somewhere. In memory would have been ideal, but we had no way to coordinate between application servers. It ended up going in the database, because that made everyone feel safe. In hindsight, it probably wasn&rsquo;t the greatest idea.</p>\n<p>Long story short, my internal clock that tells me how long it will take Microsoft to clone a forehead-slappingly-obvious-idea is well set.</p>\n",
				"content_text": "<a href=\"http://www.25hoursaday.com/weblog/2008/06/06/VelocityADistributedInMemoryCacheFromMicrosoft.aspx\">Microsoft cargo cults memcached! </a>, <a href=\"http://simonwillison.net/2008/Jun/6/dare/#comments\">via Simon Willison</a>.\n\nBack when I worked in a semi-.NET shop, we needed to cache some pretty expensive operations somewhere. In memory would have been ideal, but we had no way to coordinate between application servers. It ended up going in the database, because that made everyone feel safe. In hindsight, it probably wasn't the greatest idea.\n\nLong story short, my internal clock that tells me how long it will take Microsoft to clone a forehead-slappingly-obvious-idea is well set.\n",
				"date_published": "2008-06-07T11:15:49-07:00",
				"url": "https://therealadam.com/2008/06/07/microsofts-spin-on.html",
				"tags": ["Curated","microsoft","people:simon-willison"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/06/fake-rails-environment.html",
				"title": "Fake Rails environment",
				"content_html": "<p>For testing some bits inside of ActiveRecord proper.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Evil and fun. Uses <code>Class.new</code>, my favorite Ruby method.</p>\n<p><!-- raw HTML omitted -->Muahahaha.<!-- raw HTML omitted --></p>\n",
				"content_text": "For testing some bits inside of ActiveRecord proper.\n\n<pre>\nmodule Rails\n  def self.env\n    o = Class.new do\n      def production?\n        true\n      end\n    end\n    o.new\n  end\nend\n</pre>\n\nEvil and fun. Uses `Class.new`, my favorite Ruby method.\n\n<strong>Muahahaha.</strong>\n",
				"date_published": "2008-06-06T12:40:58-07:00",
				"url": "https://therealadam.com/2008/06/06/fake-rails-environment.html",
				"tags": ["Curated","ruby","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/06/05/oh-the-fail.html",
				"title": "Oh, The Fail I've Known",
				"content_html": "<p>Please to enjoy my presentation for RailsConf 2008: <!-- raw HTML omitted -->Oh, The Fail I&rsquo;ve Known (PDF)<!-- raw HTML omitted -->.</p>\n<!-- raw HTML omitted -->\n<p>Its on the things that aren&rsquo;t normally covered in books and websites programmers read. The things that you really need to know if you&rsquo;re going to achieve <em>truly awesome</em> developer status.</p>\n<p>Obviously I think they&rsquo;re really important topics. Digging into them has really helped me as a software developer. I hope its helpful to you too.</p>\n<!-- raw HTML omitted -->\n<p>Thanks to everyone who caught me afterwards or emailed to say they enjoyed the talk. And of course, if you enjoyed <!-- raw HTML omitted -->those videos<!-- raw HTML omitted -->, kudos to you as well!</p>\n",
				"content_text": "Please to enjoy my presentation for RailsConf 2008: <a href=\"http://therealadam.com/presentations/OhTheFail.pdf\">Oh, The Fail I've Known (PDF)</a>.\n\n<div style=\"width:425px;text-align:left;\" id=\"__ss_450650\"><div style=\"font-size:11px;font-family:tahoma,arial;height:26px;padding-top:2px;\"><a href=\"http://www.slideshare.net/?src=embed\"><img src=\"http://static.slideshare.net/swf/logo_embd.png\" style=\"border:0 none;margin-bottom:-5px;\"></a> | <a href=\"http://www.slideshare.net/therealadam/oh-the-fail-ive-known?src=embed\" title=\"View Oh The Fail I've Known on SlideShare\">View</a> | <a href=\"http://www.slideshare.net/upload?src=embed\">Upload your own</a></div></div>\n\nIts on the things that aren't normally covered in books and websites programmers read. The things that you really need to know if you're going to achieve _truly awesome_ developer status.\n\nObviously I think they're really important topics. Digging into them has really helped me as a software developer. I hope its helpful to you too.\n\n<hr />\n\nThanks to everyone who caught me afterwards or emailed to say they enjoyed the talk. And of course, if you enjoyed <a href=\"http://blog.fiveruns.com/2008/6/3/adam-keys-and-railsenvy-mvc-video\">those videos</a>, kudos to you as well!\n",
				"date_published": "2008-06-05T21:02:24-07:00",
				"url": "https://therealadam.com/2008/06/05/oh-the-fail.html",
				"tags": ["Events","railsconf2008"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/27/see-me-at.html",
				"title": "See me at RailsConf \u0026#39;08",
				"content_html": "<p>As hordes of Ruby and Rails folks begin the annual migration to Portland for <!-- raw HTML omitted -->RailsConf<!-- raw HTML omitted -->, I thought I&rsquo;d let you know how to find me there this year:</p>\n<ul>\n<li>I&rsquo;ll join my <!-- raw HTML omitted -->FiveRuns<!-- raw HTML omitted --> compatriots (and the epic <!-- raw HTML omitted -->Rich Kilmer<!-- raw HTML omitted -->) for <!-- raw HTML omitted -->Two Apps, Four Daemons and a Gazillion Clients<!-- raw HTML omitted -->, a panel on <!-- raw HTML omitted -->The Big Rewrite<!-- raw HTML omitted --> of FiveRuns Manage. Join us at 11:45 AM on Friday.</li>\n<li>There&rsquo;s a book signing for all the contributors to <!-- raw HTML omitted -->Advanced Rails Recipes<!-- raw HTML omitted --> Friday at 12:35 PM in the Powell&rsquo;s booth. Come meet me and the other folks who brought you the latest in Rails recipes.</li>\n<li>I&rsquo;m interviewing the inimitable <!-- raw HTML omitted -->Geoffrey Grossenbach<!-- raw HTML omitted --> on Saturday at 3:40 PM in the Heroku booth. Stop by to enjoy the hijinks!</li>\n<li>Rounding everything off, my presentation, <!-- raw HTML omitted -->Oh, The Fail I&rsquo;ve Known<!-- raw HTML omitted --> is at 11:45 AM on Sunday. Come learn from my considerable past mistakes.</li>\n</ul>\n<p>That rounds out the conference activities. But I&rsquo;d be remiss if I didn&rsquo;t inform you that <!-- raw HTML omitted -->FiveRuns would like to buy you a drink<!-- raw HTML omitted --> or two Friday night at Jimmy Maks from 6 to 8 PM. Please to be joining me there!</p>\n<p>What I am perhaps most excited about is the <!-- raw HTML omitted -->RailsEnvy<!-- raw HTML omitted --> videos that will premiere this weekend. You see, Jason and Gregg were kind enough to invite me to join them in making the funnies this year. Making them was a blast! I&rsquo;ve seen the finished product and, in my completely biased opinion, I think you&rsquo;re going to like it.</p>\n<!-- raw HTML omitted -->\n<p>Of course, I&rsquo;d love to chat with <em>you</em> (yes, you) at any point in the conference. So if you see me (and <!-- raw HTML omitted -->I will probably stand out<!-- raw HTML omitted -->), come say &ldquo;Hi!&rdquo; I&rsquo;m hoping to have something interesting for those that do&hellip;</p>\n",
				"content_text": "As hordes of Ruby and Rails folks begin the annual migration to Portland for <a href=\"http://en.oreilly.com/rails2008/public/content/home\">RailsConf</a>, I thought I'd let you know how to find me there this year:\n\n* I'll join my <a href=\"http://fiveruns.com/\">FiveRuns</a> compatriots (and the epic <a href=\"http://richkilmer.blogs.com/\">Rich Kilmer</a>) for <a href=\"http://en.oreilly.com/rails2008/public/schedule/detail/4344\">Two Apps, Four Daemons and a Gazillion Clients</a>, a panel on <a href=\"http://chadfowler.com/2006/12/27/the-big-rewrite\">The Big Rewrite</a> of FiveRuns Manage. Join us at 11:45 AM on Friday.\n* There's a book signing for all the contributors to <a href=\"http://pragprog.com/titles/fr_arr/advanced-rails-recipes\">Advanced Rails Recipes</a> Friday at 12:35 PM in the Powell's booth. Come meet me and the other folks who brought you the latest in Rails recipes.\n* I'm interviewing the inimitable <a href=\"http://nubyonrails.com/\">Geoffrey Grossenbach</a> on Saturday at 3:40 PM in the Heroku booth. Stop by to enjoy the hijinks!\n* Rounding everything off, my presentation, <a href=\"http://en.oreilly.com/rails2008/public/schedule/detail/1952\">Oh, The Fail I've Known</a> is at 11:45 AM on Sunday. Come learn from my considerable past mistakes.\n\nThat rounds out the conference activities. But I'd be remiss if I didn't inform you that <a href=\"http://blog.fiveruns.com/2008/5/20/fiveruns-happy-hour-at-railsconf-2008\">FiveRuns would like to buy you a drink</a> or two Friday night at Jimmy Maks from 6 to 8 PM. Please to be joining me there!\n\nWhat I am perhaps most excited about is the <a href=\"http://railsenvy.com/\">RailsEnvy</a> videos that will premiere this weekend. You see, Jason and Gregg were kind enough to invite me to join them in making the funnies this year. Making them was a blast! I've seen the finished product and, in my completely biased opinion, I think you're going to like it.\n\n<hr />\n\nOf course, I'd love to chat with *you* (yes, you) at any point in the conference. So if you see me (and <a href=\"http://flickr.com/photos/courtney/26554026/\">I will probably stand out</a>), come say \"Hi!\" I'm hoping to have something interesting for those that do...\n",
				"date_published": "2008-05-27T13:34:41-07:00",
				"url": "https://therealadam.com/2008/05/27/see-me-at.html",
				"tags": ["ruby","rails","fiveruns","Events","hijinks"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/25/pinky-and-the.html",
				"title": "Pinky and the LOLdog",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<div class=\"center\">\n<a href=\"http://ihasahotdog.com/2008/05/22/funny-dog-pictures-try-to-take-over-the-world/\"><img class=\"mine_1181082\" src=\"http://ihasahotdog.wordpress.com/files/2008/05/funny-dog-pictures-take-over-the-world.jpg\" alt=\"puppies\" /></a>\n</div>\n",
				"date_published": "2008-05-25T19:13:28-07:00",
				"url": "https://therealadam.com/2008/05/25/pinky-and-the.html",
				"tags": ["Curated","Dogs, cats, et cetera","dogs"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/22/i-made-you.html",
				"title": "I made you a muxtape",
				"content_html": "<!-- raw HTML omitted -->\n<p>I hope you enjoy listening to it as much as I enjoyed compiling it.</p>\n",
				"content_text": "<div class=\"center\">\n<a href=\"http://therealadam.muxtape.com/\"><img src=\"http://therealadam.com/wp-content/uploads/2008/05/therealadam-muxtape-com-1.jpg\" alt=\"therealadam.muxtape.com-1.jpg\" border=\"0\" width=\"603\" height=\"47\" />\n</a>\n</div>\n\nI hope you enjoy listening to it as much as I enjoyed compiling it.\n",
				"date_published": "2008-05-22T21:19:01-07:00",
				"url": "https://therealadam.com/2008/05/22/i-made-you.html",
				"tags": ["Music","Pop Culture","muxtape"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/21/destructuring-assignment-in.html",
				"title": "Destructuring assignment in block parameters",
				"content_html": "<p>&hellip;which is just a fancy way to say that this works like I think it should:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Which beats the pants off this:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>So, you see, the array elements get unpacked into @str@ and @val@ inside your block. Which is unexpected, but totally and thoroughly lovely. To my eyes, the former is much easier to read.</p>\n",
				"content_text": "...which is just a fancy way to say that this works like I think it should:\n\n<pre>\n<code>\n&gt;&gt; [['foo', 1], ['bar', 2], ['honk', 1000]].partition { |str, val| val &gt; 999 }\n=&gt; [[[\"honk\", 1000]], [[\"foo\", 1], [\"bar\", 2]]]\n</code>\n</pre>\n\nWhich beats the pants off this:\n\n<pre>\n<code>\n&gt;&gt; [['foo', 1], ['bar', 2], ['honk', 1000]].partition do |pair|\n?&gt;     str, val = pair\n&gt;&gt;     val &gt; 999\n&gt;&gt;   end\n=&gt; [[[\"honk\", 1000]], [[\"foo\", 1], [\"bar\", 2]]]\n</code>\n</pre>\n\nSo, you see, the array elements get unpacked into @str@ and @val@ inside your block. Which is unexpected, but totally and thoroughly lovely. To my eyes, the former is much easier to read.\n",
				"date_published": "2008-05-21T16:52:40-07:00",
				"url": "https://therealadam.com/2008/05/21/destructuring-assignment-in.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/09/frogged.html",
				"title": "Frogged",
				"content_html": "<!-- raw HTML omitted -->\n<p>My current foster-hussy-girlfriend. She&rsquo;s kind of a spaz, but oh-so adorable. Doubly so when she&rsquo;s &ldquo;frogged out&rdquo; as above.</p>\n",
				"content_text": "<div class=\"center\">\n<a href=\"http://www.flickr.com/photos/courtney/2477464834/\" title=\"DSC_5651 by CourtneyPo, on Flickr\"><img src=\"http://farm3.static.flickr.com/2207/2477464834_d57794db2f.jpg\" width=\"500\" height=\"333\" alt=\"DSC_5651\" /></a>\n</div>\n\nMy current foster-hussy-girlfriend. She's kind of a spaz, but oh-so adorable. Doubly so when she's \"frogged out\" as above.\n",
				"date_published": "2008-05-09T13:03:54-07:00",
				"url": "https://therealadam.com/2008/05/09/frogged.html",
				"tags": ["Curated","Dogs, cats, et cetera","dachshund"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/09/more-fu-in.html",
				"title": "More fu in your versions",
				"content_html": "<p><!-- raw HTML omitted -->Lazily Announcing version_fu<!-- raw HTML omitted --> - an update of Rick Olson&rsquo;s acts_as_versioned that works with dirty attributes. Jordan McKible&rsquo;s plugin is nascent, but since I have a soft spot in my heart for most things data versioning, I thought I&rsquo;d point it out.</p>\n",
				"content_text": "<a href=\"http://tuples.us/2008/05/03/lazily-announcing-version_fu/\">Lazily Announcing version_fu</a> - an update of Rick Olson's acts_as_versioned that works with dirty attributes. Jordan McKible's plugin is nascent, but since I have a soft spot in my heart for most things data versioning, I thought I'd point it out.\n",
				"date_published": "2008-05-09T09:55:36-07:00",
				"url": "https://therealadam.com/2008/05/09/more-fu-in.html",
				"tags": ["Curated","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/09/info-viz-with.html",
				"title": "Info viz with JavaScript",
				"content_html": "<p>Massive kudos to John Resig for his JavaScript <!-- raw HTML omitted -->Processing<!-- raw HTML omitted --> port. Take this plus the new-to-me <!-- raw HTML omitted -->JavaScript Information Visualization Toolkit<!-- raw HTML omitted -->, and it seems likely that data on the web is going to get a lot prettier (and less Flashy) in the next 6-12 months. Huzzah!</p>\n",
				"content_text": "Massive kudos to John Resig for his JavaScript <a href=\"http://ejohn.org/blog/processingjs/\">Processing</a> port. Take this plus the new-to-me <a href=\"http://blog.thejit.org/?page_id=14\">JavaScript Information Visualization Toolkit</a>, and it seems likely that data on the web is going to get a lot prettier (and less Flashy) in the next 6-12 months. Huzzah!\n",
				"date_published": "2008-05-09T05:51:06-07:00",
				"url": "https://therealadam.com/2008/05/09/info-viz-with.html",
				"tags": ["Curated","javascript","visualization"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/08/changing-git-submodule.html",
				"title": "Changing git submodule URLs",
				"content_html": "<p>Pro-tip: if you&rsquo;re using submodules with Git to manage dependencies (say Rails plugins), you can get yourself into trouble. Like half-a-day of wasted trouble.</p>\n<p>The rub comes when you need to make a change to some plugin. Suppose you were using <!-- raw HTML omitted -->Brain Buster<!-- raw HTML omitted --> for your captcha and then decided you need to make a change. The <!-- raw HTML omitted -->@git submodule@<!-- raw HTML omitted --> command doesn&rsquo;t really seem to offer a way to change the URL for the submodule. Let me summarize what I&rsquo;ve found in trying to do this.</p>\n<p>h2{color: #f00}. The Wrong Way</p>\n<ul>\n<li>Fork/create your own version of the submodule in question</li>\n<li>Change the URL for the submodule in @.git/config@ and @.gitmodules@</li>\n<li>Cross your fingers and hope for the best</li>\n</ul>\n<p>h2. The Right Way</p>\n<ul>\n<li>Fork/create your own version of the submodule in question</li>\n<li>Remove references to the existing submodule in @.git/config@, @.gitmodules@ and nuke the submodule directory</li>\n<li>Commit</li>\n<li>Add the new submodule URL</li>\n<li>Commit</li>\n<li>Make changes in your submodule</li>\n<li>Commit changes in the submodule (not the parent project)</li>\n<li>Commit the changes in the parent project (otherwise you&rsquo;ll only get the old version of the submodule in future pulls)</li>\n<li>Enjoy the hair you didn&rsquo;t have to rip from your scalp</li>\n</ul>\n<p>Learn from my mistakes, people.</p>\n",
				"content_text": "Pro-tip: if you're using submodules with Git to manage dependencies (say Rails plugins), you can get yourself into trouble. Like half-a-day of wasted trouble.\n\nThe rub comes when you need to make a change to some plugin. Suppose you were using <a href=\"http://opensource.thinkrelevance.com/wiki/BrainBuster\">Brain Buster</a> for your captcha and then decided you need to make a change. The <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html\">@git submodule@</a> command doesn't really seem to offer a way to change the URL for the submodule. Let me summarize what I've found in trying to do this.\n\nh2{color: #f00}. The Wrong Way\n\n* Fork/create your own version of the submodule in question\n* Change the URL for the submodule in @.git/config@ and @.gitmodules@\n* Cross your fingers and hope for the best\n\nh2. The Right Way\n\n* Fork/create your own version of the submodule in question\n* Remove references to the existing submodule in @.git/config@, @.gitmodules@ and nuke the submodule directory\n* Commit\n* Add the new submodule URL\n* Commit\n* Make changes in your submodule\n* Commit changes in the submodule (not the parent project)\n* Commit the changes in the parent project (otherwise you'll only get the old version of the submodule in future pulls)\n* Enjoy the hair you didn't have to rip from your scalp\n\nLearn from my mistakes, people.\n",
				"date_published": "2008-05-08T16:06:37-07:00",
				"url": "https://therealadam.com/2008/05/08/changing-git-submodule.html",
				"tags": ["Uncategorized","git"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/05/ruby-for-nonrubyists.html",
				"title": "Ruby for non-Rubyists",
				"content_html": "<p>Yesterday I spoke to a pleasant mix of Java, .NET, Ruby, Python and PHP developers at <!-- raw HTML omitted -->Dallas TechFest<!-- raw HTML omitted -->. My goal when speaking to enthusiast crowds of this sort is to show the light that I&rsquo;ve found in my programming journeys over the past couple years. This time around I tried to take a page from the inimitable <!-- raw HTML omitted -->Richard Feynman<!-- raw HTML omitted --> by structuring my talk into two sets of &ldquo;Six Easy Pieces&rdquo;.</p>\n<p>The first part starts off with the stance that <em>programming shouldn&rsquo;t suck</em>. From there I talk about the <!-- raw HTML omitted -->intercontinental railroad<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Sapir-Whorf<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Pattern Languages<!-- raw HTML omitted -->, the <!-- raw HTML omitted -->Gang of Four<!-- raw HTML omitted --> and flattery. In the end, we have an idea of how to better approach programming so we can have fun doing it.</p>\n<p>The second half is partially showing off Ruby and partially a gauntlet thrown down to other languages. The main point is to show a progression of ideas I see in lots of Ruby code, from sensible naming to closures ending up with metaprogramming powering declarative programming and internal DSLs. You can implement the ideas from the beginning in any language. However, the ideas towards the end require a more progressively designed language. I&rsquo;d love to see non-Ruby implementations of the programs towards the end of the presentation, if only for comparison and Rosetta Stone purposes.</p>\n<p>Thanks to everyone who was in attendance and especially those who stopped to chat with me before and after the presentation. Without further ado, please enjoy <!-- raw HTML omitted -->Six Easy Pieces (Twice Over)<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Yesterday I spoke to a pleasant mix of Java, .NET, Ruby, Python and PHP developers at <a href=\"http://dallastechfest.com/\">Dallas TechFest</a>. My goal when speaking to enthusiast crowds of this sort is to show the light that I've found in my programming journeys over the past couple years. This time around I tried to take a page from the inimitable <a href=\"http://en.wikipedia.org/wiki/Richard_Feynman\">Richard Feynman</a> by structuring my talk into two sets of \"Six Easy Pieces\".\n\nThe first part starts off with the stance that *programming shouldn't suck*. From there I talk about the <a href=\"http://en.wikipedia.org/wiki/First_Transcontinental_Railroad\">intercontinental railroad</a>, <a href=\"http://en.wikipedia.org/wiki/Sapir-Whorf_hypothesis\">Sapir-Whorf</a>, <a href=\"http://en.wikipedia.org/wiki/Pattern_language\">Pattern Languages</a>, the <a href=\"http://en.wikipedia.org/wiki/Gang_of_Four_%28software%29\">Gang of Four</a> and flattery. In the end, we have an idea of how to better approach programming so we can have fun doing it.\n\nThe second half is partially showing off Ruby and partially a gauntlet thrown down to other languages. The main point is to show a progression of ideas I see in lots of Ruby code, from sensible naming to closures ending up with metaprogramming powering declarative programming and internal DSLs. You can implement the ideas from the beginning in any language. However, the ideas towards the end require a more progressively designed language. I'd love to see non-Ruby implementations of the programs towards the end of the presentation, if only for comparison and Rosetta Stone purposes.\n\nThanks to everyone who was in attendance and especially those who stopped to chat with me before and after the presentation. Without further ado, please enjoy <a href=\"http://therealadam.com/wp-content/uploads/2008/05/sixeasypiecestwiceover.pdf\">Six Easy Pieces (Twice Over)</a>.\n",
				"date_published": "2008-05-04T22:18:52-07:00",
				"url": "https://therealadam.com/2008/05/05/ruby-for-nonrubyists.html",
				"tags": ["ruby","presentations","Events"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/05/01/beautiful-multiline-blocks.html",
				"title": "Beautiful multi-line blocks in Ruby",
				"content_html": "<p>&ldquo;I need a new drug&rdquo;:http://youtube.com/watch?v=MMSFX1Vb3xQ. One that won&rsquo;t quit. One that will let me sensibly structure the use of blocks in Ruby such that they can run across multiple lines and yet still chain blocks together.</p>\n<p>OK, so its not really a <em>drug</em> I need, per se. Though, I&rsquo;m sure what Huey Lewis really needed was a new drug. But what I need is a convention, or perhaps some syntax. It should say to you, &ldquo;HEY. Adam&rsquo;s doing something clever with blocks here. Keep your eyes open.&rdquo;</p>\n<p>I find myself desiring a new syntax and/or convention, when using blocks. I&rsquo;ve been trying to write in a more functional style lately, especially a pure-functional style wherein you never call a method for its side-effects. I don&rsquo;t think I&rsquo;m the only person doing this. Jim Weirich sort of alluded to it in a post about &ldquo;when to use @do/end@ vs. braces&rdquo;:http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc. Rick DeNatale &ldquo;took it a step further&rdquo;:http://talklikeaduck.denhaven2.com/articles/2007/10/02/ruby-blocks-do-or-brace. I want to lay it bare.</p>\n<p>Let&rsquo;s start with something innocuous:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>You get the value back of each object in the array, <em>mapped</em> to the result of calling the block. Fun times. Now, let&rsquo;s put it on one line and do something clever with it.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Now we&rsquo;re cooking! Ruby&rsquo;s syntax allows us to chain methods <em>and</em> blocks. Which turns out nice in this case where I want to filter down the array of mapped values. But let&rsquo;s pretend we need to do something clever in those blocks.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>That&rsquo;s the best I could come up with for chained, multi-line blocks. It looks &ldquo;Weirichian&rdquo;. Despite that, it kinda makes me vomit in my mouth.</p>\n<p>So, since &ldquo;I got awesome feedback on my last question of taste&rdquo;:http://therealadam.com/archive/2008/04/28/can-i-send-you-a-message/, I&rsquo;m tapping you, my favorite Ruby developer, for more. The ground rules are that you can&rsquo;t extract the logic into a real method and you can&rsquo;t jam everything onto one line. You <em>have</em> to use multi-line blocks. What looks good to you here?</p>\n",
				"content_text": "\"I need a new drug\":http://youtube.com/watch?v=MMSFX1Vb3xQ. One that won't quit. One that will let me sensibly structure the use of blocks in Ruby such that they can run across multiple lines and yet still chain blocks together.\n\nOK, so its not really a _drug_ I need, per se. Though, I'm sure what Huey Lewis really needed was a new drug. But what I need is a convention, or perhaps some syntax. It should say to you, \"HEY. Adam's doing something clever with blocks here. Keep your eyes open.\"\n\nI find myself desiring a new syntax and/or convention, when using blocks. I've been trying to write in a more functional style lately, especially a pure-functional style wherein you never call a method for its side-effects. I don't think I'm the only person doing this. Jim Weirich sort of alluded to it in a post about \"when to use @do/end@ vs. braces\":http://onestepback.org/index.cgi/Tech/Ruby/BraceVsDoEnd.rdoc. Rick DeNatale \"took it a step further\":http://talklikeaduck.denhaven2.com/articles/2007/10/02/ruby-blocks-do-or-brace. I want to lay it bare.\n\nLet's start with something innocuous:\n\n<pre>\n<code>\nary = [1,2,3]\n\nresult = ary.map do |n|\n  x = n * 4\nend\n\nresult # =&gt; [4, 8, 12]\n</code>\n</pre>\n\nYou get the value back of each object in the array, _mapped_ to the result of calling the block. Fun times. Now, let's put it on one line and do something clever with it.\n\n<pre>\n<code>\nary.map { |n| n * 4 }.select { |n| n == 4 } # =&gt; [4]\n</code>\n</pre>\n\nNow we're cooking! Ruby's syntax allows us to chain methods _and_ blocks. Which turns out nice in this case where I want to filter down the array of mapped values. But let's pretend we need to do something clever in those blocks.\n\n<pre>\n  <code>\n    ary.map { |n|\n      n * 4\n      # Some\n      # clever\n      # things...\n    }.select { |n|\n      n == 4\n      # More\n      # clever\n      # things...\n    }.any? { |n|\n      n == 4\n      # Gratuitiou\n      # clever\n      # things...\n    } # true\n  </code>\n</pre>\n\nThat's the best I could come up with for chained, multi-line blocks. It looks \"Weirichian\". Despite that, it kinda makes me vomit in my mouth.\n\nSo, since \"I got awesome feedback on my last question of taste\":http://therealadam.com/archive/2008/04/28/can-i-send-you-a-message/, I'm tapping you, my favorite Ruby developer, for more. The ground rules are that you can't extract the logic into a real method and you can't jam everything onto one line. You *have* to use multi-line blocks. What looks good to you here?\n",
				"date_published": "2008-05-01T21:16:29-07:00",
				"url": "https://therealadam.com/2008/05/01/beautiful-multiline-blocks.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/30/halo-photography.html",
				"title": "Halo Photography",
				"content_html": "<p><!-- raw HTML omitted -->Joshuadamon&rsquo;s<!-- raw HTML omitted --> <!-- raw HTML omitted -->Halotography<!-- raw HTML omitted --> is utterly amazing:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;m really impressed with what he&rsquo;s done with some clever camera manipulation and probably some Photoshop loving. All Halo fans should check this out.</p>\n",
				"content_text": "<a href=\"http://www.flickr.com/photos/joshuadamon/\">Joshuadamon's</a> <a href=\"http://www.flickr.com/photos/joshuadamon/sets/72157604730806200/\">Halotography</a> is utterly amazing:\n\n<div class=\"center\">\n<a href=\"http://www.flickr.com/photos/joshuadamon/2441568135/\" title=\"Shadowrun.jpg by joshuadamon, on Flickr\"><img src=\"http://farm4.static.flickr.com/3110/2441568135_a8b1d4062f.jpg\" width=\"500\" height=\"281\" alt=\"Shadowrun.jpg\" /></a>\n</div>\n\nI'm really impressed with what he's done with some clever camera manipulation and probably some Photoshop loving. All Halo fans should check this out.\n",
				"date_published": "2008-04-30T09:05:17-07:00",
				"url": "https://therealadam.com/2008/04/30/halo-photography.html",
				"tags": ["Curated","Nerdery","halo"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/28/can-i-send.html",
				"title": "Can I send you a message?",
				"content_html": "<p>@Object#send@ - the joy of Rubyists and the scourge of those who would write refactoring tools. Let&rsquo;s talk about it.</p>\n<p>I recently ended up writing some code that would have proven really hideous if I couldn&rsquo;t call @#send@. So I had a class like the following (written using code generation for brevity):</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I needed to call @one@, @two@ or @three@ from a bit of code that takes some user input (in this case, an attribute value in a template language). So I cooked something like this up:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>So I&rsquo;m using a case statement to convert <em>valid</em> method names to symbols, which I then pass to @#send@ and <em>bam!</em>, my method is called. This made my code a ton easier to write and I&rsquo;m here espousing the technique to you.</p>\n<p>But what is the drawback? Well, if someone were to ever really get up the courage to tackle the task of building a refactoring browser for Ruby, this sort of thing would give them fits. They can&rsquo;t really tell where those methods are called on my class until they are actually called. Heck, given the code above, they can&rsquo;t even figure out what methods exist on @Foo@ without running the code.</p>\n<p>The other drawback is that this code is a little hard to read. Most new casual Rubyists won&rsquo;t think to search for the symbol version of a method name. Its even harder if you&rsquo;re still somewhat new to Ruby and you aren&rsquo;t aware this sort of thing even happens.</p>\n<p>For me personally, the concise code I can write with @#send@ far outweighs the drawbacks. I preach the importance of code reading regularly, and its how one can get over the &ldquo;hump&rdquo; that is knowing how to navigate software that sends dynamic messages to objects.</p>\n<p>Your homework is to share how you feel about @#send@ in the comments.</p>\n",
				"content_text": "@Object#send@ - the joy of Rubyists and the scourge of those who would write refactoring tools. Let's talk about it.\n\nI recently ended up writing some code that would have proven really hideous if I couldn't call @#send@. So I had a class like the following (written using code generation for brevity):\n\n<pre>\n<code>\nclass Foo\n  %w{one two three}.each do |name|\n    class_eval &lt;&lt;-EOC\n      def #{name}\n        &#039;#{name}&#039;\n      end\n    EOC\n  end\nend\n</code>\n</pre>\n\nI needed to call @one@, @two@ or @three@ from a bit of code that takes some user input (in this case, an attribute value in a template language). So I cooked something like this up:\n\n<pre>\n<code>\n%w{one two three foo}.each do |arg|\n  meth = case arg\n  when 'one'\n    :one\n  when 'two'\n    :two\n  when 'three'\n    :three\n  else\n    raise 'Unknown arg'\n  end\n\n  puts Foo.new.send(meth)\n\nend\n</code>\n</pre>\n\nSo I'm using a case statement to convert _valid_ method names to symbols, which I then pass to @#send@ and *bam!*, my method is called. This made my code a ton easier to write and I'm here espousing the technique to you.\n\nBut what is the drawback? Well, if someone were to ever really get up the courage to tackle the task of building a refactoring browser for Ruby, this sort of thing would give them fits. They can't really tell where those methods are called on my class until they are actually called. Heck, given the code above, they can't even figure out what methods exist on @Foo@ without running the code.\n\nThe other drawback is that this code is a little hard to read. Most new casual Rubyists won't think to search for the symbol version of a method name. Its even harder if you're still somewhat new to Ruby and you aren't aware this sort of thing even happens.\n\nFor me personally, the concise code I can write with @#send@ far outweighs the drawbacks. I preach the importance of code reading regularly, and its how one can get over the \"hump\" that is knowing how to navigate software that sends dynamic messages to objects.\n\nYour homework is to share how you feel about @#send@ in the comments.\n",
				"date_published": "2008-04-28T09:25:30-07:00",
				"url": "https://therealadam.com/2008/04/28/can-i-send.html",
				"tags": ["Uncategorized","ruby"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/25/some-language-twins.html",
				"title": "Some language twins teach each other",
				"content_html": "<p><!-- raw HTML omitted -->SNL Transcripts: Luke Perry: 02/06/93: Weekend Update with Kevin Nealon<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I wanted to post a video of the Weekend Update skit where Mike Myers plays Mick Jagger and Mick Jagger plays Keith Richards, but it appears such video does not exist on the web. You&rsquo;ll just have to read the transcript and make it happen in your head.</p>\n",
				"content_text": "<a href=\"http://snltranscripts.jt.org/92/92lupdate.phtml\">SNL Transcripts: Luke Perry: 02/06/93: Weekend Update with Kevin Nealon</a>:\n\n<blockquote>\nThat wasn't English, Keith! I mean, you're talking in Esperanto, or some language twins teach each other! I mean, the King's English, man! I mean, throw us a bone man - alright!\n</blockquote>\n\nI wanted to post a video of the Weekend Update skit where Mike Myers plays Mick Jagger and Mick Jagger plays Keith Richards, but it appears such video does not exist on the web. You'll just have to read the transcript and make it happen in your head.\n",
				"date_published": "2008-04-25T08:04:19-07:00",
				"url": "https://therealadam.com/2008/04/25/some-language-twins.html",
				"tags": ["Curated","Comedy, haha","snl"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/24/exploratory-hacking-in.html",
				"title": "Exploratory hacking in TextMate",
				"content_html": "<p>My first foray into screencasting:</p>\n<!-- raw HTML omitted -->\n<p>&lsquo;Tis a little tutorial on a little bit of joy I use regularly. In TextMate, you can add xmp markers like so:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Then if you hit Ctrl+Shift+Command+E, you get this:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>This is a great way to do exploratory hacking. Plus, you don&rsquo;t feel like you&rsquo;re doing &ldquo;printf&rdquo; style debugging. And that makes everyone feel cooler!</p>\n",
				"content_text": "My first foray into screencasting:\n\n<div class=\"center\">\n\t\t\t\t<br /><a href=\"http://www.vimeo.com/936232/l:embed_936232\">Textmate and xmp</a> from <a href=\"http://www.vimeo.com/therealadam/l:embed_936232\">Adam Keys</a> on <a href=\"http://vimeo.com/l:embed_936232\">Vimeo</a>.\n</div>\n\n'Tis a little tutorial on a little bit of joy I use regularly. In TextMate, you can add xmp markers like so:\n\n<pre>\n<code>\n1 + 2 # =&gt;\nString.class # =&gt;\n%w{foo bar baz}.each { |w| w.upcase } # =&gt;\n</code>\n</pre>\n\nThen if you hit Ctrl+Shift+Command+E, you get this:\n\n<pre>\n<code>\n1 + 2 # =&gt; 3\nString.class # =&gt; Class\n%w{foo bar baz}.each { |w| w.upcase } # =&gt; [\"foo\", \"bar\", \"baz\"]\n</code>\n</pre>\n\nThis is a great way to do exploratory hacking. Plus, you don't feel like you're doing \"printf\" style debugging. And that makes everyone feel cooler!\n",
				"date_published": "2008-04-24T17:33:47-07:00",
				"url": "https://therealadam.com/2008/04/24/exploratory-hacking-in.html",
				"tags": ["Uncategorized","ruby","textmate"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/24/reverse-shoulder-surfing.html",
				"title": "Reverse shoulder surfing",
				"content_html": "<p><!-- raw HTML omitted -->Rands In Repose: Saving Seconds<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>This is the presentation I want to see at the next conference: in a room full of people, anyone is welcome to walk up to the mic and plug their laptop in to the projector. They’ll be asked to complete three simple tasks:</p>\n<h1 id=\"send-a-mail-to-a-friend\">Send a mail to a friend</h1>\n<h1 id=\"find-something-on-the-internet\">Find something on the Internet</h1>\n<h1 id=\"save-a-bookmark-or-an-image\">Save a bookmark or an image.</h1>\n<p>I would be fixated.</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;ve been independently wanting to do this for a while now. Clearly, Rands was telepathically borrowing ideas from my brain when I met him at SXSW this year :). I&rsquo;ve been wanting to do something like this at a BarCamp for a while now. Personally, one of my favorite past-times at conferences is to shoulder surf other people. The idea above takes shoulder surfing, turns it around and formalizes it. I&rsquo;d have a blast watching it, especially if you get a good mix of Windows/Linux/OS X people and GUI/terminal folks.</p>\n",
				"content_text": "<a href=\"http://www.randsinrepose.com/archives/2008/04/21/saving_seconds.html\">Rands In Repose: Saving Seconds</a>:\n\n<blockquote>\n\nThis is the presentation I want to see at the next conference: in a room full of people, anyone is welcome to walk up to the mic and plug their laptop in to the projector. They&rsquo;ll be asked to complete three simple tasks:\n\n# Send a mail to a friend\n# Find something on the Internet\n# Save a bookmark or an image.\n\nI would be fixated.\n\n</blockquote>\n\nI've been independently wanting to do this for a while now. Clearly, Rands was telepathically borrowing ideas from my brain when I met him at SXSW this year :). I've been wanting to do something like this at a BarCamp for a while now. Personally, one of my favorite past-times at conferences is to shoulder surf other people. The idea above takes shoulder surfing, turns it around and formalizes it. I'd have a blast watching it, especially if you get a good mix of Windows/Linux/OS X people and GUI/terminal folks.\n",
				"date_published": "2008-04-24T12:35:31-07:00",
				"url": "https://therealadam.com/2008/04/24/reverse-shoulder-surfing.html",
				"tags": ["Curated","Nerdery","lifehacks"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/24/awesome-star-wars.html",
				"title": "Awesome Star Wars posters",
				"content_html": "<p>Founds this in <!-- raw HTML omitted -->Michael Heilemann&rsquo;s<!-- raw HTML omitted --> Flickr stream:</p>\n<!-- raw HTML omitted -->\n<p>He&rsquo;s got more <!-- raw HTML omitted -->where<!-- raw HTML omitted --> <!-- raw HTML omitted -->that<!-- raw HTML omitted --> <!-- raw HTML omitted -->came<!-- raw HTML omitted --> <!-- raw HTML omitted -->from<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Founds this in <a href=\"http://www.flickr.com/photos/heilemann/\">Michael Heilemann's</a> Flickr stream:\n\n<div align=\"center\">\n<a href=\"http://www.flickr.com/photos/heilemann/2437664453/\" title=\"Star Wars by Michael Heilemann, on Flickr\"><img src=\"http://farm3.static.flickr.com/2141/2437664453_fef19feaf0.jpg\" width=\"500\" height=\"266\" alt=\"Star Wars\" /></a>\n</div>\n\nHe's got more <a href=\"http://www.flickr.com/photos/heilemann/2437664491/\">where</a> <a href=\"http://www.flickr.com/photos/heilemann/2437664533/\">that</a> <a href=\"http://www.flickr.com/photos/heilemann/2438485346/\">came</a> <a href=\"http://www.flickr.com/photos/heilemann/2437664589/\">from</a>.\n",
				"date_published": "2008-04-24T08:14:23-07:00",
				"url": "https://therealadam.com/2008/04/24/awesome-star-wars.html",
				"tags": ["Curated","Nerdery","star_wars"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/23/aye-ye-are.html",
				"title": "Aye, ye are a scum!",
				"content_html": "<p><!-- raw HTML omitted -->ScummC: A Scumm Compiler<!-- raw HTML omitted --> - write your own <!-- raw HTML omitted -->SCUMM<!-- raw HTML omitted --> games! Man this takes me back to the first two <!-- raw HTML omitted -->Monkey Island<!-- raw HTML omitted --> games. I still think the best examples of the point and click adventure game genre were from LucasArts. (Via <!-- raw HTML omitted -->_why<!-- raw HTML omitted -->)</p>\n",
				"content_text": "<a href=\"http://alban.dotsec.net/Projects/ScummC\">ScummC: A Scumm Compiler</a> - write your own <a href=\"http://www.scummvm.org/\">SCUMM</a> games! Man this takes me back to the first two <a href=\"http://en.wikipedia.org/wiki/Secret_of_Monkey_Island\">Monkey Island</a> games. I still think the best examples of the point and click adventure game genre were from LucasArts. (Via <a href=\"http://hackety.org/2008/04/22/makingScummGames.html\">_why</a>)\n",
				"date_published": "2008-04-23T14:50:11-07:00",
				"url": "https://therealadam.com/2008/04/23/aye-ye-are.html",
				"tags": ["Curated","Nerdery","games","monkey_island"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/23/designing-with-type.html",
				"title": "Designing with type",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>As I&rsquo;ve tried to better grasp typography and designing with it, I&rsquo;ve found its ideal for developers looking to improve their visual design skills. You don&rsquo;t need drawing skills and you can work in monochromes until you&rsquo;re ready to try fancy color palettes.</p>\n",
				"content_text": "<p><a href=\"http://cameronmoll.com/archives/2008/04/designing_with_type_characters/\">Techniques for designing with type characters ~ Authentic Boredom</a>:</p>\n\n<blockquote>\nTypography and typefaces, without a doubt, are two of the most fascinating aspects of visual design. Great designers can execute great designs with typefaces and nothing else, if required, and certainly if preferred. Design legends Saul Bass and Paula Scher have proved this many times over, and they comprise only a fraction of a very long list of luminaries who can wield type brilliantly.\n</blockquote>\n\nAs I've tried to better grasp typography and designing with it, I've found its ideal for developers looking to improve their visual design skills. You don't need drawing skills and you can work in monochromes until you're ready to try fancy color palettes.\n",
				"date_published": "2008-04-23T07:35:51-07:00",
				"url": "https://therealadam.com/2008/04/23/designing-with-type.html",
				"tags": ["Curated","Design","typography"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/23/quotscience-machinequot-from.html",
				"title": "\u0026quot;Science Machine\u0026quot; from birth to completion",
				"content_html": "<p>How Chad Pugh&rsquo;s brilliant &ldquo;Science Machine&rdquo; came to life:</p>\n<!-- raw HTML omitted -->\n<p>This illustration is the inspiration behind the Vimeo login page, which is itself a pretty outstanding example of the genre. If you&rsquo;re quick, you can <!-- raw HTML omitted -->order a print<!-- raw HTML omitted --> of the illustration itself.</p>\n<p>(Just for my own ego gratification, I&rsquo;d like to note that I saw this before it appeared on <!-- raw HTML omitted -->Kottke<!-- raw HTML omitted -->. And thus, I am a wonderful and unique snowflake.)</p>\n",
				"content_text": "How Chad Pugh's brilliant \"Science Machine\" came to life:\n\n<div class=\"center\">\n\t\t\t\t<br /><a href=\"http://www.vimeo.com/927062/l:embed_927062\">Science Machine</a> from <a href=\"http://www.vimeo.com/chadpugh/l:embed_927062\">Chad Pugh</a> on <a href=\"http://vimeo.com/l:embed_927062\">Vimeo</a>.\n</div>\n\nThis illustration is the inspiration behind the Vimeo login page, which is itself a pretty outstanding example of the genre. If you're quick, you can <a href=\"http://store.thebigpugh.com/product/science-machine\">order a print</a> of the illustration itself.\n\n(Just for my own ego gratification, I'd like to note that I saw this before it appeared on <a href=\"http://kottke.org/\">Kottke</a>. And thus, I am a wonderful and unique snowflake.)\n",
				"date_published": "2008-04-23T00:28:13-07:00",
				"url": "https://therealadam.com/2008/04/23/quotscience-machinequot-from.html",
				"tags": ["Curated","Design","awesome"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/22/interviewed-by-rubylearning.html",
				"title": "Interviewed by RubyLearning",
				"content_html": "<p><!-- raw HTML omitted -->Ruby Interview: Adam Keys of FiveRuns<!-- raw HTML omitted --> - Satish&rsquo;s ability to find an absurd picture of me from five years ago is impressive. The interview focuses on ideas for buddying Rubyists. So if you&rsquo;re budding, check it out. Really, you should at least check it out for the picture.</p>\n",
				"content_text": "<a href=\"http://rubylearning.com/blog/2008/04/22/ruby-interview-adam-keys-of-fiveruns/\">Ruby Interview: Adam Keys of FiveRuns</a> - Satish's ability to find an absurd picture of me from five years ago is impressive. The interview focuses on ideas for buddying Rubyists. So if you're budding, check it out. Really, you should at least check it out for the picture.\n",
				"date_published": "2008-04-22T13:24:24-07:00",
				"url": "https://therealadam.com/2008/04/22/interviewed-by-rubylearning.html",
				"tags": ["Curated","Nerdery","ruby","fiveruns"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/22/the-greatness-of.html",
				"title": "The Greatness of Gossip Girl",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->So true!<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"http://nymag.com/arts/tv/features/46225/\"><img src=\"http://cache.jezebel.com/assets/resources/2008/04/gossipgirl042108.jpg\" alt=\"Gossip Girl\" /></a>\n\n<strong class=\"center\">So true!</strong>\n",
				"date_published": "2008-04-22T11:14:16-07:00",
				"url": "https://therealadam.com/2008/04/22/the-greatness-of.html",
				"tags": ["Curated","Nerdery","tv"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/22/ecto-replica.html",
				"title": "Ecto-1 Replica",
				"content_html": "<p><!-- raw HTML omitted -->Ecto-1 from <!-- raw HTML omitted -->Ghostbusters<!-- raw HTML omitted --><!-- raw HTML omitted --> - too flippin cool. (Via <!-- raw HTML omitted -->Coudal<!-- raw HTML omitted -->).<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"http://www.gbfans.com/equipment/reference/31/\">Ecto-1 from <em>Ghostbusters</em></a> - too flippin cool. (Via <a href=\"http://www.coudal.com/\">Coudal</a>).</p>\n",
				"date_published": "2008-04-22T08:06:49-07:00",
				"url": "https://therealadam.com/2008/04/22/ecto-replica.html",
				"tags": ["Curated","Nerdery","ghostbusters"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/21/ill-see-you.html",
				"title": "I\u0026#39;ll see you at Dallas TechFest",
				"content_html": "<p>For the past couple of months I&rsquo;ve been -procrastinating- helping to organize the Ruby track for the Dallas TechFest <!-- raw HTML omitted -->Dallas TechFest<!-- raw HTML omitted -->. Its is a language and technology agnostic conference on May 3rd. There are tracks covering Ruby, Java, .NET, Emerging Technologies and Flex. Its a great opportunity to see sessions on your own language of choice while learning what the other guys are up to, all under one roof.</p>\n<p>Confirmed speakers for the Ruby track are:</p>\n<ul>\n<li>Jim Hughes</li>\n<li>Yehuda Katz</li>\n<li>Glenn Vanderburg</li>\n</ul>\n<p>&hellip;and myself. Other presentations of interest to Rubyists:</p>\n<ul>\n<li>Getting started with the ASP.NET MVC framework</li>\n<li>REST: the basics and the not so basic</li>\n<li>Pardon the interruption: what&rsquo;s the deal with Groovy?</li>\n<li>Developing native applications for the iPhone</li>\n<li>Google Android</li>\n</ul>\n<p>I hope you&rsquo;ll come out on May 3rd, 2008 learn something new, either in the area you work with today, or in a new technology that interests you.</p>\n<p>Cost: $0 (!)\nWhere: <!-- raw HTML omitted -->Addison Conference and Theatre Center<!-- raw HTML omitted -->\nWhen: May 3rd, 2008, 8 AM to 7 PM</p>\n",
				"content_text": "For the past couple of months I've been -procrastinating- helping to organize the Ruby track for the Dallas TechFest <a href=\"http://dallastechfest.com/\">Dallas TechFest</a>. Its is a language and technology agnostic conference on May 3rd. There are tracks covering Ruby, Java, .NET, Emerging Technologies and Flex. Its a great opportunity to see sessions on your own language of choice while learning what the other guys are up to, all under one roof.\n\nConfirmed speakers for the Ruby track are:\n\n* Jim Hughes\n* Yehuda Katz\n* Glenn Vanderburg\n\n...and myself. Other presentations of interest to Rubyists:\n\n* Getting started with the ASP.NET MVC framework\n* REST: the basics and the not so basic\n* Pardon the interruption: what's the deal with Groovy?\n* Developing native applications for the iPhone\n* Google Android\n\nI hope you'll come out on May 3rd, 2008 learn something new, either in the area you work with today, or in a new technology that interests you.\n\nCost: $0 (!)\nWhere: <a href=\"http://maps.google.com/maps?f=q&amp;hl=en&amp;geocode=&amp;q=15650%20Addison%20Rd,%20Addison,%20TX%2075001-3285&amp;sll=32.638724,-97.129899&amp;sspn=0.007155,0.016158&amp;ie=UTF8&amp;ll=32.966907,-96.819506&amp;spn=0.049975,0.114155&amp;t=p&amp;z=14\">Addison Conference and Theatre Center</a>\nWhen: May 3rd, 2008, 8 AM to 7 PM\n",
				"date_published": "2008-04-21T16:16:45-07:00",
				"url": "https://therealadam.com/2008/04/21/ill-see-you.html",
				"tags": ["ruby","Events","conferences"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/21/dean-allen-on.html",
				"title": "Dean Allen on LOST",
				"content_html": "<p>Dean Allen on <!-- raw HTML omitted -->LOST<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>I&rsquo;m not judging, but he could prove correct. Oddly enough I found this on his colophon page. Interesting information architecture there.</p>\n",
				"content_text": "Dean Allen on <em>LOST</em>:\n\n<blockquote>\nIt&rsquo;s crap. Utter, arbitrary crap. They make it up as they go along.\n</blockquote>\n\nI'm not judging, but he could prove correct. Oddly enough I found this on his colophon page. Interesting information architecture there.\n",
				"date_published": "2008-04-21T07:09:44-07:00",
				"url": "https://therealadam.com/2008/04/21/dean-allen-on.html",
				"tags": ["Curated","lost"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/20/save-it-for.html",
				"title": "Save it for your iVillage blog",
				"content_html": "<p>I started playing Halo 3 again this week. I am quite rusty at it now - I think I regressed while others greatly advanced. But, that&rsquo;s a digression.</p>\n<p>So I dropped into matchmaking on Xbox Live this morning and joined a group playing the new maps. As I entered the game lobby, a guy was yammering on. It wasn&rsquo;t your typical &ldquo;UR GAY&rdquo; banter you normally get on Xbox Live. This guy was going on about his very mundane Sunday afternoon, even detailing the sandwich he&rsquo;d had. Now, since the level of decorum on Xbox Live is pretty low (read: non-existent), I put him in his place.</p>\n<p>I told him to &ldquo;save it for his iVillage blog.&rdquo;</p>\n<p><!-- raw HTML omitted -->Dead silence<!-- raw HTML omitted -->&hellip;lesson learned! 30 Rock viewers and those playing Halo 3 are a pretty disparate set.</p>\n",
				"content_text": "I started playing Halo 3 again this week. I am quite rusty at it now - I think I regressed while others greatly advanced. But, that's a digression.\n\nSo I dropped into matchmaking on Xbox Live this morning and joined a group playing the new maps. As I entered the game lobby, a guy was yammering on. It wasn't your typical \"UR GAY\" banter you normally get on Xbox Live. This guy was going on about his very mundane Sunday afternoon, even detailing the sandwich he'd had. Now, since the level of decorum on Xbox Live is pretty low (read: non-existent), I put him in his place.\n\nI told him to \"save it for his iVillage blog.\"\n\n<em>Dead silence</em>...lesson learned! 30 Rock viewers and those playing Halo 3 are a pretty disparate set.\n",
				"date_published": "2008-04-20T18:32:37-07:00",
				"url": "https://therealadam.com/2008/04/20/save-it-for.html",
				"tags": ["Comedy, haha","misc:30_rock","halo"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/20/rails-scenarios.html",
				"title": "Rails Scenarios",
				"content_html": "<p><!-- raw HTML omitted -->Rails Scenarios<!-- raw HTML omitted --> - a sane way to specify really complex fixtures in Rails. Lets you write classes to specify data and helpers to operate on that data. There&rsquo;s a sane way to compose data and create relationships, as well as support for test/unit and RSpec. Personally, I&rsquo;m currently in a not-unhappy place with YAML fixtures, but if you aren&rsquo;t, this is worth a look.</p>\n",
				"content_text": "<a href=\"http://faithfulcode.rubyforge.org/docs/scenarios/\">Rails Scenarios</a> - a sane way to specify really complex fixtures in Rails. Lets you write classes to specify data and helpers to operate on that data. There's a sane way to compose data and create relationships, as well as support for test/unit and RSpec. Personally, I'm currently in a not-unhappy place with YAML fixtures, but if you aren't, this is worth a look.\n",
				"date_published": "2008-04-20T14:06:46-07:00",
				"url": "https://therealadam.com/2008/04/20/rails-scenarios.html",
				"tags": ["Curated","rails"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/20/ballmen-for-half.html",
				"title": "Ballmen for Half Life 2",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<p><a href=\"http://www.ballmenmod.com/index.html\">Ballmen Mod</a> - a Half Life 2 mod where you can walk on walls and do all sorts of insane jumping due to weird gravity. Please tell me someone is making a <a href=\"http://en.wikipedia.org/wiki/Mobius_strip\">M&ouml;bius strip</a> map for this mod. I'd always wanted to make one of those for Quake 2.</p>\n",
				"date_published": "2008-04-20T08:02:37-07:00",
				"url": "https://therealadam.com/2008/04/20/ballmen-for-half.html",
				"tags": ["Curated","Nerdery","games","halflife"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/19/corrupted-by-cosmic.html",
				"title": "Corrupted by cosmic rays",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>There is something distinctly awesome about mentioning data loss by cosmic rays. I do it whenever I have the means.</p>\n",
				"content_text": "<p><a href=\"http://www.dekorte.com/blog/blog.cgi?do=item&amp;id=3371\">ACID Databases: Fact and Fiction</a></p>\n\n<blockquote>\n\"A final note: There are other things that can go wrong, such as the disk not writing the data properly, a bit in memory being flipped by a cosmic ray, etc which only redundancy can solve. \"\n</blockquote>\n\nThere is something distinctly awesome about mentioning data loss by cosmic rays. I do it whenever I have the means.\n",
				"date_published": "2008-04-19T00:35:19-07:00",
				"url": "https://therealadam.com/2008/04/19/corrupted-by-cosmic.html",
				"tags": ["Curated","humor","systems"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/16/lol-license.html",
				"title": "LOL License",
				"content_html": "<p>Boy, do I have a treat for you! And by &ldquo;treat&rdquo;, I mean embarrassing for me, hilarious for you.</p>\n<!-- raw HTML omitted -->\n<p>I found the license I got on my eighteenth birthday. Back in the day when I had long hair and looked, more or less, like Jesus. And, wore Hawaiian shirts quite frequently. For some reason, I decided not to smile. As you can see, the sum of all this is that I end up looking like a convict.</p>\n<p>Laugh it up, fuzzballs.</p>\n",
				"content_text": "Boy, do I have a treat for you! And by \"treat\", I mean embarrassing for me, hilarious for you.\n\n<div class=\"center\">\n<a href=\"http://www.flickr.com/photos/48889072931@N01/2418695387\" title=\"View 'LOL License' on Flickr.com\"><img src=\"http://farm4.static.flickr.com/3099/2418695387_5631d123ac.jpg\" alt=\"LOL License\" border=\"0\" width=\"337\" height=\"500\" /></a>\n</div>\n\nI found the license I got on my eighteenth birthday. Back in the day when I had long hair and looked, more or less, like Jesus. And, wore Hawaiian shirts quite frequently. For some reason, I decided not to smile. As you can see, the sum of all this is that I end up looking like a convict.\n\nLaugh it up, fuzzballs.\n",
				"date_published": "2008-04-16T12:37:24-07:00",
				"url": "https://therealadam.com/2008/04/16/lol-license.html",
				"tags": ["Comedy, haha","lol"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/13/its-a-musical.html",
				"title": "Its a musical rollercoaster",
				"content_html": "<p>If jazz is more your thing, then you should watch this animation based on <!-- raw HTML omitted -->&ldquo;Giant Steps&rdquo;<!-- raw HTML omitted -->.</p>\n",
				"content_text": "If jazz is more your thing, then you should watch this animation based on <a href=\"http://www.michalevy.com/giantsteps_download\">\"Giant Steps\"</a>.\n",
				"date_published": "2008-04-13T09:04:59-07:00",
				"url": "https://therealadam.com/2008/04/13/its-a-musical.html",
				"tags": ["Music","Pop Culture","Curated","viz"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/08/say-it-quickly.html",
				"title": "Say it quickly",
				"content_html": "<p>Like everyone on the internet, I&rsquo;m trying this whole Flickr video thing:</p>\n<p>90 seconds is tough, but I love the idea. Chris Griego also had a great idea about the coolness of <!-- raw HTML omitted -->what&rsquo;s going on here<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Like everyone on the internet, I'm trying this whole Flickr video thing:\n\n\n\n90 seconds is tough, but I love the idea. Chris Griego also had a great idea about the coolness of <a href=\"http://twitter.com/cgriego/statuses/785480096\">what's going on here</a>:\n\n<blockquote>\nSweet, just like Flickr legitimized posting screenshots and illustration, videos can be marked as screencasts and animation.\n</blockquote>\n",
				"date_published": "2008-04-08T21:22:26-07:00",
				"url": "https://therealadam.com/2008/04/08/say-it-quickly.html",
				"tags": ["Nerdery","star_wars","humor","flickr"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/04/ryan-norbauers-got.html",
				"title": "Ryan Norbauer\u0026#39;s got the right idea",
				"content_html": "<p><!-- raw HTML omitted -->Amy Hoy interviews Ryan Norbauer<!-- raw HTML omitted -->. This got my attention:</p>\n<!-- raw HTML omitted -->\n<p>Tackling complexity in software:</p>\n<!-- raw HTML omitted -->\n<p>The world of the programmer:</p>\n<!-- raw HTML omitted -->\n<p>Its a long interview, but worth it if any of the above resonates with you.</p>\n",
				"content_text": "<a href=\"http://www.slash7.com/articles/2008/3/17/slash7-interviews-ryan-norbauer\">Amy Hoy interviews Ryan Norbauer</a>. This got my attention:\n\n<blockquote>\n\"Simplification, unification, and reduction: these are the values of a great craftsperson, whether she's a tradesperson in the guild of ideas, words, paintings, or software.\"\n</blockquote>\n\nTackling complexity in software:\n\n<blockquote>\nProgramming should be about making things that seem complicated easy to handle.\n</blockquote>\n\nThe world of the programmer:\n\n<blockquote>\nIn this way, programmers are really lucky. Unlike biologists or mechanical engineers, who have to deal with the world on its own terms, programmers deal in a world that is entirely of their own making. We have the luxury of being able to re-work and re-invent our world to make it easier to understand. Physicists don't have the option of re-writing the laws of relativity in order to make the cosmos easier to understand for everyone, but programmers do have an analogous power. If something like the exchange of data over the web, or the modeling of database records as programmatic objects is too complex, we have the power to invent a new world that makes everything easier to get our head around.\n</blockquote>\n\nIts a long interview, but worth it if any of the above resonates with you.\n",
				"date_published": "2008-04-04T15:08:45-07:00",
				"url": "https://therealadam.com/2008/04/04/ryan-norbauers-got.html",
				"tags": ["Curated","quotes"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/04/iis-ie-iron.html",
				"title": "IIS 7, IE 8, Iron Ruby MEGA-MIX",
				"content_html": "<p>Not only do you get a <!-- raw HTML omitted -->Mega-MIX<!-- raw HTML omitted -->, I&rsquo;ll try it in haiku form. Because, I&rsquo;m feeling sassy.</p>\n<p>h2. On IIS</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Decoded: they dropped the metabase for XML configuration, they can PHP and Rails apps through FastCGI now and they&rsquo;re working on something like @mod_proxy_balancer@</p>\n<p>h2. On IE 8</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Decoded: even more security improvements, lots of fancy new features (see <!-- raw HTML omitted -->Ajaxian<!-- raw HTML omitted --> for more coverage), and over beers, Chris Wilson thought it was not entirely implausible to build some manner of Firebug extension that warns you about possible IE incompatibilities in the current page.</p>\n<p>h2. On IronRuby</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Decoded: they want to run Rails on IIS at some point, some non-MS contributors built them a test suite so they know what Ruby interpreter APIs they need to build but didn&rsquo;t have to poke around in MRI to figure it out, programming in multiple languages using the DLR on top of the CLR is possible.</p>\n",
				"content_text": "Not only do you get a <strong>Mega-MIX</strong>, I'll try it in haiku form. Because, I'm feeling sassy.\n\nh2. On IIS\n\n<pre>\nMetabase to angle\nbrackets; FastCGI now,\nMongrel later on\n</pre>\n\nDecoded: they dropped the metabase for XML configuration, they can PHP and Rails apps through FastCGI now and they're working on something like @mod_proxy_balancer@\n\nh2. On IE 8\n\n<pre>\nSecurity blah\nMany fancy features; ask\nChris for IE validator\n</pre>\n\nDecoded: even more security improvements, lots of fancy new features (see <a href=\"http://ajaxian.com/by/topic/ie/\">Ajaxian</a> for more coverage), and over beers, Chris Wilson thought it was not entirely implausible to build some manner of Firebug extension that warns you about possible IE incompatibilities in the current page.\n\nh2. On IronRuby\n\n<pre>\nRails someday; outside\npeople build test suite; polyglot\ncode reality\n</pre>\n\nDecoded: they want to run Rails on IIS at some point, some non-MS contributors built them a test suite so they know what Ruby interpreter APIs they need to build but didn't have to poke around in MRI to figure it out, programming in multiple languages using the DLR on top of the CLR is possible.\n",
				"date_published": "2008-04-04T07:56:13-07:00",
				"url": "https://therealadam.com/2008/04/04/iis-ie-iron.html",
				"tags": ["ruby","Events","mts08"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/04/03/anders-hejlsberg-is.html",
				"title": "Anders Hejlsberg is your new bicycle",
				"content_html": "<p><!-- raw HTML omitted -->Ding Ding Ding!<!-- raw HTML omitted --> We have a winner. Anders Hejlsberg is quite possibly the most clued-in designer of a mainstream programming language. The work that Anders Hejlsberg  is doing with C# is amazingly progressive and forward thinking. He&rsquo;s putting ideas like lambdas, type inference and anonymous classes in a mainstream languages used by armies of programmers. This, to a programming language nerd like myself, is a big deal.</p>\n<p>So what&rsquo;s the motivation behind all this? Well, he started off by saying that data does not equal objects. We&rsquo;ve got data in XML, databases and all manners of weird files. Thus begat <!-- raw HTML omitted -->LINQ<!-- raw HTML omitted --> (Language Integrated Query) which makes querying data a first class citizen in C#. In doing so, you start to insinuate a declarative language inside an imperative one.</p>\n<p>During his quick tour of LINQ, Anders made a point to emphasize his idea that &ldquo;we over-specify the solution&rdquo; in our programs, leaving little room for the execution infrastructure to do intelligent things. He shows some imperative code for ordering, grouping and filtering data, basically a rats nest of loops and conditionals. Using LINQ he refactors the code down to a simple, albeit SQL-ish query.</p>\n<p>Once you&rsquo;ve declared just the essence of your program to the implementation, it can do clever things to make it go faster. For instance, there&rsquo;s a parallel version of LINQ in the works. Your average developers gets this &ldquo;for free&rdquo; by expressing his queries in LINQ. Thankfully, LINQ is just sugar for a straight-up .NET API, so the younger generation of developers who have never used SQL, let alone @malloc@ can still play. ;)</p>\n<p>When he was wrapping up, Anders made a comment that, in the future, they are looking into making languages more like services. I think this is a strategy that they share with Sun &ndash; it&rsquo;s not so much about Java or C# as the interesting runtime bits they ship with. I&rsquo;m not sure <!-- raw HTML omitted -->where<!-- raw HTML omitted --> this idea will go, but I like the sound of it.</p>\n<p>Some other great Anders pseudo-quotes:</p>\n<ul>\n<li>Pure Functional programming is fantastic&hellip;the only problem is that it doesn&rsquo;t work for real applications</li>\n<li>Transactional memory is the string theory of computer science</li>\n<li>Dynamic versus static typing is a pendulum that is currently swung towards the dynamic side. The answer is somewhere down the middle. (I think he&rsquo;s doing a pretty decent job of dragging mainstream languages towards the middle)</li>\n<li>Languages shouldn&rsquo;t solve a problem until the solutions is known. Otherwise, you just slap a bunch of crap onto your language.</li>\n</ul>\n<p>This was my favorite presentation of the week. I&rsquo;m looking forward to talking to friends who use C# about the clever programming tricks I use every day in Ruby. And it should prove fun to gang up on Java folks too! ;)</p>\n",
				"content_text": "<strong>Ding Ding Ding!</strong> We have a winner. Anders Hejlsberg is quite possibly the most clued-in designer of a mainstream programming language. The work that Anders Hejlsberg  is doing with C# is amazingly progressive and forward thinking. He's putting ideas like lambdas, type inference and anonymous classes in a mainstream languages used by armies of programmers. This, to a programming language nerd like myself, is a big deal.\n\nSo what's the motivation behind all this? Well, he started off by saying that data does not equal objects. We've got data in XML, databases and all manners of weird files. Thus begat <a href=\"http://en.wikipedia.org/wiki/Language_Integrated_Query\">LINQ</a> (Language Integrated Query) which makes querying data a first class citizen in C#. In doing so, you start to insinuate a declarative language inside an imperative one.\n\nDuring his quick tour of LINQ, Anders made a point to emphasize his idea that \"we over-specify the solution\" in our programs, leaving little room for the execution infrastructure to do intelligent things. He shows some imperative code for ordering, grouping and filtering data, basically a rats nest of loops and conditionals. Using LINQ he refactors the code down to a simple, albeit SQL-ish query.\n\nOnce you've declared just the essence of your program to the implementation, it can do clever things to make it go faster. For instance, there's a parallel version of LINQ in the works. Your average developers gets this \"for free\" by expressing his queries in LINQ. Thankfully, LINQ is just sugar for a straight-up .NET API, so the younger generation of developers who have never used SQL, let alone @malloc@ can still play. ;)\n\nWhen he was wrapping up, Anders made a comment that, in the future, they are looking into making languages more like services. I think this is a strategy that they share with Sun -- it's not so much about Java or C# as the interesting runtime bits they ship with. I'm not sure <em>where</em> this idea will go, but I like the sound of it.\n\nSome other great Anders pseudo-quotes:\n\n* Pure Functional programming is fantastic...the only problem is that it doesn't work for real applications\n* Transactional memory is the string theory of computer science\n* Dynamic versus static typing is a pendulum that is currently swung towards the dynamic side. The answer is somewhere down the middle. (I think he's doing a pretty decent job of dragging mainstream languages towards the middle)\n* Languages shouldn't solve a problem until the solutions is known. Otherwise, you just slap a bunch of crap onto your language.\n\nThis was my favorite presentation of the week. I'm looking forward to talking to friends who use C# about the clever programming tricks I use every day in Ruby. And it should prove fun to gang up on Java folks too! ;)\n",
				"date_published": "2008-04-02T22:33:12-07:00",
				"url": "https://therealadam.com/2008/04/03/anders-hejlsberg-is.html",
				"tags": ["Events","mts08"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/29/two-microsofts.html",
				"title": "Two Microsofts",
				"content_html": "<p><!-- raw HTML omitted -->Adactio: Journal—Viva<!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n",
				"content_text": "<a href=\"http://adactio.com/journal/1419\">Adactio: Journal&mdash;Viva</a>\n\n<blockquote>\n  I get the impression that there are really two Microsofts. There&rsquo;s Ray Ozzie&rsquo;s Microsoft. He&rsquo;s a geek. He gets developers. He understands technology and users. Then there&rsquo;s Steve Ballmer&rsquo;s Microsoft. He&rsquo;s an old-school businessman in the mold of Scrooge McDuck. If Ray Ozzie is calling the shots, then there is reason to be hopeful for the future. If the buck stops with Steve Ballmer however, Microsoft is f**ked.</blockquote>\n",
				"date_published": "2008-03-29T19:53:49-07:00",
				"url": "https://therealadam.com/2008/03/29/two-microsofts.html",
				"tags": ["Curated","microsoft","quotes"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/28/pretty-hiring-trends.html",
				"title": "Pretty hiring trends",
				"content_html": "<p>Pretty graphs at <!-- raw HTML omitted -->Simply Hired<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<ul>\n<li>Interesting how Ruby, Python and PHP so closely track each other</li>\n<li>I would have never guessed how close JS and C# are, especially given that one has basically no vender and really spotty implementations while the other has a massive vendor and two pretty good implementations</li>\n</ul>\n",
				"content_text": "Pretty graphs at <a href=\"http://www.simplyhired.com/trends/\">Simply Hired</a>:\n\n<!-- BEGIN TREND GRAPH --><div style=\"width:540px;\" class=\"chart\"><img src=\"http://www.simplyhired.com/a/jobtrends/graph/q-ruby,+python,+c%23,+erlang,+javascript,+php/t-line/embed\" alt=\"Ruby, Python, C#, Erlang, Javascript, Php trends\" /></div><!-- END TREND GRAPH -->\n\n* Interesting how Ruby, Python and PHP so closely track each other\n* I would have never guessed how close JS and C# are, especially given that one has basically no vender and really spotty implementations while the other has a massive vendor and two pretty good implementations\n",
				"date_published": "2008-03-28T13:49:12-07:00",
				"url": "https://therealadam.com/2008/03/28/pretty-hiring-trends.html",
				"tags": ["Curated","Biz","The System","viz"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/28/important-ideas-in.html",
				"title": "Important ideas in ASP.NET MVC",
				"content_html": "<p>In a former life, I worked in a Microsoft shop. So I&rsquo;m not completely foreign to the Microsoft development tool landscape. At the time, C# and .NET were just slightly better than Java, from my perspective as a language nerd. Lucky for me, I haven&rsquo;t done extensive work in J2EE frameworks <!-- raw HTML omitted -->or<!-- raw HTML omitted --> ASP.NET so I have no frame of reference for how they compared at the time.</p>\n<p>Given my obvious interest in languages, frameworks and how that affects what programmers build, I enjoyed hearing about the new <!-- raw HTML omitted -->ASP.NET MVC<!-- raw HTML omitted --> framework from <!-- raw HTML omitted -->Scott Guthrie<!-- raw HTML omitted -->. The most promising thing about this tool, to me, is that MS is guiding people down the unit testing path by default. I don&rsquo;t know if any other Visual Studio tools are doing this, but it&rsquo;s a pretty big deal to me. I think that right now only the most enthusiastic programmers do some any form of TDD or BDD. Putting it in the hands of &ldquo;vocational&rdquo; programmers has the promise to significantly raise the state of the art in programming. As a side note, it was interesting to observe that 40-50% of the audience raised their hand about doing TDD and 33-50% raised their hand for using an MVC framework.</p>\n<p>The framework itself is nothing surprising if you&rsquo;ve looked at Rails, Django, CodeIgniter, et. al. What was interesting to me is to see how the framework is colored by running in the CLR. On the plus side, you get LINQ and a really good VM. On the downside, you have to use <!-- raw HTML omitted -->for<!-- raw HTML omitted --> loops and nullable types (wink, nudge). The rest is pretty much what you&rsquo;d expect to see when you transliterate an MVC framework to C#, though they did display some creativity in making it decent to look at in terms of code style.</p>\n<p>There was a pretty strong message that the tool is cross-platform (works with Mono) and cross-language. You can write a model in C#, a controller in Ruby and a view in Python. Scott even suggested that you could write unit tests in PHP, to which I thought, &ldquo;PLEASE GOD NO!&rdquo;</p>\n<p>Scott a somewhat typical response, &ldquo;Hey, I did this in Smalltalk in 1974!&rdquo; &ndash; funny because it&rsquo;s true. He also acknowledged its not for everyone. Some people need a car and some people need a motorcycle. Even so, the ideas that MS is putting in front of <em>a ton</em> of programmers are progressive and important. That&rsquo;s the most important part to me.</p>\n",
				"content_text": "In a former life, I worked in a Microsoft shop. So I'm not completely foreign to the Microsoft development tool landscape. At the time, C# and .NET were just slightly better than Java, from my perspective as a language nerd. Lucky for me, I haven't done extensive work in J2EE frameworks <em>or</em> ASP.NET so I have no frame of reference for how they compared at the time.\n\nGiven my obvious interest in languages, frameworks and how that affects what programmers build, I enjoyed hearing about the new <a href=\"http://www.asp.net/mvc/\">ASP.NET MVC</a> framework from <a href=\"http://weblogs.asp.net/scottgu/\">Scott Guthrie</a>. The most promising thing about this tool, to me, is that MS is guiding people down the unit testing path by default. I don't know if any other Visual Studio tools are doing this, but it's a pretty big deal to me. I think that right now only the most enthusiastic programmers do some any form of TDD or BDD. Putting it in the hands of \"vocational\" programmers has the promise to significantly raise the state of the art in programming. As a side note, it was interesting to observe that 40-50% of the audience raised their hand about doing TDD and 33-50% raised their hand for using an MVC framework.\n\nThe framework itself is nothing surprising if you've looked at Rails, Django, CodeIgniter, et. al. What was interesting to me is to see how the framework is colored by running in the CLR. On the plus side, you get LINQ and a really good VM. On the downside, you have to use <code>for</code> loops and nullable types (wink, nudge). The rest is pretty much what you'd expect to see when you transliterate an MVC framework to C#, though they did display some creativity in making it decent to look at in terms of code style.\n\nThere was a pretty strong message that the tool is cross-platform (works with Mono) and cross-language. You can write a model in C#, a controller in Ruby and a view in Python. Scott even suggested that you could write unit tests in PHP, to which I thought, \"PLEASE GOD NO!\"\n\nScott a somewhat typical response, \"Hey, I did this in Smalltalk in 1974!\" -- funny because it's true. He also acknowledged its not for everyone. Some people need a car and some people need a motorcycle. Even so, the ideas that MS is putting in front of _a ton_ of programmers are progressive and important. That's the most important part to me.\n",
				"date_published": "2008-03-28T11:32:59-07:00",
				"url": "https://therealadam.com/2008/03/28/important-ideas-in.html",
				"tags": ["Events","mts08","frameworks"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/27/do-want.html",
				"title": "DO WANT",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Aye. I do.</p>\n",
				"content_text": "<div class=\"center\">\n<p><a href=\"http://www.etsy.com/view_listing.php?listing_id=9685450\"><img src=\"http://image1.etsy.com/il_fullxfull.19943761.jpg\" alt=\"Desmond t-shirt!\" /></a></p>\n</div>\n\n<blockquote>\n  D'ye need a <a href=\"http://www.etsy.com/view_listing.php?listing_id=9685450\">new T-shirt</a>, brother?\n</blockquote>\n\nAye. I do.\n",
				"date_published": "2008-03-27T14:00:13-07:00",
				"url": "https://therealadam.com/2008/03/27/do-want.html",
				"tags": ["Curated","lost"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/27/open-source-and.html",
				"title": "Open Source and Research at Microsoft",
				"content_html": "<p>So, as I&rsquo;ve alluded, I&rsquo;m at Microsoft Intergalactic Headquarters this week for the Microsoft Technology Summit. The crux of the biscuit here is to invite people from communities not using Microsoft technology and show them what Microsoft is up to.</p>\n<p>There&rsquo;s particular emphasis on what MS is doing in the Open Source Software space. <!-- raw HTML omitted -->Sam Ramji<!-- raw HTML omitted --> opened up the event to give us a sort of rundown on what MS is now doing in OSS and interoperability. I was unaware that IIS7 will support PHP, that MS is changing their practices to suit the Samba project or that HyperV will, in part get released as OSS.</p>\n<p>Sam mentioned that he is committed to not confusing Open Source and Shared Source. It&rsquo;s a slight distinction to most people but it really tends to rankle those who know the difference. I think he best summed it up by saying <!-- raw HTML omitted -->OSS at MS<!-- raw HTML omitted --> is in year 3 of a 10 year project and to judge it by what they actually do, and not their overtures (big nod to Ballmer rattling sabers about OSS and patent litigation).</p>\n<p>Next up, <!-- raw HTML omitted -->Kevin Schofield<!-- raw HTML omitted --> showed off some of the work <!-- raw HTML omitted -->MS Research<!-- raw HTML omitted --> has been doing. His first point was that research <!-- raw HTML omitted -->does<!-- raw HTML omitted --> pay off. Research money into technologies like VLSI, databases, parallel databases and workstations have yielded multi-billion dollar industries. Projects that start out as pure academics can evolve into major players such as Oracle and Sun.</p>\n<p>MS Research&rsquo;s mission is to advance the state of the CS art and ensure that MS has a future. By the latter, he means that MSR is a hedge on the company&rsquo;s agility. They don&rsquo;t want to turn a corner and find customers demanding something that MS doesn&rsquo;t know about.</p>\n<p>To this end, they hire the best researchers around and then don&rsquo;t tell them what to do. In this way, they refer to themselves as the &ldquo;world&rsquo;s largest CS department&rdquo;. However, knowledge transfer is critical. If they don&rsquo;t transfer technology to the product groups, what they&rsquo;ve done is useless.</p>\n<p>I found it very interesting that Kevin said &ldquo;tech transfer is a social process.&rdquo; For this reason, he specifically hires people with good relationship management. People Hacks at work ya&rsquo;ll!</p>\n",
				"content_text": "So, as I've alluded, I'm at Microsoft Intergalactic Headquarters this week for the Microsoft Technology Summit. The crux of the biscuit here is to invite people from communities not using Microsoft technology and show them what Microsoft is up to.\n\nThere's particular emphasis on what MS is doing in the Open Source Software space. <a href=\"http://samus.typepad.com/\">Sam Ramji</a> opened up the event to give us a sort of rundown on what MS is now doing in OSS and interoperability. I was unaware that IIS7 will support PHP, that MS is changing their practices to suit the Samba project or that HyperV will, in part get released as OSS.\n\nSam mentioned that he is committed to not confusing Open Source and Shared Source. It's a slight distinction to most people but it really tends to rankle those who know the difference. I think he best summed it up by saying <a href=\"http://microsoft.com/opensource\">OSS at MS</a> is in year 3 of a 10 year project and to judge it by what they actually do, and not their overtures (big nod to Ballmer rattling sabers about OSS and patent litigation).\n\nNext up, <a href=\"http://research.microsoft.com/users/kevinsch/default.aspx\">Kevin Schofield</a> showed off some of the work <a href=\"http://research.microsoft.com/\">MS Research</a> has been doing. His first point was that research <em>does</em> pay off. Research money into technologies like VLSI, databases, parallel databases and workstations have yielded multi-billion dollar industries. Projects that start out as pure academics can evolve into major players such as Oracle and Sun.\n\nMS Research's mission is to advance the state of the CS art and ensure that MS has a future. By the latter, he means that MSR is a hedge on the company's agility. They don't want to turn a corner and find customers demanding something that MS doesn't know about.\n\nTo this end, they hire the best researchers around and then don't tell them what to do. In this way, they refer to themselves as the \"world's largest CS department\". However, knowledge transfer is critical. If they don't transfer technology to the product groups, what they've done is useless.\n\nI found it very interesting that Kevin said \"tech transfer is a social process.\" For this reason, he specifically hires people with good relationship management. People Hacks at work ya'll!\n",
				"date_published": "2008-03-27T12:57:10-07:00",
				"url": "https://therealadam.com/2008/03/27/open-source-and.html",
				"tags": ["peoplehacks","Events","mts08"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/26/warm-water-makes.html",
				"title": "Warm water makes the world go \u0026#39;round",
				"content_html": "<p>I&rsquo;ve been doing &ldquo;very detailed&rdquo; research on the correlation between the time it takes to get hot water in public bathroom sinks and affluence. Signs point to a strong correlation between the two. Shocking, I know!</p>\n<p><!-- raw HTML omitted -->Microsoft<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Austin Ventures'<!-- raw HTML omitted --> buildings have almost instant hot water. Generic office buildings take a while.  My bathroom at home: 60 seconds of astonishingly cold water.</p>\n",
				"content_text": "I've been doing \"very detailed\" research on the correlation between the time it takes to get hot water in public bathroom sinks and affluence. Signs point to a strong correlation between the two. Shocking, I know!\n\n<a href=\"http://www.microsoft.com/\">Microsoft</a> and <a href=\"http://www.austinventures.com/\">Austin Ventures'</a> buildings have almost instant hot water. Generic office buildings take a while.  My bathroom at home: 60 seconds of astonishingly cold water.\n",
				"date_published": "2008-03-26T17:00:09-07:00",
				"url": "https://therealadam.com/2008/03/26/warm-water-makes.html",
				"tags": ["Curated","Expanded ideas","humor","mts08","pointless_info"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/26/my-dog-misses.html",
				"title": "My dog misses me",
				"content_html": "<p>I&rsquo;m at the Microsoft Technology Summit this week.</p>\n<!-- raw HTML omitted -->\n<p>Of course, Fred misses me (and I miss him!), so he&rsquo;s sleeping on my pillow to keep it warm.</p>\n",
				"content_text": "I'm at the Microsoft Technology Summit this week.\n\n<div class=\"center\">\n<img src=\"http://farm3.static.flickr.com/2172/2363256645_a45bc4a9fb_d.jpg\" alt=\"Fred, sleeping on my pillow\" />\n</div>\n\nOf course, Fred misses me (and I miss him!), so he's sleeping on my pillow to keep it warm.\n",
				"date_published": "2008-03-26T13:06:01-07:00",
				"url": "https://therealadam.com/2008/03/26/my-dog-misses.html",
				"tags": ["Curated","Dogs, cats, et cetera","dachshund","fred","mts08"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/25/tough-cs-illustrated.html",
				"title": "Tough CS illustrated",
				"content_html": "<p><!-- raw HTML omitted -->Greg<!-- raw HTML omitted -->, who I don&rsquo;t think has formal CS training, has been making some great illustrations of some of the harder ideas in operating systems and concurrency.</p>\n<!-- raw HTML omitted -->\n<p>You can find more sprinkled throughout his lovely little <!-- raw HTML omitted -->tumblelog<!-- raw HTML omitted -->.</p>\n",
				"content_text": "<a href=\"http://www.urbanhonking.com/ideasfordozens/\">Greg</a>, who I don't think has formal CS training, has been making some great illustrations of some of the harder ideas in operating systems and concurrency.\n\n<div class=\"thumbnail center\"><a href=\"http://skitch.com/atduskgreg/eedw/skitched-20080324-145943\"><img src=\"http://img.skitch.com/20080325-qg5tqdm3gnaqw4nqbt47ir48wm.preview.jpg\" alt=\"skitched-20080324-145943.jpg\" /></a><br /><span style=\"font-family:Lucida Grande, Trebuchet, sans-serif, Helvetica, Arial;font-size:10px;color:#808080;\">Uploaded with <a href=\"http://plasq.com/\">plasq</a>'s <a href=\"http://skitch.com\">Skitch</a>!</span></div>\n\nYou can find more sprinkled throughout his lovely little <a href=\"http://idfdz.tumblr.com/\">tumblelog</a>.\n",
				"date_published": "2008-03-25T08:41:56-07:00",
				"url": "https://therealadam.com/2008/03/25/tough-cs-illustrated.html",
				"tags": ["Curated","illustration"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/24/write-a-script.html",
				"title": "Write a script in April for Script Frenzy",
				"content_html": "<p><!-- raw HTML omitted -->Script Frenzy<!-- raw HTML omitted --> &ndash; wherein one writes a script in the month of April. I&rsquo;m tempted to take part, though I&rsquo;m sure it&rsquo;d would end up in detriment to all the other plates I have spinning.</p>\n",
				"content_text": "<a href=\"http://www.scriptfrenzy.org/\">Script Frenzy</a> -- wherein one writes a script in the month of April. I'm tempted to take part, though I'm sure it'd would end up in detriment to all the other plates I have spinning.\n",
				"date_published": "2008-03-24T20:36:36-07:00",
				"url": "https://therealadam.com/2008/03/24/write-a-script.html",
				"tags": ["Curated","Comedy, haha","humor","writing"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/19/fix-subversion-conflicts.html",
				"title": "Fix Subversion conflicts",
				"content_html": "<p>Got a case where you did a @svn up@ and now you have a bunch of conflicts where you just want to overwrite your changes? I&rsquo;ve got a little bit of Ruby cleverness for you:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I run this from @irb@ at the root of my Subversion working directory. It makes me happy.</p>\n<p><!-- raw HTML omitted -->Update<!-- raw HTML omitted -->: lord that looks ugly on one line!</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n",
				"content_text": "Got a case where you did a @svn up@ and now you have a bunch of conflicts where you just want to overwrite your changes? I've got a little bit of Ruby cleverness for you:\n\n<pre><code>\n  `svn status`.split(\"\\n\").grep(/^C/).map { |c| c.scan(/\\S+/).last }.each { |c| `svn cat #{c} &gt; #{c} &amp;&amp; svn resolved #{c}` }\n</code></pre>\n\nI run this from @irb@ at the root of my Subversion working directory. It makes me happy.\n\n<em>Update</em>: lord that looks ugly on one line!\n\n<pre><code>\n  status = `svn status`.split(\"\\n\")\n  conflicts = status.grep(/^C/)\n  files = conflicts.map { |c| c.scan(/\\S+/).last }\n  conflicts.each do |c|\n    `svn cat #{c} &gt; #{c} &amp;&amp; svn resolved #{c}`\n  end\n</code></pre>\n",
				"date_published": "2008-03-19T13:54:54-07:00",
				"url": "https://therealadam.com/2008/03/19/fix-subversion-conflicts.html",
				"tags": ["Curated","ruby","subversion"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/18/keep-your-pants.html",
				"title": "Keep your pants on",
				"content_html": "<p>A teaser of what I&rsquo;m working on instead of writing:</p>\n<!-- raw HTML omitted -->\n<p>Please, keep your pants on.</p>\n",
				"content_text": "A teaser of what I'm working on instead of writing:\n\n<div class=\"center\">\n  <img src=\"http://therealadam.com/wp-content/uploads/2008/03/are-the-mavericks-1.jpg\" alt=\"NO\" border=\"0\" width=\"235\" height=\"123\" />\n</div>\n\nPlease, keep your pants on.\n",
				"date_published": "2008-03-18T21:25:36-07:00",
				"url": "https://therealadam.com/2008/03/18/keep-your-pants.html",
				"tags": ["Curated","microapp","teaser"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/06/git-is-nouns.html",
				"title": "Git is nouns and verbs",
				"content_html": "<!-- raw HTML omitted -->\n<p>&ndash; <!-- raw HTML omitted -->Avery Pennarun<!-- raw HTML omitted -->, <!-- raw HTML omitted -->Git is the next Unix<!-- raw HTML omitted --></p>\n",
				"content_text": "<blockquote>\nGit was originally not a version control system; it was designed to be the infrastructure so that someone else could build one on top. And they did; nowadays there are more than 100 git-* commands installed along with git. It's scary and confusing and weird, but what that means is git is a platform. It's a new set of nouns and verbs that we never had before. Having new nouns and verbs means we can invent entirely new things that we previously couldn't do.\n</blockquote>\n\n-- <a href=\"http://alumnit.ca/~apenwarr/\">Avery Pennarun</a>, <a href=\"http://www.advogato.org/person/apenwarr/diary/371.html\">Git is the next Unix</a>\n",
				"date_published": "2008-03-06T12:05:30-07:00",
				"url": "https://therealadam.com/2008/03/06/git-is-nouns.html",
				"tags": ["Curated","git"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/06/geek-spring-break.html",
				"title": "Geek spring break",
				"content_html": "<p>For the fourth time, I&rsquo;m at the annual geek retreat in Austin. Since I went when it was but 300 people, I&rsquo;m obliged to marvel at how big the conference is getting. I remember when we had to walk uphill, through the snow, both ways, <em>on fire</em>, to get to every panel.</p>\n<p>This year, I&rsquo;m going to retire the hoodie I got five years ago wen I first attended SXSW. It&rsquo;s a big deal, mind you. FYI.</p>\n<p>Anyhow, I&rsquo;ll attend a subset of <!-- raw HTML omitted -->these sessions<!-- raw HTML omitted -->, if you&rsquo;re curious. I&rsquo;m hoping on &ldquo;attending&rdquo; the &ldquo;hallway track&rdquo; more often this year. Also, I&rsquo;m going to take the leap and not bring my laptop with me. Just a Moleskine and <!-- raw HTML omitted -->my trusty tricorder<!-- raw HTML omitted -->.</p>\n<p>More importantly I&rsquo;m going to the <!-- raw HTML omitted -->Austin on Rails Happy Hour<!-- raw HTML omitted --> and playing at the <!-- raw HTML omitted -->Rock Band party<!-- raw HTML omitted --> with <!-- raw HTML omitted -->The Rural Jurors<!-- raw HTML omitted -->.</p>\n<p>If you aren&rsquo;t are coming, I will continually lament your absence. Otherwise, I look forward to seeing you there!</p>\n",
				"content_text": "For the fourth time, I'm at the annual geek retreat in Austin. Since I went when it was but 300 people, I'm obliged to marvel at how big the conference is getting. I remember when we had to walk uphill, through the snow, both ways, *on fire*, to get to every panel.\n\nThis year, I'm going to retire the hoodie I got five years ago wen I first attended SXSW. It's a big deal, mind you. FYI.\n\nAnyhow, I'll attend a subset of <a href=\"http://sched.org/sxsw2008/therealadam\">these sessions</a>, if you're curious. I'm hoping on \"attending\" the \"hallway track\" more often this year. Also, I'm going to take the leap and not bring my laptop with me. Just a Moleskine and <a href=\"http://www.apple.com/iphone/\">my trusty tricorder</a>.\n\nMore importantly I'm going to the <a href=\"http://austinonrails.org/articles/2008/03/04/austin-on-rails-sxsw-happy-hour\">Austin on Rails Happy Hour</a> and playing at the <a href=\"http://sxsw.tumblr.com/\">Rock Band party</a> with <a href=\"http://courtneypo.com/sxsw.html\">The Rural Jurors</a>.\n\nIf you aren't are coming, I will continually lament your absence. Otherwise, I look forward to seeing you there!\n",
				"date_published": "2008-03-06T07:38:41-07:00",
				"url": "https://therealadam.com/2008/03/06/geek-spring-break.html",
				"tags": ["fiveruns","misc:30_rock","Events","sxsw"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/05/the-american-dream.html",
				"title": "The American Dream, LOL\u0026#39;d",
				"content_html": "<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->loldogs are funny dog pictures!<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"http://ihasahotdog.com/2008/02/29/funny-dog-pictures-big-dreamz-i-haz-dem/\"><img src=\"http://ihasahotdog.wordpress.com/files/2008/02/bigdreamziha128456747985625000.jpg\" alt=\"funny dog pictures\" /></a><br /><a href=\"http://ihasahotdog.com\">loldogs are funny dog pictures!</a>\n",
				"date_published": "2008-03-05T14:52:44-07:00",
				"url": "https://therealadam.com/2008/03/05/the-american-dream.html",
				"tags": ["Curated","humor","dogs"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/05/you-can-patent.html",
				"title": "You can patent things that don\u0026#39;t exist",
				"content_html": "<p>The <!-- raw HTML omitted -->ear worm<!-- raw HTML omitted --> things from <!-- raw HTML omitted -->Star Trek II: The Wrath of Khan<!-- raw HTML omitted --> are <!-- raw HTML omitted -->patented<!-- raw HTML omitted -->. The obvious punchline:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "The <a href=\"http://memory-alpha.org/en/wiki/Ceti_eel\">ear worm</a> things from <em>Star Trek II: The Wrath of Khan</em> are <a href=\"http://memory-alpha.org/en/wiki/Design_patents\">patented</a>. The obvious punchline:\n\n<div class=\"center\" style=\"font-size:300%;\">\n  <a href=\"http://www.khaaan.com/\">RODDENBERRY!!!!!</a>\n</div>\n",
				"date_published": "2008-03-05T13:27:57-07:00",
				"url": "https://therealadam.com/2008/03/05/you-can-patent.html",
				"tags": ["Comedy, haha","humor"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/05/science.html",
				"title": "SCIENCE",
				"content_html": "<!-- raw HTML omitted -->\n<p>&ndash; <!-- raw HTML omitted -->Tom Preston Werner<!-- raw HTML omitted --> on <!-- raw HTML omitted -->God&rsquo;s memory leak<!-- raw HTML omitted --></p>\n",
				"content_text": "<blockquote>\n  All I can say is SCIENCE!\n</blockquote>\n\n-- <a href=\"http://rubyisawesome.com/\">Tom Preston Werner</a> on <a href=\"http://groups.google.com/group/god-rb/browse_thread/thread/01cca2b7c4a581c2\">God's memory leak</a>\n",
				"date_published": "2008-03-05T08:41:58-07:00",
				"url": "https://therealadam.com/2008/03/05/science.html",
				"tags": ["Curated","ruby","science"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/04/summertime-blues.html",
				"title": "Summertime Blues",
				"content_html": "<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->&ldquo;Summertime Blues&rdquo;<!-- raw HTML omitted --> The Who (originally Eddie Cochran)</p>\n",
				"content_text": "<div class=\"center\">\n[youtube=http://www.youtube.com/watch?v=t5euZ3YWLXQ&amp;rel=0]\n</div>\n\n<a href=\"http://youtube.com/watch?v=t5euZ3YWLXQ\">\"Summertime Blues\"</a> The Who (originally Eddie Cochran)\n",
				"date_published": "2008-03-04T16:17:36-07:00",
				"url": "https://therealadam.com/2008/03/04/summertime-blues.html",
				"tags": ["Music","Pop Culture","Curated","the_who"]
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/04/nonchalantly-rocking.html",
				"title": "Non-chalantly rocking",
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<div class=\"center\">\n  <a href=\"http://flickr.com/photos/courtney/1926595668/\"><img src=\"http://farm3.static.flickr.com/2096/1926595668_c60ab18e57_d.jpg\" alt=\"Me, rocking\" /></a>\n</div>\n",
				"date_published": "2008-03-04T10:08:07-07:00",
				"url": "https://therealadam.com/2008/03/04/nonchalantly-rocking.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/03/04/rands-helps-you.html",
				"title": "Rands helps you with your presentations",
				"content_html": "<p><!-- raw HTML omitted -->Out Loud<!-- raw HTML omitted -->. Conference season looms, folks. Rands is here to help.</p>\n",
				"content_text": "<a href=\"http://www.randsinrepose.com/archives/2008/02/03/out_loud.html\">Out Loud</a>. Conference season looms, folks. Rands is here to help.\n",
				"date_published": "2008-03-04T08:01:00-07:00",
				"url": "https://therealadam.com/2008/03/04/rands-helps-you.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/28/cosmic-classnew.html",
				"title": "Cosmic Class.new",
				"content_html": "<p>Reading the sources of <!-- raw HTML omitted --><!-- raw HTML omitted -->test/spec<!-- raw HTML omitted --><!-- raw HTML omitted --> inspired me to write a <!-- raw HTML omitted -->whole post about <!-- raw HTML omitted -->Class.new<!-- raw HTML omitted --> on the FiveRuns weblog<!-- raw HTML omitted -->. Unintentionally, I ended up channelling the style of <!-- raw HTML omitted -->Err The Blog<!-- raw HTML omitted --> in writing that post. Now, <!-- raw HTML omitted -->Chris Wanswrath<!-- raw HTML omitted --> has posted a little ditty, <!-- raw HTML omitted -->test/spec/mini<!-- raw HTML omitted -->, that uses <!-- raw HTML omitted -->Class.new<!-- raw HTML omitted -->.</p>\n<p>The &ldquo;Circle Of <code>Class.new</code>&rdquo; is complete, we can all go back to our normal lives. Also, <code>Class.new</code> totally has a man on your boat.</p>\n",
				"content_text": "Reading the sources of <s><a href=\"http://test-spec.rubyforge.org/test-spec/\">test/spec</a></s> inspired me to write a <a href=\"https://web.archive.org/web/20080330080825/http://blog.fiveruns.com/2008/2/27/the-joy-of-class-new\">whole post about <code>Class.new</code> on the FiveRuns weblog</a>. Unintentionally, I ended up channelling the style of <a href=\"http://errtheblog.com/\">Err The Blog</a> in writing that post. Now, <a href=\"http://ozmm.org/\">Chris Wanswrath</a> has posted a little ditty, <a href=\"http://pastie.caboo.se/158871\">test/spec/mini</a>, that uses <code>Class.new</code>.\n\nThe \"Circle Of `Class.new`\" is complete, we can all go back to our normal lives. Also, `Class.new` totally has a man on your boat.\n",
				"date_published": "2008-02-28T15:35:54-07:00",
				"url": "https://therealadam.com/2008/02/28/cosmic-classnew.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/13/teamwork-antipattern-the.html",
				"title": "Teamwork anti-pattern: the edge case",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>After reading this, I immediately realized the Edge Case is definitely an anti-pattern of teamwork. I&rsquo;ve observed, suffered and inflicted this particular tactic countless times in the past.</p>\n<p>Tackling this one is three-pronged:</p>\n<ul>\n<li><!-- raw HTML omitted -->Recognize it.<!-- raw HTML omitted --> When someone points out an edge-case, quickly try to establish with the rest of the team whether this occurrence is as rare as you think it is or whether its truly important.</li>\n<li><!-- raw HTML omitted -->Neutralize it.<!-- raw HTML omitted --> If it really is a corner case, mark it as such and get back to making <!-- raw HTML omitted -->actual progress<!-- raw HTML omitted -->.</li>\n<li><!-- raw HTML omitted -->Bury it.<!-- raw HTML omitted --> Should you throw something out there and find its really an edge case, let it go. Don&rsquo;t be <!-- raw HTML omitted -->that<!-- raw HTML omitted --> guy.</li>\n</ul>\n<p>&ldquo;But Adam&rdquo;, you say. &ldquo;It would be really embarrassing if we omitted a condition for the Blurbleflaster Case!&rdquo; Well, I couldn&rsquo;t even <!-- raw HTML omitted -->find<!-- raw HTML omitted --> the Blurbleflaster Case in Wikipedia! So, if someone finds that we&rsquo;ve omitted it, then they get the prize; it won&rsquo;t be the end of the world. We should probably implement that whole social network thing first anyway.</p>\n",
				"content_text": "<p><a href=\"https://web.archive.org/web/20080827190632/http://www.blueflavor.com/blog/thinking/edge_cases_are_the_root_of_all_evil.php\">Edge Cases are the Root of all Evil</a>:</p>\n\n<blockquote>\n\"I've learned over the years that Edge Cases are not meant to be normal rationale or a casual reminder of some odd circumstance that you've neglected. Rather, they usually represent an attempt by someone else to gain, show or exert power in a situation. I'll explain.\"\n</blockquote>\n\nAfter reading this, I immediately realized the Edge Case is definitely an anti-pattern of teamwork. I've observed, suffered and inflicted this particular tactic countless times in the past.\n\nTackling this one is three-pronged:\n\n* <em>Recognize it.</em> When someone points out an edge-case, quickly try to establish with the rest of the team whether this occurrence is as rare as you think it is or whether its truly important.\n* <em>Neutralize it.</em> If it really is a corner case, mark it as such and get back to making <em>actual progress</em>.\n* <em>Bury it.</em> Should you throw something out there and find its really an edge case, let it go. Don't be <em>that</em> guy.\n\n\"But Adam\", you say. \"It would be really embarrassing if we omitted a condition for the Blurbleflaster Case!\" Well, I couldn't even <em>find</em> the Blurbleflaster Case in Wikipedia! So, if someone finds that we've omitted it, then they get the prize; it won't be the end of the world. We should probably implement that whole social network thing first anyway.\n",
				"date_published": "2008-02-13T14:52:03-07:00",
				"url": "https://therealadam.com/2008/02/13/teamwork-antipattern-the.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/06/i-like-rails.html",
				"title": "I Like Rails 2",
				"content_html": "<p>Tonight I gave a presentation on Rails 2 at <!-- raw HTML omitted -->Dallas.rb<!-- raw HTML omitted -->. Within, I note some of my favorite new things in Rails 2. Some things small, some things large.</p>\n<!-- raw HTML omitted -->\n<p>If you weren&rsquo;t there, I should probably explain a couple of the slides. I think Rails 2 is, despite its whole-numberness, an evolutionary release. It makes the Rails &ldquo;language&rdquo; smoother around the edges. Granted, its still somewhat blob-esque, but its getter rounder. I dig it.</p>\n<p>Besides that, I think Active Resource, or ARes as they call it in the biz, is going to prove useful mostly behind the firewall in your datacenter. As you build more and more applications, you&rsquo;ll find you need to use resources across multiple apps. This is exactly where ARes shines &ndash; providing a common user service, for example.</p>\n<p><!-- raw HTML omitted -->You can download <!-- raw HTML omitted -->I Like Rails 2<!-- raw HTML omitted --> it if you missed it or, for some reason I can&rsquo;t even fathom, aren&rsquo;t even in Dallas.<!-- raw HTML omitted --></p>\n",
				"content_text": "Tonight I gave a presentation on Rails 2 at <a href=\"http://dallasrb.org\">Dallas.rb</a>. Within, I note some of my favorite new things in Rails 2. Some things small, some things large.\n\n<img src=\"uploads/2024/7a42e04717.jpg\" width=\"432\" height=\"138\" alt=\"\">\n\nIf you weren't there, I should probably explain a couple of the slides. I think Rails 2 is, despite its whole-numberness, an evolutionary release. It makes the Rails \"language\" smoother around the edges. Granted, its still somewhat blob-esque, but its getter rounder. I dig it.\n\nBesides that, I think Active Resource, or ARes as they call it in the biz, is going to prove useful mostly behind the firewall in your datacenter. As you build more and more applications, you'll find you need to use resources across multiple apps. This is exactly where ARes shines -- providing a common user service, for example.\n\n<s>You can download <a href=\"http://therealadam.com/wp-content/uploads/2008/02/ilikerails2.pdf\" title=\"I Like Rails 2\">I Like Rails 2</a> it if you missed it or, for some reason I can't even fathom, aren't even in Dallas.</s>\n",
				"date_published": "2008-02-05T22:15:43-07:00",
				"url": "https://therealadam.com/2008/02/06/i-like-rails.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/04/getting-ahead-on.html",
				"title": "Getting ahead on Git",
				"content_html": "<p><!-- raw HTML omitted -->Git<!-- raw HTML omitted -->.  Soon, you&rsquo;ll be using it, too. The definition of &ldquo;soon&rdquo; probably varies widely depending on what kind of person you are. But, no better time than now to start getting acquainted with the idea.</p>\n<!-- raw HTML omitted -->\n<p>Finally, what I really wanted to do here was publicly commend Dr. Nic Williams for his adept use at Star Wars metaphor and humanization of Grand Moff Tarkin in his post on <!-- raw HTML omitted -->using Git to manage the new Rails TextMate bundle<!-- raw HTML omitted --> (Ed. now 404). Well done, sir. I owe you a frosty one.</p>\n<p><!-- raw HTML omitted -->Ed. revised Feb 15, 2025. URLs updated or noted as 404, copy left intact. What a time-capsule!<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"https://git-scm.com\">Git</a>.  Soon, you'll be using it, too. The definition of \"soon\" probably varies widely depending on what kind of person you are. But, no better time than now to start getting acquainted with the idea.\n\n<ul>\n  <li>If you're currently a Subversion user, and who isn't, then try the <a href=\"https://git-scm.com/course/svn.html\">Git tutorial for Subversion users</a> <em>(Ed. now 404)</em>.</li>\n  <li>There's a <a href=\"http://peepcode.com/products/git\">Peepcode screencast on using Git</a>(Ed. now 404).</li>\n  <li>Git is pretty deeply hacker stuff and the default <code>gitk</code> UI is uglier than sin. However, <a href=\"http://ozmm.org/\">Chris Wanswrath</a> and <a href=\"http://https://tom.preston-werner.com\">Tom Preston-Werner</a> are adding some beauty to the equation with <a href=\"http://github.com/\">github</a>.</li>\n</ul>\n\nFinally, what I really wanted to do here was publicly commend Dr. Nic Williams for his adept use at Star Wars metaphor and humanization of Grand Moff Tarkin in his post on <a href=\"http://drnicwilliams.com/2008/02/03/using-git-within-a-team/\">using Git to manage the new Rails TextMate bundle</a> (Ed. now 404). Well done, sir. I owe you a frosty one.\n\n<em>Ed. revised Feb 15, 2025. URLs updated or noted as 404, copy left intact. What a time-capsule!</em>\n",
				"date_published": "2008-02-04T11:19:30-07:00",
				"url": "https://therealadam.com/2008/02/04/getting-ahead-on.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/03/the-mint-logo.html",
				"title": "The Mint logo, geometric beauty",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Frickin' genius.</p>\n<p><!-- raw HTML omitted -->Ed. revised Feb 15, 2025. No notes.<!-- raw HTML omitted --></p>\n",
				"content_text": "<p><a href=\"http://www.flickr.com/photos/shauninman/2234495711/\">Geometry of the Mint logo</a>:\n\n<div style=\"text-align:center;\">\n  <img src=\"http://farm3.static.flickr.com/2033/2234495711_502a1b0f46_d.jpg\" alt=\"The Mint Logo with interesting annotation\">\n</div>\n\nFrickin' genius.\n\n<em>Ed. revised Feb 15, 2025. No notes.</em>\n",
				"date_published": "2008-02-03T20:25:27-07:00",
				"url": "https://therealadam.com/2008/02/03/the-mint-logo.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/01/what-good-could.html",
				"title": "What good could come from MicroYahoo?",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>So everyone&rsquo;s probably gonna spill ink on this one. Understandably &ndash; in Flickr, Upcoming and del.icio.us you&rsquo;ve got three of the most trusted and loved sites out in their respective communities. In addition, there&rsquo;s a lot of respected people, both in web development and open source, at Yahoo. Joining Microsoft, an organization with minimal respect in the web development and open source communities, would reduce those people&rsquo;s cred right out of the gate.</p>\n<p>Were this bid successful, here&rsquo;s what I hope would happen. Microsoft uses it as an opportunity to rebuild organizationally. Bury the hatchet with open source and open up the development of Internet Explorer. Yahoo continues building apps like Flickr and del.icio.us like they always have. A rewrite on .NET technologies isn&rsquo;t imposed like it was on Hotmail. In the end, Microsoft becomes an organization where closed source, proprietary development can flourish with open source, standards-based processes.</p>\n<p>This is wild guessing on my part. That said, if you look at Microsoft, its clear they are having major execution problems. Xbox is the only group that is widely successful and even they have hardware problems. All the other groups are missing timelines and customer/developer expectations. Just like Yahoo was before they picked up Flickr, del.icio.us, Upcoming, etc.</p>\n<p>If Yahoo can make acquisitions to rebuild their culture, perhaps Microsoft can too.</p>\n<p><!-- raw HTML omitted -->Ed. revised Feb 15, 2025. Turns out this didn&rsquo;t happen, but my predictions did reify with the Microsoft acquisition of GitHub. Also, it&rsquo;s hard to remember the moment when Yahoo was ascendant! Take care what you wish for?<!-- raw HTML omitted --></p>\n",
				"content_text": "<p><a href=\"http://money.cnn.com/news/newsfeeds/articles/prnewswire/NYF04001022008-1.htm\">Microsoft Proposes Acquisition of Yahoo! for $31 per Share</a>:</p>\n\n<blockquote>\nREDMOND, Wash., Feb. 1 -- Microsoft Corp. today announced that it has made a proposal to the Yahoo! Inc. Board of Directors to acquire all the outstanding shares of Yahoo! common stock for per share consideration of $31 representing a total equity value of approximately $44.6 billion.\n</blockquote>\n\nSo everyone's probably gonna spill ink on this one. Understandably -- in Flickr, Upcoming and del.icio.us you've got three of the most trusted and loved sites out in their respective communities. In addition, there's a lot of respected people, both in web development and open source, at Yahoo. Joining Microsoft, an organization with minimal respect in the web development and open source communities, would reduce those people's cred right out of the gate.\n\nWere this bid successful, here's what I hope would happen. Microsoft uses it as an opportunity to rebuild organizationally. Bury the hatchet with open source and open up the development of Internet Explorer. Yahoo continues building apps like Flickr and del.icio.us like they always have. A rewrite on .NET technologies isn't imposed like it was on Hotmail. In the end, Microsoft becomes an organization where closed source, proprietary development can flourish with open source, standards-based processes.\n\nThis is wild guessing on my part. That said, if you look at Microsoft, its clear they are having major execution problems. Xbox is the only group that is widely successful and even they have hardware problems. All the other groups are missing timelines and customer/developer expectations. Just like Yahoo was before they picked up Flickr, del.icio.us, Upcoming, etc.\n\nIf Yahoo can make acquisitions to rebuild their culture, perhaps Microsoft can too.\n\n<em>Ed. revised Feb 15, 2025. Turns out this didn't happen, but my predictions did reify with the Microsoft acquisition of GitHub. Also, it's hard to remember the moment when Yahoo was ascendant! Take care what you wish for?</em>\n",
				"date_published": "2008-02-01T08:01:39-07:00",
				"url": "https://therealadam.com/2008/02/01/what-good-could.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/02/01/whither-prototype-or.html",
				"title": "Whither Prototype or jQuery",
				"content_html": "<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->FACT<!-- raw HTML omitted -->: I like Prototype better. It fits the way I program perfectly. I like prototypes, I like programming in a somewhat functional style. I don&rsquo;t think of things in a DOM-centric way. I&rsquo;m OK with having client-side state.</p>\n<p><!-- raw HTML omitted -->FICTION<!-- raw HTML omitted -->: jQuery is the &ldquo;emo&rdquo; framework. Apparently it (was) the &ldquo;new wave&rdquo; framework. Either way, I will always hold it against John Resig that he chose Devo hats as the logo.</p>\n<p><!-- raw HTML omitted -->FACT<!-- raw HTML omitted -->: jQuery is a fine framework if you think in terms of the DOM or don&rsquo;t do much back-end programming.</p>\n<p><!-- raw HTML omitted -->FICTION<!-- raw HTML omitted -->: To become proficient at Prototype, you have to punch the first jQuery user you see every day. I have never punched a jQuery user. Attempts to verbally duck punch them have met with minimal success.</p>\n<p><!-- raw HTML omitted -->FACT<!-- raw HTML omitted -->: Dollar functions are sexy. Clearly one of the best abuses of a programming language grammar, ever.</p>\n<p><!-- raw HTML omitted -->FICTION<!-- raw HTML omitted -->: You can&rsquo;t write unobtrusive JS with Prototype. I wrote a tutorial for <!-- raw HTML omitted --><!-- raw HTML omitted -->Advanced Rails Recipes<!-- raw HTML omitted --><!-- raw HTML omitted --> on how to do that with Dan Webb&rsquo;s lovely <!-- raw HTML omitted -->LowPro<!-- raw HTML omitted --> library.</p>\n<p><!-- raw HTML omitted -->FACT<!-- raw HTML omitted -->: We can all agree, YUI is really unpleasant to look at.  ENOUGH.with.the.fourteen.dots.before.I.can.do.something.useful!</p>\n<p><!-- raw HTML omitted -->FICTION<!-- raw HTML omitted -->: Sam Stephenson is an artificial intelligence akin to <!-- raw HTML omitted -->GLaDOS<!-- raw HTML omitted -->. I&rsquo;ve met Sam twice. He did not attempt to coerce me into an incinerator.</p>\n<p>Now that we&rsquo;ve got the record straight, I&rsquo;ll leave you with a comparison. To my jaded, biased and stubborn eyes, trying to use jQuery feels limiting. But I think that&rsquo;s particular to my experience and preference. No doubt, if jQuery were a musical instrument, it&rsquo;d be akin to <!-- raw HTML omitted -->Stevie Ray Vaughn&rsquo;s guitar &ldquo;First Wife&rdquo;<!-- raw HTML omitted -->: suited to its user, iconic and specifically built to its purpose. If you were to try and play a Beethoven piano sonata on First Wife, it just wouldn&rsquo;t come out right. However, your basic baby grand piano is equally suited to Beethoven <!-- raw HTML omitted -->or<!-- raw HTML omitted --> B. B. King. So in my tortured metaphor, Prototype is a piano &ndash; harder to play well, but more rewarding once you do.</p>\n<p><!-- raw HTML omitted -->Ed. revised Feb 15, 2025. I left everything intact, to remind myself where my writing/thinking was when I was 29. 🫠<!-- raw HTML omitted --></p>\n",
				"content_text": "<h3>The fact and fiction of why I choose <a href=\"http://prototypejs.org\">Prototype</a> over <a href=\"http://jquery.com\">jQuery</a></h3>\n\n<span style=\"font-size:125%;font-weight:bold;\">FACT</span>: I like Prototype better. It fits the way I program perfectly. I like prototypes, I like programming in a somewhat functional style. I don't think of things in a DOM-centric way. I'm OK with having client-side state.\n\n<span style=\"font-size:125%;font-weight:bold;\">FICTION</span>: jQuery is the \"emo\" framework. Apparently it (was) the \"new wave\" framework. Either way, I will always hold it against John Resig that he chose Devo hats as the logo.\n\n<span style=\"font-size:125%;font-weight:bold;\">FACT</span>: jQuery is a fine framework if you think in terms of the DOM or don't do much back-end programming.\n\n<span style=\"font-size:125%;font-weight:bold;\">FICTION</span>: To become proficient at Prototype, you have to punch the first jQuery user you see every day. I have never punched a jQuery user. Attempts to verbally duck punch them have met with minimal success.\n\n<span style=\"font-size:125%;font-weight:bold;\">FACT</span>: Dollar functions are sexy. Clearly one of the best abuses of a programming language grammar, ever.\n\n<span style=\"font-size:125%;font-weight:bold;\">FICTION</span>: You can't write unobtrusive JS with Prototype. I wrote a tutorial for <a href=\"http://pragprog.com/titles/fr_arr\"><em>Advanced Rails Recipes</em></a> on how to do that with Dan Webb's lovely <a href=\"http://lowprojs.com\">LowPro</a> library.\n\n<span style=\"font-size:125%;font-weight:bold;\">FACT</span>: We can all agree, YUI is really unpleasant to look at.  ENOUGH.with.the.fourteen.dots.before.I.can.do.something.useful!\n\n<span style=\"font-size:125%;font-weight:bold;\">FICTION</span>: Sam Stephenson is an artificial intelligence akin to <a href=\"http://half-life.wikia.com/wiki/GLaDOS\">GLaDOS</a>. I've met Sam twice. He did not attempt to coerce me into an incinerator.\n\nNow that we've got the record straight, I'll leave you with a comparison. To my jaded, biased and stubborn eyes, trying to use jQuery feels limiting. But I think that's particular to my experience and preference. No doubt, if jQuery were a musical instrument, it'd be akin to <a href=\"http://en.wikipedia.org/wiki/SRV_guitars\">Stevie Ray Vaughn's guitar \"First Wife\"</a>: suited to its user, iconic and specifically built to its purpose. If you were to try and play a Beethoven piano sonata on First Wife, it just wouldn't come out right. However, your basic baby grand piano is equally suited to Beethoven <em>or</em> B. B. King. So in my tortured metaphor, Prototype is a piano -- harder to play well, but more rewarding once you do.\n\n<em>Ed. revised Feb 15, 2025. I left everything intact, to remind myself where my writing/thinking was when I was 29. 🫠</em>\n",
				"date_published": "2008-01-31T22:30:47-07:00",
				"url": "https://therealadam.com/2008/02/01/whither-prototype-or.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/20/magnetic-ink.html",
				"title": "Magnetic Ink",
				"content_html": "<p><!-- raw HTML omitted -->Processing<!-- raw HTML omitted --> might force one to use <!-- raw HTML omitted -->for<!-- raw HTML omitted --> loops, but this bit of <!-- raw HTML omitted -->generative art<!-- raw HTML omitted --> is beautiful. The music ain&rsquo;t too shabby either.</p>\n",
				"content_text": "<a href=\"http://processing.org\">Processing</a> might force one to use <code>for</code> loops, but this bit of <a href=\"https://vimeo.com/615344\">generative art</a> is beautiful. The music ain't too shabby either.\n",
				"date_published": "2008-01-19T22:45:18-07:00",
				"url": "https://therealadam.com/2008/01/20/magnetic-ink.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/10/the-good-news.html",
				"title": "The good news about a long writers strike",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>So, really, only half of the possible outcomes are bad. <!-- raw HTML omitted -->ZING!<!-- raw HTML omitted --> Take that, Michael Bay and Dan Brown!</p>\n",
				"content_text": "<p>Apparently, some think that the WGA strike could continue well into 2009, affecting movies as well as TV.  <a href=\"http://www.washingtonpost.com/wp-dyn/content/article/2008/01/06/AR2008010602144.html\">No Writers, No Movies? Strike May Hit '09 Films</a>:</p>\n\n<blockquote>Also moved to the back burner are \"Nine,\" the musical based on the Fellini film \"8 1/2 \"; \"Angels &amp; Demons,\" the second installment in the \"Da Vinci Code\" franchise; Michael Bay's \"Transformers 2\"; and 20th Century Fox's remake of the 1966 film \"Fantastic Voyage.\"</blockquote>\n\nSo, really, only half of the possible outcomes are bad. <em>ZING!</em> Take that, Michael Bay and Dan Brown!\n",
				"date_published": "2008-01-10T16:55:09-07:00",
				"url": "https://therealadam.com/2008/01/10/the-good-news.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/09/overcoming-quotbrowser-tab.html",
				"title": "Overcoming \"browser tab seventy-three\"",
				"content_html": "<p>So now that <!-- raw HTML omitted -->NetNewsWire (NNW) is free<!-- raw HTML omitted -->, everyone should go download it and enjoy the love. It was the first app I ever bought for Mac, and it would seem I will only have to pay for it once. Hearty shout-outs to Brent!</p>\n<p>That said, any experienced NNW user knows that information overload is easy to get yourself into and hard to elude once you&rsquo;re wrapped in its grasp. The very manly Merlin Mann brought us <!-- raw HTML omitted -->Inbox Zero<!-- raw HTML omitted --> and I knew I needed to strive for Feeds Zero, in addition to browser-tab zero, Twitter-zero, etc. Unfortunately, Feeds Zero can lead to dozens of open browser tabs in NNW. Fortunately, NNW is better than any other WebKit app I&rsquo;ve seen at dealing with this.</p>\n<p>But now I&rsquo;ve got a ton of browser tabs in NNW holding down my soul. A contemporary, first-world problem. In trying to keep up with feeds, one spawns many dozens of browser windows. Lots of stuff to read. But, the sheer mass of 100+ tabs is considerable friction holding you back from, you know, acquiring all that information.</p>\n<p>Here&rsquo;s my current situation:</p>\n<!-- raw HTML omitted -->\n<p>I get myself into it pretty frequently. I bet you do too. Here&rsquo;s how I get through it.</p>\n<!-- raw HTML omitted -->\n<p>In NNW, Cmd-Shift-Left and Cmd-Shift-Right move you up and down the vertical tab bar. Sometimes what I see in the first several tabs just isn&rsquo;t appealing at the moment, though I can easily convince myself that my future self will find it <!-- raw HTML omitted -->intriguing<!-- raw HTML omitted -->. So I just turn around and head the other way. I might find something I like in that direction.</p>\n<p>In fact, if you just finished some un-bolding, the newest, freshest links will end up closer to the Cmd-Shift-Right side of the list. In theory, your current self found that intriguing enough that you could actually start reading it now. ;)</p>\n<!-- raw HTML omitted -->\n<p>As I&rsquo;ve alluded, sometimes your past self just has poor taste. Your former self pulled up some article that you know, really, you&rsquo;re only barely interested in reading. Or maybe you just felt guilty <!-- raw HTML omitted -->not<!-- raw HTML omitted --> reading it, but you still wanted to unbold it.</p>\n<p>Look, sometimes your Attention Bush needs trimming. Cmd-W is your friend, people. It makes the pain go away, no matter what app you&rsquo;re in.</p>\n<!-- raw HTML omitted -->\n<p>Recently, I&rsquo;ve found the first two tricks weren&rsquo;t helping me. My tab list just grew and grew. The guilt became intolerable. So I rebooted. Kinda.</p>\n<p>Tab-&gt;Export Tabs in NNW is my new best friend. I used it to export all my tabs to an HTML file. Then I sorted the list in TextMate, so as to collect everything by author, rather than over time. I&rsquo;ve been pulling a few links off this list every now and then. Once they&rsquo;re in my real web browser, I remove them from the list.</p>\n<p>A couple days in, I&rsquo;m already a fourth of the way through the list. And I&rsquo;ve been able to guiltlessly tackle my feeds. Happy.</p>\n<!-- raw HTML omitted -->\n<p>I have an AppleScript that tells me how many tabs I have open in NNW. It&rsquo;s vital for telling me whether I should focus on &ldquo;feed zero&rdquo; or &ldquo;tab zero&rdquo;. You can see the window it displays the count in the screenshot above. Here&rsquo;s the code of the script:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Stick it in <!-- raw HTML omitted -->~/Library/Application Support/NetNewsWire/Scripts<!-- raw HTML omitted --> and it will appear in the Script Menu for NNW. I like to use the Keyboard Preferences pane to bind the script to Control-Cmd-C for quick use.</p>\n<!-- raw HTML omitted -->\n<p>So. I&rsquo;ve given you some chisels that you can use to work down that attention boulder you&rsquo;ve made for yourself. Just remember that the goal is to acquire new and fascinating information <!-- raw HTML omitted -->and still get stuff done.<!-- raw HTML omitted --> Keeping those <!-- raw HTML omitted -->attention sails<!-- raw HTML omitted --> well trimmed is the best way to avoid hundreds of NNW browser tabs.</p>\n",
				"content_text": "So now that <a href=\"http://inessential.com/2008/01/09.php\">NetNewsWire (NNW) is free</a>, everyone should go download it and enjoy the love. It was the first app I ever bought for Mac, and it would seem I will only have to pay for it once. Hearty shout-outs to Brent!\n\nThat said, any experienced NNW user knows that information overload is easy to get yourself into and hard to elude once you're wrapped in its grasp. The very manly Merlin Mann brought us <a href=\"http://www.43folders.com/izero\">Inbox Zero</a> and I knew I needed to strive for Feeds Zero, in addition to browser-tab zero, Twitter-zero, etc. Unfortunately, Feeds Zero can lead to dozens of open browser tabs in NNW. Fortunately, NNW is better than any other WebKit app I've seen at dealing with this.\n\nBut now I've got a ton of browser tabs in NNW holding down my soul. A contemporary, first-world problem. In trying to keep up with feeds, one spawns many dozens of browser windows. Lots of stuff to read. But, the sheer mass of 100+ tabs is considerable friction holding you back from, you know, acquiring all that information.\n\nHere's my current situation:\n\n<div style=\"text-align:center;\"><a href=\"http://www.flickr.com/photos/48889072931@N01/2182207232\" title=\"View 'NetNewsWire tab overload' on Flickr.com\"><img src=\"http://farm3.static.flickr.com/2257/2182207232_969321b7f5.jpg\" alt=\"NetNewsWire tab overload\" border=\"0\" width=\"500\" height=\"304\" /></a></div>\n\nI get myself into it pretty frequently. I bet you do too. Here's how I get through it.\n\n<h2>Work from both ends</h2>\n\nIn NNW, Cmd-Shift-Left and Cmd-Shift-Right move you up and down the vertical tab bar. Sometimes what I see in the first several tabs just isn't appealing at the moment, though I can easily convince myself that my future self will find it <em>intriguing</em>. So I just turn around and head the other way. I might find something I like in that direction.\n\nIn fact, if you just finished some un-bolding, the newest, freshest links will end up closer to the Cmd-Shift-Right side of the list. In theory, your current self found that intriguing enough that you could actually start reading it now. ;)\n\n<h2>Just close the tab</h2>\n\nAs I've alluded, sometimes your past self just has poor taste. Your former self pulled up some article that you know, really, you're only barely interested in reading. Or maybe you just felt guilty <em>not</em> reading it, but you still wanted to unbold it.\n\nLook, sometimes your Attention Bush needs trimming. Cmd-W is your friend, people. It makes the pain go away, no matter what app you're in.\n\n<h2>Export to HTML, process outside of NNW</h2>\n\nRecently, I've found the first two tricks weren't helping me. My tab list just grew and grew. The guilt became intolerable. So I rebooted. Kinda.\n\nTab-&gt;Export Tabs in NNW is my new best friend. I used it to export all my tabs to an HTML file. Then I sorted the list in TextMate, so as to collect everything by author, rather than over time. I've been pulling a few links off this list every now and then. Once they're in my real web browser, I remove them from the list.\n\nA couple days in, I'm already a fourth of the way through the list. And I've been able to guiltlessly tackle my feeds. Happy.\n\n<h2>Know what you're up against</h2>\n\nI have an AppleScript that tells me how many tabs I have open in NNW. It's vital for telling me whether I should focus on \"feed zero\" or \"tab zero\". You can see the window it displays the count in the screenshot above. Here's the code of the script:\n\n<pre><code>\ntell application \"NetNewsWire\"\n\tset theCount to ((number of tabs) - 1) as string\n\tdisplay dialog theCount &amp; \" open tabs\" buttons {\"OK\"} default button 1\nend tell\n</code></pre>\n\nStick it in <code>~/Library/Application Support/NetNewsWire/Scripts</code> and it will appear in the Script Menu for NNW. I like to use the Keyboard Preferences pane to bind the script to Control-Cmd-C for quick use.\n\n<hr />\n\nSo. I've given you some chisels that you can use to work down that attention boulder you've made for yourself. Just remember that the goal is to acquire new and fascinating information <em>and still get stuff done.</em> Keeping those <a href=\"http://www.brianoberkirch.com/2007/04/20/trimming-the-attention-sails/\">attention sails</a> well trimmed is the best way to avoid hundreds of NNW browser tabs.\n",
				"date_published": "2008-01-09T21:31:46-07:00",
				"url": "https://therealadam.com/2008/01/09/overcoming-quotbrowser-tab.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/09/wheaties-for-programmers.html",
				"title": "Wheaties for programmers",
				"content_html": "<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Kevin&rsquo;s right on here. I&rsquo;ve been eating up design lately. But even before that, seeing some really great design, even if its not code, inspires me to get off my butt and write more, better software.</p>\n",
				"content_text": "<p><a href=\"http://particletree.com/notebook/reflections-of-an-interface-designer/\">Reflections of an Interface Designer</a>:</p>\n\n<blockquote>If you want remarkable results, feed a good programmer a diet of good design.</blockquote>\n\nKevin's right on here. I've been eating up design lately. But even before that, seeing some really great design, even if its not code, inspires me to get off my butt and write more, better software.\n",
				"date_published": "2008-01-09T16:51:34-07:00",
				"url": "https://therealadam.com/2008/01/09/wheaties-for-programmers.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/07/something-lovely-from.html",
				"title": "Something lovely from David Lanham",
				"content_html": "<p>I love this coat-of-arms-esque ditty by <!-- raw HTML omitted -->David Lanham<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<p>Found it by the good word of Bill Burcham.</p>\n",
				"content_text": "I love this coat-of-arms-esque ditty by <a href=\"http://www.dlanham.com/art/grenadeer/\">David Lanham</a>:\n\n<div style=\"text-align:center;\"><a href=\"http://www.flickr.com/photos/48889072931@N01/2174275488\" title=\"View 'David Lanham : Grenadeer' on Flickr.com\"><img src=\"http://farm3.static.flickr.com/2369/2174275488_51ae2a92da.jpg\" alt=\"David Lanham : Grenadeer\" border=\"0\" width=\"500\" height=\"391\" /></a></div>\n\nFound it by the good word of Bill Burcham.\n",
				"date_published": "2008-01-07T21:47:57-07:00",
				"url": "https://therealadam.com/2008/01/07/something-lovely-from.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2008/01/06/the-barbarism-of.html",
				"title": "The barbarism of the for loop",
				"content_html": "<p>I&rsquo;ve been reading <!-- raw HTML omitted --><!-- raw HTML omitted -->Programming Erlang<!-- raw HTML omitted --><!-- raw HTML omitted --> and also casually looking into <!-- raw HTML omitted -->Haskell<!-- raw HTML omitted -->. So yesterday when I tinkered with <!-- raw HTML omitted -->Processing<!-- raw HTML omitted --> just a little bit, code like this just looks <!-- raw HTML omitted -->barbaric<!-- raw HTML omitted -->:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Compare to Erlang:</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>I mean, really. If you&rsquo;re writing <code>for</code> loops in 2008, don&rsquo;t pass go, don&rsquo;t collect $200.  Or even 200 Euro.</p>\n<p>The caveat is if you&rsquo;re implementing a language or compiler. Then I&rsquo;ll forgive you. But if you could work that out by 2009 or so, we&rsquo;d all thank you.</p>\n",
				"content_text": "I've been reading <a href=\"http://www.pragprog.com/titles/jaerlang\"><em>Programming Erlang</em></a> and also casually looking into <a href=\"http://haskell.org/\">Haskell</a>. So yesterday when I tinkered with <a href=\"http://processing.org/\">Processing</a> just a little bit, code like this just looks <strong>barbaric</strong>:\n\n<pre><code>\n  for(int i=0; i&lt;width; i++) {\n   doSomething(i);\n  }\n</code></pre>\n\nCompare to Erlang:\n\n<pre><code>\n  % Closer to Java and PHP. Nearly, but not quite, tolerable\n  lists:foreach(DoSomething, lists:seq(1, 50)).\n\n  % More Ruby/Lisp like. I can dig it.\n  lists:map(DoSomething, lists:seq(1, 50)).\n\n  % List Comprehensions FTW\n  [doSomething(I) || I &lt;- lists:seq(1, 50)].\n</code></pre>\n\nI mean, really. If you're writing `for` loops in 2008, don't pass go, don't collect $200.  Or even 200 Euro.\n\nThe caveat is if you're implementing a language or compiler. Then I'll forgive you. But if you could work that out by 2009 or so, we'd all thank you.\n",
				"date_published": "2008-01-06T21:46:07-07:00",
				"url": "https://therealadam.com/2008/01/06/the-barbarism-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/12/03/bookstacks-photography-and.html",
				"title": "Bookstacks, photography and Star Wars",
				"content_html": "<p>My bookshelf used to make me sad.  So I finally dumped everything out and put things back in sane order.  Of course, <!-- raw HTML omitted -->the magic of a cleanly organized bookshelf<!-- raw HTML omitted --> is all on Flickr.  If you enjoy perusing book-stacks, you should have a lot of fun here.  Even if you don&rsquo;t, I made sure to include lots of fun notes to make it worth your time to give them a look see.</p>\n<!-- raw HTML omitted -->\n<p>Next, we&rsquo;ve got Courtney&rsquo;s nice work with her new digital SLR.  She&rsquo;s learning quickly, but already taking great photos:</p>\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n<p>Finally, you may recall the Honda Civic del Sol that was converted to look like a fighter from Star Wars.  Well, Courtney and I came across a del Sol with a similar paint job last night, though not so much with the body mods.  Wonderfully nerdy and indulgent.</p>\n<!-- raw HTML omitted -->\n<p>To the person who drives this car, I salute you!</p>\n",
				"content_text": "My bookshelf used to make me sad.  So I finally dumped everything out and put things back in sane order.  Of course, <a href=\"http://www.flickr.com/photos/therealadam/sets/72157603361768249/\">the magic of a cleanly organized bookshelf</a> is all on Flickr.  If you enjoy perusing book-stacks, you should have a lot of fun here.  Even if you don't, I made sure to include lots of fun notes to make it worth your time to give them a look see.\n\n<div style=\"text-align:center;\"><a href=\"http://www.flickr.com/photos/48889072931@N01/2082786872\" title=\"View 'Bookshelf, after' on Flickr.com\"><img src=\"http://farm3.static.flickr.com/2410/2082786872_4b0b5f95f0.jpg\" alt=\"Bookshelf, after\" border=\"0\" width=\"375\" height=\"500\" /></a></div>\n\nNext, we've got Courtney's nice work with her new digital SLR.  She's learning quickly, but already taking great photos:\n\n<div style=\"text-align:center;\">\n<a href=\"http://www.flickr.com/photos/courtney/2081448766/\"><img src=\"http://farm3.static.flickr.com/2199/2081448766_52c2339b88_m.jpg\" alt=\"Molly\" /></a>\n\n<a href=\"http://www.flickr.com/photos/courtney/2081186090/\"><img src=\"http://farm3.static.flickr.com/2214/2081186090_f109f1b4d0_m.jpg\" alt=\"Thor\" /></a>\n\n<a href=\"http://www.flickr.com/photos/courtney/2079294509/\"><img src=\"http://farm3.static.flickr.com/2417/2079294509_920e68ba07_m_d.jpg\" alt=\"Brick with 2100 printed on it\" /></a>\n</div>\n\nFinally, you may recall the Honda Civic del Sol that was converted to look like a fighter from Star Wars.  Well, Courtney and I came across a del Sol with a similar paint job last night, though not so much with the body mods.  Wonderfully nerdy and indulgent.\n\n<div style=\"text-align:center;\">\n<a href=\"http://www.flickr.com/photos/courtney/2079371767/\"><img src=\"http://farm3.static.flickr.com/2120/2079371767_8047e07469_m_d.jpg\" alt=\"Honda Star Wars car\" /></a>\n</div>\n\nTo the person who drives this car, I salute you!\n",
				"date_published": "2007-12-03T20:12:46-07:00",
				"url": "https://therealadam.com/2007/12/03/bookstacks-photography-and.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/12/02/making-sense-of.html",
				"title": "Making sense of the world",
				"content_html": "<p>I&rsquo;ve noticed that when I&rsquo;m walking about, sort of thinking idly, I find myself asking &ldquo;How?&rdquo;  How was that building constructed?  Why is that sewer there, and not somewhere else?  OK, I guess that one is really a why question.  So I suppose the underlying curiosity is really about the <!-- raw HTML omitted -->mechanism<!-- raw HTML omitted --> of the world.</p>\n<p>Sure, you can&rsquo;t reduce the world to a mechanism, a machine.  It&rsquo;s full of humans, so you can&rsquo;t really make any kind of useful predictions.  But there are definitely systems in place and some are more influential than others.  Some of those systems, while not predictable machines, do display tendencies and trends.  Learning them is one of the little intellectual side-journeys I&rsquo;ve been immersing myself in lately.</p>\n<p>If you want to play along, here&rsquo;s what I&rsquo;m into at the moment:</p>\n<!-- raw HTML omitted -->\n<p>For the former, I encourage you to listen to <!-- raw HTML omitted -->The Economist Podcast (iTunes)<!-- raw HTML omitted --> and read the weekly edition when you get the opportunity.  They also seem to have moved away from using a pay-wall, so check out the articles on <!-- raw HTML omitted -->The Economist<!-- raw HTML omitted --> website as well.</p>\n<p>If you&rsquo;re wondering why on earth economics might be interesting, then check out <!-- raw HTML omitted -->Neal Stephenson&rsquo;s <!-- raw HTML omitted -->Baroque Cycle<!-- raw HTML omitted --><!-- raw HTML omitted -->.  I never thought I&rsquo;d wish I understood macroeconomics and financial instruments so that I could figure out what&rsquo;s going on in a book by a cyberpunk author.  But then I read the <!-- raw HTML omitted -->Baroque Cycle<!-- raw HTML omitted --> and I did.  Its no coincidence the last of the cycle is titled <!-- raw HTML omitted --><!-- raw HTML omitted -->The System of the World<!-- raw HTML omitted --><!-- raw HTML omitted --> and here I am, seeking a system that illuminates the world.</p>\n<p>For cognitive science and linguistics, I&rsquo;m still just getting started.  I read <!-- raw HTML omitted --><!-- raw HTML omitted -->Introducing Linguistics<!-- raw HTML omitted --><!-- raw HTML omitted --> this summer and its great.  It seems its part of a series where they match a subject matter expert with a graphic designer.  The result is easily read but highly informative.  Its very much in the same style as Kathy Sierra.</p>\n<p>If you&rsquo;re ahead of me here and know a good bit on any of these subjects, feel free to drop some suggestions on what I should read next!</p>\n",
				"content_text": "I've noticed that when I'm walking about, sort of thinking idly, I find myself asking \"How?\"  How was that building constructed?  Why is that sewer there, and not somewhere else?  OK, I guess that one is really a why question.  So I suppose the underlying curiosity is really about the <strong>mechanism</strong> of the world.\n\nSure, you can't reduce the world to a mechanism, a machine.  It's full of humans, so you can't really make any kind of useful predictions.  But there are definitely systems in place and some are more influential than others.  Some of those systems, while not predictable machines, do display tendencies and trends.  Learning them is one of the little intellectual side-journeys I've been immersing myself in lately.\n\nIf you want to play along, here's what I'm into at the moment:\n\n<ul>\n<li>Economics (probably macroeconomics in particular)</li>\n<li>Cognitive science</li>\n<li>Linguistics</li>\n</ul>\n\nFor the former, I encourage you to listen to <a href=\"http://phobos.apple.com/WebObjects/MZStore.woa/wa/viewPodcast?id=151230264\">The Economist Podcast (iTunes)</a> and read the weekly edition when you get the opportunity.  They also seem to have moved away from using a pay-wall, so check out the articles on <a href=\"http://economist.com/\">The Economist</a> website as well.\n\nIf you're wondering why on earth economics might be interesting, then check out <a href=\"http://en.wikipedia.org/wiki/The_Baroque_Cycle\">Neal Stephenson's <em>Baroque Cycle</em></a>.  I never thought I'd wish I understood macroeconomics and financial instruments so that I could figure out what's going on in a book by a cyberpunk author.  But then I read the <em>Baroque Cycle</em> and I did.  Its no coincidence the last of the cycle is titled <a href=\"http://en.wikipedia.org/wiki/The_System_of_the_World_%2528novel%2529\"><em>The System of the World</em></a> and here I am, seeking a system that illuminates the world.\n\nFor cognitive science and linguistics, I'm still just getting started.  I read <a href=\"http://www.amazon.com/Introducing-Linguistics-Introducing-S-Trask/dp/1840466359/ref=pd_bbs_sr_1?ie=UTF8&amp;s=books&amp;qid=1196636653&amp;sr=8-1\"><em>Introducing Linguistics</em></a> this summer and its great.  It seems its part of a series where they match a subject matter expert with a graphic designer.  The result is easily read but highly informative.  Its very much in the same style as Kathy Sierra.\n\nIf you're ahead of me here and know a good bit on any of these subjects, feel free to drop some suggestions on what I should read next!\n",
				"date_published": "2007-12-02T16:14:37-07:00",
				"url": "https://therealadam.com/2007/12/02/making-sense-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/12/02/i-want-to.html",
				"title": "I want to look at your workspace",
				"content_html": "<p>Briefly: I enjoy looking at the workspaces of others.  One of the uniquely great things about going to conferences is shoulder-surfing other people to see how they work.  So when I figure out how I can do that from the comfort of home, I get a little excited.</p>\n<p>OK, I admit it.  I have the tendencies of a &ldquo;workflow voyeur&rdquo;.  <!-- raw HTML omitted -->And you can too!<!-- raw HTML omitted --></p>\n<p><!-- raw HTML omitted -->Ed. there are still lots of ways to look upon other folks workspaces. Basically none of the below are still around though. 🤷🏻‍♂️<!-- raw HTML omitted --></p>\n<p>Start with a recent discovery, <!-- raw HTML omitted -->Office Snapshots<!-- raw HTML omitted -->.  Proceed to check out <!-- raw HTML omitted -->Garrett Murray&rsquo;s<!-- raw HTML omitted --> <!-- raw HTML omitted -->new desk setup<!-- raw HTML omitted -->, or even <!-- raw HTML omitted -->his old setup<!-- raw HTML omitted -->.  Rinse and repeat with the <!-- raw HTML omitted -->Unclutterer Flickr Group<!-- raw HTML omitted -->.  In no time flat, you too can ogle and lust after the workspaces of others.</p>\n<p>Here&rsquo;s an obscenely out-of-date snap of my desktop at home:</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Briefly: I enjoy looking at the workspaces of others.  One of the uniquely great things about going to conferences is shoulder-surfing other people to see how they work.  So when I figure out how I can do that from the comfort of home, I get a little excited.\n\nOK, I admit it.  I have the tendencies of a \"workflow voyeur\".  <em>And you can too!</em>\n\n<em>Ed. there are still lots of ways to look upon other folks workspaces. Basically none of the below are still around though. 🤷🏻‍♂️</em>\n\nStart with a recent discovery, <a href=\"http://www.officesnapshots.com/\">Office Snapshots</a>.  Proceed to check out <a href=\"http://garrettmurray.net/\">Garrett Murray's</a> <a href=\"http://flickr.com/photos/garrettmurray/sets/72157602749140895/\">new desk setup</a>, or even <a href=\"http://flickr.com/photos/garrettmurray/sets/72157594163032711/\">his old setup</a>.  Rinse and repeat with the <a href=\"http://flickr.com/groups/unclutterer/\">Unclutterer Flickr Group</a>.  In no time flat, you too can ogle and lust after the workspaces of others.\n\nHere's an obscenely out-of-date snap of my desktop at home:\n\n<div style=\"text-align:center;\"><a href=\"http://www.flickr.com/photos/48889072931@N01/453382723\" title=\"View 'Molly + Twitter' on Flickr.com\"><img src=\"http://farm1.static.flickr.com/185/453382723_bc00284acf.jpg\" alt=\"Molly + Twitter\" border=\"0\" width=\"500\" height=\"400\" /></a></div>\n",
				"date_published": "2007-12-01T23:49:27-07:00",
				"url": "https://therealadam.com/2007/12/02/i-want-to.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/11/25/like-the-sky.html",
				"title": "Like the sky or the horizon?",
				"content_html": "<p>Is your knowledge as a programmer tall like they sky or broad like the horizon?</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p>Counter-point: your must prune your knowledge so that it is deep <!-- raw HTML omitted -->and<!-- raw HTML omitted --> broad.  I spoke to this in my OSCON presentation <!-- raw HTML omitted -->The Holistic Programmer<!-- raw HTML omitted -->.  From my description:</p>\n<!-- raw HTML omitted -->\n<p>Therein, I talk of my approach to problem solving.  My method is largely predicated on knowing a little bit about a whole lot.  I usually frame a problem pretty quickly and get on to making the first attempt at solving it.  I might get lucky and actually frame the problem correctly.  If I don&rsquo;t, at least now I&rsquo;ve got an idea of what the problem <!-- raw HTML omitted -->really<!-- raw HTML omitted --> is and I can take another, more informed stab.  So on this, Greg Knauss and I disagree.</p>\n<p>My main point is that programmers need to take a holistic approach these days, knowing things above and below them in the application or system stack in which they are expert.  This is the deep part that Greg mentions.  Its not enough to just speak Rails, Django, Linux or Flash.  You have to understand the bits that are higher level and the bits that are lower level than what you are working on.  Otherwise you&rsquo;re looking at an incomplete picture.</p>\n<p>There&rsquo;s a notion going around of the &ldquo;specializing generalists&rdquo; or some such.  I think it&rsquo;s a great way to go.  Given the rapid rate of change in software development, you have to stay nimble.  The ability to quickly adapt to new technologies and approaches separates the mediocre programmers from the great programmers.</p>\n",
				"content_text": "Is your knowledge as a programmer tall like they sky or broad like the horizon?\n\n<p>Greg Knauss says the programmer is like the sky, the manager is like the horizon.  From <a href=\"http://blog.eod.com/\">Wide vs. Deep</a>:</p>\n\n<blockquote>\n<p>So here's my theory: Managers must work shallow and wide, while programmers must work narrow and deep. People who are naturally tuned to one particular method of work will not only enjoy their jobs a lot more, but be better at them. I'm a deep guy, I should be doing deep work.</p>\n\n<p>I didn't say it was a particularly insightful theory.</p>\n</blockquote>\n\nCounter-point: your must prune your knowledge so that it is deep <em>and</em> broad.  I spoke to this in my OSCON presentation <a href=\"http://therealadam.com/presentations/oscon2007/HolisticProgrammer.pdf\">The Holistic Programmer</a>.  From my description:\n\n<blockquote>The Holistic Programmer is about how programmers should take a global view on the stack of abstractions in which they work and also in the spectrum of communications between people and machines.</blockquote>\n\nTherein, I talk of my approach to problem solving.  My method is largely predicated on knowing a little bit about a whole lot.  I usually frame a problem pretty quickly and get on to making the first attempt at solving it.  I might get lucky and actually frame the problem correctly.  If I don't, at least now I've got an idea of what the problem <em>really</em> is and I can take another, more informed stab.  So on this, Greg Knauss and I disagree.\n\nMy main point is that programmers need to take a holistic approach these days, knowing things above and below them in the application or system stack in which they are expert.  This is the deep part that Greg mentions.  Its not enough to just speak Rails, Django, Linux or Flash.  You have to understand the bits that are higher level and the bits that are lower level than what you are working on.  Otherwise you're looking at an incomplete picture.\n\nThere's a notion going around of the \"specializing generalists\" or some such.  I think it's a great way to go.  Given the rapid rate of change in software development, you have to stay nimble.  The ability to quickly adapt to new technologies and approaches separates the mediocre programmers from the great programmers.\n",
				"date_published": "2007-11-25T21:57:48-07:00",
				"url": "https://therealadam.com/2007/11/25/like-the-sky.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/11/24/epic-songs-pick.html",
				"title": "Epic songs, pick a favorite",
				"content_html": "<p>Prepare to be polled.</p>\n<p>For the purposes of this survey, we&rsquo;ll take an &ldquo;epic song&rdquo; as one with musically distinct beginnings and ends.  Said song shall not be a grouping of songs, like on <!-- raw HTML omitted -->Abbey Road<!-- raw HTML omitted --> or <!-- raw HTML omitted -->Born to Run<!-- raw HTML omitted -->.  In other words, it&rsquo;s only one song on the track listing.  Here&rsquo;s some of the best epic songs that popped into my head:</p>\n<!-- raw HTML omitted -->\n<p>Your mission is to choose one of the above, or write in with your own favorite.  If you write in, please do try and provide a link so that we can listen in.</p>\n<p>Now, get those opinions flowing.  Here, I&rsquo;ll start.  &ldquo;Bohemian Rhapsody&rdquo; takes the cake.</p>\n",
				"content_text": "Prepare to be polled.\n\nFor the purposes of this survey, we'll take an \"epic song\" as one with musically distinct beginnings and ends.  Said song shall not be a grouping of songs, like on <em>Abbey Road</em> or <em>Born to Run</em>.  In other words, it's only one song on the track listing.  Here's some of the best epic songs that popped into my head:\n\n<ul>\n<li>\"Bohemian Rhapsody\"</li>\n<li>\"Hey Jude\"</li>\n<li>\"Stairway to Heaven\"</li>\n<li>\"November Rain\"</li>\n</ul>\n\nYour mission is to choose one of the above, or write in with your own favorite.  If you write in, please do try and provide a link so that we can listen in.\n\nNow, get those opinions flowing.  Here, I'll start.  \"Bohemian Rhapsody\" takes the cake.\n",
				"date_published": "2007-11-24T20:04:07-07:00",
				"url": "https://therealadam.com/2007/11/24/epic-songs-pick.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/11/23/the-rise-of.html",
				"title": "The rise of the micro-app",
				"content_html": "<p>A few weeks ago, Dan Cederholm, of <!-- raw HTML omitted -->Simple Bits<!-- raw HTML omitted --> fame, launched <!-- raw HTML omitted -->Foamee<!-- raw HTML omitted -->.  Foamee lets you track to whom you owe beers.  The twist?  You manage your beer debt via Twitter.  Its a small little app.  It only does one thing.  Its got a fantastic entry-point.  In other words, its <!-- raw HTML omitted -->really cool<!-- raw HTML omitted -->.</p>\n<p><!-- raw HTML omitted -->Erik Kastner<!-- raw HTML omitted --> reminded me of his app <!-- raw HTML omitted -->Band Named<!-- raw HTML omitted --> this week.  It finally clicked why its cool this time.  Games like Guitar Hero III and Rock Band want you to name your ethereal band.  Band Named is a great place to post ideas for said names.  The neat thing about Erik&rsquo;s app is that you can sign in via OpenID (+1) and then fetch your avatar from Flickr or Twitter (FTW).  The entry of new band names is easy.  And its fun!</p>\n<p>I hope this turns into a trend-buzz-meme thing.  The world needs more apps that aim to just help you out now and then, not ones that want to become your task management, knowledge capture workflow mega-gizmo-jobby.  Better yet, apps that are loosely coupled via infrastructure you&rsquo;re already using (Flickr, Twitter, OpenID, etc.) taste great.</p>\n<p>Plus, these little efforts needn&rsquo;t result in all-pain, no gain.  Dan probably can&rsquo;t support himself on it, but I bet any money made from <!-- raw HTML omitted -->Foamee merch<!-- raw HTML omitted --> will come in handy.  Likewise, there are lots of things you could do with something like Band Named, though I don&rsquo;t know if Erik&rsquo;s going to take it that direction.</p>\n<p>So, call to action: hatch up some idea.  Make sure its a little crazy.  If pitching it to a VC would get you laughed out of the room, you&rsquo;re on the right track.  If you think the commenters on TechCrunch would skewer you, you&rsquo;re getting even warmer.  Think Uncov would just laugh and point?  You&rsquo;ve probably hit the jackpot.  Now: go out, build the sucker and figure out how to <!-- raw HTML omitted -->have fun with it<!-- raw HTML omitted -->.</p>\n<p>I&rsquo;ll leave you with this: <!-- raw HTML omitted -->its all about getting to the point where you&rsquo;re making dough <!-- raw HTML omitted -->and<!-- raw HTML omitted --> having fun.<!-- raw HTML omitted --></p>\n",
				"content_text": "A few weeks ago, Dan Cederholm, of <a href=\"http://www.simplebits.com/\">Simple Bits</a> fame, launched <a href=\"http://foamee.com/\">Foamee</a>.  Foamee lets you track to whom you owe beers.  The twist?  You manage your beer debt via Twitter.  Its a small little app.  It only does one thing.  Its got a fantastic entry-point.  In other words, its <em>really cool</em>.\n\n<a href=\"http://metaatem.net/\">Erik Kastner</a> reminded me of his app <a href=\"http://bandnamed.com/\">Band Named</a> this week.  It finally clicked why its cool this time.  Games like Guitar Hero III and Rock Band want you to name your ethereal band.  Band Named is a great place to post ideas for said names.  The neat thing about Erik's app is that you can sign in via OpenID (+1) and then fetch your avatar from Flickr or Twitter (FTW).  The entry of new band names is easy.  And its fun!\n\nI hope this turns into a trend-buzz-meme thing.  The world needs more apps that aim to just help you out now and then, not ones that want to become your task management, knowledge capture workflow mega-gizmo-jobby.  Better yet, apps that are loosely coupled via infrastructure you're already using (Flickr, Twitter, OpenID, etc.) taste great.\n\nPlus, these little efforts needn't result in all-pain, no gain.  Dan probably can't support himself on it, but I bet any money made from <a href=\"http://foamee.com/store\">Foamee merch</a> will come in handy.  Likewise, there are lots of things you could do with something like Band Named, though I don't know if Erik's going to take it that direction.\n\nSo, call to action: hatch up some idea.  Make sure its a little crazy.  If pitching it to a VC would get you laughed out of the room, you're on the right track.  If you think the commenters on TechCrunch would skewer you, you're getting even warmer.  Think Uncov would just laugh and point?  You've probably hit the jackpot.  Now: go out, build the sucker and figure out how to <em>have fun with it</em>.\n\nI'll leave you with this: <em>its all about getting to the point where you're making dough <strong>and</strong> having fun.</em>\n",
				"date_published": "2007-11-23T16:39:10-07:00",
				"url": "https://therealadam.com/2007/11/23/the-rise-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/11/05/anthropomorphized-gems.html",
				"title": "Anthropomorphized Gems",
				"content_html": "<p>I couldn&rsquo;t make it to RubyConf this year.  Big frownie face.  But, I&rsquo;m not letting that stop me from imposing my sense of humor on the world.  I present to you this year&rsquo;s helping of absurdity, <!-- raw HTML omitted -->&ldquo;Anthropomorphized Gems&rdquo;<!-- raw HTML omitted -->!</p>\n<p>This is a little tribute to the gems I frequently use and enjoy.  Thanks to the authors of the featured Gems and to all those who have released a Gem of any sort.  Ruby has gone from a great language with a so-so library to a great language with a great library in relatively short order.  Those making their Gems available deserve applause for making that happen.</p>\n<h3 id=\"administrivia\">Administrivia</h3>\n<ul>\n<li>In HD, where available!  This is my first foray into uploading video in HD.  <!-- raw HTML omitted -->It takes a while<!-- raw HTML omitted -->, but the results are pretty nice to look at.  On the other hand, none of my G4s seem to handle HD that well.</li>\n<li>I&rsquo;m trying Vimeo even though I can&rsquo;t really make heads or tails of their TOS.  If you can read TOS-ese, let me know if it allows them to sell my stuff to NBC, Fox, etc. without me getting a penny.  That would be unfortunate.</li>\n<li>For the record, I did go eat pizza after I finished putting this together.</li>\n</ul>\n",
				"content_text": "I couldn't make it to RubyConf this year.  Big frownie face.  But, I'm not letting that stop me from imposing my sense of humor on the world.  I present to you this year's helping of absurdity, <a href=\"http://vimeo.com/371590\">\"Anthropomorphized Gems\"</a>!\n\nThis is a little tribute to the gems I frequently use and enjoy.  Thanks to the authors of the featured Gems and to all those who have released a Gem of any sort.  Ruby has gone from a great language with a so-so library to a great language with a great library in relatively short order.  Those making their Gems available deserve applause for making that happen.\n\n### Administrivia\n\n* In HD, where available!  This is my first foray into uploading video in HD.  <a href=\"http://twitter.com/therealadam/statuses/388336722\">It takes a while</a>, but the results are pretty nice to look at.  On the other hand, none of my G4s seem to handle HD that well.\n* I'm trying Vimeo even though I can't really make heads or tails of their TOS.  If you can read TOS-ese, let me know if it allows them to sell my stuff to NBC, Fox, etc. without me getting a penny.  That would be unfortunate.\n* For the record, I did go eat pizza after I finished putting this together.\n",
				"date_published": "2007-11-04T23:22:32-07:00",
				"url": "https://therealadam.com/2007/11/05/anthropomorphized-gems.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/20/rejiggering-meets-build.html",
				"title": "Rejiggering meets build versus buy",
				"content_html": "<p>You&rsquo;re here!  That means I&rsquo;ve managed to convert my site (back) over to <!-- raw HTML omitted -->WordPress<!-- raw HTML omitted -->.  In the interest of making progress, I had to cut some corners.  Currently, that manifests itself as taking my old weblogs <!-- raw HTML omitted -->Man vs. Machine<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Punchline Labs<!-- raw HTML omitted --> offline while I figure out how to rejigger the content into WordPress.</p>\n<p><!-- raw HTML omitted -->Don&rsquo;t stop reading!<!-- raw HTML omitted --> This isn&rsquo;t &ldquo;Yet Another Boy-Have-I-Been-Busy But Now I Promise To Post More&rdquo; post!</p>\n<p>The decision to switch (back) to <!-- raw HTML omitted -->WordPress<!-- raw HTML omitted --> is bittersweet.  I&rsquo;d originally switched away to <!-- raw HTML omitted -->Typo<!-- raw HTML omitted -->, but that didn&rsquo;t work out well.  On the one hand, Typo went a little sideways, requiring me to poke the database a little before I could post.  On the other hand, running a big Rails app like Typo on shared hosting like <!-- raw HTML omitted -->TextDrive<!-- raw HTML omitted --> isn&rsquo;t a recipe for reliability.  So a change was necessary.</p>\n<p><!-- raw HTML omitted -->Point: you&rsquo;re cooler if you write your own weblog software.<!-- raw HTML omitted -->  Its been pointed out that <!-- raw HTML omitted -->Jedi build their own lightsabers<!-- raw HTML omitted --> and thus, so should programmers.  I think it&rsquo;s a wonderful idea and I subscribe to it where I can.  However, it&rsquo;s an idea at one end of a spectrum of pragmatism and I need to live at the other end.</p>\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<!-- raw HTML omitted -->\n<p><!-- raw HTML omitted -->Counter-point: the writing is more important than the gizmos.<!-- raw HTML omitted -->  To a point, writing my own weblog software is <!-- raw HTML omitted -->yak shaving<!-- raw HTML omitted -->.  In fact, I&rsquo;ve contemplated switching weblogs, hosts and a myriad of other choices for month.  Thus, with a cleanly shorn yak and nothing to show for it, I finally jumped in the pool and switched.  And now, I can <!-- raw HTML omitted -->write<!-- raw HTML omitted -->.  Awesome!</p>\n<p>The writing here is the most important thing.  Not so much whether I&rsquo;ve got Ruby cred because I run a Ruby-powered weblog, web cred because I skipped using widgets to pull in some content rather than hacking it in (I went with widgets) or design cred because I built my own theme.  Very few people will come back on those strengths alone.  <!-- raw HTML omitted -->Its the writing stupid!<!-- raw HTML omitted -->  Thus, I&rsquo;m re-aligning development choices based on removing friction from writing.</p>\n<p>I think I made a reasonable choice going with WordPress and hacking <!-- raw HTML omitted -->DePo Clean<!-- raw HTML omitted -->.  In the end, I just want something that lets me write whatever and whenever I want with as little friction as possible.  WordPress fits that maxim.  Plus I think <!-- raw HTML omitted -->Matt Mullenweg<!-- raw HTML omitted --> and the rest of the <!-- raw HTML omitted -->Automattic<!-- raw HTML omitted --> team have pretty good taste, and I can get behind that.</p>\n<!-- raw HTML omitted -->\n<p>So, what have we learned?</p>\n<!-- raw HTML omitted -->\n<p>See, I told you this wasn&rsquo;t one of those posts where I apologize for not posting for many months and then promise to post more frequently.  Though with my luck, I won&rsquo;t post again for three weeks ;)</p>\n",
				"content_text": "You're here!  That means I've managed to convert my site (back) over to <a href=\"http://wordpress.org\">WordPress</a>.  In the interest of making progress, I had to cut some corners.  Currently, that manifests itself as taking my old weblogs <a href=\"http://therealadam.com/manvsmachine\">Man vs. Machine</a> and <a href=\"http://therealadam.com/punchlinelabs/\">Punchline Labs</a> offline while I figure out how to rejigger the content into WordPress.\n\n<strong>Don't stop reading!</strong> This isn't \"Yet Another Boy-Have-I-Been-Busy But Now I Promise To Post More\" post!\n\nThe decision to switch (back) to <a href=\"http://wordpress.org\">WordPress</a> is bittersweet.  I'd originally switched away to <a href=\"http://typosphere.org\">Typo</a>, but that didn't work out well.  On the one hand, Typo went a little sideways, requiring me to poke the database a little before I could post.  On the other hand, running a big Rails app like Typo on shared hosting like <a href=\"http://textdrive.com\">TextDrive</a> isn't a recipe for reliability.  So a change was necessary.\n\n<strong>Point: you're cooler if you write your own weblog software.</strong>  Its been pointed out that <a href=\"http://radar.oreilly.com/archives/2007/03/jedi_build_thei.html\">Jedi build their own lightsabers</a> and thus, so should programmers.  I think it's a wonderful idea and I subscribe to it where I can.  However, it's an idea at one end of a spectrum of pragmatism and I need to live at the other end.\n\n<ul>\n<li>On one end, you've got building your own software, <em>all the time</em>, because you're that cool or because you've got an insanely weird domain.  So you build your own software.  See also, <a href=\"http://c2.com/cgi/wiki?NotInventedHere\">Not Invented Here</a>.  Usually, this is the wrong choice.</li>\n\n<li>Then you've got building your own lightsaber.  You do this because learning is more important than implementing something quickly.  This is usually the wrong choice for \"production\" code.</li>\n\n<li>If you need to go quickly but still need to get involved in the domain you're working on, hacking something is a great choice.  You don't have to start from scratch and you don't have to learn everything by making mistakes.</li>\n\n<li>Finally, you could just buy or download something and tweak it in the ways the creator predicted you would.  Adopting hosted web apps is one in the same.  This is ideal for times when you just don't care about the domain the app caters to.  Bug trackers and mail clients fall into this category for most people.</li>\n</ul>\n\n<strong>Counter-point: the writing is more important than the gizmos.</strong>  To a point, writing my own weblog software is <a href=\"http://projects.csail.mit.edu/gsb/old-archive/gsb-archive/gsb2000-02-11.html\">yak shaving</a>.  In fact, I've contemplated switching weblogs, hosts and a myriad of other choices for month.  Thus, with a cleanly shorn yak and nothing to show for it, I finally jumped in the pool and switched.  And now, I can <strong>write</strong>.  Awesome!\n\nThe writing here is the most important thing.  Not so much whether I've got Ruby cred because I run a Ruby-powered weblog, web cred because I skipped using widgets to pull in some content rather than hacking it in (I went with widgets) or design cred because I built my own theme.  Very few people will come back on those strengths alone.  <strong>Its the writing stupid!</strong>  Thus, I'm re-aligning development choices based on removing friction from writing.\n\nI think I made a reasonable choice going with WordPress and hacking <a href=\"http://powazek.com/posts/516\">DePo Clean</a>.  In the end, I just want something that lets me write whatever and whenever I want with as little friction as possible.  WordPress fits that maxim.  Plus I think <a href=\"http://photomatt.net/\">Matt Mullenweg</a> and the rest of the <a href=\"http://automattic.com/\">Automattic</a> team have pretty good taste, and I can get behind that.\n\n<hr />\n\nSo, what have we learned?\n\n<ul>\n<li>Adam is using this post to justify his decisions to himself.</li>\n<li>Adam changed some software around and hopes you like it.</li>\n<li>Don't spend too much time waffling on software choices.  Just take a shot in the middle.</li>\n<li>Making an educated choice somewhere in the middle of build vs. buy is important</li>\n</ul>\n\nSee, I told you this wasn't one of those posts where I apologize for not posting for many months and then promise to post more frequently.  Though with my luck, I won't post again for three weeks ;)\n",
				"date_published": "2007-10-20T16:51:44-07:00",
				"url": "https://therealadam.com/2007/10/20/rejiggering-meets-build.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/16/application-design-with.html",
				"title": "Application Design with Garrett Dimon",
				"content_html": "<p>Did you see <!-- raw HTML omitted -->Garrett Dimon&rsquo;s slides from WebJam Session &lsquo;07<!-- raw HTML omitted -->?  You should!</p>\n<p>What impresses me is what Garrett&rsquo;s accomplished in designing his issue tracker without much use of intense graphics.  He&rsquo;s got a few icons here and there, but most of his design is based on color and typography.  As someone who is horrible at drawing, it gives me hope that I could some day build cool UIs.</p>\n",
				"content_text": "Did you see <a href=\"http://garrettdimon.com/archives/2007/9/23/webmaster_jam_session_2007_again/\">Garrett Dimon's slides from WebJam Session '07</a>?  You should!\n\nWhat impresses me is what Garrett's accomplished in designing his issue tracker without much use of intense graphics.  He's got a few icons here and there, but most of his design is based on color and typography.  As someone who is horrible at drawing, it gives me hope that I could some day build cool UIs.\n",
				"date_published": "2007-10-16T19:41:10-07:00",
				"url": "https://therealadam.com/2007/10/16/application-design-with.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/12/this-memory-isnt.html",
				"title": "This memory isn't going to manage itself",
				"content_html": "<p>On a whim, I took a shallow dive into the world of C this weekend.  <!-- raw HTML omitted -->Its been a long time since I delved into C<!-- raw HTML omitted -->.  I ended up spending nearly as much time tweaking a build script with the <!-- raw HTML omitted -->ever-amusing Rake<!-- raw HTML omitted --> as I did remembering my C skillz[1].  In the end, my goal was to write a simple program that just reads a file and writes it back out.  Nothing <code>cat</code> couldn&rsquo;t handle, sure, but you gotta start somewhere.</p>\n<p>Of course, the first thing you&rsquo;ll notice when you go from Ruby on Friday to C on Saturday is that <em>OMG I have to write fourteen-billion lines of code just to open a file?</em>  Well, yeah, you do.  But the language isn&rsquo;t <em>that</em> awful.  Munging file pointers, getting buffer sizes by <code>stat</code>ing a filename and all that, it&rsquo;s kinda fun.</p>\n<p>What&rsquo;s not fun?  Managing memory.  It&rsquo;d be fun if it wasn&rsquo;t just an express ticket on the memory leak train.  So lots of people have tried to tackle this.  I was playing with the <!-- raw HTML omitted -->Apache Portable Runtime<!-- raw HTML omitted --> or APR, in concert with all this C and they take an interesting tack in dealing with memory.</p>\n<h2 id=\"jumping-in-the-memory-pool\">Jumping in the memory pool</h2>\n<p>In the APR world, your application creates one or more <em>pools</em> that you then allocate memory from.  You create a &ldquo;root&rdquo; memory pool to start off with, but you can create as many further pools as you like.</p>\n<p>The idea is that as you transition from one area of functionality to another, you create a new pool.  Once you&rsquo;re done with that function, you destroy the pool and all the memory allocated to it goes away.  Including the stuff you forgot about.  Which is kinda rad, it being the case that memory leaks are leaks of (human) memory.</p>\n<p>This made me think of <!-- raw HTML omitted -->generational garbage collection<!-- raw HTML omitted -->.  Java&rsquo;s garbage collector does this clever trick where objects are initially created in a &ldquo;nursery&rdquo; with all the other recently created objects.  Since it&rsquo;s typical that objects are created and then quickly discarded, the nursery is basically the low-hanging fruit for the garbage collector to find memory when it needs to.</p>\n<h2 id=\"bring-that-funk-back-over-here\">Bring that funk back over here</h2>\n<p>Seems to me you could do the same thing with the APR&rsquo;s pools.  Create a new memory pool for every request, for example.  Then when you&rsquo;re done with the request, just delete the pool and don&rsquo;t worry.  The APR folks list examples of assigning pools to starting your application, parsing the configuration and then doing your actual processing.  That sounds reasonable to me too.</p>\n<p>This is probably not rocket science.  In fact, the developers of the APR readily acknowledge that tuning your app to work with this approach to memory management is the trickiest and most contentious[2] facet of developing with the APR.  In the next release, they&rsquo;re working on an alternative, just in case pools aren&rsquo;t your thing.</p>\n<p>Nonetheless, I find it pleasing that the world of C seems to have, perhaps, moved on from &ldquo;man up and manage your own memory, <em>we are C programmers!</em>&rdquo; to &ldquo;hey man, everyone has trouble with this stuff, give this approach a try!&rdquo;  At some point, with some problems, C becomes a necessity.  Anything that helps that out is moving the bar higher for the practice of programming.</p>\n<p>[1] Indeed, my build yaks are beautifully shorn</p>\n<p>[2] Perhaps you could say, <em>opinionated</em></p>\n",
				"content_text": "On a whim, I took a shallow dive into the world of C this weekend.  <a href=\"http://twitter.com/therealadam/statuses/316802932\">Its been a long time since I delved into C</a>.  I ended up spending nearly as much time tweaking a build script with the <a href=\"http://rake.rubyforge.org\">ever-amusing Rake</a> as I did remembering my C skillz[1].  In the end, my goal was to write a simple program that just reads a file and writes it back out.  Nothing `cat` couldn't handle, sure, but you gotta start somewhere.\n\nOf course, the first thing you'll notice when you go from Ruby on Friday to C on Saturday is that *OMG I have to write fourteen-billion lines of code just to open a file?*  Well, yeah, you do.  But the language isn't _that_ awful.  Munging file pointers, getting buffer sizes by `stat`ing a filename and all that, it's kinda fun.\n\nWhat's not fun?  Managing memory.  It'd be fun if it wasn't just an express ticket on the memory leak train.  So lots of people have tried to tackle this.  I was playing with the <a href=\"http://apr.apache.org/\">Apache Portable Runtime</a> or APR, in concert with all this C and they take an interesting tack in dealing with memory.\n\n## Jumping in the memory pool\n\nIn the APR world, your application creates one or more _pools_ that you then allocate memory from.  You create a \"root\" memory pool to start off with, but you can create as many further pools as you like.\n\nThe idea is that as you transition from one area of functionality to another, you create a new pool.  Once you're done with that function, you destroy the pool and all the memory allocated to it goes away.  Including the stuff you forgot about.  Which is kinda rad, it being the case that memory leaks are leaks of (human) memory.\n\nThis made me think of <a href=\"http://en.wikipedia.org/wiki/Generational_garbage_collection\">generational garbage collection</a>.  Java's garbage collector does this clever trick where objects are initially created in a \"nursery\" with all the other recently created objects.  Since it's typical that objects are created and then quickly discarded, the nursery is basically the low-hanging fruit for the garbage collector to find memory when it needs to.\n\n## Bring that funk back over here\n\nSeems to me you could do the same thing with the APR's pools.  Create a new memory pool for every request, for example.  Then when you're done with the request, just delete the pool and don't worry.  The APR folks list examples of assigning pools to starting your application, parsing the configuration and then doing your actual processing.  That sounds reasonable to me too.\n\nThis is probably not rocket science.  In fact, the developers of the APR readily acknowledge that tuning your app to work with this approach to memory management is the trickiest and most contentious[2] facet of developing with the APR.  In the next release, they're working on an alternative, just in case pools aren't your thing.\n\nNonetheless, I find it pleasing that the world of C seems to have, perhaps, moved on from \"man up and manage your own memory, *we are C programmers!*\" to \"hey man, everyone has trouble with this stuff, give this approach a try!\"  At some point, with some problems, C becomes a necessity.  Anything that helps that out is moving the bar higher for the practice of programming.\n\n[1] Indeed, my build yaks are beautifully shorn\n\n[2] Perhaps you could say, _opinionated_\n",
				"date_published": "2007-10-12T17:59:42-07:00",
				"url": "https://therealadam.com/2007/10/12/this-memory-isnt.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/10/alex-the-cognitive.html",
				"title": "Alex the cognitive parrot",
				"content_html": "<p><!-- raw HTML omitted -->Best obituary ever<!-- raw HTML omitted -->:</p>\n<blockquote>\n<p>A shame, then, that he is now, in the words of Monty Python, an ex-parrot.</p>\n</blockquote>\n<p>Alex The Parrot was adopted by a scientist who wasn&rsquo;t, at the time, involved in linguistics.  But, in teaching Alex to speak, she ended up teaching him things like counting and basic recognition of objects.  Over the years, this evolved into all manners of experiments on what kind of cognition Alex was capable of.</p>\n<blockquote>\n<p>By the end, said Dr Pepperberg, Alex had the intelligence of a five-year-old child and had not reached his full potential. He had a vocabulary of 150 words. He knew the names of 50 objects and could, in addition, describe their colours, shapes and the materials they were made from. He could answer questions about objects' properties, even when he had not seen that particular combination of properties before. He could ask for things - and would reject a proffered item and ask again if it was not what he wanted. He understood, and could discuss, the concepts of &ldquo;bigger&rdquo;, &ldquo;smaller&rdquo;, &ldquo;same&rdquo; and &ldquo;different&rdquo;. And he could count up to six, including the number zero (and was grappling with the concept of &ldquo;seven&rdquo; when he died). He even knew when and how to apologise if he annoyed Dr Pepperberg or her collaborators.</p>\n</blockquote>\n<p>Animals are just amazing.</p>\n",
				"content_text": "<a href=\"http://economist.com/obituary/displaystory.cfm?story_id=9828615\">Best obituary ever</a>:\n\n> A shame, then, that he is now, in the words of Monty Python, an ex-parrot.\n\nAlex The Parrot was adopted by a scientist who wasn't, at the time, involved in linguistics.  But, in teaching Alex to speak, she ended up teaching him things like counting and basic recognition of objects.  Over the years, this evolved into all manners of experiments on what kind of cognition Alex was capable of.\n\n> By the end, said Dr Pepperberg, Alex had the intelligence of a five-year-old child and had not reached his full potential. He had a vocabulary of 150 words. He knew the names of 50 objects and could, in addition, describe their colours, shapes and the materials they were made from. He could answer questions about objects' properties, even when he had not seen that particular combination of properties before. He could ask for things - and would reject a proffered item and ask again if it was not what he wanted. He understood, and could discuss, the concepts of \"bigger\", \"smaller\", \"same\" and \"different\". And he could count up to six, including the number zero (and was grappling with the concept of \"seven\" when he died). He even knew when and how to apologise if he annoyed Dr Pepperberg or her collaborators.\n\nAnimals are just amazing.\n",
				"date_published": "2007-10-10T11:28:25-07:00",
				"url": "https://therealadam.com/2007/10/10/alex-the-cognitive.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/09/making-the-simple.html",
				"title": "Making the simple complex",
				"content_html": "<p><!-- raw HTML omitted -->Newton&rsquo;s Third Law of Physics<!-- raw HTML omitted -->: <em>All forces occur in pairs, and these two forces are equal in magnitude and opposite in direction.</em></p>\n<p>Newton&rsquo;s Third Law, applied to software: <!-- raw HTML omitted -->To make something generic is to make the simple things complex.<!-- raw HTML omitted --></p>\n",
				"content_text": "<a href=\"http://en.wikipedia.org/wiki/Newton%2527s_law%23Newton.27s_third_law:_law_of_reciprocal_actions\">Newton's Third Law of Physics</a>: _All forces occur in pairs, and these two forces are equal in magnitude and opposite in direction._\n\nNewton's Third Law, applied to software: <strong>To make something generic is to make the simple things complex.</strong>\n",
				"date_published": "2007-10-09T20:16:49-07:00",
				"url": "https://therealadam.com/2007/10/09/making-the-simple.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/10/08/making-sense-of.html",
				"title": "Making sense of Fitts\u0026#39; Law",
				"content_html": "<p>Particle Tree has an <!-- raw HTML omitted -->excellent article on Fitts' Law<!-- raw HTML omitted -->.  That&rsquo;s the one tells designers to put the Dock and Start Menu on the edges of the screen.  You definitely want to check it out, if only for the terrific images used as demonstration.</p>\n<p>Of course, if you&rsquo;re more about the math (bad news, UI design is <em>a lot</em> of math) you could read up on <!-- raw HTML omitted -->Fitts' Law on Wikipedia<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Particle Tree has an <a href=\"http://particletree.com/features/visualizing-fittss-law/\">excellent article on Fitts' Law</a>.  That's the one tells designers to put the Dock and Start Menu on the edges of the screen.  You definitely want to check it out, if only for the terrific images used as demonstration.\n\nOf course, if you're more about the math (bad news, UI design is _a lot_ of math) you could read up on <a href=\"http://en.wikipedia.org/wiki/Fitts'_law\">Fitts' Law on Wikipedia</a>.\n",
				"date_published": "2007-10-08T06:14:05-07:00",
				"url": "https://therealadam.com/2007/10/08/making-sense-of.html"
			},
			{
				"id": "http://therealadam-ng.micro.blog/2007/08/26/check-your-head.html",
				"title": "Check your head",
				"content_html": "<p>Paul Graham&rsquo;s latest essay returns to ideas for which I first noticed him.  <!-- raw HTML omitted -->Holding a Program in One&rsquo;s Head<!-- raw HTML omitted --> asks what kind of intellectual exercise software development is (spoiler: one that requires focused and uninterrupted thinking) and then suggests guidelines for effective programmer working spaces (small teams, distraction-free workspaces).  See also: <!-- raw HTML omitted -->Test #8 on the 12 Steps to Better Code<!-- raw HTML omitted -->.</p>\n",
				"content_text": "Paul Graham's latest essay returns to ideas for which I first noticed him.  <a href=\"http://paulgraham.com/head.html\">Holding a Program in One's Head</a> asks what kind of intellectual exercise software development is (spoiler: one that requires focused and uninterrupted thinking) and then suggests guidelines for effective programmer working spaces (small teams, distraction-free workspaces).  See also: <a href=\"http://www.joelonsoftware.com/articles/fog0000000043.html\">Test #8 on the 12 Steps to Better Code</a>.\n",
				"date_published": "2007-08-26T21:41:00-07:00",
				"url": "https://therealadam.com/2007/08/26/check-your-head.html"
			}
	]
}
